class UIHandler
!!!12810380.java!!!	UIHandler(inout outerInstance : LatinIME)
            super(outerInstance);
!!!12810508.java!!!	onCreate() : void
            final Resources res = getOuterInstance().getResources();
            mDelayUpdateSuggestions =
                    res.getInteger(R.integer.config_delay_update_suggestions);
            mDelayUpdateShiftState =
                    res.getInteger(R.integer.config_delay_update_shift_state);
            mDoubleSpacesTurnIntoPeriodTimeout = res.getInteger(
                    R.integer.config_double_spaces_turn_into_period_timeout);
!!!12810636.java!!!	handleMessage(inout msg : Message) : void
            final LatinIME latinIme = getOuterInstance();
            final KeyboardSwitcher switcher = latinIme.mKeyboardSwitcher;
            switch (msg.what) {
            case MSG_UPDATE_SUGGESTIONS:
                latinIme.updateSuggestions();
                break;
            case MSG_UPDATE_SHIFT_STATE:
                switcher.updateShiftState();
                break;
            case MSG_SET_BIGRAM_PREDICTIONS:
                latinIme.updateBigramPredictions();
                break;
            }
!!!12810764.java!!!	postUpdateSuggestions() : void
            removeMessages(MSG_UPDATE_SUGGESTIONS);
            sendMessageDelayed(obtainMessage(MSG_UPDATE_SUGGESTIONS), mDelayUpdateSuggestions);
!!!12810892.java!!!	cancelUpdateSuggestions() : void
            removeMessages(MSG_UPDATE_SUGGESTIONS);
!!!12811020.java!!!	hasPendingUpdateSuggestions() : boolean
            return hasMessages(MSG_UPDATE_SUGGESTIONS);
!!!12811148.java!!!	postUpdateShiftState() : void
            removeMessages(MSG_UPDATE_SHIFT_STATE);
            sendMessageDelayed(obtainMessage(MSG_UPDATE_SHIFT_STATE), mDelayUpdateShiftState);
!!!12811276.java!!!	cancelUpdateShiftState() : void
            removeMessages(MSG_UPDATE_SHIFT_STATE);
!!!12811404.java!!!	postUpdateBigramPredictions() : void
            removeMessages(MSG_SET_BIGRAM_PREDICTIONS);
            sendMessageDelayed(obtainMessage(MSG_SET_BIGRAM_PREDICTIONS), mDelayUpdateSuggestions);
!!!12811532.java!!!	cancelUpdateBigramPredictions() : void
            removeMessages(MSG_SET_BIGRAM_PREDICTIONS);
!!!12811660.java!!!	startDoubleSpacesTimer() : void
            removeMessages(MSG_SPACE_TYPED);
            sendMessageDelayed(obtainMessage(MSG_SPACE_TYPED), mDoubleSpacesTurnIntoPeriodTimeout);
!!!12811788.java!!!	cancelDoubleSpacesTimer() : void
            removeMessages(MSG_SPACE_TYPED);
!!!12811916.java!!!	isAcceptingDoubleSpaces() : boolean
            return hasMessages(MSG_SPACE_TYPED);
!!!12812044.java!!!	startOrientationChanging() : void
            removeMessages(MSG_PENDING_IMS_CALLBACK);
            resetPendingImsCallback();
            mIsOrientationChanging = true;
            final LatinIME latinIme = getOuterInstance();
            if (latinIme.isInputViewShown()) {
                latinIme.mKeyboardSwitcher.saveKeyboardState();
            }
!!!12812172.java!!!	resetPendingImsCallback() : void
            mHasPendingFinishInputView = false;
            mHasPendingFinishInput = false;
            mHasPendingStartInput = false;
!!!12812300.java!!!	executePendingImsCallback(inout latinIme : LatinIME, inout editorInfo : EditorInfo, inout restarting : boolean) : void
            if (mHasPendingFinishInputView)
                latinIme.onFinishInputViewInternal(mHasPendingFinishInput);
            if (mHasPendingFinishInput)
                latinIme.onFinishInputInternal();
            if (mHasPendingStartInput)
                latinIme.onStartInputInternal(editorInfo, restarting);
            resetPendingImsCallback();
!!!12812428.java!!!	onStartInput(inout editorInfo : EditorInfo, inout restarting : boolean) : void
            if (hasMessages(MSG_PENDING_IMS_CALLBACK)) {
                // Typically this is the second onStartInput after orientation changed.
                mHasPendingStartInput = true;
            } else {
                if (mIsOrientationChanging && restarting) {
                    // This is the first onStartInput after orientation changed.
                    mIsOrientationChanging = false;
                    mPendingSuccessiveImsCallback = true;
                }
                final LatinIME latinIme = getOuterInstance();
                executePendingImsCallback(latinIme, editorInfo, restarting);
                latinIme.onStartInputInternal(editorInfo, restarting);
            }
!!!12812556.java!!!	onStartInputView(inout editorInfo : EditorInfo, inout restarting : boolean) : void
            if (hasMessages(MSG_PENDING_IMS_CALLBACK)
                    && KeyboardId.equivalentEditorInfoForKeyboard(editorInfo, mAppliedEditorInfo)) {
                // Typically this is the second onStartInputView after orientation changed.
                resetPendingImsCallback();
            } else {
                if (mPendingSuccessiveImsCallback) {
                    // This is the first onStartInputView after orientation changed.
                    mPendingSuccessiveImsCallback = false;
                    resetPendingImsCallback();
                    sendMessageDelayed(obtainMessage(MSG_PENDING_IMS_CALLBACK),
                            PENDING_IMS_CALLBACK_DURATION);
                }
                final LatinIME latinIme = getOuterInstance();
                executePendingImsCallback(latinIme, editorInfo, restarting);
                latinIme.onStartInputViewInternal(editorInfo, restarting);
                latinIme.initDpadHandler();
                mAppliedEditorInfo = editorInfo;
            }
!!!12812684.java!!!	onFinishInputView(inout finishingInput : boolean) : void
            if (hasMessages(MSG_PENDING_IMS_CALLBACK)) {
                // Typically this is the first onFinishInputView after orientation changed.
                mHasPendingFinishInputView = true;
            } else {
                final LatinIME latinIme = getOuterInstance();
                latinIme.onFinishInputViewInternal(finishingInput);
                mAppliedEditorInfo = null;
            }
!!!12812812.java!!!	onFinishInput() : void
            if (hasMessages(MSG_PENDING_IMS_CALLBACK)) {
                // Typically this is the first onFinishInput after orientation changed.
                mHasPendingFinishInput = true;
            } else {
                final LatinIME latinIme = getOuterInstance();
                executePendingImsCallback(latinIme, null, false);
                latinIme.onFinishInputInternal();
            }
