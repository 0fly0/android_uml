class LongSparseLongArray
!!!15813004.java!!!	LongSparseLongArray()
        this(10);
!!!15813132.java!!!	LongSparseLongArray(in initialCapacity : int)
        initialCapacity = ArrayUtils.idealLongArraySize(initialCapacity);

        mKeys = new long[initialCapacity];
        mValues = new long[initialCapacity];
        mSize = 0;
!!!15813260.java!!!	clone() : LongSparseLongArray
        LongSparseLongArray clone = null;
        try {
            clone = (LongSparseLongArray) super.clone();
            clone.mKeys = mKeys.clone();
            clone.mValues = mValues.clone();
        } catch (CloneNotSupportedException cnse) {
            /* ignore */
        }
        return clone;
!!!15813388.java!!!	get(in key : long) : long
        return get(key, 0);
!!!15813516.java!!!	get(in key : long, in valueIfKeyNotFound : long) : long
        int i = Arrays.binarySearch(mKeys, 0, mSize, key);

        if (i < 0) {
            return valueIfKeyNotFound;
        } else {
            return mValues[i];
        }
!!!15813644.java!!!	delete(in key : long) : void
        int i = Arrays.binarySearch(mKeys, 0, mSize, key);

        if (i >= 0) {
            removeAt(i);
        }
!!!15813772.java!!!	removeAt(in index : int) : void
        System.arraycopy(mKeys, index + 1, mKeys, index, mSize - (index + 1));
        System.arraycopy(mValues, index + 1, mValues, index, mSize - (index + 1));
        mSize--;
!!!15813900.java!!!	put(in key : long, in value : long) : void
        int i = Arrays.binarySearch(mKeys, 0, mSize, key);

        if (i >= 0) {
            mValues[i] = value;
        } else {
            i = ~i;

            if (mSize >= mKeys.length) {
                growKeyAndValueArrays(mSize + 1);
            }

            if (mSize - i != 0) {
                System.arraycopy(mKeys, i, mKeys, i + 1, mSize - i);
                System.arraycopy(mValues, i, mValues, i + 1, mSize - i);
            }

            mKeys[i] = key;
            mValues[i] = value;
            mSize++;
        }
!!!15814028.java!!!	size() : int
        return mSize;
!!!15814156.java!!!	keyAt(in index : int) : long
        return mKeys[index];
!!!15814284.java!!!	valueAt(in index : int) : long
        return mValues[index];
!!!15814412.java!!!	indexOfKey(in key : long) : int
        return Arrays.binarySearch(mKeys, 0, mSize, key);
!!!15814540.java!!!	indexOfValue(in value : long) : int
        for (int i = 0; i < mSize; i++)
            if (mValues[i] == value)
                return i;

        return -1;
!!!15814668.java!!!	clear() : void
        mSize = 0;
!!!15814796.java!!!	append(in key : long, in value : long) : void
        if (mSize != 0 && key <= mKeys[mSize - 1]) {
            put(key, value);
            return;
        }

        int pos = mSize;
        if (pos >= mKeys.length) {
            growKeyAndValueArrays(pos + 1);
        }

        mKeys[pos] = key;
        mValues[pos] = value;
        mSize = pos + 1;
!!!15814924.java!!!	growKeyAndValueArrays(in minNeededSize : int) : void
        int n = ArrayUtils.idealLongArraySize(minNeededSize);

        long[] nkeys = new long[n];
        long[] nvalues = new long[n];

        System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);
        System.arraycopy(mValues, 0, nvalues, 0, mValues.length);

        mKeys = nkeys;
        mValues = nvalues;
