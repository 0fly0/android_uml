format 74
"math" // _unknown::java::math
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/math/"
  java_package "java.math"
  classview 130203 "math"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 166171 "BigDecimal"
      visibility public 
      nactuals 1
      actual class class_ref 139675 // Comparable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An immutable arbitrary-precision signed decimal.

<p>A value is represented by an arbitrary-precision \"unscaled value\" and a signed 32-bit \"scale\",
combined thus: {@code unscaled * 10<sup>-scale</sup>}. See {@link #unscaledValue} and {@link #scale}.

<p>Most operations allow you to supply a {@link MathContext} to specify a desired rounding mode."
      classrelation 220699 // <generalisation>
	relation 220699 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 220699 // <generalisation>
	  b parent class_ref 148379 // Number
      end

      classrelation 220827 // <realization>
	relation 220827 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 220827 // <realization>
	  b parent class_ref 139675 // Comparable
      end

      classrelation 220955 // <realization>
	relation 220955 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 220955 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 202139 "ROUND_UP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where positive values are rounded towards positive infinity
and negative values towards negative infinity.

@see RoundingMode#UP
"
      end

      attribute 202267 "ROUND_DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where the values are rounded towards zero.

@see RoundingMode#DOWN
"
      end

      attribute 202395 "ROUND_CEILING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards positive infinity. For positive values
this rounding mode behaves as {@link #ROUND_UP}, for negative values as
{@link #ROUND_DOWN}.

@see RoundingMode#CEILING
"
      end

      attribute 202523 "ROUND_FLOOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards negative infinity. For positive values
this rounding mode behaves as {@link #ROUND_DOWN}, for negative values as
{@link #ROUND_UP}.

@see RoundingMode#FLOOR
"
      end

      attribute 202651 "ROUND_HALF_UP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where values are rounded towards the nearest neighbor.
Ties are broken by rounding up.

@see RoundingMode#HALF_UP
"
      end

      attribute 202779 "ROUND_HALF_DOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where values are rounded towards the nearest neighbor.
Ties are broken by rounding down.

@see RoundingMode#HALF_DOWN
"
      end

      attribute 202907 "ROUND_HALF_EVEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where values are rounded towards the nearest neighbor.
Ties are broken by rounding to the even neighbor.

@see RoundingMode#HALF_EVEN
"
      end

      attribute 203035 "ROUND_UNNECESSARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where the rounding operations throws an {@code
ArithmeticException} for the case that rounding is necessary, i.e. for
the case that the value cannot be represented exactly.

@see RoundingMode#UNNECESSARY
"
      end

      attribute 203163 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6108874887143696463L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is the serialVersionUID used by the sun implementation. "
      end

      attribute 203291 "LOG10_2"
	class_attribute const_attribute private explicit_type "double"
	init_value " 0.3010299956639812"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The double closest to {@code Log10(2)}. "
      end

      classrelation 221083 // toStringImage (<unidirectional association>)
	relation 221083 --->
	  a role_name "toStringImage" init_value " null" private
	    comment " The <code>String</code> representation is cached. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 221083 // toStringImage (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 203419 "hashCode"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Cache for the hash code. "
      end

      classrelation 221211 // FIVE_POW (<unidirectional association>)
	relation 221211 --->
	  a role_name "FIVE_POW" multiplicity "[]" class_relation const_relation private
	    comment "
An array with powers of five that fit in the type <code>long</code>
(<code>5^0,5^1,...,5^27</code>).

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 221211 // FIVE_POW (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      classrelation 221339 // TEN_POW (<unidirectional association>)
	relation 221339 --->
	  a role_name "TEN_POW" multiplicity "[]" class_relation const_relation private
	    comment "
An array with powers of ten that fit in the type <code>long</code>
(<code>10^0,10^1,...,10^18</code>).

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 221339 // TEN_POW (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      attribute 203547 "LONG_FIVE_POW"
	class_attribute const_attribute private explicit_type "long"
	multiplicity "[]"
	init_value " new long[]
    {   1L,
        5L,
        25L,
        125L,
        625L,
        3125L,
        15625L,
        78125L,
        390625L,
        1953125L,
        9765625L,
        48828125L,
        244140625L,
        1220703125L,
        6103515625L,
        30517578125L,
        152587890625L,
        762939453125L,
        3814697265625L,
        19073486328125L,
        95367431640625L,
        476837158203125L,
        2384185791015625L,
        11920928955078125L,
        59604644775390625L,
        298023223876953125L,
        1490116119384765625L,
        7450580596923828125L, }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203675 "LONG_FIVE_POW_BIT_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[LONG_FIVE_POW.length]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203803 "LONG_POWERS_OF_TEN_BIT_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[MathUtils.LONG_POWERS_OF_TEN.length]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 203931 "BI_SCALED_BY_ZERO_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 11"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 221467 // BI_SCALED_BY_ZERO (<unidirectional association>)
	relation 221467 --->
	  a role_name "BI_SCALED_BY_ZERO" multiplicity "[]" init_value " new BigDecimal[BI_SCALED_BY_ZERO_LENGTH]" class_relation const_relation private
	    comment "
An array with the first <code>BigInteger</code> scaled by zero.
(<code>[0,0],[1,0],...,[10,0]</code>).

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 221467 // BI_SCALED_BY_ZERO (<unidirectional association>)
	  b parent class_ref 166171 // BigDecimal
      end

      classrelation 221595 // ZERO_SCALED_BY (<unidirectional association>)
	relation 221595 --->
	  a role_name "ZERO_SCALED_BY" multiplicity "[]" init_value " new BigDecimal[11]" class_relation const_relation private
	    comment "
An array with the zero number scaled by the first positive scales.
(<code>0*10^0, 0*10^1, ..., 0*10^10</code>).

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 221595 // ZERO_SCALED_BY (<unidirectional association>)
	  b parent class_ref 166171 // BigDecimal
      end

      attribute 204059 "CH_ZEROS"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " new char[100]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " An array filled with characters <code>'0'</code>. "
      end

      extra_member 129691 "initialization"
	
	cpp "" ""
	java "  static {
        Arrays.fill(CH_ZEROS, '0');

        for (int i = 0; i < ZERO_SCALED_BY.length; ++i) {
            BI_SCALED_BY_ZERO[i] = new BigDecimal(i, 0);
            ZERO_SCALED_BY[i] = new BigDecimal(0, i);
        }
        for (int i = 0; i < LONG_FIVE_POW_BIT_LENGTH.length; ++i) {
            LONG_FIVE_POW_BIT_LENGTH[i] = bitLength(LONG_FIVE_POW[i]);
        }
        for (int i = 0; i < LONG_POWERS_OF_TEN_BIT_LENGTH.length; ++i) {
            LONG_POWERS_OF_TEN_BIT_LENGTH[i] = bitLength(MathUtils.LONG_POWERS_OF_TEN[i]);
        }

        // Taking the references of useful powers.
        TEN_POW = Multiplication.bigTenPows;
        FIVE_POW = Multiplication.bigFivePows;
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 221723 // ZERO (<unidirectional association>)
	relation 221723 --->
	  a role_name "ZERO" init_value " new BigDecimal(0, 0)" class_relation const_relation public
	    comment "
The constant zero as a {@code BigDecimal}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 221723 // ZERO (<unidirectional association>)
	  b parent class_ref 166171 // BigDecimal
      end

      classrelation 221851 // ONE (<unidirectional association>)
	relation 221851 --->
	  a role_name "ONE" init_value " new BigDecimal(1, 0)" class_relation const_relation public
	    comment "
The constant one as a {@code BigDecimal}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 221851 // ONE (<unidirectional association>)
	  b parent class_ref 166171 // BigDecimal
      end

      classrelation 221979 // TEN (<unidirectional association>)
	relation 221979 --->
	  a role_name "TEN" init_value " new BigDecimal(10, 0)" class_relation const_relation public
	    comment "
The constant ten as a {@code BigDecimal}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 221979 // TEN (<unidirectional association>)
	  b parent class_ref 166171 // BigDecimal
      end

      classrelation 222107 // intVal (<unidirectional association>)
	relation 222107 --->
	  a role_name "intVal" private
	    comment "
The arbitrary precision integer (unscaled value) in the internal
representation of {@code BigDecimal}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 222107 // intVal (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      attribute 204187 "bitLength"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 204315 "smallValue"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 204443 "scale"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The 32-bit integer scale in the internal representation of {@code BigDecimal}.
"
      end

      attribute 204571 "precision"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Represent the number of decimal digits in the unscaled value. This
precision is calculated the first time, and used in the following calls
of method <code>precision()</code>. Note that some call to the private
method <code>inplaceRound()</code> could update this field.

@see #precision()
@see #inplaceRound(MathContext)
"
      end

      operation 489755 "BigDecimal"
	private explicit_return_type ""
	nparams 2
	  param in name "smallValue" explicit_type "long"
	  param in name "scale" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 489883 "BigDecimal"
	private explicit_return_type ""
	nparams 2
	  param in name "smallValue" explicit_type "int"
	  param in name "scale" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 490011 "BigDecimal"
	public explicit_return_type ""
	nparams 3
	  param inout name "in" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from a string representation
given as a character array.

@param in
           array of characters containing the string representation of
           this {@code BigDecimal}.
@param offset
           first index to be copied.
@param len
           number of characters to be used.
@throws NumberFormatException
            if {@code offset < 0 || len <= 0 || offset+len-1 < 0 ||
            offset+len-1 >= in.length}, or if {@code in} does not
            contain a valid string representation of a big decimal."
      end

      operation 490139 "BigDecimal"
	public explicit_return_type ""
	nparams 4
	  param inout name "in" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from a string representation
given as a character array.

@param in
           array of characters containing the string representation of
           this {@code BigDecimal}.
@param offset
           first index to be copied.
@param len
           number of characters to be used.
@param mc
           rounding mode and precision for the result of this operation.
@throws NumberFormatException
            if {@code offset < 0 || len <= 0 || offset+len-1 < 0 ||
            offset+len-1 >= in.length}, or if {@code in} does not
            contain a valid string representation of a big decimal.
@throws ArithmeticException
            if {@code mc.precision > 0} and {@code mc.roundingMode ==
            UNNECESSARY} and the new big decimal cannot be represented
            within the given precision without rounding."
      end

      operation 490267 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from a string representation
given as a character array.

@param in
           array of characters containing the string representation of
           this {@code BigDecimal}.
@throws NumberFormatException
            if {@code in} does not contain a valid string representation
            of a big decimal."
      end

      operation 490395 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" explicit_type "char"
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from a string representation
given as a character array. The result is rounded according to the
specified math context.

@param in
           array of characters containing the string representation of
           this {@code BigDecimal}.
@param mc
           rounding mode and precision for the result of this operation.
@throws NumberFormatException
            if {@code in} does not contain a valid string representation
            of a big decimal.
@throws ArithmeticException
            if {@code mc.precision > 0} and {@code mc.roundingMode ==
            UNNECESSARY} and the new big decimal cannot be represented
            within the given precision without rounding."
      end

      operation 490523 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from a string
representation.

@throws NumberFormatException
            if {@code val} does not contain a valid string representation
            of a big decimal."
      end

      operation 490651 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "val" type class_ref 3399692 // String
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from a string
representation. The result is rounded according to the specified math
context.

@param mc
           rounding mode and precision for the result of this operation.
@throws NumberFormatException
            if {@code val} does not contain a valid string representation
            of a big decimal.
@throws ArithmeticException
            if {@code mc.precision > 0} and {@code mc.roundingMode ==
            UNNECESSARY} and the new big decimal cannot be represented
            within the given precision without rounding."
      end

      operation 490779 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from the 64bit double
{@code val}. The constructed big decimal is equivalent to the given
double. For example, {@code new BigDecimal(0.1)} is equal to {@code
0.1000000000000000055511151231257827021181583404541015625}. This happens
as {@code 0.1} cannot be represented exactly in binary.
<p>
To generate a big decimal instance which is equivalent to {@code 0.1} use
the {@code BigDecimal(String)} constructor.

@param val
           double value to be converted to a {@code BigDecimal} instance.
@throws NumberFormatException
            if {@code val} is infinity or not a number."
      end

      operation 490907 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "double"
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from the 64bit double
{@code val}. The constructed big decimal is equivalent to the given
double. For example, {@code new BigDecimal(0.1)} is equal to {@code
0.1000000000000000055511151231257827021181583404541015625}. This happens
as {@code 0.1} cannot be represented exactly in binary.
<p>
To generate a big decimal instance which is equivalent to {@code 0.1} use
the {@code BigDecimal(String)} constructor.

@param val
           double value to be converted to a {@code BigDecimal} instance.
@param mc
           rounding mode and precision for the result of this operation.
@throws NumberFormatException
            if {@code val} is infinity or not a number.
@throws ArithmeticException
            if {@code mc.precision > 0} and {@code mc.roundingMode ==
            UNNECESSARY} and the new big decimal cannot be represented
            within the given precision without rounding."
      end

      operation 491035 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from the given big integer
{@code val}. The scale of the result is {@code 0}."
      end

      operation 491163 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from the given big integer
{@code val}. The scale of the result is {@code 0}.

@param mc
           rounding mode and precision for the result of this operation.
@throws ArithmeticException
            if {@code mc.precision > 0} and {@code mc.roundingMode ==
            UNNECESSARY} and the new big decimal cannot be represented
            within the given precision without rounding."
      end

      operation 491291 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param inout name "unscaledVal" type class_ref 166299 // BigInteger
	  param in name "scale" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from a given unscaled value
{@code unscaledVal} and a given scale. The value of this instance is
{@code unscaledVal * 10<sup>-scale</sup>}).

@throws NullPointerException
            if {@code unscaledVal == null}."
      end

      operation 491419 "BigDecimal"
	public explicit_return_type ""
	nparams 3
	  param inout name "unscaledVal" type class_ref 166299 // BigInteger
	  param in name "scale" explicit_type "int"
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from a given unscaled value
{@code unscaledVal} and a given scale. The value of this instance is
{@code unscaledVal * 10<sup>-scale</sup>). The result is rounded according
to the specified math context.

@param mc
           rounding mode and precision for the result of this operation.
@throws ArithmeticException
            if {@code mc.precision > 0} and {@code mc.roundingMode ==
            UNNECESSARY} and the new big decimal cannot be represented
            within the given precision without rounding.
@throws NullPointerException
            if {@code unscaledVal == null}."
      end

      operation 491547 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from the given int
{@code val}. The scale of the result is 0.

@param val
           int value to be converted to a {@code BigDecimal} instance."
      end

      operation 491675 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "int"
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from the given int {@code
val}. The scale of the result is {@code 0}. The result is rounded
according to the specified math context.

@param val
           int value to be converted to a {@code BigDecimal} instance.
@param mc
           rounding mode and precision for the result of this operation.
@throws ArithmeticException
            if {@code mc.precision > 0} and {@code c.roundingMode ==
            UNNECESSARY} and the new big decimal cannot be represented
            within the given precision without rounding."
      end

      operation 491803 "BigDecimal"
	public explicit_return_type ""
	nparams 1
	  param in name "val" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from the given long {@code
val}. The scale of the result is {@code 0}.

@param val
           long value to be converted to a {@code BigDecimal} instance."
      end

      operation 491931 "BigDecimal"
	public explicit_return_type ""
	nparams 2
	  param in name "val" explicit_type "long"
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigDecimal} instance from the given long {@code
val}. The scale of the result is {@code 0}. The result is rounded
according to the specified math context.

@param val
           long value to be converted to a {@code BigDecimal} instance.
@param mc
           rounding mode and precision for the result of this operation.
@throws ArithmeticException
            if {@code mc.precision > 0} and {@code mc.roundingMode ==
            UNNECESSARY} and the new big decimal cannot be represented
            within the given precision without rounding."
      end

      operation 492059 "valueOf"
	class_operation public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param in name "unscaledVal" explicit_type "long"
	  param in name "scale" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Public Methods 

Returns a new {@code BigDecimal} instance whose value is equal to {@code
unscaledVal * 10<sup>-scale</sup>}). The scale of the result is {@code
scale}, and its unscaled value is {@code unscaledVal}."
      end

      operation 492187 "valueOf"
	class_operation public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "unscaledVal" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} instance whose value is equal to {@code
unscaledVal}. The scale of the result is {@code 0}, and its unscaled
value is {@code unscaledVal}.

@param unscaledVal
           value to be converted to a {@code BigDecimal}.
@return {@code BigDecimal} instance with the value {@code unscaledVal}."
      end

      operation 492315 "valueOf"
	class_operation public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} instance whose value is equal to {@code
val}. The new decimal is constructed as if the {@code BigDecimal(String)}
constructor is called with an argument which is equal to {@code
Double.toString(val)}. For example, {@code valueOf(\"0.1\")} is converted to
(unscaled=1, scale=1), although the double {@code 0.1} cannot be
represented exactly as a double value. In contrast to that, a new {@code
BigDecimal(0.1)} instance has the value {@code
0.1000000000000000055511151231257827021181583404541015625} with an
unscaled value {@code 1000000000000000055511151231257827021181583404541015625}
and the scale {@code 55}.

@param val
           double value to be converted to a {@code BigDecimal}.
@return {@code BigDecimal} instance with the value {@code val}.
@throws NumberFormatException
            if {@code val} is infinite or {@code val} is not a number"
      end

      operation 492443 "add"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "augend" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this + augend}.
The scale of the result is the maximum of the scales of the two
arguments.

@param augend
           value to be added to {@code this}.
@return {@code this + augend}.
@throws NullPointerException
            if {@code augend == null}."
      end

      operation 492571 "addAndMult10"
	class_operation private return_type class_ref 166171 // BigDecimal
	nparams 3
	  param inout name "thisValue" type class_ref 166171 // BigDecimal
	  param inout name "augend" type class_ref 166171 // BigDecimal
	  param in name "diffScale" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 492699 "add"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "augend" type class_ref 166171 // BigDecimal
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this + augend}.
The result is rounded according to the passed context {@code mc}.

@param augend
           value to be added to {@code this}.
@param mc
           rounding mode and precision for the result of this operation.
@return {@code this + augend}.
@throws NullPointerException
            if {@code augend == null} or {@code mc == null}."
      end

      operation 492827 "subtract"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "subtrahend" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}.
The scale of the result is the maximum of the scales of the two arguments.

@param subtrahend
           value to be subtracted from {@code this}.
@return {@code this - subtrahend}.
@throws NullPointerException
            if {@code subtrahend == null}."
      end

      operation 492955 "subtract"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "subtrahend" type class_ref 166171 // BigDecimal
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}.
The result is rounded according to the passed context {@code mc}.

@param subtrahend
           value to be subtracted from {@code this}.
@param mc
           rounding mode and precision for the result of this operation.
@return {@code this - subtrahend}.
@throws NullPointerException
            if {@code subtrahend == null} or {@code mc == null}."
      end

      operation 493083 "multiply"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "multiplicand" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this *
multiplicand}. The scale of the result is the sum of the scales of the
two arguments.

@param multiplicand
           value to be multiplied with {@code this}.
@return {@code this * multiplicand}.
@throws NullPointerException
            if {@code multiplicand == null}."
      end

      operation 493211 "multiply"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "multiplicand" type class_ref 166171 // BigDecimal
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this *
multiplicand}. The result is rounded according to the passed context
{@code mc}.

@param multiplicand
           value to be multiplied with {@code this}.
@param mc
           rounding mode and precision for the result of this operation.
@return {@code this * multiplicand}.
@throws NullPointerException
            if {@code multiplicand == null} or {@code mc == null}."
      end

      operation 493339 "divide"
	public return_type class_ref 166171 // BigDecimal
	nparams 3
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	  param in name "scale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
As scale of the result the parameter {@code scale} is used. If rounding
is required to meet the specified scale, then the specified rounding mode
{@code roundingMode} is applied.

@param divisor
           value by which {@code this} is divided.
@param scale
           the scale of the result returned.
@param roundingMode
           rounding mode to be used to round the result.
@return {@code this / divisor} rounded according to the given rounding
        mode.
@throws NullPointerException
            if {@code divisor == null}.
@throws IllegalArgumentException
            if {@code roundingMode} is not a valid rounding mode.
@throws ArithmeticException
            if {@code divisor == 0}.
@throws ArithmeticException
            if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
            necessary according to the given scale."
      end

      operation 493467 "divide"
	public return_type class_ref 166171 // BigDecimal
	nparams 3
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	  param in name "scale" explicit_type "int"
	  param inout name "roundingMode" type class_ref 166555 // RoundingMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
As scale of the result the parameter {@code scale} is used. If rounding
is required to meet the specified scale, then the specified rounding mode
{@code roundingMode} is applied.

@param divisor
           value by which {@code this} is divided.
@param scale
           the scale of the result returned.
@param roundingMode
           rounding mode to be used to round the result.
@return {@code this / divisor} rounded according to the given rounding
        mode.
@throws NullPointerException
            if {@code divisor == null} or {@code roundingMode == null}.
@throws ArithmeticException
            if {@code divisor == 0}.
@throws ArithmeticException
            if {@code roundingMode == RoundingMode.UNNECESSAR}Y and
            rounding is necessary according to the given scale and given
            precision."
      end

      operation 493595 "divideBigIntegers"
	class_operation private return_type class_ref 166171 // BigDecimal
	nparams 4
	  param inout name "scaledDividend" type class_ref 166299 // BigInteger
	  param inout name "scaledDivisor" type class_ref 166299 // BigInteger
	  param in name "scale" explicit_type "int"
	  param inout name "roundingMode" type class_ref 166555 // RoundingMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 493723 "dividePrimitiveLongs"
	class_operation private return_type class_ref 166171 // BigDecimal
	nparams 4
	  param in name "scaledDividend" explicit_type "long"
	  param in name "scaledDivisor" explicit_type "long"
	  param in name "scale" explicit_type "int"
	  param inout name "roundingMode" type class_ref 166555 // RoundingMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 493851 "divide"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	  param in name "roundingMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
The scale of the result is the scale of {@code this}. If rounding is
required to meet the specified scale, then the specified rounding mode
{@code roundingMode} is applied.

@param divisor
           value by which {@code this} is divided.
@param roundingMode
           rounding mode to be used to round the result.
@return {@code this / divisor} rounded according to the given rounding
        mode.
@throws NullPointerException
            if {@code divisor == null}.
@throws IllegalArgumentException
            if {@code roundingMode} is not a valid rounding mode.
@throws ArithmeticException
            if {@code divisor == 0}.
@throws ArithmeticException
            if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
            necessary according to the scale of this."
      end

      operation 493979 "divide"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	  param inout name "roundingMode" type class_ref 166555 // RoundingMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
The scale of the result is the scale of {@code this}. If rounding is
required to meet the specified scale, then the specified rounding mode
{@code roundingMode} is applied.

@param divisor
           value by which {@code this} is divided.
@param roundingMode
           rounding mode to be used to round the result.
@return {@code this / divisor} rounded according to the given rounding
        mode.
@throws NullPointerException
            if {@code divisor == null} or {@code roundingMode == null}.
@throws ArithmeticException
            if {@code divisor == 0}.
@throws ArithmeticException
            if {@code roundingMode == RoundingMode.UNNECESSARY} and
            rounding is necessary according to the scale of this."
      end

      operation 494107 "divide"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
The scale of the result is the difference of the scales of {@code this}
and {@code divisor}. If the exact result requires more digits, then the
scale is adjusted accordingly. For example, {@code 1/128 = 0.0078125}
which has a scale of {@code 7} and precision {@code 5}.

@param divisor
           value by which {@code this} is divided.
@return {@code this / divisor}.
@throws NullPointerException
            if {@code divisor == null}.
@throws ArithmeticException
            if {@code divisor == 0}.
@throws ArithmeticException
            if the result cannot be represented exactly."
      end

      operation 494235 "divide"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
The result is rounded according to the passed context {@code mc}. If the
passed math context specifies precision {@code 0}, then this call is
equivalent to {@code this.divide(divisor)}.

@param divisor
           value by which {@code this} is divided.
@param mc
           rounding mode and precision for the result of this operation.
@return {@code this / divisor}.
@throws NullPointerException
            if {@code divisor == null} or {@code mc == null}.
@throws ArithmeticException
            if {@code divisor == 0}.
@throws ArithmeticException
            if {@code mc.getRoundingMode() == UNNECESSARY} and rounding
            is necessary according {@code mc.getPrecision()}."
      end

      operation 494363 "divideToIntegralValue"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is the integral part of
{@code this / divisor}. The quotient is rounded down towards zero to the
next integer. For example, {@code 0.5/0.2 = 2}.

@param divisor
           value by which {@code this} is divided.
@return integral part of {@code this / divisor}.
@throws NullPointerException
            if {@code divisor == null}.
@throws ArithmeticException
            if {@code divisor == 0}."
      end

      operation 494491 "divideToIntegralValue"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is the integral part of
{@code this / divisor}. The quotient is rounded down towards zero to the
next integer. The rounding mode passed with the parameter {@code mc} is
not considered. But if the precision of {@code mc > 0} and the integral
part requires more digits, then an {@code ArithmeticException} is thrown.

@param divisor
           value by which {@code this} is divided.
@param mc
           math context which determines the maximal precision of the
           result.
@return integral part of {@code this / divisor}.
@throws NullPointerException
            if {@code divisor == null} or {@code mc == null}.
@throws ArithmeticException
            if {@code divisor == 0}.
@throws ArithmeticException
            if {@code mc.getPrecision() > 0} and the result requires more
            digits to be represented."
      end

      operation 494619 "remainder"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this % divisor}.
<p>
The remainder is defined as {@code this -
this.divideToIntegralValue(divisor) * divisor}.

@param divisor
           value by which {@code this} is divided.
@return {@code this % divisor}.
@throws NullPointerException
            if {@code divisor == null}.
@throws ArithmeticException
            if {@code divisor == 0}."
      end

      operation 494747 "remainder"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this % divisor}.
<p>
The remainder is defined as {@code this -
this.divideToIntegralValue(divisor) * divisor}.
<p>
The specified rounding mode {@code mc} is used for the division only.

@param divisor
           value by which {@code this} is divided.
@param mc
           rounding mode and precision to be used.
@return {@code this % divisor}.
@throws NullPointerException
            if {@code divisor == null}.
@throws ArithmeticException
            if {@code divisor == 0}.
@throws ArithmeticException
            if {@code mc.getPrecision() > 0} and the result of {@code
            this.divideToIntegralValue(divisor, mc)} requires more digits
            to be represented."
      end

      operation 494875 "divideAndRemainder"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} array which contains the integral part of
{@code this / divisor} at index 0 and the remainder {@code this %
divisor} at index 1. The quotient is rounded down towards zero to the
next integer.

@param divisor
           value by which {@code this} is divided.
@return {@code [this.divideToIntegralValue(divisor),
        this.remainder(divisor)]}.
@throws NullPointerException
            if {@code divisor == null}.
@throws ArithmeticException
            if {@code divisor == 0}.
@see #divideToIntegralValue
@see #remainder"
      end

      operation 495003 "divideAndRemainder"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "divisor" type class_ref 166171 // BigDecimal
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigDecimal} array which contains the integral part of
{@code this / divisor} at index 0 and the remainder {@code this %
divisor} at index 1. The quotient is rounded down towards zero to the
next integer. The rounding mode passed with the parameter {@code mc} is
not considered. But if the precision of {@code mc > 0} and the integral
part requires more digits, then an {@code ArithmeticException} is thrown.

@param divisor
           value by which {@code this} is divided.
@param mc
           math context which determines the maximal precision of the
           result.
@return {@code [this.divideToIntegralValue(divisor),
        this.remainder(divisor)]}.
@throws NullPointerException
            if {@code divisor == null}.
@throws ArithmeticException
            if {@code divisor == 0}.
@see #divideToIntegralValue
@see #remainder"
      end

      operation 495131 "pow"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this<sup>n</sup>}. The
scale of the result is {@code n * this.scale()}.

<p>{@code x.pow(0)} returns {@code 1}, even if {@code x == 0}.

<p>Implementation Note: The implementation is based on the ANSI standard
X3.274-1996 algorithm.

@throws ArithmeticException
            if {@code n < 0} or {@code n > 999999999}."
      end

      operation 495259 "pow"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param in name "n" explicit_type "int"
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this<sup>n</sup>}. The
result is rounded according to the passed context {@code mc}.

<p>Implementation Note: The implementation is based on the ANSI standard
X3.274-1996 algorithm.

@param mc
           rounding mode and precision for the result of this operation.
@throws ArithmeticException
            if {@code n < 0} or {@code n > 999999999}."
      end

      operation 495387 "abs"
	public return_type class_ref 166171 // BigDecimal
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is the absolute value of
{@code this}. The scale of the result is the same as the scale of this.

@return {@code abs(this)}"
      end

      operation 495515 "abs"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is the absolute value of
{@code this}. The result is rounded according to the passed context
{@code mc}.

@param mc
           rounding mode and precision for the result of this operation.
@return {@code abs(this)}"
      end

      operation 495643 "negate"
	public return_type class_ref 166171 // BigDecimal
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is the {@code -this}. The
scale of the result is the same as the scale of this.

@return {@code -this}"
      end

      operation 495771 "negate"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is the {@code -this}. The
result is rounded according to the passed context {@code mc}.

@param mc
           rounding mode and precision for the result of this operation.
@return {@code -this}"
      end

      operation 495899 "plus"
	public return_type class_ref 166171 // BigDecimal
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code +this}. The scale
of the result is the same as the scale of this.

@return {@code this}"
      end

      operation 496027 "plus"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code +this}. The result
is rounded according to the passed context {@code mc}.

@param mc
           rounding mode and precision for the result of this operation.
@return {@code this}, rounded"
      end

      operation 496155 "signum"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sign of this {@code BigDecimal}.

@return {@code -1} if {@code this < 0},
        {@code 0} if {@code this == 0},
        {@code 1} if {@code this > 0}."
      end

      operation 496283 "isZero"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 496411 "scale"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the scale of this {@code BigDecimal}. The scale is the number of
digits behind the decimal point. The value of this {@code BigDecimal} is
the {@code unsignedValue * 10<sup>-scale</sup>}. If the scale is negative,
then this {@code BigDecimal} represents a big integer.

@return the scale of this {@code BigDecimal}."
      end

      operation 496539 "precision"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the precision of this {@code BigDecimal}. The precision is the
number of decimal digits used to represent this decimal. It is equivalent
to the number of digits of the unscaled value. The precision of {@code 0}
is {@code 1} (independent of the scale).

@return the precision of this {@code BigDecimal}."
      end

      operation 496667 "decimalDigitsInLong"
	private explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 496795 "unscaledValue"
	public return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unscaled value (mantissa) of this {@code BigDecimal} instance
as a {@code BigInteger}. The unscaled value can be computed as
{@code this * 10<sup>scale</sup>}."
      end

      operation 496923 "round"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this}, rounded
according to the passed context {@code mc}.
<p>
If {@code mc.precision = 0}, then no rounding is performed.
<p>
If {@code mc.precision > 0} and {@code mc.roundingMode == UNNECESSARY},
then an {@code ArithmeticException} is thrown if the result cannot be
represented exactly within the given precision.

@param mc
           rounding mode and precision for the result of this operation.
@return {@code this} rounded according to the passed context.
@throws ArithmeticException
            if {@code mc.precision > 0} and {@code mc.roundingMode ==
            UNNECESSARY} and this cannot be represented within the given
            precision."
      end

      operation 497051 "setScale"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param in name "newScale" explicit_type "int"
	  param inout name "roundingMode" type class_ref 166555 // RoundingMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} instance with the specified scale.
<p>
If the new scale is greater than the old scale, then additional zeros are
added to the unscaled value. In this case no rounding is necessary.
<p>
If the new scale is smaller than the old scale, then trailing digits are
removed. If these trailing digits are not zero, then the remaining
unscaled value has to be rounded. For this rounding operation the
specified rounding mode is used.

@param newScale
           scale of the result returned.
@param roundingMode
           rounding mode to be used to round the result.
@return a new {@code BigDecimal} instance with the specified scale.
@throws NullPointerException
            if {@code roundingMode == null}.
@throws ArithmeticException
            if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
            necessary according to the given scale."
      end

      operation 497179 "setScale"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param in name "newScale" explicit_type "int"
	  param in name "roundingMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} instance with the specified scale.
<p>
If the new scale is greater than the old scale, then additional zeros are
added to the unscaled value. In this case no rounding is necessary.
<p>
If the new scale is smaller than the old scale, then trailing digits are
removed. If these trailing digits are not zero, then the remaining
unscaled value has to be rounded. For this rounding operation the
specified rounding mode is used.

@param newScale
           scale of the result returned.
@param roundingMode
           rounding mode to be used to round the result.
@return a new {@code BigDecimal} instance with the specified scale.
@throws IllegalArgumentException
            if {@code roundingMode} is not a valid rounding mode.
@throws ArithmeticException
            if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
            necessary according to the given scale."
      end

      operation 497307 "setScale"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "newScale" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} instance with the specified scale. If
the new scale is greater than the old scale, then additional zeros are
added to the unscaled value. If the new scale is smaller than the old
scale, then trailing zeros are removed. If the trailing digits are not
zeros then an ArithmeticException is thrown.
<p>
If no exception is thrown, then the following equation holds: {@code
x.setScale(s).compareTo(x) == 0}.

@param newScale
           scale of the result returned.
@return a new {@code BigDecimal} instance with the specified scale.
@throws ArithmeticException
            if rounding would be necessary."
      end

      operation 497435 "movePointLeft"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} instance where the decimal point has
been moved {@code n} places to the left. If {@code n < 0} then the
decimal point is moved {@code -n} places to the right.

<p>The result is obtained by changing its scale. If the scale of the result
becomes negative, then its precision is increased such that the scale is
zero.

<p>Note, that {@code movePointLeft(0)} returns a result which is
mathematically equivalent, but which has {@code scale >= 0}."
      end

      operation 497563 "movePoint"
	private return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "newScale" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 497691 "movePointRight"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} instance where the decimal point has
been moved {@code n} places to the right. If {@code n < 0} then the
decimal point is moved {@code -n} places to the left.

<p>The result is obtained by changing its scale. If the scale of the result
becomes negative, then its precision is increased such that the scale is
zero.

<p>Note, that {@code movePointRight(0)} returns a result which is
mathematically equivalent, but which has scale >= 0."
      end

      operation 497819 "scaleByPowerOfTen"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} whose value is {@code this * 10<sup>n</sup>}.
The scale of the result is {@code this.scale()} - {@code n}.
The precision of the result is the precision of {@code this}.

<p>This method has the same effect as {@link #movePointRight}, except that
the precision is not changed."
      end

      operation 497947 "stripTrailingZeros"
	public return_type class_ref 166171 // BigDecimal
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code BigDecimal} instance with the same value as {@code
this} but with a unscaled value where the trailing zeros have been
removed. If the unscaled value of {@code this} has n trailing zeros, then
the scale and the precision of the result has been reduced by n.

@return a new {@code BigDecimal} instance equivalent to this where the
        trailing zeros of the unscaled value have been removed."
      end

      operation 498075 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code BigDecimal} with {@code val}. Returns one of the
three values {@code 1}, {@code 0}, or {@code -1}. The method behaves as
if {@code this.subtract(val)} is computed. If this difference is > 0 then
1 is returned, if the difference is < 0 then -1 is returned, and if the
difference is 0 then 0 is returned. This means, that if two decimal
instances are compared which are equal in value but differ in scale, then
these two instances are considered as equal.

@param val
           value to be compared with {@code this}.
@return {@code 1} if {@code this > val}, {@code -1} if {@code this < val},
        {@code 0} if {@code this == val}.
@throws NullPointerException
            if {@code val == null}."
      end

      operation 498203 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns {@code true} if {@code x} is a {@code BigDecimal} instance and if
this instance is equal to this big decimal. Two big decimals are equal if
their unscaled value and their scale is equal. For example, 1.0
(10*10<sup>-1</sup>) is not equal to 1.00 (100*10<sup>-2</sup>). Similarly, zero
instances are not equal if their scale differs."
      end

      operation 498331 "min"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "val" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum of this {@code BigDecimal} and {@code val}.

@param val
           value to be used to compute the minimum with this.
@return {@code min(this, val}.
@throws NullPointerException
            if {@code val == null}."
      end

      operation 498459 "max"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "val" type class_ref 166171 // BigDecimal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum of this {@code BigDecimal} and {@code val}.

@param val
           value to be used to compute the maximum with this.
@return {@code max(this, val}.
@throws NullPointerException
            if {@code val == null}."
      end

      operation 498587 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a hash code for this {@code BigDecimal}.

@return hash code for {@code this}."
      end

      operation 498715 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a canonical string representation of this {@code BigDecimal}. If
necessary, scientific notation is used. This representation always prints
all significant digits of this value.
<p>
If the scale is negative or if {@code scale - precision >= 6} then
scientific notation is used.

@return a string representation of {@code this} in scientific notation if
        necessary."
      end

      operation 498843 "toEngineeringString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this {@code BigDecimal}. This
representation always prints all significant digits of this value.
<p>
If the scale is negative or if {@code scale - precision >= 6} then
engineering notation is used. Engineering notation is similar to the
scientific notation except that the exponent is made to be a multiple of
3 such that the integer part is >= 1 and < 1000.

@return a string representation of {@code this} in engineering notation
        if necessary."
      end

      operation 498971 "toPlainString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this {@code BigDecimal}. No scientific
notation is used. This methods adds zeros where necessary.
<p>
If this string representation is used to create a new instance, this
instance is generally not identical to {@code this} as the precision
changes.
<p>
{@code x.equals(new BigDecimal(x.toPlainString())} usually returns
{@code false}.
<p>
{@code x.compareTo(new BigDecimal(x.toPlainString())} returns {@code 0}.

@return a string representation of {@code this} without exponent part."
      end

      operation 499099 "toBigInteger"
	public return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this {@code BigDecimal} as a big integer instance. A fractional
part is discarded.

@return this {@code BigDecimal} as a big integer instance."
      end

      operation 499227 "toBigIntegerExact"
	public return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this {@code BigDecimal} as a big integer instance if it has no
fractional part. If this {@code BigDecimal} has a fractional part, i.e.
if rounding would be necessary, an {@code ArithmeticException} is thrown.

@return this {@code BigDecimal} as a big integer value.
@throws ArithmeticException
            if rounding is necessary."
      end

      operation 499355 "longValue"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this {@code BigDecimal} as an long value. Any fractional part is
discarded. If the integral part of {@code this} is too big to be
represented as an long, then {@code this % 2<sup>64</sup>} is returned."
      end

      operation 499483 "longValueExact"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this {@code BigDecimal} as a long value if it has no fractional
part and if its value fits to the int range ([-2<sup>63</sup>..2<sup>63</sup>-1]). If
these conditions are not met, an {@code ArithmeticException} is thrown.

@throws ArithmeticException
            if rounding is necessary or the number doesn't fit in a long."
      end

      operation 499611 "intValue"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this {@code BigDecimal} as an int value. Any fractional part is
discarded. If the integral part of {@code this} is too big to be
represented as an int, then {@code this % 2<sup>32</sup>} is returned."
      end

      operation 499739 "intValueExact"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this {@code BigDecimal} as a int value if it has no fractional
part and if its value fits to the int range ([-2<sup>31</sup>..2<sup>31</sup>-1]). If
these conditions are not met, an {@code ArithmeticException} is thrown.

@throws ArithmeticException
            if rounding is necessary or the number doesn't fit in an int."
      end

      operation 499867 "shortValueExact"
	public explicit_return_type "short"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this {@code BigDecimal} as a short value if it has no fractional
part and if its value fits to the short range ([-2<sup>15</sup>..2<sup>15</sup>-1]). If
these conditions are not met, an {@code ArithmeticException} is thrown.

@throws ArithmeticException
            if rounding is necessary of the number doesn't fit in a short."
      end

      operation 499995 "byteValueExact"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this {@code BigDecimal} as a byte value if it has no fractional
part and if its value fits to the byte range ([-128..127]). If these
conditions are not met, an {@code ArithmeticException} is thrown.

@throws ArithmeticException
            if rounding is necessary or the number doesn't fit in a byte."
      end

      operation 500123 "floatValue"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this {@code BigDecimal} as a float value. If {@code this} is too
big to be represented as an float, then {@code Float.POSITIVE_INFINITY}
or {@code Float.NEGATIVE_INFINITY} is returned.
<p>
Note, that if the unscaled value has more than 24 significant digits,
then this decimal cannot be represented exactly in a float variable. In
this case the result is rounded.
<p>
For example, if the instance {@code x1 = new BigDecimal(\"0.1\")} cannot be
represented exactly as a float, and thus {@code x1.equals(new
BigDecimal(x1.floatValue())} returns {@code false} for this case.
<p>
Similarly, if the instance {@code new BigDecimal(16777217)} is converted
to a float, the result is {@code 1.6777216E}7.

@return this {@code BigDecimal} as a float value."
      end

      operation 500251 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this {@code BigDecimal} as a double value. If {@code this} is too
big to be represented as an float, then {@code Double.POSITIVE_INFINITY}
or {@code Double.NEGATIVE_INFINITY} is returned.
<p>
Note, that if the unscaled value has more than 53 significant digits,
then this decimal cannot be represented exactly in a double variable. In
this case the result is rounded.
<p>
For example, if the instance {@code x1 = new BigDecimal(\"0.1\")} cannot be
represented exactly as a double, and thus {@code x1.equals(new
BigDecimal(x1.doubleValue())} returns {@code false} for this case.
<p>
Similarly, if the instance {@code new BigDecimal(9007199254740993L)} is
converted to a double, the result is {@code 9.007199254740992E15}.
<p>

@return this {@code BigDecimal} as a double value."
      end

      operation 500379 "ulp"
	public return_type class_ref 166171 // BigDecimal
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unit in the last place (ULP) of this {@code BigDecimal}
instance. An ULP is the distance to the nearest big decimal with the same
precision.

<p>The amount of a rounding error in the evaluation of a floating-point
operation is often expressed in ULPs. An error of 1 ULP is often seen as
a tolerable error.

<p>For class {@code BigDecimal}, the ULP of a number is simply 10<sup>-scale</sup>.
For example, {@code new BigDecimal(0.1).ulp()} returns {@code 1E-55}.

@return unit in the last place (ULP) of this {@code BigDecimal} instance."
      end

      operation 500507 "inplaceRound"
	private explicit_return_type "void"
	nparams 1
	  param inout name "mc" type class_ref 166427 // MathContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private Methods 

It does all rounding work of the public method
{@code round(MathContext)}, performing an inplace rounding
without creating a new object.

@param mc
           the {@code MathContext} for perform the rounding.
@see #round(MathContext)"
      end

      operation 500635 "longCompareTo"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "value1" explicit_type "long"
	  param in name "value2" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 500763 "smallRound"
	private explicit_return_type "void"
	nparams 2
	  param inout name "mc" type class_ref 166427 // MathContext
	  param in name "discardedPrecision" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method implements an efficient rounding for numbers which unscaled
value fits in the type {@code long}.

@param mc
           the context to use
@param discardedPrecision
           the number of decimal digits that are discarded
@see #round(MathContext)"
      end

      operation 500891 "roundingBehavior"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "parityBit" explicit_type "int"
	  param in name "fraction" explicit_type "int"
	  param inout name "roundingMode" type class_ref 166555 // RoundingMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an increment that can be -1,0 or 1, depending of
{@code roundingMode}.

@param parityBit
           can be 0 or 1, it's only used in the case
           {@code HALF_EVEN}
@param fraction
           the mantissa to be analyzed
@param roundingMode
           the type of rounding
@return the carry propagated after rounding"
      end

      operation 501019 "valueExact"
	private explicit_return_type "long"
	nparams 1
	  param in name "bitLengthOfType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If {@code intVal} has a fractional part throws an exception,
otherwise it counts the number of bits of value and checks if it's out of
the range of the primitive type. If the number fits in the primitive type
returns this number as {@code long}, otherwise throws an
exception.

@param bitLengthOfType
           number of bits of the type whose value will be calculated
           exactly
@return the exact value of the integer part of {@code BigDecimal}
        when is possible
@throws ArithmeticException when rounding is necessary or the
            number don't fit in the primitive type"
      end

      operation 501147 "approxPrecision"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the precision already was calculated it returns that value, otherwise
it calculates a very good approximation efficiently . Note that this
value will be {@code precision()} or {@code precision()-1}
in the worst case.

@return an approximation of {@code precision()} value"
      end

      operation 501275 "safeLongToInt"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "longValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 501403 "zeroScaledBy"
	class_operation private return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "longScale" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "It returns the value 0 with the most approximated scale of type
{@code int}. if {@code longScale > Integer.MAX_VALUE} the
scale will be {@code Integer.MAX_VALUE}; if
{@code longScale < Integer.MIN_VALUE} the scale will be
{@code Integer.MIN_VALUE}; otherwise {@code longScale} is
casted to the type {@code int}.

@param longScale
           the scale to which the value 0 will be scaled.
@return the value 0 scaled by the closer scale of type {@code int}.
@see #scale"
      end

      operation 501531 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns all transient fields upon deserialization of a
{@code BigDecimal} instance (bitLength and smallValue). The transient
field precision is assigned lazily."
      end

      operation 501659 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepares this {@code BigDecimal} for serialization, i.e. the
non-transient field {@code intVal} is assigned."
      end

      operation 501787 "getUnscaledValue"
	private return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 501915 "setUnscaledValue"
	private explicit_return_type "void"
	nparams 1
	  param inout name "unscaledValue" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502043 "bitLength"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "smallValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502171 "bitLength"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "smallValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 166299 "BigInteger"
      visibility public 
      nactuals 1
      actual class class_ref 139675 // Comparable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An immutable arbitrary-precision signed integer.

<h3>Fast Cryptography</h3>
This implementation is efficient for operations traditionally used in
cryptography, such as the generation of large prime numbers and computation
of the modular inverse.

<h3>Slow Two's Complement Bitwise Operations</h3>
This API includes operations for bitwise operations in two's complement
representation. Two's complement is not the internal representation used by
this implementation, so such methods may be inefficient. Use {@link
java.util.BitSet} for high-performance bitwise operations on
arbitrarily-large sequences of bits."
      classrelation 222235 // <generalisation>
	relation 222235 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 222235 // <generalisation>
	  b parent class_ref 148379 // Number
      end

      classrelation 222363 // <realization>
	relation 222363 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 222363 // <realization>
	  b parent class_ref 139675 // Comparable
      end

      classrelation 222491 // <realization>
	relation 222491 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 222491 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 204827 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8287574255936472291L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is the serialVersionUID used by the sun implementation. "
      end

      classrelation 222619 // bigInt (<unidirectional association>)
	relation 222619 --->
	  a role_name "bigInt" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 222619 // bigInt (<unidirectional association>)
	  b parent class_ref 166683 // BigInt
      end

      attribute 204955 "nativeIsValid"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 205083 "javaIsValid"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 205211 "digits"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The magnitude of this in the little-endian representation. "
      end

      attribute 205339 "numberLength"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The length of this in measured in ints. Can be less than
digits.length().
"
      end

      attribute 205467 "sign"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The sign of this. "
      end

      classrelation 222747 // ZERO (<unidirectional association>)
	relation 222747 --->
	  a role_name "ZERO" init_value " new BigInteger(0, 0)" class_relation const_relation public
	    comment " The {@code BigInteger} constant 0. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 222747 // ZERO (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      classrelation 222875 // ONE (<unidirectional association>)
	relation 222875 --->
	  a role_name "ONE" init_value " new BigInteger(1, 1)" class_relation const_relation public
	    comment " The {@code BigInteger} constant 1. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 222875 // ONE (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      classrelation 223003 // TEN (<unidirectional association>)
	relation 223003 --->
	  a role_name "TEN" init_value " new BigInteger(1, 10)" class_relation const_relation public
	    comment " The {@code BigInteger} constant 10. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 223003 // TEN (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      classrelation 223131 // MINUS_ONE (<unidirectional association>)
	relation 223131 --->
	  a role_name "MINUS_ONE" init_value " new BigInteger(-1, 1)" class_relation const_relation package
	    comment " The {@code BigInteger} constant -1. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 223131 // MINUS_ONE (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      classrelation 223259 // SMALL_VALUES (<unidirectional association>)
	relation 223259 --->
	  a role_name "SMALL_VALUES" multiplicity "[]" init_value " { ZERO, ONE, new BigInteger(1, 2),
            new BigInteger(1, 3), new BigInteger(1, 4), new BigInteger(1, 5),
            new BigInteger(1, 6), new BigInteger(1, 7), new BigInteger(1, 8),
            new BigInteger(1, 9), TEN }" class_relation const_relation package
	    comment " All the {@code BigInteger} numbers in the range [0,10] are cached. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 223259 // SMALL_VALUES (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      attribute 205595 "firstNonzeroDigit"
	private explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 205723 "signum"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " sign field, used for serialization. "
      end

      attribute 205851 "magnitude"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " absolute value field, used for serialization "
      end

      attribute 205979 "hashCode"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Cache for the hash code. "
      end

      operation 508443 "BigInteger"
	package explicit_return_type ""
	nparams 1
	  param inout name "bigInt" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 508571 "BigInteger"
	package explicit_return_type ""
	nparams 2
	  param in name "sign" explicit_type "int"
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 508699 "BigInteger"
	package explicit_return_type ""
	nparams 3
	  param in name "sign" explicit_type "int"
	  param in name "numberLength" explicit_type "int"
	  param inout name "digits" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a number without creating new space. This construct should be
used only if the three fields of representation are known.

@param sign the sign of the number.
@param numberLength the length of the internal array.
@param digits a reference of some array created before."
      end

      operation 508827 "BigInteger"
	public explicit_return_type ""
	nparams 2
	  param in name "numBits" explicit_type "int"
	  param inout name "random" type class_ref 139803 // Random
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a random non-negative {@code BigInteger} instance in the range
{@code [0, pow(2, numBits)-1]}.

@param numBits maximum length of the new {@code BigInteger} in bits.
@param random is the random number generator to be used.
@throws IllegalArgumentException if {@code numBits} < 0."
      end

      operation 508955 "BigInteger"
	public explicit_return_type ""
	nparams 3
	  param in name "bitLength" explicit_type "int"
	  param in name "certainty" explicit_type "int"
	  param inout name "unused" type class_ref 139803 // Random
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a random {@code BigInteger} instance in the range {@code [0,
pow(2, bitLength)-1]} which is probably prime. The probability that the
returned {@code BigInteger} is prime is beyond
{@code 1 - 1/pow(2, certainty)}.

<p><b>Implementation Note:</b> the {@code Random} argument is ignored.
This implementation uses OpenSSL's {@code bn_rand} as a source of
cryptographically strong pseudo-random numbers.

@param bitLength length of the new {@code BigInteger} in bits.
@param certainty tolerated primality uncertainty.
@throws ArithmeticException if {@code bitLength < 2}.
@see <a href=\"http://www.openssl.org/docs/crypto/BN_rand.html\">
     Specification of random generator used from OpenSSL library</a>"
      end

      operation 509083 "BigInteger"
	public explicit_return_type ""
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigInteger} by parsing {@code value}. The string
representation consists of an optional plus or minus sign followed by a
non-empty sequence of decimal digits. Digits are interpreted as if by
{@code Character.digit(char,10)}.

@param value string representation of the new {@code BigInteger}.
@throws NullPointerException if {@code value == null}.
@throws NumberFormatException if {@code value} is not a valid
    representation of a {@code BigInteger}."
      end

      operation 509211 "BigInteger"
	public explicit_return_type ""
	nparams 2
	  param inout name "value" type class_ref 3399692 // String
	  param in name "radix" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigInteger} instance by parsing {@code value}.
The string representation consists of an optional plus or minus sign
followed by a non-empty sequence of digits in the specified radix. Digits
are interpreted as if by {@code Character.digit(char, radix)}.

@param value string representation of the new {@code BigInteger}.
@param radix the base to be used for the conversion.
@throws NullPointerException if {@code value == null}.
@throws NumberFormatException if {@code value} is not a valid
    representation of a {@code BigInteger} or if {@code radix <
    Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}."
      end

      operation 509339 "BigInteger"
	public explicit_return_type ""
	nparams 2
	  param in name "signum" explicit_type "int"
	  param inout name "magnitude" explicit_type "byte"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigInteger} instance with the given sign and
magnitude.

@param signum sign of the new {@code BigInteger} (-1 for negative, 0 for
    zero, 1 for positive).
@param magnitude magnitude of the new {@code BigInteger} with the most
    significant byte first.
@throws NullPointerException if {@code magnitude == null}.
@throws NumberFormatException if the sign is not one of -1, 0, 1 or if
    the sign is zero and the magnitude contains non-zero entries."
      end

      operation 509467 "BigInteger"
	public explicit_return_type ""
	nparams 1
	  param inout name "value" explicit_type "byte"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BigInteger} from the given two's complement
representation. The most significant byte is the entry at index 0. The
most significant bit of this entry determines the sign of the new {@code
BigInteger} instance. The array must be nonempty.

@param value two's complement representation of the new {@code
    BigInteger}.
@throws NullPointerException if {@code value == null}.
@throws NumberFormatException if the length of {@code value} is zero."
      end

      operation 509595 "getBigInt"
	package return_type class_ref 166683 // BigInt
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the internal native representation of this big integer, computing
it if necessary."
      end

      operation 509723 "setBigInt"
	private explicit_return_type "void"
	nparams 1
	  param inout name "bigInt" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 509851 "setJavaRepresentation"
	private explicit_return_type "void"
	nparams 3
	  param in name "sign" explicit_type "int"
	  param in name "numberLength" explicit_type "int"
	  param inout name "digits" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 509979 "prepareJavaRepresentation"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 510107 "valueOf"
	class_operation public return_type class_ref 166299 // BigInteger
	nparams 1
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a {@code BigInteger} whose value is equal to {@code value}. "
      end

      operation 510235 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the two's complement representation of this {@code BigInteger} in
a byte array."
      end

      operation 510363 "abs"
	public return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is the absolute value of {@code
this}."
      end

      operation 510491 "negate"
	public return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is the {@code -this}."
      end

      operation 510619 "add"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this + value}."
      end

      operation 510747 "subtract"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this - value}."
      end

      operation 510875 "signum"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sign of this {@code BigInteger}.

@return {@code -1} if {@code this < 0}, {@code 0} if {@code this == 0},
    {@code 1} if {@code this > 0}."
      end

      operation 511003 "shiftRight"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this >> n}. For
negative arguments, the result is also negative. The shift distance may
be negative which means that {@code this} is shifted left.

<p><b>Implementation Note:</b> Usage of this method on negative values is
not recommended as the current implementation is not efficient.

@param n shift distance
@return {@code this >> n} if {@code n >= 0}; {@code this << (-n)}
    otherwise"
      end

      operation 511131 "shiftLeft"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this << n}. The
result is equivalent to {@code this * pow(2, n)} if n >= 0. The shift
distance may be negative which means that {@code this} is shifted right.
The result then corresponds to {@code floor(this / pow(2, -n))}.

<p><b>Implementation Note:</b> Usage of this method on negative values is
not recommended as the current implementation is not efficient.

@param n shift distance.
@return {@code this << n} if {@code n >= 0}; {@code this >> (-n)}.
    otherwise"
      end

      operation 511259 "shiftLeftOneBit"
	package return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 511387 "bitLength"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the value's two's complement representation without
leading zeros for positive numbers / without leading ones for negative
values.

<p>The two's complement representation of {@code this} will be at least
{@code bitLength() + 1} bits long.

<p>The value will fit into an {@code int} if {@code bitLength() < 32} or
into a {@code long} if {@code bitLength() < 64}.

@return the length of the minimal two's complement representation for
    {@code this} without the sign bit."
      end

      operation 511515 "testBit"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the bit at position n in {@code this} is set. The result is
equivalent to {@code this & pow(2, n) != 0}.

<p><b>Implementation Note:</b> Usage of this method is not recommended as
the current implementation is not efficient.

@param n position where the bit in {@code this} has to be inspected.
@throws ArithmeticException if {@code n < 0}."
      end

      operation 511643 "setBit"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} which has the same binary representation
as {@code this} but with the bit at position n set. The result is
equivalent to {@code this | pow(2, n)}.

<p><b>Implementation Note:</b> Usage of this method is not recommended as
the current implementation is not efficient.

@param n position where the bit in {@code this} has to be set.
@throws ArithmeticException if {@code n < 0}."
      end

      operation 511771 "clearBit"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} which has the same binary representation
as {@code this} but with the bit at position n cleared. The result is
equivalent to {@code this & ~pow(2, n)}.

<p><b>Implementation Note:</b> Usage of this method is not recommended as
the current implementation is not efficient.

@param n position where the bit in {@code this} has to be cleared.
@throws ArithmeticException if {@code n < 0}."
      end

      operation 511899 "flipBit"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} which has the same binary representation
as {@code this} but with the bit at position n flipped. The result is
equivalent to {@code this ^ pow(2, n)}.

<p><b>Implementation Note:</b> Usage of this method is not recommended as
the current implementation is not efficient.

@param n position where the bit in {@code this} has to be flipped.
@throws ArithmeticException if {@code n < 0}."
      end

      operation 512027 "getLowestSetBit"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position of the lowest set bit in the two's complement
representation of this {@code BigInteger}. If all bits are zero (this==0)
then -1 is returned as result.

<p><b>Implementation Note:</b> Usage of this method is not recommended as
the current implementation is not efficient."
      end

      operation 512155 "bitCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bits in the two's complement representation of
{@code this} which differ from the sign bit. If {@code this} is negative,
the result is equivalent to the number of bits set in the two's
complement representation of {@code -this - 1}.

<p>Use {@code bitLength(0)} to find the length of the binary value in
bits.

<p><b>Implementation Note:</b> Usage of this method is not recommended as
the current implementation is not efficient."
      end

      operation 512283 "not"
	public return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code ~this}. The result
of this operation is {@code -this-1}.

<p><b>Implementation Note:</b> Usage of this method is not recommended as
the current implementation is not efficient."
      end

      operation 512411 "and"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this & value}.

<p><b>Implementation Note:</b> Usage of this method is not recommended
as the current implementation is not efficient.

@param value value to be and'ed with {@code this}.
@throws NullPointerException if {@code value == null}."
      end

      operation 512539 "or"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this | value}.

<p><b>Implementation Note:</b> Usage of this method is not recommended as
the current implementation is not efficient.

@param value value to be or'ed with {@code this}.
@throws NullPointerException if {@code value == null}."
      end

      operation 512667 "xor"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this ^ value}.

<p><b>Implementation Note:</b> Usage of this method is not recommended as
the current implementation is not efficient.

@param value value to be xor'ed with {@code this}
@throws NullPointerException if {@code value == null}"
      end

      operation 512795 "andNot"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this & ~value}.
Evaluating {@code x.andNot(value)} returns the same result as {@code
x.and(value.not())}.

<p><b>Implementation Note:</b> Usage of this method is not recommended
as the current implementation is not efficient.

@param value value to be not'ed and then and'ed with {@code this}.
@throws NullPointerException if {@code value == null}."
      end

      operation 512923 "intValue"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this {@code BigInteger} as an int value. If {@code this} is too
big to be represented as an int, then {@code this % (1 << 32)} is
returned."
      end

      operation 513051 "longValue"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this {@code BigInteger} as a long value. If {@code this} is too
big to be represented as a long, then {@code this % pow(2, 64)} is
returned."
      end

      operation 513179 "floatValue"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this {@code BigInteger} as a float. If {@code this} is too big to
be represented as a float, then {@code Float.POSITIVE_INFINITY} or
{@code Float.NEGATIVE_INFINITY} is returned. Note that not all integers
in the range {@code [-Float.MAX_VALUE, Float.MAX_VALUE]} can be exactly
represented as a float."
      end

      operation 513307 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this {@code BigInteger} as a double. If {@code this} is too big
to be represented as a double, then {@code Double.POSITIVE_INFINITY} or
{@code Double.NEGATIVE_INFINITY} is returned. Note that not all integers
in the range {@code [-Double.MAX_VALUE, Double.MAX_VALUE]} can be exactly
represented as a double."
      end

      operation 513435 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code BigInteger} with {@code value}. Returns {@code -1}
if {@code this < value}, {@code 0} if {@code this == value} and {@code 1}
if {@code this > value}, .

@param value value to be compared with {@code this}.
@throws NullPointerException if {@code value == null}."
      end

      operation 513563 "min"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum of this {@code BigInteger} and {@code value}.

@param value value to be used to compute the minimum with {@code this}.
@throws NullPointerException if {@code value == null}."
      end

      operation 513691 "max"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum of this {@code BigInteger} and {@code value}.

@param value value to be used to compute the maximum with {@code this}
@throws NullPointerException if {@code value == null}"
      end

      operation 513819 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 513947 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 514075 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of this {@code BigInteger} in decimal
form."
      end

      operation 514203 "toString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "radix" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string containing a string representation of this {@code
BigInteger} with base radix. If {@code radix < Character.MIN_RADIX} or
{@code radix > Character.MAX_RADIX} then a decimal representation is
returned. The characters of the string representation are generated with
method {@code Character.forDigit}.

@param radix base to be used for the string representation."
      end

      operation 514331 "gcd"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is greatest common divisor
of {@code this} and {@code value}. If {@code this == 0} and {@code
value == 0} then zero is returned, otherwise the result is positive.

@param value value with which the greatest common divisor is computed.
@throws NullPointerException if {@code value == null}."
      end

      operation 514459 "multiply"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "value" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this * value}.

@throws NullPointerException if {@code value == null}."
      end

      operation 514587 "pow"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param in name "exp" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code pow(this, exp)}.

@throws ArithmeticException if {@code exp < 0}."
      end

      operation 514715 "divideAndRemainder"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "divisor" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a two element {@code BigInteger} array containing
{@code this / divisor} at index 0 and {@code this % divisor} at index 1.

@param divisor value by which {@code this} is divided.
@throws NullPointerException if {@code divisor == null}.
@throws ArithmeticException if {@code divisor == 0}.
@see #divide
@see #remainder"
      end

      operation 514843 "divide"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "divisor" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this / divisor}.

@param divisor value by which {@code this} is divided.
@return {@code this / divisor}.
@throws NullPointerException if {@code divisor == null}.
@throws ArithmeticException if {@code divisor == 0}."
      end

      operation 514971 "remainder"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "divisor" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this % divisor}.
Regarding signs this methods has the same behavior as the % operator on
ints: the sign of the remainder is the same as the sign of this.

@param divisor value by which {@code this} is divided.
@throws NullPointerException if {@code divisor == null}.
@throws ArithmeticException if {@code divisor == 0}."
      end

      operation 515099 "modInverse"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "m" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code 1/this mod m}. The
modulus {@code m} must be positive. The result is guaranteed to be in the
interval {@code [0, m)} (0 inclusive, m exclusive). If {@code this} is
not relatively prime to m, then an exception is thrown.

@param m the modulus.
@throws NullPointerException if {@code m == null}
@throws ArithmeticException if {@code m < 0 or} if {@code this} is not
    relatively prime to {@code m}"
      end

      operation 515227 "modPow"
	public return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "exponent" type class_ref 166299 // BigInteger
	  param inout name "m" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code
pow(this, exponent) mod m}. The modulus {@code m} must be positive. The
result is guaranteed to be in the interval {@code [0, m)} (0 inclusive,
m exclusive). If the exponent is negative, then {@code
pow(this.modInverse(m), -exponent) mod m} is computed. The inverse of
this only exists if {@code this} is relatively prime to m, otherwise an
exception is thrown.

@param exponent the exponent.
@param m the modulus.
@throws NullPointerException if {@code m == null} or {@code exponent ==
    null}.
@throws ArithmeticException if {@code m < 0} or if {@code exponent<0} and
    this is not relatively prime to {@code m}."
      end

      operation 515355 "mod"
	public return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "m" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code BigInteger} whose value is {@code this mod m}. The
modulus {@code m} must be positive. The result is guaranteed to be in the
interval {@code [0, m)} (0 inclusive, m exclusive). The behavior of this
function is not equivalent to the behavior of the % operator defined for
the built-in {@code int}'s.

@param m the modulus.
@return {@code this mod m}.
@throws NullPointerException if {@code m == null}.
@throws ArithmeticException if {@code m < 0}."
      end

      operation 515483 "isProbablePrime"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "certainty" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this {@code BigInteger} is probably prime. If {@code true}
is returned, then this is prime with a probability beyond
{@code 1 - 1/pow(2, certainty)}. If {@code false} is returned, then this
is definitely composite. If the argument {@code certainty} <= 0, then
this method returns true.

@param certainty tolerated primality uncertainty.
@return {@code true}, if {@code this} is probably prime, {@code false}
    otherwise."
      end

      operation 515611 "nextProbablePrime"
	public return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smallest integer x > {@code this} which is probably prime as
a {@code BigInteger} instance. The probability that the returned {@code
BigInteger} is prime is beyond {@code 1 - 1/pow(2, 80)}.

@return smallest integer > {@code this} which is probably prime.
@throws ArithmeticException if {@code this < 0}."
      end

      operation 515739 "probablePrime"
	class_operation public return_type class_ref 166299 // BigInteger
	nparams 2
	  param in name "bitLength" explicit_type "int"
	  param inout name "unused" type class_ref 139803 // Random
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a random positive {@code BigInteger} instance in the range {@code
[0, pow(2, bitLength)-1]} which is probably prime. The probability that
the returned {@code BigInteger} is prime is beyond {@code
1 - 1/pow(2, 80)}.

<p><b>Implementation Note:</b> Currently {@code random} is ignored.

@param bitLength length of the new {@code BigInteger} in bits.
@return probably prime random {@code BigInteger} instance.
@throws IllegalArgumentException if {@code bitLength < 2}."
      end

      operation 515867 "twosComplement"
	private explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private Methods 

Returns the two's complement representation of this BigInteger in a byte
array.

@return two's complement representation of {@code this}"
      end

      operation 515995 "multiplyByInt"
	class_operation package explicit_return_type "int"
	nparams 4
	  param inout name "res" explicit_type "int"
	  param inout name "a" explicit_type "int"
	  param in name "aSize" explicit_type "int"
	  param in name "factor" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 516123 "inplaceAdd"
	class_operation package explicit_return_type "int"
	nparams 3
	  param inout name "a" explicit_type "int"
	  param in name "aSize" explicit_type "int"
	  param in name "addend" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 516251 "parseFromString"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "bi" type class_ref 166299 // BigInteger
	  param inout name "value" type class_ref 3399692 // String
	  param in name "radix" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#BigInteger(String, int) "
      end

      operation 516379 "getFirstNonzeroDigit"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 516507 "copy"
	package return_type class_ref 166299 // BigInteger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the current instance to achieve immutability"
      end

      operation 516635 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns all transient fields upon deserialization of a {@code BigInteger}
instance."
      end

      operation 516763 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepares this {@code BigInteger} for serialization, i.e. the
non-transient fields {@code signum} and {@code magnitude} are assigned."
      end
    end

    class 166427 "MathContext"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Immutable objects describing settings such as rounding mode and digit
precision for the numerical operations provided by class {@link BigDecimal}."
      classrelation 223387 // <realization>
	relation 223387 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 223387 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 206363 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5579720004786848255L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 223515 // DECIMAL128 (<unidirectional association>)
	relation 223515 --->
	  a role_name "DECIMAL128" init_value " new MathContext(34, RoundingMode.HALF_EVEN)" class_relation const_relation public
	    comment "
A {@code MathContext} which corresponds to the <a href=\"http://en.wikipedia.org/wiki/IEEE_754-1985\">IEEE 754</a> quadruple
decimal precision format: 34 digit precision and
{@link RoundingMode#HALF_EVEN} rounding.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 223515 // DECIMAL128 (<unidirectional association>)
	  b parent class_ref 166427 // MathContext
      end

      classrelation 223643 // DECIMAL32 (<unidirectional association>)
	relation 223643 --->
	  a role_name "DECIMAL32" init_value " new MathContext(7, RoundingMode.HALF_EVEN)" class_relation const_relation public
	    comment "
A {@code MathContext} which corresponds to the <a href=\"http://en.wikipedia.org/wiki/IEEE_754-1985\">IEEE 754</a> single decimal
precision format: 7 digit precision and {@link RoundingMode#HALF_EVEN}
rounding.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 223643 // DECIMAL32 (<unidirectional association>)
	  b parent class_ref 166427 // MathContext
      end

      classrelation 223771 // DECIMAL64 (<unidirectional association>)
	relation 223771 --->
	  a role_name "DECIMAL64" init_value " new MathContext(16, RoundingMode.HALF_EVEN)" class_relation const_relation public
	    comment "
A {@code MathContext} which corresponds to the <a href=\"http://en.wikipedia.org/wiki/IEEE_754-1985\">IEEE 754</a> double decimal
precision format: 16 digit precision and {@link RoundingMode#HALF_EVEN}
rounding.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 223771 // DECIMAL64 (<unidirectional association>)
	  b parent class_ref 166427 // MathContext
      end

      classrelation 223899 // UNLIMITED (<unidirectional association>)
	relation 223899 --->
	  a role_name "UNLIMITED" init_value " new MathContext(0, RoundingMode.HALF_UP)" class_relation const_relation public
	    comment "
A {@code MathContext} for unlimited precision with
{@link RoundingMode#HALF_UP} rounding.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 223899 // UNLIMITED (<unidirectional association>)
	  b parent class_ref 166427 // MathContext
      end

      attribute 206491 "precision"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of digits to be used for an operation; results are rounded to
this precision.
"
      end

      classrelation 224027 // roundingMode (<unidirectional association>)
	relation 224027 --->
	  a role_name "roundingMode" const_relation private
	    comment "
A {@code RoundingMode} object which specifies the algorithm to be used
for rounding.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 224027 // roundingMode (<unidirectional association>)
	  b parent class_ref 166555 // RoundingMode
      end

      operation 521499 "MathContext"
	public explicit_return_type ""
	nparams 1
	  param in name "precision" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code MathContext} with the specified precision and
with the rounding mode {@link RoundingMode#HALF_UP HALF_UP}. If the
precision passed is zero, then this implies that the computations have to
be performed exact, the rounding mode in this case is irrelevant.

@param precision
           the precision for the new {@code MathContext}.
@throws IllegalArgumentException
            if {@code precision < 0}."
      end

      operation 521627 "MathContext"
	public explicit_return_type ""
	nparams 2
	  param in name "precision" explicit_type "int"
	  param inout name "roundingMode" type class_ref 166555 // RoundingMode
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code MathContext} with the specified precision and
with the specified rounding mode. If the precision passed is zero, then
this implies that the computations have to be performed exact, the
rounding mode in this case is irrelevant.

@param precision
           the precision for the new {@code MathContext}.
@param roundingMode
           the rounding mode for the new {@code MathContext}.
@throws IllegalArgumentException
            if {@code precision < 0}.
@throws NullPointerException
            if {@code roundingMode} is {@code null}."
      end

      operation 521755 "MathContext"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code MathContext} from a string. The string has to
specify the precision and the rounding mode to be used and has to follow
the following syntax: \"precision=&lt;precision&gt; roundingMode=&lt;roundingMode&gt;\"
This is the same form as the one returned by the {@link #toString}
method.

@throws IllegalArgumentException
            if the string is not in the correct format or if the
            precision specified is < 0."
      end

      operation 521883 "invalidMathContext"
	private return_type class_ref 128283 // IllegalArgumentException
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 522011 "checkValid"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 522139 "getPrecision"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the precision. The precision is the number of digits used for an
operation. Results are rounded to this precision. The precision is
guaranteed to be non negative. If the precision is zero, then the
computations have to be performed exact, results are not rounded in this
case.

@return the precision."
      end

      operation 522267 "getRoundingMode"
	public return_type class_ref 166555 // RoundingMode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rounding mode. The rounding mode is the strategy to be used
to round results.
<p>
The rounding mode is one of
{@link RoundingMode#UP},
{@link RoundingMode#DOWN},
{@link RoundingMode#CEILING},
{@link RoundingMode#FLOOR},
{@link RoundingMode#HALF_UP},
{@link RoundingMode#HALF_DOWN},
{@link RoundingMode#HALF_EVEN}, or
{@link RoundingMode#UNNECESSARY}.

@return the rounding mode."
      end

      operation 522395 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns true if x is a {@code MathContext} with the same precision
setting and the same rounding mode as this {@code MathContext} instance.

@param x
           object to be compared.
@return {@code true} if this {@code MathContext} instance is equal to the
        {@code x} argument; {@code false} otherwise."
      end

      operation 522523 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the hash code for this {@code MathContext} instance.

@return the hash code for this {@code MathContext}."
      end

      operation 522651 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representation for this {@code MathContext} instance.
The string has the form
{@code
\"precision=<precision> roundingMode=<roundingMode>\"
} where {@code <precision>} is an integer describing the number
of digits used for operations and {@code <roundingMode>} is the
string representation of the rounding mode.

@return a string representation for this {@code MathContext} instance"
      end

      operation 522779 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes checks upon deserialization of a {@code MathContext} instance.
Checks whether {@code precision >= 0} and {@code roundingMode != null}

@throws StreamCorruptedException
            if {@code precision < 0}
@throws StreamCorruptedException
            if {@code roundingMode == null}"
      end
    end

    class 166555 "RoundingMode"
      visibility public stereotype "enum"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Specifies the rounding behavior for operations whose results cannot be
represented exactly."
      attribute 207003 "UP"
	public type class_ref 166555 // RoundingMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}(BigDecimal.ROUND_UP),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where positive values are rounded towards positive infinity
and negative values towards negative infinity.
<br>
Rule: {@code x.round().abs() >= x.abs()}"
      end

      attribute 207131 "DOWN"
	public type class_ref 166555 // RoundingMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}(BigDecimal.ROUND_DOWN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where the values are rounded towards zero.
<br>
Rule: {@code x.round().abs() <= x.abs()}"
      end

      attribute 207259 "CEILING"
	public type class_ref 166555 // RoundingMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}(BigDecimal.ROUND_CEILING),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards positive infinity. For positive values
this rounding mode behaves as {@link #UP}, for negative values as
{@link #DOWN}.
<br>
Rule: {@code x.round() >= x}"
      end

      attribute 207387 "FLOOR"
	public type class_ref 166555 // RoundingMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}(BigDecimal.ROUND_FLOOR),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode to round towards negative infinity. For positive values
this rounding mode behaves as {@link #DOWN}, for negative values as
{@link #UP}.
<br>
Rule: {@code x.round() <= x}"
      end

      attribute 207515 "HALF_UP"
	public type class_ref 166555 // RoundingMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}(BigDecimal.ROUND_HALF_UP),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where values are rounded towards the nearest neighbor. Ties
are broken by rounding up."
      end

      attribute 207643 "HALF_DOWN"
	public type class_ref 166555 // RoundingMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}(BigDecimal.ROUND_HALF_DOWN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where values are rounded towards the nearest neighbor. Ties
are broken by rounding down."
      end

      attribute 207771 "HALF_EVEN"
	public type class_ref 166555 // RoundingMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}(BigDecimal.ROUND_HALF_EVEN),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where values are rounded towards the nearest neighbor. Ties
are broken by rounding to the even neighbor."
      end

      attribute 207899 "UNNECESSARY"
	public type class_ref 166555 // RoundingMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}(BigDecimal.ROUND_UNNECESSARY),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Rounding mode where the rounding operations throws an ArithmeticException
for the case that rounding is necessary, i.e. for the case that the value
cannot be represented exactly."
      end

      attribute 208027 "bigDecimalRM"
	const_attribute private explicit_type "int"
	stereotype "attribute"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The old constant of <code>BigDecimal</code>. "
      end

      operation 528923 "RoundingMode"
	package explicit_return_type ""
	nparams 1
	  param in name "rm" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " It sets the old constant. "
      end

      operation 529051 "valueOf"
	class_operation public return_type class_ref 166555 // RoundingMode
	nparams 1
	  param in name "mode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts rounding mode constants from class {@code BigDecimal} into
{@code RoundingMode} values.

@param mode
           rounding mode constant as defined in class {@code BigDecimal}
@return corresponding rounding mode object"
      end
    end

    class 166683 "BigInt"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "In contrast to BigIntegers this class doesn't fake two's complement representation.
Any Bit-Operations, including Shifting, solely regard the unsigned magnitude.
Moreover BigInt objects are mutable and offer efficient in-place-operations."
      attribute 204699 "bignum"
	package explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Fields used for the internal representation. "
      end

      operation 502299 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 502427 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 502555 "getNativeBIGNUM"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502683 "consumeErrors"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "sb" type class_ref 155163 // StringBuilder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502811 "Check"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "success" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 502939 "makeValid"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503067 "newBigInt"
	class_operation private return_type class_ref 166683 // BigInt
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503195 "cmp"
	class_operation package explicit_return_type "int"
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param inout name "b" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503323 "putCopy"
	package explicit_return_type "void"
	nparams 1
	  param inout name "from" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503451 "copy"
	package return_type class_ref 166683 // BigInt
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503579 "putLongInt"
	package explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503707 "putULongInt"
	package explicit_return_type "void"
	nparams 2
	  param in name "val" explicit_type "long"
	  param inout name "neg" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503835 "invalidBigInteger"
	private return_type class_ref 148507 // NumberFormatException
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 503963 "putDecString"
	package explicit_return_type "void"
	nparams 1
	  param inout name "original" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 504091 "putHexString"
	package explicit_return_type "void"
	nparams 1
	  param inout name "original" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 504219 "checkString"
	package return_type class_ref 3399692 // String
	nparams 2
	  param inout name "s" type class_ref 3399692 // String
	  param in name "base" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string suitable for passing to OpenSSL.
Throws if 's' doesn't match Java's rules for valid BigInteger strings.
BN_dec2bn and BN_hex2bn do very little checking, so we need to manually
ensure we comply with Java's rules.
http://code.google.com/p/android/issues/detail?id=7036"
      end

      operation 504347 "toAscii"
	class_operation private return_type class_ref 3399692 // String
	nparams 2
	  param inout name "s" type class_ref 3399692 // String
	  param in name "base" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Java supports non-ASCII decimal digits, but OpenSSL doesn't.
 We need to translate the decimal digits but leave any other characters alone.
 This method assumes it's being called on a string that has already been validated."
      end

      operation 504475 "putBigEndian"
	package explicit_return_type "void"
	nparams 2
	  param inout name "a" explicit_type "byte"
	  param inout name "neg" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 504603 "putLittleEndianInts"
	package explicit_return_type "void"
	nparams 2
	  param inout name "a" explicit_type "int"
	  param inout name "neg" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 504731 "putBigEndianTwosComplement"
	package explicit_return_type "void"
	nparams 1
	  param inout name "a" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 504859 "longInt"
	package explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 504987 "decString"
	package return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 505115 "hexString"
	package return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 505243 "bigEndianMagnitude"
	package explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 505371 "littleEndianIntsMagnitude"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 505499 "sign"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 505627 "setSign"
	package explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 505755 "twosCompFitsIntoBytes"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "desiredByteCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 505883 "bitLength"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 506011 "isBitSet"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 506139 "shift"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " n > 0: shift left (multiply)"
      end

      operation 506267 "shift"
	package explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 506395 "addPositiveInt"
	package explicit_return_type "void"
	nparams 1
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 506523 "multiplyByPositiveInt"
	package explicit_return_type "void"
	nparams 1
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 506651 "remainderByPositiveInt"
	class_operation package explicit_return_type "int"
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 506779 "addition"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param inout name "b" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 506907 "add"
	package explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 507035 "subtraction"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param inout name "b" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 507163 "gcd"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param inout name "b" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 507291 "product"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param inout name "b" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 507419 "bigExp"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param inout name "p" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 507547 "exp"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param in name "p" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 507675 "division"
	class_operation package explicit_return_type "void"
	nparams 4
	  param inout name "dividend" type class_ref 166683 // BigInt
	  param inout name "divisor" type class_ref 166683 // BigInt
	  param inout name "quotient" type class_ref 166683 // BigInt
	  param inout name "remainder" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 507803 "modulus"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param inout name "m" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 507931 "modExp"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 3
	  param inout name "a" type class_ref 166683 // BigInt
	  param inout name "p" type class_ref 166683 // BigInt
	  param inout name "m" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 508059 "modInverse"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 2
	  param inout name "a" type class_ref 166683 // BigInt
	  param inout name "m" type class_ref 166683 // BigInt
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 508187 "generatePrimeDefault"
	class_operation package return_type class_ref 166683 // BigInt
	nparams 1
	  param in name "bitLength" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 508315 "isPrime"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "certainty" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 166811 "BitLevel"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Static library that provides all the <b>bit level</b> operations for
{@link BigInteger}. The operations are:
<ul type=\"circle\">
<li>Left Shifting</li>
<li>Right Shifting</li>
<li>Bit clearing</li>
<li>Bit setting</li>
<li>Bit counting</li>
<li>Bit testing</li>
<li>Getting of the lowest bit set</li>
</ul>
All operations are provided in immutable way, and some in both mutable and
immutable."
      operation 516891 "BitLevel"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Just to denote that this class can't be instantiated. "
      end

      operation 517019 "bitLength"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#bitLength() "
      end

      operation 517147 "bitCount"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "val" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#bitCount() "
      end

      operation 517275 "testBit"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a fast bit testing for positive numbers. The bit to to be tested
must be in the range {@code [0, val.bitLength()-1]}"
      end

      operation 517403 "nonZeroDroppedBits"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param in name "numberOfBits" explicit_type "int"
	  param inout name "digits" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if there are 1s in the lowest bits of this BigInteger

@param numberOfBits the number of the lowest bits to check
@return false if all bits are 0s, true otherwise"
      end

      operation 517531 "shiftLeftOneBit"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "result" explicit_type "int"
	  param inout name "source" explicit_type "int"
	  param in name "srcLen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 517659 "shiftLeftOneBit"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "source" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 517787 "shiftRight"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "source" type class_ref 166299 // BigInteger
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#shiftRight(int) "
      end

      operation 517915 "shiftRight"
	class_operation package explicit_return_type "boolean"
	nparams 5
	  param inout name "result" explicit_type "int"
	  param in name "resultLen" explicit_type "int"
	  param inout name "source" explicit_type "int"
	  param in name "intCount" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shifts right an array of integers. Total shift distance in bits is
intCount * 32 + count.

@param result
           the destination array
@param resultLen
           the destination array's length
@param source
           the source array
@param intCount
           the number of elements to be shifted
@param count
           the number of bits to be shifted
@return dropped bit's are all zero (i.e. remaider is zero)"
      end

      operation 518043 "flipBit"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a flipBit on the BigInteger, returning a BigInteger with the the
specified bit flipped."
      end
    end

    class 166939 "Conversion"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Static library that provides {@link BigInteger} base conversion from/to any
integer represented in an {@link java.lang.String} Object."
      operation 518171 "Conversion"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Just to denote that this class can't be instantiated "
      end

      attribute 206107 "digitFitInInt"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value " { -1, -1, 31, 19, 15, 13, 11,
            11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6,
            6, 6, 6, 6, 6, 6, 6, 5 }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Holds the maximal exponent for each radix, so that radix<sup>digitFitInInt[radix]</sup>
fit in an {@code int} (32 bits).
"
      end

      attribute 206235 "bigRadices"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value " { -2147483648, 1162261467,
            1073741824, 1220703125, 362797056, 1977326743, 1073741824,
            387420489, 1000000000, 214358881, 429981696, 815730721, 1475789056,
            170859375, 268435456, 410338673, 612220032, 893871739, 1280000000,
            1801088541, 113379904, 148035889, 191102976, 244140625, 308915776,
            387420489, 481890304, 594823321, 729000000, 887503681, 1073741824,
            1291467969, 1544804416, 1838265625, 60466176 }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "bigRadices values are precomputed maximal powers of radices (integer
numbers from 2 to 36) that fit into unsigned int (32 bits). bigRadices[0] =
2 ^ 31, bigRadices[8] = 10 ^ 9, etc.
"
      end

      operation 518299 "bigInteger2String"
	class_operation package return_type class_ref 3399692 // String
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param in name "radix" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#toString(int) "
      end

      operation 518427 "toDecimalScaledString"
	class_operation package return_type class_ref 3399692 // String
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param in name "scale" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Builds the correspondent {@code String} representation of {@code val}
being scaled by {@code scale}.

@see BigInteger#toString()
@see BigDecimal#toString()"
      end

      operation 518555 "toDecimalScaledString"
	class_operation package return_type class_ref 3399692 // String
	nparams 2
	  param in name "value" explicit_type "long"
	  param in name "scale" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " can process only 32-bit numbers "
      end

      operation 518683 "divideLongByBillion"
	class_operation package explicit_return_type "long"
	nparams 1
	  param in name "a" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 518811 "bigInteger2Double"
	class_operation package explicit_return_type "double"
	nparams 1
	  param inout name "val" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#doubleValue() "
      end
    end

    class 167067 "Division"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Static library that provides all operations related with division and modular
arithmetic to {@link BigInteger}. Some methods are provided in both mutable
and immutable way. There are several variants provided listed below:

<ul type=\"circle\">
<li> <b>Division</b>
<ul type=\"circle\">
<li>{@link BigInteger} division and remainder by {@link BigInteger}.</li>
<li>{@link BigInteger} division and remainder by {@code int}.</li>
<li><i>gcd</i> between {@link BigInteger} numbers.</li>
</ul>
</li>
<li> <b>Modular arithmetic </b>
<ul type=\"circle\">
<li>Modular exponentiation between {@link BigInteger} numbers.</li>
<li>Modular inverse of a {@link BigInteger} numbers.</li>
</ul>
</li>
</ul>"
      operation 518939 "divideArrayByInt"
	class_operation package explicit_return_type "int"
	nparams 4
	  param inout name "quotient" explicit_type "int"
	  param inout name "dividend" explicit_type "int"
	  param in name "dividendLength" explicit_type "int"
	  param in name "divisor" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, final ${t2} ${p2}, final ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Divides an array by an integer value. Implements the Knuth's division
algorithm. See D. Knuth, The Art of Computer Programming, vol. 2.

@return remainder"
      end
    end

    class 167195 "Logical"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The library implements some logical operations over {@code BigInteger}. The
operations provided are listed below.
<ul type=\"circle\">
<li>not</li>
<li>and</li>
<li>andNot</li>
<li>or</li>
<li>xor</li>
</ul>"
      operation 519067 "Logical"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Just to denote that this class can't be instantiated. "
      end

      operation 519195 "not"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "val" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#not() "
      end

      operation 519323 "and"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "that" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#and(BigInteger) "
      end

      operation 519451 "andPositive"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "that" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = 1, magnitude = val.magnitude & that.magnitude"
      end

      operation 519579 "andDiffSigns"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "positive" type class_ref 166299 // BigInteger
	  param inout name "negative" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = positive.magnitude & magnitude = -negative.magnitude "
      end

      operation 519707 "andNegative"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "longer" type class_ref 166299 // BigInteger
	  param inout name "shorter" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = -1, magnitude = -(-longer.magnitude & -shorter.magnitude)"
      end

      operation 519835 "andNot"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "that" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#andNot(BigInteger) "
      end

      operation 519963 "andNotPositive"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "that" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = 1, magnitude = val.magnitude & ~that.magnitude"
      end

      operation 520091 "andNotPositiveNegative"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "positive" type class_ref 166299 // BigInteger
	  param inout name "negative" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = 1, magnitude = positive.magnitude & ~(-negative.magnitude)"
      end

      operation 520219 "andNotNegativePositive"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "negative" type class_ref 166299 // BigInteger
	  param inout name "positive" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = -1, magnitude = -(-negative.magnitude & ~positive.magnitude)"
      end

      operation 520347 "andNotNegative"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "that" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = 1, magnitude = -val.magnitude & ~(-that.magnitude)"
      end

      operation 520475 "or"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "that" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#or(BigInteger) "
      end

      operation 520603 "orPositive"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "longer" type class_ref 166299 // BigInteger
	  param inout name "shorter" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = 1, magnitude = longer.magnitude | shorter.magnitude"
      end

      operation 520731 "orNegative"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "that" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = -1, magnitude = -(-val.magnitude | -that.magnitude) "
      end

      operation 520859 "orDiffSigns"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "positive" type class_ref 166299 // BigInteger
	  param inout name "negative" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = -1, magnitude = -(positive.magnitude | -negative.magnitude) "
      end

      operation 520987 "xor"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "that" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @see BigInteger#xor(BigInteger) "
      end

      operation 521115 "xorPositive"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "longer" type class_ref 166299 // BigInteger
	  param inout name "shorter" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = 0, magnitude = longer.magnitude | shorter.magnitude "
      end

      operation 521243 "xorNegative"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param inout name "that" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = 0, magnitude = -val.magnitude ^ -that.magnitude "
      end

      operation 521371 "xorDiffSigns"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "positive" type class_ref 166299 // BigInteger
	  param inout name "negative" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @return sign = 1, magnitude = -(positive.magnitude ^ -negative.magnitude)"
      end
    end

    class 167323 "Multiplication"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Static library that provides all multiplication of {@link BigInteger} methods."
      operation 522907 "Multiplication"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Just to denote that this class can't be instantiated. "
      end

      attribute 206619 "tenPows"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value " {
        1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " BEGIN android-removed
 /**
  * Break point in digits (number of {@code int} elements)
  * between Karatsuba and Pencil and Paper multiply.
  */
 static final int whenUseKaratsuba = 63; // an heuristic value
 END android-removed

An array with powers of ten that fit in the type {@code int}.
({@code 10^0,10^1,...,10^9})
"
      end

      attribute 206747 "fivePows"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value " {
        1, 5, 25, 125, 625, 3125, 15625, 78125, 390625,
        1953125, 9765625, 48828125, 244140625, 1220703125
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "An array with powers of five that fit in the type {@code int}.
({@code 5^0,5^1,...,5^13})
"
      end

      classrelation 224155 // bigTenPows (<unidirectional association>)
	relation 224155 --->
	  a role_name "bigTenPows" multiplicity "[]" init_value " new BigInteger[32]" class_relation const_relation package
	    comment "
An array with the first powers of ten in {@code BigInteger} version.
({@code 10^0,10^1,...,10^31})

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 224155 // bigTenPows (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      classrelation 224283 // bigFivePows (<unidirectional association>)
	relation 224283 --->
	  a role_name "bigFivePows" multiplicity "[]" init_value " new BigInteger[32]" class_relation const_relation package
	    comment "
An array with the first powers of five in {@code BigInteger} version.
({@code 5^0,5^1,...,5^31})

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 224283 // bigFivePows (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      extra_member 129819 "initialization"
	
	cpp "" ""
	java "  static {
        int i;
        long fivePow = 1L;

        for (i = 0; i <= 18; i++) {
            bigFivePows[i] = BigInteger.valueOf(fivePow);
            bigTenPows[i] = BigInteger.valueOf(fivePow << i);
            fivePow *= 5;
        }
        for (; i < bigTenPows.length; i++) {
            bigFivePows[i] = bigFivePows[i - 1].multiply(bigFivePows[1]);
            bigTenPows[i] = bigTenPows[i - 1].multiply(BigInteger.TEN);
        }
    }"
	php ""
	python ""
	idl ""
      end

      operation 523035 "multiplyByPositiveInt"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param in name "factor" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " BEGIN android-note: multiply has been removed in favor of using OpenSSL BIGNUM
 END android-note

Multiplies a number by a positive integer.
@param val an arbitrary {@code BigInteger}
@param factor a positive {@code int} number
@return {@code val * factor}"
      end

      operation 523163 "multiplyByTenPow"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param in name "exp" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiplies a number by a power of ten.
This method is used in {@code BigDecimal} class.
@param val the number to be multiplied
@param exp a positive {@code long} exponent
@return {@code val * 10<sup>exp</sup>}"
      end

      operation 523291 "powerOf10"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 1
	  param in name "exp" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "It calculates a power of ten, which exponent could be out of 32-bit range.
Note that internally this method will be used in the worst case with
an exponent equals to: {@code Integer.MAX_VALUE - Integer.MIN_VALUE}.
@param exp the exponent of power of ten, it must be positive.
@return a {@code BigInteger} with value {@code 10<sup>exp</sup>}."
      end

      operation 523419 "multiplyByFivePow"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 2
	  param inout name "val" type class_ref 166299 // BigInteger
	  param in name "exp" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Multiplies a number by a power of five.
This method is used in {@code BigDecimal} class.
@param val the number to be multiplied
@param exp a positive {@code int} exponent
@return {@code val * 5<sup>exp</sup>}"
      end
    end

    class 167451 "NativeBN"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 523547 "ERR_get_error"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
      end

      operation 523675 "ERR_error_string"
	class_operation public return_type class_ref 3399692 // String
	nparams 1
	  param in name "e" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment " unsigned long ERR_get_error(void);"
      end

      operation 523803 "BN_new"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment " char *ERR_error_string(unsigned long e, char *buf);"
      end

      operation 523931 "BN_free"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment " BIGNUM *BN_new(void);"
      end

      operation 524059 "BN_cmp"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " void BN_free(BIGNUM *a);"
      end

      operation 524187 "BN_copy"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "to" explicit_type "int"
	  param in name "from" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " int BN_cmp(const BIGNUM *a, const BIGNUM *b);"
      end

      operation 524315 "putLongInt"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "dw" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " Returns boolean success AND NOT result BIGNUM handle!
 BIGNUM *BN_copy(BIGNUM *to, const BIGNUM *from);
    public static native int BN_dup(int from);
 BIGNUM *BN_dup(const BIGNUM *a);"
      end

      operation 524443 "putULongInt"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "a" explicit_type "int"
	  param in name "dw" explicit_type "long"
	  param inout name "neg" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
      end

      operation 524571 "BN_dec2bn"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 524699 "BN_hex2bn"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " int BN_dec2bn(BIGNUM **a, const char *str);"
      end

      operation 524827 "BN_bin2bn"
	class_operation public explicit_return_type "boolean"
	nparams 4
	  param inout name "s" explicit_type "byte"
	  param in name "len" explicit_type "int"
	  param inout name "neg" explicit_type "boolean"
	  param in name "ret" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
	comment " int BN_hex2bn(BIGNUM **a, const char *str);"
      end

      operation 524955 "litEndInts2bn"
	class_operation public explicit_return_type "boolean"
	nparams 4
	  param inout name "ints" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "neg" explicit_type "boolean"
	  param in name "ret" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
	comment " Returns boolean success AND NOT result BIGNUM handle!
 BIGNUM * BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);
 BN-Docu: s is taken as unsigned big endian;
 Additional parameter: neg."
      end

      operation 525083 "twosComp2bn"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "s" explicit_type "byte"
	  param in name "len" explicit_type "int"
	  param in name "ret" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
      end

      operation 525211 "longInt"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 525339 "BN_bn2dec"
	class_operation public return_type class_ref 3399692 // String
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment " unsigned long BN_get_word(BIGNUM *a);"
      end

      operation 525467 "BN_bn2hex"
	class_operation public return_type class_ref 3399692 // String
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment " char * BN_bn2dec(const BIGNUM *a);"
      end

      operation 525595 "BN_bn2bin"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment " char * BN_bn2hex(const BIGNUM *a);"
      end

      operation 525723 "bn2litEndInts"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment " Returns result byte[] AND NOT length.
 int BN_bn2bin(const BIGNUM *a, unsigned char *to);"
      end

      operation 525851 "sign"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 525979 "BN_set_negative"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "b" explicit_type "int"
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " Returns -1, 0, 1 AND NOT boolean.
 #define BN_is_negative(a) ((a)->neg != 0)"
      end

      operation 526107 "bitLength"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment " void BN_set_negative(BIGNUM *b, int n);"
      end

      operation 526235 "BN_is_bit_set"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 526363 "modifyBit"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "a" explicit_type "int"
	  param in name "n" explicit_type "int"
	  param in name "op" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " int BN_is_bit_set(const BIGNUM *a, int n);"
      end

      operation 526491 "BN_shift"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "r" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " Returns boolean success.
 op: 0 = reset; 1 = set; -1 = flip
 uses BN_set_bit(), BN_clear_bit() and BN_is_bit_set()"
      end

      operation 526619 "BN_add_word"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " int BN_shift(BIGNUM *r, const BIGNUM *a, int n);"
      end

      operation 526747 "BN_sub_word"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " ATTENTION: w is treated as unsigned.
 int BN_add_word(BIGNUM *a, BN_ULONG w);"
      end

      operation 526875 "BN_mul_word"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " ATTENTION: w is treated as unsigned.
 int BN_sub_word(BIGNUM *a, BN_ULONG w);"
      end

      operation 527003 "BN_div_word"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " ATTENTION: w is treated as unsigned.
 int BN_mul_word(BIGNUM *a, BN_ULONG w);"
      end

      operation 527131 "BN_mod_word"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment " ATTENTION: w is treated as unsigned.
 BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w);"
      end

      operation 527259 "BN_add"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "r" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " ATTENTION: w is treated as unsigned.
 BN_ULONG BN_mod_word(BIGNUM *a, BN_ULONG w);"
      end

      operation 527387 "BN_sub"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "r" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);"
      end

      operation 527515 "BN_gcd"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "r" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);"
      end

      operation 527643 "BN_mul"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "r" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " int BN_gcd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);"
      end

      operation 527771 "BN_exp"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "r" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "p" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " int BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);"
      end

      operation 527899 "BN_div"
	class_operation public explicit_return_type "boolean"
	nparams 4
	  param in name "dv" explicit_type "int"
	  param in name "rem" explicit_type "int"
	  param in name "m" explicit_type "int"
	  param in name "d" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
	comment " int BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
 OPTIONAL:
    public static native int BN_sqr(BigInteger r, BigInteger a, BN_CTX ctx);
 int BN_sqr(BIGNUM *r, const BIGNUM *a,BN_CTX *ctx);"
      end

      operation 528027 "BN_nnmod"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "r" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "m" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);"
      end

      operation 528155 "BN_mod_exp"
	class_operation public explicit_return_type "boolean"
	nparams 4
	  param in name "r" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "p" explicit_type "int"
	  param in name "m" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
	comment " int BN_nnmod(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);"
      end

      operation 528283 "BN_mod_inverse"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "ret" explicit_type "int"
	  param in name "a" explicit_type "int"
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx);
 OPTIONAL:
    public static native boolean BN_mod_sqr(BigInteger r, BigInteger a, BigInteger m, BN_CTX ctx);
 int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);"
      end

      operation 528411 "BN_generate_prime_ex"
	class_operation public explicit_return_type "boolean"
	nparams 6
	  param in name "ret" explicit_type "int"
	  param in name "bits" explicit_type "int"
	  param inout name "safe" explicit_type "boolean"
	  param in name "add" explicit_type "int"
	  param in name "rem" explicit_type "int"
	  param in name "cb" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
	comment " Returns boolean success AND NOT result BIGNUM handle!
 BIGNUM * BN_mod_inverse(BIGNUM *ret, const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx);"
      end

      operation 528539 "BN_is_prime_ex"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param in name "p" explicit_type "int"
	  param in name "nchecks" explicit_type "int"
	  param in name "cb" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment " int BN_generate_prime_ex(BIGNUM *ret, int bits, int safe,
         const BIGNUM *add, const BIGNUM *rem, BN_GENCB *cb);"
      end
    end

    class 167579 "Primality"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides primality probabilistic methods."
      operation 528667 "Primality"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Just to denote that this class can't be instantiated. "
      end

      attribute 206875 "primes"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
            31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
            103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
            173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,
            241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,
            317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,
            401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,
            479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,
            571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,
            647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,
            739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
            827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
            919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009,
            1013, 1019, 1021 }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " All prime numbers with bit length lesser than 10 bits. "
      end

      classrelation 224411 // BIprimes (<unidirectional association>)
	relation 224411 --->
	  a role_name "BIprimes" multiplicity "[]" init_value " new BigInteger[primes.length]" class_relation const_relation private
	    comment " All {@code BigInteger} prime numbers with bit length lesser than 10 bits. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 224411 // BIprimes (<unidirectional association>)
	  b parent class_ref 166299 // BigInteger
      end

      extra_member 129947 "initialization"
	
	cpp "" ""
	java "  static {// To initialize the dual table of BigInteger primes
        for (int i = 0; i < primes.length; i++) {
            BIprimes[i] = BigInteger.valueOf(primes[i]);
        }
    }"
	php ""
	python ""
	idl ""
      end

      operation 528795 "nextProbablePrime"
	class_operation package return_type class_ref 166299 // BigInteger
	nparams 1
	  param inout name "n" type class_ref 166299 // BigInteger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "It uses the sieve of Eratosthenes to discard several composite numbers in
some appropriate range (at the moment {@code [this, this + 1024]}). After
this process it applies the Miller-Rabin test to the numbers that were
not discarded in the sieve.

@see BigInteger#nextProbablePrime()"
      end
    end
  end

  deploymentview 129179 "math"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 158747 "BigDecimal"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Arrays;
import libcore.math.MathUtils;
${definition}"
      associated_classes
	class_ref 166171 // BigDecimal
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 158875 "BigInt"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 166683 // BigInt
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 159003 "BigInteger"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Random;
${definition}"
      associated_classes
	class_ref 166299 // BigInteger
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 159131 "BitLevel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 166811 // BitLevel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 159259 "Conversion"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 166939 // Conversion
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 159387 "Division"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 167067 // Division
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 159515 "Logical"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 167195 // Logical
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 159643 "MathContext"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.io.StreamCorruptedException;
${definition}"
      associated_classes
	class_ref 166427 // MathContext
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 159771 "Multiplication"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 167323 // Multiplication
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 159899 "NativeBN"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 167451 // NativeBN
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 160027 "Primality"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 167579 // Primality
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 160155 "RoundingMode"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 166555 // RoundingMode
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end
  end
end
