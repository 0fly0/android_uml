class AbstractTvActivity
!!!12706060.java!!!	setLongPressBackToExit(inout longPressBackToExit : boolean) : void
        mLongPressBackToExit = longPressBackToExit;
!!!12706188.java!!!	setAutoCancelToast(inout autoCancelToast : boolean) : void
        mAutoCancelToast = autoCancelToast;
!!!12706316.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        mGtvResources = new GtvResources(this);
        mToastHelper = new ToastHelper(this);
        mAutoCancelToast = true;
!!!12706444.java!!!	onPause() : void
        if (mAutoCancelToast) {
            cancelToast();
        }

        super.onPause();
!!!12706572.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        if (mLongPressBackToExit && (event.getKeyCode() == KeyEvent.KEYCODE_BACK)
                && event.isLongPress()) {
            confirmExit();
            return true;
        }

        return super.onKeyDown(keyCode, event);
!!!12706700.java!!!	onBackPressed() : void
        if (!mLongPressBackToExit) {
            super.onBackPressed();
        }
!!!12706828.java!!!	onSearchRequested() : boolean
        if (!isStrippedMode()) {
            startSearch(null, true, null, true /* global search */);
        }
        return true;
!!!12706956.java!!!	showToast(in resourceId : int, inout  : Object...args) : void
        mToastHelper.showLongToast(resourceId, args);
!!!12707084.java!!!	showToast(in message : String) : void
        mToastHelper.showLongToast(message);
!!!12707212.java!!!	cancelToast() : void
        mToastHelper.cancelToast();
!!!12707340.java!!!	showDialogFragment(inout dialog : DialogFragment, in tag : String) : void
        removeDialogFragments(tag);  // In case it's already shown.
        dialog.show(getFragmentManager(), tag);
!!!12707468.java!!!	removeDialogFragments(inout  : String...tags) : void
        FragmentManager fm = getFragmentManager();
        for (String tag : tags) {
            DialogFragment dialog = (DialogFragment) fm.findFragmentByTag(tag);
            if (dialog != null) {
                dialog.dismiss();
            }
        }
!!!12707596.java!!!	isStrippedMode() : boolean
        return Settings.Secure.getInt(getContentResolver(),
                TvSettings.Secure.STRIPPED_MODE_ENABLED, 0) != 0;
!!!12707724.java!!!	confirmExit() : void
        if (mConfirmExitDialog == null) {
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            Resources res = mGtvResources.getResources();

            String message = res.getString(R.string.confirm_exit_message,
                    getApplicationLabel());
            builder.setMessage(message)
                    .setCancelable(true)
                    .setPositiveButton(res.getString(R.string.ok_button),
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    finish();
                                }
                            })
                    .setNegativeButton(res.getString(R.string.cancel_button),
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    dialog.cancel();
                                }
                            });
            mConfirmExitDialog = builder.create();
        }

        mConfirmExitDialog.show();

        // Ensure that the "Ok" button is always focused when the dialog is
        // shown.
        Button button = mConfirmExitDialog.getButton(DialogInterface.BUTTON_POSITIVE);
        button.requestFocus();
!!!12707852.java!!!	getApplicationLabel() : String
        ApplicationInfo appInfo = getApplicationInfo();
        return getPackageManager().getApplicationLabel(appInfo).toString();
!!!12707980.java!!!	getTvFrameworkResources() : Resources
        return mGtvResources.getResources();
!!!12708108.java!!!	isDeviceTouchDpadOverloaded() : boolean
        return mGtvResources.getResources().getBoolean(R.bool.config_touch_dpad_is_overloaded);
