class UnlockPatternListener
!!!7994124.java!!!	onPatternStart() : void
            mLockPatternView.removeCallbacks(mCancelPatternRunnable);
!!!7994380.java!!!	onPatternCellAdded(inout pattern : List<Cell>) : void
            // To guard against accidental poking of the wakelock, look for
            // the user actually trying to draw a pattern of some minimal length.
            if (pattern.size() > MIN_PATTERN_BEFORE_POKE_WAKELOCK) {
                mCallback.pokeWakelock(UNLOCK_PATTERN_WAKE_INTERVAL_MS);
            } else {
                // Give just a little extra time if they hit one of the first few dots
                mCallback.pokeWakelock(UNLOCK_PATTERN_WAKE_INTERVAL_FIRST_DOTS_MS);
            }
!!!7994508.java!!!	onPatternDetected(inout pattern : List<LockPatternView.Cell>) : void
            if (mLockPatternUtils.checkPattern(pattern)) {
                mLockPatternView
                        .setDisplayMode(LockPatternView.DisplayMode.Correct);
                mKeyguardStatusViewManager.setInstructionText("");
                mKeyguardStatusViewManager.updateStatusLines(true);
                mCallback.keyguardDone(true);
                mCallback.reportSuccessfulUnlockAttempt();
                KeyStore.getInstance().password(LockPatternUtils.patternToString(pattern));
            } else {
                boolean reportFailedAttempt = false;
                if (pattern.size() > MIN_PATTERN_BEFORE_POKE_WAKELOCK) {
                    mCallback.pokeWakelock(UNLOCK_PATTERN_WAKE_INTERVAL_MS);
                }
                mLockPatternView.setDisplayMode(LockPatternView.DisplayMode.Wrong);
                if (pattern.size() >= LockPatternUtils.MIN_PATTERN_REGISTER_FAIL) {
                    mTotalFailedPatternAttempts++;
                    mFailedPatternAttemptsSinceLastTimeout++;
                    reportFailedAttempt = true;
                }
                if (mFailedPatternAttemptsSinceLastTimeout
                        >= LockPatternUtils.FAILED_ATTEMPTS_BEFORE_TIMEOUT) {
                    long deadline = mLockPatternUtils.setLockoutAttemptDeadline();
                    handleAttemptLockout(deadline);
                } else {
                    // TODO mUnlockIcon.setVisibility(View.VISIBLE);
                    mKeyguardStatusViewManager.setInstructionText(
                            getContext().getString(R.string.lockscreen_pattern_wrong));
                    mKeyguardStatusViewManager.updateStatusLines(true);
                    mLockPatternView.postDelayed(
                            mCancelPatternRunnable,
                            PATTERN_CLEAR_TIMEOUT_MS);
                }

                // Because the following can result in cleanUp() being called on this screen,
                // member variables reset in cleanUp() shouldn't be accessed after this call.
                if (reportFailedAttempt) {
                    mCallback.reportFailedUnlockAttempt();
                }
            }
