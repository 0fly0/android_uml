class PreferenceGroupAdapter
!!!4033932.java!!!	PreferenceGroupAdapter(inout preferenceGroup : PreferenceGroup)
        mPreferenceGroup = preferenceGroup;
        // If this group gets or loses any children, let us know
        mPreferenceGroup.setOnPreferenceChangeInternalListener(this);

        mPreferenceList = new ArrayList<Preference>();
        mPreferenceLayouts = new ArrayList<PreferenceLayout>();

        syncMyPreferences();
!!!4034060.java!!!	syncMyPreferences() : void
        synchronized(this) {
            if (mIsSyncing) {
                return;
            }

            mIsSyncing = true;
        }

        List<Preference> newPreferenceList = new ArrayList<Preference>(mPreferenceList.size());
        flattenPreferenceGroup(newPreferenceList, mPreferenceGroup);
        mPreferenceList = newPreferenceList;
        
        notifyDataSetChanged();

        synchronized(this) {
            mIsSyncing = false;
            notifyAll();
        }
!!!4034188.java!!!	flattenPreferenceGroup(inout preferences : List<Preference>, inout group : PreferenceGroup) : void
        // TODO: shouldn't always?
        group.sortPreferences();

        final int groupSize = group.getPreferenceCount();
        for (int i = 0; i < groupSize; i++) {
            final Preference preference = group.getPreference(i);
            
            preferences.add(preference);
            
            if (!mHasReturnedViewTypeCount && !preference.hasSpecifiedLayout()) {
                addPreferenceClassName(preference);
            }
            
            if (preference instanceof PreferenceGroup) {
                final PreferenceGroup preferenceAsGroup = (PreferenceGroup) preference;
                if (preferenceAsGroup.isOnSameScreenAsChildren()) {
                    flattenPreferenceGroup(preferences, preferenceAsGroup);
                }
            }

            preference.setOnPreferenceChangeInternalListener(this);
        }
!!!4034316.java!!!	createPreferenceLayout(inout preference : Preference, inout in : PreferenceLayout) : PreferenceLayout
        PreferenceLayout pl = in != null? in : new PreferenceLayout();
        pl.name = preference.getClass().getName();
        pl.resId = preference.getLayoutResource();
        pl.widgetResId = preference.getWidgetLayoutResource();
        return pl;
!!!4034444.java!!!	addPreferenceClassName(inout preference : Preference) : void
        final PreferenceLayout pl = createPreferenceLayout(preference, null);
        int insertPos = Collections.binarySearch(mPreferenceLayouts, pl);

        // Only insert if it doesn't exist (when it is negative).
        if (insertPos < 0) {
            // Convert to insert index
            insertPos = insertPos * -1 - 1;
            mPreferenceLayouts.add(insertPos, pl);
        }
!!!4034572.java!!!	getCount() : int
        return mPreferenceList.size();
!!!4034700.java!!!	getItem(in position : int) : Preference
        if (position < 0 || position >= getCount()) return null;
        return mPreferenceList.get(position);
!!!4034828.java!!!	getItemId(in position : int) : long
        if (position < 0 || position >= getCount()) return ListView.INVALID_ROW_ID;
        return this.getItem(position).getId();
!!!4034956.java!!!	getView(in position : int, inout convertView : View, inout parent : ViewGroup) : View
        final Preference preference = this.getItem(position);
        // Build a PreferenceLayout to compare with known ones that are cacheable.
        mTempPreferenceLayout = createPreferenceLayout(preference, mTempPreferenceLayout);

        // If it's not one of the cached ones, set the convertView to null so that 
        // the layout gets re-created by the Preference.
        if (Collections.binarySearch(mPreferenceLayouts, mTempPreferenceLayout) < 0) {
            convertView = null;
        }

        return preference.getView(convertView, parent);
!!!4035084.java!!!	isEnabled(in position : int) : boolean
        if (position < 0 || position >= getCount()) return true;
        return this.getItem(position).isSelectable();
!!!4035212.java!!!	areAllItemsEnabled() : boolean
        // There should always be a preference group, and these groups are always
        // disabled
        return false;
!!!4035340.java!!!	onPreferenceChange(inout preference : Preference) : void
        notifyDataSetChanged();
!!!4035468.java!!!	onPreferenceHierarchyChange(inout preference : Preference) : void
        mHandler.removeCallbacks(mSyncRunnable);
        mHandler.post(mSyncRunnable);
!!!4035596.java!!!	hasStableIds() : boolean
        return true;
!!!4035724.java!!!	getItemViewType(in position : int) : int
        if (!mHasReturnedViewTypeCount) {
            mHasReturnedViewTypeCount = true;
        }
        
        final Preference preference = this.getItem(position);
        if (preference.hasSpecifiedLayout()) {
            return IGNORE_ITEM_VIEW_TYPE;
        }

        mTempPreferenceLayout = createPreferenceLayout(preference, mTempPreferenceLayout);

        int viewType = Collections.binarySearch(mPreferenceLayouts, mTempPreferenceLayout);
        if (viewType < 0) {
            // This is a class that was seen after we returned the count, so
            // don't recycle it.
            return IGNORE_ITEM_VIEW_TYPE;
        } else {
            return viewType;
        }
!!!4035852.java!!!	getViewTypeCount() : int
        if (!mHasReturnedViewTypeCount) {
            mHasReturnedViewTypeCount = true;
        }
        
        return Math.max(1, mPreferenceLayouts.size());
