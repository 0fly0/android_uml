class Buffer
!!!642331.java!!!	Buffer(in elementSizeShift : int, in capacity : int, inout block : MemoryBlock)
        this._elementSizeShift = elementSizeShift;
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        this.capacity = this.limit = capacity;
        this.block = block;
!!!642715.java!!!	capacity() : int
        return capacity;
!!!642843.java!!!	checkIndex(in index : int) : void
        if (index < 0 || index >= limit) {
            throw new IndexOutOfBoundsException("index=" + index + ", limit=" + limit);
        }
!!!642971.java!!!	checkIndex(in index : int, in sizeOfType : int) : void
        if (index < 0 || index > limit - sizeOfType) {
            throw new IndexOutOfBoundsException("index=" + index + ", limit=" + limit +
                    ", size of type=" + sizeOfType);
        }
!!!643099.java!!!	checkGetBounds(in bytesPerElement : int, in length : int, in offset : int, in count : int) : int
        int byteCount = bytesPerElement * count;
        if ((offset | count) < 0 || offset > length || length - offset < count) {
            throw new IndexOutOfBoundsException("offset=" + offset +
                    ", count=" + count + ", length=" + length);
        }
        if (byteCount > remaining()) {
            throw new BufferUnderflowException();
        }
        return byteCount;
!!!643227.java!!!	checkPutBounds(in bytesPerElement : int, in length : int, in offset : int, in count : int) : int
        int byteCount = bytesPerElement * count;
        if ((offset | count) < 0 || offset > length || length - offset < count) {
            throw new IndexOutOfBoundsException("offset=" + offset +
                    ", count=" + count + ", length=" + length);
        }
        if (byteCount > remaining()) {
            throw new BufferOverflowException();
        }
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        return byteCount;
!!!643355.java!!!	checkStartEndRemaining(in start : int, in end : int) : void
        if (end < start || start < 0 || end > remaining()) {
            throw new IndexOutOfBoundsException("start=" + start + ", end=" + end +
                    ", remaining()=" + remaining());
        }
!!!643483.java!!!	clear() : Buffer
        position = 0;
        mark = UNSET_MARK;
        limit = capacity;
        return this;
!!!643611.java!!!	flip() : Buffer
        limit = position;
        position = 0;
        mark = UNSET_MARK;
        return this;
!!!643867.java!!!	hasRemaining() : boolean
        return position < limit;
!!!644251.java!!!	checkWritable() : void
        if (isReadOnly()) {
            throw new IllegalArgumentException("Read-only buffer");
        }
!!!644379.java!!!	limit() : int
        return limit;
!!!644507.java!!!	limit(in newLimit : int) : Buffer
        if (newLimit < 0 || newLimit > capacity) {
            throw new IllegalArgumentException("Bad limit (capacity " + capacity + "): " + newLimit);
        }

        limit = newLimit;
        if (position > newLimit) {
            position = newLimit;
        }
        if ((mark != UNSET_MARK) && (mark > newLimit)) {
            mark = UNSET_MARK;
        }
        return this;
!!!644635.java!!!	mark() : Buffer
        mark = position;
        return this;
!!!644763.java!!!	position() : int
        return position;
!!!644891.java!!!	position(in newPosition : int) : Buffer
        positionImpl(newPosition);
        return this;
!!!645019.java!!!	positionImpl(in newPosition : int) : void
        if (newPosition < 0 || newPosition > limit) {
            throw new IllegalArgumentException("Bad position (limit " + limit + "): " + newPosition);
        }

        position = newPosition;
        if ((mark != UNSET_MARK) && (mark > position)) {
            mark = UNSET_MARK;
        }
!!!645147.java!!!	remaining() : int
        return limit - position;
!!!645275.java!!!	reset() : Buffer
        if (mark == UNSET_MARK) {
            throw new InvalidMarkException("Mark not set");
        }
        position = mark;
        return this;
!!!645403.java!!!	rewind() : Buffer
        position = 0;
        mark = UNSET_MARK;
        return this;
!!!645531.java!!!	toString() : String
        return getClass().getName() +
            "[position=" + position + ",limit=" + limit + ",capacity=" + capacity + "]";
