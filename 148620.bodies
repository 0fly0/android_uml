class AudioSystem
!!!231820.cpp!!!	muteMicrophone(in state : bool) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setMicMute(state);
!!!231948.cpp!!!	isMicrophoneMuted(inout state : bool) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *state = af->getMicMute();
    return NO_ERROR;
!!!232076.cpp!!!	setMasterVolume(in value : float) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    af->setMasterVolume(value);
    return NO_ERROR;
!!!232204.cpp!!!	getMasterVolume(inout volume : float) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *volume = af->masterVolume();
    return NO_ERROR;
!!!232332.cpp!!!	setMasterMute(in mute : bool) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    af->setMasterMute(mute);
    return NO_ERROR;
!!!232460.cpp!!!	getMasterMute(inout mute : bool) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *mute = af->masterMute();
    return NO_ERROR;
!!!232588.cpp!!!	setStreamVolume(in stream : audio_stream_type_t, in value : float, in output : audio_io_handle_t) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    af->setStreamVolume(stream, value, output);
    return NO_ERROR;
!!!232716.cpp!!!	getStreamVolume(in stream : audio_stream_type_t, inout volume : float, in output : audio_io_handle_t) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *volume = af->streamVolume(stream, output);
    return NO_ERROR;
!!!232844.cpp!!!	setStreamMute(in stream : audio_stream_type_t, in mute : bool) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    af->setStreamMute(stream, mute);
    return NO_ERROR;
!!!232972.cpp!!!	getStreamMute(in stream : audio_stream_type_t, inout mute : bool) : status_t
    if (uint32_t(stream) >= AUDIO_STREAM_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    *mute = af->streamMute(stream);
    return NO_ERROR;
!!!233100.cpp!!!	setMode(in mode : audio_mode_t) : status_t
    if (uint32_t(mode) >= AUDIO_MODE_CNT) return BAD_VALUE;
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setMode(mode);
!!!233228.cpp!!!	isStreamActive(in stream : audio_stream_type_t, inout state : bool, in inPastMs : uint32_t = 0) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    if (state == NULL) return BAD_VALUE;
    *state = aps->isStreamActive(stream, inPastMs);
    return NO_ERROR;
!!!233356.cpp!!!	isSourceActive(in stream : audio_source_t, inout state : bool) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    if (state == NULL) return BAD_VALUE;
    *state = aps->isSourceActive(stream);
    return NO_ERROR;
!!!233484.cpp!!!	setParameters(in ioHandle : audio_io_handle_t, in keyValuePairs : String8) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setParameters(ioHandle, keyValuePairs);
!!!233612.cpp!!!	getParameters(in ioHandle : audio_io_handle_t, in keys : String8) : String8
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    String8 result = String8("");
    if (af == 0) return result;

    result = af->getParameters(ioHandle, keys);
    return result;
!!!233740.cpp!!!	setErrorCallback(in cb : audio_error_callback) : void
    Mutex::Autolock _l(gLock);
    gAudioErrorCallback = cb;
!!!233868.cpp!!!	get_audio_flinger() : sp<IAudioFlinger>
    Mutex::Autolock _l(gLock);
    if (gAudioFlinger == 0) {
        sp<IServiceManager> sm = defaultServiceManager();
        sp<IBinder> binder;
        do {
            binder = sm->getService(String16("media.audio_flinger"));
            if (binder != 0)
                break;
            ALOGW("AudioFlinger not published, waiting...");
            usleep(500000); // 0.5 s
        } while (true);
        if (gAudioFlingerClient == NULL) {
            gAudioFlingerClient = new AudioFlingerClient();
        } else {
            if (gAudioErrorCallback) {
                gAudioErrorCallback(NO_ERROR);
            }
        }
        binder->linkToDeath(gAudioFlingerClient);
        gAudioFlinger = interface_cast<IAudioFlinger>(binder);
        gAudioFlinger->registerClient(gAudioFlingerClient);
    }
    ALOGE_IF(gAudioFlinger==0, "no AudioFlinger!?");

    return gAudioFlinger;
!!!233996.cpp!!!	linearToLog(in volume : int) : float
    // float v = volume ? exp(float(100 - volume) * dBConvert) : 0;
    // ALOGD("linearToLog(%d)=%f", volume, v);
    // return v;
    return volume ? exp(float(100 - volume) * dBConvert) : 0;
!!!234124.cpp!!!	logToLinear(in volume : float) : int
    // int v = volume ? 100 - int(dBConvertInverse * log(volume) + 0.5) : 0;
    // ALOGD("logTolinear(%d)=%f", v, volume);
    // return v;
    return volume ? 100 - int(dBConvertInverse * log(volume) + 0.5) : 0;
!!!234252.cpp!!!	getOutputSamplingRate(inout samplingRate : int, in streamType : audio_stream_type_t = AUDIO_STREAM_DEFAULT) : status_t
    audio_io_handle_t output;

    if (streamType == AUDIO_STREAM_DEFAULT) {
        streamType = AUDIO_STREAM_MUSIC;
    }

    output = getOutput(streamType);
    if (output == 0) {
        return PERMISSION_DENIED;
    }

    return getSamplingRate(output, streamType, samplingRate);
!!!234380.cpp!!!	getOutputFrameCount(inout frameCount : int, in streamType : audio_stream_type_t = AUDIO_STREAM_DEFAULT) : status_t
    audio_io_handle_t output;

    if (streamType == AUDIO_STREAM_DEFAULT) {
        streamType = AUDIO_STREAM_MUSIC;
    }

    output = getOutput(streamType);
    if (output == 0) {
        return PERMISSION_DENIED;
    }

    return getFrameCount(output, streamType, frameCount);
!!!234508.cpp!!!	getOutputLatency(inout latency : uint32_t, in streamType : audio_stream_type_t = AUDIO_STREAM_DEFAULT) : status_t
    audio_io_handle_t output;

    if (streamType == AUDIO_STREAM_DEFAULT) {
        streamType = AUDIO_STREAM_MUSIC;
    }

    output = getOutput(streamType);
    if (output == 0) {
        return PERMISSION_DENIED;
    }

    return getLatency(output, streamType, latency);
!!!234636.cpp!!!	getSamplingRate(in output : audio_io_handle_t, in streamType : audio_stream_type_t, inout samplingRate : int) : status_t
    OutputDescriptor *outputDesc;

    gLock.lock();
    outputDesc = AudioSystem::gOutputs.valueFor(output);
    if (outputDesc == NULL) {
        ALOGV("getOutputSamplingRate() no output descriptor for output %d in gOutputs", output);
        gLock.unlock();
        const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
        if (af == 0) return PERMISSION_DENIED;
        *samplingRate = af->sampleRate(output);
    } else {
        ALOGV("getOutputSamplingRate() reading from output desc");
        *samplingRate = outputDesc->samplingRate;
        gLock.unlock();
    }

    ALOGV("getSamplingRate() streamType %d, output %d, sampling rate %d", streamType, output, *samplingRate);

    return NO_ERROR;
!!!234764.cpp!!!	getFrameCount(in output : audio_io_handle_t, in streamType : audio_stream_type_t, inout frameCount : int) : status_t
    OutputDescriptor *outputDesc;

    gLock.lock();
    outputDesc = AudioSystem::gOutputs.valueFor(output);
    if (outputDesc == NULL) {
        gLock.unlock();
        const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
        if (af == 0) return PERMISSION_DENIED;
        *frameCount = af->frameCount(output);
    } else {
        *frameCount = outputDesc->frameCount;
        gLock.unlock();
    }

    ALOGV("getFrameCount() streamType %d, output %d, frameCount %d", streamType, output, *frameCount);

    return NO_ERROR;
!!!234892.cpp!!!	getLatency(in output : audio_io_handle_t, in streamType : audio_stream_type_t, inout latency : uint32_t) : status_t
    OutputDescriptor *outputDesc;

    gLock.lock();
    outputDesc = AudioSystem::gOutputs.valueFor(output);
    if (outputDesc == NULL) {
        gLock.unlock();
        const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
        if (af == 0) return PERMISSION_DENIED;
        *latency = af->latency(output);
    } else {
        *latency = outputDesc->latency;
        gLock.unlock();
    }

    ALOGV("getLatency() streamType %d, output %d, latency %d", streamType, output, *latency);

    return NO_ERROR;
!!!235020.cpp!!!	getOutputSamplingRate(inout samplingRate : int, in streamType : int = AUDIO_STREAM_DEFAULT) : status_t
    return getOutputSamplingRate(samplingRate, (audio_stream_type_t)streamType);
!!!235148.cpp!!!	getOutputFrameCount(inout frameCount : int, in streamType : int = AUDIO_STREAM_DEFAULT) : status_t
    return getOutputFrameCount(frameCount, (audio_stream_type_t)streamType);
!!!235276.cpp!!!	routedToA2dpOutput(in streamType : audio_stream_type_t) : bool
    switch (streamType) {
    case AUDIO_STREAM_MUSIC:
    case AUDIO_STREAM_VOICE_CALL:
    case AUDIO_STREAM_BLUETOOTH_SCO:
    case AUDIO_STREAM_SYSTEM:
        return true;
    default:
        return false;
    }
!!!235404.cpp!!!	getInputBufferSize(in sampleRate : uint32_t, in format : audio_format_t, in channelMask : audio_channel_mask_t, inout buffSize : size_t) : status_t
    gLock.lock();
    // Do we have a stale gInBufferSize or are we requesting the input buffer size for new values
    size_t inBuffSize = gInBuffSize;
    if ((inBuffSize == 0) || (sampleRate != gPrevInSamplingRate) || (format != gPrevInFormat)
        || (channelMask != gPrevInChannelMask)) {
        gLock.unlock();
        const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
        if (af == 0) {
            return PERMISSION_DENIED;
        }
        inBuffSize = af->getInputBufferSize(sampleRate, format, channelMask);
        gLock.lock();
        // save the request params
        gPrevInSamplingRate = sampleRate;
        gPrevInFormat = format;
        gPrevInChannelMask = channelMask;

        gInBuffSize = inBuffSize;
    }
    gLock.unlock();
    *buffSize = inBuffSize;

    return NO_ERROR;
!!!235532.cpp!!!	setVoiceVolume(in value : float) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setVoiceVolume(value);
!!!235660.cpp!!!	getRenderPosition(inout halFrames : uint32_t, inout dspFrames : uint32_t, in stream : audio_stream_type_t = AUDIO_STREAM_DEFAULT) : status_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;

    if (stream == AUDIO_STREAM_DEFAULT) {
        stream = AUDIO_STREAM_MUSIC;
    }

    return af->getRenderPosition(halFrames, dspFrames, getOutput(stream));
!!!235788.cpp!!!	getInputFramesLost(in ioHandle : audio_io_handle_t) : uint
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    unsigned int result = 0;
    if (af == 0) return result;
    if (ioHandle == 0) return result;

    result = af->getInputFramesLost(ioHandle);
    return result;
!!!235916.cpp!!!	newAudioSessionId() : int
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return 0;
    return af->newAudioSessionId();
!!!236044.cpp!!!	acquireAudioSessionId(in audioSession : int) : void
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af != 0) {
        af->acquireAudioSessionId(audioSession);
    }
!!!236172.cpp!!!	releaseAudioSessionId(in audioSession : int) : void
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af != 0) {
        af->releaseAudioSessionId(audioSession);
    }
!!!236428.cpp!!!	setDeviceConnectionState(in device : audio_devices_t, in state : audio_policy_dev_state_t, in device_address : char) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    const char *address = "";

    if (aps == 0) return PERMISSION_DENIED;

    if (device_address != NULL) {
        address = device_address;
    }

    return aps->setDeviceConnectionState(device, state, address);
!!!236556.cpp!!!	getDeviceConnectionState(in device : audio_devices_t, in device_address : char) : audio_policy_dev_state_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return AUDIO_POLICY_DEVICE_STATE_UNAVAILABLE;

    return aps->getDeviceConnectionState(device, device_address);
!!!236684.cpp!!!	setPhoneState(in state : audio_mode_t) : status_t
    if (uint32_t(state) >= AUDIO_MODE_CNT) return BAD_VALUE;
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;

    return aps->setPhoneState(state);
!!!236812.cpp!!!	setForceUse(in usage : audio_policy_force_use_t, in config : audio_policy_forced_cfg_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->setForceUse(usage, config);
!!!236940.cpp!!!	getForceUse(in usage : audio_policy_force_use_t) : audio_policy_forced_cfg_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return AUDIO_POLICY_FORCE_NONE;
    return aps->getForceUse(usage);
!!!237068.cpp!!!	getOutput(in stream : audio_stream_type_t, in samplingRate : uint32_t = 0, in format : audio_format_t = AUDIO_FORMAT_DEFAULT, in channelMask : audio_channel_mask_t = AUDIO_CHANNEL_OUT_STEREO, in flags : audio_output_flags_t = AUDIO_OUTPUT_FLAG_NONE) : audio_io_handle_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return 0;
    return aps->getOutput(stream, samplingRate, format, channelMask, flags);
!!!237196.cpp!!!	startOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : int = 0) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->startOutput(output, stream, session);
!!!237324.cpp!!!	stopOutput(in output : audio_io_handle_t, in stream : audio_stream_type_t, in session : int = 0) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->stopOutput(output, stream, session);
!!!237452.cpp!!!	releaseOutput(in output : audio_io_handle_t) : void
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return;
    aps->releaseOutput(output);
!!!237580.cpp!!!	getInput(in inputSource : audio_source_t, in samplingRate : uint32_t = 0, in format : audio_format_t = AUDIO_FORMAT_DEFAULT, in channelMask : audio_channel_mask_t = AUDIO_CHANNEL_IN_MONO, in sessionId : int = 0) : audio_io_handle_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return 0;
    return aps->getInput(inputSource, samplingRate, format, channelMask, sessionId);
!!!237708.cpp!!!	startInput(in input : audio_io_handle_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->startInput(input);
!!!237836.cpp!!!	stopInput(in input : audio_io_handle_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->stopInput(input);
!!!237964.cpp!!!	releaseInput(in input : audio_io_handle_t) : void
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return;
    aps->releaseInput(input);
!!!238092.cpp!!!	initStreamVolume(in stream : audio_stream_type_t, in indexMin : int, in indexMax : int) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->initStreamVolume(stream, indexMin, indexMax);
!!!238220.cpp!!!	setStreamVolumeIndex(in stream : audio_stream_type_t, in index : int, in device : audio_devices_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->setStreamVolumeIndex(stream, index, device);
!!!238348.cpp!!!	getStreamVolumeIndex(in stream : audio_stream_type_t, inout index : int, in device : audio_devices_t) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->getStreamVolumeIndex(stream, index, device);
!!!238476.cpp!!!	getStrategyForStream(in stream : audio_stream_type_t) : uint32_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return 0;
    return aps->getStrategyForStream(stream);
!!!238604.cpp!!!	getDevicesForStream(in stream : audio_stream_type_t) : audio_devices_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return (audio_devices_t)0;
    return aps->getDevicesForStream(stream);
!!!238732.cpp!!!	getOutputForEffect(in desc : effect_descriptor_t) : audio_io_handle_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->getOutputForEffect(desc);
!!!238860.cpp!!!	registerEffect(in desc : effect_descriptor_t, in io : audio_io_handle_t, in strategy : uint32_t, in session : int, in id : int) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->registerEffect(desc, io, strategy, session, id);
!!!238988.cpp!!!	unregisterEffect(in id : int) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->unregisterEffect(id);
!!!239116.cpp!!!	setEffectEnabled(in id : int, in enabled : bool) : status_t
    const sp<IAudioPolicyService>& aps = AudioSystem::get_audio_policy_service();
    if (aps == 0) return PERMISSION_DENIED;
    return aps->setEffectEnabled(id, enabled);
!!!239244.cpp!!!	clearAudioConfigCache() : void
    Mutex::Autolock _l(gLock);
    ALOGV("clearAudioConfigCache()");
    gOutputs.clear();
!!!239372.cpp!!!	get_audio_policy_service() : sp<IAudioPolicyService>
    gLock.lock();
    if (gAudioPolicyService == 0) {
        sp<IServiceManager> sm = defaultServiceManager();
        sp<IBinder> binder;
        do {
            binder = sm->getService(String16("media.audio_policy"));
            if (binder != 0)
                break;
            ALOGW("AudioPolicyService not published, waiting...");
            usleep(500000); // 0.5 s
        } while (true);
        if (gAudioPolicyServiceClient == NULL) {
            gAudioPolicyServiceClient = new AudioPolicyServiceClient();
        }
        binder->linkToDeath(gAudioPolicyServiceClient);
        gAudioPolicyService = interface_cast<IAudioPolicyService>(binder);
        gLock.unlock();
    } else {
        gLock.unlock();
    }
    return gAudioPolicyService;
!!!239500.cpp!!!	getPrimaryOutputSamplingRate() : int32_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return 0;
    return af->getPrimaryOutputSamplingRate();
!!!239628.cpp!!!	getPrimaryOutputFrameCount() : int32_t
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return 0;
    return af->getPrimaryOutputFrameCount();
