class ChannelNumberTest
!!!13328780.java!!!	testNoMinorChannels() : void
        ChannelNumber channelNumber = new ChannelNumber("23");
        assertEquals(23, channelNumber.getMajor());
        assertEquals(0, channelNumber.getMinor());
        assertEquals("23", channelNumber.toString());
!!!13328908.java!!!	testWithMinorChannels() : void
        ChannelNumber channelNumber = new ChannelNumber("23.4");
        assertEquals(23, channelNumber.getMajor());
        assertEquals(4, channelNumber.getMinor());
        assertEquals("23.4", channelNumber.toString());
!!!13329036.java!!!	testWithMinorChannelsHyphen() : void
        ChannelNumber channelNumber = new ChannelNumber("23-4");
        assertEquals(23, channelNumber.getMajor());
        assertEquals(4, channelNumber.getMinor());
        assertEquals("23-4", channelNumber.toString());
!!!13329164.java!!!	testConstructor_exceptions() : void
        assertInvalidNumber("a");
        assertInvalidNumber("1-a");
        assertInvalidNumber("a-1");
        assertInvalidNumber("1.a");
        assertInvalidNumber("1a");
        assertInvalidNumber("1-1-1");
        assertInvalidNumber("1.1.1");
        assertInvalidNumber("1-a-1");
        assertInvalidNumber("1-1-");
!!!13329292.java!!!	assertInvalidNumber(in id : String) : void
        try {
            new ChannelNumber(id);
            fail();
        } catch (IllegalArgumentException e) {
            assertTrue(true);
        }
!!!13329420.java!!!	testOrdering_onlyMajorChannels() : void
        assertContentsInOrder(
                Sets.newTreeSet(
                        Lists.newArrayList(
                                new ChannelNumber("3"),
                                new ChannelNumber("1"),
                                new ChannelNumber("2"))),
                new ChannelNumber("1"),
                new ChannelNumber("2"),
                new ChannelNumber("3"));
!!!13329548.java!!!	testOrdering_withMinorChannels() : void
        assertContentsInOrder(
                Sets.newTreeSet(
                        Lists.newArrayList(
                                new ChannelNumber("1.4"),
                                new ChannelNumber("1.3"),
                                new ChannelNumber("1"),
                                new ChannelNumber("2"),
                                new ChannelNumber("2.1"))),
                new ChannelNumber("1"),
                new ChannelNumber("1.3"),
                new ChannelNumber("1.4"),
                new ChannelNumber("2"),
                new ChannelNumber("2.1"));
!!!13329676.java!!!	testEqualsAndHashCode_noMinorChannels_equal() : void
        checkEqualsAndHashCodeMethods(
                new ChannelNumber("1"), new ChannelNumber("1"), true);
!!!13329804.java!!!	testEqualsAndHashCode_noMinorChannels_notEqual() : void
        checkEqualsAndHashCodeMethods(
                new ChannelNumber("1"), new ChannelNumber("2"), false);
!!!13329932.java!!!	testEqualsAndHashCode_withMinorChannels_equal() : void
        checkEqualsAndHashCodeMethods(
                new ChannelNumber("1.2"), new ChannelNumber("1.2"), true);
!!!13330060.java!!!	testEqualsAndHashCode_withMinorChannels_minorDifferent() : void
        checkEqualsAndHashCodeMethods(
                new ChannelNumber("1.2"), new ChannelNumber("1.3"), false);
!!!13330188.java!!!	testEqualsAndHashCode_withMinorChannels_majorDifferent() : void
        checkEqualsAndHashCodeMethods(
                new ChannelNumber("1.2"), new ChannelNumber("2.2"), false);
!!!13330316.java!!!	testEqualsAndHashCode_majorAndMinorChannels() : void
        checkEqualsAndHashCodeMethods(
                new ChannelNumber("1"), new ChannelNumber("1.1"), false);
!!!13330444.java!!!	testIsChannelName_normal() : void
        assertTrue(ChannelNumber.isValidStringRepresentation("2"));
        assertTrue(ChannelNumber.isValidStringRepresentation("2-"));
        assertTrue(ChannelNumber.isValidStringRepresentation("2-1"));
        assertTrue(ChannelNumber.isValidStringRepresentation("10.1"));
        assertTrue(ChannelNumber.isValidStringRepresentation("10."));
        assertFalse(ChannelNumber.isValidStringRepresentation("-2"));
        assertFalse(ChannelNumber.isValidStringRepresentation(".2"));
        assertFalse(ChannelNumber.isValidStringRepresentation("2-."));
        assertFalse(ChannelNumber.isValidStringRepresentation("2--"));
        assertFalse(ChannelNumber.isValidStringRepresentation("2.."));
        assertFalse(ChannelNumber.isValidStringRepresentation("a"));
