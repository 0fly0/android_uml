class OldBufferedReaderTest
!!!2640155.java!!!	test_ConstructorLjava_io_Reader() : void
        // Test for method java.io.BufferedReader(java.io.Reader)
        br = new BufferedReader(new Support_StringReader(testString));
        assertNotNull(br);
!!!2640283.java!!!	test_ConstructorLjava_io_ReaderI() : void
        // Illegal negative size argument test.
        try {
            br = new BufferedReader(new Support_StringReader(testString), 0);
            fail("IllegalArgumentException expected");
        } catch (IllegalArgumentException expected) {
        }
        br = new BufferedReader(new Support_StringReader(testString), 1024);
        assertNotNull(br);
!!!2640411.java!!!	test_close() : void
        Support_ASimpleReader ssr = new Support_ASimpleReader(true);
        try {
            br = new BufferedReader(new Support_StringReader(testString));
            br.close();
            br.read();
            fail("Test 1: Read on closed stream.");
        } catch (IOException x) {
            // Expected.
        } catch (Exception e) {
            fail("Exception during close test " + e.toString());
        }

        br = new BufferedReader(ssr);
        try {
            br.close();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        // Avoid IOException in tearDown().
        ssr.throwExceptionOnNextUse = false;
!!!2640539.java!!!	test_markI() : void
        // Test for method void java.io.BufferedReader.mark(int)
        char[] buf = null;
        try {
            br = new BufferedReader(new Support_StringReader(testString));
            br.skip(500);
            br.mark(1000);
            br.skip(250);
            br.reset();
            buf = new char[testString.length()];
            br.read(buf, 0, 500);
            assertTrue("Failed to set mark properly", testString.substring(500,
                    1000).equals(new String(buf, 0, 500)));
        } catch (java.io.IOException e) {
            fail("Exception during mark test");
        }
        try {
            br = new BufferedReader(new Support_StringReader(testString), 800);
            br.skip(500);
            br.mark(250);
            br.read(buf, 0, 1000);
            br.reset();
            fail("Failed to invalidate mark properly");
        } catch (IOException x) {
        }

        char[] chars = new char[256];
        for (int i = 0; i < 256; i++)
            chars[i] = (char) i;
        Reader in = new BufferedReader(new Support_StringReader(new String(
                chars)), 12);
        try {
            in.skip(6);
            in.mark(14);
            in.read(new char[14], 0, 14);
            in.reset();
            assertTrue("Wrong chars", in.read() == (char) 6
                    && in.read() == (char) 7);
        } catch (IOException e) {
            fail("Exception during mark test 2:" + e);
        }

        in = new BufferedReader(new Support_StringReader(new String(chars)), 12);
        try {
            in.skip(6);
            in.mark(8);
            in.skip(7);
            in.reset();
            assertTrue("Wrong chars 2", in.read() == (char) 6
                    && in.read() == (char) 7);
        } catch (IOException e) {
            fail("Exception during mark test 3:" + e);
        }
!!!2640667.java!!!	test_markSupported() : void
        // Test for method boolean java.io.BufferedReader.markSupported()
        br = new BufferedReader(new Support_StringReader(testString));
        assertTrue("markSupported returned false.", br.markSupported());
!!!2640795.java!!!	test_read() : void
        Support_ASimpleReader ssr = new Support_ASimpleReader(true);
        try {
            br = new BufferedReader(new Support_StringReader(testString));
            int r = br.read();
            assertTrue("Char read improperly", testString.charAt(0) == r);
            br = new BufferedReader(new Support_StringReader(new String(
                    new char[] { '\u8765' })));
            assertTrue("Wrong double byte character", br.read() == '\u8765');
        } catch (java.io.IOException e) {
            fail("Exception during read test");
        }

        char[] chars = new char[256];
        for (int i = 0; i < 256; i++)
            chars[i] = (char) i;
        Reader in = new BufferedReader(new Support_StringReader(new String(
                chars)), 12);
        try {
            assertEquals("Wrong initial char", 0, in.read()); // Fill the
            // buffer
            char[] buf = new char[14];
            in.read(buf, 0, 14); // Read greater than the buffer
            assertTrue("Wrong block read data", new String(buf)
                    .equals(new String(chars, 1, 14)));
            assertEquals("Wrong chars", 15, in.read()); // Check next byte
        } catch (IOException e) {
            fail("Exception during read test 2:" + e);
        }

        // regression test for HARMONY-841
        assertTrue(new BufferedReader(new CharArrayReader(new char[5], 1, 0), 2).read() == -1);

        br.close();
        br = new BufferedReader(ssr);
        try {
            br.read();
            fail("IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        // Avoid IOException in tearDown().
        ssr.throwExceptionOnNextUse = false;
!!!2640923.java!!!	test_read$CII_Exception() : void
        br = new BufferedReader(new Support_StringReader(testString));
        try{
            br.read(new char[10], -1, 1);
            fail("should throw IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try{
            br.read(new char[10], 0, -1);
            fail("should throw IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try{
            br.read(new char[10], 10, 1);
            fail("should throw IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        //regression for HARMONY-831
        try{
            new BufferedReader(new PipedReader(), 9).read(new char[] {}, 7, 0);
            fail("should throw IndexOutOfBoundsException");
        }catch(IndexOutOfBoundsException e){
        }
!!!2641051.java!!!	test_readLine() : void
        String line;
        br = new BufferedReader(new Support_StringReader("Lorem\nipsum\rdolor sit amet..."));

        line = br.readLine();
        assertTrue("Test 1: Incorrect line written or read: " + line,
                line.equals("Lorem"));
        line = br.readLine();
        assertTrue("Test 2: Incorrect line written or read: " + line,
                line.equals("ipsum"));
        line = br.readLine();
        assertTrue("Test 3: Incorrect line written or read: " + line,
                line.equals("dolor sit amet..."));

        br.close();
        try {
            br.readLine();
            fail("Test 4: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2641179.java!!!	test_ready() : void
        Support_ASimpleReader ssr = new Support_ASimpleReader(true);
        try {
            br = new BufferedReader(new Support_StringReader(testString));
            assertTrue("Test 1: ready() returned false", br.ready());
        } catch (java.io.IOException e) {
            fail("Exception during ready test" + e.toString());
        }

        br.close();
        br = new BufferedReader(ssr);
        try {
            br.close();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        // Avoid IOException in tearDown().
        ssr.throwExceptionOnNextUse = false;
!!!2641307.java!!!	test_skipJ() : void
        Support_ASimpleReader ssr = new Support_ASimpleReader(true);
        br = new BufferedReader(new Support_StringReader(testString));

        try {
            br.skip(-1);
            fail("Test 1: IllegalArgumentException expected.");
        } catch (IllegalArgumentException e) {
            // Expected.
        }

        br.skip(500);
        char[] buf = new char[testString.length()];
        br.read(buf, 0, 500);
        assertTrue("Test 2: Failed to set skip properly.",
                testString.substring(500, 1000).equals(
                        new String(buf, 0, 500)));

        br.close();
        br = new BufferedReader(ssr);
        try {
            br.skip(1);
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        // Avoid IOException in tearDown().
        ssr.throwExceptionOnNextUse = false;
!!!2641435.java!!!	testReadZeroLengthArray() : void
        br = new BufferedReader(new Support_StringReader("ABCDEF"));
        br.read();
        br.read();
        assertEquals(0, br.read(new char[6], 3, 0));
!!!2641563.java!!!	testSourceThrowsWithMark() : void
        br = new BufferedReader(new ThrowingReader(
                new StringReader("ABCDEFGHI"), 4));

        br.read();
        br.read();
        br.mark(10);
        br.read();
        br.read();

        try {
            br.read();
            fail();
        } catch (IOException fromThrowingReader) {
        }

        assertEquals('E', br.read());
        assertEquals('F', br.read());
!!!2641691.java!!!	tearDown() : void
        try {
            br.close();
        } catch (Exception e) {
        }
