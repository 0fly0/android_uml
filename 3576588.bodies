class AsciiHprofWriter
!!!15456652.java!!!	write(inout data : HprofData, inout outputStream : OutputStream) : void
        new AsciiHprofWriter(data, outputStream).write();
!!!15456780.java!!!	AsciiHprofWriter(inout data : HprofData, inout outputStream : OutputStream)
        this.data = data;
        this.out = new PrintWriter(outputStream);
!!!15456908.java!!!	write() : void
        for (HprofData.ThreadEvent e : data.getThreadHistory()) {
            out.println(e);
        }

        List<HprofData.Sample> samples
                = new ArrayList<HprofData.Sample>(data.getSamples());
        Collections.sort(samples, SAMPLE_COMPARATOR);
        int total = 0;
        for (HprofData.Sample sample : samples) {
            HprofData.StackTrace stackTrace = sample.stackTrace;
            int count = sample.count;
            total += count;
            out.printf("TRACE %d: (thread=%d)\n",
                       stackTrace.stackTraceId,
                       stackTrace.threadId);
            for (StackTraceElement e : stackTrace.stackFrames) {
                out.printf("\t%s\n", e);
            }
        }
        Date now = new Date(data.getStartMillis());
        // "CPU SAMPLES BEGIN (total = 826) Wed Jul 21 12:03:46 2010"
        out.printf("CPU SAMPLES BEGIN (total = %d) %ta %tb %td %tT %tY\n",
                   total, now, now, now, now, now);
        out.printf("rank   self  accum   count trace method\n");
        int rank = 0;
        double accum = 0;
        for (HprofData.Sample sample : samples) {
            rank++;
            HprofData.StackTrace stackTrace = sample.stackTrace;
            int count = sample.count;
            double self = (double)count/(double)total;
            accum += self;

            // "   1 65.62% 65.62%     542 300302 java.lang.Long.parseLong"
            out.printf("% 4d% 6.2f%%% 6.2f%% % 7d % 5d %s.%s\n",
                       rank, self*100, accum*100, count, stackTrace.stackTraceId,
                       stackTrace.stackFrames[0].getClassName(),
                       stackTrace.stackFrames[0].getMethodName());
        }
        out.printf("CPU SAMPLES END\n");
        out.flush();
