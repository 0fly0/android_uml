class HttpParser
!!!13124108.java!!!	HttpParser()

    super();
!!!13124236.java!!!	parseLine(inout stream : InputStream, inout buffer : byte, inout charset : Charset) : String

    StringBuffer stringBuffer = null;
    int c = stream.read();
    if (c < 0) {
      // EOF
      return null;
    }
    int bufferIndex = 0;
    while (c >= 0) {
      if (c == '\n') {
        break;
      } else if (c != '\r') {
        buffer[bufferIndex++] = (byte) c;
        if (bufferIndex == buffer.length) {
          String part = new String(buffer, 0, bufferIndex);
          if (stringBuffer == null) {
            stringBuffer = new StringBuffer(part);
          } else {
            stringBuffer.append(part);
          }
          bufferIndex = 0;
        }
      }
      c = stream.read();
    }
    String s = new String(buffer, 0, bufferIndex);
    if (stringBuffer != null) {
      stringBuffer.append(s);
      s = stringBuffer.toString();
    }
    return s;
!!!13124364.java!!!	parseProperties(inout stream : InputStream, inout message : HttpMessage, inout charset : Charset, inout buffer : byte) : void

    String line = parseLine(stream, buffer, charset);
    String currentProperty = null;
    while ((line != null) && (line.length() > 0)) {
      char c = line.charAt(0);
      if ((c == ' ') || (c == '\t')) {
        // LWS
        if (currentProperty != null) {
          message.appendHeaderProperty(currentProperty, line);
        }
      } else {
        CharSequenceScanner parser = new CharSequenceScanner(line);
        String property = parser.readWhile(TOKEN_FILTER);
        c = parser.forceNext();
        if (c == ':') {
            //c = parser.forceNext();
          parser.skipWhile(CharFilter.WHITESPACE_FILTER);
          currentProperty = property;
          String value = parser.read(Integer.MAX_VALUE);
          message.appendHeaderProperty(property, value);
        }
      }
      line = parseLine(stream, buffer, charset);
    }
!!!13124492.java!!!	parseRequest(inout stream : InputStream, inout request : HttpRequest) : void

    parseRequest(stream, request, CHARSET_US_ASCII);
!!!13124620.java!!!	parseRequest(inout stream : InputStream, inout request : HttpRequest, inout charset : Charset) : void
    parseRequest(stream, request, charset, true /* expect method and uri */);
!!!13124748.java!!!	parseRequest(inout stream : InputStream, inout request : HttpRequest, inout charset : Charset, inout expectMethodAndUri : boolean) : void

    byte[] buffer = new byte[256];
    String line = parseLine(stream, buffer, charset);
    if (line == null) {
      throw new IllegalStateException("Illegal HTTP header!");
    }
    CharSequenceScanner parser = new CharSequenceScanner(line);
    if (expectMethodAndUri) {
      String method = parser.readUntil(' ', false);
      if (method == null) {
        throw new IllegalStateException("Illegal HTTP header!");
      }
      request.setMethod(method.toUpperCase());
      String uri = parser.readUntil(' ', true);
      if (uri == null) {
        throw new IllegalStateException("Illegal HTTP header!");
      }
      request.setUri(uri);
    }

    if (parser.hasNext()) {
      boolean compliant = parser.expect(HttpMessage.VERSION_PREFIX, true);
      if (!compliant) {
        throw new IllegalStateException("Illegal HTTP header!");
      }
      String version = parser.read(Integer.MAX_VALUE);
      request.setVersion(version);
      parseProperties(stream, request, charset, buffer);
    } else {
      request.setVersion(HttpMessage.VERSION_0_9);
    }
