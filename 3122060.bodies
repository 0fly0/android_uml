class JSONArray
!!!13133708.java!!!	JSONArray()
        this.myArrayList = new ArrayList();
!!!13133836.java!!!	JSONArray(inout x : JSONTokener)
        this();
        char c = x.nextClean();
        char q;
        if (c == '[') {
            q = ']';
        } else if (c == '(') {
            q = ')';
        } else {
            throw x.syntaxError("A JSONArray text must start with '['");
        }
        if (x.nextClean() == ']') {
            return;
        }
        x.back();
        for (;;) {
            if (x.nextClean() == ',') {
                x.back();
                this.myArrayList.add(null);
            } else {
                x.back();
                this.myArrayList.add(x.nextValue());
            }
            c = x.nextClean();
            switch (c) {
            case ';':
            case ',':
                if (x.nextClean() == ']') {
                    return;
                }
                x.back();
                break;
            case ']':
            case ')':
                if (q != c) {
                    throw x.syntaxError("Expected a '" + new Character(q) + "'");
                }
                return;
            default:
                throw x.syntaxError("Expected a ',' or ']'");
            }
        }
!!!13133964.java!!!	JSONArray(in source : String)
        this(new JSONTokener(source));
!!!13134092.java!!!	JSONArray(inout collection : Collection)
        this.myArrayList = (collection == null) ?
            new ArrayList() :
            new ArrayList(collection);
!!!13134220.java!!!	JSONArray(inout collection : Collection, inout includeSuperClass : boolean)
		this.myArrayList = new ArrayList();
		if (collection != null) {
			Iterator iter = collection.iterator();;
			while (iter.hasNext()) {
			    Object o = iter.next();
			    if (o instanceof Map) {
			    	this.myArrayList.add(new JSONObject((Map)o, includeSuperClass));
			    } else if (!JSONObject.isStandardProperty(o.getClass())) {
			    	this.myArrayList.add(new JSONObject(o, includeSuperClass));
			    } else {
                    this.myArrayList.add(o);  
				}
			}
		}
!!!13134348.java!!!	JSONArray(inout array : Object)
        this();
        if (array.getClass().isArray()) {
            int length = Array.getLength(array);
            for (int i = 0; i < length; i += 1) {
                this.put(Array.get(array, i));
            }
        } else {
            throw new JSONException("JSONArray initial value should be a string or collection or array.");
        }
!!!13134476.java!!!	JSONArray(inout array : Object, inout includeSuperClass : boolean)
        this();
        if (array.getClass().isArray()) {
            int length = Array.getLength(array);
            for (int i = 0; i < length; i += 1) {
                Object o = Array.get(array, i);
                if (JSONObject.isStandardProperty(o.getClass())) {
                    this.myArrayList.add(o);  
                } else {
                    this.myArrayList.add(new JSONObject(o,includeSuperClass));  
                }
            }
        } else {
            throw new JSONException("JSONArray initial value should be a string or collection or array.");
        }
!!!13134604.java!!!	get(in index : int) : Object
        Object o = opt(index);
        if (o == null) {
            throw new JSONException("JSONArray[" + index + "] not found.");
        }
        return o;
!!!13134732.java!!!	getBoolean(in index : int) : boolean
        Object o = get(index);
        if (o.equals(Boolean.FALSE) ||
                (o instanceof String &&
                ((String)o).equalsIgnoreCase("false"))) {
            return false;
        } else if (o.equals(Boolean.TRUE) ||
                (o instanceof String &&
                ((String)o).equalsIgnoreCase("true"))) {
            return true;
        }
        throw new JSONException("JSONArray[" + index + "] is not a Boolean.");
!!!13134860.java!!!	getDouble(in index : int) : double
        Object o = get(index);
        try {
            return o instanceof Number ?
                ((Number)o).doubleValue() :
                Double.valueOf((String)o).doubleValue();
        } catch (Exception e) {
            throw new JSONException("JSONArray[" + index +
                "] is not a number.");
        }
!!!13134988.java!!!	getInt(in index : int) : int
        Object o = get(index);
        return o instanceof Number ?
                ((Number)o).intValue() : (int)getDouble(index);
!!!13135116.java!!!	getJSONArray(in index : int) : JSONArray
        Object o = get(index);
        if (o instanceof JSONArray) {
            return (JSONArray)o;
        }
        throw new JSONException("JSONArray[" + index +
                "] is not a JSONArray.");
!!!13135244.java!!!	getJSONObject(in index : int) : JSONObject
        Object o = get(index);
        if (o instanceof JSONObject) {
            return (JSONObject)o;
        }
        throw new JSONException("JSONArray[" + index +
            "] is not a JSONObject.");
!!!13135372.java!!!	getLong(in index : int) : long
        Object o = get(index);
        return o instanceof Number ?
                ((Number)o).longValue() : (long)getDouble(index);
!!!13135500.java!!!	getString(in index : int) : String
        return get(index).toString();
!!!13135628.java!!!	isNull(in index : int) : boolean
        return JSONObject.NULL.equals(opt(index));
!!!13135756.java!!!	join(in separator : String) : String
        int len = length();
        StringBuffer sb = new StringBuffer();

        for (int i = 0; i < len; i += 1) {
            if (i > 0) {
                sb.append(separator);
            }
            sb.append(JSONObject.valueToString(this.myArrayList.get(i)));
        }
        return sb.toString();
!!!13135884.java!!!	length() : int
        return this.myArrayList.size();
!!!13136012.java!!!	opt(in index : int) : Object
        return (index < 0 || index >= length()) ?
            null : this.myArrayList.get(index);
!!!13136140.java!!!	optBoolean(in index : int) : boolean
        return optBoolean(index, false);
!!!13136268.java!!!	optBoolean(in index : int, inout defaultValue : boolean) : boolean
        try {
            return getBoolean(index);
        } catch (Exception e) {
            return defaultValue;
        }
!!!13136396.java!!!	optDouble(in index : int) : double
        return optDouble(index, Double.NaN);
!!!13136524.java!!!	optDouble(in index : int, in defaultValue : double) : double
        try {
            return getDouble(index);
        } catch (Exception e) {
            return defaultValue;
        }
!!!13136652.java!!!	optInt(in index : int) : int
        return optInt(index, 0);
!!!13136780.java!!!	optInt(in index : int, in defaultValue : int) : int
        try {
            return getInt(index);
        } catch (Exception e) {
            return defaultValue;
        }
!!!13136908.java!!!	optJSONArray(in index : int) : JSONArray
        Object o = opt(index);
        return o instanceof JSONArray ? (JSONArray)o : null;
!!!13137036.java!!!	optJSONObject(in index : int) : JSONObject
        Object o = opt(index);
        return o instanceof JSONObject ? (JSONObject)o : null;
!!!13137164.java!!!	optLong(in index : int) : long
        return optLong(index, 0);
!!!13137292.java!!!	optLong(in index : int, in defaultValue : long) : long
        try {
            return getLong(index);
        } catch (Exception e) {
            return defaultValue;
        }
!!!13137420.java!!!	optString(in index : int) : String
        return optString(index, "");
!!!13137548.java!!!	optString(in index : int, in defaultValue : String) : String
        Object o = opt(index);
        return o != null ? o.toString() : defaultValue;
!!!13137676.java!!!	put(inout value : boolean) : JSONArray
        put(value ? Boolean.TRUE : Boolean.FALSE);
        return this;
!!!13137804.java!!!	put(inout value : Collection) : JSONArray
        put(new JSONArray(value));
        return this;
!!!13137932.java!!!	put(in value : double) : JSONArray
        Double d = new Double(value);
        JSONObject.testValidity(d);
        put(d);
        return this;
!!!13138060.java!!!	put(in value : int) : JSONArray
        put(new Integer(value));
        return this;
!!!13138188.java!!!	put(in value : long) : JSONArray
        put(new Long(value));
        return this;
!!!13138316.java!!!	put(inout value : Map) : JSONArray
        put(new JSONObject(value));
        return this;
!!!13138444.java!!!	put(inout value : Object) : JSONArray
        this.myArrayList.add(value);
        return this;
!!!13138572.java!!!	put(in index : int, inout value : boolean) : JSONArray
        put(index, value ? Boolean.TRUE : Boolean.FALSE);
        return this;
!!!13138700.java!!!	put(in index : int, inout value : Collection) : JSONArray
        put(index, new JSONArray(value));
        return this;
!!!13138828.java!!!	put(in index : int, in value : double) : JSONArray
        put(index, new Double(value));
        return this;
!!!13138956.java!!!	put(in index : int, in value : int) : JSONArray
        put(index, new Integer(value));
        return this;
!!!13139084.java!!!	put(in index : int, in value : long) : JSONArray
        put(index, new Long(value));
        return this;
!!!13139212.java!!!	put(in index : int, inout value : Map) : JSONArray
        put(index, new JSONObject(value));
        return this;
!!!13139340.java!!!	put(in index : int, inout value : Object) : JSONArray
        JSONObject.testValidity(value);
        if (index < 0) {
            throw new JSONException("JSONArray[" + index + "] not found.");
        }
        if (index < length()) {
            this.myArrayList.set(index, value);
        } else {
            while (index != length()) {
                put(JSONObject.NULL);
            }
            put(value);
        }
        return this;
!!!13139468.java!!!	remove(in index : int) : Object
    	Object o = opt(index);
        this.myArrayList.remove(index);
        return o;
!!!13139596.java!!!	toJSONObject(inout names : JSONArray) : JSONObject
        if (names == null || names.length() == 0 || length() == 0) {
            return null;
        }
        JSONObject jo = new JSONObject();
        for (int i = 0; i < names.length(); i += 1) {
            jo.put(names.getString(i), this.opt(i));
        }
        return jo;
!!!13139724.java!!!	toString() : String
        try {
            return '[' + join(",") + ']';
        } catch (Exception e) {
            return null;
        }
!!!13139852.java!!!	toString(in indentFactor : int) : String
        return toString(indentFactor, 0);
!!!13139980.java!!!	toString(in indentFactor : int, in indent : int) : String
        int len = length();
        if (len == 0) {
            return "[]";
        }
        int i;
        StringBuffer sb = new StringBuffer("[");
        if (len == 1) {
            sb.append(JSONObject.valueToString(this.myArrayList.get(0),
                    indentFactor, indent));
        } else {
            int newindent = indent + indentFactor;
            sb.append('\n');
            for (i = 0; i < len; i += 1) {
                if (i > 0) {
                    sb.append(",\n");
                }
                for (int j = 0; j < newindent; j += 1) {
                    sb.append(' ');
                }
                sb.append(JSONObject.valueToString(this.myArrayList.get(i),
                        indentFactor, newindent));
            }
            sb.append('\n');
            for (i = 0; i < indent; i += 1) {
                sb.append(' ');
            }
        }
        sb.append(']');
        return sb.toString();
!!!13140108.java!!!	write(inout writer : Writer) : Writer
        try {
            boolean b = false;
            int     len = length();

            writer.write('[');

            for (int i = 0; i < len; i += 1) {
                if (b) {
                    writer.write(',');
                }
                Object v = this.myArrayList.get(i);
                if (v instanceof JSONObject) {
                    ((JSONObject)v).write(writer);
                } else if (v instanceof JSONArray) {
                    ((JSONArray)v).write(writer);
                } else {
                    writer.write(JSONObject.valueToString(v));
                }
                b = true;
            }
            writer.write(']');
            return writer;
        } catch (IOException e) {
           throw new JSONException(e);
        }
