class TVInputsSetupActivity
!!!12275212.java!!!	onCreate(in savedInstanceState : Bundle) : void

        super.onCreate(savedInstanceState);
        mContext = getApplicationContext();

        setContentView(R.layout.devicelist);
        // setTimeOut(0); // no timeout during OOBE
        mDevicesList = (ListView) findViewById(R.id.lv);
        mButton_back = (Button) findViewById(R.id.device_list_back);
        mButton_back.setOnClickListener(this);
        mButton_next = (Button) findViewById(R.id.device_list_next);
        mButton_next.requestFocus();
        mButton_next.setOnClickListener(this);

        this.setTitleColor(Color.WHITE);
        setupListView();

        // if start it from app menu we should not pair devices
        Intent intent = getIntent();
        if (intent != null && intent.getStringExtra(TvIntents.PREVIOUSCLASS) != null) {
            findViewById(R.id.redLayout).setVisibility(View.VISIBLE);
            Log.d(TAG, "start from menu");

            focusIndex = -1; // mark it starts from menu
            return;
        }

        mDeviceObserver = new DevicesContentObserver(new Handler());

        // Display progress dialog to the user
        mDialog = ProgressDialog.show(this, "", "  Please wait...  ", false, true);
        mDialog.setContentView(R.layout.progress_dialog_view);
        ((TextView) mDialog.findViewById(R.id.progress_dialog_view_tv))
                .setText(R.string.devicelist_progress_dialogview);

        findViewById(R.id.buttonlayout).setVisibility(View.VISIBLE);
        Log.d(TAG, "start from OOBE");
        final PairingDevice pairingDevice = new PairingDevice();
        pairingDevice.pairDevices(mContext, true);

!!!12275340.java!!!	setupListView() : void
        mDevicesList.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
                    long arg3) {
                focusIndex = arg2;
                Device device = pairedDevices.get(arg2);
                Log.d("Utils", "device id=" + device.getId());
                startPairing(device);

            }
        });
!!!12275468.java!!!	startPairing(inout device : Device) : void
        // Uri video =
        // Uri.parse(device.getCapabilityStringValue(Capability.IS_BOUND_TO_PORT));
        // Intent intent = new Intent();
        // intent.putExtra("device_id", device.getId());
        // intent.putExtra("device", device);
        // intent.putExtra("video_uri", video);
        // intent.setClass(this,IrBlasterSetupActivity.class);
        // startActivityForResult(intent,IR_BLASTER_REQUEST_CODE);

!!!12275596.java!!!	onStart() : void

        super.onStart();
        connectToService();
!!!12275724.java!!!	onDestroy() : void
        if (mServiceConnection != null) {
            unbindService(mServiceConnection);
            mBoundService = null;
            mServiceConnection = null;
        }

        unregisterDeviceObserver();
        super.onDestroy();
!!!12275852.java!!!	connectToService() : void
        mServiceConnection = new ServiceConnection() {

            @Override
            public void onServiceConnected(final ComponentName name, final IBinder service) {
                mBoundService = IMediaDevicesService.Stub.asInterface(service);
                updateList();
                registerDeviceObserver();
            }

            @Override
            public void onServiceDisconnected(final ComponentName name) {
            }
        };
        bindService(new Intent(MediaDevicesConstants.ACTION_BIND_MEDIA_DEVICES_SERVICE),
                mServiceConnection,
                Service.BIND_AUTO_CREATE);
!!!12275980.java!!!	registerDeviceObserver() : void
        if (mDeviceObserver != null) {
            ContentResolver resolver = this.getContentResolver();
            resolver.registerContentObserver(Devices.DEVICES_URI, true, mDeviceObserver);
        }
!!!12276108.java!!!	unregisterDeviceObserver() : void
        if (mDeviceObserver != null) {
            ContentResolver resolver = this.getContentResolver();
            resolver.unregisterContentObserver(mDeviceObserver);
        }
!!!12276236.java!!!	updateList() : void

        List<Device> devices = null;
        try {
            devices = mBoundService.getPairedDevices();
            Collections.sort(devices, new PairingDevice().new DeviceComparator());
        } catch (RemoteException e) {
            ProgramaticException.displayException(getApplicationContext(), TAG, e);
            devices = new ArrayList<Device>();
        }

        // comment out to allow TUNER device shown in list
        // Set<String> excludeDevIdSet = new HashSet<String>();
        // excludeDevIdSet.add(PairingDevice.TUNER_DEVICE_ID);
        // devices = PairingDevice.filterDeviceList(this, devices, true,
        // excludeDevIdSet);

        if (focusIndex == -1) {
            String deviceId = Wrapper.getWrapperInstance().getCurrentDeviceId();
            focusIndex = PairingDevice.getDevIndexById(devices, deviceId);
        }

        pairedDevices = devices;

        // final int buttonCount = devices.size();
        //
        // final String btnLabels[] = new String[buttonCount];
        // final String btnLabelsDescription[] = new String[buttonCount];
        //
        // final Iterator<Device> iterator = devices.iterator();
        // Device device = null;
        // int count = 0;
        // while (iterator.hasNext()) {
        // device = iterator.next();
        // btnLabels[count] = device.getLabel();
        // btnLabelsDescription[count] = device.getSummary();
        // count++;
        // }
        // mBtnLabels = btnLabels;
        // mBtnLabelsDescription = btnLabelsDescription;

        if (mDialog != null)
            mDialog.dismiss();

        if (pairedDevices != null && pairedDevices.size() > 0) {
            mDevicesList.setAdapter(new DeviceListAdapter(this));
            mDevicesList.setSelection(focusIndex);
        }
!!!12276364.java!!!	onClick(in view : View) : void

        final int viewId = view.getId();
        if (viewId == R.id.device_list_back) {
            setResult(RESULT_CANCELED);
            // unbindService(mServiceConnection);
            finish();
        } else if (viewId == R.id.device_list_next) {
            setResult(RESULT_OK);
            // unbindService(mServiceConnection);
            finish();
        }
!!!12277388.java!!!	onKeyUp(in keyCode : int, in event : KeyEvent) : boolean
        Log.d(TAG, "onKeyUp()");
        if (keyCode == KeyEvent.KEYCODE_PROG_RED) {
            int selectedId = mDevicesList.getSelectedItemPosition();
            clearOrSetBlaster(selectedId);
            return super.onKeyUp(keyCode, event);

        } else {
            return super.onKeyUp(keyCode, event);
        }
!!!12277516.java!!!	clearOrSetBlaster(in selectedId : int) : void
        startPairing(pairedDevices.get(selectedId));
!!!12277644.java!!!	onKey(inout v : View, in keyCode : int, inout event : KeyEvent) : boolean
        if ((v.getId() == R.id.device_list_back || v.getId() == R.id.device_list_next)
                && keyCode == KeyEvent.KEYCODE_DPAD_UP) {
            mDevicesList.setSelection(pairedDevices.size() - 1);
        }
        return false;
!!!12277772.java!!!	registerBroadcastReceiver(inout context : Context, in action : String, in runnableOnReceive : Runnable, in handler : Handler) : void
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(action);
        final BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                try {
                    handler.post(runnableOnReceive);
                } finally {
                    context.unregisterReceiver(this);
                }
            }
        };
        context.registerReceiver(receiver, intentFilter);
