class ZipSet
!!!979980.cpp!!!	~ZipSet(in  : void)
    size_t N = mZipFile.size();
    for (size_t i = 0; i < N; i++)
        closeZip(i);
!!!980108.cpp!!!	getZip(in path : String8) : ZipFileRO
    int idx = getIndex(path);
    sp<SharedZip> zip = mZipFile[idx];
    if (zip == NULL) {
        zip = SharedZip::get(path);
        mZipFile.editItemAt(idx) = zip;
    }
    return zip->getZip();
!!!980236.cpp!!!	getZipResourceTableAsset(in path : String8) : Asset
    int idx = getIndex(path);
    sp<SharedZip> zip = mZipFile[idx];
    if (zip == NULL) {
        zip = SharedZip::get(path);
        mZipFile.editItemAt(idx) = zip;
    }
    return zip->getResourceTableAsset();
!!!980364.cpp!!!	setZipResourceTableAsset(in path : String8, inout asset : Asset) : Asset
    int idx = getIndex(path);
    sp<SharedZip> zip = mZipFile[idx];
    // doesn't make sense to call before previously accessing.
    return zip->setResourceTableAsset(asset);
!!!980492.cpp!!!	getZipResourceTable(in path : String8) : ResTable
    int idx = getIndex(path);
    sp<SharedZip> zip = mZipFile[idx];
    if (zip == NULL) {
        zip = SharedZip::get(path);
        mZipFile.editItemAt(idx) = zip;
    }
    return zip->getResourceTable();
!!!980620.cpp!!!	setZipResourceTable(in path : String8, inout res : ResTable) : ResTable
    int idx = getIndex(path);
    sp<SharedZip> zip = mZipFile[idx];
    // doesn't make sense to call before previously accessing.
    return zip->setResourceTable(res);
!!!980748.cpp!!!	getPathName(in zipPath : char) : String8
    return String8(zipPath);
!!!980876.cpp!!!	isUpToDate() : bool
    const size_t N = mZipFile.size();
    for (size_t i=0; i<N; i++) {
        if (mZipFile[i] != NULL && !mZipFile[i]->isUpToDate()) {
            return false;
        }
    }
    return true;
!!!981004.cpp!!!	closeZip(in idx : int) : void
    mZipFile.editItemAt(idx) = NULL;
!!!981132.cpp!!!	getIndex(in zip : String8) : int
    const size_t N = mZipPath.size();
    for (size_t i=0; i<N; i++) {
        if (mZipPath[i] == zip) {
            return i;
        }
    }

    mZipPath.add(zip);
    mZipFile.add(NULL);

    return mZipPath.size()-1;
