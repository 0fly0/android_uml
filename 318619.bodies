class StrictLineReader
!!!2065819.java!!!	StrictLineReader(inout in : InputStream)
        this(in, 8192);
!!!2065947.java!!!	StrictLineReader(inout in : InputStream, in capacity : int)
        this(in, capacity, Charsets.US_ASCII);
!!!2066075.java!!!	StrictLineReader(inout in : InputStream, inout charset : Charset)
        this(in, 8192, charset);
!!!2066203.java!!!	StrictLineReader(inout in : InputStream, in capacity : int, inout charset : Charset)
        if (in == null) {
            throw new NullPointerException("in == null");
        } else if (charset == null) {
            throw new NullPointerException("charset == null");
        }
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity <= 0");
        }
        if (!(charset.equals(Charsets.US_ASCII) || charset.equals(Charsets.UTF_8) ||
                charset.equals(Charsets.ISO_8859_1))) {
            throw new IllegalArgumentException("Unsupported encoding");
        }

        this.in = in;
        this.charset = charset;
        buf = new byte[capacity];
!!!2066331.java!!!	close() : void
        synchronized (in) {
            if (buf != null) {
                buf = null;
                in.close();
            }
        }
!!!2066459.java!!!	readLine() : String
        synchronized (in) {
            if (buf == null) {
                throw new IOException("LineReader is closed");
            }

            // Read more data if we are at the end of the buffered data.
            // Though it's an error to read after an exception, we will let {@code fillBuf()}
            // throw again if that happens; thus we need to handle end == -1 as well as end == pos.
            if (pos >= end) {
                fillBuf();
            }
            // Try to find LF in the buffered data and return the line if successful.
            for (int i = pos; i != end; ++i) {
                if (buf[i] == LF) {
                    int lineEnd = (i != pos && buf[i - 1] == CR) ? i - 1 : i;
                    String res = new String(buf, pos, lineEnd - pos, charset);
                    pos = i + 1;
                    return res;
                }
            }

            // Let's anticipate up to 80 characters on top of those already read.
            ByteArrayOutputStream out = new ByteArrayOutputStream(end - pos + 80) {
                @Override
                public String toString() {
                    int length = (count > 0 && buf[count - 1] == CR) ? count - 1 : count;
                    return new String(buf, 0, length, charset);
                }
            };

            while (true) {
                out.write(buf, pos, end - pos);
                // Mark unterminated line in case fillBuf throws EOFException or IOException.
                end = -1;
                fillBuf();
                // Try to find LF in the buffered data and return the line if successful.
                for (int i = pos; i != end; ++i) {
                    if (buf[i] == LF) {
                        if (i != pos) {
                            out.write(buf, pos, i - pos);
                        }
                        pos = i + 1;
                        return out.toString();
                    }
                }
            }
        }
!!!2066587.java!!!	readInt() : int
        String intString = readLine();
        try {
            return Integer.parseInt(intString);
        } catch (NumberFormatException e) {
            throw new IOException("expected an int but was \"" + intString + "\"");
        }
!!!2066715.java!!!	hasUnterminatedLine() : boolean
        return end == -1;
!!!2066843.java!!!	fillBuf() : void
        int result = in.read(buf, 0, buf.length);
        if (result == -1) {
            throw new EOFException();
        }
        pos = 0;
        end = result;
