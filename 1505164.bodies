class SimpleModelView
!!!9241612.java!!!	SimpleModelView(inout context : Context)
        super(context);
        ensureRenderScript();
        mScaleDetector = new ScaleGestureDetector(context, new ScaleListener());
        // Get an instance of the SensorManager
        mSensorManager = (SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
        // find the rotation-vector sensor
        mRotationVectorSensor = mSensorManager.getDefaultSensor(
                Sensor.TYPE_ROTATION_VECTOR);
        mIdentityMatrix.loadIdentity();
!!!9241740.java!!!	ensureRenderScript() : void
        if (mRS == null) {
            RenderScriptGL.SurfaceConfig sc = new RenderScriptGL.SurfaceConfig();
            sc.setDepth(16, 24);
            mRS = createRenderScriptGL(sc);
            mRender = new SimpleModelRS();
            mRender.init(mRS, getResources());
        }
!!!9241868.java!!!	resume() : void
        mSensorManager.registerListener(this, mRotationVectorSensor, 10000);
!!!9241996.java!!!	pause() : void
        mSensorManager.unregisterListener(this);
!!!9242124.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
        ensureRenderScript();
!!!9242252.java!!!	surfaceChanged(inout holder : SurfaceHolder, in format : int, in w : int, in h : int) : void
        super.surfaceChanged(holder, format, w, h);
        mRender.surfaceChanged();
!!!9242380.java!!!	onDetachedFromWindow() : void
        mRender = null;
        if (mRS != null) {
            mRS = null;
            destroyRenderScriptGL();
        }
!!!9242508.java!!!	loadA3DFile(in path : String) : void
        mRender.loadA3DFile(path);
!!!9242636.java!!!	onTouchEvent(inout ev : MotionEvent) : boolean
        mScaleDetector.onTouchEvent(ev);

        boolean ret = false;
        float x = ev.getX();
        float y = ev.getY();

        final int action = ev.getAction();

        switch (action & MotionEvent.ACTION_MASK) {
        case MotionEvent.ACTION_DOWN: {
            mRender.onActionDown(x, y);
            mActivePointerId = ev.getPointerId(0);
            ret = true;
            break;
        }
        case MotionEvent.ACTION_MOVE: {
            if (!mScaleDetector.isInProgress()) {
                mRender.onActionMove(x, y);
            }
            mRender.onActionDown(x, y);
            ret = true;
            break;
        }

        case MotionEvent.ACTION_UP: {
            mActivePointerId = INVALID_POINTER_ID;
            break;
        }

        case MotionEvent.ACTION_CANCEL: {
            mActivePointerId = INVALID_POINTER_ID;
            break;
        }

        case MotionEvent.ACTION_POINTER_UP: {
            final int pointerIndex = (ev.getAction() & MotionEvent.ACTION_POINTER_INDEX_MASK)
                    >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
            final int pointerId = ev.getPointerId(pointerIndex);
            if (pointerId == mActivePointerId) {
                // This was our active pointer going up. Choose a new
                // active pointer and adjust accordingly.
                final int newPointerIndex = pointerIndex == 0 ? 1 : 0;
                x = ev.getX(newPointerIndex);
                y = ev.getY(newPointerIndex);
                mRender.onActionDown(x, y);
                mActivePointerId = ev.getPointerId(newPointerIndex);
            }
            break;
        }
        }

        return ret;
!!!9242892.java!!!	onSensorChanged(inout event : SensorEvent) : void
        // we received a sensor event. it is a good practice to check
        // that we received the proper event
        if (mUseSensor) {
            if (event.sensor.getType() == Sensor.TYPE_ROTATION_VECTOR) {
                // convert the rotation-vector to a 4x4 matrix. the matrix
                // is interpreted by Open GL as the inverse of the
                // rotation-vector, which is what we want.
                SensorManager.getRotationMatrixFromVector(
                        mRotationMatrix , event.values);

                if (mRender != null) {
                    mRender.onPostureChanged(new Matrix4f(mRotationMatrix));
                }
            }
        }
!!!9243148.java!!!	toggleSensor() : void
        mUseSensor = !mUseSensor;
        if (mUseSensor == false) {
            mRender.onPostureChanged(mIdentityMatrix);
        }
