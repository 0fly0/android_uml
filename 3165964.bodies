class DockView
!!!13427212.java!!!	DockView(inout context : Context)
        this(context, null, 0);
!!!13427340.java!!!	DockView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!13427468.java!!!	DockView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        mPrimaryMoveAnimator = ObjectAnimator.ofFloat(null, "translationX", 0.0f, 0.0f);
        mPrimaryMoveAnimator.setDuration(MOVE_ANIMATION_DURATION_MS);
        mQuickListViews = new ArrayList<QuickListItemView>();
!!!13427596.java!!!	loadQuickListItems(inout data : List<LauncherItemInfo>) : void
        for (int index = 0; index < mQuickListViews.size(); ++index) {
            LauncherItemInfo info = (index < data.size()) ? data.get(index) : null;
            mQuickListViews.get(index).setItem(info);
        }
        updateQuickListViewProperties();
        invalidate();
!!!13427724.java!!!	setListener(inout listener : Listener) : void
        mListener = listener;
!!!13427852.java!!!	getQuickListItemViews() : QuickListItemView
        return mQuickListViews;
!!!13427980.java!!!	setDockLabel(inout view : View, inout label : CharSequence) : void
        view.setTag(R.id.dock_label, label);
!!!13428108.java!!!	getQuickListItems() : LauncherItemInfo
        ArrayList<LauncherItemInfo> list = new ArrayList<LauncherItemInfo>(mQuickListViews.size());
        for (QuickListItemView view : mQuickListViews) {
            list.add(view.getItem());
        }
        return list;
!!!13428236.java!!!	getQuickListItemView(in quickListIndex : int) : QuickListItemView
        return mQuickListViews.get(quickListIndex);
!!!13428364.java!!!	getQuickListItemsInVisibleOrder() : LauncherItemInfo
        ArrayList<LauncherItemInfo> list = new ArrayList<LauncherItemInfo>(mQuickListViews.size());
        for (QuickListItemView view : mQuickListViews) {
            if (view.getItem() != null) {
                int index = view.getQuickListIndex() + view.getMoveDelta();
                while (index >= list.size()) {
                    list.add(null);
                }
                list.set(index, view.getItem());
            }
        }
        return list;
!!!13428492.java!!!	onFinishInflate() : void
        super.onFinishInflate();
        setupQuickListItemViews();
!!!13428620.java!!!	onFocusLost() : void
        super.onFocusLost();
        if (mListener != null) {
            mListener.onDockLabelChanged(null, null);
        }
!!!13428748.java!!!	setEditing(inout editing : boolean) : void
        mEditing = editing;
        updateQuickListViewProperties();
!!!13428876.java!!!	isEditing() : boolean
        return mEditing;
!!!13429004.java!!!	startClearAnimation(in view : QuickListItemView) : void
        ObjectAnimator animator = ObjectAnimator.ofFloat(view, "scaleX", 1.0f, 0f);
        animator.setDuration(CLEAR_ANIMATION_DURATION_MS);
        animator.addListener(new AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animation) {}

            @Override
            public void onAnimationRepeat(Animator animation) {}

            @Override
            public void onAnimationEnd(Animator animation) {
                sendViewToBack(view);
                view.setScaleX(1.0f);
            }

            @Override
            public void onAnimationCancel(Animator animation) {}
        });
        animator.start();
!!!13429132.java!!!	updateQuickListViewProperties() : void
        boolean foundFirstEmpty = false;
        for (int index = 0; index < mQuickListViews.size(); ++index) {
            QuickListItemView view = mQuickListViews.get(index);
            view.setState(mEditing ? State.EDITING : State.NORMAL);
            LauncherItemInfo info = view.getItem();
            int visibility = View.VISIBLE;
            if (info == null) {
                if (!foundFirstEmpty) {
                    visibility = mEditing ? View.VISIBLE : View.INVISIBLE;
                    foundFirstEmpty = true;
                } else {
                    visibility = View.GONE;
                }
            }
            view.setVisibility(visibility);
            view.setTranslationX(0);
            view.setMoveDelta(0);
        }
!!!13429260.java!!!	startMoveOperation(inout view : QuickListItemView) : void
        view.setState(State.MOVING);
        view.requestFocus();
!!!13429388.java!!!	resurrectDockLabel() : void
        View view = getMovingChild();
        if (view != null) {
            view.requestFocus();
        } else {
            view = getFocusedChild();
        }
        if (view != null) {
            setDockLabel(view);
        }
!!!13429516.java!!!	getMovingChild() : QuickListItemView
        for (QuickListItemView view : mQuickListViews) {
            if (view.getState() == State.MOVING) {
                return view;
            }
        }
        return null;
!!!13429644.java!!!	setDockLabel(inout child : View) : void
        CharSequence label = null;
        if (child instanceof QuickListItemView) {
            QuickListItemView itemView = (QuickListItemView) child;
            // Don't set the dock label for a moving view.
            if (itemView.getItem() != null && itemView.getState() != State.MOVING) {
                label = itemView.getItem().getTitle();
            }
        } else {
            Object tag = child.getTag(R.id.dock_label);
            if (tag != null) {
                label = tag.toString();
            }
        }
        if (mListener != null) {
            mListener.onDockLabelChanged(label, child);
        }
!!!13429772.java!!!	setupQuickListItemViews() : void
        mQuickListViews.clear();
        View.OnClickListener clickListener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                QuickListItemView view = (QuickListItemView) v;
                int index = view.getQuickListIndex();
                if (mListener != null) {
                    if (view.getState() == State.NORMAL) {
                        if (view.getItem() == null) {
                            // Empty spot: request a new item.
                            mListener.onNewItemRequested(index, view);
                        } else {
                            // Launch item.
                            mListener.onItemLaunchRequested(index, view.getItem());
                        }
                        setDockLabel(view);
                    } else if (view.getState() == State.EDITING) {
                        if (view.getItem() == null) {
                            // Empty spot: request a new item.
                            mListener.onNewItemRequested(index, view);
                        } else {
                            view.showContextMenu();
                        }
                    } else if (view.getState() == State.MOVING) {
                        view.setState(State.EDITING);
                        mListener.onMoveFinished(view, getQuickListItemsInVisibleOrder());
                    }
                }
            }
        };
        QuickListItemView.Listener itemListener = new QuickListItemView.Listener() {
            @Override
            public void onMoveViewRequested(QuickListItemView view, int delta, boolean forward) {
                int requestedIndex = view.getQuickListIndex() + delta;
                if (requestedIndex >= 0 && requestedIndex <= getMaxMoveIndex()) {
                    moveViewToIndex(view, requestedIndex, false);
                    // Find the view that's at the requested index (based on move delta).
                    for (QuickListItemView candidateView : mQuickListViews) {
                        if (candidateView == view) {
                            continue;
                        }
                        if (candidateView.getQuickListIndex() + candidateView.getMoveDelta() ==
                            requestedIndex) {
                            // Shift this forward or backwards, based on the direction.
                            int secondaryMoveIndex = requestedIndex + (forward ? -1 : 1);
                            moveViewToIndex(candidateView, secondaryMoveIndex, true);
                        }
                    }
                }
            }
        };
        final OnFocusChangeListener focusListener = new OnFocusChangeListener() {

            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    View movingChild = getMovingChild();
                    if (movingChild == null) {
                        setDockLabel(v);
                    }
                }
            }
        };

        for (int index = 0; index < getChildCount(); ++index) {
            View view = getChildAt(index);
            if (view instanceof QuickListItemView) {
                QuickListItemView quickListView = (QuickListItemView) view;
                mQuickListViews.add(quickListView);
                quickListView.setQuickListIndex(mQuickListViews.size() - 1);
                view.setOnClickListener(clickListener);
                quickListView.setListener(itemListener);
            }
            // All views get focus listener.
            view.setOnFocusChangeListener(focusListener);
        }
!!!13429900.java!!!	getMaxMoveIndex() : int
        for (int index = mQuickListViews.size() - 1; index >= 0; --index) {
            if (mQuickListViews.get(index).getItem() != null) {
                return index;
            }
        }
        return 0;
!!!13430028.java!!!	moveViewToIndex(in view : QuickListItemView, in index : int, inout secondary : boolean) : void
        ObjectAnimator animator = secondary ? mPrimaryMoveAnimator.clone() : mPrimaryMoveAnimator;
        if (!secondary) {
            animator.cancel();
        }
        if (!animator.isRunning()) {
            animator.removeAllUpdateListeners();
        }
        animator.setTarget(view);
        animator.addUpdateListener(new AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                postInvalidate(view.getLeft(), view.getBottom(), view.getRight(),
                        getHeight());
            }
        });
        LayoutParams params = (LayoutParams) view.getLayoutParams();
        float finalValue = (index - view.getQuickListIndex()) * (view.getWidth()
                + params.leftMargin + params.rightMargin);
        view.setMoveDelta(index - view.getQuickListIndex());
        animator.setFloatValues(view.getTranslationX(), finalValue);
        animator.start();
!!!13430156.java!!!	sendViewToBack(inout view : QuickListItemView) : void
        removeView(view);
        addView(view);
        mQuickListViews.remove(view);
        mQuickListViews.add(view);
        for (int index = 0; index < mQuickListViews.size(); ++index) {
            mQuickListViews.get(index).setQuickListIndex(index);
        }
        updateQuickListViewProperties();
