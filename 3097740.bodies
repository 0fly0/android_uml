class Builder
!!!12896780.java!!!	Builder(inout context : Context, inout params : KP)
            mContext = context;
            final Resources res = context.getResources();
            mResources = res;
            mDisplayMetrics = res.getDisplayMetrics();

            mParams = params;

            params.GRID_WIDTH = res.getInteger(R.integer.config_keyboard_grid_width);
            params.GRID_HEIGHT = res.getInteger(R.integer.config_keyboard_grid_height);
!!!12896908.java!!!	setAutoGenerate(inout keysCache : KeysCache) : void
            mParams.mKeysCache = keysCache;
!!!12897036.java!!!	load(in xmlId : int, inout id : KeyboardId) : Builder
            mParams.mId = id;
            final XmlResourceParser parser = mResources.getXml(xmlId);
            try {
                parseKeyboard(parser);
            } catch (XmlPullParserException e) {
                Log.w(BUILDER_TAG, "keyboard XML parse error: " + e);
                throw new IllegalArgumentException(e);
            } catch (IOException e) {
                Log.w(BUILDER_TAG, "keyboard XML parse error: " + e);
                throw new RuntimeException(e);
            } finally {
                parser.close();
            }
            return this;
!!!12897164.java!!!	setTouchPositionCorrectionEnabled(inout enabled : boolean) : void
            mParams.mTouchPositionCorrection.setEnabled(enabled);
!!!12897292.java!!!	setProximityCharsCorrectionEnabled(inout enabled : boolean) : void
            mParams.mProximityCharsCorrectionEnabled = enabled;
!!!12897420.java!!!	build() : Keyboard
            return new Keyboard(mParams);
!!!12897548.java!!!	spaces(in count : int) : String
            return (count < SPACES.length()) ? SPACES.substring(0, count) : SPACES;
!!!12897676.java!!!	startTag(in format : String, inout args : Object) : void
            Log.d(BUILDER_TAG, String.format(spaces(++mIndent * 2) + format, args));
!!!12897804.java!!!	endTag(in format : String, inout args : Object) : void
            Log.d(BUILDER_TAG, String.format(spaces(mIndent-- * 2) + format, args));
!!!12897932.java!!!	startEndTag(in format : String, inout args : Object) : void
            Log.d(BUILDER_TAG, String.format(spaces(++mIndent * 2) + format, args));
            mIndent--;
!!!12898060.java!!!	parseKeyboard(inout parser : XmlPullParser) : void
            if (DEBUG) startTag("<%s> %s", TAG_KEYBOARD, mParams.mId);
            int event;
            while ((event = parser.next()) != XmlPullParser.END_DOCUMENT) {
                if (event == XmlPullParser.START_TAG) {
                    final String tag = parser.getName();
                    if (TAG_KEYBOARD.equals(tag)) {
                        parseKeyboardAttributes(parser);
                        startKeyboard();
                        parseKeyboardContent(parser, false);
                        break;
                    } else {
                        throw new XmlParseUtils.IllegalStartTag(parser, TAG_KEYBOARD);
                    }
                }
            }
!!!12898188.java!!!	parseKeyboardAttributes(inout parser : XmlPullParser) : void
            final int displayWidth = mDisplayMetrics.widthPixels;
            final TypedArray keyboardAttr = mContext.obtainStyledAttributes(
                    Xml.asAttributeSet(parser), R.styleable.Keyboard, R.attr.keyboardStyle,
                    R.style.Keyboard);
            final TypedArray keyAttr = mResources.obtainAttributes(Xml.asAttributeSet(parser),
                    R.styleable.Keyboard_Key);
            try {
                final int displayHeight = mDisplayMetrics.heightPixels;
                final String keyboardHeightString = Utils.getDeviceOverrideValue(
                        mResources, R.array.keyboard_heights, null);
                final float keyboardHeight;
                if (keyboardHeightString != null) {
                    keyboardHeight = Float.parseFloat(keyboardHeightString)
                            * mDisplayMetrics.density;
                } else {
                    keyboardHeight = keyboardAttr.getDimension(
                            R.styleable.Keyboard_keyboardHeight, displayHeight / 2);
                }
                final float maxKeyboardHeight = getDimensionOrFraction(keyboardAttr,
                        R.styleable.Keyboard_maxKeyboardHeight, displayHeight, displayHeight / 2);
                float minKeyboardHeight = getDimensionOrFraction(keyboardAttr,
                        R.styleable.Keyboard_minKeyboardHeight, displayHeight, displayHeight / 2);
                if (minKeyboardHeight < 0) {
                    // Specified fraction was negative, so it should be calculated against display
                    // width.
                    minKeyboardHeight = -getDimensionOrFraction(keyboardAttr,
                            R.styleable.Keyboard_minKeyboardHeight, displayWidth, displayWidth / 2);
                }
                final Params params = mParams;
                // Keyboard height will not exceed maxKeyboardHeight and will not be less than
                // minKeyboardHeight.
                params.mOccupiedHeight = (int)Math.max(
                        Math.min(keyboardHeight, maxKeyboardHeight), minKeyboardHeight);
                params.mOccupiedWidth = params.mId.mWidth;
                params.mTopPadding = (int)getDimensionOrFraction(keyboardAttr,
                        R.styleable.Keyboard_keyboardTopPadding, params.mOccupiedHeight, 0);
                params.mBottomPadding = (int)getDimensionOrFraction(keyboardAttr,
                        R.styleable.Keyboard_keyboardBottomPadding, params.mOccupiedHeight, 0);
                params.mHorizontalEdgesPadding = (int)getDimensionOrFraction(keyboardAttr,
                        R.styleable.Keyboard_keyboardHorizontalEdgesPadding,
                        mParams.mOccupiedWidth, 0);

                params.mBaseWidth = params.mOccupiedWidth - params.mHorizontalEdgesPadding * 2
                        - params.mHorizontalCenterPadding;
                params.mDefaultKeyWidth = (int)getDimensionOrFraction(keyAttr,
                        R.styleable.Keyboard_Key_keyWidth, params.mBaseWidth,
                        params.mBaseWidth / DEFAULT_KEYBOARD_COLUMNS);
                params.mHorizontalGap = (int)getDimensionOrFraction(keyboardAttr,
                        R.styleable.Keyboard_horizontalGap, params.mBaseWidth, 0);
                params.mVerticalGap = (int)getDimensionOrFraction(keyboardAttr,
                        R.styleable.Keyboard_verticalGap, params.mOccupiedHeight, 0);
                params.mBaseHeight = params.mOccupiedHeight - params.mTopPadding
                        - params.mBottomPadding + params.mVerticalGap;
                params.mDefaultRowHeight = (int)getDimensionOrFraction(keyboardAttr,
                        R.styleable.Keyboard_rowHeight, params.mBaseHeight,
                        params.mBaseHeight / DEFAULT_KEYBOARD_ROWS);

                params.mMoreKeysTemplate = keyboardAttr.getResourceId(
                        R.styleable.Keyboard_moreKeysTemplate, 0);
                params.mMaxMoreKeysKeyboardColumn = keyAttr.getInt(
                        R.styleable.Keyboard_Key_maxMoreKeysColumn, 5);

                params.mThemeId = keyboardAttr.getInt(R.styleable.Keyboard_themeId, 0);
                params.mIconsSet.loadIcons(keyboardAttr);
                final String language = params.mId.mLocale.getLanguage();
                params.mCodesSet.setLanguage(language);
                params.mTextsSet.setLanguage(language);
                final RunInLocale<Void> job = new RunInLocale<Void>() {
                    @Override
                    protected Void job(Resources res) {
                        params.mTextsSet.loadStringResources(mContext);
                        return null;
                    }
                };
                // Null means the current system locale.
                final Locale locale = SubtypeLocale.isNoLanguage(params.mId.mSubtype)
                        ? null : params.mId.mLocale;
                job.runInLocale(mResources, locale);

                final int resourceId = keyboardAttr.getResourceId(
                        R.styleable.Keyboard_touchPositionCorrectionData, 0);
                params.mTouchPositionCorrection.setEnabled(resourceId != 0);
                if (resourceId != 0) {
                    final String[] data = mResources.getStringArray(resourceId);
                    params.mTouchPositionCorrection.load(data);
                }
            } finally {
                keyAttr.recycle();
                keyboardAttr.recycle();
            }
!!!12898316.java!!!	parseKeyboardContent(inout parser : XmlPullParser, inout skip : boolean) : void
            int event;
            while ((event = parser.next()) != XmlPullParser.END_DOCUMENT) {
                if (event == XmlPullParser.START_TAG) {
                    final String tag = parser.getName();
                    if (TAG_ROW.equals(tag)) {
                        Row row = parseRowAttributes(parser);
                        if (DEBUG) startTag("<%s>%s", TAG_ROW, skip ? " skipped" : "");
                        if (!skip) {
                            startRow(row);
                        }
                        parseRowContent(parser, row, skip);
                    } else if (TAG_INCLUDE.equals(tag)) {
                        parseIncludeKeyboardContent(parser, skip);
                    } else if (TAG_SWITCH.equals(tag)) {
                        parseSwitchKeyboardContent(parser, skip);
                    } else if (TAG_KEY_STYLE.equals(tag)) {
                        parseKeyStyle(parser, skip);
                    } else {
                        throw new XmlParseUtils.IllegalStartTag(parser, TAG_ROW);
                    }
                } else if (event == XmlPullParser.END_TAG) {
                    final String tag = parser.getName();
                    if (DEBUG) endTag("</%s>", tag);
                    if (TAG_KEYBOARD.equals(tag)) {
                        endKeyboard();
                        break;
                    } else if (TAG_CASE.equals(tag) || TAG_DEFAULT.equals(tag)
                            || TAG_MERGE.equals(tag)) {
                        break;
                    } else {
                        throw new XmlParseUtils.IllegalEndTag(parser, TAG_ROW);
                    }
                }
            }
!!!12898444.java!!!	parseRowAttributes(inout parser : XmlPullParser) : Row
            final TypedArray a = mResources.obtainAttributes(Xml.asAttributeSet(parser),
                    R.styleable.Keyboard);
            try {
                if (a.hasValue(R.styleable.Keyboard_horizontalGap))
                    throw new XmlParseUtils.IllegalAttribute(parser, "horizontalGap");
                if (a.hasValue(R.styleable.Keyboard_verticalGap))
                    throw new XmlParseUtils.IllegalAttribute(parser, "verticalGap");
                return new Row(mResources, mParams, parser, mCurrentY);
            } finally {
                a.recycle();
            }
!!!12898572.java!!!	parseRowContent(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : void
            int event;
            while ((event = parser.next()) != XmlPullParser.END_DOCUMENT) {
                if (event == XmlPullParser.START_TAG) {
                    final String tag = parser.getName();
                    if (TAG_KEY.equals(tag)) {
                        parseKey(parser, row, skip);
                    } else if (TAG_SPACER.equals(tag)) {
                        parseSpacer(parser, row, skip);
                    } else if (TAG_INCLUDE.equals(tag)) {
                        parseIncludeRowContent(parser, row, skip);
                    } else if (TAG_SWITCH.equals(tag)) {
                        parseSwitchRowContent(parser, row, skip);
                    } else if (TAG_KEY_STYLE.equals(tag)) {
                        parseKeyStyle(parser, skip);
                    } else {
                        throw new XmlParseUtils.IllegalStartTag(parser, TAG_KEY);
                    }
                } else if (event == XmlPullParser.END_TAG) {
                    final String tag = parser.getName();
                    if (DEBUG) endTag("</%s>", tag);
                    if (TAG_ROW.equals(tag)) {
                        if (!skip) {
                            endRow(row);
                        }
                        break;
                    } else if (TAG_CASE.equals(tag) || TAG_DEFAULT.equals(tag)
                            || TAG_MERGE.equals(tag)) {
                        break;
                    } else {
                        throw new XmlParseUtils.IllegalEndTag(parser, TAG_KEY);
                    }
                }
            }
!!!12898700.java!!!	parseKey(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : void
            if (skip) {
                XmlParseUtils.checkEndTag(TAG_KEY, parser);
                if (DEBUG) startEndTag("<%s /> skipped", TAG_KEY);
            } else {
                final Key key = new Key(mResources, mParams, row, parser);
                if (DEBUG) {
                    startEndTag("<%s%s %s moreKeys=%s />", TAG_KEY,
                            (key.isEnabled() ? "" : " disabled"), key,
                            Arrays.toString(key.mMoreKeys));
                }
                XmlParseUtils.checkEndTag(TAG_KEY, parser);
                endKey(key);
            }
!!!12898828.java!!!	parseSpacer(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : void
            if (skip) {
                XmlParseUtils.checkEndTag(TAG_SPACER, parser);
                if (DEBUG) startEndTag("<%s /> skipped", TAG_SPACER);
            } else {
                final Key.Spacer spacer = new Key.Spacer(mResources, mParams, row, parser);
                if (DEBUG) startEndTag("<%s />", TAG_SPACER);
                XmlParseUtils.checkEndTag(TAG_SPACER, parser);
                endKey(spacer);
            }
!!!12898956.java!!!	parseIncludeKeyboardContent(inout parser : XmlPullParser, inout skip : boolean) : void
            parseIncludeInternal(parser, null, skip);
!!!12899084.java!!!	parseIncludeRowContent(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : void
            parseIncludeInternal(parser, row, skip);
!!!12899212.java!!!	parseIncludeInternal(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : void
            if (skip) {
                XmlParseUtils.checkEndTag(TAG_INCLUDE, parser);
                if (DEBUG) startEndTag("</%s> skipped", TAG_INCLUDE);
            } else {
                final AttributeSet attr = Xml.asAttributeSet(parser);
                final TypedArray keyboardAttr = mResources.obtainAttributes(attr,
                        R.styleable.Keyboard_Include);
                final TypedArray keyAttr = mResources.obtainAttributes(attr,
                        R.styleable.Keyboard_Key);
                int keyboardLayout = 0;
                float savedDefaultKeyWidth = 0;
                int savedDefaultKeyLabelFlags = 0;
                int savedDefaultBackgroundType = Key.BACKGROUND_TYPE_NORMAL;
                try {
                    XmlParseUtils.checkAttributeExists(keyboardAttr,
                            R.styleable.Keyboard_Include_keyboardLayout, "keyboardLayout",
                            TAG_INCLUDE, parser);
                    keyboardLayout = keyboardAttr.getResourceId(
                            R.styleable.Keyboard_Include_keyboardLayout, 0);
                    if (row != null) {
                        if (keyAttr.hasValue(R.styleable.Keyboard_Key_keyXPos)) {
                            // Override current x coordinate.
                            row.setXPos(row.getKeyX(keyAttr));
                        }
                        // TODO: Remove this if-clause and do the same as backgroundType below.
                        savedDefaultKeyWidth = row.getDefaultKeyWidth();
                        if (keyAttr.hasValue(R.styleable.Keyboard_Key_keyWidth)) {
                            // Override default key width.
                            row.setDefaultKeyWidth(row.getKeyWidth(keyAttr));
                        }
                        savedDefaultKeyLabelFlags = row.getDefaultKeyLabelFlags();
                        // Bitwise-or default keyLabelFlag if exists.
                        row.setDefaultKeyLabelFlags(keyAttr.getInt(
                                R.styleable.Keyboard_Key_keyLabelFlags, 0)
                                | savedDefaultKeyLabelFlags);
                        savedDefaultBackgroundType = row.getDefaultBackgroundType();
                        // Override default backgroundType if exists.
                        row.setDefaultBackgroundType(keyAttr.getInt(
                                R.styleable.Keyboard_Key_backgroundType,
                                savedDefaultBackgroundType));
                    }
                } finally {
                    keyboardAttr.recycle();
                    keyAttr.recycle();
                }

                XmlParseUtils.checkEndTag(TAG_INCLUDE, parser);
                if (DEBUG) {
                    startEndTag("<%s keyboardLayout=%s />",TAG_INCLUDE,
                            mResources.getResourceEntryName(keyboardLayout));
                }
                final XmlResourceParser parserForInclude = mResources.getXml(keyboardLayout);
                try {
                    parseMerge(parserForInclude, row, skip);
                } finally {
                    if (row != null) {
                        // Restore default keyWidth, keyLabelFlags, and backgroundType.
                        row.setDefaultKeyWidth(savedDefaultKeyWidth);
                        row.setDefaultKeyLabelFlags(savedDefaultKeyLabelFlags);
                        row.setDefaultBackgroundType(savedDefaultBackgroundType);
                    }
                    parserForInclude.close();
                }
            }
!!!12899340.java!!!	parseMerge(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : void
            if (DEBUG) startTag("<%s>", TAG_MERGE);
            int event;
            while ((event = parser.next()) != XmlPullParser.END_DOCUMENT) {
                if (event == XmlPullParser.START_TAG) {
                    final String tag = parser.getName();
                    if (TAG_MERGE.equals(tag)) {
                        if (row == null) {
                            parseKeyboardContent(parser, skip);
                        } else {
                            parseRowContent(parser, row, skip);
                        }
                        break;
                    } else {
                        throw new XmlParseUtils.ParseException(
                                "Included keyboard layout must have <merge> root element", parser);
                    }
                }
            }
!!!12899468.java!!!	parseSwitchKeyboardContent(inout parser : XmlPullParser, inout skip : boolean) : void
            parseSwitchInternal(parser, null, skip);
!!!12899596.java!!!	parseSwitchRowContent(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : void
            parseSwitchInternal(parser, row, skip);
!!!12899724.java!!!	parseSwitchInternal(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : void
            if (DEBUG) startTag("<%s> %s", TAG_SWITCH, mParams.mId);
            boolean selected = false;
            int event;
            while ((event = parser.next()) != XmlPullParser.END_DOCUMENT) {
                if (event == XmlPullParser.START_TAG) {
                    final String tag = parser.getName();
                    if (TAG_CASE.equals(tag)) {
                        selected |= parseCase(parser, row, selected ? true : skip);
                    } else if (TAG_DEFAULT.equals(tag)) {
                        selected |= parseDefault(parser, row, selected ? true : skip);
                    } else {
                        throw new XmlParseUtils.IllegalStartTag(parser, TAG_KEY);
                    }
                } else if (event == XmlPullParser.END_TAG) {
                    final String tag = parser.getName();
                    if (TAG_SWITCH.equals(tag)) {
                        if (DEBUG) endTag("</%s>", TAG_SWITCH);
                        break;
                    } else {
                        throw new XmlParseUtils.IllegalEndTag(parser, TAG_KEY);
                    }
                }
            }
!!!12899852.java!!!	parseCase(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : boolean
            final boolean selected = parseCaseCondition(parser);
            if (row == null) {
                // Processing Rows.
                parseKeyboardContent(parser, selected ? skip : true);
            } else {
                // Processing Keys.
                parseRowContent(parser, row, selected ? skip : true);
            }
            return selected;
!!!12899980.java!!!	parseCaseCondition(inout parser : XmlPullParser) : boolean
            final KeyboardId id = mParams.mId;
            if (id == null)
                return true;

            final TypedArray a = mResources.obtainAttributes(Xml.asAttributeSet(parser),
                    R.styleable.Keyboard_Case);
            try {
                final boolean keyboardLayoutSetElementMatched = matchTypedValue(a,
                        R.styleable.Keyboard_Case_keyboardLayoutSetElement, id.mElementId,
                        KeyboardId.elementIdToName(id.mElementId));
                final boolean modeMatched = matchTypedValue(a,
                        R.styleable.Keyboard_Case_mode, id.mMode, KeyboardId.modeName(id.mMode));
                final boolean navigateNextMatched = matchBoolean(a,
                        R.styleable.Keyboard_Case_navigateNext, id.navigateNext());
                final boolean navigatePreviousMatched = matchBoolean(a,
                        R.styleable.Keyboard_Case_navigatePrevious, id.navigatePrevious());
                final boolean passwordInputMatched = matchBoolean(a,
                        R.styleable.Keyboard_Case_passwordInput, id.passwordInput());
                final boolean clobberSettingsKeyMatched = matchBoolean(a,
                        R.styleable.Keyboard_Case_clobberSettingsKey, id.mClobberSettingsKey);
                final boolean shortcutKeyEnabledMatched = matchBoolean(a,
                        R.styleable.Keyboard_Case_shortcutKeyEnabled, id.mShortcutKeyEnabled);
                final boolean hasShortcutKeyMatched = matchBoolean(a,
                        R.styleable.Keyboard_Case_hasShortcutKey, id.mHasShortcutKey);
                final boolean languageSwitchKeyEnabledMatched = matchBoolean(a,
                        R.styleable.Keyboard_Case_languageSwitchKeyEnabled,
                        id.mLanguageSwitchKeyEnabled);
                final boolean isMultiLineMatched = matchBoolean(a,
                        R.styleable.Keyboard_Case_isMultiLine, id.isMultiLine());
                final boolean imeActionMatched = matchInteger(a,
                        R.styleable.Keyboard_Case_imeAction, id.imeAction());
                final boolean localeCodeMatched = matchString(a,
                        R.styleable.Keyboard_Case_localeCode, id.mLocale.toString());
                final boolean languageCodeMatched = matchString(a,
                        R.styleable.Keyboard_Case_languageCode, id.mLocale.getLanguage());
                final boolean countryCodeMatched = matchString(a,
                        R.styleable.Keyboard_Case_countryCode, id.mLocale.getCountry());
                final boolean selected = keyboardLayoutSetElementMatched && modeMatched
                        && navigateNextMatched && navigatePreviousMatched && passwordInputMatched
                        && clobberSettingsKeyMatched && shortcutKeyEnabledMatched
                        && hasShortcutKeyMatched && languageSwitchKeyEnabledMatched
                        && isMultiLineMatched && imeActionMatched && localeCodeMatched
                        && languageCodeMatched && countryCodeMatched;

                if (DEBUG) {
                    startTag("<%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s>%s", TAG_CASE,
                            textAttr(a.getString(
                                    R.styleable.Keyboard_Case_keyboardLayoutSetElement),
                                    "keyboardLayoutSetElement"),
                            textAttr(a.getString(R.styleable.Keyboard_Case_mode), "mode"),
                            textAttr(a.getString(R.styleable.Keyboard_Case_imeAction),
                                    "imeAction"),
                            booleanAttr(a, R.styleable.Keyboard_Case_navigateNext,
                                    "navigateNext"),
                            booleanAttr(a, R.styleable.Keyboard_Case_navigatePrevious,
                                    "navigatePrevious"),
                            booleanAttr(a, R.styleable.Keyboard_Case_clobberSettingsKey,
                                    "clobberSettingsKey"),
                            booleanAttr(a, R.styleable.Keyboard_Case_passwordInput,
                                    "passwordInput"),
                            booleanAttr(a, R.styleable.Keyboard_Case_shortcutKeyEnabled,
                                    "shortcutKeyEnabled"),
                            booleanAttr(a, R.styleable.Keyboard_Case_hasShortcutKey,
                                    "hasShortcutKey"),
                            booleanAttr(a, R.styleable.Keyboard_Case_languageSwitchKeyEnabled,
                                    "languageSwitchKeyEnabled"),
                            booleanAttr(a, R.styleable.Keyboard_Case_isMultiLine,
                                    "isMultiLine"),
                            textAttr(a.getString(R.styleable.Keyboard_Case_localeCode),
                                    "localeCode"),
                            textAttr(a.getString(R.styleable.Keyboard_Case_languageCode),
                                    "languageCode"),
                            textAttr(a.getString(R.styleable.Keyboard_Case_countryCode),
                                    "countryCode"),
                            selected ? "" : " skipped");
                }

                return selected;
            } finally {
                a.recycle();
            }
!!!12900108.java!!!	matchInteger(inout a : TypedArray, in index : int, in value : int) : boolean
            // If <case> does not have "index" attribute, that means this <case> is wild-card for
            // the attribute.
            return !a.hasValue(index) || a.getInt(index, 0) == value;
!!!12900236.java!!!	matchBoolean(inout a : TypedArray, in index : int, inout value : boolean) : boolean
            // If <case> does not have "index" attribute, that means this <case> is wild-card for
            // the attribute.
            return !a.hasValue(index) || a.getBoolean(index, false) == value;
!!!12900364.java!!!	matchString(inout a : TypedArray, in index : int, in value : String) : boolean
            // If <case> does not have "index" attribute, that means this <case> is wild-card for
            // the attribute.
            return !a.hasValue(index)
                    || stringArrayContains(a.getString(index).split("\\|"), value);
!!!12900492.java!!!	matchTypedValue(inout a : TypedArray, in index : int, in intValue : int, in strValue : String) : boolean
            // If <case> does not have "index" attribute, that means this <case> is wild-card for
            // the attribute.
            final TypedValue v = a.peekValue(index);
            if (v == null)
                return true;

            if (isIntegerValue(v)) {
                return intValue == a.getInt(index, 0);
            } else if (isStringValue(v)) {
                return stringArrayContains(a.getString(index).split("\\|"), strValue);
            }
            return false;
!!!12900620.java!!!	stringArrayContains(inout array : String, in value : String) : boolean
            for (final String elem : array) {
                if (elem.equals(value))
                    return true;
            }
            return false;
!!!12900748.java!!!	parseDefault(inout parser : XmlPullParser, inout row : Row, inout skip : boolean) : boolean
            if (DEBUG) startTag("<%s>", TAG_DEFAULT);
            if (row == null) {
                parseKeyboardContent(parser, skip);
            } else {
                parseRowContent(parser, row, skip);
            }
            return true;
!!!12900876.java!!!	parseKeyStyle(inout parser : XmlPullParser, inout skip : boolean) : void
            TypedArray keyStyleAttr = mResources.obtainAttributes(Xml.asAttributeSet(parser),
                    R.styleable.Keyboard_KeyStyle);
            TypedArray keyAttrs = mResources.obtainAttributes(Xml.asAttributeSet(parser),
                    R.styleable.Keyboard_Key);
            try {
                if (!keyStyleAttr.hasValue(R.styleable.Keyboard_KeyStyle_styleName))
                    throw new XmlParseUtils.ParseException("<" + TAG_KEY_STYLE
                            + "/> needs styleName attribute", parser);
                if (DEBUG) {
                    startEndTag("<%s styleName=%s />%s", TAG_KEY_STYLE,
                        keyStyleAttr.getString(R.styleable.Keyboard_KeyStyle_styleName),
                        skip ? " skipped" : "");
                }
                if (!skip)
                    mParams.mKeyStyles.parseKeyStyleAttributes(keyStyleAttr, keyAttrs, parser);
            } finally {
                keyStyleAttr.recycle();
                keyAttrs.recycle();
            }
            XmlParseUtils.checkEndTag(TAG_KEY_STYLE, parser);
!!!12901004.java!!!	startKeyboard() : void
            mCurrentY += mParams.mTopPadding;
            mTopEdge = true;
!!!12901132.java!!!	startRow(inout row : Row) : void
            addEdgeSpace(mParams.mHorizontalEdgesPadding, row);
            mCurrentRow = row;
            mLeftEdge = true;
            mRightEdgeKey = null;
!!!12901260.java!!!	endRow(inout row : Row) : void
            if (mCurrentRow == null)
                throw new InflateException("orphan end row tag");
            if (mRightEdgeKey != null) {
                mRightEdgeKey.markAsRightEdge(mParams);
                mRightEdgeKey = null;
            }
            addEdgeSpace(mParams.mHorizontalEdgesPadding, row);
            mCurrentY += row.mRowHeight;
            mCurrentRow = null;
            mTopEdge = false;
!!!12901388.java!!!	endKey(inout key : Key) : void
            mParams.onAddKey(key);
            if (mLeftEdge) {
                key.markAsLeftEdge(mParams);
                mLeftEdge = false;
            }
            if (mTopEdge) {
                key.markAsTopEdge(mParams);
            }
            mRightEdgeKey = key;
!!!12901516.java!!!	endKeyboard() : void
            // nothing to do here.
!!!12901644.java!!!	addEdgeSpace(in width : float, inout row : Row) : void
            row.advanceXPos(width);
            mLeftEdge = false;
            mRightEdgeKey = null;
!!!12901772.java!!!	getDimensionOrFraction(inout a : TypedArray, in index : int, in base : int, in defValue : float) : float
            final TypedValue value = a.peekValue(index);
            if (value == null)
                return defValue;
            if (isFractionValue(value)) {
                return a.getFraction(index, base, base, defValue);
            } else if (isDimensionValue(value)) {
                return a.getDimension(index, defValue);
            }
            return defValue;
!!!12901900.java!!!	getEnumValue(inout a : TypedArray, in index : int, in defValue : int) : int
            final TypedValue value = a.peekValue(index);
            if (value == null)
                return defValue;
            if (isIntegerValue(value)) {
                return a.getInt(index, defValue);
            }
            return defValue;
!!!12902028.java!!!	isFractionValue(inout v : TypedValue) : boolean
            return v.type == TypedValue.TYPE_FRACTION;
!!!12902156.java!!!	isDimensionValue(inout v : TypedValue) : boolean
            return v.type == TypedValue.TYPE_DIMENSION;
!!!12902284.java!!!	isIntegerValue(inout v : TypedValue) : boolean
            return v.type >= TypedValue.TYPE_FIRST_INT && v.type <= TypedValue.TYPE_LAST_INT;
!!!12902412.java!!!	isStringValue(inout v : TypedValue) : boolean
            return v.type == TypedValue.TYPE_STRING;
!!!12902540.java!!!	textAttr(in value : String, in name : String) : String
            return value != null ? String.format(" %s=%s", name, value) : "";
!!!12902668.java!!!	booleanAttr(inout a : TypedArray, in index : int, in name : String) : String
            return a.hasValue(index)
                    ? String.format(" %s=%s", name, a.getBoolean(index, false)) : "";
