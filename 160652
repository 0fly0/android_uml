format 74
"android" // framework::native::include::cpustats::android
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/framework/native/include/cpustats/"
  cpp_src_dir "/home/shchen/work/jellybean/framework/native/include/cpustats/"
  cpp_namespace "android"
  classview 150156 "cpustats"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 508556 "ThreadCpuUsage"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Track CPU usage for the current thread.
 Units are in per-thread CPU ns, as reported by
 clock_gettime(CLOCK_THREAD_CPUTIME_ID).  Simple usage: for cyclic
 threads where you want to measure the execution time of the whole
 cycle, just call sampleAndEnable() at the start of each cycle.
 For acyclic threads, or for cyclic threads where you want to measure/track
 only part of each cycle, call enable(), disable(), and/or setEnabled()
 to demarcate the region(s) of interest, and then call sample() periodically.
 This class is not thread-safe for concurrent calls from multiple threads;
 the methods of this class may only be called by the current thread
 which constructed the object."
      operation 1482380 "ThreadCpuUsage"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
        mIsEnabled(false),
        mWasEverEnabled(false),
        mAccumulator(0),
        // mPreviousTs
        // mMonotonicTs
        mMonotonicKnown(false)
        {
            (void) pthread_once(&sOnceControl, &init);
            for (int i = 0; i < sKernelMax; ++i) {
                mCurrentkHz[i] = (uint32_t) ~0;   // unknown
            }
        };
"
	
	
	
	
      end

      operation 1482508 "~ThreadCpuUsage"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 1482636 "isEnabled"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIsEnabled; };
"
	
	
	
	
	comment " Return whether currently tracking CPU usage by current thread"
      end

      operation 1482764 "enable"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return setEnabled(true); };
"
	
	
	
	
	comment " Enable tracking of CPU usage by current thread;
 any CPU used from this point forward will be tracked.
 Returns the previous enabled status."
      end

      operation 1482892 "disable"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return setEnabled(false); };
"
	
	
	
	
	comment " Disable tracking of CPU usage by current thread;
 any CPU used from this point forward will be ignored.
 Returns the previous enabled status."
      end

      operation 1483020 "setEnabled"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "isEnabled" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the enabled status and return the previous enabled status.
 This method is intended to be used for safe nested enable/disabling."
      end

      operation 1483148 "sampleAndEnable"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param inout name "ns" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add a sample point, and also enable tracking if needed.
 If tracking has never been enabled, then this call enables tracking but
 does _not_ add a sample -- it is not possible to add a sample the
 first time because there is no previous point to subtract from.
 Otherwise, if tracking is enabled,
 then adds a sample for tracked CPU ns since the previous
 sample, or since the first call to sampleAndEnable(), enable(), or
 setEnabled(true).  If there was a previous sample but tracking is
 now disabled, then adds a sample for the tracked CPU ns accumulated
 up until the most recent disable(), resets this accumulator, and then
 enables tracking.  Calling this method rather than enable() followed
 by sample() avoids a race condition for the first sample.
 Returns true if the sample 'ns' is valid, or false if invalid.
 Note that 'ns' is an output parameter passed by reference.
 The caller does not need to initialize this variable.
 The units are CPU nanoseconds consumed by current thread."
      end

      operation 1483276 "sample"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param inout name "ns" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add a sample point, but do not
 change the tracking enabled status.  If tracking has either never been
 enabled, or has never been enabled since the last sample, then log a warning
 and don't add sample.  Otherwise, adds a sample for tracked CPU ns since
 the previous sample or since the first call to sampleAndEnable(),
 enable(), or setEnabled(true) if no previous sample.
 Returns true if the sample is valid, or false if invalid.
 Note that 'ns' is an output parameter passed by reference.
 The caller does not need to initialize this variable.
 The units are CPU nanoseconds consumed by current thread."
      end

      operation 1483404 "elapsed"
	preserve_cpp_body_indent const public explicit_return_type "long long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return the elapsed delta wall clock ns since initial enable or reset,
 as reported by clock_gettime(CLOCK_MONOTONIC)."
      end

      operation 1483532 "resetElapsed"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Reset elapsed wall clock.  Has no effect on tracking or accumulator."
      end

      operation 1483660 "getCpukHz"
	preserve_cpp_body_indent public explicit_return_type "uint32_t"
	nparams 1
	  param in name "cpuNum" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return current clock frequency for specified CPU, in kHz.
 You can get your CPU number using sched_getcpu(2).  Note that, unless CPU affinity
 has been configured appropriately, the CPU number can change.
 Also note that, unless the CPU governor has been configured appropriately,
 the CPU frequency can change.  And even if the CPU frequency is locked down
 to a particular value, that the frequency might still be adjusted
 to prevent thermal overload.  Therefore you should poll for your thread's
 current CPU number and clock frequency periodically."
      end

      attribute 1294092 "mIsEnabled"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " whether tracking is currently enabled"
      end

      attribute 1294220 "mWasEverEnabled"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " whether tracking was ever enabled"
      end

      attribute 1294348 "mAccumulator"
	private explicit_type "long long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " accumulated thread CPU time since last sample, in ns"
      end

      attribute 1294476 "mPreviousTs"
	private explicit_type "timespec"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " most recent thread CPU time, valid only if mIsEnabled is true"
      end

      attribute 1294604 "mMonotonicTs"
	private explicit_type "timespec"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " most recent monotonic time"
      end

      attribute 1294732 "mMonotonicKnown"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " whether mMonotonicTs has been set"
      end

      attribute 1294860 "MAX_CPU"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1294988 "sScalingFds"
	class_attribute private explicit_type "int"
	multiplicity "[MAX_CPU]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " file descriptor per CPU for reading scaling_cur_freq"
      end

      attribute 1295116 "mCurrentkHz"
	private explicit_type "uint32_t"
	multiplicity "[MAX_CPU]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " current CPU frequency in kHz, not static to avoid a race"
      end

      attribute 1295244 "sOnceControl"
	class_attribute private explicit_type "pthread_once_t"
	init_value "= PTHREAD_ONCE_INIT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1295372 "sKernelMax"
	class_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " like MAX_CPU, but determined at runtime == cpu/kernel_max + 1"
      end

      operation 1483788 "init"
	class_operation preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//static

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1295500 "sMutex"
	class_attribute private explicit_type "pthread_mutex_t"
	init_value "= PTHREAD_MUTEX_INITIALIZER"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " protects sScalingFds[] after initialization"
      end
    end
  end

  deploymentview 148492 "android"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 221836 "ThreadCpuUsage"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 508556 // ThreadCpuUsage
      end
    end
  end
end
