format 74
"prefs" // _unknown::java::util::prefs
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/util/prefs/"
  java_package "java.util.prefs"
  classview 133531 "prefs"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 282011 "AbstractPreferences"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This abstract class is a partial implementation of the abstract class
Preferences, which can be used to simplify {@code Preferences} provider's
implementation. This class defines nine abstract SPI methods, which must be
implemented by a preference provider.

@since 1.4
@see Preferences"
      classrelation 499227 // <generalisation>
	relation 499227 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 499227 // <generalisation>
	  b parent class_ref 282139 // Preferences
      end

      classrelation 499355 // events (<unidirectional association>)
	relation 499355 --->
	  a role_name "events" init_value " new LinkedList<EventObject>()" class_relation const_relation private
	    comment "
-----------------------------------------------------------
Class fields
-----------------------------------------------------------

 the unhandled events collection 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<EventObject> ${name}${value};
"
	    classrelation_ref 499355 // events (<unidirectional association>)
	  b parent class_ref 131483 // List
      end

      class 282907 "EventDispatcher"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 500507 // <generalisation>
	  relation 500507 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 500507 // <generalisation>
	    b parent class_ref 1201420 // Thread
	end

	operation 1740955 "EventDispatcher"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "name" type class_ref 3399692 // String
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1741083 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1741211 "getEventObject"
	  private return_type class_ref 130587 // EventObject
	  nparams 0
	  nexceptions 1
	    exception class_ref 155547 // InterruptedException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1741339 "dispatchPrefChange"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "event" type class_ref 283035 // PreferenceChangeEvent
	    param inout name "preferenceChangeListeners" type class_ref 131483 // List
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<EventListener> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1741467 "dispatchNodeRemove"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "event" type class_ref 283163 // NodeChangeEvent
	    param inout name "nodeChangeListeners" type class_ref 131483 // List
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<EventListener> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1741595 "dispatchNodeAdd"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "event" type class_ref 283163 // NodeChangeEvent
	    param inout name "nodeChangeListeners" type class_ref 131483 // List
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<EventListener> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 499483 // dispatcher (<unidirectional association>)
	relation 499483 --->
	  a role_name "dispatcher" init_value " new EventDispatcher(\"Preference Event Dispatcher\")" class_relation const_relation private
	    comment " the event dispatcher thread 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 499483 // dispatcher (<unidirectional association>)
	  b parent class_ref 282907 // EventDispatcher
      end

      extra_member 135323 "initialization"
	
	cpp "" ""
	java "  static {
        dispatcher.setDaemon(true);
        dispatcher.start();
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                Preferences uroot = Preferences.userRoot();
                Preferences sroot = Preferences.systemRoot();
                try {
                    uroot.flush();
                } catch (BackingStoreException e) {
                    // ignore
                }
                try {
                    sroot.flush();
                } catch (BackingStoreException e) {
                    // ignore
                }
            }
        });
    }"
	php ""
	python ""
	idl ""
      end

      attribute 426523 "userNode"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "-----------------------------------------------------------
Instance fields (package-private)
-----------------------------------------------------------

 true if this node is in user preference hierarchy "
      end

      classrelation 499611 // lock (<unidirectional association>)
	relation 499611 --->
	  a role_name "lock" const_relation protected
	    comment "
-----------------------------------------------------------
Instance fields (private)
-----------------------------------------------------------


The object used to lock this node.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 499611 // lock (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      attribute 426651 "newNode"
	protected explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This field is true if this node is created while it doesn't exist in the
backing store. This field's default value is false, and it is checked
when the node creation is completed, and if it is true, the node change
event will be fired for this node's parent.
"
      end

      classrelation 499739 // cachedNode (<unidirectional association>)
	relation 499739 --->
	  a role_name "cachedNode" private
	    comment " cached child nodes 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, AbstractPreferences> ${name}${value};
"
	    classrelation_ref 499739 // cachedNode (<unidirectional association>)
	  b parent class_ref 129819 // Map
      end

      classrelation 499867 // nodeChangeListeners (<unidirectional association>)
	relation 499867 --->
	  a role_name "nodeChangeListeners" private
	    comment "the collections of listeners
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<EventListener> ${name}${value};
"
	    classrelation_ref 499867 // nodeChangeListeners (<unidirectional association>)
	  b parent class_ref 131483 // List
      end

      classrelation 499995 // preferenceChangeListeners (<unidirectional association>)
	relation 499995 --->
	  a role_name "preferenceChangeListeners" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<EventListener> ${name}${value};
"
	    classrelation_ref 499995 // preferenceChangeListeners (<unidirectional association>)
	  b parent class_ref 131483 // List
      end

      classrelation 500123 // nodeName (<unidirectional association>)
	relation 500123 --->
	  a role_name "nodeName" private
	    comment "this node's name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500123 // nodeName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 500251 // parentPref (<unidirectional association>)
	relation 500251 --->
	  a role_name "parentPref" private
	    comment "handler to this node's parent
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500251 // parentPref (<unidirectional association>)
	  b parent class_ref 282011 // AbstractPreferences
      end

      attribute 426779 "isRemoved"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "true if this node has been removed"
      end

      classrelation 500379 // root (<unidirectional association>)
	relation 500379 --->
	  a role_name "root" private
	    comment "handler to this node's root node
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500379 // root (<unidirectional association>)
	  b parent class_ref 282011 // AbstractPreferences
      end

      operation 1733915 "AbstractPreferences"
	protected explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 282011 // AbstractPreferences
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------
Constructors
-----------------------------------------------------------


Constructs a new {@code AbstractPreferences} instance using the given
parent node and node name.

@param parent
           the parent node of the new node or {@code null} to indicate
           that the new node is a root node.
@param name
           the name of the new node or an empty string to indicate that
           this node is called \"root\".
@throws IllegalArgumentException
            if the name contains a slash character or is empty if {@code
            parent} is not {@code null}."
      end

      operation 1734043 "cachedChildren"
	protected return_type class_ref 282011 // AbstractPreferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------
Methods
-----------------------------------------------------------


Returns an array of all cached child nodes.

@return the array of cached child nodes."
      end

      operation 1734171 "getChild"
	protected return_type class_ref 282011 // AbstractPreferences
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the child node with the specified name or {@code null} if it
doesn't exist. Implementers can assume that the name supplied to this
method will be a valid node name string (conforming to the node naming
format) and will not correspond to a node that has been cached or
removed.

@param name
           the name of the desired child node.
@return the child node with the given name or {@code null} if it doesn't
        exist.
@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure."
      end

      operation 1734299 "isRemoved"
	protected explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this node has been removed by invoking the method {@code
removeNode()}.

@return {@code true}, if this node has been removed, {@code false}
        otherwise."
      end

      operation 1734427 "flushSpi"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes changes of this node to the backing store. This method should
only flush this node and should not include the descendant nodes. Any
implementation that wants to provide functionality to flush all nodes
at once should override the method {@link #flush() flush()}.

@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure."
      end

      operation 1734555 "childrenNamesSpi"
	abstract protected return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the names of all of the child nodes of this node or an empty
array if this node has no children. The names of cached children are not
required to be returned.

@return the names of this node's children.
@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure."
      end

      operation 1734683 "childSpi"
	abstract protected return_type class_ref 282011 // AbstractPreferences
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the child preference node with the given name, creating it
if it does not exist. The caller of this method should ensure that the
given name is valid and that this node has not been removed or cached.
If the named node has just been removed, the implementation
of this method must create a new one instead of reactivating the removed
one.
<p>
The new creation is not required to be persisted immediately until the
flush method will be invoked.
</p>

@param name
           the name of the child preference to be returned.
@return the child preference node."
      end

      operation 1734811 "putSpi"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Puts the given key-value pair into this node. Caller of this method
should ensure that both of the given values are valid and that this
node has not been removed.

@param name
           the given preference key.
@param value
           the given preference value."
      end

      operation 1734939 "getSpi"
	abstract protected return_type class_ref 3399692 // String
	nparams 1
	  param inout name "key" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the preference value mapped to the given key. The caller of this
method should ensure that the given key is valid and that this node has
not been removed. This method should not throw any exceptions but if it
does, the caller will ignore the exception, regarding it as a {@code
null} return value.

@param key
           the given key to be searched for.
@return the preference value mapped to the given key."
      end

      operation 1735067 "keysSpi"
	abstract protected return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all preference keys of this node or an empty array if
no preferences have been found. The caller of this method should ensure
that this node has not been removed.

@return the array of all preference keys.
@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure."
      end

      operation 1735195 "removeNodeSpi"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes this node from the preference hierarchy tree. The caller of this
method should ensure that this node has no child nodes, which means the
method {@link Preferences#removeNode() Preferences.removeNode()} should
invoke this method multiple-times in bottom-up pattern. The removal is
not required to be persisted until after it is flushed.

@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure."
      end

      operation 1735323 "removeSpi"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the preference with the specified key. The caller of this method
should ensure that the given key is valid and that this node has not been
removed.

@param key
           the key of the preference that is to be removed."
      end

      operation 1735451 "syncSpi"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synchronizes this node with the backing store. This method should only
synchronize this node and should not include the descendant nodes. An
implementation that wants to provide functionality to synchronize all
nodes at once should override the method {@link #sync() sync()}.

@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure."
      end

      operation 1735579 "absolutePath"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------
Methods inherited from Preferences
-----------------------------------------------------------"
      end

      operation 1735707 "childrenNames"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1735835 "clear"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1735963 "exportNode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ostream" type class_ref 132635 // OutputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1736091 "exportSubtree"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ostream" type class_ref 132635 // OutputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1736219 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1736347 "get"
	public return_type class_ref 3399692 // String
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "deflt" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1736475 "getBoolean"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "deflt" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1736603 "getByteArray"
	public explicit_return_type "byte"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "deflt" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1736731 "getDouble"
	public explicit_return_type "double"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "deflt" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1736859 "getFloat"
	public explicit_return_type "float"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "deflt" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1736987 "getInt"
	public explicit_return_type "int"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "deflt" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1737115 "getLong"
	public explicit_return_type "long"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "deflt" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1737243 "isUserNode"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1737371 "keys"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1737499 "name"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1737627 "node"
	public return_type class_ref 282139 // Preferences
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1737755 "validateName"
	private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1737883 "nodeImpl"
	private return_type class_ref 282011 // AbstractPreferences
	nparams 2
	  param inout name "path" type class_ref 3399692 // String
	  param inout name "createNew" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1738011 "getNodeFromBackend"
	private return_type class_ref 282011 // AbstractPreferences
	nparams 3
	  param inout name "createNew" explicit_type "boolean"
	  param inout name "currentNode" type class_ref 282011 // AbstractPreferences
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1738139 "nodeExists"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1738267 "parent"
	public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1738395 "checkState"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1738523 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1738651 "putBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1738779 "putByteArray"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "value" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1738907 "putDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1739035 "putFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1739163 "putInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1739291 "putLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1739419 "remove"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1739547 "removeNode"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1739675 "removeNodeImpl"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1739803 "addNodeChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ncl" type class_ref 282651 // NodeChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1739931 "addPreferenceChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pcl" type class_ref 282779 // PreferenceChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1740059 "removeNodeChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ncl" type class_ref 282651 // NodeChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1740187 "removePreferenceChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pcl" type class_ref 282779 // PreferenceChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1740315 "sync"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1740443 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1740571 "notifyChildAdded"
	private explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 282139 // Preferences
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1740699 "notifyChildRemoved"
	private explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 282139 // Preferences
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1740827 "notifyPreferenceChange"
	private explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "newValue" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 283291 "NodeAddEvent"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 501147 // <generalisation>
	  relation 501147 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 501147 // <generalisation>
	    b parent class_ref 283163 // NodeChangeEvent
	end

	attribute 427035 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The base class is NOT serializable, so this class isn't either."
	end

	operation 1742363 "NodeAddEvent"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "p" type class_ref 282139 // Preferences
	    param inout name "c" type class_ref 282139 // Preferences
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 283419 "NodeRemoveEvent"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 501275 // <generalisation>
	  relation 501275 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 501275 // <generalisation>
	    b parent class_ref 283163 // NodeChangeEvent
	end

	attribute 427163 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The base class is NOT serializable, so this class isn't either."
	end

	operation 1742491 "NodeRemoveEvent"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "p" type class_ref 282139 // Preferences
	    param inout name "c" type class_ref 282139 // Preferences
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 282139 "Preferences"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An instance of the class {@code Preferences} represents one node in a
preference tree, which provides a mechanism to store and access configuration
data in a hierarchical way. Two hierarchy trees are maintained, one for
system preferences shared by all users and the other for user preferences
specific to the user. {@code Preferences} hierarchy trees and data are stored
in an implementation-dependent back-end.
<p>
Every node has one name and one unique absolute path following the same
notational conventions as directories in a file system. The root node's
name is \"\", and other node name strings cannot contain the slash character
and cannot be empty. The root node's absolute path is \"/\", and all other
nodes' absolute paths are constructed in the standard way: &lt;parent's
absolute path&gt; + \"/\" + &lt;node's name&gt;. Since the set of nodes forms a
tree with the root node at its base, all absolute paths start with the slash
character. Every node has one relative path to each of its ancestors. The
relative path doesn't start with slash: it equals the node's absolute path
with leading substring removed corresponding to the ancestor's absolute path
and a slash.
<p>
Modification to preferences data may be asynchronous, which means that
preference update method calls may return immediately instead of blocking.
The {@code flush()} and {@code sync()} methods force the back-end to
synchronously perform all pending updates, but the implementation is
permitted to perform the modifications on the underlying back-end data
at any time between the moment the request is made and the moment the
{@code flush()} or {@code sync()} method returns. Please note that if the JVM
exits normally, the implementation must assure all modifications are
persisted implicitly.
<p>
When invoking a method that retrieves preferences, the user must provide
a default value. The default value is returned when the preferences cannot
be found or the back-end is unavailable. Some other methods will throw
{@code BackingStoreException} when the back-end is unavailable.
</p>
<p>
Preferences can be exported to and imported from an XML files. These
documents must have an XML DOCTYPE declaration:
<pre>{@code
<!DOCTYPE preferences SYSTEM \"http://java.sun.com/dtd/preferences.dtd\">
}</pre>
This system URI is not really accessed by network, it is only a
identification string. Visit the DTD location to see the actual format
permitted.
<p>
There must be a concrete {@code PreferencesFactory} type for every concrete
{@code Preferences} type developed. Every J2SE implementation must provide a
default implementation for every supported platform, and must also provide a
means of replacing the default implementation. This implementation uses the
system property {@code java.util.prefs.PreferencesFactory} to determine which
preferences implementation to use.
<p>
The methods of this class are thread-safe. If multiple JVMs are using the
same back-end concurrently, the back-end won't be corrupted, but no other
behavior guarantees are made.

@see PreferencesFactory

@since 1.4"
      attribute 426139 "MAX_KEY_LENGTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 80"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Maximum size in characters allowed for a preferences key.
"
      end

      attribute 426267 "MAX_NAME_LENGTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 80"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Maximum size in characters allowed for a preferences name.
"
      end

      attribute 426395 "MAX_VALUE_LENGTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8192"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Maximum size in characters allowed for a preferences value.
"
      end

      classrelation 499099 // factory (<unidirectional association>)
	relation 499099 --->
	  a role_name "factory" init_value " findPreferencesFactory()" class_relation const_relation private
	    comment "factory used to get user/system prefs root
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 499099 // factory (<unidirectional association>)
	  b parent class_ref 282267 // PreferencesFactory
      end

      operation 1728539 "findPreferencesFactory"
	class_operation private return_type class_ref 282267 // PreferencesFactory
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1728667 "Preferences"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, for use by subclasses only."
      end

      operation 1728795 "absolutePath"
	abstract public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the absolute path string of this preference node.

@return the preference node's absolute path string."
      end

      operation 1728923 "childrenNames"
	abstract public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the names of all children of this node or an empty array if this
node has no children.

@return the names of all children of this node.
@throws BackingStoreException
            if backing store is unavailable or causes an operation
            failure.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1729051 "clear"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all preferences of this node.

@throws BackingStoreException
            if backing store is unavailable or causes an operation
            failure.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1729179 "exportNode"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "ostream" type class_ref 132635 // OutputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exports all of the preferences of this node to a XML document using the
given output stream.
<p>
This XML document uses the UTF-8 encoding and is written according to the
DTD in its DOCTYPE declaration, which is the following:

<pre>
&lt;!DOCTYPE preferences SYSTEM &quot;http://java.sun.com/dtd/preferences.dtd&quot;&gt;
</pre>

<i>Please note that (unlike the methods of this class that don't concern
serialization), this call is not thread-safe.</i>
</p>

@param ostream
           the output stream to write the XML-formatted data to.
@throws IOException
            if an error occurs while exporting.
@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1729307 "exportSubtree"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "ostream" type class_ref 132635 // OutputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exports all of the preferences of this node and all its descendants to a
XML document using the given output stream.
<p>
This XML document uses the UTF-8 encoding and is written according to the
DTD in its DOCTYPE declaration, which is the following:

<pre>
&lt;!DOCTYPE preferences SYSTEM &quot;http://java.sun.com/dtd/preferences.dtd&quot;&gt;
</pre>

<i>Please note that (unlike the methods of this class that don't concern
serialization), this call is not thread-safe.</i>
</p>

@param ostream
           the output stream to write the XML-formatted data to.
@throws IOException
            if an error occurs while exporting.
@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1729435 "flush"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces all pending updates to this node and its descendants to be
persisted in the backing store.
<p>
If this node has been removed, the invocation of this method only flushes
this node, not its descendants.
</p>

@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure."
      end

      operation 1729563 "get"
	abstract public return_type class_ref 3399692 // String
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "deflt" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code String} value mapped to the given key or its default
value if no value is mapped or no backing store is available.
<p>
Some implementations may store default values in backing stores. In this
case, if there is no value mapped to the given key, the stored default
value is returned.
</p>

@param key
           the preference key.
@param deflt
           the default value, which will be returned if no value is
           mapped to the given key or no backing store is available.
@return the preference value mapped to the given key.
@throws IllegalStateException
            if this node has been removed.
@throws NullPointerException
            if the parameter {@code key} is {@code null}."
      end

      operation 1729691 "getBoolean"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "deflt" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code boolean} value mapped to the given key or its default
value if no value is mapped, if the backing store is unavailable, or if
the value is invalid.
<p>
The only valid values are the {@code String} \"true\", which represents
{@code true} and \"false\", which represents {@code false}, ignoring case.
</p>
<p>
Some implementations may store default values in backing stores. In this
case, if there is no value mapped to the given key, the stored default
value is returned.
</p>

@param key
           the preference key.
@param deflt
           the default value, which will be returned if no value is
           mapped to the given key, if the backing store is unavailable,
           or if the value is invalid.
@return the boolean value mapped to the given key.
@throws IllegalStateException
            if this node has been removed.
@throws NullPointerException
            if the parameter {@code key} is {@code null}."
      end

      operation 1729819 "getByteArray"
	abstract public explicit_return_type "byte"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "deflt" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code byte} array value mapped to the given key or its default
value if no value is mapped, if the backing store is unavailable, or if
the value is an invalid string.
<p>
To be valid, the value string must be Base64-encoded binary data. The
Base64 encoding is as defined in <a
href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>, section 6.8.
</p>
<p>
Some implementations may store default values in backing stores. In this
case, if there is no value mapped to the given key, the stored default
value is returned.
</p>

@param key
           the preference key.
@param deflt
           the default value, which will be returned if no value is
           mapped to the given key, if the backing store is unavailable,
           or if the value is invalid.
@return the byte array value mapped to the given key.
@throws IllegalStateException
            if this node has been removed.
@throws NullPointerException
            if the parameter {@code key} is {@code null}."
      end

      operation 1729947 "getDouble"
	abstract public explicit_return_type "double"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "deflt" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code double} value mapped to the given key or its default
value if no value is mapped, if the backing store is unavailable, or if
the value is an invalid string.
<p>
To be valid, the value string must be a string that can be converted to a
{@code double} by {@link Double#parseDouble(String)
Double.parseDouble(String)}.
<p>
Some implementations may store default values in backing stores. In this
case, if there is no value mapped to the given key, the stored default
value is returned.
</p>

@param key
           the preference key.
@param deflt
           the default value, which will be returned if no value is
           mapped to the given key, if the backing store is unavailable, or if the
           value is invalid.
@return the double value mapped to the given key.
@throws IllegalStateException
            if this node has been removed.
@throws NullPointerException
            if the parameter {@code key} is {@code null}."
      end

      operation 1730075 "getFloat"
	abstract public explicit_return_type "float"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "deflt" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code float} value mapped to the given key or its default value
if no value is mapped, if the backing store is unavailable, or if the
value is an invalid string.
<p>
To be valid, the value string must be a string that can be converted to a
{@code float} by {@link Float#parseFloat(String)
Float.parseFloat(String)}.
</p>
<p>
Some implementations may store default values in backing stores. In this
case, if there is no value mapped to the given key, the stored default
value is returned.
</p>

@param key
           the preference key.
@param deflt
           the default value, which will be returned if no value is
           mapped to the given key, if the backing store is unavailable, or if the
           value is invalid.
@return the float value mapped to the given key.
@throws IllegalStateException
            if this node has been removed.
@throws NullPointerException
            if the parameter {@code key} is {@code null}."
      end

      operation 1730203 "getInt"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "deflt" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code int} value mapped to the given key or its default value
if no value is mapped, if the backing store is unavailable, or if the
value is an invalid string.
<p>
To be valid, the value string must be a string that can be converted to
an {@code int} by {@link Integer#parseInt(String)
Integer.parseInt(String)}.
</p>
<p>
Some implementations may store default values in backing stores. In this
case, if there is no value mapped to the given key, the stored default
value is returned.
</p>

@param key
           the preference key.
@param deflt
           the default value, which will be returned if no value is
           mapped to the given key, if the backing store is unavailable,
           or if the value is invalid.
@return the integer value mapped to the given key.
@throws IllegalStateException
            if this node has been removed.
@throws NullPointerException
            if the parameter {@code key} is {@code null}."
      end

      operation 1730331 "getLong"
	abstract public explicit_return_type "long"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "deflt" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code long} value mapped to the given key or its default value
if no value is mapped, if the backing store is unavailable, or if the
value is an invalid string.
<p>
To be valid, the value string must be a string that can be converted to a
{@code long} by {@link Long#parseLong(String) Long.parseLong(String)}.
</p>
<p>
Some implementations may store default values in backing stores. In this
case, if there is no value mapped to the given key, the stored default
value is returned.
</p>

@param key
           the preference key.
@param deflt
           the default value, which will be returned if no value is
           mapped to the given key, if the backing store is unavailable,
           or if the value is invalid.
@return the long value mapped to the given key.
@throws IllegalStateException
            if this node has been removed.
@throws NullPointerException
            if the parameter {@code key} is {@code null}."
      end

      operation 1730459 "importPreferences"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "istream" type class_ref 131867 // InputStream
	nexceptions 2
	  exception class_ref 282523 // InvalidPreferencesFormatException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Imports all the preferences from an XML document using the given input
stream.
<p>
This XML document uses the UTF-8 encoding and must be written according
to the DTD in its DOCTYPE declaration, which must be the following:

<pre>
&lt;!DOCTYPE preferences SYSTEM &quot;http://java.sun.com/dtd/preferences.dtd&quot;&gt;
</pre>

<i>Please note that (unlike the methods of this class that don't concern
serialization), this call is not thread-safe.</i>
</p>

@param istream
           the input stream to read the data from.
@throws InvalidPreferencesFormatException
            if the data read from the given input stream is not from a
            valid XML document.
@throws IOException
            if an error occurs while importing."
      end

      operation 1730587 "isUserNode"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this is a user preference node.

@return {@code true}, if this is a user preference node, {@code false} if
        this is a system preference node."
      end

      operation 1730715 "keys"
	abstract public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all preference keys stored in this node or an empty array if no
key was found.

@return the list of all preference keys of this node.
@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1730843 "name"
	abstract public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this node.

@return the name of this node."
      end

      operation 1730971 "node"
	abstract public return_type class_ref 282139 // Preferences
	nparams 1
	  param inout name "path" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the preference node with the given path name. The path name can
be relative or absolute. The requested node and its ancestors will
be created if they do not exist.
<p>
The path is treated as relative to this node if it doesn't start with a
slash, otherwise it will be treated as an absolute path.
</p>

@param path
           the path name of the requested preference node.
@return the requested preference node.
@throws IllegalStateException
            if this node has been removed.
@throws IllegalArgumentException
            if the path name is invalid.
@throws NullPointerException
            if the given path is {@code null}."
      end

      operation 1731099 "nodeExists"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the preference node with the given path name exists. The
path is treated as relative to this node if it doesn't start with a slash,
otherwise it is treated as an absolute path.
<p>
Please note that if this node has been removed, an invocation of this
node will throw an {@code IllegalStateException} unless the given path is
an empty string, which will return {@code false}.
</p>

@param path
           the path name of the preference node to query.
@return {@code true}, if the queried preference node exists, {@code false}
        otherwise.
@throws IllegalStateException
            if this node has been removed and the path is not an empty
            string.
@throws IllegalArgumentException
            if the path name is invalid.
@throws NullPointerException
            if the given path is {@code null}.
@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure."
      end

      operation 1731227 "parent"
	abstract public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent preference node of this node or {@code null} if this
node is the root node.

@return the parent preference node of this node.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1731355 "put"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new preference to this node using the given key and value or
updates the value if a preference with the given key already exists.

@param key
           the preference key to be added or updated.
@param value
           the preference value for the given key.
@throws NullPointerException
            if the given key or value is {@code null}.
@throws IllegalArgumentException
            if the given key's length is bigger than {@code
            MAX_KEY_LENGTH} or the value's length is bigger than {@code
            MAX_VALUE_LENGTH}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1731483 "putBoolean"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new preference with a {@code boolean} value to this node using the
given key and value or updates the value if a preference with the given
key already exists.

@param key
           the preference key to be added or updated.
@param value
           the preference {@code boolean} value for the given key.
@throws NullPointerException
            if the given key is {@code null}.
@throws IllegalArgumentException
            if the given key's length is bigger than {@code
            MAX_KEY_LENGTH}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1731611 "putByteArray"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "value" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new preference to this node using the given key and the string
form of the given value or updates the value if a preference with the
given key already exists.
<p>
The string form of the value is the Base64-encoded binary data of the
given byte array. The Base64 encoding is as defined in <a
href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>, section 6.8.
</p>

@param key
           the preference key to be added or updated.
@param value
           the preference value for the given key.
@throws NullPointerException
            if the given key or value is {@code null}.
@throws IllegalArgumentException
            if the given key's length is bigger than {@code
            MAX_KEY_LENGTH} or value's length is bigger than three
            quarters of {@code MAX_KEY_LENGTH}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1731739 "putDouble"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new preference to this node using the given key and {@code double}
value or updates the value if a preference with the
given key already exists.
<p>
The value is stored in its string form, which is the result of invoking
{@link Double#toString(double) Double.toString(double)}.
</p>

@param key
           the preference key to be added or updated.
@param value
           the preference value for the given key.
@throws NullPointerException
            if the given key is {@code null}.
@throws IllegalArgumentException
            if the given key's length is bigger than {@code
            MAX_KEY_LENGTH}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1731867 "putFloat"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new preference to this node using the given key and {@code float}
value or updates the value if a preference with the
given key already exists.
<p>
The value is stored in its string form, which is the result of invoking
{@link Float#toString(float) Float.toString(float)}.
</p>

@param key
           the preference key to be added or updated.
@param value
           the preference value for the given key.
@throws NullPointerException
            if the given key is {@code null}.
@throws IllegalArgumentException
            if the given key's length is bigger than {@code
            MAX_KEY_LENGTH}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1731995 "putInt"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new preference to this node using the given key and {@code int}
value or updates the value if a preference with the
given key already exists.
<p>
The value is stored in its string form, which is the result of invoking
{@link Integer#toString(int) Integer.toString(int)}.
</p>

@param key
           the preference key to be added or updated.
@param value
           the preference value for the given key.
@throws NullPointerException
            if the given key is {@code null}.
@throws IllegalArgumentException
            if the given key's length is bigger than {@code
            MAX_KEY_LENGTH}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1732123 "putLong"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new preference to this node using the given key and {@code long}
value or updates the value if a preference with the
given key already exists.
<p>
The value is stored in its string form, which is the result of invoking
{@link Long#toString(long) Long.toString(long)}.
</p>

@param key
           the preference key to be added or updated.
@param value
           the preference value for the given key.
@throws NullPointerException
            if the given key is {@code null}.
@throws IllegalArgumentException
            if the given key's length is bigger than {@code
            MAX_KEY_LENGTH}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1732251 "remove"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the preference mapped to the given key from this node.

@param key
           the key of the preference to be removed.
@throws NullPointerException
            if the given key is {@code null}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1732379 "removeNode"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes this preference node with all its descendants. The removal won't
necessarily be persisted until the method {@code flush()} is invoked.

@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure.
@throws IllegalStateException
            if this node has been removed.
@throws UnsupportedOperationException
            if this is a root node."
      end

      operation 1732507 "addNodeChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "ncl" type class_ref 282651 // NodeChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a {@code NodeChangeListener} instance for this node, which will
handle {@code NodeChangeEvent}s. {@code NodeChangeEvent}s will be fired
when a child node has been added to or removed from this node.

@param ncl
           the listener to be registered.
@throws NullPointerException
            if the given listener is {@code null}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1732635 "addPreferenceChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "pcl" type class_ref 282779 // PreferenceChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a {@code PreferenceChangeListener} instance for this node,
which will handle {@code PreferenceChangeEvent}s. {@code
PreferenceChangeEvent}s will be fired when a preference has been added
to, removed from, or updated for this node.

@param pcl
           the listener to be registered.
@throws NullPointerException
            if the given listener is {@code null}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1732763 "removeNodeChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "ncl" type class_ref 282651 // NodeChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given {@code NodeChangeListener} instance from this node.

@param ncl
           the listener to be removed.
@throws IllegalArgumentException
            if the given listener is {@code null}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1732891 "removePreferenceChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "pcl" type class_ref 282779 // PreferenceChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given {@code PreferenceChangeListener} instance from this
node.

@param pcl
           the listener to be removed.
@throws IllegalArgumentException
            if the given listener is {@code null}.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1733019 "sync"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synchronizes the data of this preference node and its descendants with
the back-end preference store. Any changes found in the back-end data
should be reflected in this node and its descendants, and at the same
time any local changes to this node and descendants should be persisted.

@throws BackingStoreException
            if the backing store is unavailable or causes an operation
            failure.
@throws IllegalStateException
            if this node has been removed."
      end

      operation 1733147 "systemNodeForPackage"
	class_operation public return_type class_ref 282139 // Preferences
	nparams 1
	  param inout name "c" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the system preference node for the package of the given class.
The absolute path of the returned node is one slash followed by the given
class's full package name, replacing each period character ('.') with
a slash. For example, the absolute path of the preference associated with
the class Object would be \"/java/lang\". As a special case, the unnamed
package is associated with a preference node \"/&lt;unnamed&gt;\". This
method will create the node and its ancestors as needed. Any nodes created
by this method won't necessarily be persisted until the method {@code
flush()} is invoked.

@param c
           the given class.
@return the system preference node for the package of the given class.
@throws NullPointerException
            if the given class is {@code null}."
      end

      operation 1733275 "systemRoot"
	class_operation public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root node of the system preference hierarchy.

@return the system preference hierarchy root node."
      end

      operation 1733403 "userNodeForPackage"
	class_operation public return_type class_ref 282139 // Preferences
	nparams 1
	  param inout name "c" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the user preference node for the package of the given class.
The absolute path of the returned node is one slash followed by the given
class's full package name, replacing each period character ('.') with
a slash. For example, the absolute path of the preference associated with
the class Object would be \"/java/lang\". As a special case, the unnamed
package is associated with a preference node \"/&lt;unnamed&gt;\". This
method will create the node and its ancestors as needed. Any nodes created
by this method won't necessarily be persisted until the method {@code
flush()} is invoked.

@param c
           the given class.
@return the user preference node for the package of the given class.
@throws NullPointerException
            if the given class is {@code null}."
      end

      operation 1733531 "getNodeName"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "c" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "parse node's absolute path from class instance"
      end

      operation 1733659 "userRoot"
	class_operation public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root node of the user preference hierarchy.

@return the user preference hierarchy root node."
      end

      operation 1733787 "toString"
	abstract public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of this node. The format is \"User/System
Preference Node: \" followed by this node's absolute path.

@return the string representation of this node."
      end
    end

    class 282267 "PreferencesFactory"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface is used by the {@link Preferences} class as factory class to
create {@code Preferences} instances. This interface can be implemented and
installed to replace the default preferences implementation.

@see java.util.prefs.Preferences

@since 1.4"
      operation 1742875 "userRoot"
	public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root node of the preferences hierarchy for the calling user
context.

@return the user preferences hierarchy root node."
      end

      operation 1743003 "systemRoot"
	public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root node of the system preferences hierarchy.

@return the system preferences hierarchy root node."
      end
    end

    class 282395 "BackingStoreException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception to indicate that an error was encountered while accessing the
backing store.

@since 1.4"
      classrelation 501403 // <generalisation>
	relation 501403 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 501403 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      attribute 427291 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 859796500401108469L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1742619 "BackingStoreException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BackingStoreException} instance with a detailed
exception message.

@param s
           the detailed exception message."
      end

      operation 1742747 "BackingStoreException"
	public explicit_return_type ""
	nparams 1
	  param inout name "t" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BackingStoreException} instance with a nested
{@code Throwable}.

@param t
           the nested {@code Throwable}."
      end
    end

    class 282523 "InvalidPreferencesFormatException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception to indicate that the input XML file is not well-formed or could
not be validated against the appropriate document type (specified by
in the {@code Preferences})."
      classrelation 503195 // <generalisation>
	relation 503195 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 503195 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      attribute 427419 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -791715184232119669L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1745051 "InvalidPreferencesFormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code InvalidPreferencesFormatException} instance with
a detailed exception message.

@param s
           the detailed exception message."
      end

      operation 1745179 "InvalidPreferencesFormatException"
	public explicit_return_type ""
	nparams 2
	  param inout name "s" type class_ref 3399692 // String
	  param inout name "t" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code InvalidPreferencesFormatException} instance with
a detailed exception message and a nested {@code Throwable}.

@param s
           the detailed exception message.
@param t
           the nested {@code Throwable}."
      end

      operation 1745307 "InvalidPreferencesFormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "t" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code InvalidPreferencesFormatException} instance with
a nested {@code Throwable}.

@param t
           the nested {@code Throwable}."
      end
    end

    class 282651 "NodeChangeListener"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface is used to handle preference node change events. The
implementation of this interface can be installed by the {@code Preferences}
instance.

@see Preferences
@see NodeChangeEvent

@since 1.4"
      classrelation 503323 // <generalisation>
	relation 503323 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 503323 // <generalisation>
	  b parent class_ref 130843 // EventListener
      end

      operation 1745435 "childAdded"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 283163 // NodeChangeEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets called whenever a child node is added to another node.

@param e
           the node change event."
      end

      operation 1745563 "childRemoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 283163 // NodeChangeEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets called whenever a child node is removed from another
node.

@param e
           the node change event."
      end
    end

    class 282779 "PreferenceChangeListener"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface is used to handle preferences change events. The
implementation of this interface can be installed by the {@code Preferences}
instance.

@see Preferences
@see PreferenceChangeEvent


@since 1.4"
      classrelation 504347 // <generalisation>
	relation 504347 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 504347 // <generalisation>
	  b parent class_ref 130843 // EventListener
      end

      operation 1747099 "preferenceChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pce" type class_ref 283035 // PreferenceChangeEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets invoked whenever a preference is added, deleted or
updated.

@param pce
           the event instance which describes the changed {@code Preferences}
           instance and the preference value."
      end
    end

    class 283035 "PreferenceChangeEvent"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the event class to indicate that a preference has been added, deleted
or updated.
<p>
Please note that although the class is marked as {@code Serializable} by
inheritance from {@code EventObject}, this type is not intended to be serialized
so the serialization methods do nothing but throw a {@code NotSerializableException}.

@see java.util.prefs.Preferences
@see java.util.prefs.PreferenceChangeListener

@since 1.4"
      classrelation 503707 // <generalisation>
	relation 503707 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 503707 // <generalisation>
	  b parent class_ref 130587 // EventObject
      end

      classrelation 503835 // <realization>
	relation 503835 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 503835 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 427547 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 793724513368024975L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 503963 // node (<unidirectional association>)
	relation 503963 --->
	  a role_name "node" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 503963 // node (<unidirectional association>)
	  b parent class_ref 282139 // Preferences
      end

      classrelation 504091 // key (<unidirectional association>)
	relation 504091 --->
	  a role_name "key" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504091 // key (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 504219 // value (<unidirectional association>)
	relation 504219 --->
	  a role_name "value" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504219 // value (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1746331 "PreferenceChangeEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "p" type class_ref 282139 // Preferences
	  param inout name "k" type class_ref 3399692 // String
	  param inout name "v" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new {@code PreferenceChangeEvent} instance.

@param p
           the {@code Preferences} instance that fired this event; this object is
           considered as the event's source.
@param k
           the changed preference key.
@param v
           the new value of the changed preference, this value can be
           {@code null}, which means the preference has been removed."
      end

      operation 1746459 "getKey"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the key of the changed preference.

@return the changed preference's key."
      end

      operation 1746587 "getNewValue"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the new value of the changed preference or {@code null} if the
preference has been removed.

@return the new value of the changed preference or {@code null} if the
        preference has been removed."
      end

      operation 1746715 "getNode"
	public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code Preferences} instance that fired this event.

@return the {@code Preferences} instance that fired this event."
      end

      operation 1746843 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method always throws a <code>NotSerializableException</code>,
because this object cannot be serialized,"
      end

      operation 1746971 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 128667 // ObjectInputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method always throws a <code>NotSerializableException</code>,
because this object cannot be serialized,"
      end
    end

    class 283163 "NodeChangeEvent"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the event class to indicate that one child of the preference node has
been added or deleted.
<p>
Please note that although the class is marked as {@code Serializable} by
inheritance from {@code EventObject}, this type is not intended to be serialized
so the serialization methods do nothing but throw a {@code NotSerializableException}.

@see java.util.prefs.Preferences
@see java.util.prefs.NodeChangeListener

@since 1.4"
      classrelation 500635 // <generalisation>
	relation 500635 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 500635 // <generalisation>
	  b parent class_ref 130587 // EventObject
      end

      classrelation 500763 // <realization>
	relation 500763 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 500763 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 426907 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8068949086596572957L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 500891 // parent (<unidirectional association>)
	relation 500891 --->
	  a role_name "parent" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500891 // parent (<unidirectional association>)
	  b parent class_ref 282139 // Preferences
      end

      classrelation 501019 // child (<unidirectional association>)
	relation 501019 --->
	  a role_name "child" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501019 // child (<unidirectional association>)
	  b parent class_ref 282139 // Preferences
      end

      operation 1741723 "NodeChangeEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "p" type class_ref 282139 // Preferences
	  param inout name "c" type class_ref 282139 // Preferences
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code NodeChangeEvent} instance.

@param p
           the {@code Preferences} instance that fired this event; this object is
           considered as the event source.
@param c
           the child {@code Preferences} instance that was added or deleted."
      end

      operation 1741851 "getParent"
	public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code Preferences} instance that fired this event.

@return the {@code Preferences} instance that fired this event."
      end

      operation 1741979 "getChild"
	public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the child {@code Preferences} node that was added or removed.

@return the added or removed child {@code Preferences} node."
      end

      operation 1742107 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method always throws a <code>NotSerializableException</code>,
because this object cannot be serialized,"
      end

      operation 1742235 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method always throws a <code>NotSerializableException</code>,
because this object cannot be serialized,"
      end
    end

    class 283547 "FilePreferencesFactoryImpl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The default implementation of <code>PreferencesFactory</code> for the Linux
platform, using the file system as its back end.

@since 1.4"
      classrelation 501531 // <realization>
	relation 501531 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 501531 // <realization>
	  b parent class_ref 282267 // PreferencesFactory
      end

      classrelation 501659 // USER_ROOT (<unidirectional association>)
	relation 501659 --->
	  a role_name "USER_ROOT" init_value " new FilePreferencesImpl(true)" class_relation const_relation private
	    comment "  user root preferences
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501659 // USER_ROOT (<unidirectional association>)
	  b parent class_ref 282139 // Preferences
      end

      classrelation 501787 // SYSTEM_ROOT (<unidirectional association>)
	relation 501787 --->
	  a role_name "SYSTEM_ROOT" init_value " new FilePreferencesImpl(false)" class_relation const_relation private
	    comment "  system root preferences
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501787 // SYSTEM_ROOT (<unidirectional association>)
	  b parent class_ref 282139 // Preferences
      end

      operation 1743131 "FilePreferencesFactoryImpl"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1743259 "userRoot"
	public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1743387 "systemRoot"
	public return_type class_ref 282139 // Preferences
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 283675 "FilePreferencesImpl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The default implementation of <code>AbstractPreferences</code> for the Linux
platform, using the file system as its back end.

TODO some sync mechanism with backend, Performance - check file edit date

@since 1.4"
      classrelation 501915 // <generalisation>
	relation 501915 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 501915 // <generalisation>
	  b parent class_ref 282011 // AbstractPreferences
      end

      classrelation 502043 // PREFS_FILE_NAME (<unidirectional association>)
	relation 502043 --->
	  a role_name "PREFS_FILE_NAME" init_value " \"prefs.xml\"" class_relation const_relation private
	    comment "prefs file name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502043 // PREFS_FILE_NAME (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 502171 // USER_HOME (<unidirectional association>)
	relation 502171 --->
	  a role_name "USER_HOME" init_value " System.getProperty(\"user.home\") + \"/.java/.userPrefs\"" class_relation private
	    comment "home directory for user prefs
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502171 // USER_HOME (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 502299 // SYSTEM_HOME (<unidirectional association>)
	relation 502299 --->
	  a role_name "SYSTEM_HOME" init_value " System.getProperty(\"java.home\") + \"/.systemPrefs\"" class_relation private
	    comment "home directory for system prefs
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502299 // SYSTEM_HOME (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 502427 // path (<unidirectional association>)
	relation 502427 --->
	  a role_name "path" private
	    comment "file path for this preferences node
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502427 // path (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 502555 // prefs (<unidirectional association>)
	relation 502555 --->
	  a role_name "prefs" private
	    comment "internal cache for prefs key-value pair
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502555 // prefs (<unidirectional association>)
	  b parent class_ref 160027 // Properties
      end

      classrelation 502683 // prefsFile (<unidirectional association>)
	relation 502683 --->
	  a role_name "prefsFile" private
	    comment "file represents this preferences node
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502683 // prefsFile (<unidirectional association>)
	  b parent class_ref 135579 // File
      end

      classrelation 502811 // dir (<unidirectional association>)
	relation 502811 --->
	  a role_name "dir" private
	    comment "parent dir for this preferences node
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502811 // dir (<unidirectional association>)
	  b parent class_ref 135579 // File
      end

      classrelation 502939 // removed (<unidirectional association>)
	relation 502939 --->
	  a role_name "removed" init_value " new HashSet<String>()" private
	    comment "cache for removed prefs key-value pair
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 502939 // removed (<unidirectional association>)
	  b parent class_ref 129691 // Set
      end

      classrelation 503067 // updated (<unidirectional association>)
	relation 503067 --->
	  a role_name "updated" init_value " new HashSet<String>()" private
	    comment "cache for updated prefs key-value pair
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 503067 // updated (<unidirectional association>)
	  b parent class_ref 129691 // Set
      end

      operation 1743515 "FilePreferencesImpl"
	package explicit_return_type ""
	nparams 1
	  param inout name "userNode" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------------------------------------------
Constructors
--------------------------------------------------------------


Construct root <code>FilePreferencesImpl</code> instance, construct
user root if userNode is true, system root otherwise"
      end

      operation 1743643 "FilePreferencesImpl"
	private explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 282011 // AbstractPreferences
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a prefs using given parent and given name"
      end

      operation 1743771 "initPrefs"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1743899 "childrenNamesSpi"
	protected return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1744027 "childSpi"
	protected return_type class_ref 282011 // AbstractPreferences
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1744155 "flushSpi"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1744283 "getSpi"
	protected return_type class_ref 3399692 // String
	nparams 1
	  param inout name "key" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1744411 "keysSpi"
	protected return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1744539 "putSpi"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1744667 "removeNodeSpi"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1744795 "removeSpi"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1744923 "syncSpi"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 283803 "NodeSet"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 503451 // <realization>
	relation 503451 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 503451 // <realization>
	  b parent class_ref 283931 // NodeList
      end

      classrelation 503579 // list (<unidirectional association>)
	relation 503579 --->
	  a role_name "list" init_value " new ArrayList<Node>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Node> ${name}${value};
"
	    classrelation_ref 503579 // list (<unidirectional association>)
	  b parent class_ref 138267 // ArrayList
      end

      operation 1745947 "NodeSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "nodes" type class_ref 155803 // Iterator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Node> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1746075 "getLength"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1746203 "item"
	public return_type class_ref 284059 // Node
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 284187 "XMLParser"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Utility class for the Preferences import/export from XML file."
      classrelation 504475 // PREFS_DTD_NAME (<unidirectional association>)
	relation 504475 --->
	  a role_name "PREFS_DTD_NAME" init_value " \"http://java.sun.com/dtd/preferences.dtd\"" class_relation const_relation package
	    comment "
Constant - the specified DTD URL

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504475 // PREFS_DTD_NAME (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 504603 // PREFS_DTD (<unidirectional association>)
	relation 504603 --->
	  a role_name "PREFS_DTD" init_value " \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"
        + \"    <!ELEMENT preferences (root)>\"
        + \"    <!ATTLIST preferences EXTERNAL_XML_VERSION CDATA \\\"0.0\\\" >\"
        + \"    <!ELEMENT root (map, node*) >\"
        + \"    <!ATTLIST root type (system|user) #REQUIRED >\"
        + \"    <!ELEMENT node (map, node*) >\"
        + \"    <!ATTLIST node name CDATA #REQUIRED >\"
        + \"    <!ELEMENT map (entry*) >\"
        + \"    <!ELEMENT entry EMPTY >\"
        + \"    <!ATTLIST entry key   CDATA #REQUIRED value CDATA #REQUIRED >\"" class_relation const_relation package
	    comment "
Constant - the DTD string

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504603 // PREFS_DTD (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 504731 // HEADER (<unidirectional association>)
	relation 504731 --->
	  a role_name "HEADER" init_value " \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"" class_relation const_relation package
	    comment "
Constant - the specified header

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504731 // HEADER (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 504859 // DOCTYPE (<unidirectional association>)
	relation 504859 --->
	  a role_name "DOCTYPE" init_value " \"<!DOCTYPE preferences SYSTEM\"" class_relation const_relation package
	    comment "
Constant - the specified DOCTYPE

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504859 // DOCTYPE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 504987 // FILE_PREFS (<unidirectional association>)
	relation 504987 --->
	  a role_name "FILE_PREFS" init_value " \"<!DOCTYPE map SYSTEM 'http://java.sun.com/dtd/preferences.dtd'>\"" class_relation const_relation private
	    comment "
Constant - used by FilePreferencesImpl, which is default implementation of Linux platform

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504987 // FILE_PREFS (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 427675 "XML_VERSION"
	class_attribute const_attribute private explicit_type "float"
	init_value " 1.0f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant - specify the DTD version
"
      end

      classrelation 505115 // builder (<unidirectional association>)
	relation 505115 --->
	  a role_name "builder" class_relation const_relation private
	    comment "
DOM builder

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 505115 // builder (<unidirectional association>)
	  b parent class_ref 198811 // DocumentBuilder
      end

      attribute 427803 "indent"
	class_attribute private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "specify the indent level
"
      end

      extra_member 135451 "initialization"
	
	cpp "" ""
	java "  static {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setValidating(false);
        try {
            builder = factory.newDocumentBuilder();
        } catch (ParserConfigurationException e) {
            throw new Error(e);
        }
        builder.setEntityResolver(new EntityResolver() {
            public InputSource resolveEntity(String publicId, String systemId)
            throws SAXException, IOException {
                if (systemId.equals(PREFS_DTD_NAME)) {
                    InputSource result = new InputSource(new StringReader(
                            PREFS_DTD));
                    result.setSystemId(PREFS_DTD_NAME);
                    return result;
                }
                throw new SAXException(\"Invalid DOCTYPE declaration \" + systemId);
            }
        });
        builder.setErrorHandler(new ErrorHandler() {
            public void warning(SAXParseException e) throws SAXException {
                throw e;
            }

            public void error(SAXParseException e) throws SAXException {
                throw e;
            }

            public void fatalError(SAXParseException e) throws SAXException {
                throw e;
            }
        });
    }"
	php ""
	python ""
	idl ""
      end

      operation 1747227 "XMLParser"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1747355 "exportPrefs"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "prefs" type class_ref 282139 // Preferences
	  param inout name "stream" type class_ref 132635 // OutputStream
	  param inout name "withSubTree" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "utilities for Preferences export
************************************************************************"
      end

      operation 1747483 "exportNode"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "ancestors" type class_ref 249499 // StringTokenizer
	  param inout name "prefs" type class_ref 282139 // Preferences
	  param inout name "withSubTree" explicit_type "boolean"
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 282395 // BackingStoreException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1747611 "exportSubTree"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "prefs" type class_ref 282139 // Preferences
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 2
	  exception class_ref 282395 // BackingStoreException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1747739 "exportEntries"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "prefs" type class_ref 282139 // Preferences
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 2
	  exception class_ref 282395 // BackingStoreException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1747867 "exportEntries"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "keys" type class_ref 3399692 // String
	  param inout name "values" type class_ref 3399692 // String
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1747995 "flushEndTag"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "tagName" type class_ref 3399692 // String
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1748123 "flushEmptyElement"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "tagName" type class_ref 3399692 // String
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1748251 "flushEmptyElement"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "tagName" type class_ref 3399692 // String
	  param inout name "attrKeys" type class_ref 3399692 // String
	  param inout name "attrValues" type class_ref 3399692 // String
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1748379 "flushPairs"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "attrKeys" type class_ref 3399692 // String
	  param inout name "attrValues" type class_ref 3399692 // String
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1748507 "flushIndent"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "ind" explicit_type "int"
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1748635 "flushStartTag"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "tagName" type class_ref 3399692 // String
	  param inout name "attrKeys" type class_ref 3399692 // String
	  param inout name "attrValues" type class_ref 3399692 // String
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1748763 "flushStartTag"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "tagName" type class_ref 3399692 // String
	  param inout name "out" type class_ref 133403 // BufferedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1748891 "htmlEncode"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1749019 "importPrefs"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 131867 // InputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 282523 // InvalidPreferencesFormatException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "utilities for Preferences import
************************************************************************"
      end

      operation 1749147 "loadNode"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "prefs" type class_ref 282139 // Preferences
	  param inout name "node" type class_ref 284315 // Element
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1749275 "selectNodeList"
	class_operation private return_type class_ref 283931 // NodeList
	nparams 2
	  param inout name "documentElement" type class_ref 284315 // Element
	  param inout name "string" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TODO dirty implementation of a method from javax.xml.xpath
 should be replaced with a call to a good impl of this method"
      end

      operation 1749403 "readXmlPreferences"
	class_operation package return_type class_ref 160027 // Properties
	nparams 1
	  param inout name "xmlFile" type class_ref 135579 // File
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the preferences from {@code xmlFile}. Returns empty properties if
any errors occur."
      end

      operation 1749531 "writeXmlPreferences"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "xmlFile" type class_ref 135579 // File
	  param inout name "properties" type class_ref 160027 // Properties
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the preferences to {@code xmlFile}."
      end
    end
  end

  deploymentview 132123 "prefs"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 237595 "Preferences"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.util.ServiceLoader;
${definition}"
      associated_classes
	class_ref 282139 // Preferences
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237723 "NodeChangeEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.NotSerializableException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.EventObject;
${definition}"
      associated_classes
	class_ref 283163 // NodeChangeEvent
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237851 "AbstractPreferences"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charsets;
import java.util.Collection;
import java.util.EventListener;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import libcore.io.Base64;
import libcore.util.EmptyArray;
${definition}"
      associated_classes
	class_ref 282011 // AbstractPreferences
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 237979 "BackingStoreException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 282395 // BackingStoreException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 238107 "PreferencesFactory"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 282267 // PreferencesFactory
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238235 "FilePreferencesFactoryImpl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 283547 // FilePreferencesFactoryImpl
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238363 "FilePreferencesImpl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.FilenameFilter;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 283675 // FilePreferencesImpl
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238491 "InvalidPreferencesFormatException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 282523 // InvalidPreferencesFormatException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 238619 "NodeChangeListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_classes
	class_ref 282651 // NodeChangeListener
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 238875 "NodeSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Iterator;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
${definition}"
      associated_classes
	class_ref 283803 // NodeSet
      end
    end

    artifact 239003 "PreferenceChangeEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.NotSerializableException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.EventObject;
${definition}"
      associated_classes
	class_ref 283035 // PreferenceChangeEvent
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 239131 "PreferenceChangeListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_classes
	class_ref 282779 // PreferenceChangeListener
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 239259 "XMLParser"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.UUID;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import libcore.io.IoUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
${definition}"
      associated_classes
	class_ref 284187 // XMLParser
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
