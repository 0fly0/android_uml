format 74
"logging" // _unknown::java::util::logging
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/util/logging/"
  java_package "java.util.logging"
  classview 133403 "logging"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 279707 "ConsoleHandler"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A handler that writes log messages to the standard output stream
{@code System.err}.
<p>
This handler reads the following properties from the log manager to
initialize itself:
<ul>
<li>java.util.logging.ConsoleHandler.level specifies the logging level,
defaults to {@code Level.INFO} if this property is not found or has an
invalid value.
<li>java.util.logging.ConsoleHandler.filter specifies the name of the filter
class to be associated with this handler, defaults to {@code null} if this
property is not found or has an invalid value.
<li>java.util.logging.ConsoleHandler.formatter specifies the name of the
formatter class to be associated with this handler, defaults to
{@code java.util.logging.SimpleFormatter} if this property is not found or
has an invalid value.
<li>java.util.logging.ConsoleHandler.encoding specifies the encoding this
handler will use to encode log messages, defaults to {@code null} if this
property is not found or has an invalid value.
</ul>
<p>
This class is not thread-safe."
      classrelation 489627 // <generalisation>
	relation 489627 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 489627 // <generalisation>
	  b parent class_ref 279835 // StreamHandler
      end

      operation 1705883 "ConsoleHandler"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code ConsoleHandler} object."
      end

      operation 1706011 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this handler. The {@code System.err} is flushed but not closed."
      end

      operation 1706139 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Logs a record if necessary. A flush operation will be done.

@param record
           the log record to be logged."
      end
    end

    class 279835 "StreamHandler"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code StreamHandler} object writes log messages to an output stream, that
is, objects of the class {@link java.io.OutputStream}.
<p>
A {@code StreamHandler} object reads the following properties from the log
manager to initialize itself. A default value will be used if a property is
not found or has an invalid value.
<ul>
<li>java.util.logging.StreamHandler.encoding specifies the encoding this
handler will use to encode log messages. Default is the encoding used by the
current platform.
<li>java.util.logging.StreamHandler.filter specifies the name of the filter
class to be associated with this handler. No <code>Filter</code> is used by
default.
<li>java.util.logging.StreamHandler.formatter specifies the name of the
formatter class to be associated with this handler. Default is
{@code java.util.logging.SimpleFormatter}.
<li>java.util.logging.StreamHandler.level specifies the logging level.
Defaults is {@code Level.INFO}.
</ul>
<p>
This class is not thread-safe."
      classrelation 489243 // <generalisation>
	relation 489243 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 489243 // <generalisation>
	  b parent class_ref 279963 // Handler
      end

      classrelation 489371 // os (<unidirectional association>)
	relation 489371 --->
	  a role_name "os" private
	    comment " the output stream this handler writes to
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 489371 // os (<unidirectional association>)
	  b parent class_ref 132635 // OutputStream
      end

      classrelation 489499 // writer (<unidirectional association>)
	relation 489499 --->
	  a role_name "writer" private
	    comment " the writer that writes to the output stream
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 489499 // writer (<unidirectional association>)
	  b parent class_ref 133531 // Writer
      end

      attribute 421915 "writerNotInitialized"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the flag indicating whether the writer has been initialized"
      end

      operation 1704091 "StreamHandler"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code StreamHandler} object. The new stream handler
does not have an associated output stream."
      end

      operation 1704219 "StreamHandler"
	package explicit_return_type ""
	nparams 1
	  param inout name "os" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code StreamHandler} object with the supplied output
stream. Default properties are read.

@param os
           the output stream this handler writes to."
      end

      operation 1704347 "StreamHandler"
	package explicit_return_type ""
	nparams 4
	  param inout name "defaultLevel" type class_ref 3399692 // String
	  param inout name "defaultFilter" type class_ref 3399692 // String
	  param inout name "defaultFormatter" type class_ref 3399692 // String
	  param inout name "defaultEncoding" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code StreamHandler} object. The specified default values
will be used if the corresponding properties are not found in the log
manager's properties."
      end

      operation 1704475 "StreamHandler"
	public explicit_return_type ""
	nparams 2
	  param inout name "os" type class_ref 132635 // OutputStream
	  param inout name "formatter" type class_ref 280347 // Formatter
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code StreamHandler} object with the supplied output stream
and formatter.

@param os
           the output stream this handler writes to.
@param formatter
           the formatter this handler uses to format the output.
@throws NullPointerException
            if {@code os} or {@code formatter} is {@code null}."
      end

      operation 1704603 "initializeWriter"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " initialize the writer"
      end

      operation 1704731 "write"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Write a string to the output stream."
      end

      operation 1704859 "internalSetOutputStream"
	package explicit_return_type "void"
	nparams 1
	  param inout name "newOs" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the output stream this handler writes to. Note it does nothing else.

@param newOs
           the new output stream"
      end

      operation 1704987 "setOutputStream"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "os" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the output stream this handler writes to. If there's an existing
output stream, the tail string of the associated formatter will be
written to it. Then it will be flushed, closed and replaced with
{@code os}.

@param os
           the new output stream.
@throws NullPointerException
            if {@code os} is {@code null}."
      end

      operation 1705115 "setEncoding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "charsetName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the character encoding used by this handler. A {@code null} value
indicates that the default encoding should be used.

@throws UnsupportedEncodingException if {@code charsetName} is not supported."
      end

      operation 1705243 "close"
	package explicit_return_type "void"
	nparams 1
	  param inout name "closeStream" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this handler, but the underlying output stream is only closed if
{@code closeStream} is {@code true}. Security is not checked.

@param closeStream
           whether to close the underlying output stream."
      end

      operation 1705371 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this handler. The tail string of the formatter associated with
this handler is written out. A flush operation and a subsequent close
operation is then performed upon the output stream. Client applications
should not use a handler after closing it."
      end

      operation 1705499 "flush"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flushes any buffered output."
      end

      operation 1705627 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Accepts a logging request. The log record is formatted and written to the
output stream if the following three conditions are met:
<ul>
<li>the supplied log record has at least the required logging level;
<li>the supplied log record passes the filter associated with this
handler, if any;
<li>the output stream associated with this handler is not {@code null}.
</ul>
If it is the first time a log record is written out, the head string of
the formatter associated with this handler is written out first.

@param record
           the log record to be logged."
      end

      operation 1705755 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Determines whether the supplied log record needs to be logged. The
logging levels are checked as well as the filter. The output stream of
this handler is also checked. If it is {@code null}, this method returns
{@code false}.
<p>
Notice : Case of no output stream will return {@code false}.

@param record
           the log record to be checked.
@return {@code true} if {@code record} needs to be logged, {@code false}
        otherwise."
      end
    end

    class 279963 "Handler"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code Handler} object accepts a logging request and exports the desired
messages to a target, for example, a file, the console, etc. It can be
disabled by setting its logging level to {@code Level.OFF}."
      classrelation 488347 // DEFAULT_LEVEL (<unidirectional association>)
	relation 488347 --->
	  a role_name "DEFAULT_LEVEL" init_value " Level.ALL" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 488347 // DEFAULT_LEVEL (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 488475 // errorMan (<unidirectional association>)
	relation 488475 --->
	  a role_name "errorMan" private
	    comment " the error manager to report errors during logging
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 488475 // errorMan (<unidirectional association>)
	  b parent class_ref 280219 // ErrorManager
      end

      classrelation 488603 // encoding (<unidirectional association>)
	relation 488603 --->
	  a role_name "encoding" private
	    comment " the character encoding used by this handler
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 488603 // encoding (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 488731 // level (<unidirectional association>)
	relation 488731 --->
	  a role_name "level" private
	    comment " the logging level
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 488731 // level (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 488859 // formatter (<unidirectional association>)
	relation 488859 --->
	  a role_name "formatter" private
	    comment " the formatter used to export messages
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 488859 // formatter (<unidirectional association>)
	  b parent class_ref 280347 // Formatter
      end

      classrelation 488987 // filter (<unidirectional association>)
	relation 488987 --->
	  a role_name "filter" private
	    comment " the filter used to filter undesired messages
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 488987 // filter (<unidirectional association>)
	  b parent class_ref 280475 // Filter
      end

      classrelation 489115 // prefix (<unidirectional association>)
	relation 489115 --->
	  a role_name "prefix" private
	    comment " class name, used for property reading
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 489115 // prefix (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1701275 "Handler"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code Handler} object with a default error manager instance
{@code ErrorManager}, the default encoding, and the default logging
level {@code Level.ALL}. It has no filter and no formatter."
      end

      operation 1701403 "getDefaultInstance"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "className" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get a instance from given class name, using Class.forName()"
      end

      operation 1701531 "getCustomizeInstance"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param in name "className" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 132251 // Exception
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get a instance from given class name, using context classloader"
      end

      operation 1701659 "printInvalidPropMessage"
	package explicit_return_type "void"
	nparams 3
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3399692 // String
	  param inout name "e" type class_ref 132251 // Exception
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " print error message in some format"
      end

      operation 1701787 "initProperties"
	package explicit_return_type "void"
	nparams 4
	  param inout name "defaultLevel" type class_ref 3399692 // String
	  param inout name "defaultFilter" type class_ref 3399692 // String
	  param inout name "defaultFormatter" type class_ref 3399692 // String
	  param inout name "defaultEncoding" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "init the common properties, including filter, level, formatter, and
encoding"
      end

      operation 1701915 "close"
	abstract public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this handler. A flush operation will be performed and all the
associated resources will be freed. Client applications should not use
this handler after closing it."
      end

      operation 1702043 "flush"
	abstract public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes any buffered output."
      end

      operation 1702171 "publish"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts a logging request and sends it to the the target.

@param record
           the log record to be logged; {@code null} records are ignored."
      end

      operation 1702299 "getEncoding"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the character encoding used by this handler, {@code null} for
default encoding.

@return the character encoding used by this handler."
      end

      operation 1702427 "getErrorManager"
	public return_type class_ref 280219 // ErrorManager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the error manager used by this handler to report errors during
logging.

@return the error manager used by this handler."
      end

      operation 1702555 "getFilter"
	public return_type class_ref 280475 // Filter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the filter used by this handler.

@return the filter used by this handler (possibly {@code null})."
      end

      operation 1702683 "getFormatter"
	public return_type class_ref 280347 // Formatter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the formatter used by this handler to format the logging messages.

@return the formatter used by this handler (possibly {@code null})."
      end

      operation 1702811 "getLevel"
	public return_type class_ref 280091 // Level
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the logging level of this handler, records with levels lower than
this value will be dropped.

@return the logging level of this handler."
      end

      operation 1702939 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the supplied log record needs to be logged. The
logging levels will be checked as well as the filter.

@param record
           the log record to be checked.
@return {@code true} if the supplied log record needs to be logged,
        otherwise {@code false}."
      end

      operation 1703067 "reportError"
	protected explicit_return_type "void"
	nparams 3
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "ex" type class_ref 132251 // Exception
	  param in name "code" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports an error to the error manager associated with this handler,
{@code ErrorManager} is used for that purpose. No security checks are
done, therefore this is compatible with environments where the caller
is non-privileged.

@param msg
           the error message, may be {@code null}.
@param ex
           the associated exception, may be {@code null}.
@param code
           an {@code ErrorManager} error code."
      end

      operation 1703195 "internalSetEncoding"
	package explicit_return_type "void"
	nparams 1
	  param inout name "newEncoding" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character encoding used by this handler. A {@code null} value
indicates the use of the default encoding. This internal method does
not check security.

@param newEncoding
           the character encoding to set.
@throws UnsupportedEncodingException
            if the specified encoding is not supported by the runtime."
      end

      operation 1703323 "setEncoding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "charsetName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character encoding used by this handler, {@code null} indicates
a default encoding.

@throws UnsupportedEncodingException if {@code charsetName} is not supported."
      end

      operation 1703451 "setErrorManager"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newErrorManager" type class_ref 280219 // ErrorManager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the error manager for this handler.

@param newErrorManager
           the error manager to set.
@throws NullPointerException
            if {@code em} is {@code null}."
      end

      operation 1703579 "setFilter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFilter" type class_ref 280475 // Filter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the filter to be used by this handler.

@param newFilter
           the filter to set, may be {@code null}."
      end

      operation 1703707 "internalSetFormatter"
	package explicit_return_type "void"
	nparams 1
	  param inout name "newFormatter" type class_ref 280347 // Formatter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the formatter to be used by this handler. This internal method does
not check security.

@param newFormatter
           the formatter to set."
      end

      operation 1703835 "setFormatter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFormatter" type class_ref 280347 // Formatter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the formatter to be used by this handler.

@param newFormatter
           the formatter to set.
@throws NullPointerException
            if {@code newFormatter} is {@code null}."
      end

      operation 1703963 "setLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLevel" type class_ref 280091 // Level
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the logging level of the messages logged by this handler, levels
lower than this value will be dropped.

@param newLevel
           the logging level to set.
@throws NullPointerException
            if {@code newLevel} is {@code null}."
      end
    end

    class 280091 "Level"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "{@code Level} objects are used to indicate the level of logging. There are a
set of predefined logging levels, each associated with an integer value.
Enabling a certain logging level also enables all logging levels with larger
values.
<p>
The predefined levels in ascending order are FINEST, FINER, FINE, CONFIG,
INFO, WARNING, SEVERE. There are two additional predefined levels, which are
ALL and OFF. ALL indicates logging all messages, and OFF indicates logging no
messages."
      classrelation 491419 // <realization>
	relation 491419 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 491419 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 423963 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8176160795706313070L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 491547 // levels (<unidirectional association>)
	relation 491547 --->
	  a role_name "levels" init_value " new ArrayList<Level>(9)" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Level> ${name}${value};
"
	    classrelation_ref 491547 // levels (<unidirectional association>)
	  b parent class_ref 131483 // List
      end

      classrelation 491675 // OFF (<unidirectional association>)
	relation 491675 --->
	  a role_name "OFF" init_value " new Level(\"OFF\", Integer.MAX_VALUE)" class_relation const_relation public
	    comment "
The OFF level provides no logging messages.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 491675 // OFF (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 491803 // SEVERE (<unidirectional association>)
	relation 491803 --->
	  a role_name "SEVERE" init_value " new Level(\"SEVERE\", 1000)" class_relation const_relation public
	    comment "
The SEVERE level provides severe failure messages.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 491803 // SEVERE (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 491931 // WARNING (<unidirectional association>)
	relation 491931 --->
	  a role_name "WARNING" init_value " new Level(\"WARNING\", 900)" class_relation const_relation public
	    comment "
The WARNING level provides warnings.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 491931 // WARNING (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 492059 // INFO (<unidirectional association>)
	relation 492059 --->
	  a role_name "INFO" init_value " new Level(\"INFO\", 800)" class_relation const_relation public
	    comment "
The INFO level provides informative messages.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 492059 // INFO (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 492187 // CONFIG (<unidirectional association>)
	relation 492187 --->
	  a role_name "CONFIG" init_value " new Level(\"CONFIG\", 700)" class_relation const_relation public
	    comment "
The CONFIG level provides static configuration messages.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 492187 // CONFIG (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 492315 // FINE (<unidirectional association>)
	relation 492315 --->
	  a role_name "FINE" init_value " new Level(\"FINE\", 500)" class_relation const_relation public
	    comment "
The FINE level provides tracing messages.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 492315 // FINE (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 492443 // FINER (<unidirectional association>)
	relation 492443 --->
	  a role_name "FINER" init_value " new Level(\"FINER\", 400)" class_relation const_relation public
	    comment "
The FINER level provides more detailed tracing messages.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 492443 // FINER (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 492571 // FINEST (<unidirectional association>)
	relation 492571 --->
	  a role_name "FINEST" init_value " new Level(\"FINEST\", 300)" class_relation const_relation public
	    comment "
The FINEST level provides highly detailed tracing messages.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 492571 // FINEST (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 492699 // ALL (<unidirectional association>)
	relation 492699 --->
	  a role_name "ALL" init_value " new Level(\"ALL\", Integer.MIN_VALUE)" class_relation const_relation public
	    comment "
The ALL level provides all logging messages.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 492699 // ALL (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      operation 1710235 "parse"
	class_operation public return_type class_ref 280091 // Level
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses a level name into a {@code Level} object.

@param name
           the name of the desired {@code level}, which cannot be
           {@code null}.
@return the level with the specified name.
@throws NullPointerException
            if {@code name} is {@code null}.
@throws IllegalArgumentException
            if {@code name} is not valid."
      end

      classrelation 492827 // name (<unidirectional association>)
	relation 492827 --->
	  a role_name "name" const_relation private
	    comment "
The name of this Level.

@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 492827 // name (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 424091 "value"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The integer value indicating the level.

@serial
"
      end

      classrelation 492955 // resourceBundleName (<unidirectional association>)
	relation 492955 --->
	  a role_name "resourceBundleName" const_relation private
	    comment "
The name of the resource bundle used to localize the level name.

@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 492955 // resourceBundleName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 493083 // rb (<unidirectional association>)
	relation 493083 --->
	  a role_name "rb" private
	    comment "
The resource bundle associated with this level, used to localize the
level name.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 493083 // rb (<unidirectional association>)
	  b parent class_ref 246043 // ResourceBundle
      end

      operation 1710363 "Level"
	protected explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "level" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of {@code Level} taking the supplied name and
level value.

@param name
           the name of the level.
@param level
           an integer value indicating the level.
@throws NullPointerException
            if {@code name} is {@code null}."
      end

      operation 1710491 "Level"
	protected explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 3399692 // String
	  param in name "level" explicit_type "int"
	  param inout name "resourceBundleName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of {@code Level} taking the supplied name, level
value and resource bundle name.

@param name
           the name of the level.
@param level
           an integer value indicating the level.
@param resourceBundleName
           the name of the resource bundle to use.
@throws NullPointerException
            if {@code name} is {@code null}."
      end

      operation 1710619 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of this level.

@return this level's name."
      end

      operation 1710747 "getResourceBundleName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the resource bundle associated with this level.

@return the name of this level's resource bundle."
      end

      operation 1710875 "intValue"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the integer value indicating this level.

@return this level's integer value."
      end

      operation 1711003 "readResolve"
	private return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serialization helper method to maintain singletons and add any new
levels.

@return the resolved instance."
      end

      operation 1711131 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serialization helper to setup transient resource bundle instance.

@param in
           the input stream to read the instance data from.
@throws IOException
            if an IO error occurs.
@throws ClassNotFoundException
            if a class is not found."
      end

      operation 1711259 "getLocalizedName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the localized name of this level. The default locale is used. If no
resource bundle is associated with this level then the original level
name is returned.

@return the localized name of this level."
      end

      operation 1711387 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares two {@code Level} objects for equality. They are considered to
be equal if they have the same level value.

@param o
           the other object to compare this level to.
@return {@code true} if this object equals to the supplied object,
        {@code false} otherwise."
      end

      operation 1711515 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the hash code of this {@code Level} object.

@return this level's hash code."
      end

      operation 1711643 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representation of this {@code Level} object. In
this case, it is the level's name.

@return the string representation of this level."
      end
    end

    class 280219 "ErrorManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An error reporting facility for {@link Handler} implementations to record any
error that may happen during logging. {@code Handlers} should report errors
to an {@code ErrorManager}, instead of throwing exceptions, which would
interfere with the log issuer's execution."
      attribute 422043 "GENERIC_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The error code indicating a failure that does not fit in any of the
specific types of failures that follow.
"
      end

      attribute 422171 "WRITE_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The error code indicating a failure when writing to an output stream.
"
      end

      attribute 422299 "FLUSH_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The error code indicating a failure when flushing an output stream.
"
      end

      attribute 422427 "CLOSE_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The error code indicating a failure when closing an output stream.
"
      end

      attribute 422555 "OPEN_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The error code indicating a failure when opening an output stream.
"
      end

      attribute 422683 "FORMAT_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The error code indicating a failure when formatting the error messages.
"
      end

      classrelation 489755 // FAILURES (<unidirectional association>)
	relation 489755 --->
	  a role_name "FAILURES" multiplicity "[]" init_value " new String[] { \"GENERIC_FAILURE\",
            \"WRITE_FAILURE\", \"FLUSH_FAILURE\", \"CLOSE_FAILURE\", \"OPEN_FAILURE\",
            \"FORMAT_FAILURE\" }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 489755 // FAILURES (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 422811 "called"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "An indicator for determining if the error manager has been called at
least once before.
"
      end

      operation 1706267 "ErrorManager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of {@code ErrorManager}."
      end

      operation 1706395 "error"
	public explicit_return_type "void"
	nparams 3
	  param inout name "message" type class_ref 3399692 // String
	  param inout name "exception" type class_ref 132251 // Exception
	  param in name "errorCode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports an error using the given message, exception and error code. This
implementation will write out the message to {@link System#err} on the
first call and all subsequent calls are ignored. A subclass of this class
should override this method.

@param message
           the error message, which may be {@code null}.
@param exception
           the exception associated with the error, which may be
           {@code null}.
@param errorCode
           the error code that identifies the type of error; see the
           constant fields of this class for possible values."
      end
    end

    class 280347 "Formatter"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "{@code Formatter} objects are used to format {@link LogRecord} objects into a
string representation. Head and tail strings are sometimes used to wrap a set
of records. The {@code getHead} and {@code getTail} methods are used for this
purpose."
      operation 1709595 "Formatter"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code Formatter} object."
      end

      operation 1709723 "format"
	abstract public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "r" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a {@link LogRecord} object into a string representation. The
resulted string is usually localized and includes the message field of
the record.

@param r
           the log record to be formatted into a string.
@return the formatted string."
      end

      operation 1709851 "formatMessage"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "r" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats a {@code LogRecord} object into a localized string
representation. This is a convenience method for subclasses of {@code
Formatter}.
<p>
The message string is firstly localized using the {@code ResourceBundle}
object associated with the supplied {@code LogRecord}.
<p>
Notice : if message contains \"{0\", then java.text.MessageFormat is used.
Otherwise no formatting is performed.

@param r
           the log record to be formatted.
@return the string resulted from the formatting."
      end

      operation 1709979 "getHead"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "h" type class_ref 279963 // Handler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the head string used to wrap a set of log records. This base class
always returns an empty string.

@param h
           the target handler.
@return the head string used to wrap a set of log records, empty in this
        implementation."
      end

      operation 1710107 "getTail"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "h" type class_ref 279963 // Handler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the tail string used to wrap a set of log records. This base class
always returns the empty string.

@param h
           the target handler.
@return the tail string used to wrap a set of log records, empty in this
        implementation."
      end
    end

    class 280475 "Filter"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code Filter} provides a mechanism for exercising fine-grained control
over which records get logged."
      operation 1709467 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks {@code record} to determine if it should be logged.

@param record
           the {@link LogRecord} to be checked.
@return {@code true} if the supplied log record needs to be logged,
        {@code false} otherwise."
      end
    end

    class 280603 "LogRecord"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code LogRecord} object represents a logging request. It is passed between
the logging framework and individual logging handlers. Client applications
should not modify a {@code LogRecord} object that has been passed into the
logging framework.
<p>
The {@code LogRecord} class will infer the source method name and source
class name the first time they are accessed if the client application didn't
specify them explicitly. This automatic inference is based on the analysis of
the call stack and is not guaranteed to be precise. Client applications
should force the initialization of these two fields by calling
{@code getSourceClassName} or {@code getSourceMethodName} if they expect to
use them after passing the {@code LogRecord} object to another thread or
transmitting it over RMI."
      classrelation 496155 // <realization>
	relation 496155 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 496155 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 424603 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5372048053134512534L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 424731 "MAJOR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The major byte used in serialization."
      end

      attribute 424859 "MINOR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The minor byte used in serialization."
      end

      attribute 424987 "currentSequenceNumber"
	class_attribute private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Store the current value for the sequence number."
      end

      classrelation 496283 // currentThreadId (<unidirectional association>)
	relation 496283 --->
	  a role_name "currentThreadId" init_value " new ThreadLocal<Integer>()" class_relation private
	    comment " Store the id for each thread.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 496283 // currentThreadId (<unidirectional association>)
	  b parent class_ref 144539 // ThreadLocal
      end

      attribute 425115 "initThreadId"
	class_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The base id as the starting point for thread ID allocation."
      end

      classrelation 496411 // level (<unidirectional association>)
	relation 496411 --->
	  a role_name "level" private
	    comment "
The logging level.

@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 496411 // level (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      attribute 425243 "sequenceNumber"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The sequence number.

@serial
"
      end

      classrelation 496539 // sourceClassName (<unidirectional association>)
	relation 496539 --->
	  a role_name "sourceClassName" private
	    comment "
The name of the class that issued the logging call.

@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 496539 // sourceClassName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 496667 // sourceMethodName (<unidirectional association>)
	relation 496667 --->
	  a role_name "sourceMethodName" private
	    comment "
The name of the method that issued the logging call.

@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 496667 // sourceMethodName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 496795 // message (<unidirectional association>)
	relation 496795 --->
	  a role_name "message" private
	    comment "
The original message text.

@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 496795 // message (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 425371 "threadID"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The ID of the thread that issued the logging call.

@serial
"
      end

      attribute 425499 "millis"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The time that the event occurred, in milliseconds since 1970.

@serial
"
      end

      classrelation 496923 // thrown (<unidirectional association>)
	relation 496923 --->
	  a role_name "thrown" private
	    comment "
The associated {@code Throwable} object if any.

@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 496923 // thrown (<unidirectional association>)
	  b parent class_ref 134683 // Throwable
      end

      classrelation 497051 // loggerName (<unidirectional association>)
	relation 497051 --->
	  a role_name "loggerName" private
	    comment "
The name of the source logger.

@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 497051 // loggerName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 497179 // resourceBundleName (<unidirectional association>)
	relation 497179 --->
	  a role_name "resourceBundleName" private
	    comment "
The name of the resource bundle used to localize the log message.

@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 497179 // resourceBundleName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 497307 // resourceBundle (<unidirectional association>)
	relation 497307 --->
	  a role_name "resourceBundle" private
	    comment " The associated resource bundle if any.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 497307 // resourceBundle (<unidirectional association>)
	  b parent class_ref 246043 // ResourceBundle
      end

      classrelation 497435 // parameters (<unidirectional association>)
	relation 497435 --->
	  a role_name "parameters" multiplicity "[]" private
	    comment " The parameters.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 497435 // parameters (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      attribute 425627 "sourceInitialized"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " If the source method and source class has been initialized"
      end

      operation 1722011 "LogRecord"
	public explicit_return_type ""
	nparams 2
	  param inout name "level" type class_ref 280091 // Level
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code LogRecord} object using the supplied the logging
level and message. The millis property is set to the current time. The
sequence property is set to a new unique value, allocated in increasing
order within the VM. The thread ID is set to a unique value
for the current thread. All other properties are set to {@code null}.

@param level
           the logging level, may not be {@code null}.
@param msg
           the raw message.
@throws NullPointerException
            if {@code level} is {@code null}."
      end

      operation 1722139 "getLevel"
	public return_type class_ref 280091 // Level
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the logging level.

@return the logging level."
      end

      operation 1722267 "setLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "level" type class_ref 280091 // Level
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the logging level.

@param level
           the level to set.
@throws NullPointerException
            if {@code level} is {@code null}."
      end

      operation 1722395 "getLoggerName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the logger.

@return the logger name."
      end

      operation 1722523 "setLoggerName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "loggerName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the logger.

@param loggerName
           the logger name to set."
      end

      operation 1722651 "getMessage"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the raw message.

@return the raw message, may be {@code null}."
      end

      operation 1722779 "setMessage"
	public explicit_return_type "void"
	nparams 1
	  param inout name "message" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the raw message. When this record is formatted by a logger that has
a localization resource bundle that contains an entry for {@code message},
then the raw message is replaced with its localized version.

@param message
           the raw message to set, may be {@code null}."
      end

      operation 1722907 "getMillis"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the time when this event occurred, in milliseconds since 1970.

@return the time when this event occurred, in milliseconds since 1970."
      end

      operation 1723035 "setMillis"
	public explicit_return_type "void"
	nparams 1
	  param in name "millis" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time when this event occurred, in milliseconds since 1970.

@param millis
           the time when this event occurred, in milliseconds since 1970."
      end

      operation 1723163 "getParameters"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the parameters.

@return the array of parameters or {@code null} if there are no
        parameters."
      end

      operation 1723291 "setParameters"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parameters" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the parameters.

@param parameters
           the array of parameters to set, may be {@code null}."
      end

      operation 1723419 "getResourceBundle"
	public return_type class_ref 246043 // ResourceBundle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the resource bundle used to localize the raw message during
formatting.

@return the associated resource bundle, {@code null} if none is
        available or the message is not localizable."
      end

      operation 1723547 "setResourceBundle"
	public explicit_return_type "void"
	nparams 1
	  param inout name "resourceBundle" type class_ref 246043 // ResourceBundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the resource bundle used to localize the raw message during
formatting.

@param resourceBundle
           the resource bundle to set, may be {@code null}."
      end

      operation 1723675 "getResourceBundleName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the resource bundle.

@return the name of the resource bundle, {@code null} if none is
        available or the message is not localizable."
      end

      operation 1723803 "setResourceBundleName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "resourceBundleName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the resource bundle.

@param resourceBundleName
           the name of the resource bundle to set."
      end

      operation 1723931 "getSequenceNumber"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the sequence number.

@return the sequence number."
      end

      operation 1724059 "setSequenceNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "sequenceNumber" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the sequence number. It is usually not necessary to call this method
to change the sequence number because the number is allocated when this
instance is constructed.

@param sequenceNumber
           the sequence number to set."
      end

      operation 1724187 "getSourceClassName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the class that is the source of this log record. This
information can be changed, may be {@code null} and is untrusted.

@return the name of the source class of this log record (possiblity {@code null})"
      end

      operation 1724315 "initSource"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Init the sourceClass and sourceMethod fields."
      end

      operation 1724443 "setSourceClassName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sourceClassName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the class that is the source of this log record.

@param sourceClassName
           the name of the source class of this log record, may be
           {@code null}."
      end

      operation 1724571 "getSourceMethodName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the method that is the source of this log record.

@return the name of the source method of this log record."
      end

      operation 1724699 "setSourceMethodName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sourceMethodName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the method that is the source of this log record.

@param sourceMethodName
           the name of the source method of this log record, may be
           {@code null}."
      end

      operation 1724827 "getThreadID"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a unique ID of the thread originating the log record. Every thread
becomes a different ID.
<p>
Notice : the ID doesn't necessary map the OS thread ID
</p>

@return the ID of the thread originating this log record."
      end

      operation 1724955 "setThreadID"
	public explicit_return_type "void"
	nparams 1
	  param in name "threadID" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the ID of the thread originating this log record.

@param threadID
           the new ID of the thread originating this log record."
      end

      operation 1725083 "getThrown"
	public return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code Throwable} object associated with this log record.

@return the {@code Throwable} object associated with this log record."
      end

      operation 1725211 "setThrown"
	public explicit_return_type "void"
	nparams 1
	  param inout name "thrown" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code Throwable} object associated with this log record.

@param thrown
           the new {@code Throwable} object to associate with this log
           record."
      end

      operation 1725339 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customized serialization."
      end

      operation 1725467 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customized deserialization."
      end
    end

    class 280731 "FileHandler"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code FileHandler} writes logging records into a specified file or a
rotating set of files.
<p>
When a set of files is used and a given amount of data has been written to
one file, then this file is closed and another file is opened. The name of
these files are generated by given name pattern, see below for details.
When the files have all been filled the Handler returns to the first and goes
through the set again.
<p>
By default, the I/O buffering mechanism is enabled, but when each log record
is complete, it is flushed out.
<p>
{@code XMLFormatter} is the default formatter for {@code FileHandler}.
<p>
{@code FileHandler} reads the following {@code LogManager} properties for
initialization; if a property is not defined or has an invalid value, a
default value is used.
<ul>
<li>java.util.logging.FileHandler.append specifies whether this
{@code FileHandler} should append onto existing files, defaults to
{@code false}.</li>
<li>java.util.logging.FileHandler.count specifies how many output files to
rotate, defaults to 1.</li>
<li>java.util.logging.FileHandler.filter specifies the {@code Filter} class
name, defaults to no {@code Filter}.</li>
<li>java.util.logging.FileHandler.formatter specifies the {@code Formatter}
class, defaults to {@code java.util.logging.XMLFormatter}.</li>
<li>java.util.logging.FileHandler.encoding specifies the character set
encoding name, defaults to the default platform encoding.</li>
<li>java.util.logging.FileHandler.level specifies the level for this
{@code Handler}, defaults to {@code Level.ALL}.</li>
<li>java.util.logging.FileHandler.limit specifies the maximum number of
bytes to write to any one file, defaults to zero, which means no limit.</li>
<li>java.util.logging.FileHandler.pattern specifies name pattern for the
output files. See below for details. Defaults to \"%h/java%u.log\".</li>
</ul>
<p>
Name pattern is a string that may include some special substrings, which will
be replaced to generate output files:
<ul>
<li>\"/\" represents the local pathname separator</li>
<li>\"%g\" represents the generation number to distinguish rotated logs</li>
<li>\"%h\" represents the home directory of the current user, which is
specified by \"user.home\" system property</li>
<li>\"%t\" represents the system's temporary directory</li>
<li>\"%u\" represents a unique number to resolve conflicts</li>
<li>\"%%\" represents the percent sign character '%'</li>
</ul>
<p>
Normally, the generation numbers are not larger than the given file count and
follow the sequence 0, 1, 2.... If the file count is larger than one, but the
generation field(\"%g\") has not been specified in the pattern, then the
generation number after a dot will be added to the end of the file name.
<p>
The \"%u\" unique field is used to avoid conflicts and is set to 0 at first. If
one {@code FileHandler} tries to open the filename which is currently in use
by another process, it will repeatedly increment the unique number field and
try again. If the \"%u\" component has not been included in the file name
pattern and some contention on a file does occur, then a unique numerical
value will be added to the end of the filename in question immediately to the
right of a dot. The generation of unique IDs for avoiding conflicts is only
guaranteed to work reliably when using a local disk file system."
      classrelation 489883 // <generalisation>
	relation 489883 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 489883 // <generalisation>
	  b parent class_ref 279835 // StreamHandler
      end

      classrelation 490011 // LCK_EXT (<unidirectional association>)
	relation 490011 --->
	  a role_name "LCK_EXT" init_value " \".lck\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 490011 // LCK_EXT (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 422939 "DEFAULT_COUNT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 423067 "DEFAULT_LIMIT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 423195 "DEFAULT_APPEND"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 490139 // DEFAULT_PATTERN (<unidirectional association>)
	relation 490139 --->
	  a role_name "DEFAULT_PATTERN" init_value " \"%h/java%u.log\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 490139 // DEFAULT_PATTERN (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 490267 // allLocks (<unidirectional association>)
	relation 490267 --->
	  a role_name "allLocks" init_value " new Hashtable<String, FileLock>()" class_relation const_relation private
	    comment " maintain all file locks hold by this process
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, FileLock> ${name}${value};
"
	    classrelation_ref 490267 // allLocks (<unidirectional association>)
	  b parent class_ref 164379 // Hashtable
      end

      attribute 423323 "count"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the count of files which the output cycle through"
      end

      attribute 423451 "limit"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the size limitation in byte of log file"
      end

      attribute 423579 "append"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " whether the FileHandler should open a existing file for output in append
 mode"
      end

      classrelation 490395 // pattern (<unidirectional association>)
	relation 490395 --->
	  a role_name "pattern" private
	    comment " the pattern for output file name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 490395 // pattern (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 490523 // manager (<unidirectional association>)
	relation 490523 --->
	  a role_name "manager" private
	    comment " maintain a LogManager instance for convenience
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 490523 // manager (<unidirectional association>)
	  b parent class_ref 280859 // LogManager
      end

      class 280987 "MeasureOutputStream"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 491163 // <generalisation>
	  relation 491163 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 491163 // <generalisation>
	    b parent class_ref 132635 // OutputStream
	end

	classrelation 491291 // wrapped (<unidirectional association>)
	  relation 491291 --->
	    a role_name "wrapped" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 491291 // wrapped (<unidirectional association>)
	    b parent class_ref 132635 // OutputStream
	end

	attribute 423835 "length"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1708443 "MeasureOutputStream"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "stream" type class_ref 132635 // OutputStream
	    param in name "currentLength" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1708571 "MeasureOutputStream"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "stream" type class_ref 132635 // OutputStream
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1708699 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "oneByte" explicit_type "int"
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1708827 "write"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1708955 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1709083 "flush"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1709211 "getLength"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1709339 "setLength"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "newLength" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 490651 // output (<unidirectional association>)
	relation 490651 --->
	  a role_name "output" private
	    comment " output stream, which can measure the output file length
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 490651 // output (<unidirectional association>)
	  b parent class_ref 280987 // MeasureOutputStream
      end

      classrelation 490779 // files (<unidirectional association>)
	relation 490779 --->
	  a role_name "files" multiplicity "[]" private
	    comment " used output file
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 490779 // files (<unidirectional association>)
	  b parent class_ref 135579 // File
      end

      classrelation 490907 // lock (<unidirectional association>)
	relation 490907 --->
	  a role_name "lock" init_value " null" package
	    comment " output file lock
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 490907 // lock (<unidirectional association>)
	  b parent class_ref 184859 // FileLock
      end

      classrelation 491035 // fileName (<unidirectional association>)
	relation 491035 --->
	  a role_name "fileName" init_value " null" package
	    comment " current output file name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 491035 // fileName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 423707 "uniqueID"
	package explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " current unique ID"
      end

      operation 1706523 "FileHandler"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a {@code FileHandler} using {@code LogManager} properties or
their default value.

@throws IOException
            if any I/O error occurs."
      end

      operation 1706651 "init"
	private explicit_return_type "void"
	nparams 4
	  param inout name "p" type class_ref 3399692 // String
	  param inout name "a" type class_ref 130203 // Boolean
	  param inout name "l" type class_ref 130075 // Integer
	  param inout name "c" type class_ref 130075 // Integer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " init properties"
      end

      operation 1706779 "initOutputFiles"
	private explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 135707 // FileNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1706907 "initProperties"
	private explicit_return_type "void"
	nparams 4
	  param inout name "p" type class_ref 3399692 // String
	  param inout name "a" type class_ref 130203 // Boolean
	  param inout name "l" type class_ref 130075 // Integer
	  param inout name "c" type class_ref 130075 // Integer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1707035 "findNextGeneration"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1707163 "parseFileName"
	private return_type class_ref 3399692 // String
	nparams 1
	  param in name "gen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transform the pattern to the valid file name, replacing any patterns, and
applying generation and uniqueID if present.

@param gen
           generation of this file
@return transformed filename ready for use."
      end

      operation 1707291 "getBooleanProperty"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "defaultValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get boolean LogManager property, if invalid value got, using default
 value"
      end

      operation 1707419 "getStringProperty"
	private return_type class_ref 3399692 // String
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param inout name "defaultValue" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get String LogManager property, if invalid value got, using default value"
      end

      operation 1707547 "getIntProperty"
	private explicit_return_type "int"
	nparams 2
	  param inout name "key" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get int LogManager property, if invalid value got, using default value"
      end

      operation 1707675 "FileHandler"
	public explicit_return_type ""
	nparams 1
	  param inout name "pattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileHandler}. The given name pattern is used as
output filename, the file limit is set to zero (no limit), the file count
is set to one; the remaining configuration is done using
{@code LogManager} properties or their default values. This handler
writes to only one file with no size limit.

@param pattern
           the name pattern for the output file.
@throws IOException
            if any I/O error occurs.
@throws IllegalArgumentException
            if the pattern is empty.
@throws NullPointerException
            if the pattern is {@code null}."
      end

      operation 1707803 "FileHandler"
	public explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 3399692 // String
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new {@code FileHandler}. The given name pattern is used as
output filename, the file limit is set to zero (no limit), the file count
is initialized to one and the value of {@code append} becomes the new
instance's append mode. The remaining configuration is done using
{@code LogManager} properties. This handler writes to only one file
with no size limit.

@param pattern
           the name pattern for the output file.
@param append
           the append mode.
@throws IOException
            if any I/O error occurs.
@throws IllegalArgumentException
            if {@code pattern} is empty.
@throws NullPointerException
            if {@code pattern} is {@code null}."
      end

      operation 1707931 "FileHandler"
	public explicit_return_type ""
	nparams 3
	  param inout name "pattern" type class_ref 3399692 // String
	  param in name "limit" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new {@code FileHandler}. The given name pattern is used as
output filename, the maximum file size is set to {@code limit} and the
file count is initialized to {@code count}. The remaining configuration
is done using {@code LogManager} properties. This handler is configured
to write to a rotating set of count files, when the limit of bytes has
been written to one output file, another file will be opened instead.

@param pattern
           the name pattern for the output file.
@param limit
           the data amount limit in bytes of one output file, can not be
           negative.
@param count
           the maximum number of files to use, can not be less than one.
@throws IOException
            if any I/O error occurs.
@throws IllegalArgumentException
            if {@code pattern} is empty, {@code limit < 0} or
            {@code count < 1}.
@throws NullPointerException
            if {@code pattern} is {@code null}."
      end

      operation 1708059 "FileHandler"
	public explicit_return_type ""
	nparams 4
	  param inout name "pattern" type class_ref 3399692 // String
	  param in name "limit" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new {@code FileHandler}. The given name pattern is used as
output filename, the maximum file size is set to {@code limit}, the file
count is initialized to {@code count} and the append mode is set to
{@code append}. The remaining configuration is done using
{@code LogManager} properties. This handler is configured to write to a
rotating set of count files, when the limit of bytes has been written to
one output file, another file will be opened instead.

@param pattern
           the name pattern for the output file.
@param limit
           the data amount limit in bytes of one output file, can not be
           negative.
@param count
           the maximum number of files to use, can not be less than one.
@param append
           the append mode.
@throws IOException
            if any I/O error occurs.
@throws IllegalArgumentException
            if {@code pattern} is empty, {@code limit < 0} or
            {@code count < 1}.
@throws NullPointerException
            if {@code pattern} is {@code null}."
      end

      operation 1708187 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flushes and closes all opened files."
      end

      operation 1708315 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Publish a {@code LogRecord}.

@param record
           the log record to publish."
      end
    end

    class 280859 "LogManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "{@code LogManager} is used to maintain configuration properties of the
logging framework, and to manage a hierarchical namespace of all named
{@code Logger} objects.
<p>
There is only one global {@code LogManager} instance in the
application, which can be get by calling static method
{@link #getLogManager()}. This instance is created and
initialized during class initialization and cannot be changed.
<p>
The {@code LogManager} class can be specified by
java.util.logging.manager system property, if the property is unavailable or
invalid, the default class {@link java.util.logging.LogManager} will
be used.
<p>
On initialization, {@code LogManager} reads its configuration from a
properties file, which by default is the \"lib/logging.properties\" in the JRE
directory.
<p>
However, two optional system properties can be used to customize the initial
configuration process of {@code LogManager}.
<ul>
<li>\"java.util.logging.config.class\"</li>
<li>\"java.util.logging.config.file\"</li>
</ul>
<p>
These two properties can be set in three ways, by the Preferences API, by the
\"java\" command line property definitions, or by system property definitions
passed to JNI_CreateJavaVM.
<p>
The \"java.util.logging.config.class\" should specifies a class name. If it is
set, this given class will be loaded and instantiated during
{@code LogManager} initialization, so that this object's default
constructor can read the initial configuration and define properties for
{@code LogManager}.
<p>
If \"java.util.logging.config.class\" property is not set, or it is invalid, or
some exception is thrown during the instantiation, then the
\"java.util.logging.config.file\" system property can be used to specify a
properties file. The {@code LogManager} will read initial
configuration from this file.
<p>
If neither of these properties is defined, or some exception is thrown
during these two properties using, the {@code LogManager} will read
its initial configuration from default properties file, as described above.
<p>
The global logging properties may include:
<ul>
<li>\"handlers\". This property's values should be a list of class names for
handler classes separated by whitespace, these classes must be subclasses of
{@code Handler} and each must have a default constructor, these
classes will be loaded, instantiated and registered as handlers on the root
{@code Logger} (the {@code Logger} named \"\"). These
{@code Handler}s maybe initialized lazily.</li>
<li>\"config\". The property defines a list of class names separated by
whitespace. Each class must have a default constructor, in which it can
update the logging configuration, such as levels, handlers, or filters for
some logger, etc. These classes will be loaded and instantiated during
{@code LogManager} configuration</li>
</ul>
<p>
This class, together with any handler and configuration classes associated
with it, <b>must</b> be loaded from the system classpath when
{@code LogManager} configuration occurs.
<p>
Besides global properties, the properties for loggers and Handlers can be
specified in the property files. The names of these properties will start
with the complete dot separated names for the handlers or loggers.
<p>
In the {@code LogManager}'s hierarchical namespace,
{@code Loggers} are organized based on their dot separated names. For
example, \"x.y.z\" is child of \"x.y\".
<p>
Levels for {@code Loggers} can be defined by properties whose name end
with \".level\". Thus \"alogger.level\" defines a level for the logger named as
\"alogger\" and for all its children in the naming hierarchy. Log levels
properties are read and applied in the same order as they are specified in
the property file. The root logger's level can be defined by the property
named as \".level\".
<p>
This class is thread safe. It is an error to synchronize on a
{@code LogManager} while synchronized on a {@code Logger}."
      classrelation 495387 // perm (<unidirectional association>)
	relation 495387 --->
	  a role_name "perm" init_value " new LoggingPermission(\"control\", null)" class_relation const_relation private
	    comment " The shared logging permission. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 495387 // perm (<unidirectional association>)
	  b parent class_ref 281371 // LoggingPermission
      end

      classrelation 495515 // manager (<unidirectional association>)
	relation 495515 --->
	  a role_name "manager" class_relation package
	    comment " The singleton instance. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 495515 // manager (<unidirectional association>)
	  b parent class_ref 280859 // LogManager
      end

      classrelation 495643 // LOGGING_MXBEAN_NAME (<unidirectional association>)
	relation 495643 --->
	  a role_name "LOGGING_MXBEAN_NAME" init_value " \"java.util.logging:type=Logging\"" class_relation const_relation public
	    comment "
The {@code String} value of the {@link LoggingMXBean}'s ObjectName.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 495643 // LOGGING_MXBEAN_NAME (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1719579 "getLoggingMXBean"
	class_operation public return_type class_ref 281243 // LoggingMXBean
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the {@code LoggingMXBean} instance. this implementation always throws
an UnsupportedOperationException.

@return the {@code LoggingMXBean} instance"
      end

      classrelation 495771 // loggers (<unidirectional association>)
	relation 495771 --->
	  a role_name "loggers" private
	    comment " FIXME: use weak reference to avoid heap memory leak
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Logger> ${name}${value};
"
	    classrelation_ref 495771 // loggers (<unidirectional association>)
	  b parent class_ref 164379 // Hashtable
      end

      classrelation 495899 // props (<unidirectional association>)
	relation 495899 --->
	  a role_name "props" private
	    comment " The configuration properties 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 495899 // props (<unidirectional association>)
	  b parent class_ref 160027 // Properties
      end

      classrelation 496027 // listeners (<unidirectional association>)
	relation 496027 --->
	  a role_name "listeners" private
	    comment " the property change listener 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 496027 // listeners (<unidirectional association>)
	  b parent class_ref 131227 // PropertyChangeSupport
      end

      extra_member 135195 "initialization"
	
	cpp "" ""
	java "  static {
        // init LogManager singleton instance
        String className = System.getProperty(\"java.util.logging.manager\");
        if (className != null) {
            manager = (LogManager) getInstanceByClass(className);
        }
        if (manager == null) {
            manager = new LogManager();
        }

        // read configuration
        try {
            manager.readConfiguration();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // if global logger has been initialized, set root as its parent
        Logger root = new Logger(\"\", null);
        root.setLevel(Level.INFO);
        Logger.global.setParent(root);

        manager.addLogger(root);
        manager.addLogger(Logger.global);
    }"
	php ""
	python ""
	idl ""
      end

      operation 1719707 "LogManager"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor. This is not public because there should be only one
{@code LogManager} instance, which can be get by
{@code LogManager.getLogManager()}. This is protected so that
application can subclass the object."
      end

      operation 1719835 "checkAccess"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does nothing."
      end

      operation 1719963 "addLogger"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "logger" type class_ref 281115 // Logger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a given logger into the hierarchical namespace. The
{@code Logger.addLogger()} factory methods call this method to add newly
created Logger. This returns false if a logger with the given name has
existed in the namespace
<p>
Note that the {@code LogManager} may only retain weak references to
registered loggers. In order to prevent {@code Logger} objects from being
unexpectedly garbage collected it is necessary for <i>applications</i>
to maintain references to them.
</p>

@param logger
           the logger to be added.
@return true if the given logger is added into the namespace
        successfully, false if the given logger exists in the namespace."
      end

      operation 1720091 "addToFamilyTree"
	private explicit_return_type "void"
	nparams 2
	  param inout name "logger" type class_ref 281115 // Logger
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1720219 "getLogger"
	public return_type class_ref 281115 // Logger
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the logger with the given name.

@param name
           name of logger
@return logger with given name, or {@code null} if nothing is found."
      end

      operation 1720347 "getLoggerNames"
	public return_type class_ref 145947 // Enumeration
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a {@code Enumeration} of all registered logger names.

@return enumeration of registered logger names"
      end

      operation 1720475 "getLogManager"
	class_operation public return_type class_ref 280859 // LogManager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the global {@code LogManager} instance.

@return the global {@code LogManager} instance"
      end

      operation 1720603 "getProperty"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of property with given name.

@param name
           the name of property
@return the value of property"
      end

      operation 1720731 "readConfiguration"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Re-initialize the properties and configuration. The initialization
process is same as the {@code LogManager} instantiation.
<p>
Notice : No {@code PropertyChangeEvent} are fired.
</p>

@throws IOException
            if any IO related problems happened."
      end

      operation 1720859 "getInstanceByClass"
	class_operation package return_type class_ref 3401484 // Object
	nparams 1
	  param in name "className" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " use SystemClassLoader to load class from system classpath"
      end

      operation 1720987 "readConfigurationImpl"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ins" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " actual initialization process from a given input stream"
      end

      operation 1721115 "readConfiguration"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ins" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Re-initialize the properties and configuration from the given
{@code InputStream}
<p>
Notice : No {@code PropertyChangeEvent} are fired.
</p>

@param ins
           the input stream
@throws IOException
            if any IO related problems happened."
      end

      operation 1721243 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset configuration.

<p>All handlers are closed and removed from any named loggers. All loggers'
level is set to null, except the root logger's level is set to
{@code Level.INFO}."
      end

      operation 1721371 "addPropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 130715 // PropertyChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a {@code PropertyChangeListener}, which will be invoked when
the properties are reread.

@param l
           the {@code PropertyChangeListener} to be added."
      end

      operation 1721499 "removePropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 130715 // PropertyChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a {@code PropertyChangeListener}, do nothing if the given
listener is not found.

@param l
           the {@code PropertyChangeListener} to be removed."
      end

      operation 1721627 "getOrCreate"
	package return_type class_ref 281115 // Logger
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "resourceBundleName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a named logger associated with the supplied resource bundle.

@param resourceBundleName the resource bundle to associate, or null for
     no associated resource bundle."
      end

      operation 1721755 "setParent"
	package explicit_return_type "void"
	nparams 2
	  param inout name "logger" type class_ref 281115 // Logger
	  param inout name "newParent" type class_ref 281115 // Logger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the parent of this logger in the namespace. Callers must first
{@link #checkAccess() check security}.

@param newParent
           the parent logger to set."
      end

      operation 1721883 "setLevelRecursively"
	package explicit_return_type "void"
	nparams 2
	  param inout name "logger" type class_ref 281115 // Logger
	  param inout name "newLevel" type class_ref 280091 // Level
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the level on {@code logger} to {@code newLevel}. Any child loggers
currently inheriting their level from {@code logger} will be updated
recursively.

@param newLevel the new minimum logging threshold. If null, the logger's
     parent level will be used; or {@code Level.INFO} for loggers with no
     parent."
      end
    end

    class 281115 "Logger"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Loggers are used to log records to a variety of destinations such as log files or
the console. They use instances of {@link Handler} to actually do the destination-specific
operations.

<p>Client applications can get named loggers by calling the {@code getLogger}
methods. They can also get anonymous loggers by calling the
{@code getAnonymousLogger} methods. Named loggers are organized in a
namespace hierarchy managed by a log manager. The naming convention is
usually the Java package naming convention. Anonymous loggers do not belong to any namespace.

<p>Developers should use named loggers to enable logging to be controlled on a
per-{@code Logger} granularity. The recommended idiom is to create and assign the logger to
a {@code static final} field. This ensures that there's always a strong reference to the logger,
preventing it from being garbage collected. In particular, {@link LogManager#addLogger(Logger)}
will <i>not</i> keep your logger live.

<p>Loggers \"inherit\" log level setting from their parent if their own level is
set to {@code null}. This is also true for the resource bundle. The logger's
resource bundle is used to localize the log messages if no resource bundle
name is given when a log method is called. If {@code getUseParentHandlers()}
returns {@code true}, loggers also inherit their parent's handlers. In this
context, \"inherit\" only means that \"behavior\" is inherited. The internal
field values will not change, for example, {@code getLevel()} still returns
{@code null}.
<p>
When loading a given resource bundle, the logger first tries to use the
context {@code ClassLoader}. If that fails, it tries the system {@code ClassLoader}. And if
that still fails, it searches up the class stack and uses each class's
{@code ClassLoader} to try to locate the resource bundle.
<p>
Some log methods accept log requests that do not specify the source class and
source method. In these cases, the logging framework will automatically infer
the calling class and method, but this is not guaranteed to be accurate.
<p>
Once a {@code LogRecord} object has been passed into the logging framework,
it is owned by the logging framework and the client applications should not
use it any longer.
<p>
All methods of this class are thread-safe.

@see LogManager"
      classrelation 493211 // GENERAL_LOG_HANDLER (<unidirectional association>)
	relation 493211 --->
	  a role_name "GENERAL_LOG_HANDLER" init_value " new DalvikLogHandler() {
        public void publish(Logger source, String tag, Level level, String message) {
            LogRecord record = new LogRecord(level, message);
            record.setLoggerName(source.name);
            source.setResourceBundle(record);
            source.log(record);
        }
    }" class_relation const_relation private
	    comment " A handler for use when no handler optimization is possible. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 493211 // GENERAL_LOG_HANDLER (<unidirectional association>)
	  b parent class_ref 3574540 // DalvikLogHandler
      end

      classrelation 493339 // GLOBAL_LOGGER_NAME (<unidirectional association>)
	relation 493339 --->
	  a role_name "GLOBAL_LOGGER_NAME" init_value " \"global\"" class_relation const_relation public
	    comment "
The name of the global logger. Before using this, see the discussion of how to use
{@code Logger} in the class documentation.
@since 1.6

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 493339 // GLOBAL_LOGGER_NAME (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 493467 // global (<unidirectional association>)
	relation 493467 --->
	  a role_name "global" init_value " new Logger(GLOBAL_LOGGER_NAME, null)" class_relation const_relation public
	    comment "
The global logger is provided as convenience for casual use.
@deprecated deadlock-prone. Use {@code Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)} as
a direct replacement, but see the discussion of how to use {@code Logger} in the class
documentation.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Deprecated
"
	    classrelation_ref 493467 // global (<unidirectional association>)
	  b parent class_ref 281115 // Logger
      end

      classrelation 493595 // EMPTY_HANDLERS_ARRAY (<unidirectional association>)
	relation 493595 --->
	  a role_name "EMPTY_HANDLERS_ARRAY" multiplicity "[]" init_value " new Handler[0]" class_relation const_relation private
	    comment "
When converting the concurrent collection of handlers to an array, we
always pass a zero-length array to avoid size miscalculations. Passing
properly-sized arrays is non-atomic, and risks a null element in the
result.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 493595 // EMPTY_HANDLERS_ARRAY (<unidirectional association>)
	  b parent class_ref 279963 // Handler
      end

      classrelation 493723 // name (<unidirectional association>)
	relation 493723 --->
	  a role_name "name" volatile private
	    comment " The name of this logger. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 493723 // name (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 493851 // parent (<unidirectional association>)
	relation 493851 --->
	  a role_name "parent" package
	    comment " The parent logger of this logger. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 493851 // parent (<unidirectional association>)
	  b parent class_ref 281115 // Logger
      end

      classrelation 493979 // levelObjVal (<unidirectional association>)
	relation 493979 --->
	  a role_name "levelObjVal" volatile package
	    comment " The logging level of this logger, or null if none is set. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 493979 // levelObjVal (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      attribute 424219 "levelIntVal"
	volatile package explicit_type "int"
	init_value " Level.INFO.intValue()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The effective logging level of this logger. In order of preference this
is the first applicable of:
<ol>
<li>the int value of this logger's {@link #levelObjVal}
<li>the logging level of the parent
<li>the default level ({@link Level#INFO})
</ol>
"
      end

      classrelation 494107 // filter (<unidirectional association>)
	relation 494107 --->
	  a role_name "filter" private
	    comment " The filter. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 494107 // filter (<unidirectional association>)
	  b parent class_ref 280475 // Filter
      end

      classrelation 494235 // resourceBundleName (<unidirectional association>)
	relation 494235 --->
	  a role_name "resourceBundleName" volatile private
	    comment "
The resource bundle used to localize logging messages. If null, no
localization will be performed.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 494235 // resourceBundleName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 494363 // resourceBundle (<unidirectional association>)
	relation 494363 --->
	  a role_name "resourceBundle" volatile private
	    comment " The loaded resource bundle according to the specified name. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 494363 // resourceBundle (<unidirectional association>)
	  b parent class_ref 246043 // ResourceBundle
      end

      classrelation 494491 // handlers (<unidirectional association>)
	relation 494491 --->
	  a role_name "handlers" init_value " new CopyOnWriteArrayList<Handler>()" const_relation private
	    comment "
The handlers attached to this logger. Eagerly initialized and
concurrently modified.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Handler> ${name}${value};
"
	    classrelation_ref 494491 // handlers (<unidirectional association>)
	  b parent class_ref 131483 // List
      end

      attribute 424347 "notifyParentHandlers"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " True to notify the parent's handlers of each log message. "
      end

      attribute 424475 "isNamed"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates whether this logger is named. Only {@link #getAnonymousLogger
anonymous loggers} are unnamed.
"
      end

      classrelation 494619 // children (<unidirectional association>)
	relation 494619 --->
	  a role_name "children" init_value " new ArrayList<Logger>()" const_relation package
	    comment "
Child loggers. Should be accessed only while synchronized on {@code
LogManager.getLogManager()}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Logger> ${name}${value};
"
	    classrelation_ref 494619 // children (<unidirectional association>)
	  b parent class_ref 131483 // List
      end

      classrelation 494747 // androidTag (<unidirectional association>)
	relation 494747 --->
	  a role_name "androidTag" const_relation private
	    comment " the tag used for optimized logging. Derived from the logger name. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 494747 // androidTag (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 494875 // dalvikLogHandler (<unidirectional association>)
	relation 494875 --->
	  a role_name "dalvikLogHandler" init_value " GENERAL_LOG_HANDLER" volatile private
	    comment " Handler delegate for either optimized or standard logging. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 494875 // dalvikLogHandler (<unidirectional association>)
	  b parent class_ref 3574540 // DalvikLogHandler
      end

      operation 1711771 "updateDalvikLogHandler"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "We've optimized for the common case: logging to a single handler that
implements {@link DalvikLogHandler}. This is how Android framework
applications are configured by default.

<p>This optimization has been measured to show a 2.75x improvement in
throughput in the common case: 154ns vs. 56ns per message on a Cortex-A8.
Direct use of {@code android.util.Log} takes 29ns per message.

<p>Each time the handler configuration changes, either directly or
indirectly, it's necessary to either turn on or off this optimization.
When the optimization is off, {@link #dalvikLogHandler} is assigned to
{@link #GENERAL_LOG_HANDLER} which can satisfy arbitrary configuration.
When the optimization is possible, {@link #dalvikLogHandler} is assigned
to the user's efficient implementation. In pratice this is usually the
{@code com.android.internal.logging.AndroidHandler}."
      end

      operation 1711899 "Logger"
	protected explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "resourceBundleName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code Logger} object with the supplied name and resource
bundle name; {@code notifiyParentHandlers} is set to {@code true}.
<p>
Notice : Loggers use a naming hierarchy. Thus \"z.x.y\" is a child of \"z.x\".

@param name
           the name of this logger, may be {@code null} for anonymous
           loggers.
@param resourceBundleName
           the name of the resource bundle used to localize logging
           messages, may be {@code null}.
@throws MissingResourceException
            if the specified resource bundle can not be loaded."
      end

      operation 1712027 "loadResourceBundle"
	class_operation package return_type class_ref 246043 // ResourceBundle
	nparams 1
	  param inout name "resourceBundleName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the specified resource bundle, use privileged code.

@param resourceBundleName
           the name of the resource bundle to load, cannot be {@code null}.
@return the loaded resource bundle.
@throws MissingResourceException
            if the specified resource bundle can not be loaded."
      end

      operation 1712155 "getAnonymousLogger"
	class_operation public return_type class_ref 281115 // Logger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an anonymous logger to use internally in a thread. Anonymous loggers
are not registered in the log manager's namespace. No security checks
will be performed when updating an anonymous logger's control settings.
<p>
The anonymous loggers' parent is set to be the root logger. This way it
inherits the default logging level and handlers from the root logger.

@return a new instance of anonymous logger."
      end

      operation 1712283 "getAnonymousLogger"
	class_operation public return_type class_ref 281115 // Logger
	nparams 1
	  param inout name "resourceBundleName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an anonymous logger to use internally in a thread. Anonymous loggers
are not registered in the log manager's namespace. No security checks
will be performed when updating an anonymous logger's control settings.
<p>
The anonymous loggers' parent is set to be the root logger. This way it
inherits default logging level and handlers from the root logger.

@param resourceBundleName
           the name of the resource bundle used to localize log messages.
@return a new instance of anonymous logger.
@throws MissingResourceException
            if the specified resource bundle can not be loaded."
      end

      operation 1712411 "initResourceBundle"
	private explicit_return_type "void"
	nparams 1
	  param inout name "resourceBundleName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this logger's resource bundle.

@throws IllegalArgumentException if this logger's resource bundle already
     exists and is different from the resource bundle specified."
      end

      operation 1712539 "getLogger"
	class_operation public return_type class_ref 281115 // Logger
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a named logger. The returned logger may already exist or may be
newly created. In the latter case, its level will be set to the
configured level according to the {@code LogManager}'s properties.

@param name
           the name of the logger to get, cannot be {@code null}.
@return a named logger.
@throws MissingResourceException
            If the specified resource bundle can not be loaded."
      end

      operation 1712667 "getLogger"
	class_operation public return_type class_ref 281115 // Logger
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "resourceBundleName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a named logger associated with the supplied resource bundle. The
resource bundle will be used to localize logging messages.

@param name
           the name of the logger to get, cannot be {@code null}.
@param resourceBundleName
           the name of the resource bundle, may be {@code null}.
@throws IllegalArgumentException
            if the logger identified by {@code name} is associated with a
            resource bundle and its name is not equal to
            {@code resourceBundleName}.
@throws MissingResourceException
            if the name of the resource bundle cannot be found.
@return a named logger."
      end

      operation 1712795 "getGlobal"
	class_operation public return_type class_ref 281115 // Logger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the global {@code Logger}.
@since 1.7
@hide 1.7"
      end

      operation 1712923 "addHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 279963 // Handler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a handler to this logger. The {@code name} will be fed with log
records received by this logger.

@param handler
           the handler object to add, cannot be {@code null}."
      end

      operation 1713051 "setManager"
	package explicit_return_type "void"
	nparams 1
	  param inout name "manager" type class_ref 280859 // LogManager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the logger's manager and initializes its configuration from the
manager's properties."
      end

      operation 1713179 "getHandlers"
	public return_type class_ref 279963 // Handler
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the handlers associated with this logger.

@return an array of all the handlers associated with this logger."
      end

      operation 1713307 "removeHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 279963 // Handler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a handler from this logger. If the specified handler does not
exist then this method has no effect.

@param handler
           the handler to be removed."
      end

      operation 1713435 "getFilter"
	public return_type class_ref 280475 // Filter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the filter used by this logger.

@return the filter used by this logger, may be {@code null}."
      end

      operation 1713563 "setFilter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFilter" type class_ref 280475 // Filter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the filter used by this logger.

@param newFilter
           the filter to set, may be {@code null}."
      end

      operation 1713691 "getLevel"
	public return_type class_ref 280091 // Level
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the logging level of this logger. A {@code null} level indicates
that this logger inherits its parent's level.

@return the logging level of this logger."
      end

      operation 1713819 "setLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLevel" type class_ref 280091 // Level
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the logging level for this logger. A {@code null} level indicates
that this logger will inherit its parent's level.

@param newLevel
           the logging level to set."
      end

      operation 1713947 "getUseParentHandlers"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the flag which indicates whether to use the handlers of this
logger's parent to publish incoming log records, potentially recursively
up the namespace.

@return {@code true} if set to use parent's handlers, {@code false}
        otherwise."
      end

      operation 1714075 "setUseParentHandlers"
	public explicit_return_type "void"
	nparams 1
	  param inout name "notifyParentHandlers" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the flag which indicates whether to use the handlers of this
logger's parent, potentially recursively up the namespace.

@param notifyParentHandlers
           the new flag indicating whether to use the parent's handlers."
      end

      operation 1714203 "getParent"
	public return_type class_ref 281115 // Logger
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the nearest parent of this logger in the namespace, a {@code null}
value will be returned if called on the root logger.

@return the parent of this logger in the namespace."
      end

      operation 1714331 "setParent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 281115 // Logger
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the parent of this logger in the namespace. This method should be
used by the {@code LogManager} object only.

@param parent
           the parent logger to set."
      end

      operation 1714459 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of this logger, {@code null} for anonymous loggers.

@return the name of this logger."
      end

      operation 1714587 "getResourceBundle"
	public return_type class_ref 246043 // ResourceBundle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the loaded resource bundle used by this logger to localize logging
messages. If the value is {@code null}, the parent's resource bundle will be
inherited.

@return the loaded resource bundle used by this logger."
      end

      operation 1714715 "getResourceBundleName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the loaded resource bundle used by this logger to
localize logging messages. If the value is {@code null}, the parent's resource
bundle name will be inherited.

@return the name of the loaded resource bundle used by this logger."
      end

      operation 1714843 "internalIsLoggable"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "l" type class_ref 280091 // Level
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is for compatibility. Tests written to the reference
implementation API imply that the isLoggable() method is not called
directly. This behavior is important because subclass may override
isLoggable() method, so that affect the result of log methods."
      end

      operation 1714971 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "l" type class_ref 280091 // Level
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this logger will actually log messages of the
specified level. The effective level used to do the determination may be
inherited from its parent. The default level is {@code Level.INFO}.

@param l
           the level to check.
@return {@code true} if this logger will actually log this level,
        otherwise {@code false}."
      end

      operation 1715099 "setResourceBundle"
	private explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the resource bundle and its name for a supplied LogRecord object.
This method first tries to use this logger's resource bundle if any,
otherwise try to inherit from this logger's parent, recursively up the
namespace."
      end

      operation 1715227 "entering"
	public explicit_return_type "void"
	nparams 2
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message indicating that a method has been entered. A log record
with log level {@code Level.FINER}, log message \"ENTRY\", the specified
source class name and source method name is submitted for logging.

@param sourceClass
           the calling class name.
@param sourceMethod
           the method name."
      end

      operation 1715355 "entering"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "param" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message indicating that a method has been entered. A log record
with log level {@code Level.FINER}, log message \"ENTRY\", the specified
source class name, source method name and one parameter is submitted for
logging.

@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param param
           the parameter for the method call."
      end

      operation 1715483 "entering"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "params" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message indicating that a method has been entered. A log record
with log level {@code Level.FINER}, log message \"ENTRY\", the specified
source class name, source method name and array of parameters is
submitted for logging.

@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param params
           an array of parameters for the method call."
      end

      operation 1715611 "exiting"
	public explicit_return_type "void"
	nparams 2
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message indicating that a method is exited. A log record with log
level {@code Level.FINER}, log message \"RETURN\", the specified source
class name and source method name is submitted for logging.

@param sourceClass
           the calling class name.
@param sourceMethod
           the method name."
      end

      operation 1715739 "exiting"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "result" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message indicating that a method is exited. A log record with log
level {@code Level.FINER}, log message \"RETURN\", the specified source
class name, source method name and return value is submitted for logging.

@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param result
           the return value of the method call."
      end

      operation 1715867 "throwing"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "thrown" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message indicating that an exception is thrown. A log record with
log level {@code Level.FINER}, log message \"THROW\", the specified source
class name, source method name and the {@code Throwable} object is
submitted for logging.

@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param thrown
           the {@code Throwable} object."
      end

      operation 1715995 "severe"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of level {@code Level.SEVERE}; the message is transmitted
to all subscribed handlers.

@param msg
           the message to log."
      end

      operation 1716123 "warning"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of level {@code Level.WARNING}; the message is
transmitted to all subscribed handlers.

@param msg
           the message to log."
      end

      operation 1716251 "info"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of level {@code Level.INFO}; the message is transmitted
to all subscribed handlers.

@param msg
           the message to log."
      end

      operation 1716379 "config"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of level {@code Level.CONFIG}; the message is transmitted
to all subscribed handlers.

@param msg
           the message to log."
      end

      operation 1716507 "fine"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of level {@code Level.FINE}; the message is transmitted
to all subscribed handlers.

@param msg
           the message to log."
      end

      operation 1716635 "finer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of level {@code Level.FINER}; the message is transmitted
to all subscribed handlers.

@param msg
           the message to log."
      end

      operation 1716763 "finest"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of level {@code Level.FINEST}; the message is transmitted
to all subscribed handlers.

@param msg
           the message to log."
      end

      operation 1716891 "log"
	public explicit_return_type "void"
	nparams 2
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the specified level. The message is transmitted to all
subscribed handlers.

@param logLevel
           the level of the specified message.
@param msg
           the message to log."
      end

      operation 1717019 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "param" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the specified level with the supplied parameter. The
message is then transmitted to all subscribed handlers.

@param logLevel
           the level of the given message.
@param msg
           the message to log.
@param param
           the parameter associated with the event that is logged."
      end

      operation 1717147 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "params" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the specified level with the supplied parameter array.
The message is then transmitted to all subscribed handlers.

@param logLevel
           the level of the given message
@param msg
           the message to log.
@param params
           the parameter array associated with the event that is logged."
      end

      operation 1717275 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "thrown" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the specified level with the supplied {@code Throwable}
object. The message is then transmitted to all subscribed handlers.

@param logLevel
           the level of the given message.
@param msg
           the message to log.
@param thrown
           the {@code Throwable} object associated with the event that is
           logged."
      end

      operation 1717403 "log"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a given log record. Only records with a logging level that is equal
or greater than this logger's level will be submitted to this logger's
handlers for logging. If {@code getUseParentHandlers()} returns {@code
true}, the log record will also be submitted to the handlers of this
logger's parent, potentially recursively up the namespace.
<p>
Since all other log methods call this method to actually perform the
logging action, subclasses of this class can override this method to
catch all logging activities.
</p>

@param record
           the log record to be logged."
      end

      operation 1717531 "logp"
	public explicit_return_type "void"
	nparams 4
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the given level with the specified source class name
and source method name.

@param logLevel
           the level of the given message.
@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param msg
           the message to be logged."
      end

      operation 1717659 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "param" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the given level with the specified source class name,
source method name and parameter.

@param logLevel
           the level of the given message
@param sourceClass
           the source class name
@param sourceMethod
           the source method name
@param msg
           the message to be logged
@param param
           the parameter associated with the event that is logged."
      end

      operation 1717787 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "params" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the given level with the specified source class name,
source method name and parameter array.

@param logLevel
           the level of the given message.
@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param msg
           the message to be logged.
@param params
           the parameter array associated with the event that is logged."
      end

      operation 1717915 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "thrown" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the given level with the specified source class name,
source method name and {@code Throwable} object.

@param logLevel
           the level of the given message.
@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param msg
           the message to be logged.
@param thrown
           the {@code Throwable} object."
      end

      operation 1718043 "logrb"
	public explicit_return_type "void"
	nparams 5
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "bundleName" type class_ref 3399692 // String
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the given level with the specified source class name
and source method name, using the given resource bundle to localize the
message. If {@code bundleName} is null, the empty string or not valid then
the message is not localized.

@param logLevel
           the level of the given message.
@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param bundleName
           the name of the resource bundle used to localize the message.
@param msg
           the message to be logged."
      end

      operation 1718171 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "bundleName" type class_ref 3399692 // String
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "param" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the given level with the specified source class name,
source method name and parameter, using the given resource bundle to
localize the message. If {@code bundleName} is null, the empty string
or not valid then the message is not localized.

@param logLevel
           the level of the given message.
@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param bundleName
           the name of the resource bundle used to localize the message.
@param msg
           the message to be logged.
@param param
           the parameter associated with the event that is logged."
      end

      operation 1718299 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "bundleName" type class_ref 3399692 // String
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "params" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the given level with the specified source class name,
source method name and parameter array, using the given resource bundle
to localize the message. If {@code bundleName} is null, the empty string
or not valid then the message is not localized.

@param logLevel
           the level of the given message.
@param sourceClass
           the source class name.
@param sourceMethod
           the source method name.
@param bundleName
           the name of the resource bundle used to localize the message.
@param msg
           the message to be logged.
@param params
           the parameter array associated with the event that is logged."
      end

      operation 1718427 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "logLevel" type class_ref 280091 // Level
	  param inout name "sourceClass" type class_ref 3399692 // String
	  param inout name "sourceMethod" type class_ref 3399692 // String
	  param inout name "bundleName" type class_ref 3399692 // String
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "thrown" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logs a message of the given level with the specified source class name,
source method name and {@code Throwable} object, using the given resource
bundle to localize the message. If {@code bundleName} is null, the empty
string or not valid then the message is not localized.

@param logLevel
           the level of the given message
@param sourceClass
           the source class name
@param sourceMethod
           the source method name
@param bundleName
           the name of the resource bundle used to localize the message.
@param msg
           the message to be logged.
@param thrown
           the {@code Throwable} object."
      end

      operation 1718555 "reset"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 281243 "LoggingMXBean"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "{@code LoggingMXBean} is the management interface for the logging sub-system.
<p>
The ObjectName for identifying the {@code LoggingMXBean} in a bean server is
{@link LogManager#LOGGING_MXBEAN_NAME}.
</p>

@since 1.5"
      operation 1718683 "getLoggerLevel"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "loggerName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the string value of the logging level of a logger. An empty string
is returned when the logger's level is defined by its parent. A
{@code null} is returned if the specified logger does not exist.

@param loggerName
           the name of the logger lookup.
@return a {@code String} if the logger is found, otherwise {@code null}.
@see Level#getName()"
      end

      operation 1718811 "getLoggerNames"
	public return_type class_ref 131483 // List
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a list of all currently registered logger names. This is performed
using the {@link LogManager#getLoggerNames()}.

@return a list of logger names."
      end

      operation 1718939 "getParentLoggerName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "loggerName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the parent logger of a logger. If the logger doesn't
exist then {@code null} is returned. If the logger is the root logger,
then an empty {@code String} is returned.

@param loggerName
           the name of the logger to lookup.
@return a {@code String} if the logger was found, otherwise {@code null}."
      end

      operation 1719067 "setLoggerLevel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "loggerName" type class_ref 3399692 // String
	  param inout name "levelName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the log level of a logger. LevelName set to {@code null} means the
level is inherited from the nearest non-null ancestor.

@param loggerName
           the name of the logger to set the level on, which must not be
           {@code null}.
@param levelName
           the level to set on the logger, which may be {@code null}.
@throws IllegalArgumentException
            if {@code loggerName} is not a registered logger or if
            {@code levelName} is not null and not valid.
@see Level#parse(String)"
      end
    end

    class 281371 "LoggingPermission"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Legacy security code; do not use."
      classrelation 495003 // <generalisation>
	relation 495003 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 495003 // <generalisation>
	  b parent class_ref 146075 // BasicPermission
      end

      classrelation 495131 // <realization>
	relation 495131 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 495131 // <realization>
	  b parent class_ref 141595 // Guard
      end

      classrelation 495259 // <realization>
	relation 495259 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 495259 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      operation 1719195 "LoggingPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "actions" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1719323 "getActions"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1719451 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 141467 // Permission
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 281499 "MemoryHandler"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code Handler} put the description of log events into a cycled memory
buffer.
<p>
Mostly this {@code MemoryHandler} just puts the given {@code LogRecord} into
the internal buffer and doesn't perform any formatting or any other process.
When the buffer is full, the earliest buffered records will be discarded.
<p>
Every {@code MemoryHandler} has a target handler, and push action can be
triggered so that all buffered records will be output to the target handler
and normally the latter will publish the records. After the push action, the
buffer will be cleared.
<p>
The push method can be called directly, but will also be called automatically
if a new <code>LogRecord</code> is added that has a level greater than or
equal to than the value defined for the property
java.util.logging.MemoryHandler.push.
<p>
{@code MemoryHandler} will read following {@code LogManager} properties for
initialization, if given properties are not defined or has invalid values,
default value will be used.
<ul>
<li>java.util.logging.MemoryHandler.filter specifies the {@code Filter}
class name, defaults to no {@code Filter}.</li>
<li>java.util.logging.MemoryHandler.level specifies the level for this
{@code Handler}, defaults to {@code Level.ALL}.</li>
<li>java.util.logging.MemoryHandler.push specifies the push level, defaults
to level.SEVERE.</li>
<li>java.util.logging.MemoryHandler.size specifies the buffer size in number
of {@code LogRecord}, defaults to 1000.</li>
<li>java.util.logging.MemoryHandler.target specifies the class of the target
{@code Handler}, no default value, which means this property must be
specified either by property setting or by constructor.</li>
</ul>"
      classrelation 497563 // <generalisation>
	relation 497563 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 497563 // <generalisation>
	  b parent class_ref 279963 // Handler
      end

      attribute 425755 "DEFAULT_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " default maximum buffered number of LogRecord"
      end

      classrelation 497691 // target (<unidirectional association>)
	relation 497691 --->
	  a role_name "target" private
	    comment " target handler
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 497691 // target (<unidirectional association>)
	  b parent class_ref 279963 // Handler
      end

      attribute 425883 "size"
	private explicit_type "int"
	init_value " DEFAULT_SIZE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " buffer size"
      end

      classrelation 497819 // push (<unidirectional association>)
	relation 497819 --->
	  a role_name "push" init_value " Level.SEVERE" private
	    comment " push level
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 497819 // push (<unidirectional association>)
	  b parent class_ref 280091 // Level
      end

      classrelation 497947 // manager (<unidirectional association>)
	relation 497947 --->
	  a role_name "manager" init_value " LogManager.getLogManager()" const_relation private
	    comment " LogManager instance for convenience
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 497947 // manager (<unidirectional association>)
	  b parent class_ref 280859 // LogManager
      end

      classrelation 498075 // buffer (<unidirectional association>)
	relation 498075 --->
	  a role_name "buffer" multiplicity "[]" private
	    comment " buffer
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 498075 // buffer (<unidirectional association>)
	  b parent class_ref 280603 // LogRecord
      end

      attribute 426011 "cursor"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " current position in buffer"
      end

      operation 1725595 "MemoryHandler"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, construct and init a {@code MemoryHandler} using
{@code LogManager} properties or default values.

@throws RuntimeException
            if property value are invalid and no default value could be
            used."
      end

      operation 1725723 "MemoryHandler"
	public explicit_return_type ""
	nparams 3
	  param inout name "target" type class_ref 279963 // Handler
	  param in name "size" explicit_type "int"
	  param inout name "pushLevel" type class_ref 280091 // Level
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct and init a {@code MemoryHandler} using given target, size and
push level, other properties using {@code LogManager} properties or
default values.

@param target
           the given {@code Handler} to output
@param size
           the maximum number of buffered {@code LogRecord}, greater than
           zero
@param pushLevel
           the push level
@throws IllegalArgumentException
            if {@code size <= 0}
@throws RuntimeException
            if property value are invalid and no default value could be
            used."
      end

      operation 1725851 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Close this handler and target handler, free all associated resources."
      end

      operation 1725979 "flush"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Call target handler to flush any buffered output. Note that this doesn't
cause this {@code MemoryHandler} to push."
      end

      operation 1726107 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Put a given {@code LogRecord} into internal buffer. If given record is
not loggable, just return. Otherwise it is stored in the buffer.
Furthermore if the record's level is not less than the push level, the
push action is triggered to output all the buffered records to the target
handler, and the target handler will publish them.

@param record
           the log record"
      end

      operation 1726235 "getPushLevel"
	public return_type class_ref 280091 // Level
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the push level.

@return the push level"
      end

      operation 1726363 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if given {@code LogRecord} would be put into this
{@code MemoryHandler}'s internal buffer.
<p>
The given {@code LogRecord} is loggable if and only if it has appropriate
level and it pass any associated filter's check.
<p>
Note that the push level is not used for this check.

@param record
           the given {@code LogRecord}
@return the given {@code LogRecord} if it should be logged, {@code false}
        if {@code LogRecord} is {@code null}."
      end

      operation 1726491 "push"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Triggers a push action to output all buffered records to the target handler,
and the target handler will publish them. Then the buffer is cleared."
      end

      operation 1726619 "setPushLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLevel" type class_ref 280091 // Level
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the push level. The push level is used to check the push action
triggering. When a new {@code LogRecord} is put into the internal
buffer and its level is not less than the push level, the push action
will be triggered. Note that set new push level won't trigger push action.

@param newLevel
                the new level to set."
      end
    end

    class 281627 "SimpleFormatter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "{@code SimpleFormatter} can be used to print a summary of the information
contained in a {@code LogRecord} object in a human readable format."
      classrelation 498203 // <generalisation>
	relation 498203 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 498203 // <generalisation>
	  b parent class_ref 280347 // Formatter
      end

      operation 1726747 "SimpleFormatter"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SimpleFormatter}."
      end

      operation 1726875 "format"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "r" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Converts a {@link LogRecord} object into a human readable string
representation.

@param r
           the log record to be formatted into a string.
@return the formatted string."
      end
    end

    class 281755 "SocketHandler"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A handler that writes log messages to a socket connection.
<p>
This handler reads the following properties from the log manager to
initialize itself:
<ul>
<li>java.util.logging.ConsoleHandler.level specifies the logging level,
defaults to {@code Level.ALL} if this property is not found or has an invalid
value.
<li>java.util.logging.SocketHandler.filter specifies the name of the filter
class to be associated with this handler, defaults to {@code null} if this
property is not found or has an invalid value.
<li>java.util.logging.SocketHandler.formatter specifies the name of the
formatter class to be associated with this handler, defaults to
{@code java.util.logging.XMLFormatter} if this property is not found or has
an invalid value.
<li>java.util.logging.SocketHandler.encoding specifies the encoding this
handler will use to encode log messages, defaults to {@code null} if this
property is not found or has an invalid value.
<li>java.util.logging.SocketHandler.host specifies the name of the host that
this handler should connect to. There's no default value for this property.
<li>java.util.logging.SocketHandler.encoding specifies the port number that
this handler should connect to. There's no default value for this property.
</ul>
<p>
This handler buffers the outgoing messages, but flushes each time a log
record has been published.
<p>
This class is not thread-safe."
      classrelation 498331 // <generalisation>
	relation 498331 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 498331 // <generalisation>
	  b parent class_ref 279835 // StreamHandler
      end

      classrelation 498459 // DEFAULT_LEVEL (<unidirectional association>)
	relation 498459 --->
	  a role_name "DEFAULT_LEVEL" init_value " \"ALL\"" class_relation const_relation private
	    comment " default level
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 498459 // DEFAULT_LEVEL (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 498587 // DEFAULT_FORMATTER (<unidirectional association>)
	relation 498587 --->
	  a role_name "DEFAULT_FORMATTER" init_value " \"java.util.logging.XMLFormatter\"" class_relation const_relation private
	    comment " default formatter
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 498587 // DEFAULT_FORMATTER (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 498715 // socket (<unidirectional association>)
	relation 498715 --->
	  a role_name "socket" private
	    comment " the socket connection
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 498715 // socket (<unidirectional association>)
	  b parent class_ref 176923 // Socket
      end

      operation 1727003 "SocketHandler"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code SocketHandler} object using the properties read by
the log manager, including the host name and port number. Default
formatting uses the XMLFormatter class and level is set to ALL.

@throws IOException
            if failed to connect to the specified host and port.
@throws IllegalArgumentException
            if the host name or port number is illegal."
      end

      operation 1727131 "SocketHandler"
	public explicit_return_type ""
	nparams 2
	  param inout name "host" type class_ref 3399692 // String
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code SocketHandler} object using the specified host name
and port number together with other properties read by the log manager.
Default formatting uses the XMLFormatter class and level is set to ALL.

@param host
           the host name
@param port
           the port number
@throws IOException
            if failed to connect to the specified host and port.
@throws IllegalArgumentException
            if the host name or port number is illegal."
      end

      operation 1727259 "initSocket"
	private explicit_return_type "void"
	nparams 2
	  param inout name "host" type class_ref 3399692 // String
	  param inout name "port" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize the socket connection and prepare the output stream"
      end

      operation 1727387 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this handler. The network connection to the host is also closed."
      end

      operation 1727515 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Logs a record if necessary. A flush operation will be done afterwards.

@param record
           the log record to be logged."
      end
    end

    class 281883 "XMLFormatter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Formatter to convert a {@link LogRecord} into an XML string. The DTD
specified in Appendix A to the Java Logging APIs specification is used.
{@code XMLFormatter} uses the output handler's encoding if it is specified,
otherwise the default platform encoding is used instead. UTF-8 is the
recommended encoding."
      classrelation 498843 // <generalisation>
	relation 498843 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 498843 // <generalisation>
	  b parent class_ref 280347 // Formatter
      end

      classrelation 498971 // indent (<unidirectional association>)
	relation 498971 --->
	  a role_name "indent" init_value " \"    \"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 498971 // indent (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1727643 "XMLFormatter"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code XMLFormatter}."
      end

      operation 1727771 "format"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "r" type class_ref 280603 // LogRecord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Converts a {@code LogRecord} into an XML string.

@param r
           the log record to be formatted.
@return the log record formatted as an XML string."
      end

      operation 1727899 "formatMessages"
	private explicit_return_type "void"
	nparams 2
	  param inout name "r" type class_ref 280603 // LogRecord
	  param inout name "sb" type class_ref 155163 // StringBuilder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1728027 "formatThrowable"
	private explicit_return_type "void"
	nparams 2
	  param inout name "r" type class_ref 280603 // LogRecord
	  param inout name "sb" type class_ref 155163 // StringBuilder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1728155 "append"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "sb" type class_ref 155163 // StringBuilder
	  param in name "indentCount" explicit_type "int"
	  param inout name "tag" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1728283 "getHead"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "h" type class_ref 279963 // Handler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the header string for a set of log records formatted as XML
strings, using the output handler's encoding if it is defined, otherwise
using the default platform encoding.

@param h
           the output handler, may be {@code null}.
@return the header string for log records formatted as XML strings."
      end

      operation 1728411 "getTail"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "h" type class_ref 279963 // Handler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the tail string for a set of log records formatted as XML
strings.

@param h
           the output handler, may be {@code null}.
@return the tail string for log records formatted as XML strings."
      end
    end
  end

  deploymentview 131995 "logging"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 235419 "Handler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
${definition}"
      associated_classes
	class_ref 279963 // Handler
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 235547 "StreamHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
${definition}"
      associated_classes
	class_ref 279835 // StreamHandler
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 235675 "ConsoleHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 279707 // ConsoleHandler
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 235803 "ErrorManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 280219 // ErrorManager
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 235931 "FileHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.util.Hashtable;
import libcore.io.IoUtils;
${definition}"
      associated_classes
	class_ref 280731 // FileHandler
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236059 "Filter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 280475 // Filter
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236187 "Formatter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.text.MessageFormat;
import java.util.ResourceBundle;
${definition}"
      associated_classes
	class_ref 280347 // Formatter
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236315 "Level"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.VMStack;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import libcore.util.Objects;
${definition}"
      associated_classes
	class_ref 280091 // Level
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236443 "Logger"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.DalvikLogHandler;
import dalvik.system.DalvikLogging;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.CopyOnWriteArrayList;
${definition}"
      associated_classes
	class_ref 281115 // Logger
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236571 "LoggingMXBean"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 281243 // LoggingMXBean
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236699 "LoggingPermission"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.security.BasicPermission;
import java.security.Guard;
import java.security.Permission;
${definition}"
      associated_classes
	class_ref 281371 // LoggingPermission
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236827 "LogManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Properties;
import java.util.StringTokenizer;
import libcore.io.IoUtils;
${definition}"
      associated_classes
	class_ref 280859 // LogManager
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 236955 "LogRecord"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
${definition}"
      associated_classes
	class_ref 280603 // LogRecord
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237083 "MemoryHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 281499 // MemoryHandler
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237211 "SimpleFormatter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.MessageFormat;
import java.util.Date;
import libcore.io.IoUtils;
${definition}"
      associated_classes
	class_ref 281627 // SimpleFormatter
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237339 "SocketHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.net.Socket;
${definition}"
      associated_classes
	class_ref 281755 // SocketHandler
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 237467 "XMLFormatter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.text.MessageFormat;
import java.util.Date;
import java.util.ResourceBundle;
${definition}"
      associated_classes
	class_ref 281883 // XMLFormatter
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
