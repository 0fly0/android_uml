class System
!!!427035.java!!!	setIn(inout newIn : InputStream) : void
        setFieldImpl("in", "Ljava/io/InputStream;", newIn);
!!!427163.java!!!	setOut(inout newOut : PrintStream) : void
        setFieldImpl("out", "Ljava/io/PrintStream;", newOut);
!!!427291.java!!!	setErr(inout newErr : PrintStream) : void
        setFieldImpl("err", "Ljava/io/PrintStream;", newErr);
!!!427931.java!!!	exit(in code : int) : void
        Runtime.getRuntime().exit(code);
!!!428059.java!!!	gc() : void
        Runtime.getRuntime().gc();
!!!428187.java!!!	getenv(inout name : String) : String
        return getenv(name, null);
!!!428315.java!!!	getenv(inout name : String, inout defaultValue : String) : String
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        String value = Libcore.os.getenv(name);
        return (value != null) ? value : defaultValue;
!!!428443.java!!!	getenv() : Map
        Map<String, String> map = new HashMap<String, String>();
        for (String entry : Libcore.os.environ()) {
            int index = entry.indexOf('=');
            if (index != -1) {
                map.put(entry.substring(0, index), entry.substring(index + 1));
            }
        }
        return new SystemEnvironment(map);
!!!428571.java!!!	inheritedChannel() : Channel
        return SelectorProvider.provider().inheritedChannel();
!!!428699.java!!!	getProperties() : Properties
        if (systemProperties == null) {
            initSystemProperties();
        }
        return systemProperties;
!!!428827.java!!!	initSystemProperties() : void
        VMRuntime runtime = VMRuntime.getRuntime();
        Properties p = new Properties();

        String projectUrl = "http://www.android.com/";
        String projectName = "The Android Project";

        p.put("java.boot.class.path", runtime.bootClassPath());
        p.put("java.class.path", runtime.classPath());

        // None of these four are meaningful on Android, but these keys are guaranteed
        // to be present for System.getProperty. For java.class.version, we use the maximum
        // class file version that dx currently supports.
        p.put("java.class.version", "50.0");
        p.put("java.compiler", "");
        p.put("java.ext.dirs", "");
        p.put("java.version", "0");

        p.put("java.home", getenv("JAVA_HOME", "/system"));

        p.put("java.io.tmpdir", "/tmp");
        p.put("java.library.path", getenv("LD_LIBRARY_PATH"));

        p.put("java.specification.name", "Dalvik Core Library");
        p.put("java.specification.vendor", projectName);
        p.put("java.specification.version", "0.9");

        p.put("java.vendor", projectName);
        p.put("java.vendor.url", projectUrl);
        p.put("java.vm.name", "Dalvik");
        p.put("java.vm.specification.name", "Dalvik Virtual Machine Specification");
        p.put("java.vm.specification.vendor", projectName);
        p.put("java.vm.specification.version", "0.9");
        p.put("java.vm.vendor", projectName);
        p.put("java.vm.version", runtime.vmVersion());

        p.put("file.separator", "/");
        p.put("line.separator", "\n");
        p.put("path.separator", ":");

        p.put("java.runtime.name", "Android Runtime");
        p.put("java.runtime.version", "0.9");
        p.put("java.vm.vendor.url", projectUrl);

        p.put("file.encoding", "UTF-8");
        p.put("user.language", "en");
        p.put("user.region", "US");

        p.put("user.home", getenv("HOME", ""));
        p.put("user.name", getenv("USER", ""));

        StructUtsname info = Libcore.os.uname();
        p.put("os.arch", info.machine);
        p.put("os.name", info.sysname);
        p.put("os.version", info.release);

        // Undocumented Android-only properties.
        p.put("android.icu.library.version", ICU.getIcuVersion());
        p.put("android.icu.unicode.version", ICU.getUnicodeVersion());
        p.put("android.icu.cldr.version", ICU.getCldrVersion());
        // TODO: it would be nice to have this but currently it causes circularity.
        // p.put("android.tzdata.version", ZoneInfoDB.getVersion());
        parsePropertyAssignments(p, specialProperties());

        // Override built-in properties with settings from the command line.
        parsePropertyAssignments(p, runtime.properties());

        systemProperties = p;
!!!429083.java!!!	parsePropertyAssignments(inout p : Properties, inout assignments : String) : void
        for (String assignment : assignments) {
            int split = assignment.indexOf('=');
            String key = assignment.substring(0, split);
            String value = assignment.substring(split + 1);
            p.put(key, value);
        }
!!!429211.java!!!	getProperty(inout propertyName : String) : String
        return getProperty(propertyName, null);
!!!429339.java!!!	getProperty(inout name : String, inout defaultValue : String) : String
        checkPropertyName(name);
        return getProperties().getProperty(name, defaultValue);
!!!429467.java!!!	setProperty(inout name : String, inout value : String) : String
        checkPropertyName(name);
        return (String) getProperties().setProperty(name, value);
!!!429595.java!!!	clearProperty(inout name : String) : String
        checkPropertyName(name);
        return (String) getProperties().remove(name);
!!!429723.java!!!	checkPropertyName(inout name : String) : void
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        if (name.isEmpty()) {
            throw new IllegalArgumentException("name is empty");
        }
!!!429851.java!!!	console() : Console
        return Console.getConsole();
!!!429979.java!!!	getSecurityManager() : SecurityManager
        return null;
!!!430235.java!!!	lineSeparator() : String
        return lineSeparator;
!!!430363.java!!!	load(inout pathName : String) : void
        Runtime.getRuntime().load(pathName, VMStack.getCallingClassLoader());
!!!430491.java!!!	loadLibrary(inout libName : String) : void
        Runtime.getRuntime().loadLibrary(libName, VMStack.getCallingClassLoader());
!!!430619.java!!!	logE(inout message : String) : void
        log('E', message, null);
!!!430747.java!!!	logE(inout message : String, inout th : Throwable) : void
        log('E', message, th);
!!!430875.java!!!	logI(inout message : String) : void
        log('I', message, null);
!!!431003.java!!!	logI(inout message : String, inout th : Throwable) : void
        log('I', message, th);
!!!431131.java!!!	logW(inout message : String) : void
        log('W', message, null);
!!!431259.java!!!	logW(inout message : String, inout th : Throwable) : void
        log('W', message, th);
!!!431515.java!!!	runFinalization() : void
        Runtime.getRuntime().runFinalization();
!!!431643.java!!!	runFinalizersOnExit(inout flag : boolean) : void
        Runtime.runFinalizersOnExit(flag);
!!!431771.java!!!	setProperties(inout p : Properties) : void
        systemProperties = p;
!!!431899.java!!!	setSecurityManager(inout sm : SecurityManager) : void
        if (sm != null) {
            throw new SecurityException();
        }
