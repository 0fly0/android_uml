class ScheduleRecordingActivity
!!!13369740.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        setContentView(R.layout.schedule_recording);

        mFrequencySpinner = (Spinner) findViewById(R.id.frequency_spinner);

        setupButtonListeners();
!!!13369868.java!!!	onStart() : void
        super.onStart();

        mEpgUri = getIntent().getData();
        mDeviceId = getIntent().getStringExtra("deviceId");
!!!13369996.java!!!	onMdcpServiceConnected() : void
        DeviceRecord device = getService().getDeviceRecord(mDeviceId);
        mController = getService().getDeviceController(device);
        if (mEpgUri == null) {
            // TODO(justinkoh): display error here.
        } else {
            // Parse information from EPG URI and update the UI.
            parseEpgUri();
            updateViews();
        }
!!!13370124.java!!!	setupButtonListeners() : void
        Button buttonOk = (Button) findViewById(R.id.button_ok);
        buttonOk.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                scheduleRecording();
                finish();
            }
        });

        Button buttonCancel = (Button) findViewById(R.id.button_cancel);
        buttonCancel.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                finish();
            }
        });
!!!13370252.java!!!	parseEpgUri() : void
        mStreamUri = mEpgUri.getQueryParameter("streamUri");
        Cursor c = null;
        try {
            c = StreamUtils.getMatchingStreams(getContentResolver(), mStreamUri
                    .toString());
            if (c.moveToNext()) {
                mChannelName = c.getString(Streams.NAME_INDEX);
                mChannelNumber = c.getString(Streams.CHANNEL_NUMBER_INDEX);
            }
        } finally {
            if (c != null) {
                c.close();
            }
        }
        mStartTimeMs = Long.parseLong(mEpgUri.getQueryParameter("startTime"))
                * 1000;
        mEndTimeMs = Long.parseLong(mEpgUri.getQueryParameter("endTime"))
                * 1000;

        // TODO(justinkoh): this may need to trigger another query to bring up
        // the TMS IDs in the future. For now, we know that they exist in the
        // EPG URI since we know who is created this.
        // See com.google.tv.home.launch.EpgSource.EpgLaunchable#getLocation.
        String programId = mEpgUri.getQueryParameter("programId");
        mEventName = TvUriUtils.getEventName(mEpgUri);
        mTmsId = mEpgUri.getQueryParameter("tid");
!!!13370380.java!!!	updateViews() : void
        TextView message = (TextView) findViewById(R.id.message);
        SimpleDateFormat dateFormat = new SimpleDateFormat("EEE M/dd h:mm a");

        message.setText(getString(R.string.schedule_recording_body,
                isProgramRecording() ? mEventName : mChannelName,
                dateFormat.format(mStartTimeMs),
                dateFormat.format(mEndTimeMs)));

        TextView frequencyLabel = (TextView) findViewById(R.id.frequency_label);
        frequencyLabel.setVisibility(isProgramRecording() ? View.VISIBLE
                : View.GONE);
        mFrequencySpinner.setVisibility(isProgramRecording() ? View.VISIBLE
                : View.GONE);
!!!13370508.java!!!	scheduleRecording() : void
        int durationMin = (int) ((mEndTimeMs - mStartTimeMs) / (60 * 1000));
        Channel channel = Channel.newBuilder()
                .setName(mChannelName)
                .setNumber(mChannelNumber)
                .build();
        if (isProgramRecording()) {
            GuideId id = GuideId.newBuilder()
                    .setGuideType(GuideType.TMS)
                    .setId(mTmsId)
                    .build();
            int selectedFrequency = mFrequencySpinner.getSelectedItemPosition();
            RecordFilter filter = RecordFilter.newBuilder()
                    .setFrequency(FREQUENCY_OPTIONS[selectedFrequency])
                    .build();
            mController.scheduleRecording(
                    mStartTimeMs,
                    channel,
                    durationMin,
                    id, filter);
        } else {
            mController.scheduleRecording(
                    mStartTimeMs,
                    channel,
                    durationMin, null); // TODO handle repeating days in UI.
        }
!!!13370636.java!!!	isProgramRecording() : boolean
        return  !TextUtils.isEmpty(mTmsId)
                && (mTmsId.startsWith(EPISODE_PREFIX)
                        || mTmsId.startsWith(SERIES_PREFIX))
                && mController.isSupportedRequest(
                        RequestType.SCHEDULE_PROGRAM_RECORDING);
