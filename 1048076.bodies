class LockSettingsService
!!!5692428.java!!!	LockSettingsService(inout context : Context)
        mContext = context;
        // Open the database
        mOpenHelper = new DatabaseHelper(mContext);
!!!5692556.java!!!	systemReady() : void
        migrateOldData();
!!!5692684.java!!!	migrateOldData() : void
        try {
            if (getString("migrated", null, 0) != null) {
                // Already migrated
                return;
            }

            final ContentResolver cr = mContext.getContentResolver();
            for (String validSetting : VALID_SETTINGS) {
                String value = Settings.Secure.getString(cr, validSetting);
                if (value != null) {
                    setString(validSetting, value, 0);
                }
            }
            // No need to move the password / pattern files. They're already in the right place.
            setString("migrated", "true", 0);
            Slog.i(TAG, "Migrated lock settings to new location");
        } catch (RemoteException re) {
            Slog.e(TAG, "Unable to migrate old data");
        }
!!!5692812.java!!!	checkWritePermission(in userId : int) : void
        final int callingUid = Binder.getCallingUid();
        if (UserHandle.getAppId(callingUid) != android.os.Process.SYSTEM_UID) {
            throw new SecurityException("uid=" + callingUid
                    + " not authorized to write lock settings");
        }
!!!5692940.java!!!	checkPasswordReadPermission(in userId : int) : void
        final int callingUid = Binder.getCallingUid();
        if (UserHandle.getAppId(callingUid) != android.os.Process.SYSTEM_UID) {
            throw new SecurityException("uid=" + callingUid
                    + " not authorized to read lock password");
        }
!!!5693068.java!!!	checkReadPermission(in userId : int) : void
        final int callingUid = Binder.getCallingUid();
        if (UserHandle.getAppId(callingUid) != android.os.Process.SYSTEM_UID
                && UserHandle.getUserId(callingUid) != userId) {
            throw new SecurityException("uid=" + callingUid
                    + " not authorized to read settings of user " + userId);
        }
!!!5693196.java!!!	setBoolean(in key : String, inout value : boolean, in userId : int) : void
        checkWritePermission(userId);

        writeToDb(key, value ? "1" : "0", userId);
!!!5693324.java!!!	setLong(in key : String, in value : long, in userId : int) : void
        checkWritePermission(userId);

        writeToDb(key, Long.toString(value), userId);
!!!5693452.java!!!	setString(in key : String, in value : String, in userId : int) : void
        checkWritePermission(userId);

        writeToDb(key, value, userId);
!!!5693580.java!!!	getBoolean(in key : String, inout defaultValue : boolean, in userId : int) : boolean
        //checkReadPermission(userId);

        String value = readFromDb(key, null, userId);
        return TextUtils.isEmpty(value) ?
                defaultValue : (value.equals("1") || value.equals("true"));
!!!5693708.java!!!	getLong(in key : String, in defaultValue : long, in userId : int) : long
        //checkReadPermission(userId);

        String value = readFromDb(key, null, userId);
        return TextUtils.isEmpty(value) ? defaultValue : Long.parseLong(value);
!!!5693836.java!!!	getString(in key : String, in defaultValue : String, in userId : int) : String
        //checkReadPermission(userId);

        return readFromDb(key, defaultValue, userId);
!!!5693964.java!!!	getLockPatternFilename(in userId : int) : String
        String dataSystemDirectory =
                android.os.Environment.getDataDirectory().getAbsolutePath() +
                SYSTEM_DIRECTORY;
        if (userId == 0) {
            // Leave it in the same place for user 0
            return dataSystemDirectory + LOCK_PATTERN_FILE;
        } else {
            return  new File(Environment.getUserSystemDirectory(userId), LOCK_PATTERN_FILE)
                    .getAbsolutePath();
        }
!!!5694092.java!!!	getLockPasswordFilename(in userId : int) : String
        String dataSystemDirectory =
                android.os.Environment.getDataDirectory().getAbsolutePath() +
                SYSTEM_DIRECTORY;
        if (userId == 0) {
            // Leave it in the same place for user 0
            return dataSystemDirectory + LOCK_PASSWORD_FILE;
        } else {
            return  new File(Environment.getUserSystemDirectory(userId), LOCK_PASSWORD_FILE)
                    .getAbsolutePath();
        }
!!!5694220.java!!!	havePassword(in userId : int) : boolean
        // Do we need a permissions check here?

        return new File(getLockPasswordFilename(userId)).length() > 0;
!!!5694348.java!!!	havePattern(in userId : int) : boolean
        // Do we need a permissions check here?

        return new File(getLockPatternFilename(userId)).length() > 0;
!!!5694476.java!!!	setLockPattern(inout hash : byte, in userId : int) : void
        checkWritePermission(userId);

        writeFile(getLockPatternFilename(userId), hash);
!!!5694604.java!!!	checkPattern(inout hash : byte, in userId : int) : boolean
        checkPasswordReadPermission(userId);
        try {
            // Read all the bytes from the file
            RandomAccessFile raf = new RandomAccessFile(getLockPatternFilename(userId), "r");
            final byte[] stored = new byte[(int) raf.length()];
            int got = raf.read(stored, 0, stored.length);
            raf.close();
            if (got <= 0) {
                return true;
            }
            // Compare the hash from the file with the entered pattern's hash
            return Arrays.equals(stored, hash);
        } catch (FileNotFoundException fnfe) {
            Slog.e(TAG, "Cannot read file " + fnfe);
            return true;
        } catch (IOException ioe) {
            Slog.e(TAG, "Cannot read file " + ioe);
            return true;
        }
!!!5694732.java!!!	setLockPassword(inout hash : byte, in userId : int) : void
        checkWritePermission(userId);

        writeFile(getLockPasswordFilename(userId), hash);
!!!5694860.java!!!	checkPassword(inout hash : byte, in userId : int) : boolean
        checkPasswordReadPermission(userId);

        try {
            // Read all the bytes from the file
            RandomAccessFile raf = new RandomAccessFile(getLockPasswordFilename(userId), "r");
            final byte[] stored = new byte[(int) raf.length()];
            int got = raf.read(stored, 0, stored.length);
            raf.close();
            if (got <= 0) {
                return true;
            }
            // Compare the hash from the file with the entered password's hash
            return Arrays.equals(stored, hash);
        } catch (FileNotFoundException fnfe) {
            Slog.e(TAG, "Cannot read file " + fnfe);
            return true;
        } catch (IOException ioe) {
            Slog.e(TAG, "Cannot read file " + ioe);
            return true;
        }
!!!5694988.java!!!	removeUser(in userId : int) : void
        checkWritePermission(userId);

        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
        try {
            File file = new File(getLockPasswordFilename(userId));
            if (file.exists()) {
                file.delete();
            }
            file = new File(getLockPatternFilename(userId));
            if (file.exists()) {
                file.delete();
            }

            db.beginTransaction();
            db.delete(TABLE, COLUMN_USERID + "='" + userId + "'", null);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
!!!5695116.java!!!	writeFile(in name : String, inout hash : byte) : void
        try {
            // Write the hash to file
            RandomAccessFile raf = new RandomAccessFile(name, "rw");
            // Truncate the file if pattern is null, to clear the lock
            if (hash == null || hash.length == 0) {
                raf.setLength(0);
            } else {
                raf.write(hash, 0, hash.length);
            }
            raf.close();
        } catch (IOException ioe) {
            Slog.e(TAG, "Error writing to file " + ioe);
        }
!!!5695244.java!!!	writeToDb(in key : String, in value : String, in userId : int) : void
        writeToDb(mOpenHelper.getWritableDatabase(), key, value, userId);
!!!5695372.java!!!	writeToDb(inout db : SQLiteDatabase, in key : String, in value : String, in userId : int) : void
        ContentValues cv = new ContentValues();
        cv.put(COLUMN_KEY, key);
        cv.put(COLUMN_USERID, userId);
        cv.put(COLUMN_VALUE, value);

        db.beginTransaction();
        try {
            db.delete(TABLE, COLUMN_KEY + "=? AND " + COLUMN_USERID + "=?",
                    new String[] {key, Integer.toString(userId)});
            db.insert(TABLE, null, cv);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
!!!5695500.java!!!	readFromDb(in key : String, in defaultValue : String, in userId : int) : String
        Cursor cursor;
        String result = defaultValue;
        SQLiteDatabase db = mOpenHelper.getReadableDatabase();
        if ((cursor = db.query(TABLE, COLUMNS_FOR_QUERY,
                COLUMN_USERID + "=? AND " + COLUMN_KEY + "=?",
                new String[] { Integer.toString(userId), key },
                null, null, null)) != null) {
            if (cursor.moveToFirst()) {
                result = cursor.getString(0);
            }
            cursor.close();
        }
        return result;
