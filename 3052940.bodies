class Wrapper
!!!12603020.java!!!	getWrapperInstance() : Wrapper
        if (mWrapperInstance == null) {
            mWrapperInstance = new Wrapper();
            mWrapperInstance.mTvFramework = TvFramework.getInstance();
            mWrapperInstance.mTvFramework.isCCInit(); // init CC as early as
                                                      // possible
        }
        return mWrapperInstance;
!!!12603148.java!!!	getContext() : Context
        return mContext;
!!!12603276.java!!!	setContext(inout context : Context) : void
        if (mContext == null) {
            mContext = context;
            mCecManager = new CecManager(context);
        }
!!!12603404.java!!!	getCurrentSource() : int
        int inputSrcId = TvFramework.getInstance().getLiveTvInstance().getCurrentSource();
        return inputSrcId;
!!!12603532.java!!!	getCurrentSourceType() : int
        int inputSrcId = TvFramework.getInstance().getLiveTvInstance().getCurrentSource();
        return TvFramework.getInstance().getLiveTvInstance().getSourceType(inputSrcId);
!!!12603660.java!!!	getSmoothMotionEffect() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_FrcMode);
!!!12603788.java!!!	setSmoothMotionEffect(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_FrcMode, value);
!!!12603916.java!!!	getSmoothness() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_FrcLevel);
!!!12604044.java!!!	setSmoothness(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_FrcLevel, value);
!!!12604172.java!!!	getOverscan() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Overscan);
!!!12604300.java!!!	setOverscan(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Overscan, value);
!!!12604428.java!!!	getNoiseReduction() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_NoiseReduction);
!!!12604556.java!!!	setNoiseReduction(in value : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_NoiseReduction, value);
!!!12604684.java!!!	getTemporalNR() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_VNR);
!!!12604812.java!!!	setTemporalNR(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_VNR, value);
!!!12604940.java!!!	getMosquitoNR() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_MNR);
!!!12605068.java!!!	setMosquitoNR(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_MNR, value);
!!!12605196.java!!!	getBlockArtifactReduction() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_BNR);
!!!12605324.java!!!	setBlockArtifactReduction(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_BNR, value);
!!!12605452.java!!!	getGammaMode() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Gamma);
!!!12605580.java!!!	setGammaMode(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Gamma, value);
!!!12605708.java!!!	getSkinTuneCorrection() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_FreshTone);
!!!12605836.java!!!	setSkinTuneCorrection(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_FreshTone, value);
!!!12605964.java!!!	getHorizontalPosition() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_HorPosition);
!!!12606092.java!!!	setHorizontalPosition(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_HorPosition, value);
!!!12606220.java!!!	getVerticalPosition() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_VerPosition);
!!!12606348.java!!!	setVerticalPosition(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_VerPosition, value);
!!!12606476.java!!!	getHorizontalSize() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_HorSize);
!!!12606604.java!!!	setHorizontalSize(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_HorSize, value);
!!!12606732.java!!!	getVerticalSize() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_VerSize);
!!!12606860.java!!!	setVerticalSize(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_VerSize, value);
!!!12606988.java!!!	getPhase() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Phase);
!!!12607116.java!!!	setPhase(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Phase, value);
!!!12607244.java!!!	getClock() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Clock);
!!!12607372.java!!!	setClock(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Clock,
                value);
!!!12607500.java!!!	getPropertyRange(in api_Name : String) : Bundle
        TvPictureProperty videoProp;
        videoProp = mPicturePropertyMapping.get(api_Name);
        int max = 0, min = 0;
        Bundle bundle = null;
        if (videoProp != null) {
            int range = TvFramework.getInstance().getPictureInstance()
                    .getVideoProperty(getCurrentSource(), videoProp);
            max = range & 0xffff;
            min = (short) (range >>> 16); // unsigned shift
            Log.d(TAG, "getPropertyRange range=" + range + ", max=" + max + ", min=" + min);

            bundle = new Bundle();
            bundle.putInt("max", max);
            bundle.putInt("min", min);
        }
        return bundle;
!!!12607628.java!!!	getAutoAdjust() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_AutoAjust);
!!!12607756.java!!!	setAutoAdjust(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_AutoAjust,
                value);
!!!12607884.java!!!	getDynamicContrast() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_ACE);
!!!12608012.java!!!	setDynamicContrast(in value : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_ACE, value);
!!!12608140.java!!!	resetPictureMode() : void
        mTvFramework.getPictureInstance().setVideoProperty(
                getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Reset,
                TvPictureResetMode.TV_PICTURE_RESET_Basic.value());
!!!12608268.java!!!	resetAdvancedPictureMode() : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Reset,
                TvPictureResetMode.TV_PICTURE_RESET_User.value());
!!!12608396.java!!!	getScreenMode() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_ScreenMode);
!!!12608524.java!!!	setScreenMode(in val : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_ScreenMode,
                val);
!!!12608652.java!!!	getPictureMode() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_PictureMode);
!!!12608780.java!!!	setPictureMode(in pictureMode : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_PictureMode,
                pictureMode);
!!!12608908.java!!!	switchPicUserMode() : boolean
        if (getPictureMode() != PICTURE_MODE_USER) {
            int backLight = getBackLight();
            int brightNess = getBrightNess();
            int contrast = getContrast();
            int color = getColor();
            int tint = getTint();
            int sharpness = getSharpness();
            int colorTemperature = getColorTemperature();
            int lightSensor = getLightSensor();
            int dynamicContrast = getDynamicContrast();
            int noiseReduction = getNoiseReduction();
            setPictureMode(PICTURE_MODE_USER);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TV_PICTURE_Backlight,
                    backLight);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TV_PICTURE_Brightness,
                    brightNess);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TV_PICTURE_Contrast,
                    contrast);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TV_PICTURE_Saturation,
                    color);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TV_PICTURE_Hue,
                    tint);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TV_PICTURE_Sharpness,
                    sharpness);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TV_PICTURE_ColorTemperature,
                    colorTemperature);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TY_PICTURE_LightSensor,
                    lightSensor);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TV_PICTURE_ACE,
                    dynamicContrast);
            mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                    TvPictureProperty.TV_PICTURE_NoiseReduction,
                    noiseReduction);
            return true;
        }
        return false;
!!!12609036.java!!!	getBackLight() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Backlight);
!!!12609164.java!!!	setBackLight(in backLight : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Backlight,
                backLight);
!!!12609292.java!!!	getBrightNess() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Brightness);
!!!12609420.java!!!	setBrightNess(in brightNess : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Brightness,
                brightNess);
!!!12609548.java!!!	getContrast() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Contrast);
!!!12609676.java!!!	setContrast(in contrast : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Contrast,
                contrast);
!!!12609804.java!!!	getColor() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Saturation);
!!!12609932.java!!!	setColor(in color : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Saturation,
                color);
!!!12610060.java!!!	getTint() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Hue);
!!!12610188.java!!!	setTint(in tint : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Hue,
                tint);
!!!12610316.java!!!	getSharpness() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Sharpness);
!!!12610444.java!!!	setSharpness(in sharpness : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Sharpness,
                sharpness);
!!!12610572.java!!!	getColorTemperature() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_ColorTemperature);

!!!12610700.java!!!	setColorTemperature(in colorTemperature : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_ColorTemperature, colorTemperature);
!!!12610828.java!!!	getSmartDimming() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_SmartDimming);
!!!12610956.java!!!	setSmartDimming(in smartDimming : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_SmartDimming,
                smartDimming);
!!!12611084.java!!!	getLightSensor() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TY_PICTURE_LightSensor);
!!!12611212.java!!!	setLightSensor(in val : int) : void
        switchPicUserMode();
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TY_PICTURE_LightSensor,
                val);
!!!12611340.java!!!	getAutoDetail() : int
        // return
        // mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
        // SCMPQPropertyEnums.SCM_VIDEO_AUTODETAIL);
        return 0;
!!!12611468.java!!!	setAutoDetail(in value : int) : void
        // mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
        // SCMPQPropertyEnums.SCM_VIDEO_AUTODETAIL,
        // value);
!!!12611596.java!!!	getSRSTruVolume() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_SRS_TruVolume);
!!!12611724.java!!!	setSRSTruVolume(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_SRS_TruVolume, value);
!!!12611852.java!!!	getSRSStudioSoundHD() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_SRS_StudioSoundHD);
!!!12611980.java!!!	setSRSStudioSoundHD(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_SRS_StudioSoundHD, value);
!!!12612108.java!!!	getEQMode() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_EQMode);
!!!12612236.java!!!	setEQMode(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_EQMode, value);
!!!12612364.java!!!	getTreble() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Treble);
!!!12612492.java!!!	setTreble(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Treble, value);
!!!12612620.java!!!	getBass() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Bass);
!!!12612748.java!!!	setBass(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Bass, value);
!!!12612876.java!!!	getAudioMode() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_AudioMode);
!!!12613004.java!!!	setAudioMode(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_AudioMode, value);
!!!12613132.java!!!	switchAudioUserMode() : boolean
        if (getAudioMode() != AUDIO_MODE_USER) {
            int band1 = getBand1();
            int band2 = getBand2();
            int band3 = getBand3();
            int band4 = getBand4();
            int band5 = getBand5();
            setAudioMode(AUDIO_MODE_USER);
            mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                    TvAudioProperty.TV_AUDIO_Band0, band1);
            mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                    TvAudioProperty.TV_AUDIO_Band1, band2);
            mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                    TvAudioProperty.TV_AUDIO_Band2, band3);
            mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                    TvAudioProperty.TV_AUDIO_Band3, band4);
            mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                    TvAudioProperty.TV_AUDIO_Band4, band5);
            return true;
        }
        return false;
!!!12613260.java!!!	getBand1() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band0);
!!!12613388.java!!!	setBand1(in value : int) : void
        switchAudioUserMode();
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band0, value);
!!!12613516.java!!!	getBand2() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band1);
!!!12613644.java!!!	setBand2(in value : int) : void
        switchAudioUserMode();
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band1, value);
!!!12613772.java!!!	getBand3() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band2);
!!!12613900.java!!!	setBand3(in value : int) : void
        switchAudioUserMode();
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band2, value);
!!!12614028.java!!!	getBand4() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band3);
!!!12614156.java!!!	setBand4(in value : int) : void
        switchAudioUserMode();
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band3, value);
!!!12614284.java!!!	getBand5() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band4);
!!!12614412.java!!!	setBand5(in value : int) : void
        switchAudioUserMode();
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Band4, value);
!!!12614540.java!!!	getBalance() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Balance);
!!!12614668.java!!!	setBalance(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Balance, value);
!!!12614796.java!!!	getLipSync() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Lipsync);
!!!12614924.java!!!	setLipSync(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_Lipsync, value);
!!!12615052.java!!!	getBaseBoost() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_BassVolume);
!!!12615180.java!!!	setBaseBoost(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_BassVolume, value);
!!!12615308.java!!!	getDRCMode() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_DrcMode);
!!!12615436.java!!!	setDRCMode(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_DrcMode, value);
!!!12615564.java!!!	getTVSpeakers() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_OUT_TvSpeaker);
!!!12615692.java!!!	setTVSpeakers(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_OUT_TvSpeaker, value);
!!!12615820.java!!!	getVolumeControl() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_OUT_VolumeControl);
!!!12615948.java!!!	setVolumeControl(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_OUT_VolumeControl, value);
!!!12616076.java!!!	getAnalogAudioOut() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_OUT_AnalogOut);
!!!12616204.java!!!	setAnalogAudioOut(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_OUT_AnalogOut, value);
!!!12616332.java!!!	getDigitalAudioOut() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_OUT_DigitalOut);
!!!12616460.java!!!	setDigitalAudioOut(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_OUT_DigitalOut, value);
!!!12616588.java!!!	getPrefMTS() : int
        return mTvFramework.getAudioInstance().GetPreferredAnalogMTSMode().ordinal();
!!!12616716.java!!!	setPrefMTS(in value : int) : void
        mTvFramework.getAudioInstance().setPreferredAnalogMTSMode(MTS.values()[value]);
!!!12616844.java!!!	getCurrentMTS() : int
        return mTvFramework.getAudioInstance().GetAnalogMTSMode().ordinal();
!!!12616972.java!!!	setCurrentMTS(in value : int) : void
        mTvFramework.getAudioInstance().setAnalogMTSMode(MTS.values()[value]);
!!!12617100.java!!!	getPrefAudioLanguage() : int
        return mTvFramework.getAudioInstance().getPreferredAudioLanguage().ordinal();
!!!12617228.java!!!	setPrefAudioLanguage(in audioService : int) : void
        mTvFramework.getAudioInstance().setPreferredAudioLanguage(
                AudioLanguage.values()[audioService]);
!!!12617356.java!!!	getAudioTrack() : int
        int index = mTvFramework.getAudioInstance().getCurrentAudioLanguage();
        return (index >= 0) ? index : 0;
!!!12617484.java!!!	setAudioTrack(in index : int) : void
        mTvFramework.getAudioInstance().setCurrentAudioLanguage(index);
!!!12617612.java!!!	getPIPAudio() : int
        // return
        // mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
        // SCMAudioProperty.SCM_AUDIO_ENABLE_PIP_VOLUME);
        return 0;
!!!12617740.java!!!	setPIPAudio(in value : int) : void
        // mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
        // SCMAudioProperty.SCM_AUDIO_ENABLE_PIP_VOLUME, value);
!!!12617868.java!!!	resetAudioMode(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(
                getCurrentSource(), TvAudioProperty.TV_AUDIO_Reset,
                value);
        setPrefMTS(1); // default Stereo
        setPrefAudioLanguage(0); // default English
!!!12617996.java!!!	getSoundOptimized() : int
        return mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_SoundOptimize);
!!!12618124.java!!!	setSoundOptimized(in value : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_SoundOptimize, value);
!!!12618252.java!!!	getAudioChannelNum() : int
        // return
        // mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
        // SCMAudioProperty.SCM_AUDIO_CHANNELNUM);
        return 0;
!!!12618380.java!!!	getSubwooferChannelNum() : int
        // return
        // mTvFramework.getAudioInstance().getAudioProperty(getCurrentSource(),
        // SCMAudioProperty.SCM_AUDIO_LFE_CHANNELNUM);
        return 0;
!!!12618508.java!!!	getTunerMode() : int
        InputSourceType inputSourceType = mTvFramework.getTunerInstance().getTunerMode(mContext);
        if (inputSourceType == InputSourceType.ATSC_INPUT) {
            return 0;
        } else {
            return 1;
        }
!!!12618636.java!!!	setTunerMode(in val : int) : void
        InputSourceType inputSourceType = InputSourceType.ATSC_INPUT;
        if (val == 1) {
            inputSourceType = InputSourceType.CABLE_INPUT;
        }
        // Setting the Closed caption to Off to avoid residue on the screen
        pauseCC();
        mTvFramework.getTunerInstance().setTunerMode(inputSourceType, mContext);

        updateChanneListToGTVDb(2000);
!!!12618764.java!!!	updateChanneListToGTVDb(in delay : int) : void
        // send intent to ask Controller to update GTV channel database
        Intent intent = new Intent(TvIntents.ACTION_UPDATE_CHANNELDB);
        intent.putExtra(TvIntents.EXTRA_DELAY, delay);
        mContext.sendBroadcast(intent);
!!!12618892.java!!!	setChannelSurfingMode(in value : int) : void
        if (mTvDatabase.getIntValue(mContext, KEY_CHANNEL_SURFING_MODE, 1) != value) {
            mTvDatabase.setIntValue(mContext, KEY_CHANNEL_SURFING_MODE, value);
        }
!!!12619020.java!!!	getChannelSurfingMode() : int
        return mTvDatabase.getIntValue(mContext, KEY_CHANNEL_SURFING_MODE, 1);
!!!12619148.java!!!	isSameChannel(inout ch1 : ChannelDetails, inout ch2 : ChannelDetails) : boolean
        if (ch1 != null && ch2 != null) {
            boolean sameName = !TextUtils.isEmpty(ch1.getChannelName())
                    && ch1.getChannelName().equals(ch2.getChannelName());
            boolean sameNumber = (ch1.getMajorNo() == ch2.getMajorNo() && ch1.getMinorNo() == ch2
                    .getMinorNo());
            boolean sameServiceId = (ch1.getServiceId() != null && ch2.getServiceId() != null
                    && ch1.getServiceId().getServiceRec() == ch2.getServiceId().getServiceRec());
            if ((sameName || sameNumber) && sameServiceId)
                return true;
        }
        return false;
!!!12619276.java!!!	resetChannelSettings() : void
        mTvFramework.getLiveTvInstance().resetChannelList();
        setTunerMode(0);
//        mTvFramework.getGtvSpecificInstance().deleteExistingChannels(mContext,
//                Utils.TUNER_DEVICE_ID);
//        mTvFramework.getGtvSpecificInstance().deleteFavoiteChannels(mContext);
!!!12619404.java!!!	getChannelNumber() : int
        return ChannelNumber;
!!!12619532.java!!!	setChannelNumber(in channelNumber : int) : void
        ChannelNumber = channelNumber;
!!!12619660.java!!!	getFrequency() : int
        return Frequency;
!!!12619788.java!!!	setFrequency(in frequency : int) : void
        Frequency = frequency;
!!!12619916.java!!!	getModulationType() : int
        return ModulationType;
!!!12620044.java!!!	setModulationType(in modulationType : int) : void
        ModulationType = modulationType;
!!!12620172.java!!!	pauseCC() : void
        Log.d(TAG, "pauseCC");
        // CC Off is performed only if CC Init is done
        // This is to avoid unnecessary platform calls, when CC is not in use
        if (mTvFramework.isCCInit() && getCCStatus()) {
            mTvFramework.getCaptionInstance().setCCStatus(false);
        }
!!!12620300.java!!!	resumeCC() : void
        Log.d(TAG, "resumeCC");
        // CC ON is performed only if CC Init is done
        // This is to avoid unnecessary platform calls, when CC is not in use
        if (mTvFramework.isCCInit() && getCCStatus()) {
            mTvFramework.getCaptionInstance().setCCStatus(true);
        }
!!!12620428.java!!!	getClosedCaptions() : int
        CCDisplayMode mode = mTvFramework.getCaptionInstance().getCCMode();
        // Log.d(TAG,"getCloseCaption mode ="+ mode);
        return mode.ordinal();
!!!12620556.java!!!	setClosedCaptions(in closedCaptions : int) : void
        Caption cc = TvFramework.getInstance().getCaptionInstance();
        cc.setCCMode(CCDisplayMode.values()[closedCaptions]);
        if (closedCaptions != CCDisplayMode.CC_DISPLAY_OFF.ordinal()) {
            // If set cc to on and analogcc/digital cc is off or invalid, set
            // them to default cc1/cs1
            int analogcc = cc.GetCaptionData(
                    CloseCaptionPropEnums.EAnalogCC);
            int digitalcc = cc.GetCaptionData(
                    CloseCaptionPropEnums.EDigitalCC);
            if (analogcc == CCAnalogDigitalServiceType.OFF.ordinal()
                    || analogcc > CCAnalogDigitalServiceType.TXT4.ordinal()) {
                setAnalogCC(CCAnalogDigitalServiceType.CC1.ordinal());
            }
            if (digitalcc == CCAnalogDigitalServiceType.OFF.ordinal()
                    || (digitalcc >= CCAnalogDigitalServiceType.TXT1.ordinal()
                    && digitalcc <= CCAnalogDigitalServiceType.TXT4.ordinal())) {
                setDigitalCC(CCAnalogDigitalServiceType.CS1.ordinal());
            }

            if (closedCaptions == CCDisplayMode.CC_DISPLAY_ON_WHEN_MUTE.ordinal()) {
                boolean mute = Utils.isSystemMute(mContext);
                cc.setCCStatus(mute);
            }
        }
!!!12620684.java!!!	getCCStatus() : boolean
        int cc = getClosedCaptions();
        boolean ccOn = false;
        if (cc == CCDisplayMode.CC_DISPLAY_ON.ordinal())
            ccOn = true;
        else if (cc == CCDisplayMode.CC_DISPLAY_ON_WHEN_MUTE.ordinal()) {
            boolean mute = Utils.isSystemMute(mContext);
            ccOn = mute;
        }
        return ccOn;
!!!12620812.java!!!	UpdateCCStatusByMute(inout bMute : boolean) : void
        Log.i(TAG, "UpdateCCMuteStatus mute =" + bMute);
        Caption cc = TvFramework.getInstance().getCaptionInstance();
        if ((cc != null) && (cc.getCCMode() == CCDisplayMode.CC_DISPLAY_ON_WHEN_MUTE)) {
            cc.setCCStatus(bMute);
        }
!!!12620940.java!!!	getAnalogCC() : int
        int analogcc = mTvFramework.getCaptionInstance().GetCaptionData(
                CloseCaptionPropEnums.EAnalogCC);
        // return (analogcc < CCAnalogDigitalServiceType.CC1.ordinal())
        // ? CCAnalogDigitalServiceType.CC1.ordinal() : analogcc;
        return analogcc;
!!!12621068.java!!!	setAnalogCC(in analogCC : int) : void
        boolean ccOn = getCCStatus();
        if (ccOn) {
            mTvFramework.getCaptionInstance().setCCStatus(false);
        }
        mTvFramework.getCaptionInstance().SetCaptionData(CloseCaptionPropEnums.EAnalogCC,
                analogCC);
        if (ccOn) {
            mTvFramework.getCaptionInstance().setCCStatus(true);
        }
!!!12621196.java!!!	getDigitalCC() : int
        int digitalcc = mTvFramework.getCaptionInstance().GetCaptionData(
                CloseCaptionPropEnums.EDigitalCC);
        // return (digitalcc < CCAnalogDigitalServiceType.CC1.ordinal())
        // ? CCAnalogDigitalServiceType.CC1.ordinal() : digitalcc;
        return digitalcc;
!!!12621324.java!!!	setDigitalCC(in digitalCC : int) : void
        boolean ccOn = getCCStatus();
        if (ccOn) {
            mTvFramework.getCaptionInstance().setCCStatus(false);
        }
        mTvFramework.getCaptionInstance().SetCaptionData(CloseCaptionPropEnums.EDigitalCC,
                digitalCC);
        if (ccOn) {
            mTvFramework.getCaptionInstance().setCCStatus(true);
        }
!!!12621452.java!!!	reSetClosedCaption() : void
        mTvFramework.getCaptionInstance().resetCaptionSettings();
        // setClosedCaptions(0); // to reset CC flag stored on UI
        mTvFramework.getCaptionInstance().getCaption(); // reload CC settings
!!!12621580.java!!!	setCaptionStyle(inout prop : CloseCaptionPropEnums, in val : int) : void
        boolean ccOn = getCCStatus();
        if (ccOn) {
            mTvFramework.getCaptionInstance().setCCStatus(false);
        }
        mTvFramework.getCaptionInstance().SetCaptionData(prop, val);
        if (ccOn) {
            mTvFramework.getCaptionInstance().setCCStatus(true);
        }
!!!12621708.java!!!	getTextStyle() : int
        return mTvFramework.getCaptionInstance()
                .GetCaptionData(CloseCaptionPropEnums.EFontStyle);
!!!12621836.java!!!	setTextStyle(in textStyle : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EFontStyle, textStyle);
!!!12621964.java!!!	getTextSize() : int
        return mTvFramework.getCaptionInstance().GetCaptionData(CloseCaptionPropEnums.EFontSize);
!!!12622092.java!!!	setTextSize(in textSize : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EFontSize, textSize);
!!!12622220.java!!!	getTextColor() : int
        return mTvFramework.getCaptionInstance().GetCaptionData(
                CloseCaptionPropEnums.EFgFontColor);
!!!12622348.java!!!	setTextColor(in textColor : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EFgFontColor, textColor);
!!!12622476.java!!!	getTextOpacity() : int
        return mTvFramework.getCaptionInstance()
                .GetCaptionData(CloseCaptionPropEnums.EFgFontOpacity);
!!!12622604.java!!!	setTextOpacity(in textOpacity : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EFgFontOpacity, textOpacity);
!!!12622732.java!!!	getTextEdgeColor() : int
        return mTvFramework.getCaptionInstance()
                .GetCaptionData(CloseCaptionPropEnums.EFontEdgeColor);
!!!12622860.java!!!	setTextEdgeColor(in textEdgeColor : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EFontEdgeColor, textEdgeColor);
!!!12622988.java!!!	getTextEdgeType() : int
        return mTvFramework.getCaptionInstance()
                .GetCaptionData(CloseCaptionPropEnums.EFontEdgeType);
!!!12623116.java!!!	setTextEdgeType(in textEdgeType : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EFontEdgeType, textEdgeType);
!!!12623244.java!!!	getBackgroundColor() : int
        return mTvFramework.getCaptionInstance().GetCaptionData(
                CloseCaptionPropEnums.EBgFontColor);
!!!12623372.java!!!	setBackgroundColor(in backgroundColor : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EBgFontColor, backgroundColor);
!!!12623500.java!!!	getBackgroundOpcity() : int
        return mTvFramework.getCaptionInstance()
                .GetCaptionData(CloseCaptionPropEnums.EBgFontOpacity);
!!!12623628.java!!!	setBackgroundOpcity(in backgroundOpcity : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EBgFontOpacity, backgroundOpcity);
!!!12623756.java!!!	getWindowColor() : int
        return mTvFramework.getCaptionInstance().GetCaptionData(CloseCaptionPropEnums.EWinColor);
!!!12623884.java!!!	setWindowColor(in windowColor : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EWinColor, windowColor);
!!!12624012.java!!!	getWindowOpacity() : int
        return mTvFramework.getCaptionInstance().GetCaptionData(
                CloseCaptionPropEnums.EWinOpacity);
!!!12624140.java!!!	setWindowOpacity(in windowOpacity : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EWinOpacity, windowOpacity);
!!!12624268.java!!!	getWindowEdgeColor() : int
        return mTvFramework.getCaptionInstance()
                .GetCaptionData(CloseCaptionPropEnums.EWinEdgeColor);
!!!12624396.java!!!	setWindowEdgeColor(in windowEdgeColor : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EWinEdgeColor, windowEdgeColor);
!!!12624524.java!!!	getWindowEdgeType() : int
        return mTvFramework.getCaptionInstance()
                .GetCaptionData(CloseCaptionPropEnums.EWinEdgeType);
!!!12624652.java!!!	setWindowEdgeType(in windowEdgeType : int) : void
        setCaptionStyle(CloseCaptionPropEnums.EWinEdgeType, windowEdgeType);
!!!12624780.java!!!	getPCEnable() : int
        USDTVPCData pcData = mTvFramework.getParentalControlInstance()
                .getParentalSettings();
        if (pcData != null)
            return pcData.isPcEnable() ? 1 : 0;
        else
            return pcEnable;
!!!12624908.java!!!	setPCEnable(in value : int) : void
        USDTVPCData pcData = mTvFramework.getParentalControlInstance()
                .getParentalSettings();
        if (pcData != null) {
            pcData.setPcEnable(value == 1);
            pcData.setPresetMode(PCPresetModes.PRESET_CUSTOM.ordinal());
            // only custom preset can be modified
            mTvFramework.getParentalControlInstance().setParentalSettings(pcData);
            mTvFramework.getParentalControlInstance().enableNonRfParentalControl(value==1);
        } else {
            pcEnable = value;
        }
!!!12625036.java!!!	getPCRatingEnable() : int
        USDTVPCData pcData = mTvFramework.getParentalControlInstance()
                .getParentalSettings();
        if (pcData != null)
            return pcData.isPcRatingEnable() ? 1 : 0;
        else
            return pcRatingEnable;
!!!12625164.java!!!	setPCRatingEnable(in value : int) : void
        USDTVPCData pcData = mTvFramework.getParentalControlInstance()
                .getParentalSettings();
        if (pcData != null) {
            pcData.setPcRatingEnable(value == 1);
            mTvFramework.getParentalControlInstance().setParentalSettings(pcData);
        } else {
            pcRatingEnable = value;
        }
!!!12625292.java!!!	getUSAMovie() : int
        USDTVUSRating usRating = mTvFramework.getParentalControlInstance()
                .getUSParentalRating();
        if (usRating != null) {
            return usRating.getMpaaRating();
        } else {
            return PCUSMovieRatings.MPAA_NR.ordinal();
        }
!!!12625420.java!!!	setUSAMovie(in value : int) : void
        // unblock lower rating level firstly
        if (value - 1 >= PCUSMovieRatings.MPAA_G.ordinal()) {
            mTvFramework.getParentalControlInstance().setUSParentalRating(
                    PCDimensionRating.US_MPAA, value - 1, false);
        }
        mTvFramework.getParentalControlInstance().setUSParentalRating(
                PCDimensionRating.US_MPAA, value, true);
!!!12625548.java!!!	getCANEnglish() : int
        USDTVCanRating canRating = mTvFramework.getParentalControlInstance()
                .getCanadaParentalRating();
        if (canRating != null) {
            return canRating.getEngRating();
        } else {
            return PCCanadaEnglishRatings.ENG_18.ordinal() + 1; // NR
        }
!!!12625676.java!!!	setCANEnglish(in value : int) : void
        // unblock lower rating level firstly
        if (value - 1 >= PCCanadaEnglishRatings.ENG_CHILD.ordinal()) {
            mTvFramework.getParentalControlInstance().setCanadaParentalRating(
                    PCDimensionRating.CAN_ENG, value - 1, false);
        }
        mTvFramework.getParentalControlInstance().setCanadaParentalRating(
                PCDimensionRating.CAN_ENG, value, true);
!!!12625804.java!!!	getCANFrench() : int
        USDTVCanRating canRating = mTvFramework.getParentalControlInstance()
                .getCanadaParentalRating();
        if (canRating != null) {
            return canRating.getFrenchRating();
        } else {
            return PCCanadaFrenchRating.FRA_18.ordinal() + 1; // NR
        }
!!!12625932.java!!!	setCANFrench(in value : int) : void
        // unblock lower rating level firstly
        if (value - 1 >= PCCanadaFrenchRating.FRA_ALL.ordinal()) {
            mTvFramework.getParentalControlInstance().setCanadaParentalRating(
                    PCDimensionRating.CAN_FRA, value - 1, false);
        }
        mTvFramework.getParentalControlInstance().setCanadaParentalRating(
                PCDimensionRating.CAN_FRA, value, true);
!!!12626060.java!!!	getBlockUnratedShows() : int
        return mTvFramework.getParentalControlInstance().getRatingUnratedGroups(
                PCUSUnratedGroups.GROUP_UR_NA);
!!!12626188.java!!!	setBlockUnratedShows(in value : int) : void
        mTvFramework.getParentalControlInstance().setRatingUnratedGroups(value == 1,
                PCUSUnratedGroups.GROUP_UR_NA);
!!!12626316.java!!!	getVersion() : String
        return Utils.SystemInfo.getString(Utils.SystemInfo.VERSION);
!!!12626444.java!!!	getModuleNumber() : String
        return Utils.SystemInfo.getString(Utils.SystemInfo.MODULE_NUMBER);
!!!12626572.java!!!	getBuildTime() : String
        return Utils.SystemInfo.getString(Utils.SystemInfo.BUILD_TIME);
!!!12626700.java!!!	getGoogleLegal() : String
        return "";
!!!12626828.java!!!	getOpenSourceLiscense() : String
        return "";
!!!12626956.java!!!	getHdmiCec() : int
        int enabled = 0;
        Log.d(TAG, "getHdmiCec mCecManager=" + mCecManager);
        if (mCecManager != null) {
            enabled = mCecManager.isCECEnabled() == true ? 1 : 0;
        }
        Log.d(TAG, "getHdmiCec enabled=" + enabled);
        return enabled;
!!!12627084.java!!!	setHdmiCec(in state : int) : void
        long updateMillis = SystemClock.uptimeMillis();
        if ((updateMillis - CecSettingMillis) >= 1000) {
            if (mCecManager != null) {
                if (state == 1) {
                    Log.d(TAG, "setHdmiCec call enableCEC");
                    mCecManager.enableCEC();
                    if (getTvAutoPowerOn() == 1) {
                        // Notify SM to recover TvAutoPowerOn setting
                        setTvAutoPowerOn(0);
                    }
                } else {
                    Log.d(TAG, "setHdmiCec call disableCEC");
                    mCecManager.disableCEC();
                    // Notify SM to disable TvAutoPowerOn setting
                    setTvAutoPowerOn(0);
                }
            }
            CecSettingMillis = updateMillis;
        } else {
            Log.w(TAG, "Operation is too quick, ignore it.");
        }
!!!12627212.java!!!	getDeviceAutoPowerOff() : int
        int enabled = 0;
        if (mCecManager != null) {
            enabled = mCecManager.isDeviceAutoPowerOffEnabled() == true ? 1 : 0;
        }
        else {
            Log.d(TAG, "getDeviceAutoPowerOff mCecPrefs is null.");
        }
        Log.d(TAG, "getDeviceAutoPowerOff enabled=" + enabled);
        return enabled;
!!!12627340.java!!!	setDeviceAutoPowerOff(in state : int) : void
        if (mCecManager != null) {
            if (state == 1) {
                Log.d(TAG, "setDeviceAutoPowerOff enableDeviceAutoPowerOff");
                mCecManager.enableDeviceAutoPowerOff();
            } else if (state == 0) {
                Log.d(TAG, "setDeviceAutoPowerOff disableDeviceAutoPowerOff");
                mCecManager.disableDeviceAutoPowerOff();
            }
        }
!!!12627468.java!!!	getTvAutoPowerOn() : int
        int enabled = 0;
        if (mCecManager != null) {
            enabled = mCecManager.isTVAutoPowerOnEnabled() == true ? 1 : 0;
        }
        Log.d(TAG, "getTvAutoPowerOn enabled=" + enabled);
        return enabled;
!!!12627596.java!!!	setTvAutoPowerOn(in state : int) : void
        if (mCecManager != null) {
            if (state == 1) {
                Log.d(TAG, "setTvAutoPowerOn call enableTVAutoPowerOn");
                mCecManager.enableTVAutoPowerOn();
            } else {
                Log.d(TAG, "setTvAutoPowerOn call disableTVAutoPowerOn");
                mCecManager.disableTVAutoPowerOn();
            }
        }
!!!12627724.java!!!	getSystemAudioControl() : int
        int enabled = 0;
        if (mCecManager != null) {
            Log.d(TAG, "getSystemAudioControl call isSACEnabled");
            enabled = ((mCecManager.isSystemAudioModeEnabled() == true ? 1 : 0));
        }
        return enabled;
!!!12627852.java!!!	setSystemAudioControl(in state : int) : void
        long updateMillis = SystemClock.uptimeMillis();

        if ((mCecManager != null) && (updateMillis - sacSettingMillis) >= 1500) {
            if (state == 1) {
                Log.d(TAG, "setSystemAudioControl call enableSystemAudioMode");
                mCecManager.enableSystemAudioMode();
            } else {
                Log.d(TAG, "setSystemAudioControl call disableSystemAudioMode");
                mCecManager.disableSystemAudioMode();
            }
            sacSettingMillis = updateMillis;
        } else {
            Log.w(TAG, "Operation is too quick, ignore it.");
        }
!!!12627980.java!!!	getSleepTimer() : int
        return SleepTimer;
!!!12628108.java!!!	setSleepTimer(in sleepTimer : int) : void
        SleepTimer = sleepTimer;
        Utils.startSleepTimer(mContext, sleepTimer * Utils.ONE_MINUTE);
!!!12628236.java!!!	getWakeupTimer() : int
        return wakeupTimer;
!!!12628364.java!!!	setWakeupTimer(in value : int) : void
        wakeupTimer = value;
        if (value == 0) {
            mTvFramework.getSystemInstance()
                    .setSysPowerOnOffTimer(PowerOnOffTimer.STOP_POWERON_TIMER, 0);
        } else {
            mTvFramework.getSystemInstance()
                    .setSysPowerOnOffTimer(PowerOnOffTimer.START_POWERON_TIMER, value * 60);
        }
!!!12628492.java!!!	setAutoPowerOff(in value : int) : void
        if (mTvDatabase.getIntValue(mContext, "autoPowerOff", 0) != value) {
            mTvDatabase.setIntValue(mContext, "autoPowerOff", value);
        }

        //int fourhour = 4 * 60;
        //Utils.startAutoPowerOffTimer(mContext, (value != 0) ? fourhour * Utils.ONE_MINUTE : 0);

        IBinder powerServiceBinder = Utils.getServiceBinder(Context.POWER_SERVICE);
        IPowerManager powerManager = IPowerManager.Stub.asInterface(powerServiceBinder);
        if (powerManager != null) {
            try {
                if (value == 0) {
                    // if the request is not to set it to false, wake up the screen so that
                    // it can stay on as requested
                    powerManager.wakeUp(SystemClock.uptimeMillis());
                    powerManager.setStayOnSetting(BatteryManager.BATTERY_PLUGGED_AC);
                    Log.d(TAG, "disable auto-standby");
                } else {
                    powerManager.setStayOnSetting(BatteryManager.BATTERY_PLUGGED_USB);
                    Log.d(TAG, "enable auto-standby");
                }
            } catch (RemoteException e) {
                System.err.println("Faild to setAutoPowerOff: " + e);
            }
        }
!!!12628620.java!!!	getAutoPowerOff() : int
        return mTvDatabase.getIntValue(mContext, "autoPowerOff", 0);
!!!12628748.java!!!	setNoSignalTimer(in value : int) : void
        if (mTvDatabase.getIntValue(mContext, "noSignalTimer", 0) != value) {
            mTvDatabase.setIntValue(mContext, "noSignalTimer", value);
        }

        Utils.startNoSignalTimer(mContext, value * Utils.ONE_MINUTE);
!!!12628876.java!!!	getNoSignalTimer() : int
        return mTvDatabase.getIntValue(mContext, "noSignalTimer", 0);
!!!12629004.java!!!	getMenuLanguage() : int
        final Locale currentLocale = mContext.getResources().getConfiguration().locale;
        int index = Arrays.asList(mContext.getResources().getStringArray(R.array.language_code))
                .indexOf(currentLocale.getLanguage());
        return index == -1 ? 0 : index;
!!!12629132.java!!!	setMenuLanguage(in menuLanguage : int) : void
        mMenuLanguage = menuLanguage;
        Log.d(TAG, "setMenuLanguage=" + menuLanguage);
        if (mLanguageRunnable == null) {
            mLanguageRunnable = new Runnable() {

                @Override
                public void run() {
                    updateLanguage(mMenuLanguage);
                }
            };
        }
        runInNonUiThread(mLanguageRunnable, 1500);
!!!12629260.java!!!	updateLanguage(in menuLanguage : int) : void
        Log.d(TAG, "updateLanguage:" + menuLanguage);
        Locale currentLocale = mContext.getResources().getConfiguration().locale;
        Locale locale = new Locale(
                mContext.getResources().getStringArray(R.array.language_code)[menuLanguage],
                currentLocale.getCountry());
        Object[] argArray = new Object[1];
        argArray[0] = locale;
        Utils.invokeStaticMethod("com.android.internal.app.LocalePicker",
                "updateLocale", argArray);
!!!12629388.java!!!	getEASLevel() : int
        return mTvFramework.getAtscSpecificInstance().getEASLevel().ordinal();
!!!12629516.java!!!	setEASLevel(in value : int) : void
        mTvFramework.getAtscSpecificInstance().setEASLevel(
                ChannelEnumClass.EASSettings.values()[value]);
!!!12629644.java!!!	setInputDetect(in value : int) : void
        if (getInputDetect() != value) {
            mTvDatabase.setIntValue(mContext, KEY_INPUT_DETECT, value);
        }
!!!12629772.java!!!	getInputDetect() : int
        return mTvDatabase.getIntValue(mContext, KEY_INPUT_DETECT, 0);
!!!12629900.java!!!	resetUser() : void
        // notify TV factory reset
        if (mContext != null) {
            Intent i = new Intent("com.marvell.willowtv.TV_FACTORY_RESETED");
            mContext.startService(i);
        }
        FactorySettingJNIWrapper.getInstance().DoResetUser(RESET_PARAM.MASTER_CLEAR.ordinal());
!!!12630028.java!!!	getLRSwap() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode3DLRSwap);
!!!12630156.java!!!	setLRSwap(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode3DLRSwap,
                value);
!!!12630284.java!!!	getInput3Dto2D() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode3Dto2D);
!!!12630412.java!!!	setInput3Dto2D(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode3Dto2D,
                value);
!!!12630540.java!!!	getInput2Dto3D() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode2Dto3D);
!!!12630668.java!!!	setInput2Dto3D(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode2Dto3D,
                value);
!!!12630796.java!!!	getInput2Dto3DDepth() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode2Dto3DDepth);
!!!12630924.java!!!	setInput2Dto3DDepth(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode2Dto3DDepth,
                value);
!!!12631052.java!!!	getInput2Dto3DAngle() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode2Dto3DAngle);
!!!12631180.java!!!	setInput2Dto3DAngle(in value : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode2Dto3DAngle,
                value);
!!!12631308.java!!!	getInput3D() : int
        return mTvFramework.getPictureInstance().getVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode3D);
!!!12631436.java!!!	setInput3D(in input3d : int) : void
        mTvFramework.getPictureInstance().setVideoProperty(getCurrentSource(),
                TvPictureProperty.TV_PICTURE_Mode3D,
                input3d);
!!!12631564.java!!!	allowRatingOrCaption() : boolean
        boolean ret = false;
        int srcType = getCurrentSourceType();
        if (srcType == TvSourceType.TV_SOURCE_TypeAtv.value()
                || srcType == TvSourceType.TV_SOURCE_TypeDtv.value()
                || srcType == TvSourceType.TV_SOURCE_TypeCvbs.value()) {
            ret = true;
        } else if (srcType == TvSourceType.TV_SOURCE_TypeComponent.value()) {
            /* for Component input, only SD(480i) is supported Rating or CC */
            VideoInfoUpdate videoInfo = TvFramework.getInstance().getVideoInfo(
                    Utils.getTvRemoteService());
            if (videoInfo != null && videoInfo.getActiveHeight() <= 480
                    && videoInfo.getIsInterlaced() == 1) {
                ret = true;
            }
        }
        return ret;
!!!12631692.java!!!	isDigitalChannel() : boolean
        if (getCurrentSource() == TvSource.TV_SourceDtv.value()) {
            LiveTv liveTv = TvFramework.getInstance().getLiveTvInstance();
            USDTVServiceData currentChannel = liveTv.getCurrentService();
            if (currentChannel != null
                    && currentChannel.getServiceType() ==
                    ChannelType.DIGITAL_TELEVISION.ordinal()) {
                return true;
            }
        }
        return false;
!!!12631820.java!!!	isTunerInput() : boolean
        int currSrc = getCurrentSource();
        if (currSrc == TvSource.TV_SourceAtv.value()
                || currSrc == TvSource.TV_SourceDtv.value()) {
            return true;
        } else {
            return false;
        }
!!!12631948.java!!!	isAnalogVideoInput() : boolean
        int srcType = getCurrentSourceType();
        if (srcType == TvSourceType.TV_SOURCE_TypeComponent.value()
                || srcType == TvSourceType.TV_SOURCE_TypeCvbs.value()
                || srcType == TvSourceType.TV_SOURCE_TypeHdmi.value()
                || srcType == TvSourceType.TV_SOURCE_TypeVga.value()) {
            return true;
        } else {
            return false;
        }
!!!12632076.java!!!	isStreamInput() : boolean
        int srcType = getCurrentSourceType();
        if (srcType == TvSourceType.TV_SOURCE_TypeStream.value()) {
            return true;
        } else {
            return false;
        }
!!!12632204.java!!!	runInNonUiThread(inout runnable : Runnable, in delay : int) : void
        Handler handler = USDTVMessageQueue.getMsgQueueHandler();
        handler.removeCallbacks(runnable);
        if (delay != 0)
            handler.postDelayed(runnable, delay);
        else
            handler.post(runnable);
!!!12632332.java!!!	runInNonUiNewThread(in runnable : Runnable, in delay : int) : Runnable
        Runnable shellRunnable = new Runnable() {
            @Override
            public void run() {
                new Thread(runnable).start();
            }
        };
        runInNonUiThread(shellRunnable, delay);
        return shellRunnable;
!!!12632460.java!!!	cancelNonUiRunnable(inout runnable : Runnable) : void
        Handler handler = USDTVMessageQueue.getMsgQueueHandler();
        handler.removeCallbacks(runnable);
!!!12632588.java!!!	isEASEnabled() : boolean
        // @todo
        return false;
