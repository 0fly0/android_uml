class BufferedWriter
!!!151195.java!!!	BufferedWriter(inout out : Writer)
        this(out, 8192);
!!!151323.java!!!	BufferedWriter(inout out : Writer, in size : int)
        super(out);
        if (size <= 0) {
            throw new IllegalArgumentException("size <= 0");
        }
        this.out = out;
        this.buf = new char[size];
!!!151451.java!!!	close() : void
        synchronized (lock) {
            if (isClosed()) {
                return;
            }

            Throwable thrown = null;
            try {
                flushInternal();
            } catch (Throwable e) {
                thrown = e;
            }
            buf = null;

            try {
                out.close();
            } catch (Throwable e) {
                if (thrown == null) {
                    thrown = e;
                }
            }
            out = null;

            if (thrown != null) {
                SneakyThrow.sneakyThrow(thrown);
            }
        }
!!!151579.java!!!	flush() : void
        synchronized (lock) {
            checkNotClosed();
            flushInternal();
            out.flush();
        }
!!!151707.java!!!	checkNotClosed() : void
        if (isClosed()) {
            throw new IOException("BufferedWriter is closed");
        }
!!!151835.java!!!	flushInternal() : void
        if (pos > 0) {
            out.write(buf, 0, pos);
        }
        pos = 0;
!!!151963.java!!!	isClosed() : boolean
        return out == null;
!!!152091.java!!!	newLine() : void
        write(System.lineSeparator());
!!!152219.java!!!	write(inout buffer : char, in offset : int, in count : int) : void
        synchronized (lock) {
            checkNotClosed();
            if (buffer == null) {
                throw new NullPointerException("buffer == null");
            }
            Arrays.checkOffsetAndCount(buffer.length, offset, count);
            if (pos == 0 && count >= this.buf.length) {
                out.write(buffer, offset, count);
                return;
            }
            int available = this.buf.length - pos;
            if (count < available) {
                available = count;
            }
            if (available > 0) {
                System.arraycopy(buffer, offset, this.buf, pos, available);
                pos += available;
            }
            if (pos == this.buf.length) {
                out.write(this.buf, 0, this.buf.length);
                pos = 0;
                if (count > available) {
                    offset += available;
                    available = count - available;
                    if (available >= this.buf.length) {
                        out.write(buffer, offset, available);
                        return;
                    }

                    System.arraycopy(buffer, offset, this.buf, pos, available);
                    pos += available;
                }
            }
        }
!!!152347.java!!!	write(in oneChar : int) : void
        synchronized (lock) {
            checkNotClosed();
            if (pos >= buf.length) {
                out.write(buf, 0, buf.length);
                pos = 0;
            }
            buf[pos++] = (char) oneChar;
        }
!!!152475.java!!!	write(inout str : String, in offset : int, in count : int) : void
        synchronized (lock) {
            checkNotClosed();
            if (count <= 0) {
                return;
            }
            if (offset < 0 || offset > str.length() - count) {
                throw new StringIndexOutOfBoundsException(str, offset, count);
            }
            if (pos == 0 && count >= buf.length) {
                char[] chars = new char[count];
                str.getChars(offset, offset + count, chars, 0);
                out.write(chars, 0, count);
                return;
            }
            int available = buf.length - pos;
            if (count < available) {
                available = count;
            }
            if (available > 0) {
                str.getChars(offset, offset + available, buf, pos);
                pos += available;
            }
            if (pos == buf.length) {
                out.write(this.buf, 0, this.buf.length);
                pos = 0;
                if (count > available) {
                    offset += available;
                    available = count - available;
                    if (available >= buf.length) {
                        char[] chars = new char[count];
                        str.getChars(offset, offset + available, chars, 0);
                        out.write(chars, 0, available);
                        return;
                    }
                    str.getChars(offset, offset + available, buf, pos);
                    pos += available;
                }
            }
        }
