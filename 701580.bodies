class ViewPropertyAnimator
!!!4624908.java!!!	ViewPropertyAnimator(inout view : View)
        mView = view;
        view.ensureTransformationInfo();
!!!4625036.java!!!	setDuration(in duration : long) : ViewPropertyAnimator
        if (duration < 0) {
            throw new IllegalArgumentException("Animators cannot have negative duration: " +
                    duration);
        }
        mDurationSet = true;
        mDuration = duration;
        return this;
!!!4625164.java!!!	getDuration() : long
        if (mDurationSet) {
            return mDuration;
        } else {
            // Just return the default from ValueAnimator, since that's what we'd get if
            // the value has not been set otherwise
            return new ValueAnimator().getDuration();
        }
!!!4625292.java!!!	getStartDelay() : long
        if (mStartDelaySet) {
            return mStartDelay;
        } else {
            // Just return the default from ValueAnimator (0), since that's what we'd get if
            // the value has not been set otherwise
            return 0;
        }
!!!4625420.java!!!	setStartDelay(in startDelay : long) : ViewPropertyAnimator
        if (startDelay < 0) {
            throw new IllegalArgumentException("Animators cannot have negative duration: " +
                    startDelay);
        }
        mStartDelaySet = true;
        mStartDelay = startDelay;
        return this;
!!!4625548.java!!!	setInterpolator(inout interpolator : TimeInterpolator) : ViewPropertyAnimator
        mInterpolatorSet = true;
        mInterpolator = interpolator;
        return this;
!!!4625676.java!!!	setListener(inout listener : AnimatorListener) : ViewPropertyAnimator
        mListener = listener;
        return this;
!!!4625804.java!!!	start() : void
        mView.removeCallbacks(mAnimationStarter);
        startAnimation();
!!!4625932.java!!!	cancel() : void
        if (mAnimatorMap.size() > 0) {
            HashMap<Animator, PropertyBundle> mAnimatorMapCopy =
                    (HashMap<Animator, PropertyBundle>)mAnimatorMap.clone();
            Set<Animator> animatorSet = mAnimatorMapCopy.keySet();
            for (Animator runningAnim : animatorSet) {
                runningAnim.cancel();
            }
        }
        mPendingAnimations.clear();
        mView.removeCallbacks(mAnimationStarter);
!!!4626060.java!!!	x(in value : float) : ViewPropertyAnimator
        animateProperty(X, value);
        return this;
!!!4626188.java!!!	xBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(X, value);
        return this;
!!!4626316.java!!!	y(in value : float) : ViewPropertyAnimator
        animateProperty(Y, value);
        return this;
!!!4626444.java!!!	yBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(Y, value);
        return this;
!!!4626572.java!!!	rotation(in value : float) : ViewPropertyAnimator
        animateProperty(ROTATION, value);
        return this;
!!!4626700.java!!!	rotationBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(ROTATION, value);
        return this;
!!!4626828.java!!!	rotationX(in value : float) : ViewPropertyAnimator
        animateProperty(ROTATION_X, value);
        return this;
!!!4626956.java!!!	rotationXBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(ROTATION_X, value);
        return this;
!!!4627084.java!!!	rotationY(in value : float) : ViewPropertyAnimator
        animateProperty(ROTATION_Y, value);
        return this;
!!!4627212.java!!!	rotationYBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(ROTATION_Y, value);
        return this;
!!!4627340.java!!!	translationX(in value : float) : ViewPropertyAnimator
        animateProperty(TRANSLATION_X, value);
        return this;
!!!4627468.java!!!	translationXBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(TRANSLATION_X, value);
        return this;
!!!4627596.java!!!	translationY(in value : float) : ViewPropertyAnimator
        animateProperty(TRANSLATION_Y, value);
        return this;
!!!4627724.java!!!	translationYBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(TRANSLATION_Y, value);
        return this;
!!!4627852.java!!!	scaleX(in value : float) : ViewPropertyAnimator
        animateProperty(SCALE_X, value);
        return this;
!!!4627980.java!!!	scaleXBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(SCALE_X, value);
        return this;
!!!4628108.java!!!	scaleY(in value : float) : ViewPropertyAnimator
        animateProperty(SCALE_Y, value);
        return this;
!!!4628236.java!!!	scaleYBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(SCALE_Y, value);
        return this;
!!!4628364.java!!!	alpha(in value : float) : ViewPropertyAnimator
        animateProperty(ALPHA, value);
        return this;
!!!4628492.java!!!	alphaBy(in value : float) : ViewPropertyAnimator
        animatePropertyBy(ALPHA, value);
        return this;
!!!4628620.java!!!	withLayer() : ViewPropertyAnimator
         mPendingSetupAction= new Runnable() {
            @Override
            public void run() {
                mView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
            }
        };
        final int currentLayerType = mView.getLayerType();
        mPendingCleanupAction = new Runnable() {
            @Override
            public void run() {
                mView.setLayerType(currentLayerType, null);
            }
        };
        if (mAnimatorSetupMap == null) {
            mAnimatorSetupMap = new HashMap<Animator, Runnable>();
        }
        if (mAnimatorCleanupMap == null) {
            mAnimatorCleanupMap = new HashMap<Animator, Runnable>();
        }

        return this;
!!!4628748.java!!!	withStartAction(inout runnable : Runnable) : ViewPropertyAnimator
        mPendingOnStartAction = runnable;
        if (runnable != null && mAnimatorOnStartMap == null) {
            mAnimatorOnStartMap = new HashMap<Animator, Runnable>();
        }
        return this;
!!!4628876.java!!!	withEndAction(inout runnable : Runnable) : ViewPropertyAnimator
        mPendingOnEndAction = runnable;
        if (runnable != null && mAnimatorOnEndMap == null) {
            mAnimatorOnEndMap = new HashMap<Animator, Runnable>();
        }
        return this;
!!!4629004.java!!!	startAnimation() : void
        mView.setHasTransientState(true);
        ValueAnimator animator = ValueAnimator.ofFloat(1.0f);
        ArrayList<NameValuesHolder> nameValueList =
                (ArrayList<NameValuesHolder>) mPendingAnimations.clone();
        mPendingAnimations.clear();
        int propertyMask = 0;
        int propertyCount = nameValueList.size();
        for (int i = 0; i < propertyCount; ++i) {
            NameValuesHolder nameValuesHolder = nameValueList.get(i);
            propertyMask |= nameValuesHolder.mNameConstant;
        }
        mAnimatorMap.put(animator, new PropertyBundle(propertyMask, nameValueList));
        if (mPendingSetupAction != null) {
            mAnimatorSetupMap.put(animator, mPendingSetupAction);
            mPendingSetupAction = null;
        }
        if (mPendingCleanupAction != null) {
            mAnimatorCleanupMap.put(animator, mPendingCleanupAction);
            mPendingCleanupAction = null;
        }
        if (mPendingOnStartAction != null) {
            mAnimatorOnStartMap.put(animator, mPendingOnStartAction);
            mPendingOnStartAction = null;
        }
        if (mPendingOnEndAction != null) {
            mAnimatorOnEndMap.put(animator, mPendingOnEndAction);
            mPendingOnEndAction = null;
        }
        animator.addUpdateListener(mAnimatorEventListener);
        animator.addListener(mAnimatorEventListener);
        if (mStartDelaySet) {
            animator.setStartDelay(mStartDelay);
        }
        if (mDurationSet) {
            animator.setDuration(mDuration);
        }
        if (mInterpolatorSet) {
            animator.setInterpolator(mInterpolator);
        }
        animator.start();
!!!4629132.java!!!	animateProperty(in constantName : int, in toValue : float) : void
        float fromValue = getValue(constantName);
        float deltaValue = toValue - fromValue;
        animatePropertyBy(constantName, fromValue, deltaValue);
!!!4629260.java!!!	animatePropertyBy(in constantName : int, in byValue : float) : void
        float fromValue = getValue(constantName);
        animatePropertyBy(constantName, fromValue, byValue);
!!!4629388.java!!!	animatePropertyBy(in constantName : int, in startValue : float, in byValue : float) : void
        // First, cancel any existing animations on this property
        if (mAnimatorMap.size() > 0) {
            Animator animatorToCancel = null;
            Set<Animator> animatorSet = mAnimatorMap.keySet();
            for (Animator runningAnim : animatorSet) {
                PropertyBundle bundle = mAnimatorMap.get(runningAnim);
                if (bundle.cancel(constantName)) {
                    // property was canceled - cancel the animation if it's now empty
                    // Note that it's safe to break out here because every new animation
                    // on a property will cancel a previous animation on that property, so
                    // there can only ever be one such animation running.
                    if (bundle.mPropertyMask == NONE) {
                        // the animation is no longer changing anything - cancel it
                        animatorToCancel = runningAnim;
                        break;
                    }
                }
            }
            if (animatorToCancel != null) {
                animatorToCancel.cancel();
            }
        }

        NameValuesHolder nameValuePair = new NameValuesHolder(constantName, startValue, byValue);
        mPendingAnimations.add(nameValuePair);
        mView.removeCallbacks(mAnimationStarter);
        mView.post(mAnimationStarter);
!!!4629516.java!!!	setValue(in propertyConstant : int, in value : float) : void
        final View.TransformationInfo info = mView.mTransformationInfo;
        final DisplayList displayList = mView.mDisplayList;
        switch (propertyConstant) {
            case TRANSLATION_X:
                info.mTranslationX = value;
                if (displayList != null) displayList.setTranslationX(value);
                break;
            case TRANSLATION_Y:
                info.mTranslationY = value;
                if (displayList != null) displayList.setTranslationY(value);
                break;
            case ROTATION:
                info.mRotation = value;
                if (displayList != null) displayList.setRotation(value);
                break;
            case ROTATION_X:
                info.mRotationX = value;
                if (displayList != null) displayList.setRotationX(value);
                break;
            case ROTATION_Y:
                info.mRotationY = value;
                if (displayList != null) displayList.setRotationY(value);
                break;
            case SCALE_X:
                info.mScaleX = value;
                if (displayList != null) displayList.setScaleX(value);
                break;
            case SCALE_Y:
                info.mScaleY = value;
                if (displayList != null) displayList.setScaleY(value);
                break;
            case X:
                info.mTranslationX = value - mView.mLeft;
                if (displayList != null) displayList.setTranslationX(value - mView.mLeft);
                break;
            case Y:
                info.mTranslationY = value - mView.mTop;
                if (displayList != null) displayList.setTranslationY(value - mView.mTop);
                break;
            case ALPHA:
                info.mAlpha = value;
                if (displayList != null) displayList.setAlpha(value);
                break;
        }
!!!4629644.java!!!	getValue(in propertyConstant : int) : float
        final View.TransformationInfo info = mView.mTransformationInfo;
        switch (propertyConstant) {
            case TRANSLATION_X:
                return info.mTranslationX;
            case TRANSLATION_Y:
                return info.mTranslationY;
            case ROTATION:
                return info.mRotation;
            case ROTATION_X:
                return info.mRotationX;
            case ROTATION_Y:
                return info.mRotationY;
            case SCALE_X:
                return info.mScaleX;
            case SCALE_Y:
                return info.mScaleY;
            case X:
                return mView.mLeft + info.mTranslationX;
            case Y:
                return mView.mTop + info.mTranslationY;
            case ALPHA:
                return info.mAlpha;
        }
        return 0;
