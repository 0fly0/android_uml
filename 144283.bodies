class Field
!!!470683.java!!!	Field(inout orig : Field)
        this(orig.declaringClass, orig.type, orig.name, orig.slot);

        // Copy the accessible flag.
        if (orig.flag) {
            this.flag = true;
        }
!!!470811.java!!!	Field(inout declaringClass : Class, inout type : Class, inout name : String, in slot : int)
        this.declaringClass = declaringClass;
        this.type = type;
        this.name = name;
        this.slot = slot;
!!!470939.java!!!	initGenericType() : void
        if (!genericTypesAreInitialized) {
            String signatureAttribute = getSignatureAttribute();
            GenericSignatureParser parser = new GenericSignatureParser(
                    declaringClass.getClassLoader());
            parser.parseForField(this.declaringClass, signatureAttribute);
            genericType = parser.fieldType;
            if (genericType == null) {
                genericType = getType();
            }
            genericTypesAreInitialized = true;
        }
!!!471067.java!!!	getSignatureAttribute() : String
        Object[] annotation = getSignatureAnnotation(declaringClass, slot);

        if (annotation == null) {
            return null;
        }

        return StringUtils.combineStrings(annotation);
!!!471323.java!!!	isSynthetic() : boolean
        int flags = getFieldModifiers(declaringClass, slot);
        return (flags & Modifier.SYNTHETIC) != 0;
!!!471451.java!!!	toGenericString() : String
        StringBuilder sb = new StringBuilder(80);
        // append modifiers if any
        int modifier = getModifiers();
        if (modifier != 0) {
            sb.append(Modifier.toString(modifier)).append(' ');
        }
        // append generic type
        appendGenericType(sb, getGenericType());
        sb.append(' ');
        // append full field name
        sb.append(getDeclaringClass().getName()).append('.').append(getName());
        return sb.toString();
!!!471579.java!!!	isEnumConstant() : boolean
        int flags = getFieldModifiers(declaringClass, slot);
        return (flags & Modifier.ENUM) != 0;
!!!471707.java!!!	getGenericType() : Type
        initGenericType();
        return Types.getType(genericType);
!!!471835.java!!!	getDeclaredAnnotations() : Annotation
        return getDeclaredAnnotations(declaringClass, slot);
!!!472091.java!!!	getAnnotation(inout annotationType : Class) : A
        if (annotationType == null) {
            throw new NullPointerException("annotationType == null");
        }
        return getAnnotation(declaringClass, slot, annotationType);
!!!472347.java!!!	isAnnotationPresent(inout annotationType : Class) : boolean
        if (annotationType == null) {
            throw new NullPointerException("annotationType == null");
        }
        return isAnnotationPresent(declaringClass, slot, annotationType);
!!!472603.java!!!	equals(inout object : Object) : boolean
        return object instanceof Field && toString().equals(object.toString());
!!!472731.java!!!	get(inout object : Object) : Object
        return getField(object, declaringClass, type, slot, flag);
!!!472859.java!!!	getBoolean(inout object : Object) : boolean
        return getZField(object, declaringClass, type, slot, flag, TYPE_BOOLEAN);
!!!472987.java!!!	getByte(inout object : Object) : byte
        return getBField(object, declaringClass, type, slot, flag, TYPE_BYTE);
!!!473115.java!!!	getChar(inout object : Object) : char
        return getCField(object, declaringClass, type, slot, flag, TYPE_CHAR);
!!!473243.java!!!	getDeclaringClass() : Class
        return declaringClass;
!!!473371.java!!!	getDouble(inout object : Object) : double
        return getDField(object, declaringClass, type, slot, flag, TYPE_DOUBLE);
!!!473499.java!!!	getFloat(inout object : Object) : float
        return getFField(object, declaringClass, type, slot, flag, TYPE_FLOAT);
!!!473627.java!!!	getInt(inout object : Object) : int
        return getIField(object, declaringClass, type, slot, flag, TYPE_INTEGER);
!!!473755.java!!!	getLong(inout object : Object) : long
        return getJField(object, declaringClass, type, slot, flag, TYPE_LONG);
!!!473883.java!!!	getModifiers() : int
        return getFieldModifiers(declaringClass, slot);
!!!474139.java!!!	getName() : String
        return name;
!!!474267.java!!!	getShort(inout object : Object) : short
        return getSField(object, declaringClass, type, slot, flag, TYPE_SHORT);
!!!474395.java!!!	getSignature() : String
        return getSignature(type);
!!!474523.java!!!	getType() : Class
        return type;
!!!474651.java!!!	hashCode() : int
        return name.hashCode() ^ getDeclaringClass().getName().hashCode();
!!!474779.java!!!	set(inout object : Object, inout value : Object) : void
        setField(object, declaringClass, type, slot, flag, value);
!!!474907.java!!!	setBoolean(inout object : Object, inout value : boolean) : void
        setZField(object, declaringClass, type, slot, flag, TYPE_BOOLEAN, value);
!!!475035.java!!!	setByte(inout object : Object, in value : byte) : void
        setBField(object, declaringClass, type, slot, flag, TYPE_BYTE, value);
!!!475163.java!!!	setChar(inout object : Object, in value : char) : void
        setCField(object, declaringClass, type, slot, flag, TYPE_CHAR, value);
!!!475291.java!!!	setDouble(inout object : Object, in value : double) : void
        setDField(object, declaringClass, type, slot, flag, TYPE_DOUBLE, value);
!!!475419.java!!!	setFloat(inout object : Object, in value : float) : void
        setFField(object, declaringClass, type, slot, flag, TYPE_FLOAT, value);
!!!475547.java!!!	setInt(inout object : Object, in value : int) : void
        setIField(object, declaringClass, type, slot, flag, TYPE_INTEGER, value);
!!!475675.java!!!	setLong(inout object : Object, in value : long) : void
        setJField(object, declaringClass, type, slot, flag, TYPE_LONG, value);
!!!475803.java!!!	setShort(inout object : Object, in value : short) : void
        setSField(object, declaringClass, type, slot, flag, TYPE_SHORT, value);
!!!475931.java!!!	toString() : String
        StringBuilder result = new StringBuilder(Modifier.toString(getModifiers()));
        if (result.length() != 0) {
            result.append(' ');
        }
        appendTypeName(result, type);
        result.append(' ');
        appendTypeName(result, declaringClass);
        result.append('.');
        result.append(name);
        return result.toString();
