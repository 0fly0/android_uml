class ExpandableBinaryDictionary
!!!12775436.java!!!	getSharedDictionaryController(in filename : String) : DictionaryController
        DictionaryController controller = sSharedDictionaryControllers.get(filename);
        if (controller == null) {
            controller = new DictionaryController();
            sSharedDictionaryControllers.put(filename, controller);
        }
        return controller;
!!!12775564.java!!!	ExpandableBinaryDictionary(in context : Context, in filename : String, in dictType : int)
        mDicTypeId = dictType;
        mFilename = filename;
        mContext = context;
        mBinaryDictionary = null;
        mSharedDictionaryController = getSharedDictionaryController(filename);
        clearFusionDictionary();
!!!12775692.java!!!	getFilenameWithLocale(in name : String, in localeStr : String) : String
        return name + "." + localeStr + ".dict";
!!!12775820.java!!!	close() : void
        // Ensure that no other threads are accessing the local binary dictionary.
        mLocalDictionaryController.lock();
        try {
            if (mBinaryDictionary != null) {
                mBinaryDictionary.close();
                mBinaryDictionary = null;
            }
        } finally {
            mLocalDictionaryController.unlock();
        }
!!!12775948.java!!!	clearFusionDictionary() : void
        mFusionDictionary = new FusionDictionary(new Node(),
                new FusionDictionary.DictionaryOptions(new HashMap<String, String>(), false, 
                        false));
!!!12776076.java!!!	addWord(in word : String, in shortcutTarget : String, in frequency : int) : void
        if (shortcutTarget == null) {
            mFusionDictionary.add(word, frequency, null);
        } else {
            // TODO: Do this in the subclass, with this class taking an arraylist.
            final ArrayList<WeightedString> shortcutTargets = new ArrayList<WeightedString>();
            shortcutTargets.add(new WeightedString(shortcutTarget, frequency));
            mFusionDictionary.add(word, frequency, shortcutTargets);
        }
!!!12776204.java!!!	setBigram(in prevWord : String, in word : String, in frequency : int) : void
        mFusionDictionary.setBigram(prevWord, word, frequency);
!!!12776332.java!!!	getWords(in codes : WordComposer, in prevWordForBigrams : CharSequence, in callback : WordCallback, in proximityInfo : ProximityInfo) : void
        asyncReloadDictionaryIfRequired();
        getWordsInner(codes, prevWordForBigrams, callback, proximityInfo);
!!!12776460.java!!!	getWordsInner(in codes : WordComposer, in prevWordForBigrams : CharSequence, in callback : WordCallback, in proximityInfo : ProximityInfo) : void
        // Ensure that there are no concurrent calls to getWords. If there are, do nothing and
        // return.
        if (mLocalDictionaryController.tryLock()) {
            try {
                if (mBinaryDictionary != null) {
                    mBinaryDictionary.getWords(codes, prevWordForBigrams, callback, proximityInfo);
                }
            } finally {
                mLocalDictionaryController.unlock();
            }
        }
!!!12776588.java!!!	getBigrams(in codes : WordComposer, in previousWord : CharSequence, in callback : WordCallback) : void
        asyncReloadDictionaryIfRequired();
        getBigramsInner(codes, previousWord, callback);
!!!12776716.java!!!	getBigramsInner(in codes : WordComposer, in previousWord : CharSequence, in callback : WordCallback) : void
        if (mLocalDictionaryController.tryLock()) {
            try {
                if (mBinaryDictionary != null) {
                    mBinaryDictionary.getBigrams(codes, previousWord, callback);
                }
            } finally {
                mLocalDictionaryController.unlock();
            }
        }
!!!12776844.java!!!	isValidWord(in word : CharSequence) : boolean
        asyncReloadDictionaryIfRequired();
        return isValidWordInner(word);
!!!12776972.java!!!	isValidWordInner(in word : CharSequence) : boolean
        if (mLocalDictionaryController.tryLock()) {
            try {
                return isValidWordLocked(word);
            } finally {
                mLocalDictionaryController.unlock();
            }
        }
        return false;
!!!12777100.java!!!	isValidWordLocked(in word : CharSequence) : boolean
        if (mBinaryDictionary == null) return false;
        return mBinaryDictionary.isValidWord(word);
!!!12777228.java!!!	isValidBigram(in word1 : CharSequence, in word2 : CharSequence) : boolean
        if (mBinaryDictionary == null) return false;
        return mBinaryDictionary.isValidBigram(word1, word2);
!!!12777356.java!!!	isValidBigramInner(in word1 : CharSequence, in word2 : CharSequence) : boolean
        if (mLocalDictionaryController.tryLock()) {
            try {
                return isValidBigramLocked(word1, word2);
            } finally {
                mLocalDictionaryController.unlock();
            }
        }
        return false;
!!!12777484.java!!!	isValidBigramLocked(in word1 : CharSequence, in word2 : CharSequence) : boolean
        if (mBinaryDictionary == null) return false;
        return mBinaryDictionary.isValidBigram(word1, word2);
!!!12777612.java!!!	loadDictionary() : void
        mLocalDictionaryController.mLastUpdateRequestTime = SystemClock.uptimeMillis();
        asyncReloadDictionaryIfRequired();
!!!12777740.java!!!	loadBinaryDictionary() : void
        if (DEBUG) {
            Log.d(TAG, "Loading binary dictionary: " + mFilename + " request="
                    + mSharedDictionaryController.mLastUpdateRequestTime + " update="
                    + mSharedDictionaryController.mLastUpdateTime);
        }

        final File file = new File(mContext.getFilesDir(), mFilename);
        final String filename = file.getAbsolutePath();
        final long length = file.length();

        // Build the new binary dictionary
        final BinaryDictionary newBinaryDictionary =
                new BinaryDictionary(mContext, filename, 0, length, true /* useFullEditDistance */,
                        null);

        if (mBinaryDictionary != null) {
            // Ensure all threads accessing the current dictionary have finished before swapping in
            // the new one.
            final BinaryDictionary oldBinaryDictionary = mBinaryDictionary;
            mLocalDictionaryController.lock();
            mBinaryDictionary = newBinaryDictionary;
            mLocalDictionaryController.unlock();
            oldBinaryDictionary.close();
        } else {
            mBinaryDictionary = newBinaryDictionary;
        }
!!!12777868.java!!!	generateBinaryDictionary() : void
        if (DEBUG) {
            Log.d(TAG, "Generating binary dictionary: " + mFilename + " request="
                    + mSharedDictionaryController.mLastUpdateRequestTime + " update="
                    + mSharedDictionaryController.mLastUpdateTime);
        }

        loadDictionaryAsync();

        final String tempFileName = mFilename + ".temp";
        final File file = new File(mContext.getFilesDir(), mFilename);
        final File tempFile = new File(mContext.getFilesDir(), tempFileName);
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(tempFile);
            BinaryDictInputOutput.writeDictionaryBinary(out, mFusionDictionary, 1);
            out.flush();
            out.close();
            tempFile.renameTo(file);
            clearFusionDictionary();
        } catch (IOException e) {
            Log.e(TAG, "IO exception while writing file: " + e);
        } catch (UnsupportedFormatException e) {
            Log.e(TAG, "Unsupported format: " + e);
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }
!!!12777996.java!!!	setRequiresReload(in requiresRebuild : boolean) : void
        final long time = SystemClock.uptimeMillis();
        mLocalDictionaryController.mLastUpdateRequestTime = time;
        mSharedDictionaryController.mLastUpdateRequestTime = time;
        if (DEBUG) {
            Log.d(TAG, "Reload request: " + mFilename + ": request=" + time + " update="
                    + mSharedDictionaryController.mLastUpdateTime);
        }
!!!12778124.java!!!	asyncReloadDictionaryIfRequired() : void
        if (!isReloadRequired()) return;
        if (DEBUG) {
            Log.d(TAG, "Starting AsyncReloadDictionaryTask: " + mFilename);
        }
        new AsyncReloadDictionaryTask().start();
!!!12778252.java!!!	syncReloadDictionaryIfRequired() : void
        if (!isReloadRequired()) return;
        syncReloadDictionaryInternal();
!!!12778380.java!!!	isReloadRequired() : boolean
        return mBinaryDictionary == null || mLocalDictionaryController.isOutOfDate();
!!!12778508.java!!!	syncReloadDictionaryInternal() : void
        // Ensure that only one thread attempts to read or write to the shared binary dictionary
        // file at the same time.
        mSharedDictionaryController.lock();
        try {
            final long time = SystemClock.uptimeMillis();
            final boolean dictionaryFileExists = dictionaryFileExists();
            if (mSharedDictionaryController.isOutOfDate() || !dictionaryFileExists) {
                // If the shared dictionary file does not exist or is out of date, the first
                // instance that acquires the lock will generate a new one.
                if (hasContentChanged() || !dictionaryFileExists) {
                    // If the source content has changed or the dictionary does not exist, rebuild
                    // the binary dictionary. Empty dictionaries are supported (in the case where
                    // loadDictionaryAsync() adds nothing) in order to provide a uniform framework.
                    mSharedDictionaryController.mLastUpdateTime = time;
                    generateBinaryDictionary();
                    loadBinaryDictionary();
                } else {
                    // If not, the reload request was unnecessary so revert LastUpdateRequestTime
                    // to LastUpdateTime.
                    mSharedDictionaryController.mLastUpdateRequestTime =
                            mSharedDictionaryController.mLastUpdateTime;
                }
            } else if (mBinaryDictionary == null || mLocalDictionaryController.mLastUpdateTime
                    < mSharedDictionaryController.mLastUpdateTime) {
                // Otherwise, if the local dictionary is older than the shared dictionary, load the
                // shared dictionary.
                loadBinaryDictionary();
            }
            mLocalDictionaryController.mLastUpdateTime = time;
        } finally {
            mSharedDictionaryController.unlock();
        }
!!!12778636.java!!!	dictionaryFileExists() : boolean
        final File file = new File(mContext.getFilesDir(), mFilename);
        return file.exists();
