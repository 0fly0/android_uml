class Queries
!!!15302796.java!!!	allClasses(inout state : State) : String
        return classes(state, null);
!!!15302924.java!!!	classes(inout state : State, inout excludedPrefixes : String) : String
        TreeMap<String, Set<ClassObj>> result =
        new TreeMap<String, Set<ClassObj>>();

        Set<ClassObj> classes = new TreeSet<ClassObj>();

        //  Build a set of all classes across all heaps
        for (Heap heap: state.mHeaps.values()) {
            classes.addAll(heap.mClassesById.values());
        }

        //  Filter it if needed
        if (excludedPrefixes != null) {
            final int N = excludedPrefixes.length;
            Iterator<ClassObj> iter = classes.iterator();

            while (iter.hasNext()) {
                ClassObj theClass = iter.next();
                String classPath = theClass.toString();

                for (int i = 0; i < N; i++) {
                    if (classPath.startsWith(excludedPrefixes[i])) {
                        iter.remove();
                        break;
                    }
                }
            }
        }

        //  Now that we have a final list of classes, group them by package
        for (ClassObj theClass: classes) {
            String packageName = DEFAULT_PACKAGE;
            int lastDot = theClass.mClassName.lastIndexOf('.');

            if (lastDot != -1) {
                packageName = theClass.mClassName.substring(0, lastDot);
            }

            Set<ClassObj> classSet = result.get(packageName);

            if (classSet == null) {
                classSet = new TreeSet<ClassObj>();
                result.put(packageName, classSet);
            }

            classSet.add(theClass);
        }

        return result;
!!!15303052.java!!!	findClass(inout state : State, inout name : String) : ClassObj
        return state.findClass(name);
!!!15303180.java!!!	instancesOf(inout state : State, inout baseClassName : String) : Instance
         ClassObj theClass = state.findClass(baseClassName);

         if (theClass == null) {
             throw new IllegalArgumentException("Class not found: "
                + baseClassName);
         }

         Instance[] instances = new Instance[theClass.mInstances.size()];

         return theClass.mInstances.toArray(instances);
!!!15303308.java!!!	allInstancesOf(inout state : State, inout baseClassName : String) : Instance
        ClassObj theClass = state.findClass(baseClassName);

        if (theClass == null) {
            throw new IllegalArgumentException("Class not found: "
                + baseClassName);
        }

        ArrayList<ClassObj> classList = new ArrayList<ClassObj>();

        classList.add(theClass);
        classList.addAll(traverseSubclasses(theClass));

        ArrayList<Instance> instanceList = new ArrayList<Instance>();

        for (ClassObj someClass: classList) {
            instanceList.addAll(someClass.mInstances);
        }

        Instance[] result = new Instance[instanceList.size()];

        instanceList.toArray(result);

        return result;
!!!15303436.java!!!	traverseSubclasses(inout base : ClassObj) : ClassObj
        ArrayList<ClassObj> result = new ArrayList<ClassObj>();

        for (ClassObj subclass: base.mSubclasses) {
            result.add(subclass);
            result.addAll(traverseSubclasses(subclass));
        }

        return result;
!!!15303564.java!!!	findObject(inout state : State, inout id : String) : Instance
        long id2 = Long.parseLong(id, 16);

        return state.findReference(id2);
!!!15303692.java!!!	getRoots(inout state : State) : RootObj
        HashSet<RootObj> result = new HashSet<RootObj>();

        for (Heap heap: state.mHeaps.values()) {
            result.addAll(heap.mRoots);
        }

        return result;
!!!15303820.java!!!	newInstances(inout older : State, inout newer : State) : Instance
        ArrayList<Instance> resultList = new ArrayList<Instance>();

        for (Heap newHeap: newer.mHeaps.values()) {
            Heap oldHeap = older.getHeap(newHeap.mName);

            if (oldHeap == null) {
                continue;
            }

            for (Instance instance: newHeap.mInstances.values()) {
                Instance oldInstance = oldHeap.getInstance(instance.mId);

                /*
                 * If this instance wasn't in the old heap, or was there,
                 * but that ID was for an obj of a different type, then we have
                 * a newly allocated object and we should report it in the
                 * results.
                 */
                if ((oldInstance == null)
                        || (instance.mClassId != oldInstance.mClassId)) {
                    resultList.add(instance);
                }
            }
        }

        Instance[] resultArray = new Instance[resultList.size()];

        return resultList.toArray(resultArray);
