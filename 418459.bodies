class OldBigDecimalScaleOperationsTest
!!!2806043.java!!!	testMovePointRightEx() : void
        BigDecimal a = new BigDecimal("12345.6789012345678901234567890123456789");
        BigDecimal res = a.movePointRight(10);
        assertEquals("incorrect scale", 24, res.scale());
        assertEquals("incorrect value", "123456789012345.678901234567890123456789", res.toString());
        res = a.movePointRight(-50);
        assertEquals("incorrect scale", 84, res.scale());
        assertEquals("incorrect value", "1.23456789012345678901234567890123456789E-46", res.toString());
        try {
            a.movePointRight(Integer.MIN_VALUE + 2);
            fail("ArithmeticException is not thrown");
        } catch (ArithmeticException expected) {
        }
!!!2806171.java!!!	testMovePointRightEx2() : void
        BigDecimal a = new BigDecimal("123456789012345678901234567890123456789E25");
        try {
            a.movePointRight(Integer.MAX_VALUE - 2);
            fail("ArithmeticException is not thrown");
        } catch (ArithmeticException expected) {
        }
!!!2806299.java!!!	testScaleByPowerOfTenEx() : void
        BigDecimal a = new BigDecimal("12345.6789012345678901234567890123456789");
        BigDecimal res = a.movePointRight(10);
        assertEquals("incorrect scale", 24, res.scale());
        assertEquals("incorrect value", "123456789012345.678901234567890123456789", res.toString());
        res = a.scaleByPowerOfTen(-50);
        assertEquals("incorrect scale", 84, res.scale());
        assertEquals("incorrect value", "1.23456789012345678901234567890123456789E-46", res.toString());
        res = a.scaleByPowerOfTen(50);
        assertEquals("incorrect scale", -16, res.scale());
        assertEquals("incorrect value", "1.23456789012345678901234567890123456789E+54", res.toString());
        try {
            a.scaleByPowerOfTen(Integer.MIN_VALUE + 2);
            fail("ArithmeticException is not thrown");
        } catch (ArithmeticException expected) {
        }
        a = new BigDecimal("123456789012345678901234567890123456789E25");
        try {
            a.scaleByPowerOfTen(Integer.MAX_VALUE - 2);
            fail("ArithmeticException is not thrown");
        } catch (ArithmeticException expected) {
        }
!!!2806427.java!!!	testSetScale() : void
        BigDecimal x1 = new BigDecimal(1.23400);
        BigDecimal x2 = x1.setScale(75);

        assertEquals(0, x1.compareTo(x2));
        assertEquals(0, x2.compareTo(x1));

        x1.precision();

        assertEquals(0, x1.compareTo(x2));
        assertEquals(0, x2.compareTo(x1));

        x2.precision();

        assertEquals(0, x1.compareTo(x2));
        assertEquals(0, x2.compareTo(x1));
