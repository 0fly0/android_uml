class ConfigureDevicesActivity
!!!14193548.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.configure_devices);
        mLayoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        setupDeviceAdapters();
        mHideProgressRunnable = new Runnable() {
            @Override
            public void run() {
                setProgressControlsVisible(false);
            }
        };
        mHandler = new Handler();
        int activityWidth = getResources().getDimensionPixelSize(R.dimen.activity_width);
        getWindow().setLayout(activityWidth, ViewGroup.LayoutParams.WRAP_CONTENT);
        View mainView = findViewById(R.id.configure_devices);
        int height = getResources().getDimensionPixelSize(
                R.dimen.configure_devices_activity_height);
        if (height > 0) {
            LayoutParams params = (LayoutParams) mainView.getLayoutParams();
            params.height = height;
            mainView.setLayoutParams(params);
        }

        // Make the dialog as tall as possible.
        WindowManager.LayoutParams lp = getWindow().getAttributes();
        lp.height = WindowManager.LayoutParams.MATCH_PARENT;
        getWindow().setAttributes(lp);
!!!14193676.java!!!	onPause() : void
        teardownDeviceLocator();
        teardownPairedDeviceListener();

        if (mGetPairedDevicesTask != null) {
            mGetPairedDevicesTask.cancel(true);
            mGetPairedDevicesTask = null;
        }
        if (mHideProgressRunnable != null) {
            mHandler.removeCallbacks(mHideProgressRunnable);
            mHideProgressRunnable = null;
        }

        super.onPause();
!!!14193804.java!!!	onResume() : void
        super.onResume();

        mHandler.removeCallbacks(mHideProgressRunnable);
        setProgressControlsVisible(true);
        mHandler.postDelayed(mHideProgressRunnable, SCANNING_DISPLAY_TIME);
        refreshPairedDeviceList();
!!!14193932.java!!!	onActivityResult(in requestCode : int, in resultCode : int, in data : Intent) : void
        if (requestCode == MEDIA_DEVICE_SETTINGS_REQUEST) {
            // Returning from settings activity.
            refreshPairedDeviceList();
        } else if (requestCode == MEDIA_DEVICE_SETUP_REQUEST) {
            // Returning from new device setup activitiy.
            mLog.d("Returning from device setup; refresh devices");
            refreshPairedDeviceList();
            return;
        }
!!!14194060.java!!!	setProgressControlsVisible(inout visible : boolean) : void
        mScanningProgress.setVisibility(visible ? View.VISIBLE : View.INVISIBLE);
        mScanningText.setVisibility(visible ? View.VISIBLE : View.INVISIBLE);
!!!14194188.java!!!	setupPairedDeviceAdapter() : void
        View pairedHeader = mLayoutInflater.inflate(R.layout.device_section_paired_header, null);
        mEditDeviceLabel = pairedHeader
                .findViewById(R.id.configured_device_section_label);
        mMergeAdapter.addAdapter(new DeviceSectionHeaderAdapter(this, pairedHeader));

        mPairedDeviceAdapter = new DeviceAdapter(this);
        mMergeAdapter.addAdapter(mPairedDeviceAdapter);
!!!14194316.java!!!	onPairedDeviceItemClick(in position : int) : void
        Device device = mPairedDeviceAdapter.getItem(position);
        Uri videoUri = (mVideoUris != null) ? mVideoUris.get(device.getId()) : null;
        showMediaDeviceSettings(device, videoUri);
!!!14194444.java!!!	setupAvailableDeviceAdapter() : void
        View availableHeader
                = mLayoutInflater.inflate(R.layout.device_section_available_header, null);
        mScanningText = (TextView) availableHeader.findViewById(R.id.scanning_text);
        mScanningProgress = (ProgressBar) availableHeader.findViewById(R.id.scanning_progress);
        mMergeAdapter.addAdapter(new DeviceSectionHeaderAdapter(this, availableHeader));

        mAvailableDeviceAdapter = new DeviceAdapter(this);
        mMergeAdapter.addAdapter(mAvailableDeviceAdapter);
!!!14194572.java!!!	onAvailableDeviceItemClick(in position : int) : void
        Device device = mAvailableDeviceAdapter.getItem(position);
        if (device != null) {
            launchMediaDeviceSetupActivity(device);
        }
!!!14194700.java!!!	setupDeviceAdapters() : void
        mMergeAdapter = new MergeAdapter();

        setupPairedDeviceAdapter();
        setupAvailableDeviceAdapter();

        mMergeList = (ListView) findViewById(android.R.id.list);
        mMergeList.setAdapter(mMergeAdapter);
        mMergeList.setOnItemClickListener(new OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                ListAdapter adapter = mMergeAdapter.getAdapter(position);
                if (adapter == mPairedDeviceAdapter) {
                    onPairedDeviceItemClick((int) id);
                } else if (adapter == mAvailableDeviceAdapter) {
                    onAvailableDeviceItemClick((int) id);
                }
            }
        });
!!!14194828.java!!!	setupDeviceLocator() : void
        teardownDeviceLocator();

        // Kickstart all media device controller services that are on the system.
        MediaDevicesIntents.startMediaDeviceControllers(this);

        mLocator = new DeviceLocator(this, new DeviceLocator.Listener() {

            @Override
            public void onDeviceOnline(Device device) {
                String deviceId = device.getId();
                if (TextUtils.isEmpty(deviceId)) {
                    // Don't add any device that has a bad ID.
                    return;
                }

                // If it's in the paired list already, don't add it.
                int position = mPairedDeviceAdapter.getPositionByDeviceId(deviceId);
                if (position >= 0) {
                    return;
                }

                position = mAvailableDeviceAdapter.getPositionByDeviceId(deviceId);
                if (position < 0) {
                    // Device not already in list, so add it.
                    mAvailableDeviceAdapter.add(device);
                    mAvailableDeviceAdapter.sort(Device.DEVICE_COMPARATOR);
                } else {
                    // Device already in list, so update it.
                    mAvailableDeviceAdapter.removeAt(position);
                    mAvailableDeviceAdapter.insert(device, position);
                }
            }

            @Override
            public void onDeviceOffline(Device device) {
                int position = mAvailableDeviceAdapter.getPositionByDeviceId(device.getId());
                if (position >= 0) {
                    mAvailableDeviceAdapter.removeAt(position);
                }
            }
        });
        mLocator.start();
!!!14194956.java!!!	teardownDeviceLocator() : void
        if (mLocator != null) {
            mLocator.stop();
            mLocator = null;
        }
        mAvailableDeviceAdapter.clear();
!!!14195084.java!!!	launchMediaDeviceSetupActivity(inout device : Device) : void
        mLog.d("launching MediaDevicesSetupActivity for device " + device);
        Intent intent = new Intent(this, MediaDeviceSetupActivity.class);
        intent.putExtra(MediaDevicesConstants.EXTRA_DEVICE, device);
        startActivityForResult(intent, MEDIA_DEVICE_SETUP_REQUEST);

!!!14195212.java!!!	showMediaDeviceSettings(inout device : Device, inout videoUri : Uri) : void
        Intent intent = new Intent(this, MediaDeviceSettingsActivity.class);
        intent.putExtra(MediaDevicesConstants.EXTRA_DEVICE, device);
        intent.putExtra(MediaDevicesConstants.EXTRA_VIDEO_URI, videoUri);
        startActivityForResult(intent, MEDIA_DEVICE_SETTINGS_REQUEST);
!!!14195340.java!!!	populatePairedDeviceList(inout devices : List<Device>) : void
        mPairedDeviceAdapter.clear();

        boolean haveDevices = (devices != null) && (devices.size() > 0);
        mEditDeviceLabel.setVisibility(haveDevices ? View.VISIBLE : View.GONE);

        if (haveDevices) {
            for (Device device : devices) {
                mPairedDeviceAdapter.add(device);
            }
            mPairedDeviceAdapter.sort(Device.DEVICE_COMPARATOR);
        }
!!!14195468.java!!!	setupPairedDeviceListener() : void
        if (mPairedListener == null) {
            mPairedListener = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    refreshPairedDeviceList();
                }
            };
            IntentFilter filter = new IntentFilter();
            filter.addAction(MediaDevicesConstants.ACTION_PAIR_DEVICE_IN_SERVICE);
            filter.addAction(MediaDevicesConstants.ACTION_UNPAIR_DEVICE_IN_SERVICE);
            registerReceiver(mPairedListener, filter);
        }
!!!14195596.java!!!	refreshPairedDeviceList() : void
        if (mGetPairedDevicesTask != null) {
            mGetPairedDevicesTask.cancel(true);
        }
        mGetPairedDevicesTask = new GetPairedDevicesTask();
        mGetPairedDevicesTask.execute();
!!!14195724.java!!!	teardownPairedDeviceListener() : void
        if (mPairedListener != null) {
            unregisterReceiver(mPairedListener);
            mPairedListener = null;
        }
