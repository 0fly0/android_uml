class MediaPlayerDemo_Video
!!!12726540.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);
        setContentView(R.layout.mediaplayer_2);
        mPreview = (SurfaceView) findViewById(R.id.surface);
        holder = mPreview.getHolder();
        holder.addCallback(this);
        holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
        extras = getIntent().getExtras();

!!!12726668.java!!!	playVideo(inout Media : Integer, in Path : String) : void
        Log.d(TAG, "PATH " + Path);
        doCleanUp();
        try {

            switch (Media) {
                case LOCAL_VIDEO:
                    /*
                     * TODO: Set the path variable to a local media file path.
                     */
                    path = Path;
                    if (path == "") {
                        // Tell the user to provide a media file URL.
                        Toast.makeText(MediaPlayerDemo_Video.this,
                                       "Please edit MediaPlayerDemo_Video Activity, "
                                       + "and set the path variable to your media file path."
                                       + " Your media file must be stored on sdcard.",
                                       Toast.LENGTH_LONG).show();

                    }
                    break;
                case STREAM_VIDEO:
                    /*
                     * TODO: Set path variable to progressive streamable mp4 or
                     * 3gpp format URL. Http protocol should be used.
                     * Mediaplayer can only play "progressive streamable
                     * contents" which basically means: 1. the movie atom has to
                     * precede all the media data atoms. 2. The clip has to be
                     * reasonably interleaved.
                     *
                     */
                    path = Path;
                    if (path == "") {
                        // Tell the user to provide a media file URL.
                        Toast.makeText(MediaPlayerDemo_Video.this,
                                       "Please edit MediaPlayerDemo_Video Activity,"
                                       + " and set the path variable to your media file URL.",
                                       Toast.LENGTH_LONG).show();

                    }

                    break;


            }

            // Create a new media player and set the listeners
            mMediaPlayer = new MediaPlayer();
            mMediaPlayer.setDataSource(path);
            mMediaPlayer.setDisplay(holder);
            mMediaPlayer.prepare();
            mMediaPlayer.setOnBufferingUpdateListener(this);
            mMediaPlayer.setOnCompletionListener(this);
            mMediaPlayer.setOnPreparedListener(this);
            mMediaPlayer.setOnVideoSizeChangedListener(this);
            mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);


        } catch (Exception e) {
            Log.e(TAG, "error: " + e.getMessage(), e);
        }
!!!12726796.java!!!	onBufferingUpdate(inout arg0 : MediaPlayer, in percent : int) : void
        Log.d(TAG, "onBufferingUpdate percent:" + percent);

!!!12726924.java!!!	onCompletion(inout arg0 : MediaPlayer) : void
        Log.d(TAG, "onCompletion called");
!!!12727052.java!!!	onVideoSizeChanged(inout mp : MediaPlayer, in width : int, in height : int) : void
        Log.v(TAG, "onVideoSizeChanged called");
        if (width == 0 || height == 0) {
            Log.e(TAG, "invalid video width(" + width + ") or height(" + height + ")");
            return;
        }
        mIsVideoSizeKnown = true;
        mVideoWidth = width;
        mVideoHeight = height;
        if (mIsVideoReadyToBePlayed && mIsVideoSizeKnown) {
            startVideoPlayback();
        }
!!!12727180.java!!!	onPrepared(inout mediaplayer : MediaPlayer) : void
        Log.d(TAG, "onPrepared called");
        mIsVideoReadyToBePlayed = true;
        if (mIsVideoReadyToBePlayed && mIsVideoSizeKnown) {
            startVideoPlayback();
        }
!!!12727308.java!!!	surfaceChanged(inout surfaceholder : SurfaceHolder, in i : int, in j : int, in k : int) : void
        Log.d(TAG, "surfaceChanged called");

!!!12727436.java!!!	surfaceDestroyed(inout surfaceholder : SurfaceHolder) : void
        Log.d(TAG, "surfaceDestroyed called");
!!!12727564.java!!!	surfaceCreated(inout holder : SurfaceHolder) : void
        Log.d(TAG, "surfaceCreated called");
        playVideo(extras.getInt(MEDIA), extras.getString(PATH));
!!!12727692.java!!!	onPause() : void
        super.onPause();
        releaseMediaPlayer();
        doCleanUp();
!!!12727820.java!!!	onDestroy() : void
        super.onDestroy();
        releaseMediaPlayer();
        doCleanUp();
!!!12727948.java!!!	releaseMediaPlayer() : void
        if (mMediaPlayer != null) {
            mMediaPlayer.release();
            mMediaPlayer = null;
        }
!!!12728076.java!!!	doCleanUp() : void
        mVideoWidth = 0;
        mVideoHeight = 0;
        mIsVideoReadyToBePlayed = false;
        mIsVideoSizeKnown = false;
!!!12728204.java!!!	startVideoPlayback() : void
        Log.v(TAG, "startVideoPlayback");
        holder.setFixedSize(mVideoWidth, mVideoHeight);
        mMediaPlayer.start();
