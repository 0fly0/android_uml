class OmxAmpPort
!!!11119244.cpp!!!	allocateBuffer(inout bufHdr : OMX_BUFFERHEADERTYPE, in appPrivate : OMX_PTR, in size : OMX_U32) : OMX_ERRORTYPE
  OMX_BUFFERHEADERTYPE * buf = new OMX_BUFFERHEADERTYPE;
  InitOmxHeader(buf);
  AMP_SHM_TYPE shm_type = AMP_SHM_DYNAMIC;
  if (getDomain() == OMX_PortDomainVideo &&
      getVideoDefinition().eCompressionFormat == OMX_VIDEO_CodingUnused) {
    shm_type = AMP_SHM_VIDEO_FB;
  }
  AmpBuffer *amp_buffer = new AmpBuffer(shm_type, size, SHMALIGN, false, mEs, mCtrl);
  buf->pBuffer = static_cast<OMX_U8 *>(amp_buffer->getData());
  buf->nAllocLen = size;
  kdMemset(buf->pBuffer, 0, buf->nAllocLen);
  buf->pAppPrivate = appPrivate;
  buf->nInputPortIndex = (getDir()== OMX_DirInput)? getPortIndex() : 0;
  buf->nOutputPortIndex = (getDir()== OMX_DirOutput)? getPortIndex() : 0;
  buf->pPlatformPrivate = amp_buffer;
  *bufHdr = buf;
  OMX_LOGV("%s, buffer %p, nAllocLen %lu", __func__, buf, buf->nAllocLen);
  OmxBuffer * omxbuf = new OmxBuffer(buf, OMX_TRUE, OWN_BY_PLAYER);
  mBufferList.push_back(omxbuf);
  return OMX_ErrorNone;
!!!11119372.cpp!!!	freeBuffer(inout buffer : OMX_BUFFERHEADERTYPE) : OMX_ERRORTYPE
  vector<OmxBuffer *>::iterator it;
  for (it = mBufferList.begin(); it != mBufferList.end(); it++) {
    if(buffer == (*it)->mBuffer) {
      break;
    }
  }
  if (it == mBufferList.end()) {
    OMX_LOGE("Can't find buffer %p",buffer);
    return OMX_ErrorBadParameter;
  }
  if (NULL != buffer->pPlatformPrivate) {
    delete static_cast<AmpBuffer *>(buffer->pPlatformPrivate);
  }
  OMX_LOGV("Port free buffer %p", buffer);
  delete buffer;
  delete (*it);
  mBufferList.erase(it);
  setPopulated(OMX_FALSE);
  return OMX_ErrorNone;
!!!11119500.cpp!!!	useBuffer(inout bufHdr : OMX_BUFFERHEADERTYPE, in appPrivate : OMX_PTR, in size : OMX_U32, inout buffer : OMX_U8) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OmxPortImpl::useBuffer(bufHdr, appPrivate, size, buffer);
  if (OMX_ErrorNone == err) {
    if (isInput()) {
      if (getDomain() == OMX_PortDomainAudio || mCtrl != NULL) {
        (*bufHdr)->pPlatformPrivate =
            new AmpBuffer(AMP_SHM_DYNAMIC, size, SHMALIGN, true, mEs, mCtrl);
      } else {
        (*bufHdr)->pPlatformPrivate = NULL;
      }
    } else {
      (*bufHdr)->pPlatformPrivate = new AmpBuffer(buffer, size);
    }
  }
  return err;
!!!11119628.cpp!!!	getFormatHeadSize() : OMX_U32
  return 0;
!!!11119884.cpp!!!	getAmpBuffer(in index : OMX_U32) : AmpBuffer
  if (index >= mBufferList.size()) {
    return NULL;
  }
  return static_cast<AmpBuffer *>(
      mBufferList[index]->mBuffer->pPlatformPrivate);
!!!11120012.cpp!!!	getBD(in index : OMX_U32) : AMP_BD_ST
  if (index >= mBufferList.size()) {
    return NULL;
  }
  AmpBuffer *amp_buffer = static_cast<AmpBuffer *>(
      mBufferList[index]->mBuffer->pPlatformPrivate);
  if (amp_buffer) {
    return amp_buffer->getBD();
  }
  return NULL;
!!!11120140.cpp!!!	getBD(inout bufHdr : OMX_BUFFERHEADERTYPE) : AMP_BD_ST
  AmpBuffer *amp_buffer =  static_cast<AmpBuffer *>(
      bufHdr->pPlatformPrivate);
  if (amp_buffer) {
    return amp_buffer->getBD();
  }
  return NULL;
!!!11120268.cpp!!!	getBufferHeader(inout bd : AMP_BD_ST) : OMX_BUFFERHEADERTYPE
  vector<OmxBuffer *>::iterator it;
  for (it = mBufferList.begin(); it != mBufferList.end(); it++) {
    AmpBuffer *amp_buffer = static_cast<AmpBuffer *>(
        (*it)->mBuffer->pPlatformPrivate);
    if (amp_buffer && amp_buffer->getBD() == bd) {
      return (*it)->mBuffer;
    }
  }
  if (it == mBufferList.end()) {
    OMX_LOGE("Can't find buffer %p", bd);
  }
  return NULL;
