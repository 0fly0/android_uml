class KeyWidget
!!!12111756.java!!!	KeyWidget(inout arrowLayout : RelativeLayout, inout callBack : OnKeyWidgetClickedListener)
        mArrowLayout = arrowLayout;
        mCallBack = callBack;
        mKeyPad = (ImageButton) mArrowLayout.findViewById(R.id.key_pad);
        setDisplayMode(DisplayMode.LEFT);
        // Setting in code because setting in xml doesn't work.
        arrowLayout.setFocusable(false);
        mKeyPad.setFocusable(false);
!!!12111884.java!!!	updateFromKey(inout key : KeyEvent) : void
        int keyCode = key.getKeyCode();
        int imageId = -1;
        if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {
            // TODO(jefflu): Look into using LevelListDrawable instead of this.
            if (mDisplayMode == DisplayMode.UP ||
                    mDisplayMode == DisplayMode.DOWN){
                if (key.getAction() == KeyEvent.ACTION_DOWN) {
                    imageId = R.drawable.ic_up_pressed;
                } else {
                    if (mDisplayMode == DisplayMode.UP) {
                        imageId = R.drawable.ic_up_default;
                    } else {
                        imageId = R.drawable.ic_down_default;
                    }
                }
            }
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {
            if (mDisplayMode == DisplayMode.UP ||
                    mDisplayMode == DisplayMode.DOWN){
                if (key.getAction() == KeyEvent.ACTION_DOWN) {
                    imageId = R.drawable.ic_down_pressed;
                } else {
                    if (mDisplayMode == DisplayMode.UP) {
                        imageId = R.drawable.ic_up_default;
                    } else {
                        imageId = R.drawable.ic_down_default;
                    }
                }
            }
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
            if (mDisplayMode == DisplayMode.LEFT ||
                    mDisplayMode == DisplayMode.RIGHT) {
                if (key.getAction() == KeyEvent.ACTION_DOWN){
                    imageId = R.drawable.ic_left_pressed;
                } else {
                    if (mDisplayMode == DisplayMode.LEFT){
                        imageId = R.drawable.ic_left_default;
                    } else {
                        imageId = R.drawable.ic_right_default;
                    }
                }
            }
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
            if (mDisplayMode == DisplayMode.LEFT ||
                    mDisplayMode == DisplayMode.RIGHT) {
                if (key.getAction() == KeyEvent.ACTION_DOWN){
                    imageId = R.drawable.ic_right_pressed;
                } else {
                    if (mDisplayMode == DisplayMode.LEFT){
                        imageId = R.drawable.ic_left_default;
                    } else {
                        imageId = R.drawable.ic_right_default;
                    }
                }
            }
        }

        if (imageId != -1) {
            mKeyPad.setBackgroundResource(imageId);
        }
!!!12112012.java!!!	setDisplayMode(inout mode : DisplayMode) : void
        mDisplayMode = mode;
        updateDisplay();
!!!12112140.java!!!	getDisplayMode() : DisplayMode
        return mDisplayMode;
!!!12112268.java!!!	updateDisplay() : void
        mArrowLayout.setVisibility(View.VISIBLE);
        if (mDisplayMode == DisplayMode.UP) {
            mKeyPad.setBackgroundResource(R.drawable.ic_up_default);
        } else if (mDisplayMode == DisplayMode.DOWN) {
            mKeyPad.setBackgroundResource(R.drawable.ic_down_default);
        } else if (mDisplayMode == DisplayMode.LEFT) {
            mKeyPad.setBackgroundResource(R.drawable.ic_left_default);
        } else if (mDisplayMode == DisplayMode.RIGHT){
            mKeyPad.setBackgroundResource(R.drawable.ic_right_default);
        } else {
            mArrowLayout.setVisibility(View.GONE);
        }
