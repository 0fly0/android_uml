class PlainSocketImpl
!!!593819.java!!!	PlainSocketImpl(inout fd : FileDescriptor)
        this.fd = fd;
        if (fd.valid()) {
            guard.open("close");
        }
!!!593947.java!!!	PlainSocketImpl(inout proxy : Proxy)
        this(new FileDescriptor());
        this.proxy = proxy;
!!!594075.java!!!	PlainSocketImpl()
        this(new FileDescriptor());
!!!594203.java!!!	PlainSocketImpl(inout fd : FileDescriptor, in localport : int, inout addr : InetAddress, in port : int)
        this.fd = fd;
        this.localport = localport;
        this.address = addr;
        this.port = port;
        if (fd.valid()) {
            guard.open("close");
        }
!!!594331.java!!!	accept(inout newImpl : SocketImpl) : void
        if (usingSocks()) {
            ((PlainSocketImpl) newImpl).socksBind();
            ((PlainSocketImpl) newImpl).socksAccept();
            return;
        }

        try {
            InetSocketAddress peerAddress = new InetSocketAddress();
            FileDescriptor clientFd = Libcore.os.accept(fd, peerAddress);

            // TODO: we can't just set newImpl.fd to clientFd because a nio SocketChannel may
            // be sharing the FileDescriptor. http://b//4452981.
            newImpl.fd.setInt$(clientFd.getInt$());

            newImpl.address = peerAddress.getAddress();
            newImpl.port = peerAddress.getPort();
        } catch (ErrnoException errnoException) {
            if (errnoException.errno == EAGAIN) {
                throw new SocketTimeoutException(errnoException);
            }
            throw errnoException.rethrowAsSocketException();
        }

        // Reset the client's inherited read timeout to the Java-specified default of 0.
        newImpl.setOption(SocketOptions.SO_TIMEOUT, Integer.valueOf(0));

        newImpl.localport = IoBridge.getSocketLocalPort(newImpl.fd);
!!!594459.java!!!	usingSocks() : boolean
        return proxy != null && proxy.type() == Proxy.Type.SOCKS;
!!!594587.java!!!	initLocalPort(in localPort : int) : void
        this.localport = localPort;
!!!594715.java!!!	initRemoteAddressAndPort(inout remoteAddress : InetAddress, in remotePort : int) : void
        this.address = remoteAddress;
        this.port = remotePort;
!!!594843.java!!!	checkNotClosed() : void
        if (!fd.valid()) {
            throw new SocketException("Socket is closed");
        }
!!!594971.java!!!	available() : int
        checkNotClosed();
        // we need to check if the input has been shutdown. If so
        // we should return that there is no data to be read
        if (shutdownInput) {
            return 0;
        }
        return IoBridge.available(fd);
!!!595099.java!!!	bind(inout address : InetAddress, in port : int) : void
        IoBridge.bind(fd, address, port);
        this.address = address;
        if (port != 0) {
            this.localport = port;
        } else {
            this.localport = IoBridge.getSocketLocalPort(fd);
        }
!!!595227.java!!!	close() : void
        guard.close();
        IoBridge.closeSocket(fd);
!!!595355.java!!!	connect(inout aHost : String, in aPort : int) : void
        connect(InetAddress.getByName(aHost), aPort);
!!!595483.java!!!	connect(inout anAddr : InetAddress, in aPort : int) : void
        connect(anAddr, aPort, 0);
!!!595611.java!!!	connect(inout anAddr : InetAddress, in aPort : int, in timeout : int) : void
        InetAddress normalAddr = anAddr.isAnyLocalAddress() ? InetAddress.getLocalHost() : anAddr;
        if (streaming && usingSocks()) {
            socksConnect(anAddr, aPort, 0);
        } else {
            IoBridge.connect(fd, normalAddr, aPort, timeout);
        }
        super.address = normalAddr;
        super.port = aPort;
!!!595739.java!!!	create(inout streaming : boolean) : void
        this.streaming = streaming;
        this.fd = IoBridge.socket(streaming);
!!!595867.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
            close();
        } finally {
            super.finalize();
        }
!!!595995.java!!!	getInputStream() : InputStream
        checkNotClosed();
        return new PlainSocketInputStream(this);
!!!596763.java!!!	getOption(in option : int) : Object
        return IoBridge.getSocketOption(fd, option);
!!!596891.java!!!	getOutputStream() : OutputStream
        checkNotClosed();
        return new PlainSocketOutputStream(this);
!!!597531.java!!!	listen(in backlog : int) : void
        if (usingSocks()) {
            // Do nothing for a SOCKS connection. The listen occurs on the
            // server during the bind.
            return;
        }
        try {
            Libcore.os.listen(fd, backlog);
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsSocketException();
        }
!!!597659.java!!!	setOption(in option : int, inout value : Object) : void
        IoBridge.setSocketOption(fd, option, value);
!!!597787.java!!!	socksGetServerPort() : int
        // get socks server port from proxy. It is unnecessary to check
        // "socksProxyPort" property, since proxy setting should only be
        // determined by ProxySelector.
        InetSocketAddress addr = (InetSocketAddress) proxy.address();
        return addr.getPort();
!!!597915.java!!!	socksGetServerAddress() : InetAddress
        String proxyName;
        // get socks server address from proxy. It is unnecessary to check
        // "socksProxyHost" property, since all proxy setting should be
        // determined by ProxySelector.
        InetSocketAddress addr = (InetSocketAddress) proxy.address();
        proxyName = addr.getHostName();
        if (proxyName == null) {
            proxyName = addr.getAddress().getHostAddress();
        }
        return InetAddress.getByName(proxyName);
!!!598043.java!!!	socksConnect(inout applicationServerAddress : InetAddress, in applicationServerPort : int, in timeout : int) : void
        try {
            IoBridge.connect(fd, socksGetServerAddress(), socksGetServerPort(), timeout);
        } catch (Exception e) {
            throw new SocketException("SOCKS connection failed", e);
        }

        socksRequestConnection(applicationServerAddress, applicationServerPort);

        lastConnectedAddress = applicationServerAddress;
        lastConnectedPort = applicationServerPort;
!!!598171.java!!!	socksRequestConnection(inout applicationServerAddress : InetAddress, in applicationServerPort : int) : void
        socksSendRequest(Socks4Message.COMMAND_CONNECT,
                applicationServerAddress, applicationServerPort);
        Socks4Message reply = socksReadReply();
        if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {
            throw new IOException(reply.getErrorString(reply.getCommandOrResult()));
        }
!!!598299.java!!!	socksAccept() : void
        Socks4Message reply = socksReadReply();
        if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {
            throw new IOException(reply.getErrorString(reply.getCommandOrResult()));
        }
!!!598427.java!!!	shutdownInput() : void
        shutdownInput = true;
        try {
            Libcore.os.shutdown(fd, SHUT_RD);
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsSocketException();
        }
!!!598555.java!!!	shutdownOutput() : void
        try {
            Libcore.os.shutdown(fd, SHUT_WR);
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsSocketException();
        }
!!!598683.java!!!	socksBind() : void
        try {
            IoBridge.connect(fd, socksGetServerAddress(), socksGetServerPort());
        } catch (Exception e) {
            throw new IOException("Unable to connect to SOCKS server", e);
        }

        // There must be a connection to an application host for the bind to work.
        if (lastConnectedAddress == null) {
            throw new SocketException("Invalid SOCKS client");
        }

        // Use the last connected address and port in the bind request.
        socksSendRequest(Socks4Message.COMMAND_BIND, lastConnectedAddress,
                lastConnectedPort);
        Socks4Message reply = socksReadReply();

        if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {
            throw new IOException(reply.getErrorString(reply.getCommandOrResult()));
        }

        // A peculiarity of socks 4 - if the address returned is 0, use the
        // original socks server address.
        if (reply.getIP() == 0) {
            address = socksGetServerAddress();
        } else {
            // IPv6 support not yet required as
            // currently the Socks4Message.getIP() only returns int,
            // so only works with IPv4 4byte addresses
            byte[] replyBytes = new byte[4];
            Memory.pokeInt(replyBytes, 0, reply.getIP(), ByteOrder.BIG_ENDIAN);
            address = InetAddress.getByAddress(replyBytes);
        }
        localport = reply.getPort();
!!!598811.java!!!	socksSendRequest(in command : int, inout address : InetAddress, in port : int) : void
        Socks4Message request = new Socks4Message();
        request.setCommandOrResult(command);
        request.setPort(port);
        request.setIP(address.getAddress());
        request.setUserId("default");

        getOutputStream().write(request.getBytes(), 0, request.getLength());
!!!598939.java!!!	socksReadReply() : Socks4Message
        Socks4Message reply = new Socks4Message();
        int bytesRead = 0;
        while (bytesRead < Socks4Message.REPLY_LENGTH) {
            int count = getInputStream().read(reply.getBytes(), bytesRead,
                    Socks4Message.REPLY_LENGTH - bytesRead);
            if (count == -1) {
                break;
            }
            bytesRead += count;
        }
        if (Socks4Message.REPLY_LENGTH != bytesRead) {
            throw new SocketException("Malformed reply from SOCKS server");
        }
        return reply;
!!!599067.java!!!	connect(inout remoteAddr : SocketAddress, in timeout : int) : void
        InetSocketAddress inetAddr = (InetSocketAddress) remoteAddr;
        connect(inetAddr.getAddress(), inetAddr.getPort(), timeout);
!!!599195.java!!!	supportsUrgentData() : boolean
        return true;
!!!599323.java!!!	sendUrgentData(in value : int) : void
        try {
            byte[] buffer = new byte[] { (byte) value };
            Libcore.os.sendto(fd, buffer, 0, 1, MSG_OOB, null, 0);
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsSocketException();
        }
!!!599451.java!!!	read(inout buffer : byte, in offset : int, in byteCount : int) : int
        if (byteCount == 0) {
            return 0;
        }
        Arrays.checkOffsetAndCount(buffer.length, offset, byteCount);
        if (shutdownInput) {
            return -1;
        }
        int readCount = IoBridge.recvfrom(true, fd, buffer, offset, byteCount, 0, null, false);
        // Return of zero bytes for a blocking socket means a timeout occurred
        if (readCount == 0) {
            throw new SocketTimeoutException();
        }
        // Return of -1 indicates the peer was closed
        if (readCount == -1) {
            shutdownInput = true;
        }
        return readCount;
!!!599579.java!!!	write(inout buffer : byte, in offset : int, in byteCount : int) : void
        Arrays.checkOffsetAndCount(buffer.length, offset, byteCount);
        if (streaming) {
            while (byteCount > 0) {
                int bytesWritten = IoBridge.sendto(fd, buffer, offset, byteCount, 0, null, 0);
                byteCount -= bytesWritten;
                offset += bytesWritten;
            }
        } else {
            // Unlike writes to a streaming socket, writes to a datagram
            // socket are all-or-nothing, so we don't need a loop here.
            // http://code.google.com/p/android/issues/detail?id=15304
            IoBridge.sendto(fd, buffer, offset, byteCount, 0, address, port);
        }
