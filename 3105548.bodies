class Arguments
!!!13033484.java!!!	checkIntegrity() : void
            checkHasExactlyOneInput();
            checkHasAtLeastOneOutput();
            checkNotSameFile(mInputBinary, mOutputBinary);
            checkNotSameFile(mInputBinary, mOutputBinaryFormat1);
            checkNotSameFile(mInputBinary, mOutputXml);
            checkNotSameFile(mInputUnigramXml, mOutputBinary);
            checkNotSameFile(mInputUnigramXml, mOutputBinaryFormat1);
            checkNotSameFile(mInputUnigramXml, mOutputXml);
            checkNotSameFile(mInputShortcutXml, mOutputBinary);
            checkNotSameFile(mInputShortcutXml, mOutputBinaryFormat1);
            checkNotSameFile(mInputShortcutXml, mOutputXml);
            checkNotSameFile(mInputBigramXml, mOutputBinary);
            checkNotSameFile(mInputBigramXml, mOutputBinaryFormat1);
            checkNotSameFile(mInputBigramXml, mOutputXml);
            checkNotSameFile(mOutputBinary, mOutputBinaryFormat1);
            checkNotSameFile(mOutputBinary, mOutputXml);
            checkNotSameFile(mOutputBinaryFormat1, mOutputXml);
!!!13033612.java!!!	checkHasExactlyOneInput() : void
            if (null == mInputUnigramXml && null == mInputBinary) {
                throw new RuntimeException("No input file specified");
            } else if (null != mInputUnigramXml && null != mInputBinary) {
                throw new RuntimeException("Both input XML and binary specified");
            } else if (null != mInputBinary && null != mInputBigramXml) {
                throw new RuntimeException("Cannot specify a binary input and a separate bigram "
                        + "file");
            }
!!!13033740.java!!!	checkHasAtLeastOneOutput() : void
            if (null == mOutputBinary && null == mOutputBinaryFormat1 && null == mOutputXml) {
                throw new RuntimeException("No output specified");
            }
!!!13033868.java!!!	checkNotSameFile(in path1 : String, in path2 : String) : void
            if (null == path1 || null == path2) return;
            if (new File(path1).getCanonicalPath().equals(new File(path2).getCanonicalPath())) {
                throw new RuntimeException(path1 + " and " + path2 + " are the same file: "
                        + " refusing to process.");
            }
!!!13033996.java!!!	displayHelp() : void
            MakedictLog.i("Usage: makedict "
                    + "[-s <unigrams.xml> [-b <bigrams.xml>] [-c <shortcuts.xml>] "
                    + "| -s <binary input>] [-d <binary output format version 2>] "
                    + "[-d1 <binary output format version 1>] [-x <xml output>] [-2]\n"
                    + "\n"
                    + "  Converts a source dictionary file to one or several outputs.\n"
                    + "  Source can be an XML file, with an optional XML bigrams file, or a\n"
                    + "  binary dictionary file.\n"
                    + "  Binary version 1 (Ice Cream Sandwich), 2 (Jelly Bean) and XML outputs\n"
                    + "  are supported. All three can be output at the same time, but the same\n"
                    + "  output format cannot be specified several times. The behavior is\n"
                    + "  unspecified if the same file is specified for input and output, or for\n"
                    + "  several outputs.");
!!!13034124.java!!!	Arguments(inout argsArray : String)
            final LinkedList<String> args = new LinkedList<String>(Arrays.asList(argsArray));
            if (args.isEmpty()) {
                displayHelp();
            }
            String inputBinary = null;
            String inputUnigramXml = null;
            String inputShortcutXml = null;
            String inputBigramXml = null;
            String outputBinary = null;
            String outputBinaryFormat1 = null;
            String outputXml = null;

            while (!args.isEmpty()) {
                final String arg = args.get(0);
                args.remove(0);
                if (arg.charAt(0) == '-') {
                    if (OPTION_VERSION_2.equals(arg)) {
                        // Do nothing, this is the default
                    } else if (OPTION_HELP.equals(arg)) {
                        displayHelp();
                    } else {
                        // All these options need an argument
                        if (args.isEmpty()) {
                            throw new IllegalArgumentException("Option " + arg + " is unknown or "
                                    + "requires an argument");
                        }
                        String filename = args.get(0);
                        args.remove(0);
                        if (OPTION_INPUT_SOURCE.equals(arg)) {
                            if (BinaryDictInputOutput.isBinaryDictionary(filename)) {
                                inputBinary = filename;
                            } else {
                                inputUnigramXml = filename;
                            }
                        } else if (OPTION_INPUT_SHORTCUT_XML.equals(arg)) {
                            inputShortcutXml = filename;
                        } else if (OPTION_INPUT_BIGRAM_XML.equals(arg)) {
                            inputBigramXml = filename;
                        } else if (OPTION_OUTPUT_BINARY.equals(arg)) {
                            outputBinary = filename;
                        } else if (OPTION_OUTPUT_BINARY_FORMAT_VERSION_1.equals(arg)) {
                            outputBinaryFormat1 = filename;
                        } else if (OPTION_OUTPUT_XML.equals(arg)) {
                            outputXml = filename;
                        } else {
                            throw new IllegalArgumentException("Unknown option : " + arg);
                        }
                    }
                } else {
                    if (null == inputBinary && null == inputUnigramXml) {
                        if (BinaryDictInputOutput.isBinaryDictionary(arg)) {
                            inputBinary = arg;
                        } else {
                            inputUnigramXml = arg;
                        }
                    } else if (null == outputBinary) {
                        outputBinary = arg;
                    } else {
                        throw new IllegalArgumentException("Several output binary files specified");
                    }
                }
            }

            mInputBinary = inputBinary;
            mInputUnigramXml = inputUnigramXml;
            mInputShortcutXml = inputShortcutXml;
            mInputBigramXml = inputBigramXml;
            mOutputBinary = outputBinary;
            mOutputBinaryFormat1 = outputBinaryFormat1;
            mOutputXml = outputXml;
            checkIntegrity();
