format 74
"utils" // vendor::marvell::generic::frameworks::av_settings::libs::utils
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/vendor/marvell/generic/frameworks/av_settings/libs/utils/"
  cpp_src_dir "/home/shchen/work/jellybean/vendor/marvell/generic/frameworks/av_settings/libs/utils/"
  deploymentview 271116 "utils"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1116684 "main"
      stereotype "source"
      cpp_src "int main(int argc, const char** argv) {
  AVSettingValue val;
  const char* type;
  const char* name;
  bool isRead = false;
  android::sp<marvell::IAVSettings> av_settings;
  android::status_t result;
  char read_result[1024];

  android::sp<android::IBinder> binder =
      android::defaultServiceManager()->getService(
          android::String16(\"media.avsettings\"));

  if (binder == NULL) {
    printf(\"Failed to connect to media.avsettings service... is android\"
           \" running?\\n\");
    return -2;
  }

  av_settings = android::interface_cast<marvell::IAVSettings>(binder);

  if (argc < 3)
    BAIL(\"too few arguments\");

  if (!strcasecmp(\"-r\", argv[1]))
    isRead = true;
  else if (strcasecmp(\"-w\", argv[1]))
    BAIL(\"must specify either -w or -r\");

  if (isRead && (3 != argc))
    BAIL(\"expected 2 arguments for read operation\");

  if (!isRead && (4 != argc))
    BAIL(\"expected 3 arguments for write operation\");

 type = argv[2];
 name = argv[2] + 2;
  if (!type[0] || (':' != type[1]))
    BAIL(\"missing ':' in type:name argument\");

  switch (tolower(type[0])) {
    case 'i':
    {
      int tmp;
      if (!isRead) {
        if (1 != sscanf(argv[3], \"%d\", &tmp))
          BAIL(\"failed to parse write argument\");
        val.setInt(tmp);
      } else {
        result = av_settings->ReadIntSetting(name, &tmp);
        snprintf(read_result, sizeof(read_result), \"%d\", tmp);
        read_result[sizeof(read_result)-1] = 0;
      }
    }
    break;

    case 'b':
    {
      bool tmp;
      if (!isRead) {
        if (!strcasecmp(\"true\", argv[3]))
          tmp = true;
        else if (!strcasecmp(\"false\", argv[3]))
          tmp = false;
        else
          BAIL(\"failed to parse write argument\");
        val.setBool(tmp);
      } else {
        result = av_settings->ReadBoolSetting(name, &tmp);
        snprintf(read_result,
                 sizeof(read_result),
                 \"%s\",
                 tmp ? \"true\" : \"false\");
        read_result[sizeof(read_result)-1] = 0;
      }
    }
    break;

    case 's':
    {
      if (!isRead) {
        val.setString(android::String8(argv[3]));
      } else {
        android::String8 tmp;
        result = av_settings->ReadString8Setting(name, &tmp);
        snprintf(read_result, sizeof(read_result), \"%s\", tmp.string());
        read_result[sizeof(read_result)-1] = 0;
      }
    }
    break;

    case 'f':
    {
      float tmp;
      if (!isRead) {
        if (1 != sscanf(argv[3], \"%f\", &tmp))
          BAIL(\"failed to parse write argument\");
        val.setFloat(tmp);
      } else {
        result = av_settings->ReadFloatSetting(name, &tmp);
        snprintf(read_result, sizeof(read_result), \"%f\", tmp);
        read_result[sizeof(read_result)-1] = 0;
      }
    }
    break;

    case 'r':
    {
      if (!isRead) {
        int x, y, w, h;
        if (4 != sscanf(argv[3], \"%d,%d,%d,%d\", &x, &y, &w, &h))
          BAIL(\"failed to parse write argument\");
        val.setRect(android::Rect(x, y, x + w, y + h));
      } else {
        android::Rect tmp;
        result = av_settings->ReadRectSetting(name, &tmp);
        snprintf(read_result,
                 sizeof(read_result),
                 \"%d,%d,%d,%d\",
                 tmp.left,
                 tmp.top,
                 tmp.width(),
                 tmp.height());
        read_result[sizeof(read_result)-1] = 0;
      }
    }
    break;

    default:
      BAIL(\"unrecognized type specifier\");
  }

  if (isRead) {
    if (android::OK == result)
      printf(\"Read of setting %s == \\\"%s\\\"\\n\", name, read_result);
    else
      printf(\"Read of setting '%s' failed. (result = 0x%08x)\\n\", name, result);
  } else {
    result = av_settings->WriteSetting(name, val);
    printf(\"Wrote setting %s = \\\"%s\\\" (result = 0x%08x)\\n\",
           name, argv[3], result);
  }

  return 0;
}
"
      associated_classes
      end
    end
  end
end
