class ShapeDrawable
!!!6489740.java!!!	ShapeDrawable()
        this((ShapeState) null);
!!!6489868.java!!!	ShapeDrawable(inout s : Shape)
        this((ShapeState) null);
        
        mShapeState.mShape = s;
!!!6489996.java!!!	ShapeDrawable(inout state : ShapeState)
        mShapeState = new ShapeState(state);
!!!6490124.java!!!	getShape() : Shape
        return mShapeState.mShape;
!!!6490252.java!!!	setShape(inout s : Shape) : void
        mShapeState.mShape = s;
        updateShape();
!!!6490380.java!!!	setShaderFactory(inout fact : ShaderFactory) : void
        mShapeState.mShaderFactory = fact;
!!!6490508.java!!!	getShaderFactory() : ShaderFactory
        return mShapeState.mShaderFactory;
!!!6490636.java!!!	getPaint() : Paint
        return mShapeState.mPaint;
!!!6490764.java!!!	setPadding(in left : int, in top : int, in right : int, in bottom : int) : void
        if ((left | top | right | bottom) == 0) {
            mShapeState.mPadding = null;
        } else {
            if (mShapeState.mPadding == null) {
                mShapeState.mPadding = new Rect();
            }
            mShapeState.mPadding.set(left, top, right, bottom);
        }
        invalidateSelf();
!!!6490892.java!!!	setPadding(inout padding : Rect) : void
        if (padding == null) {
            mShapeState.mPadding = null;
        } else {
            if (mShapeState.mPadding == null) {
                mShapeState.mPadding = new Rect();
            }
            mShapeState.mPadding.set(padding);
        }
        invalidateSelf();
!!!6491020.java!!!	setIntrinsicWidth(in width : int) : void
        mShapeState.mIntrinsicWidth = width;
        invalidateSelf();
!!!6491148.java!!!	setIntrinsicHeight(in height : int) : void
        mShapeState.mIntrinsicHeight = height;
        invalidateSelf();
!!!6491276.java!!!	getIntrinsicWidth() : int
        return mShapeState.mIntrinsicWidth;
!!!6491404.java!!!	getIntrinsicHeight() : int
        return mShapeState.mIntrinsicHeight;
!!!6491532.java!!!	getPadding(inout padding : Rect) : boolean
        if (mShapeState.mPadding != null) {
            padding.set(mShapeState.mPadding);
            return true;
        } else {
            return super.getPadding(padding);
        }
!!!6491660.java!!!	modulateAlpha(in paintAlpha : int, in alpha : int) : int
        int scale = alpha + (alpha >>> 7);  // convert to 0..256
        return paintAlpha * scale >>> 8;
!!!6491788.java!!!	onDraw(inout shape : Shape, inout canvas : Canvas, inout paint : Paint) : void
        shape.draw(canvas, paint);
!!!6491916.java!!!	draw(inout canvas : Canvas) : void
        Rect r = getBounds();
        Paint paint = mShapeState.mPaint;

        int prevAlpha = paint.getAlpha();
        paint.setAlpha(modulateAlpha(prevAlpha, mShapeState.mAlpha));

        if (mShapeState.mShape != null) {
            // need the save both for the translate, and for the (unknown) Shape
            int count = canvas.save();
            canvas.translate(r.left, r.top);
            onDraw(mShapeState.mShape, canvas, paint);
            canvas.restoreToCount(count);
        } else {
            canvas.drawRect(r, paint);
        }
        
        // restore
        paint.setAlpha(prevAlpha);
!!!6492044.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations()
                | mShapeState.mChangingConfigurations;
!!!6492172.java!!!	setAlpha(in alpha : int) : void
        mShapeState.mAlpha = alpha;
        invalidateSelf();
!!!6492300.java!!!	setColorFilter(inout cf : ColorFilter) : void
        mShapeState.mPaint.setColorFilter(cf);
        invalidateSelf();
!!!6492428.java!!!	getOpacity() : int
        if (mShapeState.mShape == null) {
            final Paint p = mShapeState.mPaint;
            if (p.getXfermode() == null) {
                final int alpha = p.getAlpha();
                if (alpha == 0) {
                    return PixelFormat.TRANSPARENT;
                }
                if (alpha == 255) {
                    return PixelFormat.OPAQUE;
                }
            }
        }
        // not sure, so be safe
        return PixelFormat.TRANSLUCENT;
!!!6492556.java!!!	setDither(inout dither : boolean) : void
        mShapeState.mPaint.setDither(dither);
        invalidateSelf();
!!!6492684.java!!!	onBoundsChange(inout bounds : Rect) : void
        super.onBoundsChange(bounds);
        updateShape();
!!!6492812.java!!!	inflateTag(in name : String, inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : boolean

        if ("padding".equals(name)) {
            TypedArray a = r.obtainAttributes(attrs,
                    com.android.internal.R.styleable.ShapeDrawablePadding);
            setPadding(
                    a.getDimensionPixelOffset(
                            com.android.internal.R.styleable.ShapeDrawablePadding_left, 0),
                    a.getDimensionPixelOffset(
                            com.android.internal.R.styleable.ShapeDrawablePadding_top, 0),
                    a.getDimensionPixelOffset(
                            com.android.internal.R.styleable.ShapeDrawablePadding_right, 0),
                    a.getDimensionPixelOffset(
                            com.android.internal.R.styleable.ShapeDrawablePadding_bottom, 0));
            a.recycle();
            return true;
        }

        return false;
!!!6492940.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : void
        super.inflate(r, parser, attrs);

        TypedArray a = r.obtainAttributes(attrs, com.android.internal.R.styleable.ShapeDrawable);

        int color = mShapeState.mPaint.getColor();
        color = a.getColor(com.android.internal.R.styleable.ShapeDrawable_color, color);
        mShapeState.mPaint.setColor(color);

        boolean dither = a.getBoolean(com.android.internal.R.styleable.ShapeDrawable_dither, false);
        mShapeState.mPaint.setDither(dither);

        setIntrinsicWidth((int)
                a.getDimension(com.android.internal.R.styleable.ShapeDrawable_width, 0f));
        setIntrinsicHeight((int)
                a.getDimension(com.android.internal.R.styleable.ShapeDrawable_height, 0f));

        a.recycle();

        int type;
        final int outerDepth = parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT
               && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
            if (type != XmlPullParser.START_TAG) {
                continue;
            }
            
            final String name = parser.getName();
            // call our subclass
            if (!inflateTag(name, r, parser, attrs)) {
                android.util.Log.w("drawable", "Unknown element: " + name +
                        " for ShapeDrawable " + this);
            }
        }
!!!6493068.java!!!	updateShape() : void
        if (mShapeState.mShape != null) {
            final Rect r = getBounds();
            final int w = r.width();
            final int h = r.height();

            mShapeState.mShape.resize(w, h);
            if (mShapeState.mShaderFactory != null) {
                mShapeState.mPaint.setShader(mShapeState.mShaderFactory.resize(w, h));
            }
        }
        invalidateSelf();
!!!6493196.java!!!	getConstantState() : ConstantState
        mShapeState.mChangingConfigurations = getChangingConfigurations();
        return mShapeState;
!!!6493324.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            if (mShapeState.mPaint != null) {
                mShapeState.mPaint = new Paint(mShapeState.mPaint);
            } else {
                mShapeState.mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
            }
            if (mShapeState.mPadding != null) {
                mShapeState.mPadding = new Rect(mShapeState.mPadding);
            } else {
                mShapeState.mPadding = new Rect();
            }
            try {
                mShapeState.mShape = mShapeState.mShape.clone();
            } catch (CloneNotSupportedException e) {
                return null;
            }
            mMutated = true;
        }
        return this;
