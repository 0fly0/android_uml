class GtvFtplet
!!!13395468.java!!!	GtvFtplet(inout context : Context)
            mDatabaseManager = new DatabaseManager(context);
!!!13395596.java!!!	onLogin(inout session : FtpSession, inout request : FtpRequest) : FtpletResult
            if (session.isLoggedIn()) {
                ++mLoginUserNumber;
                mLoginFailureNumber = 0;
            }
            return super.onConnect(session);
!!!13395724.java!!!	onDisconnect(inout session : FtpSession) : FtpletResult
            if (session.isLoggedIn()) {
                --mLoginUserNumber;

                // If there are many login trials,
                // the FtpServer will be stopped just after all users are logged out.
                if (mLoginUserNumber == 0 && mLoginFailureNumber > sMaxLoginFailure) {
                    stopByManyLoginFailure();
                }
            }
            return super.onDisconnect(session);
!!!13395852.java!!!	afterCommand(inout session : FtpSession, inout request : FtpRequest, inout reply : FtpReply) : FtpletResult
            // Whenever a login is failed, increment mFtpLoginFailureNumber.
            // If no user is logged in and there are too many login trials, stops the FtpServer.
            if (request.getCommand().equalsIgnoreCase("PASS")
                    && reply.getCode() != FtpReply.REPLY_230_USER_LOGGED_IN) {
                ++mLoginFailureNumber;
                Log.i(TAG, "login failure " + mLoginFailureNumber);
                if (mLoginUserNumber == 0 && mLoginFailureNumber > sMaxLoginFailure)
                    stopByManyLoginFailure();
            }
            if (DEBUG) {
                Log.d(TAG, "afterCommand " + session.getClientAddress());
                Log.d(TAG, "             " + request.getRequestLine());
                Log.d(TAG, "             " + request.getCommand());
                Log.d(TAG, "             " + request.getArgument());
                Log.d(TAG, "             " + reply.getCode());
                Log.d(TAG, "             " + reply.getMessage());
            }
            session.setAttribute(sAttributeReplyCode, reply.getCode());
            return super.afterCommand(session, request, reply);
!!!13395980.java!!!	onDeleteEnd(inout session : FtpSession, inout request : FtpRequest) : FtpletResult
            int replyCode = (Integer) session.getAttribute(sAttributeReplyCode);
            if (replyCode == FtpReply.REPLY_250_REQUESTED_FILE_ACTION_OKAY) {
                FtpFile target = session.getFileSystemView().getFile(request.getArgument());
                mDatabaseManager.deleteFile(mHomeDir + target.getAbsolutePath());
            }
            return super.onDeleteEnd(session, request);
!!!13396108.java!!!	onRenameStart(inout session : FtpSession, inout request : FtpRequest) : FtpletResult
            FtpFile fromFile = session.getRenameFrom();
            // TODO: Remove this and add a routine to process directories also.
            if (fromFile.isDirectory()) {
                session.write(new DefaultFtpReply(
                        FtpReply.REPLY_553_REQUESTED_ACTION_NOT_TAKEN_FILE_NAME_NOT_ALLOWED,
                        "Renaming directory is not supported."));
                return FtpletResult.SKIP;
            }
            // fromFile will be invalid at onRenameEnd(), so we should store it here.
            String oldPath = mHomeDir + fromFile.getAbsolutePath();
            session.setAttribute(sAttributeOldPath, oldPath);
            return super.onRenameStart(session, request);
!!!13396236.java!!!	onRenameEnd(inout session : FtpSession, inout request : FtpRequest) : FtpletResult
            int replyCode = (Integer) session.getAttribute(sAttributeReplyCode);
            if (replyCode == FtpReply.REPLY_250_REQUESTED_FILE_ACTION_OKAY) {
                FtpFile toFile = session.getFileSystemView().getFile(request.getArgument());
                String oldPath = (String) session.getAttribute(sAttributeOldPath);
                mDatabaseManager.renameFile(oldPath, mHomeDir + toFile.getAbsolutePath());
            }
            return super.onRenameEnd(session, request);
!!!13396364.java!!!	onUploadEnd(inout session : FtpSession, inout request : FtpRequest) : FtpletResult
            actionUploadEnd(session, request);
            return super.onUploadEnd(session, request);
!!!13396492.java!!!	onUploadUniqueEnd(inout session : FtpSession, inout request : FtpRequest) : FtpletResult
            actionUploadEnd(session, request);
            return super.onUploadUniqueEnd(session, request);
!!!13396620.java!!!	actionUploadEnd(inout session : FtpSession, inout request : FtpRequest) : void
            int replyCode = (Integer) session.getAttribute(sAttributeReplyCode);
            switch (replyCode) {
                case FtpReply.REPLY_226_CLOSING_DATA_CONNECTION:
                    FtpFile target = session.getFileSystemView().getFile(request.getArgument());
                    mDatabaseManager.insertFile(mHomeDir + target.getAbsolutePath());
                    break;
                case FtpReply.REPLY_552_REQUESTED_FILE_ACTION_ABORTED_EXCEEDED_STORAGE:
                    showNotification(sFtpActionAbortedExceededStorage, null);
                    break;
            }
