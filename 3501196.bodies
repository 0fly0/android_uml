class ClassObj
!!!15294476.java!!!	ClassObj(in id : long, inout stack : StackTrace, inout className : String)
        mId = id;
        mStack = stack;
        mClassName = className;
!!!15294604.java!!!	resolveReferences(inout state : State) : void
        ByteArrayInputStream bais =
            new ByteArrayInputStream(mStaticFieldValues);
        DataInputStream dis = new DataInputStream(bais);
        int[] types = mStaticFieldTypes;
        final int N = types.length;

        /*
         * Spin through the list of static fields, find all object references,
         * and list ourselves as a reference holder.  Also add them to
         * the list of root objects.
         */
        try {
            for (int i = 0; i < N; i++) {
                int type = types[i];
                int size = Types.getTypeSize(type);

                if (type == Types.OBJECT) {
                    long id;

                    if (size == 4) {
                        id = dis.readInt();
                    } else {
                        id = dis.readLong();
                    }

                    RootObj root = new RootObj(RootType.JAVA_STATIC, id);

                    if (id == 0) {
                        root.mComment = String.format(
                            "Static field %s:%s null",
                                mClassName,
                                mStaticFieldNames[i]);
                    } else {
                        Instance instance = state.findReference(id);

                        instance.addParent(this);

                        root.mComment = String.format(
                            "Static field %s:%s %s [%s] 0x%08x",
                                mClassName,
                                mStaticFieldNames[i],
                                instance.getTypeName(),
                                instance.mHeap.mName,
                                id);
                    }

                    mHeap.addRoot(root);
                } else {
                    dis.skipBytes(size);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }

        //  Lastly, add ourself as a subclass of our superclass
        if (mSuperclassId != 0) {
            ClassObj superclass = state.findClass(mSuperclassId);

            superclass.addSubclass(this);
        }
!!!15294732.java!!!	addSubclass(inout subclass : ClassObj) : void
        mSubclasses.add(subclass);
!!!15294860.java!!!	dumpSubclasses() : void
        for (ClassObj subclass: mSubclasses) {
            System.out.println("     " + subclass.mClassName);
        }
!!!15294988.java!!!	toString() : String
        return mClassName.replace('/', '.');
!!!15295116.java!!!	addInstance(inout instance : Instance) : void
        mInstances.add(instance);
!!!15295244.java!!!	setSuperclassId(in id : long) : void
        mSuperclassId = id;
!!!15295372.java!!!	setFieldNames(inout names : String) : void
        mFieldNames = names;
!!!15295500.java!!!	setFieldTypes(inout types : int) : void
        mFieldTypes = types;
!!!15295628.java!!!	setStaticFieldNames(inout names : String) : void
        mStaticFieldNames = names;
!!!15295756.java!!!	setStaticFieldTypes(inout types : int) : void
        mStaticFieldTypes = types;
!!!15295884.java!!!	setStaticFieldValues(inout values : byte) : void
        mStaticFieldValues = values;
!!!15296012.java!!!	dump() : void
        System.out.println("+----------  ClassObj dump for: " + mClassName);

        System.out.println("+-----  Static fields");

        for (int i = 0; i < mStaticFieldNames.length; i++) {
            System.out.println(mStaticFieldNames[i] + ": "
                + mStaticFieldTypes[i]);
        }

        System.out.println("+-----  Instance fields");

        for (int i = 0; i < mFieldNames.length; i++) {
            System.out.println(mFieldNames[i] + ": " + mFieldTypes[i]);
        }
!!!15296140.java!!!	getTypeName() : String
        return "class " + mClassName;
!!!15296268.java!!!	visit(inout resultSet : Set<Instance>, inout filter : Filter) : void
        if (resultSet.contains(this)) {
            return;
        }

        if (filter != null) {
            if (filter.accept(this)) {
                resultSet.add(this);
            }
        } else {
            resultSet.add(this);
        }

        ByteArrayInputStream bais =
            new ByteArrayInputStream(mStaticFieldValues);
        DataInputStream dis = new DataInputStream(bais);
        int[] types = mStaticFieldTypes;
        final int N = types.length;
        State state = mHeap.mState;

        /*
         * Spin through the list of static fields, find all object references,
         * and visit them.
         */
        try {
            for (int i = 0; i < N; i++) {
                int type = types[i];
                int size = Types.getTypeSize(type);

                if (type == Types.OBJECT) {
                    long id;

                    if (size == 4) {
                        id = dis.readInt();
                    } else {
                        id = dis.readLong();
                    }

                    Instance instance = state.findReference(id);

                    if (instance != null) {
                        instance.visit(resultSet, filter);
                    }
                } else {
                    dis.skipBytes(size);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
!!!15296396.java!!!	compareTo(inout o : ClassObj) : int
        return mClassName.compareTo(o.mClassName);
!!!15296524.java!!!	equals(inout o : Object) : boolean
        if (! (o instanceof ClassObj)) {
            return false;
        }

        return 0 == compareTo((ClassObj) o);
