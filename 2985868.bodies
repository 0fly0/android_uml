class ConnectingState
!!!12159884.java!!!	enter() : void
			Log.d(TAG, "Enter ConnectingState: " + getCurrentMessage().what);
			mWFDSinkService.showNotification(R.string.ConnectingState);
			WFDSinkConnectTicket ticket = (WFDSinkConnectTicket) getCurrentMessage().obj;
			mWFDSinkService.connect(ticket.dst, ticket.pin, ticket.wps);
!!!12160012.java!!!	processMessage(inout message : Message) : boolean
			Log.d(TAG, "ConnectingState process message: " + message.what);

			boolean retValue = HANDLED;

			switch (message.what) {
			case P2P_CONNECTION_ESTABLISHED:
				removeMessages(P2P_CONNECT_TIMEOUT);
				transitionTo(mConnectedState);
				break;
			case P2P_CONNECT_TIMEOUT:
				mWFDSinkService.cancelConnect();
				transitionTo(mEnabledState);
				// broadcast WFD sink status.
				final Intent intent = new Intent(WFDSinkService.WIFI_DISPLAY_SINK_SESSION_MESSAGE);
				intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
				intent.putExtra(WFDSinkService.WIFI_DISPLAY_SINK_SESSION_MESSAGE, WFDSinkListFragment.WFD_SESSION_DESTROYED);
				mWFDSinkService.sendStickyBroadcast(intent);
				break;
			case USER_CANCEL_CONNECT:
				removeMessages(P2P_CONNECT_TIMEOUT);
				mWFDSinkService.cancelConnect();
				transitionTo(mEnabledState);
				break;
			default:
				return NOT_HANDLED;
			}
			return retValue;
