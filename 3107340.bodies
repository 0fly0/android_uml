class MoreKeysResources
!!!13038988.java!!!	MoreKeysResources(in jar : JarFile)
        mJar = jar;
        final ArrayList<String> resources = JarUtils.getNameListing(jar, TEXT_RESOURCE_NAME);
        for (final String name : resources) {
            final String dirName = name.substring(0, name.lastIndexOf('/'));
            final int pos = dirName.lastIndexOf('/');
            final String parentName = (pos >= 0) ? dirName.substring(pos + 1) : dirName;
            final String language = getLanguageFromResDir(parentName);
            final InputStream stream = JarUtils.openResource(name);
            try {
                mResourcesMap.put(language, new StringResourceMap(stream));
            } finally {
                close(stream);
            }
        }
!!!13039116.java!!!	getLanguageFromResDir(in dirName : String) : String
        final int languagePos = dirName.indexOf('-');
        if (languagePos < 0) {
            // Default resource.
            return DEFAUT_LANGUAGE_NAME;
        }
        final String language = dirName.substring(languagePos + 1);
        final int countryPos = language.indexOf("-r");
        if (countryPos < 0) {
            return language;
        }
        return language.replace("-r", "_");
!!!13039244.java!!!	writeToJava(in outDir : String) : void
        final ArrayList<String> list = JarUtils.getNameListing(mJar, JAVA_TEMPLATE);
        if (list.isEmpty())
            throw new RuntimeException("Can't find java template " + JAVA_TEMPLATE);
        if (list.size() > 1)
            throw new RuntimeException("Found multiple java template " + JAVA_TEMPLATE);
        final String template = list.get(0);
        final String javaPackage = template.substring(0, template.lastIndexOf('/'));
        PrintStream ps = null;
        LineNumberReader lnr = null;
        try {
            if (outDir == null) {
                ps = System.out;
            } else {
                final File outPackage = new File(outDir, javaPackage);
                final File outputFile = new File(outPackage,
                        JAVA_TEMPLATE.replace(".tmpl", ".java"));
                outPackage.mkdirs();
                ps = new PrintStream(outputFile);
            }
            lnr = new LineNumberReader(new InputStreamReader(JarUtils.openResource(template)));
            inflateTemplate(lnr, ps);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            close(lnr);
            close(ps);
        }
!!!13039372.java!!!	inflateTemplate(in in : LineNumberReader, in out : PrintStream) : void
        String line;
        while ((line = in.readLine()) != null) {
            if (line.contains(MARK_NAMES)) {
                dumpNames(out);
            } else if (line.contains(MARK_DEFAULT_TEXTS)) {
                dumpDefaultTexts(out);
            } else if (line.contains(MARK_TEXTS)) {
                dumpTexts(out);
            } else if (line.contains(MARK_LANGUAGES_AND_TEXTS)) {
                dumpLanguageMap(out);
            } else {
                out.println(line);
            }
        }
!!!13039500.java!!!	dumpNames(in out : PrintStream) : void
        final StringResourceMap defaultResMap = mResourcesMap.get(DEFAUT_LANGUAGE_NAME);
        int id = 0;
        for (final StringResource res : defaultResMap.getResources()) {
            out.format("        /* %2d */ \"%s\",\n", id, res.mName);
            mNameToIdMap.put(res.mName, id);
            id++;
        }
!!!13039628.java!!!	dumpDefaultTexts(in out : PrintStream) : void
        final StringResourceMap defaultResMap = mResourcesMap.get(DEFAUT_LANGUAGE_NAME);
        dumpTextsInternal(out, defaultResMap, defaultResMap);
!!!13039756.java!!!	dumpTexts(in out : PrintStream) : void
        final StringResourceMap defaultResMap = mResourcesMap.get(DEFAUT_LANGUAGE_NAME);
        final ArrayList<String> allLanguages = new ArrayList<String>();
        allLanguages.addAll(mResourcesMap.keySet());
        Collections.sort(allLanguages);
        for (final String language : allLanguages) {
            if (language.equals(DEFAUT_LANGUAGE_NAME)) {
                continue;
            }
            out.format("    /* Language %s: %s */\n", language, getLanguageDisplayName(language));
            out.format("    private static final String[] " + ARRAY_NAME_FOR_LANGUAGE + " = {\n",
                    language);
            final StringResourceMap resMap = mResourcesMap.get(language);
            dumpTextsInternal(out, resMap, defaultResMap);
            out.format("    };\n\n");
        }
!!!13039884.java!!!	dumpLanguageMap(in out : PrintStream) : void
        final ArrayList<String> allLanguages = new ArrayList<String>();
        allLanguages.addAll(mResourcesMap.keySet());
        Collections.sort(allLanguages);
        for (final String language : allLanguages) {
            out.format("        \"%s\", " + ARRAY_NAME_FOR_LANGUAGE + ", /* %s */\n",
                    language, language, getLanguageDisplayName(language));
        }
!!!13040012.java!!!	getLanguageDisplayName(in language : String) : String
        if (language.equals(NO_LANGUAGE_CODE)) {
            return NO_LANGUAGE_DISPLAY_NAME;
        } else {
            return new Locale(language).getDisplayLanguage();
        }
!!!13040140.java!!!	dumpTextsInternal(in out : PrintStream, in resMap : StringResourceMap, in defaultResMap : StringResourceMap) : void
        final ArrayInitializerFormatter formatter =
                new ArrayInitializerFormatter(out, 100, "        ");
        boolean successiveNull = false;
        for (final StringResource defaultRes : defaultResMap.getResources()) {
            if (resMap.contains(defaultRes.mName)) {
                final StringResource res = resMap.get(defaultRes.mName);
                if (res.mComment != null) {
                    formatter.outCommentLines(addPrefix("        // ", res. mComment));
                }
                final String escaped = escapeNonAscii(res.mValue);
                if (escaped.length() == 0) {
                    formatter.outElement(EMPTY_STRING_VAR + ",");
                } else {
                    formatter.outElement(String.format("\"%s\",", escaped));
                }
                successiveNull = false;
            } else {
                formatter.outElement("null,");
                successiveNull = true;
            }
        }
        if (!successiveNull) {
            formatter.flush();
        }
!!!13040268.java!!!	addPrefix(in prefix : String, in lines : String) : String
        final StringBuilder sb = new StringBuilder();
        for (final String line : lines.split("\n")) {
            sb.append(prefix + line.trim() + "\n");
        }
        return sb.toString();
!!!13040396.java!!!	escapeNonAscii(in text : String) : String
        final StringBuilder sb = new StringBuilder();
        final int length = text.length();
        for (int i = 0; i < length; i++) {
            final char c = text.charAt(i);
            if (c >= ' ' && c < 0x7f) {
                sb.append(c);
            } else {
                sb.append(String.format("\\u%04X", (int)c));
            }
        }
        return replaceIncompatibleEscape(sb.toString());
!!!13040524.java!!!	replaceIncompatibleEscape(in text : String) : String
        String t = text;
        t = replaceAll(t, "\\?", "?");
        t = replaceAll(t, "\\@", "@");
        t = replaceAll(t, "@string/", "!text/");
        return t;
!!!13040652.java!!!	replaceAll(in text : String, in target : String, in replace : String) : String
        String t = text;
        while (t.indexOf(target) >= 0) {
            t = t.replace(target, replace);
        }
        return t;
!!!13040780.java!!!	close(inout stream : Closeable) : void
        try {
            if (stream != null) {
                stream.close();
            }
        } catch (IOException e) {
        }
