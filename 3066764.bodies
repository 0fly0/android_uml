class StreamFetcherThread
!!!12703372.java!!!	run() : void
            Looper.prepare();
            mSourceLooper = Looper.myLooper();

            mHandlerLock.lock();
            mSourceHandler = new Handler() {
                @Override
                public void handleMessage(Message msg) {
                    switch (msg.what) {
                    case SmoothStreamingConstants.SS_START:
                        onStart();
                        break;
                    case SmoothStreamingConstants.SS_MONITOR_QUEUE:
                        onMonitorQueue();
                        break;
                    case SmoothStreamingConstants.SS_REQUEST_DOWNLOAD:
                        onDownloadRequest(msg);
                        break;
                    case SmoothStreamingConstants.SS_USE_TRACK:
                        onUseTrack(msg);
                        break;
                    case SmoothStreamingConstants.SS_UNUSE_TRACK:
                        onUnuseTrack(msg);
                        break;
                    }
                }

                private void onUseTrack(Message msg) {
                    mSessionManager.useTrack(msg.arg1);
                }

                private void onUnuseTrack(Message msg) {
                    mSessionManager.unuseTrack(msg.arg1);
                }

                private void onStart() {
                    postMonitorQueue(0);
                }

                private void onMonitorQueue() {
                    mSessionManager.monitorSessionQueues();
                    postMonitorQueue(MONITOR_QUEUE_DELAY_MS);
                }

                private void postMonitorQueue(long wait) {
                    Message msg = this.obtainMessage(SmoothStreamingConstants.SS_MONITOR_QUEUE);
                    sendMessageDelayed(msg, wait);
                }

                private void onDownloadRequest(final Message msg) {
                    int trackId = msg.arg1;

                    SmoothStreamingDataRequest req = (SmoothStreamingDataRequest) msg.obj;
                    String url = buildPath(req.url);

                    ByteBuffer data = mFetcher.getData(url);
                    int downloadTrial = 1;
                    while ((data == null || data.limit() == 0) &&
                           downloadTrial < sMaxDownloadTrial) {
                        Log.i(TAG, "Retrying to download: " + url);
                        data = mFetcher.getData(url);
                        ++downloadTrial;
                    }

                    if (data == null || data.limit() == 0) {
                        Log.e(TAG, "Download failure: " + url);
                        //TODO: Notify error to NativePlayer and stop the media.
                    } else {
                        mSessionManager.handleStreamData(req, data);
                        postMonitorQueue(MONITOR_QUEUE_DELAY_MS);
                    }
                }
            };

            mFetcherHandlerReady.signal();
            mHandlerLock.unlock();

            Looper.loop();
