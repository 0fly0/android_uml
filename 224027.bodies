class DriverManager
!!!1032219.java!!!	loadInitialDrivers() : void
        String theDriverList = System.getProperty("jdbc.drivers", null);
        if (theDriverList == null) {
            return;
        }

        /*
         * Get the names of the drivers as an array of Strings from the system
         * property by splitting the property at the separator character ':'
         */
        String[] theDriverNames = theDriverList.split(":");

        for (String element : theDriverNames) {
            try {
                // Load the driver class
                Class
                        .forName(element, true, ClassLoader
                                .getSystemClassLoader());
            } catch (Throwable t) {
                // Ignored
            }
        }
!!!1032475.java!!!	deregisterDriver(inout driver : Driver) : void
        if (driver == null) {
            return;
        }
        ClassLoader callerClassLoader = VMStack.getCallingClassLoader();
        if (!DriverManager.isClassFromClassLoader(driver, callerClassLoader)) {
            throw new SecurityException("calling class not authorized to deregister JDBC driver");
        }
        synchronized (theDrivers) {
            theDrivers.remove(driver);
        }
!!!1032603.java!!!	getConnection(inout url : String) : Connection
        return getConnection(url, new Properties());
!!!1032731.java!!!	getConnection(inout url : String, inout info : Properties) : Connection
        // 08 - connection exception
        // 001 - SQL-client unable to establish SQL-connection
        String sqlState = "08001";
        if (url == null) {
            throw new SQLException("The url cannot be null", sqlState);
        }
        synchronized (theDrivers) {
            /*
             * Loop over the drivers in the DriverSet checking to see if one can
             * open a connection to the supplied URL - return the first
             * connection which is returned
             */
            for (Driver theDriver : theDrivers) {
                Connection theConnection = theDriver.connect(url, info);
                if (theConnection != null) {
                    return theConnection;
                }
            }
        }
        // If we get here, none of the drivers are able to resolve the URL
        throw new SQLException("No suitable driver", sqlState);
!!!1032859.java!!!	getConnection(inout url : String, inout user : String, inout password : String) : Connection
        Properties theProperties = new Properties();
        if (user != null) {
            theProperties.setProperty("user", user);
        }
        if (password != null) {
            theProperties.setProperty("password", password);
        }
        return getConnection(url, theProperties);
!!!1032987.java!!!	getDriver(inout url : String) : Driver
        ClassLoader callerClassLoader = VMStack.getCallingClassLoader();
        synchronized (theDrivers) {
            /*
             * Loop over the drivers in the DriverSet checking to see if one
             * does understand the supplied URL - return the first driver which
             * does understand the URL
             */
            for (Driver driver : theDrivers) {
                if (driver.acceptsURL(url) &&
                        DriverManager.isClassFromClassLoader(driver, callerClassLoader)) {
                    return driver;
                }
            }
        }
        // If no drivers understand the URL, throw an SQLException
        // SQLState: 08 - connection exception
        // 001 - SQL-client unable to establish SQL-connection
        throw new SQLException("No suitable driver", "08001");
!!!1033115.java!!!	getDrivers() : Enumeration
        /*
         * Synchronize to avoid clashes with additions and removals of drivers
         * in the DriverSet
         */
        ClassLoader callerClassLoader = VMStack.getCallingClassLoader();
        synchronized (theDrivers) {
            ArrayList<Driver> result = new ArrayList<Driver>();
            for (Driver driver : theDrivers) {
                if (DriverManager.isClassFromClassLoader(driver, callerClassLoader)) {
                    result.add(driver);
                }
            }
            return Collections.enumeration(result);
        }
!!!1033243.java!!!	getLoginTimeout() : int
        return loginTimeout;
!!!1033371.java!!!	getLogStream() : PrintStream
        return thePrintStream;
!!!1033499.java!!!	getLogWriter() : PrintWriter
        return thePrintWriter;
!!!1033627.java!!!	println(inout message : String) : void
        if (thePrintWriter != null) {
            thePrintWriter.println(message);
            thePrintWriter.flush();
        } else if (thePrintStream != null) {
            thePrintStream.println(message);
            thePrintStream.flush();
        }
        /*
         * If neither the PrintWriter not the PrintStream are set, then silently
         * do nothing the message is not recorded and no exception is generated.
         */
!!!1033755.java!!!	registerDriver(inout driver : Driver) : void
        if (driver == null) {
            throw new NullPointerException("driver == null");
        }
        synchronized (theDrivers) {
            theDrivers.add(driver);
        }
!!!1033883.java!!!	setLoginTimeout(in seconds : int) : void
        loginTimeout = seconds;
!!!1034011.java!!!	setLogStream(inout out : PrintStream) : void
        thePrintStream = out;
!!!1034139.java!!!	setLogWriter(inout out : PrintWriter) : void
        thePrintWriter = out;
!!!1034267.java!!!	isClassFromClassLoader(inout theObject : Object, inout theClassLoader : ClassLoader) : boolean

        if ((theObject == null) || (theClassLoader == null)) {
            return false;
        }

        Class<?> objectClass = theObject.getClass();

        try {
            Class<?> checkClass = Class.forName(objectClass.getName(), true,
                    theClassLoader);
            if (checkClass == objectClass) {
                return true;
            }
        } catch (Throwable t) {
            // Empty
        }
        return false;
