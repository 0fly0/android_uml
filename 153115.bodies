class Enum
!!!331035.java!!!	Enum(inout name : String, in ordinal : int)
        this.name = name;
        this.ordinal = ordinal;
!!!331163.java!!!	name() : String
        return name;
!!!331291.java!!!	ordinal() : int
        return ordinal;
!!!331419.java!!!	toString() : String
        return name;
!!!331547.java!!!	equals(inout other : Object) : boolean
        return this == other;
!!!331675.java!!!	hashCode() : int
        return ordinal + (name == null ? 0 : name.hashCode());
!!!331803.java!!!	clone() : Object
        throw new CloneNotSupportedException("Enums may not be cloned");
!!!331931.java!!!	compareTo(inout o : E) : int
        return ordinal - o.ordinal;
!!!332059.java!!!	getDeclaringClass() : Class
        Class<?> myClass = getClass();
        Class<?> mySuperClass = myClass.getSuperclass();
        if (Enum.class == mySuperClass) {
            return (Class<E>)myClass;
        }
        return (Class<E>)mySuperClass;
!!!332187.java!!!	valueOf(inout enumType : Class, inout name : String) : T
        if (enumType == null) {
            throw new NullPointerException("enumType == null");
        } else if (name == null) {
            throw new NullPointerException("name == null");
        }
        T[] values = getSharedConstants(enumType);
        if (values == null) {
            throw new IllegalArgumentException(enumType + " is not an enum type");
        }
        for (T value : values) {
            if (name.equals(value.name())) {
                return value;
            }
        }
        throw new IllegalArgumentException(name + " is not a constant in " + enumType.getName());
!!!332315.java!!!	getSharedConstants(inout enumType : Class) : T
        return (T[]) sharedConstantsCache.get(enumType);
