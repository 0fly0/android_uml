class ByteBufferAsDoubleBuffer
!!!672411.java!!!	asDoubleBuffer(inout byteBuffer : ByteBuffer) : DoubleBuffer
        ByteBuffer slice = byteBuffer.slice();
        slice.order(byteBuffer.order());
        return new ByteBufferAsDoubleBuffer(slice);
!!!672539.java!!!	ByteBufferAsDoubleBuffer(inout byteBuffer : ByteBuffer)
        super(byteBuffer.capacity() / SizeOf.DOUBLE);
        this.byteBuffer = byteBuffer;
        this.byteBuffer.clear();
        this.effectiveDirectAddress = byteBuffer.effectiveDirectAddress;
!!!672667.java!!!	asReadOnlyBuffer() : DoubleBuffer
        ByteBufferAsDoubleBuffer buf = new ByteBufferAsDoubleBuffer(byteBuffer.asReadOnlyBuffer());
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        buf.byteBuffer.order = byteBuffer.order;
        return buf;
!!!672795.java!!!	compact() : DoubleBuffer
        if (byteBuffer.isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        byteBuffer.limit(limit * SizeOf.DOUBLE);
        byteBuffer.position(position * SizeOf.DOUBLE);
        byteBuffer.compact();
        byteBuffer.clear();
        position = limit - position;
        limit = capacity;
        mark = UNSET_MARK;
        return this;
!!!672923.java!!!	duplicate() : DoubleBuffer
        ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());
        ByteBufferAsDoubleBuffer buf = new ByteBufferAsDoubleBuffer(bb);
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        return buf;
!!!673051.java!!!	get() : double
        if (position == limit) {
            throw new BufferUnderflowException();
        }
        return byteBuffer.getDouble(position++ * SizeOf.DOUBLE);
!!!673179.java!!!	get(in index : int) : double
        checkIndex(index);
        return byteBuffer.getDouble(index * SizeOf.DOUBLE);
!!!673307.java!!!	get(inout dst : double, in dstOffset : int, in doubleCount : int) : DoubleBuffer
        byteBuffer.limit(limit * SizeOf.DOUBLE);
        byteBuffer.position(position * SizeOf.DOUBLE);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).get(dst, dstOffset, doubleCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).get(dst, dstOffset, doubleCount);
        }
        this.position += doubleCount;
        return this;
!!!673435.java!!!	isDirect() : boolean
        return byteBuffer.isDirect();
!!!673563.java!!!	isReadOnly() : boolean
        return byteBuffer.isReadOnly();
!!!673691.java!!!	order() : ByteOrder
        return byteBuffer.order();
!!!673819.java!!!	protectedArray() : double
        throw new UnsupportedOperationException();
!!!673947.java!!!	protectedArrayOffset() : int
        throw new UnsupportedOperationException();
!!!674075.java!!!	protectedHasArray() : boolean
        return false;
!!!674203.java!!!	put(in c : double) : DoubleBuffer
        if (position == limit) {
            throw new BufferOverflowException();
        }
        byteBuffer.putDouble(position++ * SizeOf.DOUBLE, c);
        return this;
!!!674331.java!!!	put(in index : int, in c : double) : DoubleBuffer
        checkIndex(index);
        byteBuffer.putDouble(index * SizeOf.DOUBLE, c);
        return this;
!!!674459.java!!!	put(inout src : double, in srcOffset : int, in doubleCount : int) : DoubleBuffer
        byteBuffer.limit(limit * SizeOf.DOUBLE);
        byteBuffer.position(position * SizeOf.DOUBLE);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).put(src, srcOffset, doubleCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).put(src, srcOffset, doubleCount);
        }
        this.position += doubleCount;
        return this;
!!!674587.java!!!	slice() : DoubleBuffer
        byteBuffer.limit(limit * SizeOf.DOUBLE);
        byteBuffer.position(position * SizeOf.DOUBLE);
        ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());
        DoubleBuffer result = new ByteBufferAsDoubleBuffer(bb);
        byteBuffer.clear();
        return result;
