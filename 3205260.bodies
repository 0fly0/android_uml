class BootCompletedReceiver
!!!13773836.java!!!	onReceive(inout context : Context, inout intent : Intent) : void
        String action = intent.getAction();

        if (Intent.ACTION_BOOT_COMPLETED.equals(action)) {
            // Schedule a alarm to trigger a receiver to check time setting.
            PendingIntent timeCheckIntent = PendingIntent.getBroadcast(context, 0,
                    new Intent(context, TimeCheckingReceiver.class),
                    PendingIntent.FLAG_CANCEL_CURRENT);

            AlarmManager am = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
            am.setRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,
                    android.os.SystemClock.elapsedRealtime() + WAIT_TIME_FOR_NETWORK_MILLIS,
                    AlarmManager.INTERVAL_HOUR, timeCheckIntent);

            // Start TvSettingsObserverService
            context.startService(new Intent(context, TvSettingsObserverService.class));

            // Update passive location provider if the last known location is not set.
            LocationManager locationManager =
                    (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
            Location location = locationManager.getLastKnownLocation(
                    LocationManager.PASSIVE_PROVIDER);
            if (location == null) {
                // TODO: try to get address from IP first.
                String zipCode = android.provider.Settings.Secure.getString(
                        context.getContentResolver(), "location_lineup_lookup");
                if (zipCode != null) {
                    Geocoder geocoder = new Geocoder(context, Locale.US);
                    try {
                        List<Address> addresses = geocoder.getFromLocationName(zipCode, 1);
                        if (addresses.isEmpty()) {
                            Log.e(TAG, "No results returned for ZIP code: " + zipCode);
                        } else {
                            String allowMockLocation = Settings.Secure.getString(
                                    context.getContentResolver(),
                                    Settings.Secure.ALLOW_MOCK_LOCATION);
                            Settings.Secure.putString(
                                    context.getContentResolver(),
                                    Settings.Secure.ALLOW_MOCK_LOCATION,
                                    "1");
                            String temporaryProvider = "TemporaryProvider";
                            locationManager.addTestProvider(temporaryProvider,
                                    false, false, false, false, false, false, false, 0, 0);
                            locationManager.setTestProviderEnabled(temporaryProvider, true);
                            location = new Location(temporaryProvider);
                            Address address = addresses.get(0);
                            location.setLatitude(address.getLatitude());
                            location.setLongitude(address.getLongitude());
                            location.makeComplete();
                            locationManager.setTestProviderLocation(temporaryProvider, location);
                            locationManager.removeTestProvider(temporaryProvider);
                            Settings.Secure.putString(
                                    context.getContentResolver(),
                                    Settings.Secure.ALLOW_MOCK_LOCATION,
                                    allowMockLocation);
                        }
                    } catch (IOException e) {
                        Log.e(TAG, "Problem with location: " + zipCode, e);
                    }
                }
            }
        }
