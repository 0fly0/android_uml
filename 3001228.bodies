class TVBaseDialog
!!!12247436.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        mContext = getApplicationContext();
        mReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(final Context context, final Intent intent) {
                if (intent.getAction() != null
                        & intent.getAction().equals(TvIntents.INTENT_ACTION_CLOSE_APP)) {
                    Log.d(TAG, "receive intent " + TvIntents.INTENT_ACTION_CLOSE_APP);
                    finishSelf();
                }
            }
        };
        final IntentFilter filter = new IntentFilter();
        filter.addAction(TvIntents.INTENT_ACTION_CLOSE_APP);
        registerReceiver(mReceiver, filter);
!!!12247564.java!!!	finishSelf() : void
        finish();
!!!12247692.java!!!	onResume() : void
        super.onResume();
        startTimeOut();
!!!12247820.java!!!	onPause() : void
        super.onPause();
        stopTimeOut();
!!!12247948.java!!!	onDestroy() : void
        super.onDestroy();
        unregisterReceiver(mReceiver);
!!!12248076.java!!!	setTimeOut(in value : int) : void
        mTimeOutValue = value;
!!!12248204.java!!!	getTimeOut() : int
        return mTimeOutValue;
!!!12248332.java!!!	setTimeOutRunnable(inout r : Runnable) : void
        stopTimeOut();
        mTimeOutRunnable = r;
!!!12248460.java!!!	getTimeOutRunnable() : Runnable
        return mTimeOutRunnable;
!!!12248588.java!!!	startTimeOut() : void
        isTimeOutStarted = true;
        refreshTimeOut();
!!!12248716.java!!!	stopTimeOut() : void
        isTimeOutStarted = false;
        if (getTimeOutRunnable() != null) {
            mTimeOutHandler.removeCallbacks(getTimeOutRunnable());
        }
!!!12248844.java!!!	refreshTimeOut() : void
        if (isTimeOutStarted && getTimeOutRunnable() != null && getTimeOut() != 0) {

            // Remove any pending posts of Runnable that are in the message
            // queue.
            mTimeOutHandler.removeCallbacks(getTimeOutRunnable());

            /*
             * Causes the Runnable to be added to the message queue, to be run
             * after the specified amount of time elapses. The runnable will be
             * run on the thread to which this handler is attached.
             */
            mTimeOutHandler.postDelayed(getTimeOutRunnable(), getTimeOut());
        }
!!!12248972.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        refreshTimeOut();
        return super.dispatchKeyEvent(event);
!!!12249100.java!!!	onPreparePanel(in featureId : int, inout view : View, inout menu : Menu) : boolean
        // fix 1572 menu focus disappear after press MENU key
        return false;
!!!12249228.java!!!	onKeyDown(in keyCode : int, in event : KeyEvent) : boolean

        Log.d(TAG, "onKeyDown() KeyCode : " + keyCode);
        Log.d(TAG, "onKeyDown() KeyCode : " + event);

        if (event.getScanCode() == EXIT_KEY) {
            WidgetManager.exitFromApp(mContext);
        }

        if (Wrapper.getWrapperInstance().isTunerInput()) {
            /*
             * If EAS event has not occurred, flag is set to true and Key
             * handling is normal.If EAS event has occurred, flag is set to
             * false and none of the keys are handled.
             */
            if (!Wrapper.getWrapperInstance().isEASEnabled()) {

                switch (keyCode) {
                    case KeyEvent.KEYCODE_MEDIA_NEXT:
                    case KeyEvent.KEYCODE_CHANNEL_UP:
                        if (Wrapper.getWrapperInstance().allowChannelUpDown()) {
                            Wrapper.getWrapperInstance().pauseCC();
                            Wrapper.getWrapperInstance().doChannelUp(mContext);
                            return true;
                        }
                    case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
                    case KeyEvent.KEYCODE_CHANNEL_DOWN:
                        if (Wrapper.getWrapperInstance().allowChannelUpDown()) {
                            Wrapper.getWrapperInstance().pauseCC();
                            Wrapper.getWrapperInstance().doChannelDown(mContext);
                            return true;
                        }
                }
            }
        }

        return super.onKeyDown(keyCode, event);
!!!12249356.java!!!	hideSelf(inout hide : boolean) : void
        WindowManager.LayoutParams lp = getWindow().getAttributes();
        if (hide) {
            lp.alpha = 0f;
        } else {
            lp.alpha = 1f;
        }
        getWindow().setAttributes(lp);
