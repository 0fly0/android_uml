class MultiVideoViewTest2
!!!12183308.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.video_activity_2);

        Window w = getWindow();
        w.setBackgroundDrawable(new ColorDrawable(0));

        mVideoView  = (MyVideoView) findViewById(R.id.video);

        mMultiVideoView10 = (MultiVideoView2) findViewById(R.id.surface10);

        mVideoView.setOnPreparedListener(new PrepareListener());

        GtvMediaController c = new GtvMediaController(this, false);
        mVideoView.setMediaController(c);
        mVideoView.setOwner(this);

        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT);

        mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mp) {
                //playNextMediaInPlayList();
                finish();
            }
        });

        mVideoView.setOnVideoSizeChangedListener(new VideoSizeChangedListener());

        mMultiVideoViewList=new ArrayList<MultiVideoView2>();//for multi video view
        mMultiVideoViewUrlList = new ArrayList<String>();

        Intent intent = getIntent();
        String errorString = processIntent(intent);

        if (errorString != null) {
            ShowErrorDialog(errorString);
        }else{
            playMedia(mMainVideoIntentUri);
        }

        mHandler = new Handler() {
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case EVENT_ALERT_TRIGER_MULTI_VIEW:
                    {
                        if(! multiVideostarted()){
                            if(mVideoView.isPlaying()){
                                showToast(getString(R.string.triger_multi_video));
                            }
                             mHandler.sendMessageDelayed(
                                mHandler.obtainMessage(EVENT_ALERT_TRIGER_MULTI_VIEW), 500);
                        }
                        break;
                    }

                    default:
                        break;
                }
            }
        };
        mHandler.sendMessage(mHandler.obtainMessage(EVENT_ALERT_TRIGER_MULTI_VIEW));
!!!12183436.java!!!	processIntent(inout intent : Intent) : String
        if (intent == null) return "Invalid intent";

        mMainVideoIntentUri = intent.getData();
        if (mMainVideoIntentUri == null) return "Invalid main video URI";

        multiVideoDecoderSoft = intent.getBooleanExtra(MULTI_VIDEO_VIEW_DECODER, true);
        Log.d(TAG, "get multi video decoder software or not? -->" + multiVideoDecoderSoft);

        mMultiVideoDir = intent.getStringExtra(MULTI_VIDEO_VIEW_ADDR);
        Log.d(TAG, "get multi video dir: " + mMultiVideoDir);
        return searchMediaFiles(mMultiVideoDir);
!!!12183564.java!!!	playMedia(inout contentUri : Uri) : void
        mContentUri = contentUri.toString();
        HashMap<String, String> headers = new HashMap<String, String>();
        headers.put("X-Gtv-TestHeader", "Some value");
        mVideoView.setVideoURI(contentUri, headers);
!!!12183692.java!!!	onResume() : void
        super.onResume();
!!!12183820.java!!!	onPause() : void
        super.onPause();
!!!12183948.java!!!	onBackPressed() : void
       setResult(RESULT_BACKPRESSED);
       //stop multi video view
       stopMultiVideo();
       finish();
       super.onBackPressed();
!!!12184076.java!!!	onDestroy() : void
        stopMultiVideo();
        super.onDestroy();
!!!12184204.java!!!	ShowErrorDialog(in errorMessage : String) : void
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Playback error");
        builder.setMessage(errorMessage);
        builder.create().show();
!!!12184332.java!!!	getSmoothStreamingBaseUrl(in manifestUrl : String) : String
        String lowerCaseUrl = manifestUrl.toLowerCase();
        int index = lowerCaseUrl.lastIndexOf(".ism/manifest");
        if (index > 0) {
            return manifestUrl.substring(0, index + 4);
        } else {
            return manifestUrl;
        }
!!!12184972.java!!!	sendSoapAction(in serverUrl : String, in request : String, in action : String) : String
        // TODO: Remove this.
        //StrictMode.setThreadPolicy(StrictMode.ThreadPolicy.LAX);

        StringBuffer buf = new StringBuffer();
        HttpURLConnection urlConnection = null;
        try {
            urlConnection = (HttpURLConnection) new URL(serverUrl).openConnection();
            urlConnection.setDoOutput(true);
            urlConnection.setChunkedStreamingMode(0);
            urlConnection.setRequestProperty("Content-Type", "text/xml");
            urlConnection.setRequestProperty("SOAPAction", action);

            OutputStream out = new BufferedOutputStream(urlConnection.getOutputStream());
            out.write(request.getBytes());
            out.close();

            InputStream in = new BufferedInputStream(urlConnection.getInputStream());
            int c;
            while ((c = in.read()) != -1) {
                buf.append((char) c);
            }
            in.close();
        } catch (IOException e) {
            Log.e(TAG, "sendSoapAction: " + e);
            e.printStackTrace();
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
        return buf.toString();
!!!12185100.java!!!	executeProcessDrmInfo(inout drmClient : DrmManagerClient, inout drmInfo : DrmInfo) : int
        final int kWaitTimeMs = 30000; // 30 secs max
        final ConditionVariable processDrmInfoDone = new ConditionVariable();
        final int[] statusCodes = new int[1];
        statusCodes[0] = DrmInfoStatus.STATUS_ERROR;

        drmClient.setOnEventListener(new DrmManagerClient.OnEventListener() {
            @Override
            public void onEvent(DrmManagerClient client, DrmEvent event) {
                switch (event.getType()) {
                // In case of TYPE_RIGHTS_ACQUISITION_PROGRESS_INFO, the event type will be -1.
                // See DrmManagerClient.getEventType().
                case -1:
                case DrmEvent.TYPE_DRM_INFO_PROCESSED:
                    Log.d(TAG, "processDrmInfo() completed");
                    DrmInfoStatus drmInfoStatus = (DrmInfoStatus) event.getAttribute(
                            DrmEvent.DRM_INFO_STATUS_OBJECT);
                    statusCodes[0] = drmInfoStatus.statusCode;
                    break;
                default:
                    Log.d(TAG, "Unkown event: " + event.getType());
                    break;
                }
                processDrmInfoDone.open();
            }
        });

        if (DrmManagerClient.ERROR_NONE != drmClient.processDrmInfo(drmInfo)) {
            return DrmInfoStatus.STATUS_ERROR;
        }
        processDrmInfoDone.block(kWaitTimeMs);

        return statusCodes[0];
!!!12185996.java!!!	startMultiVideo() : void
        Log.d(TAG, "startMultiVideo");

        if (multiVideostarted()) {
            return;
        }

        MultiVideoView2 mView;

        ArrayList<SurfaceView> mSurfaceViewList = new ArrayList<SurfaceView>();
        int i =0;
        for(String mUrl : mMultiVideoViewUrlList){
            mView = (MultiVideoView2) findViewById(viewId[i]);
            mView.setVisibility(View.VISIBLE);
            mView.setDataSource(this,
                                Uri.parse(mUrl),
                                null ,
                                false );
            mView.setDecoderSoft(multiVideoDecoderSoft);
            mView.start();
            mMultiVideoViewList.add(mView);
            i++;
            if(i == select_track_count)
                break;
        }

        mMultiVideoView10.requestFocus();

        mPreviewRunning = true;

!!!12186124.java!!!	stopMultiVideo() : void
        Log.d(TAG, "stopMultiVideo");

        if (!multiVideostarted()) {
            return;
        }
        for(MultiVideoView2 mView : mMultiVideoViewList){
            mView.reset();
            mView.setVisibility(View.INVISIBLE);
        }

        mPreviewRunning = false;

!!!12186252.java!!!	multiVideostarted() : boolean
        return mPreviewRunning;
!!!12186380.java!!!	searchMediaFiles(in dir : String) : String
        File search_dir = new File(dir);

        if (!search_dir.isDirectory()){
            Log.d(TAG, "dir is not directory! ");
            return "multi video view dir is not directory! ";
        }

        if (!search_dir.canRead()){
            Log.d(TAG, "multi video view dir can not read! ");
            return "multi video view dir can not read!";
        }

        File[] flist = search_dir.listFiles();
        if (null == flist){
            Log.d(TAG, "the dir has not any files !");
            return "the dir has not any files !";
        }

        for (File f : flist) {
            if (f.canRead()) {
                if (f.isFile()) {
                    String fname = f.getName();
                    if (fname.endsWith(SEARCH_FILE_TYPE)) {
                        Log.d(TAG, "find ts file: " + fname);
                        String url = f.getAbsolutePath();
                        mMultiVideoViewUrlList.add(url);
                    }
                }
            }
        }
        if(mMultiVideoViewUrlList.size() == 0)
            return "can not find any ts files in the dir " + dir ;

        return null;
!!!12186508.java!!!	prepareMultiVideo() : void
        if(multiVideostarted()){
            return;
        }

        int trackcount = mMultiVideoViewUrlList.size();
        if(trackcount == 0)
            return;

        Log.d(TAG, "get total track count =  " + trackcount);
        trackcount = (trackcount >=21) ? 21 : trackcount;
        String[] use_tracks_num = new String[trackcount];
        for(int i=0; i<trackcount; i++){
            use_tracks_num[i]=tracks_num[i];
        }
        AlertDialog.Builder builder = new Builder(this);
        builder.setTitle(R.string.tracks_num_dialog);
        builder.setItems(use_tracks_num, new OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
               select_track_count = which + 1;
               Log.d(TAG, "will show "+ select_track_count + " tracks! ");
               dialog.dismiss();
               startMultiVideo();
            }
        });
        builder.create().show();
!!!12186636.java!!!	showToast(inout message : CharSequence) : void
        if (mToast != null) {
            mToast.cancel();
            mToast = null;
        }
        mToast = Toast.makeText(this, message, Toast.LENGTH_SHORT);
        mToast.show();
