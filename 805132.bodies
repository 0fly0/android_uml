class SQLiteProgram
!!!3340684.java!!!	SQLiteProgram(inout db : SQLiteDatabase, in sql : String, inout bindArgs : Object, inout cancellationSignalForPrepare : CancellationSignal)
        mDatabase = db;
        mSql = sql.trim();

        int n = DatabaseUtils.getSqlStatementType(mSql);
        switch (n) {
            case DatabaseUtils.STATEMENT_BEGIN:
            case DatabaseUtils.STATEMENT_COMMIT:
            case DatabaseUtils.STATEMENT_ABORT:
                mReadOnly = false;
                mColumnNames = EMPTY_STRING_ARRAY;
                mNumParameters = 0;
                break;

            default:
                boolean assumeReadOnly = (n == DatabaseUtils.STATEMENT_SELECT);
                SQLiteStatementInfo info = new SQLiteStatementInfo();
                db.getThreadSession().prepare(mSql,
                        db.getThreadDefaultConnectionFlags(assumeReadOnly),
                        cancellationSignalForPrepare, info);
                mReadOnly = info.readOnly;
                mColumnNames = info.columnNames;
                mNumParameters = info.numParameters;
                break;
        }

        if (bindArgs != null && bindArgs.length > mNumParameters) {
            throw new IllegalArgumentException("Too many bind arguments.  "
                    + bindArgs.length + " arguments were provided but the statement needs "
                    + mNumParameters + " arguments.");
        }

        if (mNumParameters != 0) {
            mBindArgs = new Object[mNumParameters];
            if (bindArgs != null) {
                System.arraycopy(bindArgs, 0, mBindArgs, 0, bindArgs.length);
            }
        } else {
            mBindArgs = null;
        }
!!!3340812.java!!!	getDatabase() : SQLiteDatabase
        return mDatabase;
!!!3340940.java!!!	getSql() : String
        return mSql;
!!!3341068.java!!!	getBindArgs() : Object
        return mBindArgs;
!!!3341196.java!!!	getColumnNames() : String
        return mColumnNames;
!!!3341324.java!!!	getSession() : SQLiteSession
        return mDatabase.getThreadSession();
!!!3341452.java!!!	getConnectionFlags() : int
        return mDatabase.getThreadDefaultConnectionFlags(mReadOnly);
!!!3341580.java!!!	onCorruption() : void
        mDatabase.onCorruption();
!!!3341708.java!!!	getUniqueId() : int
        return -1;
!!!3341836.java!!!	bindNull(in index : int) : void
        bind(index, null);
!!!3341964.java!!!	bindLong(in index : int, in value : long) : void
        bind(index, value);
!!!3342092.java!!!	bindDouble(in index : int, in value : double) : void
        bind(index, value);
!!!3342220.java!!!	bindString(in index : int, in value : String) : void
        if (value == null) {
            throw new IllegalArgumentException("the bind value at index " + index + " is null");
        }
        bind(index, value);
!!!3342348.java!!!	bindBlob(in index : int, inout value : byte) : void
        if (value == null) {
            throw new IllegalArgumentException("the bind value at index " + index + " is null");
        }
        bind(index, value);
!!!3342476.java!!!	clearBindings() : void
        if (mBindArgs != null) {
            Arrays.fill(mBindArgs, null);
        }
!!!3342604.java!!!	bindAllArgsAsStrings(inout bindArgs : String) : void
        if (bindArgs != null) {
            for (int i = bindArgs.length; i != 0; i--) {
                bindString(i, bindArgs[i - 1]);
            }
        }
!!!3342732.java!!!	onAllReferencesReleased() : void
        clearBindings();
!!!3342860.java!!!	bind(in index : int, inout value : Object) : void
        if (index < 1 || index > mNumParameters) {
            throw new IllegalArgumentException("Cannot bind argument at index "
                    + index + " because the index is out of range.  "
                    + "The statement has " + mNumParameters + " parameters.");
        }
        mBindArgs[index - 1] = value;
