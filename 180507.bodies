class FloatBuffer
!!!674715.java!!!	allocate(in capacity : int) : FloatBuffer
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        return new FloatArrayBuffer(new float[capacity]);
!!!674843.java!!!	wrap(inout array : float) : FloatBuffer
        return wrap(array, 0, array.length);
!!!674971.java!!!	wrap(inout array : float, in start : int, in floatCount : int) : FloatBuffer
        Arrays.checkOffsetAndCount(array.length, start, floatCount);
        FloatBuffer buf = new FloatArrayBuffer(array);
        buf.position = start;
        buf.limit = start + floatCount;
        return buf;
!!!675099.java!!!	FloatBuffer(in capacity : int)
        super(2, capacity, null);
!!!675227.java!!!	array() : float
        return protectedArray();
!!!675355.java!!!	arrayOffset() : int
        return protectedArrayOffset();
!!!675739.java!!!	compareTo(inout otherBuffer : FloatBuffer) : int
        int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining()
                : otherBuffer.remaining();
        int thisPos = position;
        int otherPos = otherBuffer.position;
        float thisFloat, otherFloat;
        while (compareRemaining > 0) {
            thisFloat = get(thisPos);
            otherFloat = otherBuffer.get(otherPos);
            // checks for float and NaN inequality
            if ((thisFloat != otherFloat)
                    && ((thisFloat == thisFloat) || (otherFloat == otherFloat))) {
                return thisFloat < otherFloat ? -1 : 1;
            }
            thisPos++;
            otherPos++;
            compareRemaining--;
        }
        return remaining() - otherBuffer.remaining();
!!!675995.java!!!	equals(inout other : Object) : boolean
        if (!(other instanceof FloatBuffer)) {
            return false;
        }
        FloatBuffer otherBuffer = (FloatBuffer) other;

        if (remaining() != otherBuffer.remaining()) {
            return false;
        }

        int myPosition = position;
        int otherPosition = otherBuffer.position;
        boolean equalSoFar = true;
        while (equalSoFar && (myPosition < limit)) {
            float a = get(myPosition++);
            float b = otherBuffer.get(otherPosition++);
            equalSoFar = a == b || (a != a && b != b);
        }

        return equalSoFar;
!!!676251.java!!!	get(inout dst : float) : FloatBuffer
        return get(dst, 0, dst.length);
!!!676379.java!!!	get(inout dst : float, in dstOffset : int, in floatCount : int) : FloatBuffer
        Arrays.checkOffsetAndCount(dst.length, dstOffset, floatCount);
        if (floatCount > remaining()) {
            throw new BufferUnderflowException();
        }
        for (int i = dstOffset; i < dstOffset + floatCount; ++i) {
            dst[i] = get();
        }
        return this;
!!!676635.java!!!	hasArray() : boolean
        return protectedHasArray();
!!!676763.java!!!	hashCode() : int
        int myPosition = position;
        int hash = 0;
        while (myPosition < limit) {
            hash = hash + Float.floatToIntBits(get(myPosition++));
        }
        return hash;
!!!677659.java!!!	put(inout src : float) : FloatBuffer
        return put(src, 0, src.length);
!!!677787.java!!!	put(inout src : float, in srcOffset : int, in floatCount : int) : FloatBuffer
        Arrays.checkOffsetAndCount(src.length, srcOffset, floatCount);
        if (floatCount > remaining()) {
            throw new BufferOverflowException();
        }
        for (int i = srcOffset; i < srcOffset + floatCount; ++i) {
            put(src[i]);
        }
        return this;
!!!677915.java!!!	put(inout src : FloatBuffer) : FloatBuffer
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        if (src == this) {
            throw new IllegalArgumentException("src == this");
        }
        if (src.remaining() > remaining()) {
            throw new BufferOverflowException();
        }
        float[] contents = new float[src.remaining()];
        src.get(contents);
        put(contents);
        return this;
