class AbstractList
!!!1165979.java!!!	add(in location : int, inout object : E) : void
        throw new UnsupportedOperationException();
!!!1166107.java!!!	add(inout object : E) : boolean
        add(size(), object);
        return true;
!!!1166235.java!!!	addAll(in location : int, inout collection : Collection) : boolean
        Iterator<? extends E> it = collection.iterator();
        while (it.hasNext()) {
            add(location++, it.next());
        }
        return !collection.isEmpty();
!!!1166363.java!!!	clear() : void
        removeRange(0, size());
!!!1166491.java!!!	equals(inout object : Object) : boolean
        if (this == object) {
            return true;
        }
        if (object instanceof List) {
            List<?> list = (List<?>) object;
            if (list.size() != size()) {
                return false;
            }

            Iterator<?> it1 = iterator(), it2 = list.iterator();
            while (it1.hasNext()) {
                Object e1 = it1.next(), e2 = it2.next();
                if (!(e1 == null ? e2 == null : e1.equals(e2))) {
                    return false;
                }
            }
            return true;
        }
        return false;
!!!1166747.java!!!	hashCode() : int
        int result = 1;
        Iterator<?> it = iterator();
        while (it.hasNext()) {
            Object object = it.next();
            result = (31 * result) + (object == null ? 0 : object.hashCode());
        }
        return result;
!!!1166875.java!!!	indexOf(inout object : Object) : int
        ListIterator<?> it = listIterator();
        if (object != null) {
            while (it.hasNext()) {
                if (object.equals(it.next())) {
                    return it.previousIndex();
                }
            }
        } else {
            while (it.hasNext()) {
                if (it.next() == null) {
                    return it.previousIndex();
                }
            }
        }
        return -1;
!!!1167003.java!!!	iterator() : Iterator
        return new SimpleListIterator();
!!!1167131.java!!!	lastIndexOf(inout object : Object) : int
        ListIterator<?> it = listIterator(size());
        if (object != null) {
            while (it.hasPrevious()) {
                if (object.equals(it.previous())) {
                    return it.nextIndex();
                }
            }
        } else {
            while (it.hasPrevious()) {
                if (it.previous() == null) {
                    return it.nextIndex();
                }
            }
        }
        return -1;
!!!1167259.java!!!	listIterator() : ListIterator
        return listIterator(0);
!!!1167387.java!!!	listIterator(in location : int) : ListIterator
        return new FullListIterator(location);
!!!1167515.java!!!	remove(in location : int) : E
        throw new UnsupportedOperationException();
!!!1167643.java!!!	removeRange(in start : int, in end : int) : void
        Iterator<?> it = listIterator(start);
        for (int i = start; i < end; i++) {
            it.next();
            it.remove();
        }
!!!1167771.java!!!	set(in location : int, inout object : E) : E
        throw new UnsupportedOperationException();
!!!1167899.java!!!	subList(in start : int, in end : int) : List
        if (start >= 0 && end <= size()) {
            if (start <= end) {
                if (this instanceof RandomAccess) {
                    return new SubAbstractListRandomAccess<E>(this, start, end);
                }
                return new SubAbstractList<E>(this, start, end);
            }
            throw new IllegalArgumentException();
        }
        throw new IndexOutOfBoundsException();
