class HttpsEngine
!!!2102811.java!!!	HttpsEngine(inout policy : HttpURLConnectionImpl, inout method : String, inout requestHeaders : RawHeaders, inout connection : HttpConnection, inout requestBody : RetryableOutputStream, inout enclosing : HttpsURLConnectionImpl)
            super(policy, method, requestHeaders, connection, requestBody);
            this.sslSocket = connection != null ? connection.getSecureSocketIfConnected() : null;
            this.enclosing = enclosing;
!!!2102939.java!!!	connect() : void
            // first try an SSL connection with compression and
            // various TLS extensions enabled, if it fails (and its
            // not unheard of that it will) fallback to a more
            // barebones connections
            boolean connectionReused;
            try {
                connectionReused = makeSslConnection(true);
            } catch (IOException e) {
                // If the problem was a CertificateException from the X509TrustManager,
                // do not retry, we didn't have an abrupt server initiated exception.
                if (e instanceof SSLHandshakeException
                        && e.getCause() instanceof CertificateException) {
                    throw e;
                }
                release(false);
                connectionReused = makeSslConnection(false);
            }

            if (!connectionReused) {
                sslSocket = connection.verifySecureSocketHostname(enclosing.getHostnameVerifier());
            }
!!!2103067.java!!!	makeSslConnection(inout tlsTolerant : boolean) : boolean
            // make an SSL Tunnel on the first message pair of each SSL + proxy connection
            if (connection == null) {
                connection = openSocketConnection();
                if (connection.getAddress().getProxy() != null) {
                    makeTunnel(policy, connection, getRequestHeaders());
                }
            }

            // if super.makeConnection returned a connection from the
            // pool, sslSocket needs to be initialized here. If it is
            // a new connection, it will be initialized by
            // getSecureSocket below.
            sslSocket = connection.getSecureSocketIfConnected();

            // we already have an SSL connection,
            if (sslSocket != null) {
                return true;
            }

            connection.setupSecureSocket(enclosing.getSSLSocketFactory(), tlsTolerant);
            return false;
!!!2103195.java!!!	makeTunnel(inout policy : HttpURLConnectionImpl, inout connection : HttpConnection, inout requestHeaders : RequestHeaders) : void
            RawHeaders rawRequestHeaders = requestHeaders.getHeaders();
            while (true) {
                HttpEngine connect = new ProxyConnectEngine(policy, rawRequestHeaders, connection);
                connect.sendRequest();
                connect.readResponse();

                int responseCode = connect.getResponseCode();
                switch (connect.getResponseCode()) {
                case HTTP_OK:
                    return;
                case HTTP_PROXY_AUTH:
                    rawRequestHeaders = new RawHeaders(rawRequestHeaders);
                    boolean credentialsFound = policy.processAuthHeader(HTTP_PROXY_AUTH,
                            connect.getResponseHeaders(), rawRequestHeaders);
                    if (credentialsFound) {
                        continue;
                    } else {
                        throw new IOException("Failed to authenticate with proxy");
                    }
                default:
                    throw new IOException("Unexpected response code for CONNECT: " + responseCode);
                }
            }
!!!2103323.java!!!	acceptCacheResponseType(inout cacheResponse : CacheResponse) : boolean
            return cacheResponse instanceof SecureCacheResponse;
!!!2103451.java!!!	includeAuthorityInRequestLine() : boolean
            // Even if there is a proxy, it isn't involved. Always request just the file.
            return false;
!!!2103579.java!!!	getSslSocketFactory() : SSLSocketFactory
            return enclosing.getSSLSocketFactory();
!!!2103707.java!!!	getHttpConnectionToCache() : HttpURLConnection
            return enclosing;
