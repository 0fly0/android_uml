format 74
"namespace" // framework::base::opengl::java::javax::xml::namespace
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/javax/xml/namespace/"
  java_package "javax.xml.namespace"
  classview 134939 "namespace"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 302107 "QName"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p><code>QName</code> represents a <strong>qualified name</strong>
as defined in the XML specifications: <a
href=\"http://www.w3.org/TR/xmlschema-2/#QName\">XML Schema Part2:
Datatypes specification</a>, <a
href=\"http://www.w3.org/TR/REC-xml-names/#ns-qualnames\">Namespaces
in XML</a>, <a
href=\"http://www.w3.org/XML/xml-names-19990114-errata\">Namespaces
in XML Errata</a>.</p>

<p>The value of a <code>QName</code> contains a <strong>Namespace
URI</strong>, <strong>local part</strong> and
<strong>prefix</strong>.</p>

<p>The prefix is included in <code>QName</code> to retain lexical
information <strong><em>when present</em></strong> in an {@link
javax.xml.transform.Source XML input source}. The prefix is
<strong><em>NOT</em></strong> used in {@link #equals(Object)
QName.equals(Object)} or to compute the {@link #hashCode()
QName.hashCode()}.  Equality and the hash code are defined using
<strong><em>only</em></strong> the Namespace URI and local part.</p>

<p>If not specified, the Namespace URI is set to {@link
javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI}.
If not specified, the prefix is set to {@link
javax.xml.XMLConstants#DEFAULT_NS_PREFIX
XMLConstants.DEFAULT_NS_PREFIX}.</p>

<p><code>QName</code> is immutable.</p>

@author <a href=\"mailto:Jeff.Suttor@Sun.com\">Jeff Suttor</a>
@version $Revision: 754581 $, $Date: 2009-03-14 18:32:39 -0700 (Sat, 14 Mar 2009) $
@see <a href=\"http://www.w3.org/TR/xmlschema-2/#QName\">XML Schema Part2: Datatypes specification</a>
@see <a href=\"http://www.w3.org/TR/REC-xml-names/#ns-qualnames\">Namespaces in XML</a>
@see <a href=\"http://www.w3.org/XML/xml-names-19990114-errata\">Namespaces in XML Errata</a>
@since 1.5"
      classrelation 541339 // <realization>
	relation 541339 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 541339 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 453019 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<p>Stream Unique Identifier.</p>

<p>To enable the compatibility <code>serialVersionUID</code>
set the System Property
<code>org.apache.xml.namespace.QName.useCompatibleSerialVersionUID</code>
to a value of \"1.0\".</p>
"
      end

      attribute 453147 "defaultSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9120448754896609940L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<p>The original default Stream Unique Identifier.</p>
"
      end

      attribute 453275 "compatibilitySerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4418622981026545151L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "<p>The compatibility Stream Unique Identifier that was introduced
with Java 5 SE SDK.</p>
"
      end

      extra_member 135835 "initialization"
	
	cpp "" ""
	java "  static {
        String compatPropValue = System.getProperty(\"org.apache.xml.namespace.QName.useCompatibleSerialVersionUID\");
        // If 1.0 use compatibility serialVersionUID
        serialVersionUID = !\"1.0\".equals(compatPropValue) ? defaultSerialVersionUID : compatibilitySerialVersionUID;
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 541467 // namespaceURI (<unidirectional association>)
	relation 541467 --->
	  a role_name "namespaceURI" const_relation private
	    comment "
<p>Namespace URI of this <code>QName</code>.</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 541467 // namespaceURI (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 541595 // localPart (<unidirectional association>)
	relation 541595 --->
	  a role_name "localPart" const_relation private
	    comment "
<p>local part of this <code>QName</code>.</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 541595 // localPart (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 541723 // prefix (<unidirectional association>)
	relation 541723 --->
	  a role_name "prefix" private
	    comment "
<p>prefix of this <code>QName</code>.</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 541723 // prefix (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 541851 // qNameAsString (<unidirectional association>)
	relation 541851 --->
	  a role_name "qNameAsString" private
	    comment "
<p><code>String</code> representation of this <code>QName</code>.</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 541851 // qNameAsString (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1905051 "QName"
	public explicit_return_type ""
	nparams 2
	  param in name "namespaceURI" type class_ref 3399692 // String
	  param in name "localPart" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p><code>QName</code> constructor specifying the Namespace URI
and local part.</p>

<p>If the Namespace URI is <code>null</code>, it is set to
{@link javax.xml.XMLConstants#NULL_NS_URI
XMLConstants.NULL_NS_URI}.  This value represents no
explicitly defined Namespace as defined by the <a
href=\"http://www.w3.org/TR/REC-xml-names/#ns-qualnames\">Namespaces
in XML</a> specification.  This action preserves compatible
behavior with QName 1.0.  Explicitly providing the {@link
javax.xml.XMLConstants#NULL_NS_URI
XMLConstants.NULL_NS_URI} value is the preferred coding
style.</p>

<p>If the local part is <code>null</code> an
<code>IllegalArgumentException</code> is thrown.
A local part of \"\" is allowed to preserve
compatible behavior with QName 1.0. </p>

<p>When using this constructor, the prefix is set to {@link
javax.xml.XMLConstants#DEFAULT_NS_PREFIX
XMLConstants.DEFAULT_NS_PREFIX}.</p>

<p>The Namespace URI is not validated as a
<a href=\"http://www.ietf.org/rfc/rfc2396.txt\">URI reference</a>.
The local part is not validated as a
<a href=\"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a>
as specified in <a href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces
in XML</a>.</p>

@param namespaceURI Namespace URI of the <code>QName</code>
@param localPart    local part of the <code>QName</code>

@see #QName(String namespaceURI, String localPart, String
prefix) QName(String namespaceURI, String localPart, String
prefix)"
      end

      operation 1905179 "QName"
	public explicit_return_type ""
	nparams 3
	  param inout name "namespaceURI" type class_ref 3399692 // String
	  param inout name "localPart" type class_ref 3399692 // String
	  param inout name "prefix" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p><code>QName</code> constructor specifying the Namespace URI,
local part and prefix.</p>

<p>If the Namespace URI is <code>null</code>, it is set to
{@link javax.xml.XMLConstants#NULL_NS_URI
XMLConstants.NULL_NS_URI}.  This value represents no
explicitly defined Namespace as defined by the <a
href=\"http://www.w3.org/TR/REC-xml-names/#ns-qualnames\">Namespaces
in XML</a> specification.  This action preserves compatible
behavior with QName 1.0.  Explicitly providing the {@link
javax.xml.XMLConstants#NULL_NS_URI
XMLConstants.NULL_NS_URI} value is the preferred coding
style.</p>

<p>If the local part is <code>null</code> an
<code>IllegalArgumentException</code> is thrown.
A local part of \"\" is allowed to preserve
compatible behavior with QName 1.0. </p>

<p>If the prefix is <code>null</code>, an
<code>IllegalArgumentException</code> is thrown.  Use {@link
javax.xml.XMLConstants#DEFAULT_NS_PREFIX
XMLConstants.DEFAULT_NS_PREFIX} to explicitly indicate that no
prefix is present or the prefix is not relevant.</p>

<p>The Namespace URI is not validated as a
<a href=\"http://www.ietf.org/rfc/rfc2396.txt\">URI reference</a>.
The local part and prefix are not validated as a
<a href=\"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a>
as specified in <a href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces
in XML</a>.</p>

@param namespaceURI Namespace URI of the <code>QName</code>
@param localPart    local part of the <code>QName</code>
@param prefix       prefix of the <code>QName</code>"
      end

      operation 1905307 "QName"
	public explicit_return_type ""
	nparams 1
	  param inout name "localPart" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p><code>QName</code> constructor specifying the local part.</p>

<p>If the local part is <code>null</code> an
<code>IllegalArgumentException</code> is thrown.
A local part of \"\" is allowed to preserve
compatible behavior with QName 1.0. </p>

<p>When using this constructor, the Namespace URI is set to
{@link javax.xml.XMLConstants#NULL_NS_URI
XMLConstants.NULL_NS_URI} and the prefix is set to {@link
javax.xml.XMLConstants#DEFAULT_NS_PREFIX
XMLConstants.DEFAULT_NS_PREFIX}.</p>

<p><em>In an XML context, all Element and Attribute names exist
in the context of a Namespace.  Making this explicit during the
construction of a <code>QName</code> helps prevent hard to
diagnosis XML validity errors.  The constructors {@link
#QName(String namespaceURI, String localPart) QName(String
namespaceURI, String localPart)} and
{@link #QName(String namespaceURI, String localPart, String prefix)}
are preferred.</em></p>

<p>The local part is not validated as a
<a href=\"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a>
as specified in <a href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces
in XML</a>.</p>

@param localPart local part of the <code>QName</code>
@see #QName(String namespaceURI, String localPart) QName(String
namespaceURI, String localPart)
@see #QName(String namespaceURI, String localPart, String
prefix) QName(String namespaceURI, String localPart, String
prefix)"
      end

      operation 1905435 "getNamespaceURI"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the Namespace URI of this <code>QName</code>.</p>

@return Namespace URI of this <code>QName</code>"
      end

      operation 1905563 "getLocalPart"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the local part of this <code>QName</code>.</p>

 @return local part of this <code>QName</code>"
      end

      operation 1905691 "getPrefix"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the prefix of this <code>QName</code>.</p>

<p>The prefix assigned to a <code>QName</code> might
<strong><em>NOT</em></strong> be valid in a different
context. For example, a <code>QName</code> may be assigned a
prefix in the context of parsing a document but that prefix may
be invalid in the context of a different document.</p>

 @return prefix of this <code>QName</code>"
      end

      operation 1905819 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "objectToTest" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Test this <code>QName</code> for equality with another
<code>Object</code>.</p>

<p>If the <code>Object</code> to be tested is not a
<code>QName</code> or is <code>null</code>, then this method
returns <code>false</code>.</p>

<p>Two <code>QName</code>s are considered equal if and only if
both the Namespace URI and local part are equal. This method
uses <code>String.equals()</code> to check equality of the
Namespace URI and local part. The prefix is
<strong><em>NOT</em></strong> used to determine equality.</p>

<p>This method satisfies the general contract of {@link
java.lang.Object#equals(Object) Object.equals(Object)}</p>

@param objectToTest the <code>Object</code> to test for
equality with this <code>QName</code>
@return <code>true</code> if the given <code>Object</code> is
equal to this <code>QName</code> else <code>false</code>"
      end

      operation 1905947 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Generate the hash code for this <code>QName</code>.</p>

<p>The hash code is calculated using both the Namespace URI and
the local part of the <code>QName</code>.  The prefix is
<strong><em>NOT</em></strong> used to calculate the hash
code.</p>

<p>This method satisfies the general contract of {@link
java.lang.Object#hashCode() Object.hashCode()}.</p>

@return hash code for this <code>QName</code> <code>Object</code>"
      end

      operation 1906075 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p><code>String</code> representation of this
<code>QName</code>.</p>

<p>The commonly accepted way of representing a <code>QName</code>
as a <code>String</code> was <a href=\"http://jclark.com/xml/xmlns.htm\">defined</a>
by James Clark.  Although this is not a <em>standard</em>
specification, it is in common use,  e.g. {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}.
This implementation represents a <code>QName</code> as:
\"{\" + Namespace URI + \"}\" + local part.  If the Namespace URI
<code>.equals(XMLConstants.NULL_NS_URI)</code>, only the
local part is returned.  An appropriate use of this method is
for debugging or logging for human consumption.</p>

<p>Note the prefix value is <strong><em>NOT</em></strong>
returned as part of the <code>String</code> representation.</p>

<p>This method satisfies the general contract of {@link
java.lang.Object#toString() Object.toString()}.</p>

@return <code>String</code> representation of this <code>QName</code>"
      end

      operation 1906203 "valueOf"
	class_operation public return_type class_ref 302107 // QName
	nparams 1
	  param inout name "qNameAsString" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p><code>QName</code> derived from parsing the formatted
<code>String</code>.</p>

<p>If the <code>String</code> is <code>null</code> or does not conform to
{@link #toString() QName.toString()} formatting, an
<code>IllegalArgumentException</code> is thrown.</p>

<p><em>The <code>String</code> <strong>MUST</strong> be in the
form returned by {@link #toString() QName.toString()}.</em></p>

<p>The commonly accepted way of representing a <code>QName</code>
as a <code>String</code> was <a href=\"http://jclark.com/xml/xmlns.htm\">defined</a>
by James Clark.  Although this is not a <em>standard</em>
specification, it is in common use,  e.g. {@link javax.xml.transform.Transformer#setParameter(String name, Object value)}.
This implementation parses a <code>String</code> formatted
as: \"{\" + Namespace URI + \"}\" + local part.  If the Namespace
URI <code>.equals(XMLConstants.NULL_NS_URI)</code>, only the
local part should be provided.</p>

<p>The prefix value <strong><em>CANNOT</em></strong> be
represented in the <code>String</code> and will be set to
{@link javax.xml.XMLConstants#DEFAULT_NS_PREFIX
XMLConstants.DEFAULT_NS_PREFIX}.</p>

<p>This method does not do full validation of the resulting
<code>QName</code>.
<p>The Namespace URI is not validated as a
<a href=\"http://www.ietf.org/rfc/rfc2396.txt\">URI reference</a>.
The local part is not validated as a
<a href=\"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a>
as specified in
<a href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces in XML</a>.</p>

@param qNameAsString <code>String</code> representation
of the <code>QName</code>
@return <code>QName</code> corresponding to the given <code>String</code>
@see #toString() QName.toString()"
      end

      operation 1906331 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For old versions of QName which didn't have a prefix field,
<code>ObjectInputStream.defaultReadObject()</code> will initialize
the prefix to <code>null</code> instead of the empty string. This
method fixes up the prefix field if it didn't exist in the serialized
object."
      end
    end

    class 302875 "NamespaceContext"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Interface for read only XML Namespace context processing.</p>

<p>An XML Namespace has the properties:</p>
<ul>
  <li>Namespace URI:
      Namespace name expressed as a URI to which the prefix is bound</li>
  <li>prefix: syntactically, this is the part of the attribute name
      following the <code>XMLConstants.XMLNS_ATTRIBUTE</code>
      (\"xmlns\") in the Namespace declaration</li>
</ul>
<p> example: <code>&lt;element xmlns:prefix=\"http://Namespace-name-URI\"&gt;</code></p>

<p>All <code>get*(*)</code> methods operate in the current scope
for Namespace URI and prefix resolution.</p>

<p>Note that a Namespace URI can be bound to
<strong>multiple</strong> prefixes in the current scope.  This can
occur when multiple <code>XMLConstants.XMLNS_ATTRIBUTE</code>
(\"xmlns\") Namespace declarations occur in the same Start-Tag and
refer to the same Namespace URI. e.g.<br />
<pre>
&lt;element xmlns:prefix1=\"http://Namespace-name-URI\"
         xmlns:prefix2=\"http://Namespace-name-URI\"&gt;
</pre>
This can also occur when the same Namespace URI is used in multiple
<code>XMLConstants.XMLNS_ATTRIBUTE</code> (\"xmlns\") Namespace
declarations in the logical parent element hierarchy.  e.g.<br />
<pre>
&lt;parent xmlns:prefix1=\"http://Namespace-name-URI\">
  &lt;child xmlns:prefix2=\"http://Namespace-name-URI\"&gt;
    ...
  &lt;/child&gt;
&lt;/parent&gt;
</pre></p>

<p>A prefix can only be bound to a <strong>single</strong>
Namespace URI in the current scope.</p>

@author <a href=\"mailto:Jeff.Suttor@Sun.com\">Jeff Suttor</a>
@version $Revision: 446598 $, $Date: 2006-09-15 05:55:40 -0700 (Fri, 15 Sep 2006) $
@see javax.xml.XMLConstants javax.XMLConstants for declarations of common XML values
@see <a href=\"http://www.w3.org/TR/xmlschema-2/#QName\">XML Schema Part2: Datatypes</a>
@see <a href=\"http://www.w3.org/TR/REC-xml-names/#ns-qualnames\">Namespaces in XML</a>
@see <a href=\"http://www.w3.org/XML/xml-names-19990114-errata\">Namespaces in XML Errata</a>
@since 1.5"
      operation 1904667 "getNamespaceURI"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "prefix" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get Namespace URI bound to a prefix in the current scope.</p>

<p>When requesting a Namespace URI by prefix, the following
table describes the returned Namespace URI value for all
possible prefix values:</p>

<table border=\"2\" rules=\"all\" cellpadding=\"4\">
  <thead>
    <tr>
      <td align=\"center\" colspan=\"2\">
        <code>getNamespaceURI(prefix)</code>
        return value for specified prefixes
      </td>
    </tr>
    <tr>
      <td>prefix parameter</td>
      <td>Namespace URI return value</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>DEFAULT_NS_PREFIX</code> (\"\")</td>
      <td>default Namespace URI in the current scope or
        <code>{@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI(\"\")}</code>
        when there is no default Namespace URI in the current scope</td>
    </tr>
    <tr>
      <td>bound prefix</td>
      <td>Namespace URI bound to prefix in current scope</td>
    </tr>
    <tr>
      <td>unbound prefix</td>
      <td><code>{@link javax.xml.XMLConstants#NULL_NS_URI XMLConstants.NULL_NS_URI(\"\")}</code> </td>
    </tr>
    <tr>
      <td><code>XMLConstants.XML_NS_PREFIX</code> (\"xml\")</td>
      <td><code>XMLConstants.XML_NS_URI</code>
          (\"http://www.w3.org/XML/1998/namespace\")</td>
    </tr>
    <tr>
      <td><code>XMLConstants.XMLNS_ATTRIBUTE</code> (\"xmlns\")</td>
      <td><code>XMLConstants.XMLNS_ATTRIBUTE_NS_URI</code>
        (\"http://www.w3.org/2000/xmlns/\")</td>
    </tr>
    <tr>
      <td><code>null</code></td>
      <td><code>IllegalArgumentException</code> is thrown</td>
    </tr>
   </tbody>
</table>

@param prefix prefix to look up
@return Namespace URI bound to prefix in the current scope"
      end

      operation 1904795 "getPrefix"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "namespaceURI" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get prefix bound to Namespace URI in the current scope.</p>

<p>To get all prefixes bound to a Namespace URI in the current
scope, use {@link #getPrefixes(String namespaceURI)}.</p>

<p>When requesting a prefix by Namespace URI, the following
table describes the returned prefix value for all Namespace URI
values:</p>

<table border=\"2\" rules=\"all\" cellpadding=\"4\">
  <thead>
    <tr>
      <td align=\"center\" colspan=\"2\">
        <code>getPrefix(namespaceURI)</code> return value for
        specified Namespace URIs
      </td>
    </tr>
    <tr>
      <td>Namespace URI parameter</td>
      <td>prefix value returned</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>&lt;default Namespace URI&gt;</td>
      <td><code>XMLConstants.DEFAULT_NS_PREFIX</code> (\"\")
      </td>
    </tr>
    <tr>
      <td>bound Namespace URI</td>
      <td>prefix bound to Namespace URI in the current scope,
          if multiple prefixes are bound to the Namespace URI in
          the current scope, a single arbitrary prefix, whose
          choice is implementation dependent, is returned</td>
    </tr>
    <tr>
      <td>unbound Namespace URI</td>
      <td><code>null</code></td>
    </tr>
    <tr>
      <td><code>XMLConstants.XML_NS_URI</code>
          (\"http://www.w3.org/XML/1998/namespace\")</td>
      <td><code>XMLConstants.XML_NS_PREFIX</code> (\"xml\")</td>
    </tr>
    <tr>
      <td><code>XMLConstants.XMLNS_ATTRIBUTE_NS_URI</code>
          (\"http://www.w3.org/2000/xmlns/\")</td>
      <td><code>XMLConstants.XMLNS_ATTRIBUTE</code> (\"xmlns\")</td>
    </tr>
    <tr>
      <td><code>null</code></td>
      <td><code>IllegalArgumentException</code> is thrown</td>
    </tr>
  </tbody>
</table>

@param namespaceURI URI of Namespace to lookup
@return prefix bound to Namespace URI in current context"
      end

      operation 1904923 "getPrefixes"
	public return_type class_ref 155803 // Iterator
	nparams 1
	  param inout name "namespaceURI" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get all prefixes bound to a Namespace URI in the current
scope.</p>

<p>An Iterator over String elements is returned in an arbitrary, <strong>implementation dependent</strong>, order.</p>

<p><strong>The <code>Iterator</code> is
<em>not</em> modifiable.  e.g. the
<code>remove()</code> method will throw
<code>UnsupportedOperationException</code>.</strong></p>

<p>When requesting prefixes by Namespace URI, the following
table describes the returned prefixes value for all Namespace
URI values:</p>

<table border=\"2\" rules=\"all\" cellpadding=\"4\">
  <thead>
    <tr>
      <td align=\"center\" colspan=\"2\"><code>
        getPrefixes(namespaceURI)</code> return value for
        specified Namespace URIs</td>
    </tr>
    <tr>
      <td>Namespace URI parameter</td>
      <td>prefixes value returned</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>bound Namespace URI,
        including the &lt;default Namespace URI&gt;</td>
      <td><code>Iterator</code> over prefixes bound to Namespace URI in
        the current scope in an arbitrary, <strong>implementation dependent</strong>,
        order</td>
    </tr>
    <tr>
      <td>unbound Namespace URI</td>
      <td>empty <code>Iterator</code></td>
    </tr>
    <tr>
      <td><code>XMLConstants.XML_NS_URI</code>
          (\"http://www.w3.org/XML/1998/namespace\")</td>
      <td><code>Iterator</code> with one element set to
        <code>XMLConstants.XML_NS_PREFIX</code> (\"xml\")</td>
    </tr>
    <tr>
      <td><code>XMLConstants.XMLNS_ATTRIBUTE_NS_URI</code>
          (\"http://www.w3.org/2000/xmlns/\")</td>
      <td><code>Iterator</code> with one element set to
        <code>XMLConstants.XMLNS_ATTRIBUTE</code> (\"xmlns\")</td>
    </tr>
    <tr>
      <td><code>null</code></td>
      <td><code>IllegalArgumentException</code> is thrown</td>
    </tr>
  </tbody>
</table>

@param namespaceURI URI of Namespace to lookup
@return <code>Iterator</code> for all prefixes bound to the
Namespace URI in the current scope"
      end
    end
  end

  deploymentview 134043 "namespace"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 258075 "NamespaceContext"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
${definition}"
      associated_classes
	class_ref 302875 // NamespaceContext
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: NamespaceContext.java 446598 2006-09-15 12:55:40Z jeremias $"
    end

    artifact 258203 "QName"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import javax.xml.XMLConstants;
${definition}"
      associated_classes
	class_ref 302107 // QName
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: QName.java 754581 2009-03-15 01:32:39Z mrglavas $"
    end
  end
end
