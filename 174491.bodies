class PlainDatagramSocketImpl
!!!587803.java!!!	PlainDatagramSocketImpl(inout fd : FileDescriptor, in localPort : int)
        this.fd = fd;
        this.localPort = localPort;
        if (fd.valid()) {
            guard.open("close");
        }
!!!587931.java!!!	PlainDatagramSocketImpl()
        fd = new FileDescriptor();
!!!588059.java!!!	bind(in port : int, inout address : InetAddress) : void
        IoBridge.bind(fd, address, port);
        if (port != 0) {
            localPort = port;
        } else {
            localPort = IoBridge.getSocketLocalPort(fd);
        }
        try {
            setOption(SocketOptions.SO_BROADCAST, Boolean.TRUE);
        } catch (IOException ignored) {
        }
!!!588187.java!!!	close() : void
        guard.close();
        try {
            IoBridge.closeSocket(fd);
        } catch (IOException ignored) {
        }
!!!588315.java!!!	create() : void
        this.fd = IoBridge.socket(false);
!!!588443.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
            close();
        } finally {
            super.finalize();
        }
!!!588571.java!!!	getOption(in option : int) : Object
        return IoBridge.getSocketOption(fd, option);
!!!588699.java!!!	getTimeToLive() : int
        return (Integer) getOption(IoBridge.JAVA_IP_MULTICAST_TTL);
!!!588827.java!!!	getTTL() : byte
        return (byte) getTimeToLive();
!!!588955.java!!!	makeGroupReq(inout gr_group : InetAddress, inout networkInterface : NetworkInterface) : StructGroupReq
        int gr_interface = (networkInterface != null) ? networkInterface.getIndex() : 0;
        return new StructGroupReq(gr_interface, gr_group);
!!!589083.java!!!	join(inout addr : InetAddress) : void
        setOption(IoBridge.JAVA_MCAST_JOIN_GROUP, makeGroupReq(addr, null));
!!!589211.java!!!	joinGroup(inout addr : SocketAddress, inout netInterface : NetworkInterface) : void
        if (addr instanceof InetSocketAddress) {
            InetAddress groupAddr = ((InetSocketAddress) addr).getAddress();
            setOption(IoBridge.JAVA_MCAST_JOIN_GROUP, makeGroupReq(groupAddr, netInterface));
        }
!!!589339.java!!!	leave(inout addr : InetAddress) : void
        setOption(IoBridge.JAVA_MCAST_LEAVE_GROUP, makeGroupReq(addr, null));
!!!589467.java!!!	leaveGroup(inout addr : SocketAddress, inout netInterface : NetworkInterface) : void
        if (addr instanceof InetSocketAddress) {
            InetAddress groupAddr = ((InetSocketAddress) addr).getAddress();
            setOption(IoBridge.JAVA_MCAST_LEAVE_GROUP, makeGroupReq(groupAddr, netInterface));
        }
!!!589595.java!!!	peek(inout sender : InetAddress) : int
        // We don't actually want the data: we just want the DatagramPacket's filled-in address.
        DatagramPacket packet = new DatagramPacket(EmptyArray.BYTE, 0);
        int result = peekData(packet);
        // Note: evil side-effect on InetAddress! This method should have returned InetSocketAddress!
        sender.ipaddress = packet.getAddress().getAddress();
        return result;
!!!589723.java!!!	doRecv(inout pack : DatagramPacket, in flags : int) : void
        IoBridge.recvfrom(false, fd, pack.getData(), pack.getOffset(), pack.getLength(), flags, pack, isNativeConnected);
        if (isNativeConnected) {
            updatePacketRecvAddress(pack);
        }
!!!589851.java!!!	receive(inout pack : DatagramPacket) : void
        doRecv(pack, 0);
!!!589979.java!!!	peekData(inout pack : DatagramPacket) : int
        doRecv(pack, MSG_PEEK);
        return pack.getPort();
!!!590107.java!!!	send(inout packet : DatagramPacket) : void
        int port = isNativeConnected ? 0 : packet.getPort();
        InetAddress address = isNativeConnected ? null : packet.getAddress();
        IoBridge.sendto(fd, packet.getData(), packet.getOffset(), packet.getLength(), 0, address, port);
!!!590235.java!!!	setOption(in option : int, inout value : Object) : void
        IoBridge.setSocketOption(fd, option, value);
!!!590363.java!!!	setTimeToLive(in ttl : int) : void
        setOption(IoBridge.JAVA_IP_MULTICAST_TTL, Integer.valueOf(ttl));
!!!590491.java!!!	setTTL(in ttl : byte) : void
        setTimeToLive((int) ttl & 0xff); // Avoid sign extension.
!!!590619.java!!!	connect(inout inetAddr : InetAddress, in port : int) : void
        IoBridge.connect(fd, inetAddr, port); // Throws on failure.
        try {
            connectedAddress = InetAddress.getByAddress(inetAddr.getAddress());
        } catch (UnknownHostException e) {
            // this is never expected to happen as we should not have gotten
            // here if the address is not resolvable
            throw new SocketException("Host is unresolved: " + inetAddr.getHostName());
        }
        connectedPort = port;
        isNativeConnected = true;
!!!590747.java!!!	disconnect() : void
        try {
            Libcore.os.connect(fd, InetAddress.UNSPECIFIED, 0);
        } catch (ErrnoException errnoException) {
            throw new AssertionError(errnoException);
        } catch (SocketException ignored) {
            // Thrown if the socket has already been closed, but this method can't throw anything.
        }
        connectedPort = -1;
        connectedAddress = null;
        isNativeConnected = false;
!!!590875.java!!!	updatePacketRecvAddress(inout packet : DatagramPacket) : void
        packet.setAddress(connectedAddress);
        packet.setPort(connectedPort);
