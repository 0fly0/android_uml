class OmxSubtitleScheduler
!!!11163276.cpp!!!	OmxSubtitleScheduler(in name : OMX_STRING)
  strncpy(mName, name, OMX_MAX_STRINGNAME_SIZE);
!!!11163404.cpp!!!	~OmxSubtitleScheduler()
  OMX_LOGD("destroyed");
!!!11163532.cpp!!!	initRole() : OMX_ERRORTYPE
  if (strncmp(mName, kCompNamePrefix, kCompNamePrefixLength)) {
    return OMX_ErrorInvalidComponentName;
  }
  char * role_name = mName + kCompNamePrefixLength;
  if (!strncmp(role_name, OMX_ROLE_SUBTITLE_SCHEDULER_BINARY,
      strlen(OMX_ROLE_SUBTITLE_SCHEDULER_BINARY))) {
    addRole(OMX_ROLE_SUBTITLE_SCHEDULER_BINARY);
  }
  return OMX_ErrorNone;
!!!11163660.cpp!!!	initPort() : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNoMore;

  mInputPort = new OmxSubtitlePort(kTextPortStartNumber, OMX_DirInput);

  addPort(mInputPort);
  //mOutputPort = new OmxSubtitlePort(kTextPortStartNumber + 1, OMX_DirOutput);
  //addPort(mOutputPort);

  //OMX_PARAM_PORTDEFINITIONTYPE def;
  //mInputPort->getDefinition(&def);
  //def.nBufferCountActual = 64;
  //mInputPort->setDefinition(&def);
  return err;
!!!11163788.cpp!!!	componentDeInit(in hComponent : OMX_HANDLETYPE) : OMX_ERRORTYPE
  // ASSERT(hComponent != NULL)
  OmxComponent *comp = reinterpret_cast<OmxComponent *>(
      reinterpret_cast<OMX_COMPONENTTYPE *>(hComponent)->pComponentPrivate);
  OmxSubtitleScheduler *subtitle_scheduler = static_cast<OmxSubtitleScheduler *>(comp);
  delete subtitle_scheduler;
  return OMX_ErrorNone;
!!!11163916.cpp!!!	getParameter(in index : OMX_INDEXTYPE, in params : OMX_PTR) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  switch (index) {
    default:
      return OmxComponentImpl::getParameter(index, params);
  }
  return err;
!!!11164172.cpp!!!	getConfig(in index : OMX_INDEXTYPE, in config : OMX_PTR) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  return err;
!!!11164300.cpp!!!	setConfig(in index : OMX_INDEXTYPE, in config : OMX_PTR) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  return err;
!!!11164428.cpp!!!	createComponent(inout handle : OMX_HANDLETYPE, in componentName : OMX_STRING, in appData : OMX_PTR, inout callBacks : OMX_CALLBACKTYPE) : OMX_ERRORTYPE
  OmxSubtitleScheduler* comp = new OmxSubtitleScheduler(componentName);
  *handle = comp->makeComponent(comp);
  comp->setCallbacks(callBacks, appData);
  comp->componentInit();
  return OMX_ErrorNone;
