class LineupSelectionFragment
!!!14206860.java!!!	LineupSelectionFragment(inout context : Context)
        super(context);
!!!14206988.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        if (container == null) return null;

        View view = inflater.inflate(R.layout.lineup_provider_selection, null);

        mListView = (ListView) view.findViewById(R.id.lineup_list);
        mProgressBar = (ProgressBar) view.findViewById(R.id.progress_bar);

        mListView.setOnItemClickListener(new OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> parent, View view,
                        int position, long id) {
                    focusNext();
                }
            });

        mLineupsAdapter = new ArrayAdapter<Lineup>(getActivity(),
                android.R.layout.simple_list_item_single_choice, android.R.id.text1);
        mListView.setAdapter(mLineupsAdapter);

        mNoLineupsView = view.findViewById(R.id.cant_get_lineups);
        mNoLineupsMessage = (TextView) view.findViewById(R.id.no_lineups_message);

        mTryAgainButton = (Button) view.findViewById(R.id.try_again_button);
        mTryAgainButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    refresh();
                }
            });

        return view;
!!!14207116.java!!!	onAccept() : boolean
        final Device device = (Device) getProperty(SetupProperties.DEVICE_PROPERTY);
        final boolean isTuner = device.getType() == DeviceType.OTA_TUNER;

        int position = mListView.getCheckedItemPosition();
        Lineup lineup = null;

        Log.d(TAG, "selected item position is  "+ position);
        if ((position >= 0) && (position < mLineupsAdapter.getCount())) {
            lineup = mLineupsAdapter.getItem(position);
        }

        if ((lineup == null) && !isTuner) {
            return false;
        }

        setProperty(SetupProperties.LINEUP_PROPERTY, lineup);
        return true;
!!!14207244.java!!!	onResume() : void
        super.onResume();

        setTitleText(getActivity().getString(R.string.select_provider_title));
        setNextEnabled(false);

        refresh();
!!!14207372.java!!!	onPause() : void
        if (mLoadLineupsTask != null) {
            mLoadLineupsTask.cancel(true);
            mLoadLineupsTask = null;
        }

        super.onPause();
!!!14207500.java!!!	refresh() : void
        Device device = (Device) getProperty(SetupProperties.DEVICE_PROPERTY);
        if (device == null) {
            return;
        }

        String zipCode = (String) getProperty(SetupProperties.ZIP_CODE_PROPERTY);

        mLineupsAdapter.clear();

        Log.d(TAG, "refresh(): zipCode= " + zipCode);

        if (zipCode == null) {
            setSubtitleText(getString(R.string.select_provider_question));
            return;
        }

        setSubtitleText(getString(R.string.select_provider_question_template, zipCode));

        String preferredProviderId =  Gservices.getString(getActivity().getContentResolver(),
                GSERVICES_PREFERRED_PROVIDER);

        LineupFilter filter = buildLineupFilter(device);
        mLoadLineupsTask = new MyLoadLineupListTask(preferredProviderId, filter);

        if (device.hasCapability(Capability.HAS_UNPREFERRED_LINEUP_ID)) {
            String unpreferredLineupId = device.getCapabilityStringValue(
                    Capability.HAS_UNPREFERRED_LINEUP_ID);
            mLoadLineupsTask.setUnpreferredLineupId(unpreferredLineupId);
        }

        mLoadLineupsTask.execute(zipCode);
!!!14208396.java!!!	propertyChanged(in property : String, inout oldValue : Object, inout newValue : Object) : void
        if (SetupProperties.ZIP_CODE_PROPERTY.equals(property)) {
            refresh();
        }
!!!14208524.java!!!	buildLineupFilter(in device : Device) : LineupFilter
        Log.d(TAG, "buildLineupFilter() device=" + device);
        LineupFilter filter = new LineupFilter();

        if (device.hasCapability(Capability.FILTERS_LINEUP_TYPES)) {
            Log.d(TAG, "device has FILTERS_LINEUP_TYPES capability");
            String types[] = device.getCapabilityStringArrayValue(
                    Capability.FILTERS_LINEUP_TYPES);
            for (int i = 0; i < types.length; ++i) {
                Log.d(TAG, "filtering on lineup type: " + types[i]);
                filter.addIncludeLineupType(Lineup.LineupType.safeValueOf(types[i]));
            }
        }

        if (device.hasCapability(Capability.FILTERS_LINEUP_IDS)) {
            String lineupIds[] = device.getCapabilityStringArrayValue(
                    Capability.FILTERS_LINEUP_IDS);
            for (int i = 0; i < lineupIds.length; ++i) {
                filter.addIncludeLineupId(lineupIds[i]);
            }
        }

        if (device.hasCapability(Capability.FILTERS_OPERATOR_IDS)) {
            String operatorIds[] = device.getCapabilityStringArrayValue(
                    Capability.FILTERS_OPERATOR_IDS);
            for (int i = 0; i < operatorIds.length; ++i) {
                filter.addIncludeOperatorId(operatorIds[i]);
            }
        }

        return filter;
