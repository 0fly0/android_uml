class InputLockActivity
!!!12295308.java!!!	onCreate(in savedInstanceState : Bundle) : void

        super.onCreate(savedInstanceState);
        mContext = getApplicationContext();

        setContentView(R.layout.customedtable);
        mDevicesList = (ListView) findViewById(R.id.channel_list);

        this.setTitleColor(Color.WHITE);
        this.setTitle(R.string.input_locks);

        mDeviceListAdapter = new DeviceListAdapter(this);

        setTimeOut(Utils.ONE_MINUTE * 2);
!!!12295436.java!!!	onStart() : void

        super.onStart();
        connectToService();
!!!12295564.java!!!	onStop() : void
        disconnectFromService();
        super.onStop();
!!!12295692.java!!!	connectToService() : void
        mServiceConnection = new ServiceConnection() {

            @Override
            public void onServiceConnected(final ComponentName name, final IBinder service) {
                mBoundService = IMediaDevicesService.Stub.asInterface(service);
                updateList();
            }

            @Override
            public void onServiceDisconnected(final ComponentName name) {
            }
        };
        bindService(new Intent(MediaDevicesConstants.ACTION_BIND_MEDIA_DEVICES_SERVICE),
                mServiceConnection,
                Service.BIND_AUTO_CREATE);
!!!12295820.java!!!	disconnectFromService() : void
        if (mServiceConnection != null) {
            unbindService(mServiceConnection);
            mServiceConnection = null;
            mBoundService = null;
        }
!!!12295948.java!!!	onNewIntent(inout intent : Intent) : void
        super.onNewIntent(intent);
        setIntent(intent);
!!!12296076.java!!!	updateList() : void

        String deviceId = Wrapper.getWrapperInstance().getCurrentDeviceId();
        List<Device> devices = null;
        try {
            devices = mBoundService.getPairedDevices();
            Collections.sort(devices, new PairingDevice().new DeviceComparator());
        } catch (RemoteException e) {
            ProgramaticException.displayException(getApplicationContext(), TAG, e);
            devices = new ArrayList<Device>();
        }

        devices = PairingDevice.filterDeviceList(this, devices, true, null);
        mFocusPosition = PairingDevice.getDevIndexById(devices, deviceId);
        pairedDevices = devices;

        final int buttonCount = devices.size();

        final String btnLabels[] = new String[buttonCount];
        final String btnLabelsDescription[] = new String[buttonCount];

        final Iterator<Device> iterator = devices.iterator();
        Device device = null;
        int count = 0;
        while (iterator.hasNext()) {
            device = iterator.next();
            btnLabels[count] = device.getLabel();
            btnLabelsDescription[count] = device.getSummary();

            count++;
        }
        mBtnLabels = btnLabels;
        mBtnLabelsDescription = btnLabelsDescription;

        if (pairedDevices != null && pairedDevices.size() > 0) {
            mDevicesList.setAdapter(mDeviceListAdapter);
            mDevicesList.setSelection(mFocusPosition);
        }
!!!12296844.java!!!	isDeviceLocked(in deviceFlag : int) : boolean
        if ((deviceFlag & DeviceModificationFlags.Lock_Flag) == DeviceModificationFlags.Lock_Flag) {
            return true;
        }
        return false;
!!!12296972.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean

        Log.d(TAG, "onKeyUp()");

        if (keyCode == KeyEvent.KEYCODE_PROG_RED
                || keyCode == KeyEvent.KEYCODE_DPAD_CENTER
                || keyCode == KeyEvent.KEYCODE_ENTER) {
            mSelectedId = mDevicesList.getSelectedItemPosition();
            updateLockStatusToPlatform();
            mDeviceListAdapter.notifyDataSetChanged();
            return super.onKeyUp(keyCode, event);

        } else {
            return super.onKeyUp(keyCode, event);
        }
!!!12297100.java!!!	getInputSourceByPosition(in position : int) : int
        String deviceId = pairedDevices.get(position).getId();
        TvSource source = (TvSource) PairingDevice.DeviceIdSourceMap.get(deviceId);
        if (source != null) {
            return source.value();
        } else {
            return 0;
        }
!!!12297228.java!!!	updateLockStatusToPlatform() : void

        Log.d(TAG, "updateLockStatusToPlatform()");
        int currentSource = getInputSourceByPosition(mSelectedId);
        Log.d(TAG, "currentSource=" + currentSource);
        /* Instance of UserSettings to set channel Lock flag */
        int serviceFlag = mParentalControl.getDeviceInputStatus(currentSource);
        Log.d(TAG, "serviceFlag=" + serviceFlag);
        /*
         * Toggle the lock flag
         */
        // if (serviceFlag != 0)
        serviceFlag = serviceFlag ^ DeviceModificationFlags.Lock_Flag;
        mParentalControl.setDeviceInputStatus(currentSource, serviceFlag);
        Log.d(TAG, "serviceFlag-after=" + serviceFlag);
