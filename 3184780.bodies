class PagedViewCellLayout
!!!13675788.java!!!	PagedViewCellLayout(inout context : Context)
        this(context, null);
!!!13675916.java!!!	PagedViewCellLayout(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!13676044.java!!!	PagedViewCellLayout(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        setAlwaysDrawnWithCacheEnabled(false);

        // setup default cell parameters
        Resources resources = context.getResources();
        mOriginalCellWidth = mCellWidth =
            resources.getDimensionPixelSize(R.dimen.apps_customize_cell_width);
        mOriginalCellHeight = mCellHeight =
            resources.getDimensionPixelSize(R.dimen.apps_customize_cell_height);
        mCellCountX = LauncherModel.getCellCountX();
        mCellCountY = LauncherModel.getCellCountY();
        mOriginalWidthGap = mOriginalHeightGap = mWidthGap = mHeightGap = -1;
        mMaxGap = resources.getDimensionPixelSize(R.dimen.apps_customize_max_gap);

        mChildren = new PagedViewCellLayoutChildren(context);
        mChildren.setCellDimensions(mCellWidth, mCellHeight);
        mChildren.setGap(mWidthGap, mHeightGap);

        addView(mChildren);
!!!13676172.java!!!	getCellWidth() : int
        return mCellWidth;
!!!13676300.java!!!	getCellHeight() : int
        return mCellHeight;
!!!13676428.java!!!	destroyHardwareLayers() : void
        // called when a page is no longer visible (triggered by loadAssociatedPages ->
        // removeAllViewsOnPage)
        setLayerType(LAYER_TYPE_NONE, null);
!!!13676556.java!!!	createHardwareLayers() : void
        // called when a page is visible (triggered by loadAssociatedPages -> syncPageItems)
        setLayerType(LAYER_TYPE_HARDWARE, null);
!!!13676684.java!!!	cancelLongPress() : void
        super.cancelLongPress();

        // Cancel long press for all children
        final int count = getChildCount();
        for (int i = 0; i < count; i++) {
            final View child = getChildAt(i);
            child.cancelLongPress();
        }
!!!13676812.java!!!	addViewToCellLayout(inout child : View, in index : int, in childId : int, inout params : LayoutParams) : boolean
        final PagedViewCellLayout.LayoutParams lp = params;

        // Generate an id for each view, this assumes we have at most 256x256 cells
        // per workspace screen
        if (lp.cellX >= 0 && lp.cellX <= (mCellCountX - 1) &&
                lp.cellY >= 0 && (lp.cellY <= mCellCountY - 1)) {
            // If the horizontal or vertical span is set to -1, it is taken to
            // mean that it spans the extent of the CellLayout
            if (lp.cellHSpan < 0) lp.cellHSpan = mCellCountX;
            if (lp.cellVSpan < 0) lp.cellVSpan = mCellCountY;

            child.setId(childId);
            mChildren.addView(child, index, lp);

            return true;
        }
        return false;
!!!13676940.java!!!	removeAllViewsOnPage() : void
        mChildren.removeAllViews();
        destroyHardwareLayers();
!!!13677068.java!!!	removeViewOnPageAt(in index : int) : void
        mChildren.removeViewAt(index);
!!!13677196.java!!!	resetChildrenOnKeyListeners() : void
        int childCount = mChildren.getChildCount();
        for (int j = 0; j < childCount; ++j) {
            mChildren.getChildAt(j).setOnKeyListener(null);
        }
!!!13677324.java!!!	getPageChildCount() : int
        return mChildren.getChildCount();
!!!13677452.java!!!	getChildrenLayout() : PagedViewCellLayoutChildren
        return mChildren;
!!!13677580.java!!!	getChildOnPageAt(in i : int) : View
        return mChildren.getChildAt(i);
!!!13677708.java!!!	indexOfChildOnPage(inout v : View) : int
        return mChildren.indexOfChild(v);
!!!13677836.java!!!	getCellCountX() : int
        return mCellCountX;
!!!13677964.java!!!	getCellCountY() : int
        return mCellCountY;
!!!13678092.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);
        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);

        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSpecSize =  MeasureSpec.getSize(heightMeasureSpec);

        if (widthSpecMode == MeasureSpec.UNSPECIFIED || heightSpecMode == MeasureSpec.UNSPECIFIED) {
            throw new RuntimeException("CellLayout cannot have UNSPECIFIED dimensions");
        }

        int numWidthGaps = mCellCountX - 1;
        int numHeightGaps = mCellCountY - 1;

        if (mOriginalWidthGap < 0 || mOriginalHeightGap < 0) {
            int hSpace = widthSpecSize - getPaddingLeft() - getPaddingRight();
            int vSpace = heightSpecSize - getPaddingTop() - getPaddingBottom();
            int hFreeSpace = hSpace - (mCellCountX * mOriginalCellWidth);
            int vFreeSpace = vSpace - (mCellCountY * mOriginalCellHeight);
            mWidthGap = Math.min(mMaxGap, numWidthGaps > 0 ? (hFreeSpace / numWidthGaps) : 0);
            mHeightGap = Math.min(mMaxGap,numHeightGaps > 0 ? (vFreeSpace / numHeightGaps) : 0);

            mChildren.setGap(mWidthGap, mHeightGap);
        } else {
            mWidthGap = mOriginalWidthGap;
            mHeightGap = mOriginalHeightGap;
        }

        // Initial values correspond to widthSpecMode == MeasureSpec.EXACTLY
        int newWidth = widthSpecSize;
        int newHeight = heightSpecSize;
        if (widthSpecMode == MeasureSpec.AT_MOST) {
            newWidth = getPaddingLeft() + getPaddingRight() + (mCellCountX * mCellWidth) +
                ((mCellCountX - 1) * mWidthGap);
            newHeight = getPaddingTop() + getPaddingBottom() + (mCellCountY * mCellHeight) +
                ((mCellCountY - 1) * mHeightGap);
            setMeasuredDimension(newWidth, newHeight);
        }

        final int count = getChildCount();
        for (int i = 0; i < count; i++) {
            View child = getChildAt(i);
            int childWidthMeasureSpec =
                MeasureSpec.makeMeasureSpec(newWidth - getPaddingLeft() -
                        getPaddingRight(), MeasureSpec.EXACTLY);
            int childheightMeasureSpec =
                MeasureSpec.makeMeasureSpec(newHeight - getPaddingTop() -
                        getPaddingBottom(), MeasureSpec.EXACTLY);
            child.measure(childWidthMeasureSpec, childheightMeasureSpec);
        }

        setMeasuredDimension(newWidth, newHeight);
!!!13678220.java!!!	getContentWidth() : int
        return getWidthBeforeFirstLayout() + getPaddingLeft() + getPaddingRight();
!!!13678348.java!!!	getContentHeight() : int
        if (mCellCountY > 0) {
            return mCellCountY * mCellHeight + (mCellCountY - 1) * Math.max(0, mHeightGap);
        }
        return 0;
!!!13678476.java!!!	getWidthBeforeFirstLayout() : int
        if (mCellCountX > 0) {
            return mCellCountX * mCellWidth + (mCellCountX - 1) * Math.max(0, mWidthGap);
        }
        return 0;
!!!13678604.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        int count = getChildCount();
        for (int i = 0; i < count; i++) {
            View child = getChildAt(i);
            child.layout(getPaddingLeft(), getPaddingTop(),
                r - l - getPaddingRight(), b - t - getPaddingBottom());
        }
!!!13678732.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        boolean result = super.onTouchEvent(event);
        int count = getPageChildCount();
        if (count > 0) {
            // We only intercept the touch if we are tapping in empty space after the final row
            View child = getChildOnPageAt(count - 1);
            int bottom = child.getBottom();
            int numRows = (int) Math.ceil((float) getPageChildCount() / getCellCountX());
            if (numRows < getCellCountY()) {
                // Add a little bit of buffer if there is room for another row
                bottom += mCellHeight / 2;
            }
            result = result || (event.getY() < bottom);
        }
        return result;
!!!13678860.java!!!	enableCenteredContent(inout enabled : boolean) : void
        mChildren.enableCenteredContent(enabled);
!!!13678988.java!!!	setChildrenDrawingCacheEnabled(inout enabled : boolean) : void
        mChildren.setChildrenDrawingCacheEnabled(enabled);
!!!13679116.java!!!	setCellCount(in xCount : int, in yCount : int) : void
        mCellCountX = xCount;
        mCellCountY = yCount;
        requestLayout();
!!!13679244.java!!!	setGap(in widthGap : int, in heightGap : int) : void
        mOriginalWidthGap = mWidthGap = widthGap;
        mOriginalHeightGap = mHeightGap = heightGap;
        mChildren.setGap(widthGap, heightGap);
!!!13679372.java!!!	getCellCountForDimensions(in width : int, in height : int) : int
        // Always assume we're working with the smallest span to make sure we
        // reserve enough space in both orientations
        int smallerSize = Math.min(mCellWidth, mCellHeight);

        // Always round up to next largest cell
        int spanX = (width + smallerSize) / smallerSize;
        int spanY = (height + smallerSize) / smallerSize;

        return new int[] { spanX, spanY };
!!!13679500.java!!!	onDragChild(inout child : View) : void
        PagedViewCellLayout.LayoutParams lp = (PagedViewCellLayout.LayoutParams) child.getLayoutParams();
        lp.isDragging = true;
!!!13679628.java!!!	estimateCellHSpan(in width : int) : int
        // We don't show the next/previous pages any more, so we use the full width, minus the
        // padding
        int availWidth = width - (getPaddingLeft() + getPaddingRight());

        // We know that we have to fit N cells with N-1 width gaps, so we just juggle to solve for N
        int n = Math.max(1, (availWidth + mWidthGap) / (mCellWidth + mWidthGap));

        // We don't do anything fancy to determine if we squeeze another row in.
        return n;
!!!13679756.java!!!	estimateCellVSpan(in height : int) : int
        // The space for a page is the height - top padding (current page) - bottom padding (current
        // page)
        int availHeight = height - (getPaddingTop() + getPaddingBottom());

        // We know that we have to fit N cells with N-1 height gaps, so we juggle to solve for N
        int n = Math.max(1, (availHeight + mHeightGap) / (mCellHeight + mHeightGap));

        // We don't do anything fancy to determine if we squeeze another row in.
        return n;
!!!13679884.java!!!	estimateCellPosition(in x : int, in y : int) : int
        return new int[] {
                getPaddingLeft() + (x * mCellWidth) + (x * mWidthGap) + (mCellWidth / 2),
                getPaddingTop() + (y * mCellHeight) + (y * mHeightGap) + (mCellHeight / 2)
        };
!!!13680012.java!!!	calculateCellCount(in width : int, in height : int, in maxCellCountX : int, in maxCellCountY : int) : void
        mCellCountX = Math.min(maxCellCountX, estimateCellHSpan(width));
        mCellCountY = Math.min(maxCellCountY, estimateCellVSpan(height));
        requestLayout();
!!!13680140.java!!!	estimateCellWidth(in hSpan : int) : int
        // TODO: we need to take widthGap into effect
        return hSpan * mCellWidth;
!!!13680268.java!!!	estimateCellHeight(in vSpan : int) : int
        // TODO: we need to take heightGap into effect
        return vSpan * mCellHeight;
!!!13680396.java!!!	generateLayoutParams(inout attrs : AttributeSet) : LayoutParams
        return new PagedViewCellLayout.LayoutParams(getContext(), attrs);
!!!13680524.java!!!	checkLayoutParams(inout p : LayoutParams) : boolean
        return p instanceof PagedViewCellLayout.LayoutParams;
!!!13680652.java!!!	generateLayoutParams(inout p : LayoutParams) : LayoutParams
        return new PagedViewCellLayout.LayoutParams(p);
