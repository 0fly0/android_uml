class AmpAudioResampler
!!!10922252.cpp!!!	AmpAudioResampler(in bitDepth : uint32_t, in channelNum : uint32_t, in sampleRate : uint32_t)
    mResampler = AudioResampler::create(16, mChannelNum, mSampleRate,
                        AudioResampler::DEFAULT_QUALITY);
!!!10922380.cpp!!!	~AmpAudioResampler()
    if (mResampler != NULL)
        delete mResampler;
!!!10922508.cpp!!!	resample(inout buffer : void, inout info : AudioBufferInfo) : int
    if (mResampler == NULL)
        return -1;

    if (info == NULL || buffer == NULL)
        return -1;

    if (info->channelNum != mChannelNum)
        return -1;

    if (info->bitDepth != 16 && info->bitDepth != 32)
        return -1;

    int doesResample = (info->sampleRate != mSampleRate);
    size_t bitDepth = (doesResample) ? 16 : info->bitDepth;
    if (bitDepth != info->bitDepth && info->bitDepth == 32) {
        size_t count = info->frameCount * info->channelNum;
        size_t i, j, k;
        int16_t *i16 = static_cast<int16_t *>(buffer);
        int32_t *i32 = static_cast<int32_t *>(buffer);
        for (i = 0, j = 0, k = count >> 3; j < k; i += 8, j++) {
            i16[i+0] = int16_t(i32[i+0]>>16);
            i16[i+1] = int16_t(i32[i+1]>>16);
            i16[i+2] = int16_t(i32[i+2]>>16);
            i16[i+3] = int16_t(i32[i+3]>>16);
            i16[i+4] = int16_t(i32[i+4]>>16);
            i16[i+5] = int16_t(i32[i+5]>>16);
            i16[i+6] = int16_t(i32[i+6]>>16);
            i16[i+7] = int16_t(i32[i+7]>>16);
        }
        for (k = count & 0x7; k; k--, i++) {
            i16[i] = int16_t(i32[i]>>16);
        }
        info->bitDepth = 16;
    }

    if (!doesResample) {
        return 0;
    }

    if (info->bitDepth != 16) {
        SLOGE("unexpected bitDepth (%u), resampler requires this to be 16",
              info->bitDepth);
        return -1;
    }

    int16_t *i16 = static_cast<int16_t *>(buffer);
    int32_t *i32 = static_cast<int32_t *>(buffer);
    // following codes copied from test-resample.cpp, need to check again
    // later for possible optimization
    class Provider: public AudioBufferProvider {
        int16_t *mAddr;
        size_t   mFrameCount;
        public:
        Provider(int16_t *addr, size_t count) {
            mAddr = addr;
            mFrameCount = count;
        }
        virtual status_t getNextBuffer(Buffer *buffer, int64_t pts = kInvalidPTS) {
            buffer->frameCount = mFrameCount;
            buffer->i16 = mAddr;
            return NO_ERROR;
        }
        virtual void releaseBuffer(Buffer *buffer) {
        }
    } provider(i16, info->frameCount);

    // output: 32bit/2channel
    size_t outFrameCount = ((int64_t) info->frameCount * mSampleRate) / info->sampleRate;
    size_t outSize = (outFrameCount<<1); // always 2channel
    if (mSize < outSize) {
        int32_t *p = mBuffer;
        if (mBuffer)
            mBuffer = static_cast<int32_t *>(malloc(outSize*sizeof(int32_t)));
        else
            mBuffer = static_cast<int32_t *>(realloc(mBuffer, outSize*sizeof(int32_t)));
        if (mBuffer == NULL) {
            if (p) mBuffer = p;
            SLOGE("memory allocation failed (%s)", strerror(errno));
            return -1;
        }
        mSize = outSize;
    }
    memset(static_cast<void *>(mBuffer), 0, outSize*sizeof(int32_t));
    mResampler->reset();
    mResampler->setVolume(0x1000, 0x1000);
    mResampler->setSampleRate(info->sampleRate /* input freq */);
    mResampler->resample(static_cast<int *>(mBuffer), outFrameCount, &provider); //Check return val

    // Down-mix
    if (mChannelNum == 2) {
        for (size_t i = 0; i < outFrameCount; i++) {
            int32_t l = mBuffer[i<<1] >> 12;
            if (l > 32767)       l = 32767;
            else if (l < -32768) l = -32768;
            i16[i<<1] = (int16_t)(l);
            int32_t r = mBuffer[(i<<1)+1] >> 12;
            if (r > 32767)       r = 32767;
            else if (r < -32768) r = -32768;
            i16[(i<<1)+1] = (int16_t)(r);
        }
    } else {
        for (size_t i = 0; i < outFrameCount; i++) {
            int32_t l = mBuffer[i<<1] >> 12;
            if (l > 32767)       l = 32767;
            else if (l < -32768) l = -32768;
            i16[i<<1] = (int16_t)(l);
        }
    }

    // Update info after resample
    info->frameCount = outFrameCount;
    info->channelNum = mChannelNum;
    info->sampleRate = mSampleRate;

    return 0;
