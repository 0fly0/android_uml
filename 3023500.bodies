class PictureCurveSettingsFragment
!!!12375820.java!!!	getDataXmlId() : int
        // TODO Auto-generated method stub
        return R.xml.picture_curve_settings_menu;
!!!12375948.java!!!	setListItemValue(inout view : View, in position : int) : void
        super.setListItemValue(view, position);

        Map<String, Object> map = getData().get(position);
        String titleString = map.get(KEY_TITLE).toString();

        if (titleString.equals(getActivity().getString(R.string.pic_type))) {
            enableListItem(view, false);
        } else {
            enableListItem(view, true);
        }
!!!12376076.java!!!	onViewCreated(inout view : View, inout savedInstanceState : Bundle) : void
        // TODO Auto-generated method stub
        super.onViewCreated(view, savedInstanceState);
        FacFunctionImpl.getInstance().setPictureCurveMode(DEFAULT_PICTURECURVE_MODE);
        refreshMenuData(getData());
        notifyDataSetChange();
        Log.d(TAG, "PictureCurveSettingsFragment onResume");
!!!12376204.java!!!	refreshMenuData(inout list : List<Map<String, Object>>) : void
        // TODO Auto-generated method stub
        if (list != null) {
            int mode = FacFunctionImpl.getInstance().getPictureCurveMode();
            for (Map<String, Object> map : list) {
                String apiName = null;
                if (map.get(KEY_API) != null) {
                    apiName = (String) map.get(KEY_API);
                    map.put(KEY_CURR_VALUE,
                            Utils.getValueByAPI(FacFunctionImpl.getInstance(), apiName));

                    if (mode == 3 || mode == 4) { // sharpness/backlight range
                        // is 0-100
                        map.put(KEY_PROGRESS_MAX, 100);
                        map.put(KEY_PROGRESS_MIN, 0);
                        map.put(KEY_PROGRESS_STEP, 1);

                    } else {
                        map.put(KEY_PROGRESS_MAX, 1000);
                        map.put(KEY_PROGRESS_MIN, 0);
                        map.put(KEY_PROGRESS_STEP, 5);
                    }
                }
            }
        }
