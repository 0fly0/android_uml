class InputDevice
!!!4535308.java!!!	InputDevice(in id : int, in generation : int, in name : String, in descriptor : String, inout isExternal : boolean, in sources : int, in keyboardType : int, inout keyCharacterMap : KeyCharacterMap, inout hasVibrator : boolean)
        mId = id;
        mGeneration = generation;
        mName = name;
        mDescriptor = descriptor;
        mIsExternal = isExternal;
        mSources = sources;
        mKeyboardType = keyboardType;
        mKeyCharacterMap = keyCharacterMap;
        mHasVibrator = hasVibrator;
!!!4535436.java!!!	InputDevice(inout in : Parcel)
        mId = in.readInt();
        mGeneration = in.readInt();
        mName = in.readString();
        mDescriptor = in.readString();
        mIsExternal = in.readInt() != 0;
        mSources = in.readInt();
        mKeyboardType = in.readInt();
        mKeyCharacterMap = KeyCharacterMap.CREATOR.createFromParcel(in);
        mHasVibrator = in.readInt() != 0;

        for (;;) {
            int axis = in.readInt();
            if (axis < 0) {
                break;
            }
            addMotionRange(axis, in.readInt(),
                    in.readFloat(), in.readFloat(), in.readFloat(), in.readFloat());
        }
!!!4535564.java!!!	getDevice(in id : int) : InputDevice
        return InputManager.getInstance().getInputDevice(id);
!!!4535692.java!!!	getDeviceIds() : int
        return InputManager.getInstance().getInputDeviceIds();
!!!4535820.java!!!	getId() : int
        return mId;
!!!4535948.java!!!	getGeneration() : int
        return mGeneration;
!!!4536076.java!!!	getDescriptor() : String
        return mDescriptor;
!!!4536204.java!!!	isVirtual() : boolean
        return mId < 0;
!!!4536332.java!!!	isExternal() : boolean
        return mIsExternal;
!!!4536460.java!!!	isFullKeyboard() : boolean
        return (mSources & SOURCE_KEYBOARD) == SOURCE_KEYBOARD
                && mKeyboardType == KEYBOARD_TYPE_ALPHABETIC;
!!!4536588.java!!!	getName() : String
        return mName;
!!!4536716.java!!!	getSources() : int
        return mSources;
!!!4536844.java!!!	getKeyboardType() : int
        return mKeyboardType;
!!!4536972.java!!!	getKeyCharacterMap() : KeyCharacterMap
        return mKeyCharacterMap;
!!!4537100.java!!!	getMotionRange(in axis : int) : MotionRange
        final int numRanges = mMotionRanges.size();
        for (int i = 0; i < numRanges; i++) {
            final MotionRange range = mMotionRanges.get(i);
            if (range.mAxis == axis) {
                return range;
            }
        }
        return null;
!!!4537228.java!!!	getMotionRange(in axis : int, in source : int) : MotionRange
        final int numRanges = mMotionRanges.size();
        for (int i = 0; i < numRanges; i++) {
            final MotionRange range = mMotionRanges.get(i);
            if (range.mAxis == axis && range.mSource == source) {
                return range;
            }
        }
        return null;
!!!4537356.java!!!	getMotionRanges() : MotionRange
        return mMotionRanges;
!!!4537484.java!!!	addMotionRange(in axis : int, in source : int, in min : float, in max : float, in flat : float, in fuzz : float) : void
        mMotionRanges.add(new MotionRange(axis, source, min, max, flat, fuzz));
!!!4537612.java!!!	getVibrator() : Vibrator
        synchronized (mMotionRanges) {
            if (mVibrator == null) {
                if (mHasVibrator) {
                    mVibrator = InputManager.getInstance().getInputDeviceVibrator(mId);
                } else {
                    mVibrator = NullVibrator.getInstance();
                }
            }
            return mVibrator;
        }
!!!4538764.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeInt(mId);
        out.writeInt(mGeneration);
        out.writeString(mName);
        out.writeString(mDescriptor);
        out.writeInt(mIsExternal ? 1 : 0);
        out.writeInt(mSources);
        out.writeInt(mKeyboardType);
        mKeyCharacterMap.writeToParcel(out, flags);
        out.writeInt(mHasVibrator ? 1 : 0);

        final int numRanges = mMotionRanges.size();
        for (int i = 0; i < numRanges; i++) {
            MotionRange range = mMotionRanges.get(i);
            out.writeInt(range.mAxis);
            out.writeInt(range.mSource);
            out.writeFloat(range.mMin);
            out.writeFloat(range.mMax);
            out.writeFloat(range.mFlat);
            out.writeFloat(range.mFuzz);
        }
        out.writeInt(-1);
!!!4538892.java!!!	describeContents() : int
        return 0;
!!!4539020.java!!!	toString() : String
        StringBuilder description = new StringBuilder();
        description.append("Input Device ").append(mId).append(": ").append(mName).append("\n");
        description.append("  Descriptor: ").append(mDescriptor).append("\n");
        description.append("  Generation: ").append(mGeneration).append("\n");
        description.append("  Location: ").append(mIsExternal ? "external" : "built-in").append("\n");

        description.append("  Keyboard Type: ");
        switch (mKeyboardType) {
            case KEYBOARD_TYPE_NONE:
                description.append("none");
                break;
            case KEYBOARD_TYPE_NON_ALPHABETIC:
                description.append("non-alphabetic");
                break;
            case KEYBOARD_TYPE_ALPHABETIC:
                description.append("alphabetic");
                break;
        }
        description.append("\n");

        description.append("  Has Vibrator: ").append(mHasVibrator).append("\n");

        description.append("  Sources: 0x").append(Integer.toHexString(mSources)).append(" (");
        appendSourceDescriptionIfApplicable(description, SOURCE_KEYBOARD, "keyboard");
        appendSourceDescriptionIfApplicable(description, SOURCE_DPAD, "dpad");
        appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHSCREEN, "touchscreen");
        appendSourceDescriptionIfApplicable(description, SOURCE_MOUSE, "mouse");
        appendSourceDescriptionIfApplicable(description, SOURCE_STYLUS, "stylus");
        appendSourceDescriptionIfApplicable(description, SOURCE_TRACKBALL, "trackball");
        appendSourceDescriptionIfApplicable(description, SOURCE_TOUCHPAD, "touchpad");
        appendSourceDescriptionIfApplicable(description, SOURCE_JOYSTICK, "joystick");
        appendSourceDescriptionIfApplicable(description, SOURCE_GAMEPAD, "gamepad");
        description.append(" )\n");

        final int numAxes = mMotionRanges.size();
        for (int i = 0; i < numAxes; i++) {
            MotionRange range = mMotionRanges.get(i);
            description.append("    ").append(MotionEvent.axisToString(range.mAxis));
            description.append(": source=0x").append(Integer.toHexString(range.mSource));
            description.append(" min=").append(range.mMin);
            description.append(" max=").append(range.mMax);
            description.append(" flat=").append(range.mFlat);
            description.append(" fuzz=").append(range.mFuzz);
            description.append("\n");
        }
        return description.toString();
!!!4539148.java!!!	appendSourceDescriptionIfApplicable(inout description : StringBuilder, in source : int, in sourceName : String) : void
        if ((mSources & source) == source) {
            description.append(" ");
            description.append(sourceName);
        }
