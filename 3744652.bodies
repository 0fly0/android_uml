class GeofenceProxy
!!!15977484.java!!!	createAndBind(inout context : Context, in overlaySwitchResId : int, in defaultServicePackageNameResId : int, in initialPackageNamesResId : int, inout handler : Handler, inout gpsGeofence : IGpsGeofenceHardware) : GeofenceProxy
        GeofenceProxy proxy = new GeofenceProxy(context, overlaySwitchResId,
            defaultServicePackageNameResId, initialPackageNamesResId, handler, gpsGeofence);
        if (proxy.bindGeofenceProvider()) {
            return proxy;
        } else {
            return null;
        }
!!!15977612.java!!!	GeofenceProxy(inout context : Context, in overlaySwitchResId : int, in defaultServicePackageNameResId : int, in initialPackageNamesResId : int, inout handler : Handler, inout gpsGeofence : IGpsGeofenceHardware)
        mContext = context;
        mServiceWatcher = new ServiceWatcher(context, TAG, SERVICE_ACTION, overlaySwitchResId,
            defaultServicePackageNameResId, initialPackageNamesResId, mRunnable, handler);
        mGpsGeofenceHardware = gpsGeofence;
        bindHardwareGeofence();
!!!15977740.java!!!	bindGeofenceProvider() : boolean
        return mServiceWatcher.start();
!!!15977868.java!!!	getGeofenceProviderService() : IGeofenceProvider
        return IGeofenceProvider.Stub.asInterface(mServiceWatcher.getBinder());
!!!15977996.java!!!	bindHardwareGeofence() : void
        mContext.bindServiceAsUser(new Intent(mContext, GeofenceHardwareService.class),
                mServiceConnection, Context.BIND_AUTO_CREATE, UserHandle.OWNER);
!!!15978124.java!!!	setGeofenceHardwareInProvider() : void
        try {
            getGeofenceProviderService().setGeofenceHardware(mGeofenceHardware);
        } catch (RemoteException e) {
            Log.e(TAG, "Remote Exception: setGeofenceHardwareInProvider: " + e);
        }
!!!15978252.java!!!	setGpsGeofence() : void
        try {
            mGeofenceHardware.setGpsGeofenceHardware(mGpsGeofenceHardware);
        } catch (RemoteException e) {
            Log.e(TAG, "Error while connecting to GeofenceHardwareService");
        }
