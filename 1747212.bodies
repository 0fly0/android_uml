class AudioHardwareBase
!!!10065292.cpp!!!	AudioHardwareBase()
    mMode = 0;
!!!10065548.cpp!!!	setMode(in mode : int) : status_t
#if LOG_ROUTING_CALLS
    ALOGD("setMode(%s)", displayMode(mode));
#endif
    if ((mode < 0) || (mode >= AudioSystem::NUM_MODES))
        return BAD_VALUE;
    if (mMode == mode)
        return ALREADY_EXISTS;
    mMode = mode;
    return NO_ERROR;
!!!10065676.cpp!!!	setParameters(in keyValuePairs : String8) : status_t
    return NO_ERROR;
!!!10065804.cpp!!!	getParameters(in keys : String8) : String8
    AudioParameter param = AudioParameter(keys);
    return param.toString();
!!!10065932.cpp!!!	getInputBufferSize(in sampleRate : uint32_t, in format : int, in channelCount : int) : size_t
    if (sampleRate != 8000) {
        ALOGW("getInputBufferSize bad sampling rate: %d", sampleRate);
        return 0;
    }
    if (format != AudioSystem::PCM_16_BIT) {
        ALOGW("getInputBufferSize bad format: %d", format);
        return 0;
    }
    if (channelCount != 1) {
        ALOGW("getInputBufferSize bad channel count: %d", channelCount);
        return 0;
    }

    return 320;
!!!10066060.cpp!!!	getMasterVolume(inout volume : float) : status_t
    return INVALID_OPERATION;
!!!10066188.cpp!!!	dumpState(in fd : int, in args : Vector<String16>) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;
    snprintf(buffer, SIZE, "AudioHardwareBase::dumpState\n");
    result.append(buffer);
    snprintf(buffer, SIZE, "\tmMode: %d\n", mMode);
    result.append(buffer);
    ::write(fd, result.string(), result.size());
    dump(fd, args);  // Dump the state of the concrete child.
    return NO_ERROR;
