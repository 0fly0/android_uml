class ClipDrawable
!!!6459788.java!!!	ClipDrawable()
        this(null, null);
!!!6459916.java!!!	ClipDrawable(inout drawable : Drawable, in gravity : int, in orientation : int)
        this(null, null);

        mClipState.mDrawable = drawable;
        mClipState.mGravity = gravity;
        mClipState.mOrientation = orientation;

        if (drawable != null) {
            drawable.setCallback(this);
        }
!!!6460044.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : void
        super.inflate(r, parser, attrs);

        int type;

        TypedArray a = r.obtainAttributes(attrs, com.android.internal.R.styleable.ClipDrawable);

        int orientation = a.getInt(
                com.android.internal.R.styleable.ClipDrawable_clipOrientation,
                HORIZONTAL);
        int g = a.getInt(com.android.internal.R.styleable.ClipDrawable_gravity, Gravity.LEFT);
        Drawable dr = a.getDrawable(com.android.internal.R.styleable.ClipDrawable_drawable);

        a.recycle();

        final int outerDepth = parser.getDepth();
        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT
                && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
            if (type != XmlPullParser.START_TAG) {
                continue;
            }
            dr = Drawable.createFromXmlInner(r, parser, attrs);
        }

        if (dr == null) {
            throw new IllegalArgumentException("No drawable specified for <clip>");
        }

        mClipState.mDrawable = dr;
        mClipState.mOrientation = orientation;
        mClipState.mGravity = g;

        dr.setCallback(this);
!!!6460172.java!!!	invalidateDrawable(inout who : Drawable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.invalidateDrawable(this);
        }
!!!6460300.java!!!	scheduleDrawable(inout who : Drawable, inout what : Runnable, in when : long) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.scheduleDrawable(this, what, when);
        }
!!!6460428.java!!!	unscheduleDrawable(inout who : Drawable, inout what : Runnable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.unscheduleDrawable(this, what);
        }
!!!6460556.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations()
                | mClipState.mChangingConfigurations
                | mClipState.mDrawable.getChangingConfigurations();
!!!6460684.java!!!	getPadding(inout padding : Rect) : boolean
        // XXX need to adjust padding!
        return mClipState.mDrawable.getPadding(padding);
!!!6460812.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        mClipState.mDrawable.setVisible(visible, restart);
        return super.setVisible(visible, restart);
!!!6460940.java!!!	setAlpha(in alpha : int) : void
        mClipState.mDrawable.setAlpha(alpha);
!!!6461068.java!!!	setColorFilter(inout cf : ColorFilter) : void
        mClipState.mDrawable.setColorFilter(cf);
!!!6461196.java!!!	getOpacity() : int
        return mClipState.mDrawable.getOpacity();
!!!6461324.java!!!	isStateful() : boolean
        return mClipState.mDrawable.isStateful();
!!!6461452.java!!!	onStateChange(inout state : int) : boolean
        return mClipState.mDrawable.setState(state);
!!!6461580.java!!!	onLevelChange(in level : int) : boolean
        mClipState.mDrawable.setLevel(level);
        invalidateSelf();
        return true;
!!!6461708.java!!!	onBoundsChange(inout bounds : Rect) : void
        mClipState.mDrawable.setBounds(bounds);
!!!6461836.java!!!	draw(inout canvas : Canvas) : void
        
        if (mClipState.mDrawable.getLevel() == 0) {
            return;
        }

        final Rect r = mTmpRect;
        final Rect bounds = getBounds();
        int level = getLevel();
        int w = bounds.width();
        final int iw = 0; //mClipState.mDrawable.getIntrinsicWidth();
        if ((mClipState.mOrientation & HORIZONTAL) != 0) {
            w -= (w - iw) * (10000 - level) / 10000;
        }
        int h = bounds.height();
        final int ih = 0; //mClipState.mDrawable.getIntrinsicHeight();
        if ((mClipState.mOrientation & VERTICAL) != 0) {
            h -= (h - ih) * (10000 - level) / 10000;
        }
        final int layoutDirection = getLayoutDirection();
        Gravity.apply(mClipState.mGravity, w, h, bounds, r, layoutDirection);

        if (w > 0 && h > 0) {
            canvas.save();
            canvas.clipRect(r);
            mClipState.mDrawable.draw(canvas);
            canvas.restore();
        }
!!!6461964.java!!!	getIntrinsicWidth() : int
        return mClipState.mDrawable.getIntrinsicWidth();
!!!6462092.java!!!	getIntrinsicHeight() : int
        return mClipState.mDrawable.getIntrinsicHeight();
!!!6462220.java!!!	getConstantState() : ConstantState
        if (mClipState.canConstantState()) {
            mClipState.mChangingConfigurations = getChangingConfigurations();
            return mClipState;
        }
        return null;
!!!6462348.java!!!	setLayoutDirection(in layoutDirection : int) : void
        mClipState.mDrawable.setLayoutDirection(layoutDirection);
        super.setLayoutDirection(layoutDirection);
!!!6463116.java!!!	ClipDrawable(inout state : ClipState, inout res : Resources)
        mClipState = new ClipState(state, this, res);
