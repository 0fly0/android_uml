class Part
!!!5497612.java!!!	getBoundary() : String
        return BOUNDARY;
!!!5498252.java!!!	getPartBoundary() : byte
        if (boundaryBytes == null) {
            // custom boundary bytes have not been set, use the default.
            return DEFAULT_BOUNDARY_BYTES;
        } else {
            return boundaryBytes;            
        }
!!!5498380.java!!!	setPartBoundary(inout boundaryBytes : byte) : void
        this.boundaryBytes = boundaryBytes;
!!!5498508.java!!!	isRepeatable() : boolean
        return true;
!!!5498636.java!!!	sendStart(inout out : OutputStream) : void
        LOG.trace("enter sendStart(OutputStream out)");
        out.write(EXTRA_BYTES);
        out.write(getPartBoundary());
        out.write(CRLF_BYTES);
!!!5498764.java!!!	sendDispositionHeader(inout out : OutputStream) : void
        LOG.trace("enter sendDispositionHeader(OutputStream out)");
        out.write(CONTENT_DISPOSITION_BYTES);
        out.write(QUOTE_BYTES);
        out.write(EncodingUtils.getAsciiBytes(getName()));
        out.write(QUOTE_BYTES);
!!!5498892.java!!!	sendContentTypeHeader(inout out : OutputStream) : void
        LOG.trace("enter sendContentTypeHeader(OutputStream out)");
        String contentType = getContentType();
        if (contentType != null) {
            out.write(CRLF_BYTES);
            out.write(CONTENT_TYPE_BYTES);
            out.write(EncodingUtils.getAsciiBytes(contentType));
            String charSet = getCharSet();
            if (charSet != null) {
                out.write(CHARSET_BYTES);
                out.write(EncodingUtils.getAsciiBytes(charSet));
            }
        }
!!!5499020.java!!!	sendTransferEncodingHeader(inout out : OutputStream) : void
        LOG.trace("enter sendTransferEncodingHeader(OutputStream out)");
        String transferEncoding = getTransferEncoding();
        if (transferEncoding != null) {
            out.write(CRLF_BYTES);
            out.write(CONTENT_TRANSFER_ENCODING_BYTES);
            out.write(EncodingUtils.getAsciiBytes(transferEncoding));
        }
!!!5499148.java!!!	sendEndOfHeader(inout out : OutputStream) : void
        LOG.trace("enter sendEndOfHeader(OutputStream out)");
        out.write(CRLF_BYTES);
        out.write(CRLF_BYTES);
!!!5499532.java!!!	sendEnd(inout out : OutputStream) : void
        LOG.trace("enter sendEnd(OutputStream out)");
        out.write(CRLF_BYTES);
!!!5499660.java!!!	send(inout out : OutputStream) : void
        LOG.trace("enter send(OutputStream out)");
        sendStart(out);
        sendDispositionHeader(out);
        sendContentTypeHeader(out);
        sendTransferEncodingHeader(out);
        sendEndOfHeader(out);
        sendData(out);
        sendEnd(out);
!!!5499788.java!!!	length() : long
        LOG.trace("enter length()");
        if (lengthOfData() < 0) {
            return -1;
        }
        ByteArrayOutputStream overhead = new ByteArrayOutputStream();
        sendStart(overhead);
        sendDispositionHeader(overhead);
        sendContentTypeHeader(overhead);
        sendTransferEncodingHeader(overhead);
        sendEndOfHeader(overhead);
        sendEnd(overhead);
        return overhead.size() + lengthOfData();
!!!5499916.java!!!	toString() : String
        return this.getName();
!!!5500044.java!!!	sendParts(inout out : OutputStream, in parts : Part) : void
        sendParts(out, parts, DEFAULT_BOUNDARY_BYTES);
!!!5500172.java!!!	sendParts(inout out : OutputStream, inout parts : Part, inout partBoundary : byte) : void
        
        if (parts == null) {
            throw new IllegalArgumentException("Parts may not be null"); 
        }
        if (partBoundary == null || partBoundary.length == 0) {
            throw new IllegalArgumentException("partBoundary may not be empty");
        }
        for (int i = 0; i < parts.length; i++) {
            // set the part boundary before the part is sent
            parts[i].setPartBoundary(partBoundary);
            parts[i].send(out);
        }
        out.write(EXTRA_BYTES);
        out.write(partBoundary);
        out.write(EXTRA_BYTES);
        out.write(CRLF_BYTES);
!!!5500300.java!!!	getLengthOfParts(inout parts : Part) : long
        return getLengthOfParts(parts, DEFAULT_BOUNDARY_BYTES);
!!!5500428.java!!!	getLengthOfParts(inout parts : Part, inout partBoundary : byte) : long
        LOG.trace("getLengthOfParts(Parts[])");
        if (parts == null) {
            throw new IllegalArgumentException("Parts may not be null"); 
        }
        long total = 0;
        for (int i = 0; i < parts.length; i++) {
            // set the part boundary before we calculate the part's length
            parts[i].setPartBoundary(partBoundary);
            long l = parts[i].length();
            if (l < 0) {
                return -1;
            }
            total += l;
        }
        total += EXTRA_BYTES.length;
        total += partBoundary.length;
        total += EXTRA_BYTES.length;
        total += CRLF_BYTES.length;
        return total;
