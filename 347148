format 74
"accessibility" // framework::base::cmds::am::src::com::google::tv::inputmethod::accessibility
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/jellybean/vendor/tv/development/sample_code/DpadLatinIme/java/src/com/google/tv/inputmethod/accessibility/"
  java_package "com.google.tv.inputmethod.accessibility"
  classview 299788 "accessibility"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3074060 "AccessibilityEntityProvider"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exposes a virtual view sub-tree for {@link KeyboardView} and generates
{@link AccessibilityEvent}s for individual {@link Key}s.
<p>
A virtual sub-tree is composed of imaginary {@link View}s that are reported
as a part of the view hierarchy for accessibility purposes. This enables
custom views that draw complex content to report them selves as a tree of
virtual views, thus conveying their logical structure.
</p>"
      classrelation 5685900 // <generalisation>
	relation 5685772 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5685900 // <generalisation>
	  b parent class_ref 3074188 // AccessibilityNodeProviderCompat
      end

      attribute 11240332 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " AccessibilityEntityProvider.class.getSimpleName()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11240460 "UNDEFINED"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MIN_VALUE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5686028 // mInputMethodService (<unidirectional association>)
	relation 5685900 --->
	  a role_name "mInputMethodService" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5686028 // mInputMethodService (<unidirectional association>)
	  b parent class_ref 829836 // InputMethodService
      end

      classrelation 5686156 // mKeyCodeDescriptionMapper (<unidirectional association>)
	relation 5686028 --->
	  a role_name "mKeyCodeDescriptionMapper" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5686156 // mKeyCodeDescriptionMapper (<unidirectional association>)
	  b parent class_ref 3074316 // KeyCodeDescriptionMapper
      end

      classrelation 5686284 // mAccessibilityUtils (<unidirectional association>)
	relation 5686156 --->
	  a role_name "mAccessibilityUtils" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5686284 // mAccessibilityUtils (<unidirectional association>)
	  b parent class_ref 3074444 // AccessibilityUtils
      end

      classrelation 5686412 // mVirtualViewIdToKey (<unidirectional association>)
	relation 5686284 --->
	  a role_name "mVirtualViewIdToKey" init_value " new SparseArray<Key>()" const_relation private
	    comment " A map of integer IDs to {@link Key}s. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Key> ${name}${value};
"
	    classrelation_ref 5686412 // mVirtualViewIdToKey (<unidirectional association>)
	  b parent class_ref 696716 // SparseArray
      end

      classrelation 5686540 // mTempBoundsInScreen (<unidirectional association>)
	relation 5686412 --->
	  a role_name "mTempBoundsInScreen" init_value " new Rect()" const_relation private
	    comment " Temporary rect used to calculate in-screen bounds. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5686540 // mTempBoundsInScreen (<unidirectional association>)
	  b parent class_ref 694924 // Rect
      end

      attribute 11240588 "mParentLocation"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The parent view's cached on-screen location. "
      end

      attribute 11240716 "mAccessibilityFocusedView"
	private explicit_type "int"
	init_value " UNDEFINED"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The virtual view identifier for the focused node. "
      end

      classrelation 5686668 // mKeyboardView (<unidirectional association>)
	relation 5686540 --->
	  a role_name "mKeyboardView" private
	    comment " The current keyboard view. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5686668 // mKeyboardView (<unidirectional association>)
	  b parent class_ref 3074700 // KeyboardView
      end

      operation 12748940 "AccessibilityEntityProvider"
	public explicit_return_type ""
	nparams 2
	  param inout name "keyboardView" type class_ref 3074700 // KeyboardView
	  param inout name "inputMethod" type class_ref 829836 // InputMethodService
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12749068 "setView"
	public explicit_return_type "void"
	nparams 1
	  param inout name "keyboardView" type class_ref 3074700 // KeyboardView
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the keyboard view represented by this node provider.

@param keyboardView The keyboard view to represent."
      end

      operation 12749196 "setKeyboard"
	public explicit_return_type "void"
	nparams 1
	  param inout name "keyboard" type class_ref 3074828 // Keyboard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the keyboard represented by this node provider.

@param keyboard The keyboard to represent."
      end

      operation 12749324 "createAccessibilityEvent"
	public return_type class_ref 689164 // AccessibilityEvent
	nparams 2
	  param inout name "key" type class_ref 3074572 // Key
	  param in name "eventType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and populates an {@link AccessibilityEvent} for the specified key
and event type.

@param key A key on the host keyboard view.
@param eventType The event type to create.
@return A populated {@link AccessibilityEvent} for the key.
@see AccessibilityEvent"
      end

      operation 12749452 "createAccessibilityNodeInfo"
	public explicit_return_type "AccessibilityNodeInfoCompat"
	nparams 1
	  param in name "virtualViewId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an {@link AccessibilityNodeInfoCompat} representing a virtual
view, i.e. a descendant of the host View, with the given <code>virtualViewId</code> or
the host View itself if <code>virtualViewId</code> equals to {@link View#NO_ID}.
<p>
A virtual descendant is an imaginary View that is reported as a part of
the view hierarchy for accessibility purposes. This enables custom views
that draw complex content to report them selves as a tree of virtual
views, thus conveying their logical structure.
</p>
<p>
The implementer is responsible for obtaining an accessibility node info
from the pool of reusable instances and setting the desired properties of
the node info before returning it.
</p>

@param virtualViewId A client defined virtual view id.
@return A populated {@link AccessibilityNodeInfoCompat} for a virtual
        descendant or the host View.
@see AccessibilityNodeInfoCompat"
      end

      operation 12749580 "simulateKeyPress"
	package explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 3074572 // Key
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Simulates a key press by injecting touch events into the keyboard view.
This avoids the complexity of trackers and listeners within the keyboard.

@param key The key to press."
      end

      operation 12749708 "performAction"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "virtualViewId" explicit_type "int"
	  param in name "action" explicit_type "int"
	  param inout name "arguments" type class_ref 678924 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 12749836 "performActionForKey"
	package explicit_return_type "boolean"
	nparams 3
	  param inout name "key" type class_ref 3074572 // Key
	  param in name "action" explicit_type "int"
	  param inout name "arguments" type class_ref 678924 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the specified accessibility action for the given key.

@param key The on which to perform the action.
@param action The action to perform.
@param arguments The action's arguments.
@return The result of performing the action, or false if the action is
        not supported."
      end

      operation 12749964 "sendAccessibilityEventForKey"
	package explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 3074572 // Key
	  param in name "eventType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends an accessibility event for the given {@link Key}.

@param key The key that's sending the event.
@param eventType The type of event to send."
      end

      operation 12750092 "getKeyDescription"
	private explicit_return_type "String"
	nparams 1
	  param inout name "key" type class_ref 3074572 // Key
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the context-specific description for a {@link Key}.

@param key The key to describe.
@return The context-specific description of the key."
      end

      operation 12750220 "assignVirtualViewIds"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns virtual view IDs to keyboard keys and populates the related maps."
      end

      operation 12750348 "updateParentLocation"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the parent's on-screen location."
      end

      operation 12750476 "generateVirtualViewIdForKey"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "key" type class_ref 3074572 // Key
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a virtual view identifier for the given key. Returned
identifiers are valid until the next global layout state change.

@param key The key to identify.
@return A virtual view identifier."
      end
    end

    class 3074316 "KeyCodeDescriptionMapper"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 11241484 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " KeyCodeDescriptionMapper.class.getSimpleName()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11241612 "OBSCURED_KEY_RES_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value " R.string.spoken_description_dot"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The resource ID of the string spoken for obscured keys"
      end

      classrelation 5688076 // sInstance (<unidirectional association>)
	relation 5687948 --->
	  a role_name "sInstance" init_value " new KeyCodeDescriptionMapper()" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5688076 // sInstance (<unidirectional association>)
	  b parent class_ref 3074316 // KeyCodeDescriptionMapper
      end

      attribute 11241740 "mKeyLabelMap"
	const_attribute private explicit_type "CharSequence, Integer"
	stereotype "HashMap"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Map of key labels to spoken description resource IDs"
      end

      attribute 11241868 "mKeyCodeMap"
	const_attribute private explicit_type "Integer, Integer"
	stereotype "HashMap"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Map of key codes to spoken description resource IDs"
      end

      operation 12753676 "init"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12753804 "getInstance"
	class_operation public return_type class_ref 3074316 // KeyCodeDescriptionMapper
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12753932 "KeyCodeDescriptionMapper"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12754060 "initInternal"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12754188 "getDescriptionForKey"
	public explicit_return_type "String"
	nparams 4
	  param inout name "context" type class_ref 684812 // Context
	  param inout name "keyboard" type class_ref 3074828 // Keyboard
	  param inout name "key" type class_ref 3074572 // Key
	  param inout name "shouldObscure" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the localized description of the action performed by a specified
key based on the current keyboard state.
<p>
The order of precedence for key descriptions is:
<ol>
<li>Manually-defined based on the key label</li>
<li>Automatic or manually-defined based on the key code</li>
<li>Automatically based on the key label</li>
<li>{code null} for keys with no label or key code defined</li>
</p>

@param context The package's context.
@param keyboard The keyboard on which the key resides.
@param key The key from which to obtain a description.
@param shouldObscure {@true} if text (e.g. non-control) characters should be obscured.
@return a character sequence describing the action performed by pressing
        the key"
      end

      operation 12754316 "getDescriptionForSwitchAlphaSymbol"
	private explicit_return_type "String"
	nparams 2
	  param inout name "context" type class_ref 684812 // Context
	  param inout name "keyboard" type class_ref 3074828 // Keyboard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a context-specific description for the CODE_SWITCH_ALPHA_SYMBOL
key or {@code null} if there is not a description provided for the
current keyboard context.

@param context The package's context.
@param keyboard The keyboard on which the key resides.
@return a character sequence describing the action performed by pressing
        the key"
      end

      operation 12754444 "getDescriptionForShiftKey"
	private explicit_return_type "String"
	nparams 2
	  param inout name "context" type class_ref 684812 // Context
	  param inout name "keyboard" type class_ref 3074828 // Keyboard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a context-sensitive description of the \"Shift\" key.

@param context The package's context.
@param keyboard The keyboard on which the key resides.
@return A context-sensitive description of the \"Shift\" key."
      end

      operation 12754572 "getDescriptionForActionKey"
	private explicit_return_type "String"
	nparams 3
	  param inout name "context" type class_ref 684812 // Context
	  param inout name "keyboard" type class_ref 3074828 // Keyboard
	  param inout name "key" type class_ref 3074572 // Key
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a context-sensitive description of the \"Enter\" action key.

@param context The package's context.
@param keyboard The keyboard on which the key resides.
@param key The key to describe.
@return Returns a context-sensitive description of the \"Enter\" action
        key."
      end

      operation 12754700 "getDescriptionForKeyCode"
	private explicit_return_type "String"
	nparams 4
	  param inout name "context" type class_ref 684812 // Context
	  param inout name "keyboard" type class_ref 3074828 // Keyboard
	  param inout name "key" type class_ref 3074572 // Key
	  param inout name "shouldObscure" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a localized character sequence describing what will happen when
the specified key is pressed based on its key code.
<p>
The order of precedence for key code descriptions is:
<ol>
<li>Manually-defined shift-locked description</li>
<li>Manually-defined shifted description</li>
<li>Manually-defined normal description</li>
<li>Automatic based on the character represented by the key code</li>
<li>Fall-back for undefined or control characters</li>
</ol>
</p>

@param context The package's context.
@param keyboard The keyboard on which the key resides.
@param key The key from which to obtain a description.
@param shouldObscure {@true} if text (e.g. non-control) characters should be obscured.
@return a character sequence describing the action performed by pressing
        the key"
      end
    end

    class 3074444 "AccessibilityUtils"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 11240844 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " AccessibilityUtils.class.getSimpleName()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11240972 "CLASS"
	class_attribute const_attribute private explicit_type "String"
	init_value " AccessibilityUtils.class.getClass().getName()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11241100 "PACKAGE"
	class_attribute const_attribute private explicit_type "String"
	init_value " AccessibilityUtils.class.getClass().getPackage()
            .getName()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5686796 // sInstance (<unidirectional association>)
	relation 5686668 --->
	  a role_name "sInstance" init_value " new AccessibilityUtils()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5686796 // sInstance (<unidirectional association>)
	  b parent class_ref 3074444 // AccessibilityUtils
      end

      classrelation 5686924 // mContext (<unidirectional association>)
	relation 5686796 --->
	  a role_name "mContext" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5686924 // mContext (<unidirectional association>)
	  b parent class_ref 684812 // Context
      end

      classrelation 5687052 // mAccessibilityManager (<unidirectional association>)
	relation 5686924 --->
	  a role_name "mAccessibilityManager" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5687052 // mAccessibilityManager (<unidirectional association>)
	  b parent class_ref 832268 // AccessibilityManager
      end

      classrelation 5687180 // mAudioManager (<unidirectional association>)
	relation 5687052 --->
	  a role_name "mAudioManager" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5687180 // mAudioManager (<unidirectional association>)
	  b parent class_ref 3074956 // AudioManagerCompatWrapper
      end

      attribute 11241228 "ENABLE_ACCESSIBILITY"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Setting this constant to {@code false} will disable all keyboard
accessibility code, regardless of whether Accessibility is turned on in
the system settings. It should ONLY be used in the event of an emergency.
"
      end

      operation 12750604 "init"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "inputMethod" type class_ref 829836 // InputMethodService
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12750732 "getInstance"
	class_operation public return_type class_ref 3074444 // AccessibilityUtils
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12750860 "AccessibilityUtils"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12750988 "initInternal"
	private explicit_return_type "void"
	nparams 1
	  param inout name "context" type class_ref 684812 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12751116 "isTouchExplorationEnabled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if touch exploration is enabled. Currently, this
means that the kill switch is off, the device supports touch exploration,
and a spoken feedback service is turned on.

@return {@code true} if touch exploration is enabled."
      end

      operation 12751244 "isTouchExplorationEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 702092 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@true} if the provided event is a touch exploration (e.g. hover)
event. This is used to determine whether the event should be processed by
the touch exploration code within the keyboard.

@param event The event to check.
@return {@true} is the event is a touch exploration event"
      end

      operation 12751372 "shouldObscureInput"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "editorInfo" type class_ref 702988 // EditorInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the device should obscure typed password characters.
Typically this means speaking \"dot\" in place of non-control characters.

@return {@code true} if the device should obscure password characters."
      end

      operation 12751500 "speak"
	public explicit_return_type "void"
	nparams 1
	  param inout name "text" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends the specified text to the {@link AccessibilityManager} to be
spoken.

@param text the text to speak"
      end

      operation 12751628 "onStartInputViewInternal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "editorInfo" type class_ref 702988 // EditorInfo
	  param inout name "restarting" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles speaking the \"connect a headset to hear passwords\" notification
when connecting to a password field.

@param editorInfo The input connection's editor info attribute.
@param restarting Whether the connection is being restarted."
      end

      operation 12751756 "requestSendAccessibilityEvent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 689164 // AccessibilityEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends the specified {@link AccessibilityEvent} if accessibility is
enabled. No operation if accessibility is disabled.

@param event The event to send."
      end
    end

    class 3075084 "AccessibleKeyboardViewProxy"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5687308 // <generalisation>
	relation 5687180 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5687308 // <generalisation>
	  b parent class_ref 3075212 // AccessibilityDelegateCompat
      end

      classrelation 5687436 // sInstance (<unidirectional association>)
	relation 5687308 --->
	  a role_name "sInstance" init_value " new AccessibleKeyboardViewProxy()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5687436 // sInstance (<unidirectional association>)
	  b parent class_ref 3075084 // AccessibleKeyboardViewProxy
      end

      classrelation 5687564 // mInputMethod (<unidirectional association>)
	relation 5687436 --->
	  a role_name "mInputMethod" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5687564 // mInputMethod (<unidirectional association>)
	  b parent class_ref 829836 // InputMethodService
      end

      classrelation 5687692 // mView (<unidirectional association>)
	relation 5687564 --->
	  a role_name "mView" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5687692 // mView (<unidirectional association>)
	  b parent class_ref 3075340 // LatinKeyboardView
      end

      classrelation 5687820 // mAccessibilityNodeProvider (<unidirectional association>)
	relation 5687692 --->
	  a role_name "mAccessibilityNodeProvider" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5687820 // mAccessibilityNodeProvider (<unidirectional association>)
	  b parent class_ref 3074060 // AccessibilityEntityProvider
      end

      classrelation 5687948 // mLastHoverKey (<unidirectional association>)
	relation 5687820 --->
	  a role_name "mLastHoverKey" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5687948 // mLastHoverKey (<unidirectional association>)
	  b parent class_ref 3074572 // Key
      end

      attribute 11241356 "mEdgeSlop"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Inset in pixels to look for keys when the user's finger exits the
keyboard area. See {@link ViewConfiguration#getScaledEdgeSlop()}.
"
      end

      operation 12751884 "init"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "inputMethod" type class_ref 829836 // InputMethodService
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12752012 "getInstance"
	class_operation public return_type class_ref 3075084 // AccessibleKeyboardViewProxy
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12752140 "AccessibleKeyboardViewProxy"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12752268 "initInternal"
	private explicit_return_type "void"
	nparams 1
	  param inout name "inputMethod" type class_ref 829836 // InputMethodService
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12752396 "setView"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 3075340 // LatinKeyboardView
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the view wrapped by this proxy.

@param view The view to wrap."
      end

      operation 12752524 "setKeyboard"
	public explicit_return_type "void"
	nparams 1
	  param inout name "keyboard" type class_ref 3074828 // Keyboard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12752652 "getAccessibilityNodeProvider"
	public return_type class_ref 3074060 // AccessibilityEntityProvider
	nparams 1
	  param inout name "host" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Proxy method for View.getAccessibilityNodeProvider(). This method is
called in SDK version 15 and higher to obtain the virtual node hierarchy
provider.

@return The accessibility node provider for the current keyboard."
      end

      operation 12752780 "dispatchHoverEvent"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "event" type class_ref 702092 // MotionEvent
	  param inout name "tracker" type class_ref 3075468 // PointerTracker
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives hover events when accessibility is turned on in SDK versions ICS
and higher.

@param event The hover event.
@return {@code true} if the event is handled"
      end

      operation 12752908 "getAccessibilityNodeProvider"
	private return_type class_ref 3074060 // AccessibilityEntityProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return A lazily-instantiated node provider for this view proxy."
      end

      operation 12753036 "pointInView"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "localX" explicit_type "int"
	  param in name "localY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to determine whether the given point, in local
coordinates, is inside the view, where the area of the view is contracted
by the edge slop factor.

@param localX The local x-coordinate.
@param localY The local y-coordinate."
      end

      operation 12753164 "onTransitionKey"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "currentKey" type class_ref 3074572 // Key
	  param inout name "previousKey" type class_ref 3074572 // Key
	  param inout name "event" type class_ref 702092 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Simulates a transition between two {@link Key}s by sending a HOVER_EXIT
on the previous key, a HOVER_ENTER on the current key, and a HOVER_MOVE
on the current key.

@param currentKey The currently hovered key.
@param previousKey The previously hovered key.
@param event The event that triggered the transition.
@return {@code true} if the event was handled."
      end

      operation 12753292 "onHoverKey"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 3074572 // Key
	  param inout name "event" type class_ref 702092 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles a hover event on a key. If {@link Key} extended View, this would
be analogous to calling View.onHoverEvent(MotionEvent).

@param key The currently hovered key.
@param event The hover event.
@return {@code true} if the event was handled."
      end

      operation 12753420 "notifyShiftState"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the user of changes in the keyboard shift state."
      end

      operation 12753548 "notifySymbolsState"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the user of changes in the keyboard symbols state."
      end
    end
  end

  deploymentview 286348 "accessibility"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1185292 "AccessibilityEntityProvider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Rect;
import android.inputmethodservice.InputMethodService;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.accessibility.AccessibilityEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v4.view.accessibility.AccessibilityNodeProviderCompat;
import android.support.v4.view.accessibility.AccessibilityRecordCompat;
import android.util.Log;
import android.util.SparseArray;
import android.view.MotionEvent;
import android.view.View;
import android.view.accessibility.AccessibilityEvent;
import android.view.inputmethod.EditorInfo;
import com.google.tv.inputmethod.keyboard.Key;
import com.google.tv.inputmethod.keyboard.Keyboard;
import com.google.tv.inputmethod.keyboard.KeyboardView;
${definition}"
      associated_classes
	class_ref 3074060 // AccessibilityEntityProvider
      end
      comment "Copyright (C) 2012 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1185420 "AccessibilityUtils"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.inputmethodservice.InputMethodService;
import android.media.AudioManager;
import android.os.SystemClock;
import android.provider.Settings;
import android.util.Log;
import android.view.MotionEvent;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.inputmethod.EditorInfo;
import com.google.tv.inputmethod.compat.AudioManagerCompatWrapper;
import com.google.tv.inputmethod.compat.SettingsSecureCompatUtils;
import com.google.tv.inputmethod.dpadlatin.InputTypeUtils;
import com.google.tv.inputmethod.dpadlatin.R;
${definition}"
      associated_classes
	class_ref 3074444 // AccessibilityUtils
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1185548 "AccessibleKeyboardViewProxy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.inputmethodservice.InputMethodService;
import android.support.v4.view.AccessibilityDelegateCompat;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.accessibility.AccessibilityEventCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewConfiguration;
import com.google.tv.inputmethod.dpadlatin.R;
import com.google.tv.inputmethod.keyboard.Key;
import com.google.tv.inputmethod.keyboard.Keyboard;
import com.google.tv.inputmethod.keyboard.KeyboardId;
import com.google.tv.inputmethod.keyboard.LatinKeyboardView;
import com.google.tv.inputmethod.keyboard.PointerTracker;
${definition}"
      associated_classes
	class_ref 3075084 // AccessibleKeyboardViewProxy
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 1185676 "KeyCodeDescriptionMapper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.text.TextUtils;
import android.util.Log;
import android.view.inputmethod.EditorInfo;
import com.google.tv.inputmethod.dpadlatin.R;
import com.google.tv.inputmethod.keyboard.Key;
import com.google.tv.inputmethod.keyboard.Keyboard;
import com.google.tv.inputmethod.keyboard.KeyboardId;
import java.util.HashMap;
${definition}"
      associated_classes
	class_ref 3074316 // KeyCodeDescriptionMapper
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
