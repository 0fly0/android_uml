class GenericListType
!!!1438988.cpp!!!	CreatorName() : string
    return "android.os.Parcel.arrayListCreator";
!!!1439116.cpp!!!	InstantiableName() : string
    return "java.util.ArrayList" + GenericArguments();
!!!1439244.cpp!!!	WriteToParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, in flags : int) : void
    if (m_creator == STRING_TYPE->CreatorName()) {
        addTo->Add(new MethodCall(parcel, "writeStringList", 1, v));
    } else if (m_creator == IBINDER_TYPE->CreatorName()) {
        addTo->Add(new MethodCall(parcel, "writeBinderList", 1, v));
    } else {
        // parcel.writeTypedListXX(arg);
        addTo->Add(new MethodCall(parcel, "writeTypedList", 1, v));
    }
!!!1439372.cpp!!!	CreateFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    if (m_creator == STRING_TYPE->CreatorName()) {
        addTo->Add(new Assignment(v,
                   new MethodCall(parcel, "createStringArrayList", 0)));
    } else if (m_creator == IBINDER_TYPE->CreatorName()) {
        addTo->Add(new Assignment(v,
                   new MethodCall(parcel, "createBinderArrayList", 0)));
    } else {
        // v = _data.readTypedArrayList(XXX.creator);
        addTo->Add(new Assignment(v,
                   new MethodCall(parcel, "createTypedArrayList", 1,
                   new LiteralExpression(m_creator))));
    }
!!!1439500.cpp!!!	ReadFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    if (m_creator == STRING_TYPE->CreatorName()) {
        addTo->Add(new MethodCall(parcel, "readStringList", 1, v));
    } else if (m_creator == IBINDER_TYPE->CreatorName()) {
        addTo->Add(new MethodCall(parcel, "readBinderList", 1, v));
    } else {
        // v = _data.readTypedList(v, XXX.creator);
        addTo->Add(new MethodCall(parcel, "readTypedList", 2,
                       v,
                       new LiteralExpression(m_creator)));
    }
!!!1439628.cpp!!!	WriteToRpcData(inout addTo : StatementBlock, inout k : Expression, inout v : Variable, inout data : Variable, in flags : int) : void
    Type* generic = GenericArgumentTypes()[0];
    if (generic == RPC_DATA_TYPE) {
        addTo->Add(new MethodCall(data, "putRpcDataList", 2, k, v));
    } else if (generic->RpcCreatorName() != "") {
        addTo->Add(new MethodCall(data, "putFlattenableList", 2, k, v));
    } else {
        addTo->Add(new MethodCall(data, "putList", 2, k, v));
    }
!!!1439756.cpp!!!	CreateFromRpcData(inout addTo : StatementBlock, inout k : Expression, inout v : Variable, inout data : Variable, inout cl : Variable) : void
    Type* generic = GenericArgumentTypes()[0];
    if (generic == RPC_DATA_TYPE) {
        addTo->Add(new Assignment(v, new MethodCall(data, "getRpcDataList", 2, k)));
    } else if (generic->RpcCreatorName() != "") {
        addTo->Add(new Assignment(v, new MethodCall(data, "getFlattenableList", 2, k, 
                        new LiteralExpression(generic->RpcCreatorName()))));
    } else {
        string classArg = GenericArgumentTypes()[0]->QualifiedName();
        classArg += ".class";
        addTo->Add(new Assignment(v, new MethodCall(data, "getList", 2, k,
                        new LiteralExpression(classArg))));
    }
