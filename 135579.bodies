class File
!!!208923.java!!!	File(inout dir : File, inout name : String)
        this(dir == null ? null : dir.getPath(), name);
!!!209051.java!!!	File(inout path : String)
        this.path = fixSlashes(path);
!!!209179.java!!!	File(inout dirPath : String, inout name : String)
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        if (dirPath == null || dirPath.isEmpty()) {
            this.path = fixSlashes(name);
        } else if (name.isEmpty()) {
            this.path = fixSlashes(dirPath);
        } else {
            this.path = fixSlashes(join(dirPath, name));
        }
!!!209307.java!!!	File(inout uri : URI)
        // check pre-conditions
        checkURI(uri);
        this.path = fixSlashes(uri.getPath());
!!!209435.java!!!	fixSlashes(inout origPath : String) : String
        // Remove duplicate adjacent slashes.
        boolean lastWasSlash = false;
        char[] newPath = origPath.toCharArray();
        int length = newPath.length;
        int newLength = 0;
        for (int i = 0; i < length; ++i) {
            char ch = newPath[i];
            if (ch == '/') {
                if (!lastWasSlash) {
                    newPath[newLength++] = separatorChar;
                    lastWasSlash = true;
                }
            } else {
                newPath[newLength++] = ch;
                lastWasSlash = false;
            }
        }
        // Remove any trailing slash (unless this is the root of the file system).
        if (lastWasSlash && newLength > 1) {
            newLength--;
        }
        // Reuse the original string if possible.
        return (newLength != length) ? new String(newPath, 0, newLength) : origPath;
!!!209563.java!!!	join(inout prefix : String, inout suffix : String) : String
        int prefixLength = prefix.length();
        boolean haveSlash = (prefixLength > 0 && prefix.charAt(prefixLength - 1) == separatorChar);
        if (!haveSlash) {
            haveSlash = (suffix.length() > 0 && suffix.charAt(0) == separatorChar);
        }
        return haveSlash ? (prefix + suffix) : (prefix + separatorChar + suffix);
!!!209691.java!!!	checkURI(inout uri : URI) : void
        if (!uri.isAbsolute()) {
            throw new IllegalArgumentException("URI is not absolute: " + uri);
        } else if (!uri.getRawSchemeSpecificPart().startsWith("/")) {
            throw new IllegalArgumentException("URI is not hierarchical: " + uri);
        }
        if (!"file".equals(uri.getScheme())) {
            throw new IllegalArgumentException("Expected file scheme in URI: " + uri);
        }
        String rawPath = uri.getRawPath();
        if (rawPath == null || rawPath.isEmpty()) {
            throw new IllegalArgumentException("Expected non-empty path in URI: " + uri);
        }
        if (uri.getRawAuthority() != null) {
            throw new IllegalArgumentException("Found authority in URI: " + uri);
        }
        if (uri.getRawQuery() != null) {
            throw new IllegalArgumentException("Found query in URI: " + uri);
        }
        if (uri.getRawFragment() != null) {
            throw new IllegalArgumentException("Found fragment in URI: " + uri);
        }
!!!209819.java!!!	listRoots() : File
        return new File[] { new File("/") };
!!!209947.java!!!	canExecute() : boolean
        return doAccess(X_OK);
!!!210075.java!!!	canRead() : boolean
        return doAccess(R_OK);
!!!210203.java!!!	canWrite() : boolean
        return doAccess(W_OK);
!!!210331.java!!!	doAccess(in mode : int) : boolean
        try {
            return Libcore.os.access(path, mode);
        } catch (ErrnoException errnoException) {
            return false;
        }
!!!210459.java!!!	compareTo(inout another : File) : int
        return this.getPath().compareTo(another.getPath());
!!!210587.java!!!	delete() : boolean
        try {
            Libcore.os.remove(path);
            return true;
        } catch (ErrnoException errnoException) {
            return false;
        }
!!!210715.java!!!	deleteOnExit() : void
        DeleteOnExit.getInstance().addFile(getAbsolutePath());
!!!210843.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof File)) {
            return false;
        }
        return path.equals(((File) obj).getPath());
!!!210971.java!!!	exists() : boolean
        return doAccess(F_OK);
!!!211099.java!!!	getAbsolutePath() : String
        if (isAbsolute()) {
            return path;
        }
        String userDir = System.getProperty("user.dir");
        return path.isEmpty() ? userDir : join(userDir, path);
!!!211227.java!!!	getAbsoluteFile() : File
        return new File(getAbsolutePath());
!!!211355.java!!!	getCanonicalPath() : String
        return realpath(getAbsolutePath());
!!!211739.java!!!	getCanonicalFile() : File
        return new File(getCanonicalPath());
!!!211867.java!!!	getName() : String
        int separatorIndex = path.lastIndexOf(separator);
        return (separatorIndex < 0) ? path : path.substring(separatorIndex + 1, path.length());
!!!211995.java!!!	getParent() : String
        int length = path.length(), firstInPath = 0;
        if (separatorChar == '\\' && length > 2 && path.charAt(1) == ':') {
            firstInPath = 2;
        }
        int index = path.lastIndexOf(separatorChar);
        if (index == -1 && firstInPath > 0) {
            index = 2;
        }
        if (index == -1 || path.charAt(length - 1) == separatorChar) {
            return null;
        }
        if (path.indexOf(separatorChar) == index
                && path.charAt(firstInPath) == separatorChar) {
            return path.substring(0, index + 1);
        }
        return path.substring(0, index);
!!!212123.java!!!	getParentFile() : File
        String tempParent = getParent();
        if (tempParent == null) {
            return null;
        }
        return new File(tempParent);
!!!212251.java!!!	getPath() : String
        return path;
!!!212379.java!!!	hashCode() : int
        return getPath().hashCode() ^ 1234321;
!!!212507.java!!!	isAbsolute() : boolean
        return path.length() > 0 && path.charAt(0) == separatorChar;
!!!212635.java!!!	isDirectory() : boolean
        try {
            return S_ISDIR(Libcore.os.stat(path).st_mode);
        } catch (ErrnoException errnoException) {
            // The RI returns false on error. (Even for errors like EACCES or ELOOP.)
            return false;
        }
!!!212763.java!!!	isFile() : boolean
        try {
            return S_ISREG(Libcore.os.stat(path).st_mode);
        } catch (ErrnoException errnoException) {
            // The RI returns false on error. (Even for errors like EACCES or ELOOP.)
            return false;
        }
!!!212891.java!!!	isHidden() : boolean
        if (path.isEmpty()) {
            return false;
        }
        return getName().startsWith(".");
!!!213019.java!!!	lastModified() : long
        try {
            return Libcore.os.stat(path).st_mtime * 1000L;
        } catch (ErrnoException errnoException) {
            // The RI returns 0 on error. (Even for errors like EACCES or ELOOP.)
            return 0;
        }
!!!213147.java!!!	setLastModified(in time : long) : boolean
        if (time < 0) {
            throw new IllegalArgumentException("time < 0");
        }
        return setLastModifiedImpl(path, time);
!!!213403.java!!!	setReadOnly() : boolean
        return setWritable(false, false);
!!!213531.java!!!	setExecutable(inout executable : boolean, inout ownerOnly : boolean) : boolean
        return doChmod(ownerOnly ? S_IXUSR : (S_IXUSR | S_IXGRP | S_IXOTH), executable);
!!!213659.java!!!	setExecutable(inout executable : boolean) : boolean
        return setExecutable(executable, true);
!!!213787.java!!!	setReadable(inout readable : boolean, inout ownerOnly : boolean) : boolean
        return doChmod(ownerOnly ? S_IRUSR : (S_IRUSR | S_IRGRP | S_IROTH), readable);
!!!213915.java!!!	setReadable(inout readable : boolean) : boolean
        return setReadable(readable, true);
!!!214043.java!!!	setWritable(inout writable : boolean, inout ownerOnly : boolean) : boolean
        return doChmod(ownerOnly ? S_IWUSR : (S_IWUSR | S_IWGRP | S_IWOTH), writable);
!!!214171.java!!!	setWritable(inout writable : boolean) : boolean
        return setWritable(writable, true);
!!!214299.java!!!	doChmod(in mask : int, inout set : boolean) : boolean
        try {
            StructStat sb = Libcore.os.stat(path);
            int newMode = set ? (sb.st_mode | mask) : (sb.st_mode & ~mask);
            Libcore.os.chmod(path, newMode);
            return true;
        } catch (ErrnoException errnoException) {
            return false;
        }
!!!214427.java!!!	length() : long
        try {
            return Libcore.os.stat(path).st_size;
        } catch (ErrnoException errnoException) {
            // The RI returns 0 on error. (Even for errors like EACCES or ELOOP.)
            return 0;
        }
!!!214555.java!!!	list() : String
        return listImpl(path);
!!!214811.java!!!	list(inout filter : FilenameFilter) : String
        String[] filenames = list();
        if (filter == null || filenames == null) {
            return filenames;
        }
        List<String> result = new ArrayList<String>(filenames.length);
        for (String filename : filenames) {
            if (filter.accept(this, filename)) {
                result.add(filename);
            }
        }
        return result.toArray(new String[result.size()]);
!!!214939.java!!!	listFiles() : File
        return filenamesToFiles(list());
!!!215067.java!!!	listFiles(inout filter : FilenameFilter) : File
        return filenamesToFiles(list(filter));
!!!215195.java!!!	listFiles(inout filter : FileFilter) : File
        File[] files = listFiles();
        if (filter == null || files == null) {
            return files;
        }
        List<File> result = new ArrayList<File>(files.length);
        for (File file : files) {
            if (filter.accept(file)) {
                result.add(file);
            }
        }
        return result.toArray(new File[result.size()]);
!!!215323.java!!!	filenamesToFiles(inout filenames : String) : File
        if (filenames == null) {
            return null;
        }
        int count = filenames.length;
        File[] result = new File[count];
        for (int i = 0; i < count; ++i) {
            result[i] = new File(this, filenames[i]);
        }
        return result;
!!!215451.java!!!	mkdir() : boolean
        try {
            mkdirErrno();
            return true;
        } catch (ErrnoException errnoException) {
            return false;
        }
!!!215579.java!!!	mkdirErrno() : void
        // On Android, we don't want default permissions to allow global access.
        Libcore.os.mkdir(path, S_IRWXU);
!!!215707.java!!!	mkdirs() : boolean
        return mkdirs(false);
!!!215835.java!!!	mkdirs(inout resultIfExists : boolean) : boolean
        try {
            // Try to create the directory directly.
            mkdirErrno();
            return true;
        } catch (ErrnoException errnoException) {
            if (errnoException.errno == ENOENT) {
                // If the parent was missing, try to create it and then try again.
                File parent = getParentFile();
                return parent != null && parent.mkdirs(true) && mkdir();
            } else if (errnoException.errno == EEXIST) {
                return resultIfExists;
            }
            return false;
        }
!!!215963.java!!!	createNewFile() : boolean
        FileDescriptor fd = null;
        try {
            // On Android, we don't want default permissions to allow global access.
            fd = Libcore.os.open(path, O_RDWR | O_CREAT | O_EXCL, 0600);
            return true;
        } catch (ErrnoException errnoException) {
            if (errnoException.errno == EEXIST) {
                // The file already exists.
                return false;
            }
            throw errnoException.rethrowAsIOException();
        } finally {
            IoUtils.close(fd); // TODO: should we suppress IOExceptions thrown here?
        }
!!!216091.java!!!	createTempFile(inout prefix : String, inout suffix : String) : File
        return createTempFile(prefix, suffix, null);
!!!216219.java!!!	createTempFile(inout prefix : String, inout suffix : String, inout directory : File) : File
        // Force a prefix null check first
        if (prefix.length() < 3) {
            throw new IllegalArgumentException("prefix must be at least 3 characters");
        }
        if (suffix == null) {
            suffix = ".tmp";
        }
        File tmpDirFile = directory;
        if (tmpDirFile == null) {
            String tmpDir = System.getProperty("java.io.tmpdir", ".");
            tmpDirFile = new File(tmpDir);
        }
        File result;
        do {
            result = new File(tmpDirFile, prefix + tempFileRandom.nextInt() + suffix);
        } while (!result.createNewFile());
        return result;
!!!216347.java!!!	renameTo(inout newPath : File) : boolean
        try {
            Libcore.os.rename(path, newPath.path);
            return true;
        } catch (ErrnoException errnoException) {
            return false;
        }
!!!216475.java!!!	toString() : String
        return path;
!!!216603.java!!!	toURI() : URI
        String name = getAbsoluteName();
        try {
            if (!name.startsWith("/")) {
                // start with sep.
                return new URI("file", null, "/" + name, null, null);
            } else if (name.startsWith("//")) {
                return new URI("file", "", name, null); // UNC path
            }
            return new URI("file", null, name, null, null);
        } catch (URISyntaxException e) {
            // this should never happen
            return null;
        }
!!!216731.java!!!	toURL() : URL
        String name = getAbsoluteName();
        if (!name.startsWith("/")) {
            // start with sep.
            return new URL("file", "", -1, "/" + name, null);
        } else if (name.startsWith("//")) {
            return new URL("file:" + name); // UNC path
        }
        return new URL("file", "", -1, name, null);
!!!216859.java!!!	getAbsoluteName() : String
        File f = getAbsoluteFile();
        String name = f.getPath();
        if (f.isDirectory() && name.charAt(name.length() - 1) != separatorChar) {
            // Directories must end with a slash
            name = name + "/";
        }
        if (separatorChar != '/') { // Must convert slashes.
            name = name.replace(separatorChar, '/');
        }
        return name;
!!!216987.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        stream.defaultWriteObject();
        stream.writeChar(separatorChar);
!!!217115.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();
        char inSeparator = stream.readChar();
        this.path = fixSlashes(path.replace(inSeparator, separatorChar));
!!!217243.java!!!	getTotalSpace() : long
        try {
            StructStatFs sb = Libcore.os.statfs(path);
            return sb.f_blocks * sb.f_bsize; // total block count * block size in bytes.
        } catch (ErrnoException errnoException) {
            return 0;
        }
!!!217371.java!!!	getUsableSpace() : long
        try {
            StructStatFs sb = Libcore.os.statfs(path);
            return sb.f_bavail * sb.f_bsize; // non-root free block count * block size in bytes.
        } catch (ErrnoException errnoException) {
            return 0;
        }
!!!217499.java!!!	getFreeSpace() : long
        try {
            StructStatFs sb = Libcore.os.statfs(path);
            return sb.f_bfree * sb.f_bsize; // free block count * block size in bytes.
        } catch (ErrnoException errnoException) {
            return 0;
        }
