class MethodOverridesTest
!!!2771227.java!!!	testName() : void
        Method method = StringBuilder.class.getMethod("append", char.class);
        assertEquals("append", method.getName());
!!!2771355.java!!!	testParameterTypes() : void
        Method method = StringBuilder.class.getMethod("append", char.class);
        assertEquals(Arrays.<Class<?>>asList(char.class),
                Arrays.asList(method.getParameterTypes()));
!!!2771483.java!!!	testDeclaringClass() : void
        Method method = StringBuilder.class.getMethod("append", char.class);
        assertEquals(StringBuilder.class, method.getDeclaringClass());
!!!2771611.java!!!	testReturnType() : void
        Method method = StringBuilder.class.getMethod("append", char.class);
        assertEquals(StringBuilder.class, method.getReturnType());
!!!2771739.java!!!	testThrownExceptions() : void
        Method method = StringBuilder.class.getMethod("append", char.class);
        assertEquals(Collections.<Class<?>>emptyList(), Arrays.asList(method.getExceptionTypes()));
!!!2771867.java!!!	testGetMethodsIncludesInheritedMethods() : void
        Set<String> signatures = signatures(Sub.class.getMethods());
        assertContains(signatures, "void notOverridden[] throws []");
!!!2771995.java!!!	testGetDeclaredMethodsDoesNotIncludeInheritedMethods() : void
        Set<String> signatures = signatures(Sub.class.getDeclaredMethods());
        assertFalse(signatures.contains("void notOverridden[] throws []"));
!!!2772123.java!!!	testGetDeclaringClassReturnsOverridingClass() : void
        assertEquals(Sub.class, Sub.class.getMethod("unchanged").getDeclaringClass());
        assertEquals(Sub.class, Sub.class.getDeclaredMethod("unchanged").getDeclaringClass());
!!!2772251.java!!!	testGetMethodsDoesNotIncludeExceptionChanges() : void
        Set<String> signatures = signatures(Sub.class.getMethods());
        assertContains(signatures, "void thrower[] throws []");
        assertFalse(signatures.contains("void thrower[] throws [java.lang.Exception]"));
        assertEquals(Sub.class, Sub.class.getMethod("thrower").getDeclaringClass());
!!!2772379.java!!!	testGetMethodsIncludesSyntheticMethods() : void
        Set<String> signatures = signatures(Sub.class.getMethods());
        assertContains(signatures, "java.lang.String returner[] throws []");
        assertContains(signatures, "java.lang.Object returner[] throws []");

        Method method = Sub.class.getMethod("returner");
        assertEquals(Sub.class, method.getDeclaringClass());
        assertFalse(method.isSynthetic());
!!!2772507.java!!!	testGetDeclaredMethodsIncludesSyntheticMethods() : void
        Set<String> signatures = signatures(Sub.class.getDeclaredMethods());
        assertContains(signatures, "java.lang.String returner[] throws []");
        assertContains(signatures, "java.lang.Object returner[] throws []");

        Method method = Sub.class.getMethod("returner");
        assertEquals(Sub.class, method.getDeclaringClass());
        assertFalse(method.isSynthetic());
!!!2772635.java!!!	testSubclassChangesVisibility() : void
        Method[] methods = Sub.class.getMethods();
        int count = 0;
        for (Method method : methods) {
            if (signature(method).equals("void visibility[] throws []")) {
                assertEquals(Sub.class, method.getDeclaringClass());
                assertFalse(method.isSynthetic());
                count++;
            }
        }
        assertEquals(1, count);

        Method method = Sub.class.getMethod("visibility");
        assertEquals(Sub.class, method.getDeclaringClass());
        assertFalse(method.isSynthetic());
!!!2772763.java!!!	testMoreVisibleSubclassChangesVisibility() : void
        Method[] methods = PublicSub.class.getMethods();
        int count = 0;
        for (Method method : methods) {
            if (signature(method).equals("void unchanged[] throws []")) {
                assertEquals(PublicSub.class, method.getDeclaringClass());
                assertTrue(method.isSynthetic());
                count++;
            }
        }
        assertEquals(1, count);

        Method method = PublicSub.class.getMethod("unchanged");
        assertEquals(PublicSub.class, method.getDeclaringClass());
        assertTrue(method.isSynthetic());
!!!2774171.java!!!	signature(inout method : Method) : String
        return method.getReturnType().getName() + " " + method.getName()
                + Arrays.toString(method.getParameterTypes())
                + " throws " + Arrays.toString(method.getExceptionTypes());
!!!2774299.java!!!	signatures(inout methods : Method) : Set
        Set<String> signatures = new HashSet<String>();
        for (Method method : methods) {
            signatures.add(signature(method));
        }
        return signatures;
!!!2774427.java!!!	assertContains(inout elements : Collection, inout value : T) : void
        assertTrue("Expected " + value + " in " + elements, elements.contains(value));
