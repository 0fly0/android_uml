class PriorityQueue
!!!1347867.java!!!	PriorityQueue()
        this(DEFAULT_CAPACITY);
!!!1347995.java!!!	PriorityQueue(in initialCapacity : int)
        this(initialCapacity, null);
!!!1348123.java!!!	PriorityQueue(in initialCapacity : int, inout comparator : Comparator)
        if (initialCapacity < 1) {
            throw new IllegalArgumentException("initialCapacity < 1: " + initialCapacity);
        }
        elements = newElementArray(initialCapacity);
        this.comparator = comparator;
!!!1348251.java!!!	PriorityQueue(inout c : Collection)
        if (c instanceof PriorityQueue) {
            getFromPriorityQueue((PriorityQueue<? extends E>) c);
        } else if (c instanceof SortedSet) {
            getFromSortedSet((SortedSet<? extends E>) c);
        } else {
            initSize(c);
            addAll(c);
        }
!!!1348379.java!!!	PriorityQueue(inout c : PriorityQueue)
        getFromPriorityQueue(c);
!!!1348507.java!!!	PriorityQueue(inout c : SortedSet)
        getFromSortedSet(c);
!!!1348635.java!!!	iterator() : Iterator
        return new PriorityIterator();
!!!1348763.java!!!	size() : int
        return size;
!!!1348891.java!!!	clear() : void
        Arrays.fill(elements, null);
        size = 0;
!!!1349019.java!!!	offer(inout o : E) : boolean
        if (o == null) {
            throw new NullPointerException("o == null");
        }
        growToSize(size + 1);
        elements[size] = o;
        siftUp(size++);
        return true;
!!!1349147.java!!!	poll() : E
        if (isEmpty()) {
            return null;
        }
        E result = elements[0];
        removeAt(0);
        return result;
!!!1349275.java!!!	peek() : E
        if (isEmpty()) {
            return null;
        }
        return elements[0];
!!!1349403.java!!!	comparator() : Comparator
        return comparator;
!!!1349531.java!!!	remove(inout o : Object) : boolean
        if (o == null) {
            return false;
        }
        for (int targetIndex = 0; targetIndex < size; targetIndex++) {
            if (o.equals(elements[targetIndex])) {
                removeAt(targetIndex);
                return true;
            }
        }
        return false;
!!!1349659.java!!!	add(inout o : E) : boolean
        return offer(o);
!!!1350171.java!!!	readObject(inout in : ObjectInputStream) : void
        in.defaultReadObject();
        int capacity = in.readInt();
        elements = newElementArray(capacity);
        for (int i = 0; i < size; i++) {
            elements[i] = (E) in.readObject();
        }
!!!1350299.java!!!	newElementArray(in capacity : int) : E
        return (E[]) new Object[capacity];
!!!1350427.java!!!	writeObject(inout out : ObjectOutputStream) : void
        out.defaultWriteObject();
        out.writeInt(elements.length);
        for (int i = 0; i < size; i++) {
            out.writeObject(elements[i]);
        }
!!!1350555.java!!!	getFromPriorityQueue(inout c : PriorityQueue) : void
        initSize(c);
        comparator = (Comparator<? super E>) c.comparator();
        System.arraycopy(c.elements, 0, elements, 0, c.size());
        size = c.size();
!!!1350683.java!!!	getFromSortedSet(inout c : SortedSet) : void
        initSize(c);
        comparator = (Comparator<? super E>) c.comparator();
        Iterator<? extends E> iter = c.iterator();
        while (iter.hasNext()) {
            elements[size++] = iter.next();
        }
!!!1350811.java!!!	removeAt(in index : int) : void
        size--;
        elements[index] = elements[size];
        siftDown(index);
        elements[size] = null;
!!!1350939.java!!!	compare(inout o1 : E, inout o2 : E) : int
        if (comparator != null) {
            return comparator.compare(o1, o2);
        }
        return ((Comparable<? super E>) o1).compareTo(o2);
!!!1351067.java!!!	siftUp(in childIndex : int) : void
        E target = elements[childIndex];
        int parentIndex;
        while (childIndex > 0) {
            parentIndex = (childIndex - 1) / 2;
            E parent = elements[parentIndex];
            if (compare(parent, target) <= 0) {
                break;
            }
            elements[childIndex] = parent;
            childIndex = parentIndex;
        }
        elements[childIndex] = target;
!!!1351195.java!!!	siftDown(in rootIndex : int) : void
        E target = elements[rootIndex];
        int childIndex;
        while ((childIndex = rootIndex * 2 + 1) < size) {
            if (childIndex + 1 < size
                    && compare(elements[childIndex + 1], elements[childIndex]) < 0) {
                childIndex++;
            }
            if (compare(target, elements[childIndex]) <= 0) {
                break;
            }
            elements[rootIndex] = elements[childIndex];
            rootIndex = childIndex;
        }
        elements[rootIndex] = target;
!!!1351323.java!!!	initSize(inout c : Collection) : void
        if (c == null) {
            throw new NullPointerException("c == null");
        }
        if (c.isEmpty()) {
            elements = newElementArray(1);
        } else {
            int capacity = (int) Math.ceil(c.size()
                    * DEFAULT_INIT_CAPACITY_RATIO);
            elements = newElementArray(capacity);
        }
!!!1351451.java!!!	growToSize(in size : int) : void
        if (size > elements.length) {
            E[] newElements = newElementArray(size * DEFAULT_CAPACITY_RATIO);
            System.arraycopy(elements, 0, newElements, 0, elements.length);
            elements = newElements;
        }
