class HTML5VideoView
!!!4881292.java!!!	start() : void
        if (mCurrentState == STATE_PREPARED) {
            // When replaying the same video, there is no onPrepared call.
            // Therefore, the timer should be set up here.
            if (mTimer == null)
            {
                mTimer = new Timer();
                mTimer.schedule(new TimeupdateTask(mProxy), TIMEUPDATE_PERIOD,
                        TIMEUPDATE_PERIOD);
            }
            mPlayer.start();
            setPlayerBuffering(false);
        }
!!!4881420.java!!!	pause() : void
        if (isPlaying()) {
            mPlayer.pause();
        } else if (mCurrentState == STATE_PREPARING) {
            mPauseDuringPreparing = true;
        }
        // Delete the Timer to stop it since there is no stop call.
        if (mTimer != null) {
            mTimer.purge();
            mTimer.cancel();
            mTimer = null;
        }
!!!4881548.java!!!	getDuration() : int
        if (mCurrentState == STATE_PREPARED) {
            return mPlayer.getDuration();
        } else {
            return -1;
        }
!!!4881676.java!!!	getCurrentPosition() : int
        if (mCurrentState == STATE_PREPARED) {
            return mPlayer.getCurrentPosition();
        }
        return 0;
!!!4881804.java!!!	seekTo(in pos : int) : void
        if (mCurrentState == STATE_PREPARED)
            mPlayer.seekTo(pos);
        else
            mSaveSeekTime = pos;
!!!4881932.java!!!	isPlaying() : boolean
        if (mCurrentState == STATE_PREPARED) {
            return mPlayer.isPlaying();
        } else {
            return false;
        }
!!!4882060.java!!!	reset() : void
        if (mCurrentState < STATE_RESETTED) {
            mPlayer.reset();
        }
        mCurrentState = STATE_RESETTED;
!!!4882188.java!!!	stopPlayback() : void
        if (mCurrentState == STATE_PREPARED) {
            mPlayer.stop();
        }
!!!4882316.java!!!	release() : void
        if (mPlayer != null && mCurrentState != STATE_RELEASED) {
            mPlayer.release();
            mPlayer = null;
        }
        mCurrentState = STATE_RELEASED;
!!!4882444.java!!!	isReleased() : boolean
        return mCurrentState == STATE_RELEASED;
!!!4882572.java!!!	getPauseDuringPreparing() : boolean
        return mPauseDuringPreparing;
!!!4882700.java!!!	init(in videoLayerId : int, in position : int, inout skipPrepare : boolean) : void
        if (mPlayer == null) {
            mPlayer = new MediaPlayer();
            mCurrentState = STATE_INITIALIZED;
        }
        mSkipPrepare = skipPrepare;
        // If we want to skip the prepare, then we keep the state.
        if (!mSkipPrepare) {
            mCurrentState = STATE_INITIALIZED;
        }
        mProxy = null;
        mVideoLayerId = videoLayerId;
        mSaveSeekTime = position;
        mTimer = null;
        mPauseDuringPreparing = false;
!!!4882956.java!!!	generateHeaders(in url : String, inout proxy : HTML5VideoViewProxy) : Map<String, String>
        boolean isPrivate = proxy.getWebView().isPrivateBrowsingEnabled();
        String cookieValue = CookieManager.getInstance().getCookie(url, isPrivate);
        Map<String, String> headers = new HashMap<String, String>();
        if (cookieValue != null) {
            headers.put(COOKIE, cookieValue);
        }
        if (isPrivate) {
            headers.put(HIDE_URL_LOGS, "true");
        }

        return headers;
!!!4883084.java!!!	setVideoURI(in uri : String, inout proxy : HTML5VideoViewProxy) : void
        // When switching players, surface texture will be reused.
        mUri = Uri.parse(uri);
        mHeaders = generateHeaders(uri, proxy);
!!!4883212.java!!!	setOnCompletionListener(inout proxy : HTML5VideoViewProxy) : void
        mPlayer.setOnCompletionListener(proxy);
!!!4883340.java!!!	setOnErrorListener(inout proxy : HTML5VideoViewProxy) : void
        mPlayer.setOnErrorListener(proxy);
!!!4883468.java!!!	setOnPreparedListener(inout proxy : HTML5VideoViewProxy) : void
        mProxy = proxy;
        mPlayer.setOnPreparedListener(this);
!!!4883596.java!!!	setOnInfoListener(inout proxy : HTML5VideoViewProxy) : void
        mPlayer.setOnInfoListener(proxy);
!!!4883724.java!!!	prepareDataCommon(inout proxy : HTML5VideoViewProxy) : void
        if (!mSkipPrepare) {
            try {
                mPlayer.reset();
                mPlayer.setDataSource(proxy.getContext(), mUri, mHeaders);
                mPlayer.prepareAsync();
            } catch (IllegalArgumentException e) {
                e.printStackTrace();
            } catch (IllegalStateException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            mCurrentState = STATE_PREPARING;
        } else {
            // If we skip prepare and the onPrepared happened in inline mode, we
            // don't need to call prepare again, we just need to call onPrepared
            // to refresh the state here.
            if (mCurrentState >= STATE_PREPARED) {
                onPrepared(mPlayer);
            }
            mSkipPrepare = false;
        }
!!!4883852.java!!!	reprepareData(inout proxy : HTML5VideoViewProxy) : void
        mPlayer.reset();
        prepareDataCommon(proxy);
!!!4883980.java!!!	prepareDataAndDisplayMode(inout proxy : HTML5VideoViewProxy) : void
        // SurfaceTexture will be created lazily here for inline mode
        decideDisplayMode();

        setOnCompletionListener(proxy);
        setOnPreparedListener(proxy);
        setOnErrorListener(proxy);
        setOnInfoListener(proxy);

        prepareDataCommon(proxy);
!!!4884108.java!!!	getVideoLayerId() : int
        return mVideoLayerId;
!!!4884236.java!!!	getCurrentState() : int
        if (isPlaying()) {
            return STATE_PLAYING;
        } else {
            return mCurrentState;
        }
!!!4884620.java!!!	onPrepared(inout mp : MediaPlayer) : void
        mCurrentState = STATE_PREPARED;
        seekTo(mSaveSeekTime);
        if (mProxy != null) {
            mProxy.onPrepared(mp);
        }
        if (mPauseDuringPreparing) {
            pauseAndDispatch(mProxy);
            mPauseDuringPreparing = false;
        }
!!!4884748.java!!!	pauseAndDispatch(inout proxy : HTML5VideoViewProxy) : void
        pause();
        if (proxy != null) {
            proxy.dispatchOnPaused();
        }
!!!4885004.java!!!	isFullScreenMode() : boolean
        return false;
!!!4885260.java!!!	getReadyToUseSurfTex() : boolean
        return false;
!!!4885516.java!!!	getTextureName() : int
        return 0;
!!!4885644.java!!!	getPlayerBuffering() : boolean
        return mPlayerBuffering;
!!!4885772.java!!!	setPlayerBuffering(inout playerBuffering : boolean) : void
        mPlayerBuffering = playerBuffering;
        switchProgressView(playerBuffering);
!!!4885900.java!!!	switchProgressView(inout playerBuffering : boolean) : void
        // Only used in HTML5VideoFullScreen
!!!4886028.java!!!	fullScreenExited() : boolean
        // Only meaningful for HTML5VideoFullScreen
        return false;
!!!4886156.java!!!	setStartWhenPrepared(inout willPlay : boolean) : void
        mStartWhenPrepared  = willPlay;
!!!4886284.java!!!	getStartWhenPrepared() : boolean
        return mStartWhenPrepared;
