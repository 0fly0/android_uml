class BerlinCore
!!!11144972.cpp!!!	BerlinCore()
  AMP_FACTORY hFactory = NULL;
  AMP_GetFactory(&hFactory);
  if (hFactory == NULL) {
    OMX_LOGD("Initialize amp client");
    MV_OSAL_Init();
    AMP_Initialize(2, client_argv, NULL);
  }
!!!11145100.cpp!!!	~BerlinCore()
  deinit();
!!!11145228.cpp!!!	init() : OMX_ERRORTYPE
  if (mInited == OMX_FALSE) {
    size_t i;
    for (i = 0; i< NELM(gDymamicComponents); i++) {
      ComponentEntry comp_entry;
      comp_entry.libHandle = dlopen(gDymamicComponents[i].libName, RTLD_NOW);
      if (comp_entry.libHandle == NULL) {
        OMX_LOGE("%s", dlerror());
        continue;
      }
      comp_entry.createFunc = (createComponentFunc)dlsym(
          comp_entry.libHandle, "CreateComponentEntry");

      strncpy(comp_entry.name, gDymamicComponents[i].compName,
          OMX_MAX_STRINGNAME_SIZE);
      mComponentVector.push_back(comp_entry);
    }
    mInited = OMX_TRUE;
  }
  return OMX_ErrorNone;
!!!11145356.cpp!!!	deinit() : OMX_ERRORTYPE
  if (mInited == OMX_TRUE) {
    while (!mHandleVector.empty()) {
      vector<OMX_HANDLETYPE>::iterator it;
      OMX_ERRORTYPE result = OMX_ErrorNone;
      it = mHandleVector.begin();
      OMX_LOGD("Free Handle %p", *it);
      result = static_cast<OMX_COMPONENTTYPE *>(*it)->ComponentDeInit(*it);
      delete static_cast<OMX_COMPONENTTYPE *>(*it);
      mHandleVector.erase(it);
    };
    while (!mComponentVector.empty()) {
      vector<ComponentEntry>::iterator it;
      it = mComponentVector.begin();
      if (it->libHandle != NULL) {
        dlclose(it->libHandle);
      }
      mComponentVector.erase(it);
    };
    mInited = OMX_FALSE;
  }
  // MV_OSAL_Exit();
  return OMX_ErrorNone;
!!!11145484.cpp!!!	getHandle(inout handle : OMX_HANDLETYPE, in componentName : OMX_STRING, in appData : OMX_PTR, inout callBacks : OMX_CALLBACKTYPE) : OMX_ERRORTYPE
  OMX_ERRORTYPE result = OMX_ErrorNone;
  if (strncmp(componentName, "OMX", 3)) {
    return OMX_ErrorInvalidComponentName;
  }
  vector<ComponentEntry>::iterator it;

  for (it = mComponentVector.begin(); it < mComponentVector.end(); it++) {
    if (!strcmp(it->name, componentName)) {
      result = it->createFunc(handle, componentName, appData, callBacks);
      mHandleVector.push_back(*handle);
      break;
    }
  }
  if (it == mComponentVector.end()) {
    return OMX_ErrorComponentNotFound;
  }
  return result;
!!!11145612.cpp!!!	freeHandle(in hComponent : OMX_HANDLETYPE) : OMX_ERRORTYPE
  OMX_ERRORTYPE result = OMX_ErrorNone;
  vector<OMX_HANDLETYPE>::iterator it;
  for (it = mHandleVector.begin(); it < mHandleVector.end(); it++) {
    if (*it == hComponent) {
      result = static_cast<OMX_COMPONENTTYPE*>(hComponent)->ComponentDeInit(
          hComponent);
      delete reinterpret_cast<OMX_COMPONENTTYPE *>(hComponent);
      mHandleVector.erase(it);
      break;
    }
  }
  return result;
!!!11145740.cpp!!!	setupTunnel(in hOutput : OMX_HANDLETYPE, in nPortOutput : OMX_U32, in hInput : OMX_HANDLETYPE, in nPortInput : OMX_U32) : OMX_ERRORTYPE
  OMX_ERRORTYPE result = OMX_ErrorNone;
  OMX_COMPONENTTYPE *pOutputComp = static_cast<OMX_COMPONENTTYPE *>(hOutput);
  OMX_COMPONENTTYPE *pInputComp = static_cast<OMX_COMPONENTTYPE *>(hInput);
  OMX_TUNNELSETUPTYPE tunnelSetup;
  tunnelSetup.nTunnelFlags = 0;
  tunnelSetup.eSupplier = OMX_BufferSupplyUnspecified;

  result = pOutputComp->ComponentTunnelRequest(hOutput, nPortOutput, hInput,
      nPortInput, &tunnelSetup);

  if (OMX_ErrorNone != result) {
    return result;
  }

  return pInputComp->ComponentTunnelRequest(hInput, nPortInput, hOutput,
      nPortOutput, &tunnelSetup);
  // return OMX_ErrorNotImplemented;
!!!11145868.cpp!!!	componentNameEnum(in componentName : OMX_STRING, in nameLength : OMX_U32, in index : OMX_U32) : OMX_ERRORTYPE
  if (index >= mComponentVector.size()) {
    return OMX_ErrorNoMore;
  }
  OMX_STRING name = mComponentVector.at(index).name;
  if (nameLength <= strlen(name)) {
    return OMX_ErrorBadParameter;
  } else {
    strncpy(componentName, name, nameLength);
  }
  return OMX_ErrorNone;
!!!11145996.cpp!!!	getComponentsOfRole(in role : OMX_STRING, inout pNumComps : OMX_U32, inout compNames : OMX_U8) : OMX_ERRORTYPE
  OMX_ERRORTYPE result = OMX_ErrorNone;
  vector<ComponentEntry>::iterator it;
  OMX_U32 nNumComps = 0;
  for (it = mComponentVector.begin(); it < mComponentVector.end(); it++) {
    OMX_HANDLETYPE handle;
    result = it->createFunc(&handle, it->name, NULL, NULL);
    if (OMX_ErrorNone != result)
      return result;
    OMX_U32 i;
    OMX_COMPONENTTYPE *comp = reinterpret_cast<OMX_COMPONENTTYPE *>(handle);
    if (compNames == NULL) {
      OMX_ERRORTYPE eError = OMX_ErrorNone;
      OMX_U8 role_ret[OMX_MAX_STRINGNAME_SIZE];
      for (i = 0; OMX_ErrorNoMore != eError; i++) {
        eError = comp->ComponentRoleEnum(handle, role_ret, i);
        if (!strncmp(role, (OMX_STRING)role_ret, OMX_MAX_STRINGNAME_SIZE)) {
          nNumComps++;
          break;
        }
      }
    } else {
      OMX_ERRORTYPE eError = OMX_ErrorNone;
      for (i = 0; OMX_ErrorNoMore != eError ; i++) {
        OMX_U8 role_ret[OMX_MAX_STRINGNAME_SIZE];
        eError = comp->ComponentRoleEnum(handle, role_ret, i);
        if (!strncmp(role, (OMX_STRING)role_ret, OMX_MAX_STRINGNAME_SIZE)) {
          strncpy((OMX_STRING)compNames[nNumComps], it->name,
              OMX_MAX_STRINGNAME_SIZE);
          nNumComps++;
          break;
        }
      }
    }
    result = freeHandle(handle);
    if (compNames != NULL && nNumComps >= *pNumComps) {
      return OMX_ErrorNone;
    }
  }
  *pNumComps = nNumComps;

  return result;
!!!11146124.cpp!!!	getRolesOfComponent(in compName : OMX_STRING, inout pNumRoles : OMX_U32, inout roles : OMX_U8) : OMX_ERRORTYPE
  OMX_ERRORTYPE result = OMX_ErrorNone;
  vector<ComponentEntry>::iterator it;
  for (it = mComponentVector.begin(); it != mComponentVector.end(); it++) {
    if (!strcmp(it->name, compName)) {
      OMX_HANDLETYPE handle;
      result = it->createFunc(&handle, compName, NULL, NULL);
      if (OMX_ErrorNone != result) {
        return result;
      }

      OMX_U32 i;
      OMX_ERRORTYPE eError = OMX_ErrorNone;
      OMX_COMPONENTTYPE *comp = reinterpret_cast<OMX_COMPONENTTYPE *>(handle);
      if (roles == NULL) {
        OMX_U8 role[OMX_MAX_STRINGNAME_SIZE];
        for (i = 0; OMX_ErrorNoMore != eError; i++) {
          eError = comp->ComponentRoleEnum(handle, role, i);
          OMX_LOGV("Role %d, %s, err %x", i, role, eError);
        }
        *pNumRoles = i - 1;
      } else {
        for (i = 0; i < *pNumRoles ; i++) {
          eError = comp->ComponentRoleEnum(handle, roles[i], i);
          OMX_LOGV("Copy Role %d, %s", i, roles[i], eError);
          if (eError == OMX_ErrorNoMore) {
            break;
          }
        }
        *pNumRoles = i;
      }
      OMX_LOGV("Comp %s, has %d roles", compName, *pNumRoles);
      result = static_cast<OMX_COMPONENTTYPE*>(handle)->ComponentDeInit(
          handle);
      delete reinterpret_cast<OMX_COMPONENTTYPE *>(handle);
      break;
    }
  }
  return result;
!!!11146252.cpp!!!	getContentPipe(inout hPipe : OMX_HANDLETYPE, in szURI : OMX_STRING) : OMX_ERRORTYPE
  return OMX_ErrorNotImplemented;
!!!11146380.cpp!!!	teardownTunnel(in hOutput : OMX_HANDLETYPE, in nPortOutput : OMX_U32, in hInput : OMX_HANDLETYPE, in nPortInput : OMX_U32) : OMX_ERRORTYPE
  return OMX_ErrorNone;
!!!11146508.cpp!!!	enumComponentOfRole(in compName : OMX_STRING, in role : OMX_STRING, in nIndex : OMX_U32) : OMX_ERRORTYPE
  return OMX_ErrorNone;
!!!11146636.cpp!!!	enumRoleOfComponent(in role : OMX_STRING, in compName : OMX_STRING, in nIndex : OMX_U32) : OMX_ERRORTYPE
  return OMX_ErrorNone;
