class MVBerlinOMXPlugin
!!!11089036.cpp!!!	MVBerlinOMXPlugin()
    ALOGV("%s %d", __FUNCTION__, __LINE__);

    init();
!!!11089164.cpp!!!	~MVBerlinOMXPlugin()
    ALOGV("%s %d", __FUNCTION__, __LINE__);

    deinit();
!!!11089292.cpp!!!	makeComponentInstance(in name : char, in callbacks : OMX_CALLBACKTYPE, in appData : OMX_PTR, inout component : OMX_COMPONENTTYPE) : OMX_ERRORTYPE
    ALOGV("%s %d", __FUNCTION__, __LINE__);

    if (mLibHandle == NULL) return OMX_ErrorUndefined;

    return (*mGetHandleFunc)(
            reinterpret_cast<OMX_HANDLETYPE *>(component),
            const_cast<char *>(name),
            appData, const_cast<OMX_CALLBACKTYPE *>(callbacks));
!!!11089420.cpp!!!	destroyComponentInstance(inout component : OMX_COMPONENTTYPE) : OMX_ERRORTYPE
    ALOGV("%s %d", __FUNCTION__, __LINE__);
    if (mLibHandle == NULL) return OMX_ErrorUndefined;

    return (*mFreeHandleFunc)(reinterpret_cast<OMX_HANDLETYPE *>(component));
!!!11089548.cpp!!!	enumerateComponents(in name : OMX_STRING, in size : size_t, in index : OMX_U32) : OMX_ERRORTYPE
    ALOGV("%s %d", __FUNCTION__, __LINE__);

    if (mLibHandle == NULL) return OMX_ErrorUndefined;

    return (*mComponentNameEnumFunc)(name, size, index);
!!!11089676.cpp!!!	getRolesOfComponent(in name : char, inout roles : Vector<String8>) : OMX_ERRORTYPE
    ALOGV("%s %d", __FUNCTION__, __LINE__);
    roles->clear();

    if (mLibHandle == NULL) return OMX_ErrorUndefined;

    // Retrieves numRoles only.
    OMX_U32 numRoles;
    OMX_ERRORTYPE err = (*mGetRolesOfComponentHandleFunc)(
            const_cast<OMX_STRING>(name), &numRoles, NULL);

    if (err != OMX_ErrorNone) return err;

    if (numRoles > 0) {
        OMX_U8 **array = new OMX_U8 *[numRoles];
        for (OMX_U32 i = 0; i < numRoles; ++i) {
            array[i] = new OMX_U8[OMX_MAX_STRINGNAME_SIZE];
        }

        // Puts roles in the array.
        OMX_U32 numRoles2 = numRoles;
        err = (*mGetRolesOfComponentHandleFunc)(
                const_cast<OMX_STRING>(name), &numRoles2, array);

        CHECK_EQ(err, OMX_ErrorNone);
        CHECK_EQ(numRoles, numRoles2);

        for (OMX_U32 i = 0; i < numRoles; ++i) {
            String8 s(reinterpret_cast<const char *>(array[i]));
            roles->push(s);

            delete [] array[i];
            array[i] = NULL;
        }

        delete [] array;
        array = NULL;
    }

    return OMX_ErrorNone;
!!!11089804.cpp!!!	setupTunnel(inout outputComponent : OMX_COMPONENTTYPE, in outputPortIndex : OMX_U32, inout inputComponent : OMX_COMPONENTTYPE, in inputPortIndex : OMX_U32) : OMX_ERRORTYPE
    return (*mSetupTunnelFunc)(
            outputComponent, outputPortIndex, inputComponent, inputPortIndex);
!!!11089932.cpp!!!	init() : void
    ALOGV("Loading vendor omx library.");
    if (mLibHandle == NULL) {
        mLibHandle = dlopen("libBerlinCore.so", RTLD_NOW);
    }

    if (mLibHandle == NULL) {
        ALOGE("Error loading libBerlinCore.so");
        return;
    }
    mInitFunc = (InitFunc)dlsym(mLibHandle, "OMX_Init");
    mDeinitFunc = (DeinitFunc)dlsym(mLibHandle, "OMX_Deinit");

    mComponentNameEnumFunc =
            (ComponentNameEnumFunc)dlsym(mLibHandle, "OMX_ComponentNameEnum");

    mGetHandleFunc = (GetHandleFunc)dlsym(mLibHandle, "OMX_GetHandle");
    mFreeHandleFunc = (FreeHandleFunc)dlsym(mLibHandle, "OMX_FreeHandle");

    mGetRolesOfComponentHandleFunc =
            (GetRolesOfComponentFunc)dlsym(mLibHandle,
                                           "OMX_GetRolesOfComponent");

    mSetupTunnelFunc =
            (SetupTunnelFunc)dlsym(mLibHandle,
                                   "OMX_SetupTunnel");

    (*mInitFunc)();
!!!11090060.cpp!!!	deinit() : void
    ALOGV("Unloading vendor omx library.");
    if (mLibHandle != NULL) {
        (*mDeinitFunc)();

        dlclose(mLibHandle);

        mLibHandle = NULL;
    }
