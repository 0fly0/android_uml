class SecondaryTableController
!!!9991436.cpp!!!	SecondaryTableController()
    int i;
    for (i=0; i < INTERFACES_TRACKED; i++) {
        mInterfaceTable[i][0] = 0;
        // TODO - use a hashtable or other prebuilt container class
        mInterfaceRuleCount[i] = 0;
    }
!!!9991692.cpp!!!	addRoute(inout cli : SocketClient, inout iface : char, inout dest : char, in prefix : int, inout gateway : char) : int
    int tableIndex = findTableNumber(iface);
    if (tableIndex == -1) {
        tableIndex = findTableNumber(""); // look for an empty slot
        if (tableIndex == -1) {
            ALOGE("Max number of NATed interfaces reached");
            errno = ENODEV;
            cli->sendMsg(ResponseCode::OperationFailed, "Max number NATed", true);
            return -1;
        }
        strncpy(mInterfaceTable[tableIndex], iface, IFNAMSIZ);
        // Ensure null termination even if truncation happened
        mInterfaceTable[tableIndex][IFNAMSIZ] = 0;
    }

    return modifyRoute(cli, ADD, iface, dest, prefix, gateway, tableIndex);
!!!9991820.cpp!!!	removeRoute(inout cli : SocketClient, inout iface : char, inout dest : char, in prefix : int, inout gateway : char) : int
    int tableIndex = findTableNumber(iface);
    if (tableIndex == -1) {
        ALOGE("Interface not found");
        errno = ENODEV;
        cli->sendMsg(ResponseCode::OperationFailed, "Interface not found", true);
        return -1;
    }

    return modifyRoute(cli, DEL, iface, dest, prefix, gateway, tableIndex);
!!!9991948.cpp!!!	findTableNumber(in iface : char) : int
    int i;
    for (i = 0; i < INTERFACES_TRACKED; i++) {
        // compare through the final null, hence +1
        if (strncmp(iface, mInterfaceTable[i], IFNAMSIZ + 1) == 0) {
            return i;
        }
    }
    return -1;
!!!9992076.cpp!!!	modifyFromRule(in tableIndex : int, in action : char, in addr : char) : int
    char *cmd;

    if (verifyTableIndex(tableIndex)) {
        return -1;
    }
    asprintf(&cmd, "%s %s rule %s from %s table %d", IP_PATH, getVersion(addr),
            action, addr, tableIndex + BASE_TABLE_NUMBER);
    if (runAndFree(NULL, cmd)) {
        return -1;
    }

    modifyRuleCount(tableIndex, action);
    return 0;
!!!9992204.cpp!!!	modifyLocalRoute(in tableIndex : int, in action : char, in iface : char, in addr : char) : int
    char *cmd;

    if (verifyTableIndex(tableIndex)) {
        return -1;
    }

    modifyRuleCount(tableIndex, action); // some del's will fail as the iface is already gone.

    asprintf(&cmd, "%s route %s %s dev %s table %d", IP_PATH, action, addr, iface,
            tableIndex+BASE_TABLE_NUMBER);
    return runAndFree(NULL, cmd);
!!!9992332.cpp!!!	modifyRoute(inout cli : SocketClient, in action : char, inout iface : char, inout dest : char, in prefix : int, inout gateway : char, in tableIndex : int) : int
    char *cmd;

    if (strcmp("::", gateway) == 0) {
        //  IP tool doesn't like "::" - the equiv of 0.0.0.0 that it accepts for ipv4
        asprintf(&cmd, "%s route %s %s/%d dev %s table %d",
                IP_PATH, action, dest, prefix, iface, tableIndex+BASE_TABLE_NUMBER);
    } else {
        asprintf(&cmd, "%s route %s %s/%d via %s dev %s table %d",
                IP_PATH, action, dest, prefix, gateway, iface, tableIndex+BASE_TABLE_NUMBER);
    }

    if (runAndFree(cli, cmd)) {
        ALOGE("ip route %s failed: %s route %s %s/%d via %s dev %s table %d", action,
                IP_PATH, action, dest, prefix, gateway, iface, tableIndex+BASE_TABLE_NUMBER);
        errno = ENODEV;
        cli->sendMsg(ResponseCode::OperationFailed, "ip route modification failed", true);
        return -1;
    }

    if (strcmp(action, ADD) == 0) {
        mInterfaceRuleCount[tableIndex]++;
    } else {
        if (--mInterfaceRuleCount[tableIndex] < 1) {
            mInterfaceRuleCount[tableIndex] = 0;
            mInterfaceTable[tableIndex][0] = 0;
        }
    }
    modifyRuleCount(tableIndex, action);
    cli->sendMsg(ResponseCode::CommandOkay, "Route modified", false);
    return 0;
!!!9992460.cpp!!!	modifyRuleCount(in tableIndex : int, in action : char) : void
    if (strcmp(action, ADD) == 0) {
        mInterfaceRuleCount[tableIndex]++;
    } else {
        if (--mInterfaceRuleCount[tableIndex] < 1) {
            mInterfaceRuleCount[tableIndex] = 0;
            mInterfaceTable[tableIndex][0] = 0;
        }
    }
!!!9992588.cpp!!!	verifyTableIndex(in tableIndex : int) : int
    if ((tableIndex < 0) ||
            (tableIndex >= INTERFACES_TRACKED) ||
            (mInterfaceTable[tableIndex][0] == 0)) {
        return -1;
    } else {
        return 0;
    }
!!!9992716.cpp!!!	getVersion(in addr : char) : char
    if (strchr(addr, ':') != NULL) {
        return "-6";
    } else {
        return "-4";
    }
!!!9992844.cpp!!!	runAndFree(inout cli : SocketClient, inout cmd : char) : int
    int ret = 0;
    if (strlen(cmd) >= 255) {
        if (cli != NULL) {
            ALOGE("ip command (%s) too long", cmd);
            errno = E2BIG;
            cli->sendMsg(ResponseCode::CommandSyntaxError, "Too long", true);
        }
        free(cmd);
        return -1;
    }
    ret = system_nosh(cmd);
    free(cmd);
    return ret;
