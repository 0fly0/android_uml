class ByteArrayBuffer
!!!653595.java!!!	ByteArrayBuffer(inout backingArray : byte)
    this(backingArray.length, backingArray, 0, false);
!!!653723.java!!!	ByteArrayBuffer(in capacity : int, inout backingArray : byte, in arrayOffset : int, inout isReadOnly : boolean)
    super(capacity, null);
    this.backingArray = backingArray;
    this.arrayOffset = arrayOffset;
    this.isReadOnly = isReadOnly;
    if (arrayOffset + capacity > backingArray.length) {
      throw new IndexOutOfBoundsException("backingArray.length=" + backingArray.length +
                                              ", capacity=" + capacity + ", arrayOffset=" + arrayOffset);
    }
!!!653851.java!!!	copy(inout other : ByteArrayBuffer, in markOfOther : int, inout isReadOnly : boolean) : ByteArrayBuffer
    ByteArrayBuffer buf = new ByteArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly);
    buf.limit = other.limit;
    buf.position = other.position();
    buf.mark = markOfOther;
    return buf;
!!!653979.java!!!	asReadOnlyBuffer() : ByteBuffer
    return copy(this, mark, true);
!!!654107.java!!!	compact() : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    System.arraycopy(backingArray, position + arrayOffset, backingArray, arrayOffset, remaining());
    position = limit - position;
    limit = capacity;
    mark = UNSET_MARK;
    return this;
!!!654235.java!!!	duplicate() : ByteBuffer
    return copy(this, mark, isReadOnly);
!!!654363.java!!!	slice() : ByteBuffer
    return new ByteArrayBuffer(remaining(), backingArray, arrayOffset + position, isReadOnly);
!!!654491.java!!!	isReadOnly() : boolean
    return isReadOnly;
!!!654619.java!!!	protectedArray() : byte
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return backingArray;
!!!654747.java!!!	protectedArrayOffset() : int
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return arrayOffset;
!!!654875.java!!!	protectedHasArray() : boolean
    if (isReadOnly) {
      return false;
    }
    return true;
!!!655003.java!!!	get(inout dst : byte, in dstOffset : int, in byteCount : int) : ByteBuffer
    checkGetBounds(1, dst.length, dstOffset, byteCount);
    System.arraycopy(backingArray, arrayOffset + position, dst, dstOffset, byteCount);
    position += byteCount;
    return this;
!!!655131.java!!!	get(inout dst : char, in dstOffset : int, in charCount : int) : void
    int byteCount = checkGetBounds(SizeOf.CHAR, dst.length, dstOffset, charCount);
    Memory.unsafeBulkGet(dst, dstOffset, byteCount, backingArray, arrayOffset + position, SizeOf.CHAR, order.needsSwap);
    position += byteCount;
!!!655259.java!!!	get(inout dst : double, in dstOffset : int, in doubleCount : int) : void
    int byteCount = checkGetBounds(SizeOf.DOUBLE, dst.length, dstOffset, doubleCount);
    Memory.unsafeBulkGet(dst, dstOffset, byteCount, backingArray, arrayOffset + position, SizeOf.DOUBLE, order.needsSwap);
    position += byteCount;
!!!655387.java!!!	get(inout dst : float, in dstOffset : int, in floatCount : int) : void
    int byteCount = checkGetBounds(SizeOf.FLOAT, dst.length, dstOffset, floatCount);
    Memory.unsafeBulkGet(dst, dstOffset, byteCount, backingArray, arrayOffset + position, SizeOf.FLOAT, order.needsSwap);
    position += byteCount;
!!!655515.java!!!	get(inout dst : int, in dstOffset : int, in intCount : int) : void
    int byteCount = checkGetBounds(SizeOf.INT, dst.length, dstOffset, intCount);
    Memory.unsafeBulkGet(dst, dstOffset, byteCount, backingArray, arrayOffset + position, SizeOf.INT, order.needsSwap);
    position += byteCount;
!!!655643.java!!!	get(inout dst : long, in dstOffset : int, in longCount : int) : void
    int byteCount = checkGetBounds(SizeOf.LONG, dst.length, dstOffset, longCount);
    Memory.unsafeBulkGet(dst, dstOffset, byteCount, backingArray, arrayOffset + position, SizeOf.LONG, order.needsSwap);
    position += byteCount;
!!!655771.java!!!	get(inout dst : short, in dstOffset : int, in shortCount : int) : void
    int byteCount = checkGetBounds(SizeOf.SHORT, dst.length, dstOffset, shortCount);
    Memory.unsafeBulkGet(dst, dstOffset, byteCount, backingArray, arrayOffset + position, SizeOf.SHORT, order.needsSwap);
    position += byteCount;
!!!655899.java!!!	get() : byte
    if (position == limit) {
      throw new BufferUnderflowException();
    }
    return backingArray[arrayOffset + position++];
!!!656027.java!!!	get(in index : int) : byte
    checkIndex(index);
    return backingArray[arrayOffset + index];
!!!656155.java!!!	getChar() : char
    int newPosition = position + SizeOf.CHAR;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    char result = (char) Memory.peekShort(backingArray, arrayOffset + position, order);
    position = newPosition;
    return result;
!!!656283.java!!!	getChar(in index : int) : char
    checkIndex(index, SizeOf.CHAR);
    return (char) Memory.peekShort(backingArray, arrayOffset + index, order);
!!!656411.java!!!	getDouble() : double
    return Double.longBitsToDouble(getLong());
!!!656539.java!!!	getDouble(in index : int) : double
    return Double.longBitsToDouble(getLong(index));
!!!656667.java!!!	getFloat() : float
    return Float.intBitsToFloat(getInt());
!!!656795.java!!!	getFloat(in index : int) : float
    return Float.intBitsToFloat(getInt(index));
!!!656923.java!!!	getInt() : int
    int newPosition = position + SizeOf.INT;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    int result = Memory.peekInt(backingArray, arrayOffset + position, order);
    position = newPosition;
    return result;
!!!657051.java!!!	getInt(in index : int) : int
    checkIndex(index, SizeOf.INT);
    return Memory.peekInt(backingArray, arrayOffset + index, order);
!!!657179.java!!!	getLong() : long
    int newPosition = position + SizeOf.LONG;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    long result = Memory.peekLong(backingArray, arrayOffset + position, order);
    position = newPosition;
    return result;
!!!657307.java!!!	getLong(in index : int) : long
    checkIndex(index, SizeOf.LONG);
    return Memory.peekLong(backingArray, arrayOffset + index, order);
!!!657435.java!!!	getShort() : short
    int newPosition = position + SizeOf.SHORT;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    short result = Memory.peekShort(backingArray, arrayOffset + position, order);
    position = newPosition;
    return result;
!!!657563.java!!!	getShort(in index : int) : short
    checkIndex(index, SizeOf.SHORT);
    return Memory.peekShort(backingArray, arrayOffset + index, order);
!!!657691.java!!!	isDirect() : boolean
    return false;
!!!657819.java!!!	put(in b : byte) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (position == limit) {
      throw new BufferOverflowException();
    }
    backingArray[arrayOffset + position++] = b;
    return this;
!!!657947.java!!!	put(in index : int, in b : byte) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index);
    backingArray[arrayOffset + index] = b;
    return this;
!!!658075.java!!!	put(inout src : byte, in srcOffset : int, in byteCount : int) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkPutBounds(1, src.length, srcOffset, byteCount);
    System.arraycopy(src, srcOffset, backingArray, arrayOffset + position, byteCount);
    position += byteCount;
    return this;
!!!658203.java!!!	put(inout src : char, in srcOffset : int, in charCount : int) : void
    int byteCount = checkPutBounds(SizeOf.CHAR, src.length, srcOffset, charCount);
    Memory.unsafeBulkPut(backingArray, arrayOffset + position, byteCount, src, srcOffset, SizeOf.CHAR, order.needsSwap);
    position += byteCount;
!!!658331.java!!!	put(inout src : double, in srcOffset : int, in doubleCount : int) : void
    int byteCount = checkPutBounds(SizeOf.DOUBLE, src.length, srcOffset, doubleCount);
    Memory.unsafeBulkPut(backingArray, arrayOffset + position, byteCount, src, srcOffset, SizeOf.DOUBLE, order.needsSwap);
    position += byteCount;
!!!658459.java!!!	put(inout src : float, in srcOffset : int, in floatCount : int) : void
    int byteCount = checkPutBounds(SizeOf.FLOAT, src.length, srcOffset, floatCount);
    Memory.unsafeBulkPut(backingArray, arrayOffset + position, byteCount, src, srcOffset, SizeOf.FLOAT, order.needsSwap);
    position += byteCount;
!!!658587.java!!!	put(inout src : int, in srcOffset : int, in intCount : int) : void
    int byteCount = checkPutBounds(SizeOf.INT, src.length, srcOffset, intCount);
    Memory.unsafeBulkPut(backingArray, arrayOffset + position, byteCount, src, srcOffset, SizeOf.INT, order.needsSwap);
    position += byteCount;
!!!658715.java!!!	put(inout src : long, in srcOffset : int, in longCount : int) : void
    int byteCount = checkPutBounds(SizeOf.LONG, src.length, srcOffset, longCount);
    Memory.unsafeBulkPut(backingArray, arrayOffset + position, byteCount, src, srcOffset, SizeOf.LONG, order.needsSwap);
    position += byteCount;
!!!658843.java!!!	put(inout src : short, in srcOffset : int, in shortCount : int) : void
    int byteCount = checkPutBounds(SizeOf.SHORT, src.length, srcOffset, shortCount);
    Memory.unsafeBulkPut(backingArray, arrayOffset + position, byteCount, src, srcOffset, SizeOf.SHORT, order.needsSwap);
    position += byteCount;
!!!658971.java!!!	putChar(in index : int, in value : char) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.CHAR);
    Memory.pokeShort(backingArray, arrayOffset + index, (short) value, order);
    return this;
!!!659099.java!!!	putChar(in value : char) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.CHAR;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    Memory.pokeShort(backingArray, arrayOffset + position, (short) value, order);
    position = newPosition;
    return this;
!!!659227.java!!!	putDouble(in value : double) : ByteBuffer
    return putLong(Double.doubleToRawLongBits(value));
!!!659355.java!!!	putDouble(in index : int, in value : double) : ByteBuffer
    return putLong(index, Double.doubleToRawLongBits(value));
!!!659483.java!!!	putFloat(in value : float) : ByteBuffer
    return putInt(Float.floatToRawIntBits(value));
!!!659611.java!!!	putFloat(in index : int, in value : float) : ByteBuffer
    return putInt(index, Float.floatToRawIntBits(value));
!!!659739.java!!!	putInt(in value : int) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.INT;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    Memory.pokeInt(backingArray, arrayOffset + position, value, order);
    position = newPosition;
    return this;
!!!659867.java!!!	putInt(in index : int, in value : int) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.INT);
    Memory.pokeInt(backingArray, arrayOffset + index, value, order);
    return this;
!!!659995.java!!!	putLong(in index : int, in value : long) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.LONG);
    Memory.pokeLong(backingArray, arrayOffset + index, value, order);
    return this;
!!!660123.java!!!	putLong(in value : long) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.LONG;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    Memory.pokeLong(backingArray, arrayOffset + position, value, order);
    position = newPosition;
    return this;
!!!660251.java!!!	putShort(in index : int, in value : short) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.SHORT);
    Memory.pokeShort(backingArray, arrayOffset + index, value, order);
    return this;
!!!660379.java!!!	putShort(in value : short) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.SHORT;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    Memory.pokeShort(backingArray, arrayOffset + position, value, order);
    position = newPosition;
    return this;
!!!660507.java!!!	asCharBuffer() : CharBuffer
    return ByteBufferAsCharBuffer.asCharBuffer(this);
!!!660635.java!!!	asDoubleBuffer() : DoubleBuffer
    return ByteBufferAsDoubleBuffer.asDoubleBuffer(this);
!!!660763.java!!!	asFloatBuffer() : FloatBuffer
    return ByteBufferAsFloatBuffer.asFloatBuffer(this);
!!!660891.java!!!	asIntBuffer() : IntBuffer
    return ByteBufferAsIntBuffer.asIntBuffer(this);
!!!661019.java!!!	asLongBuffer() : LongBuffer
    return ByteBufferAsLongBuffer.asLongBuffer(this);
!!!661147.java!!!	asShortBuffer() : ShortBuffer
    return ByteBufferAsShortBuffer.asShortBuffer(this);
