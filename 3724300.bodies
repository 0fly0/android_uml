class SurfaceControl
!!!15821324.java!!!	SurfaceControl(inout session : SurfaceSession, inout name : String, in w : int, in h : int, in format : int, in flags : int)
        if (session == null) {
            throw new IllegalArgumentException("session must not be null");
        }
        if (name == null) {
            throw new IllegalArgumentException("name must not be null");
        }

        if ((flags & SurfaceControl.HIDDEN) == 0) {
            Log.w(TAG, "Surfaces should always be created with the HIDDEN flag set "
                    + "to ensure that they are not made visible prematurely before "
                    + "all of the surface's properties have been configured.  "
                    + "Set the other properties and make the surface visible within "
                    + "a transaction.  New surface name: " + name,
                    new Throwable());
        }

        checkHeadless();

        mName = name;
        mNativeObject = nativeCreate(session, name, w, h, format, flags);
        if (mNativeObject == 0) {
            throw new OutOfResourcesException(
                    "Couldn't allocate SurfaceControl native object");
        }
        
        mCloseGuard.open("release");
!!!15821452.java!!!	finalize() : void
        try {
            if (mCloseGuard != null) {
                mCloseGuard.warnIfOpen();
            }
            if (mNativeObject != 0) {
                nativeRelease(mNativeObject);
            }
        } finally {
            super.finalize();
        }
!!!15821580.java!!!	toString() : String
        return "Surface(name=" + mName + ")";
!!!15821708.java!!!	release() : void
        if (mNativeObject != 0) {
            nativeRelease(mNativeObject);
            mNativeObject = 0;
        }
        mCloseGuard.close();
!!!15821836.java!!!	destroy() : void
        if (mNativeObject != 0) {
            nativeDestroy(mNativeObject);
            mNativeObject = 0;
        }
        mCloseGuard.close();
!!!15821964.java!!!	checkNotReleased() : void
        if (mNativeObject == 0) throw new NullPointerException(
                "mNativeObject is null. Have you called release() already?");
!!!15822092.java!!!	openTransaction() : void
        nativeOpenTransaction();
!!!15822220.java!!!	closeTransaction() : void
        nativeCloseTransaction();
!!!15822348.java!!!	setAnimationTransaction() : void
        nativeSetAnimationTransaction();
!!!15822476.java!!!	setLayer(in zorder : int) : void
        checkNotReleased();
        nativeSetLayer(mNativeObject, zorder);
!!!15822604.java!!!	setPosition(in x : float, in y : float) : void
        checkNotReleased();
        nativeSetPosition(mNativeObject, x, y);
!!!15822732.java!!!	setSize(in w : int, in h : int) : void
        checkNotReleased();
        nativeSetSize(mNativeObject, w, h);
!!!15822860.java!!!	hide() : void
        checkNotReleased();
        nativeSetFlags(mNativeObject, SURFACE_HIDDEN, SURFACE_HIDDEN);
!!!15822988.java!!!	show() : void
        checkNotReleased();
        nativeSetFlags(mNativeObject, 0, SURFACE_HIDDEN);
!!!15823116.java!!!	setTransparentRegionHint(inout region : Region) : void
        checkNotReleased();
        nativeSetTransparentRegionHint(mNativeObject, region);
!!!15823244.java!!!	setAlpha(in alpha : float) : void
        checkNotReleased();
        nativeSetAlpha(mNativeObject, alpha);
!!!15823372.java!!!	setMatrix(in dsdx : float, in dtdx : float, in dsdy : float, in dtdy : float) : void
        checkNotReleased();
        nativeSetMatrix(mNativeObject, dsdx, dtdx, dsdy, dtdy);
!!!15823500.java!!!	setFlags(in flags : int, in mask : int) : void
        checkNotReleased();
        nativeSetFlags(mNativeObject, flags, mask);
!!!15823628.java!!!	setWindowCrop(inout crop : Rect) : void
        checkNotReleased();
        if (crop != null) {
            nativeSetWindowCrop(mNativeObject, 
                crop.left, crop.top, crop.right, crop.bottom);
        } else {
            nativeSetWindowCrop(mNativeObject, 0, 0, 0, 0);
        }
!!!15823756.java!!!	setLayerStack(in layerStack : int) : void
        checkNotReleased();
        nativeSetLayerStack(mNativeObject, layerStack);
!!!15824780.java!!!	unblankDisplay(inout displayToken : IBinder) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeUnblankDisplay(displayToken);
!!!15824908.java!!!	blankDisplay(inout displayToken : IBinder) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeBlankDisplay(displayToken);
!!!15825036.java!!!	getDisplayInfo(inout displayToken : IBinder, inout outInfo : PhysicalDisplayInfo) : boolean
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        if (outInfo == null) {
            throw new IllegalArgumentException("outInfo must not be null");
        }
        return nativeGetDisplayInfo(displayToken, outInfo);
!!!15825164.java!!!	setDisplayProjection(inout displayToken : IBinder, in orientation : int, inout layerStackRect : Rect, inout displayRect : Rect) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        if (layerStackRect == null) {
            throw new IllegalArgumentException("layerStackRect must not be null");
        }
        if (displayRect == null) {
            throw new IllegalArgumentException("displayRect must not be null");
        }
        nativeSetDisplayProjection(displayToken, orientation,
                layerStackRect.left, layerStackRect.top, layerStackRect.right, layerStackRect.bottom, 
                displayRect.left, displayRect.top, displayRect.right, displayRect.bottom);
!!!15825292.java!!!	setDisplayLayerStack(inout displayToken : IBinder, in layerStack : int) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeSetDisplayLayerStack(displayToken, layerStack);
!!!15825420.java!!!	setDisplaySurface(inout displayToken : IBinder, inout surface : Surface) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }

        if (surface != null) {
            synchronized (surface.mLock) {
                nativeSetDisplaySurface(displayToken, surface.mNativeSurface);
            }
        } else {
            nativeSetDisplaySurface(displayToken, 0);
        }
!!!15825548.java!!!	createDisplay(inout name : String, inout secure : boolean) : IBinder
        if (name == null) {
            throw new IllegalArgumentException("name must not be null");
        }
        return nativeCreateDisplay(name, secure);
!!!15825676.java!!!	getBuiltInDisplay(in builtInDisplayId : int) : IBinder
        return nativeGetBuiltInDisplay(builtInDisplayId);
!!!15825804.java!!!	screenshot(inout display : IBinder, inout consumer : Surface, in width : int, in height : int, in minLayer : int, in maxLayer : int) : void
        screenshot(display, consumer, width, height, minLayer, maxLayer, false);
!!!15825932.java!!!	screenshot(inout display : IBinder, inout consumer : Surface, in width : int, in height : int) : void
        screenshot(display, consumer, width, height, 0, 0, true);
!!!15826060.java!!!	screenshot(inout display : IBinder, inout consumer : Surface) : void
        screenshot(display, consumer, 0, 0, 0, 0, true);
!!!15826188.java!!!	screenshot(in width : int, in height : int, in minLayer : int, in maxLayer : int) : Bitmap
        // TODO: should take the display as a parameter
        IBinder displayToken = SurfaceControl.getBuiltInDisplay(
                SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN);
        return nativeScreenshot(displayToken, width, height, minLayer, maxLayer, false);
!!!15826316.java!!!	screenshot(in width : int, in height : int) : Bitmap
        // TODO: should take the display as a parameter
        IBinder displayToken = SurfaceControl.getBuiltInDisplay(
                SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN);
        return nativeScreenshot(displayToken, width, height, 0, 0, true);
!!!15826444.java!!!	screenshot(inout display : IBinder, inout consumer : Surface, in width : int, in height : int, in minLayer : int, in maxLayer : int, inout allLayers : boolean) : void
        if (display == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        if (consumer == null) {
            throw new IllegalArgumentException("consumer must not be null");
        }
        nativeScreenshot(display, consumer, width, height, minLayer, maxLayer, allLayers);
!!!15826572.java!!!	checkHeadless() : void
        if (HEADLESS) {
            throw new UnsupportedOperationException("Device is headless");
        }
