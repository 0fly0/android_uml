class AmpAudioPlayer
!!!10919564.cpp!!!	AmpAudioPlayer()
    uint32_t sampleRate = AmpAudioOutputCapacity::sampleRate();
    uint32_t channelCount = AmpAudioOutputCapacity::channelCount();
    audio_format_t audioFormat = AmpAudioOutputCapacity::audioFormat();
    SLOGD("Amp Audio Format: sampleRate=%u, channelNum=%u, audioFormat=%u",
          sampleRate, channelCount, audioFormat);

    mTrack = new AmpAudioTrack(sampleRate, channelCount, audioFormat);
    if (mTrack->initCheck() != NO_ERROR) {
        SLOGE("Failed to init AmpAudioTrack");
        mTrack.clear();
        mTrack = NULL;
        return;
    }

    if (pipe(mCtrl) < 0) {
        SLOGE("pipe error : (%s)", strerror(errno));
        goto error_exit;
    }

    if (pthread_create(&mThread, NULL, threadStart, this)) {
        SLOGE("pthread_create error : (%s)", strerror(errno));
        goto error_exit;
    }

    mStatus = NO_ERROR;
    return;
error_exit:
    if (mCtrl[0] > -1) {
        close(mCtrl[0]);
        close(mCtrl[1]);
        mCtrl[0] = mCtrl[1] = -1;
    }
    if (mTrack != NULL) {
        mTrack.clear();
        mTrack = NULL;
    }
!!!10919692.cpp!!!	~AmpAudioPlayer()
    if (mStatus == NO_ERROR) {
        quit();
        mTrack.clear();
    }
!!!10919948.cpp!!!	play() : status_t
    if (mStatus != NO_ERROR)
        return mStatus;
    int cmd = AP_START;
    write(mCtrl[1], &cmd, sizeof(cmd));
    return NO_ERROR;
!!!10920076.cpp!!!	stop() : status_t
    if (mStatus != NO_ERROR)
        return mStatus;
    int cmd = AP_STOP;
    write(mCtrl[1], &cmd, sizeof(cmd));
    return NO_ERROR;
!!!10920204.cpp!!!	threadStart(inout obj : void) : void
    AmpAudioLoopbackService::AmpAudioPlayer *self =
            reinterpret_cast<AmpAudioLoopbackService::AmpAudioPlayer *>(obj);
    self->run();
    pthread_exit(NULL);
    return NULL;
!!!10920332.cpp!!!	run() : void
    struct pollfd pfd;
    int n, cmd, status = AUDIOTRACK_STOP;
    int timeout;
    while (true) {
        pfd.fd = mCtrl[0];
        pfd.events = POLLIN;
        pfd.revents = 0;
        timeout = (status == AUDIOTRACK_STOP) ? -1 : 200;
        n = TEMP_FAILURE_RETRY(poll(&pfd, 1, timeout));
        if (n < 0) {
            SLOGE("poll error : (%s)", strerror(errno));
            sleep(1);
            continue;
        } else if (n == 0) {
            if (status == AUDIOTRACK_PLAYING) {
                if (mTrack->peek() != NO_ERROR) {
                    SLOGE("Fatal exception: receiver stopped unexpectedly");
                    mTrack->stop();
                    status = AUDIOTRACK_STOP;
                    break;
                }
            }
            continue;
        }
        read(mCtrl[0], &cmd, sizeof(cmd));
        switch (cmd) {
        case AP_START:
            if (status == AUDIOTRACK_PLAYING)
                break;
            if (mTrack->play() != NO_ERROR)
                break;
            status = AUDIOTRACK_PLAYING;
            break;
        case AP_STOP:
        case AP_EXIT:
            if (status == AUDIOTRACK_STOP)
                break;
            if (mTrack->stop() != NO_ERROR)
                break;
            status = AUDIOTRACK_STOP;
            break;
        }
        if (cmd == AP_EXIT) {
            SLOGE("Receive EXIT cmd");
            break;
        }
    }
    SLOGD("AmpAudioPlayer exiting...");
!!!10920460.cpp!!!	quit() : void
    int cmd = AP_EXIT;
    write(mCtrl[1], &cmd, sizeof(cmd));
    void *ret;
    pthread_join(mThread, &ret);
    close(mCtrl[0]);
    close(mCtrl[1]);
    mCtrl[0] = mCtrl[1] = -1;
