class NetflixMainActivity
!!!12636428.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        startNetflix(getIntent());
!!!12636556.java!!!	onNewIntent(inout newIntent : Intent) : void
        // Kill existing netflix webapp and start webapp with new url.
        finishActivity(WEBAPP_REQUEST_CODE);
        unregisterAppInDialLauncher();
        setIntent(newIntent);
        startNetflix(newIntent);
!!!12636684.java!!!	startNetflix(inout intent : Intent) : void
        if (FileUtil.isCacheEmpty(this)) {
            // The webapp activity already present in the memory, when recycled, cannot deal
            // with the cleared cache well, and eventually hangs in the middle. Kill the instance
            // if we want to launch Netflix after clearing the cache.
            killWebappActivity(this);
        }

        if (NetflixUrl.isFromDial(intent)) {
            int appId = NetflixUrl.getDialAppId(intent);
            if (appId == DIAL_INVALID_APP_ID) {
                Log.e(TAG, "App id should be specified.");
                finish();
                return;
            }
            mHandler = createDialHandler();
            mServiceConnection = createDialServiceConnection(appId);
            registerAppInDialLauncher();
        }

        Log.v(TAG, "startNetflix() called with intent of " + intent);
        Uri netflixUrl = NetflixUrl.generate(this, intent);
        Log.v(TAG, "load Netflix with page of " + netflixUrl);
        startActivityForResult(getWebappIntent(netflixUrl), WEBAPP_REQUEST_CODE);
        showToast(getResources().getString(R.string.netflix_no_mouse_support_message));
!!!12636812.java!!!	registerAppInDialLauncher() : void
        Intent launcherIntent = new Intent();
        launcherIntent.setComponent(
                new ComponentName(DIAL_SERVICE_PACKAGE_NAME, DIAL_SERVICE_CLASS));
        bindService(launcherIntent, mServiceConnection, BIND_AUTO_CREATE);
!!!12636940.java!!!	createDialServiceConnection(in appIdFromIntent : int) : ServiceConnection
        return new ServiceConnection() {
            @Override
            public void onServiceConnected(ComponentName name, IBinder service) {
                mDialService = IDialLaunchService.Stub.asInterface(service);
                mDialMessenger = new Messenger(mHandler);

                try {
                    if (mAppId != null) {
                        // Unregister dial app first.
                        mDialService.unregisterApp(mAppId);
                        stopWebapp();
                    }
                    mAppId = appIdFromIntent;
                    mDialService.registerApp(mAppId, mDialMessenger.getBinder());
                } catch (RemoteException e) {
                    Log.e(TAG, "Failed to register app on DIALLauncher.");
                    NetflixMainActivity.this.finishDialConnection();
                    NetflixMainActivity.this.finish();
                }
            }

            @Override
            public void onServiceDisconnected(ComponentName name) {
                NetflixMainActivity.this.finishDialConnection();
                NetflixMainActivity.this.finish();
            }
        };
!!!12637324.java!!!	finishDialConnection() : void
        mDialService = null;
        mDialMessenger = null;
        mAppId = null;
!!!12637452.java!!!	stopWebapp() : void
        finishActivity(WEBAPP_REQUEST_CODE);
        finish();
!!!12637580.java!!!	createDialHandler() : Handler
        return new DialHandler(this);
!!!12637708.java!!!	onDestroy() : void
        destoryDialService();
        super.onDestroy();
!!!12637836.java!!!	destoryDialService() : void
        unregisterAppInDialLauncher();
        if (mServiceConnection != null) {
            unbindService(mServiceConnection);
            mServiceConnection = null;
            mHandler = null;
        }
!!!12637964.java!!!	unregisterAppInDialLauncher() : void
        if (mServiceConnection == null || mAppId == null) {
            return;
        }
        try {
            mDialService.unregisterApp(mAppId);
        } catch (RemoteException e) {
            Log.e(TAG, "Failed to unregister Netflix.");
        }
        finishDialConnection();
!!!12638092.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        Log.v(TAG, String.format("onActivityResult: requestCode(%d), resultCode(%d)",
                requestCode, resultCode));
        if (requestCode == WEBAPP_REQUEST_CODE) {
            if (resultCode != RESULT_OK && resultCode != RESULT_CANCELED) {
                showErrorPage();
                return;
            }
            // Note that if OOM happens while playing video, activity manager
            // restarts activity before onActivityResult is called.
            // In this case we need to kill started activity here.
            finishActivity(WEBAPP_REQUEST_CODE);
        } else if (requestCode == ERROR_REQUEST_CODE) {
            if (resultCode == RESULT_OK) {
                startNetflix(getIntent());
                return;
            }
            // Fall through to finish activity.
        }
        finish();
        super.onActivityResult(requestCode, resultCode, data);
!!!12638220.java!!!	showErrorPage() : void
        Intent intent = new Intent();
        intent.setClass(this, ErrorActivity.class);
        startActivityForResult(intent, ERROR_REQUEST_CODE);
!!!12638348.java!!!	killWebappActivity(inout activity : Activity) : void
        ActivityManager am = (ActivityManager) activity.getSystemService(Activity.ACTIVITY_SERVICE);
        am.killBackgroundProcesses(WEBAPP_PACKAGE_NAME);
!!!12638476.java!!!	getWebappIntent(inout netflixUri : Uri) : Intent
        Intent sendIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(WEBAPP_SCHEMA_URI));
        sendIntent.putExtra(Browser.EXTRA_APPLICATION_ID, WEB_APPLICATION_ID);
        sendIntent.putExtra(OPTION_FULL_SCREEN, "1");
        sendIntent.putExtra(OPTION_URL, netflixUri.toString());
        sendIntent.putExtra(OPTION_CUSTOM_KEYCODES_MAPPING, KEY_MAPPING);
        sendIntent.putExtra(OPTION_POINTER_STYLE, POINTER_STYLE_NULL);
        if (NetflixUrl.isFromDial(getIntent())) {
            sendIntent.putExtra(WEBAPP_LAUNCHED_FROM_CAST_KEY, true);
        }
        if (FileUtil.isCacheEmpty(this)) {
            // Clear cache was performed. Passes the corresponding flag.
            sendIntent.putExtra(OPTION_CLEAR_CACHE, true);
        }
        FileUtil.createDataFlagFile(this);
        FileUtil.createDummyCacheEntry(this);
        return sendIntent;
!!!12638604.java!!!	showToast(inout message : CharSequence) : void
        Toast toast = Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG);
        toast.setGravity(Gravity.TOP, 0, 0);
        toast.show();
