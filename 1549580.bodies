class DependencyVisitor
!!!9571084.java!!!	DependencyVisitor(inout zipClasses : Map<String, ClassReader>, inout inKeep : Map<String, ClassReader>, inout outKeep : Map<String, ClassReader>, inout inDeps : Map<String,ClassReader>, inout outDeps : Map<String,ClassReader>)
            super(Opcodes.ASM4);
            mZipClasses = zipClasses;
            mInKeep = inKeep;
            mOutKeep = outKeep;
            mInDeps = inDeps;
            mOutDeps = outDeps;
!!!9571212.java!!!	considerName(in className : String) : void
            if (className == null) {
                return;
            }

            className = internalToBinaryClassName(className);

            // exclude classes that have already been found
            if (mInKeep.containsKey(className) ||
                    mOutKeep.containsKey(className) ||
                    mInDeps.containsKey(className) ||
                    mOutDeps.containsKey(className)) {
                return;
            }

            // exclude classes that are not part of the JAR file being examined
            ClassReader cr = mZipClasses.get(className);
            if (cr == null) {
                return;
            }

            try {
                // exclude classes that are part of the default JRE (the one executing this program)
                if (getClass().getClassLoader().loadClass(className) != null) {
                    return;
                }
            } catch (ClassNotFoundException e) {
                // ignore
            }

            // accept this class:
            // - android classes are added to dependencies
            // - non-android classes are added to the list of classes to keep as-is (they don't need
            //   to be stubbed).
            if (className.indexOf("android") >= 0) {  // TODO make configurable
                mOutDeps.put(className, cr);
            } else {
                mOutKeep.put(className, cr);
            }
!!!9571340.java!!!	considerNames(inout classNames : String) : void
            if (classNames != null) {
                for (String className : classNames) {
                    considerName(className);
                }
            }
!!!9571468.java!!!	considerSignature(in signature : String) : void
            if (signature != null) {
                SignatureReader sr = new SignatureReader(signature);
                // SignatureReader.accept will call accessType so we don't really have
                // to differentiate where the signature comes from.
                sr.accept(new MySignatureVisitor());
            }
!!!9571596.java!!!	considerType(inout t : Type) : void
            if (t != null) {
                if (t.getSort() == Type.ARRAY) {
                    t = t.getElementType();
                }
                if (t.getSort() == Type.OBJECT) {
                    considerName(t.getInternalName());
                }
            }
!!!9571724.java!!!	considerDesc(in desc : String) : void
            if (desc != null) {
                try {
                    Type t = Type.getType(desc);
                    considerType(t);
                } catch (ArrayIndexOutOfBoundsException e) {
                    // ignore, not a valid type.
                }
            }
!!!9571852.java!!!	visit(in version : int, in access : int, in name : String, in signature : String, in superName : String, inout interfaces : String) : void
            // signature is the signature of this class. May be null if the class is not a generic
            // one, and does not extend or implement generic classes or interfaces.

            if (signature != null) {
                considerSignature(signature);
            }

            // superName is the internal of name of the super class (see getInternalName).
            // For interfaces, the super class is Object. May be null but only for the Object class.
            considerName(superName);

            // interfaces is the internal names of the class's interfaces (see getInternalName).
            // May be null.
            considerNames(interfaces);
!!!9571980.java!!!	visitAnnotation(in desc : String, inout visible : boolean) : AnnotationVisitor
            // desc is the class descriptor of the annotation class.
            considerDesc(desc);
            return new MyAnnotationVisitor();
!!!9572108.java!!!	visitAttribute(inout attr : Attribute) : void
            // pass
!!!9572236.java!!!	visitEnd() : void
            // pass
!!!9572876.java!!!	visitField(in access : int, in name : String, in desc : String, in signature : String, inout value : Object) : FieldVisitor
            // desc is the field's descriptor (see Type).
            considerDesc(desc);

            // signature is the field's signature. May be null if the field's type does not use
            // generic types.
            considerSignature(signature);

            return new MyFieldVisitor();
!!!9573004.java!!!	visitInnerClass(in name : String, in outerName : String, in innerName : String, in access : int) : void
            // name is the internal name of an inner class (see getInternalName).
            considerName(name);
!!!9573132.java!!!	visitMethod(in access : int, in name : String, in desc : String, in signature : String, inout exceptions : String) : MethodVisitor
            // desc is the method's descriptor (see Type).
            considerDesc(desc);
            // signature is the method's signature. May be null if the method parameters, return
            // type and exceptions do not use generic types.
            considerSignature(signature);

            return new MyMethodVisitor();
!!!9573260.java!!!	visitOuterClass(in owner : String, in name : String, in desc : String) : void
            // pass
!!!9573388.java!!!	visitSource(in source : String, in debug : String) : void
            // pass
