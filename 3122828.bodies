class JSONML
!!!13140620.java!!!	parse(inout x : XMLTokener, inout arrayForm : boolean, inout ja : JSONArray) : Object
        String     attribute;
        char       c;
        String	   closeTag = null;
        int        i;
        JSONArray  newja = null;
        JSONObject newjo = null;
        Object     token;
        String	   tagName = null;
        
// Test for and skip past these forms:
//      <!-- ... -->
//      <![  ... ]]>
//      <!   ...   >
//      <?   ...  ?>
        
        while (true) {
        	token = x.nextContent();
    		if (token == XML.LT) {
    			token = x.nextToken();
    			if (token instanceof Character) {
			        if (token == XML.SLASH) {

// Close tag </

			        	token = x.nextToken();
			        	if (!(token instanceof String)) {
			        		throw new JSONException(
			        				"Expected a closing name instead of '" + 
			        				token + "'.");
			        	}
			            if (x.nextToken() != XML.GT) {
			                throw x.syntaxError("Misshaped close tag");
			            }
			            return token;
			        } else if (token == XML.BANG) {
        		
// <!
        	
			            c = x.next();
			            if (c == '-') {
			                if (x.next() == '-') {
			                    x.skipPast("-->");
			                }
			                x.back();
			            } else if (c == '[') {
			                token = x.nextToken();
			                if (token.equals("CDATA") && x.next() == '[') {
			                	if (ja != null) {
			                		ja.put(x.nextCDATA());
			                	}
			                } else {
			                	throw x.syntaxError("Expected 'CDATA['");
			                }
			            } else {
				            i = 1;
				            do {
				                token = x.nextMeta();
				                if (token == null) {
				                    throw x.syntaxError("Missing '>' after '<!'.");
				                } else if (token == XML.LT) {
				                    i += 1;
				                } else if (token == XML.GT) {
				                    i -= 1;
				                }
				            } while (i > 0);
			            }
			        } else if (token == XML.QUEST) {

// <?

			        	x.skipPast("?>");
			        } else {
			            throw x.syntaxError("Misshaped tag");
			        }

// Open tag <

		        } else {
		        	if (!(token instanceof String)) {
			            throw x.syntaxError("Bad tagName '" + token + "'.");		        		
		        	}
		        	tagName = (String)token;
		            newja = new JSONArray();		
		            newjo = new JSONObject();
		        	if (arrayForm) {
			            newja.put(tagName);
			            if (ja != null) {
			            	ja.put(newja);
			            }
			        } else {
		        		newjo.put("tagName", tagName);
		        		if (ja != null) {
			            	ja.put(newjo);
			            }
			        }
		            token = null;
		            for (;;) {
		                if (token == null) {
		                    token = x.nextToken();
		                }
		                if (token == null) {
		                	throw x.syntaxError("Misshaped tag");
		                }
		                if (!(token instanceof String)) {
		                	break;
		                }

//		              attribute = value

	                    attribute = (String)token;
			        	if (!arrayForm && (attribute == "tagName" || attribute == "childNode")) {
                            throw x.syntaxError("Reserved attribute.");			        		
			        	}
	                    token = x.nextToken();
	                    if (token == XML.EQ) {
	                        token = x.nextToken();
	                        if (!(token instanceof String)) {
	                            throw x.syntaxError("Missing value");
	                        }
	                        newjo.accumulate(attribute, JSONObject.stringToValue((String)token));
	                        token = null;
	                    } else {
	                    	newjo.accumulate(attribute, "");
	                    }
		            }
                    if (arrayForm && newjo.length() > 0) {
                    	newja.put(newjo);
                    }

// Empty tag <.../>

	                if (token == XML.SLASH) {
	                    if (x.nextToken() != XML.GT) {
	                        throw x.syntaxError("Misshaped tag");
	                    }
	                    if (ja == null) {
	                    	if (arrayForm) {
	                    		return newja;
	                    	} else {
	                    		return newjo;
	                    	}
	                    }

// Content, between <...> and </...>

	                } else {
	                	if (token != XML.GT) {
	                		throw x.syntaxError("Misshaped tag");
	                	}
	                	closeTag = (String)parse(x, arrayForm, newja);
	                	if (closeTag != null) {
		                	if (!closeTag.equals(tagName)) {
		                		throw x.syntaxError("Mismatched '" + tagName + 
		                				"' and '" + closeTag + "'");
					        }
		                	tagName = null;
		            		if (!arrayForm && newja.length() > 0) {
		            			newjo.put("childNodes", newja);
		            		}
		                	if (ja == null) {
		                    	if (arrayForm) {
		                    		return newja;
		                    	} else {
		                    		return newjo;
		                    	}
		                	}
	                	}
                	}
	            }
		    } else {
		    	if (ja != null) {
		    		ja.put(token instanceof String ? 
		    				JSONObject.stringToValue((String)token) : token);
		    	}
		    }
        }
!!!13140748.java!!!	toJSONArray(in string : String) : JSONArray
    	return toJSONArray(new XMLTokener(string));
!!!13140876.java!!!	toJSONArray(inout x : XMLTokener) : JSONArray
    	return (JSONArray)parse(x, true, null);
!!!13141004.java!!!	toJSONObject(inout x : XMLTokener) : JSONObject
       	return (JSONObject)parse(x, false, null);
!!!13141132.java!!!	toJSONObject(in string : String) : JSONObject
    	return toJSONObject(new XMLTokener(string));
!!!13141260.java!!!	toString(inout ja : JSONArray) : String
    	Object		 e;
    	int			 i;
    	JSONObject   jo;
    	String       k;
	    Iterator     keys;
	    int			 length;
    	StringBuffer sb = new StringBuffer();
	    String       tagName;
	    String       v;
	    
// Emit <tagName	    
    	
    	tagName = ja.getString(0);
		XML.noSpace(tagName);
		tagName = XML.escape(tagName);
		sb.append('<');
		sb.append(tagName);
		
		e = ja.opt(1);
		if (e instanceof JSONObject) {
			i = 2;
			jo = (JSONObject)e;
			
// Emit the attributes
			
	        keys = jo.keys();
	        while (keys.hasNext()) {
	            k = keys.next().toString();
            	XML.noSpace(k);
	            v = jo.optString(k);
	            if (v != null) {
		            sb.append(' ');
		            sb.append(XML.escape(k));
		            sb.append('=');
		            sb.append('"');
		            sb.append(XML.escape(v));
		            sb.append('"');
	            }
	        }  
		} else {
			i = 1;
		}
	     	
//Emit content in body
	    	
		length = ja.length();
		if (i >= length) {
	        sb.append('/');
	        sb.append('>');
		} else {
	        sb.append('>');
			do {
			    e = ja.get(i);
			    i += 1;
			    if (e != null) {
			    	if (e instanceof String) {
			    		sb.append(XML.escape(e.toString()));
					} else if (e instanceof JSONObject) {
						sb.append(toString((JSONObject)e));
					} else if (e instanceof JSONArray) {
						sb.append(toString((JSONArray)e));
					}
			    }
			} while (i < length);
			sb.append('<');
	        sb.append('/');
			sb.append(tagName);
	        sb.append('>');
	    }
        return sb.toString();
!!!13141388.java!!!	toString(inout jo : JSONObject) : String
	    StringBuffer sb = new StringBuffer();
	    Object		 e;
	    int          i;
	    JSONArray    ja;
	    String       k;
	    Iterator     keys;
	    int          len;
	    String       tagName;
	    String       v;
	
//Emit <tagName
	
		tagName = jo.optString("tagName");
		if (tagName == null) {
			return XML.escape(jo.toString());
		}
		XML.noSpace(tagName);
		tagName = XML.escape(tagName);
		sb.append('<');
		sb.append(tagName);
	
//Emit the attributes
	
        keys = jo.keys();
        while (keys.hasNext()) {
            k = keys.next().toString();
            if (!k.equals("tagName") && !k.equals("childNodes")) {
            	XML.noSpace(k);
	            v = jo.optString(k);
	            if (v != null) {
		            sb.append(' ');
		            sb.append(XML.escape(k));
		            sb.append('=');
		            sb.append('"');
		            sb.append(XML.escape(v));
		            sb.append('"');
	            }
            }
        }    
		     	
//Emit content in body
	
		ja = jo.optJSONArray("childNodes");
		if (ja == null) {
	        sb.append('/');
	        sb.append('>');
		} else {
	        sb.append('>');
			len = ja.length();
			for (i = 0; i < len; i += 1) {
			    e = ja.get(i);
			    if (e != null) {
			    	if (e instanceof String) {
			    		sb.append(XML.escape(e.toString()));
					} else if (e instanceof JSONObject) {
						sb.append(toString((JSONObject)e));
					} else if (e instanceof JSONArray) {
						sb.append(toString((JSONArray)e));
					}
			    }
			}
			sb.append('<');
	        sb.append('/');
			sb.append(tagName);
	        sb.append('>');
	    }
        return sb.toString();
