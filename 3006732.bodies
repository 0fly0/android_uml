class SelectDeviceDialogActivity
!!!12270604.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        setContentView(R.layout.select_device);
        mWrapper = Wrapper.getWrapperInstance();

        mTvCecService = CecUtils.getITvCecService();

        setTimeOut(10000);

        isInputDetectEnabled = mWrapper.getInputDetect() == 1;
!!!12270732.java!!!	onStart() : void
        super.onStart();

        Intent checkConnectIntent = new Intent(EventManagerService.ACTION_CHECK_CONNECT);
        sendBroadcast(checkConnectIntent);

        processIntent(getIntent());
        connectToService();

        final IntentFilter filter = new IntentFilter();
        filter.addAction(TvIntents.INTENT_SOURCE_CONNECT_CHANGE);
        registerReceiver(mInputDetectReceiver, filter);
!!!12270860.java!!!	onStop() : void
        disconnectFromService();
        unregisterReceiver(mInputDetectReceiver);
        super.onStop();
!!!12270988.java!!!	onNewIntent(inout intent : Intent) : void
        super.onNewIntent(intent);
        setIntent(intent);
        processIntent(intent);
!!!12271116.java!!!	onResume() : void
        hideSelf(false);
        super.onResume();
!!!12271244.java!!!	processIntent(inout intent : Intent) : void
        mSelectedDeviceId = intent.getStringExtra(
                MediaDevicesConstants.EXTRA_SELECTED_DEVICE_ID);
!!!12271372.java!!!	connectToService() : void
        mServiceConnection = new ServiceConnection() {

            @Override
            public void onServiceConnected(ComponentName name,
                    IBinder service) {
                mBoundService = IMediaDevicesService.Stub.asInterface(service);
                updateList();
            }

            @Override
            public void onServiceDisconnected(ComponentName name) {
            }
        };
        bindService(
                new Intent(MediaDevicesConstants.ACTION_BIND_MEDIA_DEVICES_SERVICE
                /* ACTION_BIND_DEVICE_LIST_SERVICE */),
                mServiceConnection, Service.BIND_AUTO_CREATE);
!!!12271500.java!!!	disconnectFromService() : void
        if (mServiceConnection != null) {
            unbindService(mServiceConnection);
            mServiceConnection = null;
            mBoundService = null;
        }
!!!12271628.java!!!	updateList() : void
        List<Device> devices = null;
        try {
            devices = mBoundService.getPairedDevices();
            Collections.sort(devices, new PairingDevice().new DeviceComparator());
            mFocusPosition = PairingDevice.getDevIndexById(devices, mSelectedDeviceId);
        } catch (RemoteException e) {
            devices = new ArrayList<Device>();
        }
        // check if CEC is enabled, if yes, get the device name.
        if (mWrapper != null && mWrapper.getHdmiCec() == 1) {
            mCecIsEnabled = true;
            updateCecDeviceInfo();
        }
        final ArrayAdapter<Device> adapter = new ArrayAdapter<Device>(this,
                android.R.layout.simple_list_item_2, android.R.id.text1,
                devices) {
            @Override
            public View getView(int position, View convertView,
                    ViewGroup parent) {
                Device device = getItem(position);
                String devId = device.getId();
                View view = super.getView(position, convertView, parent);
                TextView title = (TextView) view.findViewById(
                        android.R.id.text1);
                TextView description = (TextView) view.findViewById(
                        android.R.id.text2);

                int textColor = Color.WHITE;
                TvSource source = (TvSource) PairingDevice.DeviceIdSourceMap.get(devId);
                int srcId = TvSource.TV_SourceInvalid.value();
                if (source != null) {
                    srcId = source.value();
                }
                if (isInputDetectEnabled
                        && !TvFramework.getInstance().isTvSourceConnected(
                                Utils.getTvRemoteService(), srcId)) {
                    textColor = Color.DKGRAY;
                }
                title.setTextColor(textColor);
                description.setTextColor(textColor);

                title.setText(device.getLabel());
                if (device.getId().equals(mSelectedDeviceId)) {
                    title.setTypeface(Typeface.DEFAULT_BOLD);
                } else {
                    title.setTypeface(Typeface.DEFAULT);
                }

                String descString = "";
                if (mCecIsEnabled) {
                    int port = CecUtils.getHdmiPortbyDeviceId(devId);
                    if (port >= CecUtils.FIRST_HDMI_PORT && port <= CecUtils.LAST_HDMI_PORT) {
                        // HDMI port
                        descString = getCecDeviceName(port - 1);
                    }
                }
                description.setText(descString);

                return view;
            }
        };
        ListView listView = (ListView) findViewById(R.id.devices);
        listView.setAdapter(adapter);
        mAdapter = adapter;
        listView.setSelection(mFocusPosition);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                    int position, long id) {
                Device device = adapter.getItem(position);

                int port = CecUtils.getHdmiPortbyDeviceId(device.getId());
                if (mCecIsEnabled && port >= 1 && port <= 4) {
                    int num = CecUtils.numberOfCecDeviceConnected(port);
                    if (num == 1 || mCecPlaybackDeviceNum[port - 1] == 1) {

                        Intent intent = new Intent(CecUtils.CEC_ACTION_ACTIVE_SOURCE);
                        Bundle hdmiData = new Bundle();
                        hdmiData.putInt(HdmiCecUtils.EXTRA_HDMI_PORT, port);
                        hdmiData.putInt(HdmiCecUtils.EXTRA_HDMI_LOGICAL_ADDR,
                                mCecDeviceDevAddr[port - 1]);
                        hdmiData.putString(HdmiCecUtils.EXTRA_HDMI_DEVICE_ID, mSelectedDeviceId);
                        intent.putExtra(HdmiCecUtils.EXTRA_HDMI_BUNDLE, hdmiData);
                        startService(intent);
                        finish();
                        return;
                    } else if (mCecPlaybackDeviceNum[port - 1] > 1) {
                        /* More than one play back device,launch the sub menu */
                        Intent i = new Intent(TvIntents.ACTION_SELECT_SUBDEVICE);
                        i.putExtra("device_id", device.getId());
                        i.putExtra("device_port", port);
                        startActivity(i);
                        hideSelf(true);
                        return;
                    } else {
                        try {
                            int curPort, oldphy, newphy;
                            curPort = CecUtils.getHdmiPortbyDeviceId(mWrapper.getCurrentDeviceId());
                            if (mTvCecService != null) {
                                mTvCecService.setCurrentInput(port);
                                if (curPort >= CecUtils.FIRST_HDMI_PORT
                                        && curPort <= CecUtils.LAST_HDMI_PORT && curPort != port) {
                                    // sent routing change in-between HDMI port
                                    // switching
                                    oldphy = CecUtils.getPhyaddrByPort(curPort);
                                    newphy = CecUtils.getPhyaddrByPort(port);
                                    mTvCecService.sendRoutingChange(newphy, oldphy);
                                }
                            }
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                }

                if (mTvCecService != null) {
                    try {
                        if (port >= CecUtils.FIRST_HDMI_PORT && port <= CecUtils.LAST_HDMI_PORT) {
                            mTvCecService.setCurrentInput(port);
                        } else {
                            mTvCecService.setCurrentInput(-1);
                        }

                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }
                }

                Uri dataUri = TvUriUtils.PASSTHROUGH_URI.buildUpon()
                        .appendQueryParameter(
                                TvUriUtils.DEVICE_ID_QUERY_PARAMETER,
                                device.getId())
                        .build();

                // Moving finish here. As there is a race condition and window
                // manager is not able to remove the dialog
                finish();

                if (mSelectedDeviceId != null && !mSelectedDeviceId.equals(device.getId())) {
                    Wrapper.getWrapperInstance().pauseCC();
                }
                if (mTvCecService != null && mCecIsEnabled
                        && CecUtils.switchFromHdmiToNonHdmi(device.getId())) {
                    try {
                        mTvCecService.setActiveSource();
                    } catch (RemoteException exp) {
                        Log.e(TAG, "exception during setActiveSource" + exp);
                    }
                }
                Intent viewIntent = new Intent(Intent.ACTION_VIEW, dataUri);
                startActivity(viewIntent);

                // Set the Current Device as the Default Device. So that on
                // Reboot this Device start playback
                Intent defaultIntent = MediaDevicesIntents.createServiceDefaultDeviceIntent(device
                        .getId());
                getApplicationContext().startService(defaultIntent);
            }
        });
!!!12271756.java!!!	updateCecDeviceInfo() : void

        getCecPlaybackDeviceByPort(1);
        getCecPlaybackDeviceByPort(2);
        getCecPlaybackDeviceByPort(3);
        getCecPlaybackDeviceByPort(4);
!!!12271884.java!!!	getCecPlaybackDeviceByPort(in port : int) : void
        List<CECDevInfo> list = null;
        int i, devicetype, size = 0;
        boolean playbackfound = false;

        list = CecUtils.getConnectedDevicesAtPort(port);
        if (list != null) {
            size = list.size();
            if (size > 0) {
                mCecDeviceName[port - 1] = list.get(0).getOsdName();
                mCecDeviceDevAddr[port - 1] = list.get(0).getDeviceAddress();
                if (list.get(0).getDeviceType() == DeviceType.PLAYBACK_DEVICE) {
                    mCecPlaybackDeviceNum[port - 1] += 1;
                    playbackfound = true;
                }
                // find playback device
                for (i = 1; i < size; i++) {
                    devicetype = list.get(i).getDeviceType();
                    if (devicetype == DeviceType.PLAYBACK_DEVICE) {
                        if (playbackfound == false) {
                            mCecDeviceName[port - 1] = list.get(i).getOsdName();
                            mCecDeviceDevAddr[port - 1] = list.get(i).getDeviceAddress();
                        }
                        mCecPlaybackDeviceNum[port - 1] = mCecPlaybackDeviceNum[port - 1] + 1;
                        playbackfound = true;
                    }
                }
            }
        }
!!!12272012.java!!!	getCecDeviceName(in port : int) : String
        // port is mapping the HDMI service.
        if (port < 0 || port > 3 || mCecDeviceName[port] == null
                || mCecDeviceName[port].equals("Default")) {
            return "";
        }
        return mCecDeviceName[port];

