class DecimalFormat
!!!1124379.java!!!	DecimalFormat()
        Locale locale = Locale.getDefault();
        this.symbols = new DecimalFormatSymbols(locale);
        initNative(LocaleData.get(locale).numberPattern);
!!!1124507.java!!!	DecimalFormat(inout pattern : String)
        this(pattern, Locale.getDefault());
!!!1124635.java!!!	DecimalFormat(inout pattern : String, inout value : DecimalFormatSymbols)
        this.symbols = (DecimalFormatSymbols) value.clone();
        initNative(pattern);
!!!1124763.java!!!	DecimalFormat(inout pattern : String, inout locale : Locale)
        this.symbols = new DecimalFormatSymbols(locale);
        initNative(pattern);
!!!1124891.java!!!	initNative(inout pattern : String) : void
        try {
            this.ndf = new NativeDecimalFormat(pattern, symbols);
        } catch (IllegalArgumentException ex) {
            throw new IllegalArgumentException(pattern);
        }
        super.setMaximumFractionDigits(ndf.getMaximumFractionDigits());
        super.setMaximumIntegerDigits(ndf.getMaximumIntegerDigits());
        super.setMinimumFractionDigits(ndf.getMinimumFractionDigits());
        super.setMinimumIntegerDigits(ndf.getMinimumIntegerDigits());
!!!1125019.java!!!	applyLocalizedPattern(inout pattern : String) : void
        ndf.applyLocalizedPattern(pattern);
!!!1125147.java!!!	applyPattern(inout pattern : String) : void
        ndf.applyPattern(pattern);
!!!1125275.java!!!	clone() : Object
        DecimalFormat clone = (DecimalFormat) super.clone();
        clone.ndf = (NativeDecimalFormat) ndf.clone();
        clone.symbols = (DecimalFormatSymbols) symbols.clone();
        return clone;
!!!1125403.java!!!	equals(inout object : Object) : boolean
        if (this == object) {
            return true;
        }
        if (!(object instanceof DecimalFormat)) {
            return false;
        }
        DecimalFormat other = (DecimalFormat) object;
        return (this.ndf == null ? other.ndf == null : this.ndf.equals(other.ndf)) &&
                getDecimalFormatSymbols().equals(other.getDecimalFormatSymbols());
!!!1125531.java!!!	formatToCharacterIterator(inout object : Object) : AttributedCharacterIterator
        if (object == null) {
            throw new NullPointerException("object == null");
        }
        return ndf.formatToCharacterIterator(object);
!!!1125659.java!!!	checkBufferAndFieldPosition(inout buffer : StringBuffer, inout position : FieldPosition) : void
        if (buffer == null) {
            throw new NullPointerException("buffer == null");
        }
        if (position == null) {
            throw new NullPointerException("position == null");
        }
!!!1125787.java!!!	format(in value : double, inout buffer : StringBuffer, inout position : FieldPosition) : StringBuffer
        checkBufferAndFieldPosition(buffer, position);
        // All float/double/Float/Double formatting ends up here...
        if (roundingMode == RoundingMode.UNNECESSARY) {
            // ICU4C doesn't support this rounding mode, so we have to fake it.
            try {
                setRoundingMode(RoundingMode.UP);
                String upResult = format(value, new StringBuffer(), new FieldPosition(0)).toString();
                setRoundingMode(RoundingMode.DOWN);
                String downResult = format(value, new StringBuffer(), new FieldPosition(0)).toString();
                if (!upResult.equals(downResult)) {
                    throw new ArithmeticException("rounding mode UNNECESSARY but rounding required");
                }
            } finally {
                setRoundingMode(RoundingMode.UNNECESSARY);
            }
        }
        buffer.append(ndf.formatDouble(value, position));
        return buffer;
!!!1125915.java!!!	format(in value : long, inout buffer : StringBuffer, inout position : FieldPosition) : StringBuffer
        checkBufferAndFieldPosition(buffer, position);
        buffer.append(ndf.formatLong(value, position));
        return buffer;
!!!1126043.java!!!	format(inout number : Object, inout buffer : StringBuffer, inout position : FieldPosition) : StringBuffer
        checkBufferAndFieldPosition(buffer, position);
        if (number instanceof BigInteger) {
            BigInteger bigInteger = (BigInteger) number;
            char[] chars = (bigInteger.bitLength() < 64)
                    ? ndf.formatLong(bigInteger.longValue(), position)
                    : ndf.formatBigInteger(bigInteger, position);
            buffer.append(chars);
            return buffer;
        } else if (number instanceof BigDecimal) {
            buffer.append(ndf.formatBigDecimal((BigDecimal) number, position));
            return buffer;
        }
        return super.format(number, buffer, position);
!!!1126171.java!!!	getDecimalFormatSymbols() : DecimalFormatSymbols
        return (DecimalFormatSymbols) symbols.clone();
!!!1126299.java!!!	getCurrency() : Currency
        return symbols.getCurrency();
!!!1126427.java!!!	getGroupingSize() : int
        return ndf.getGroupingSize();
!!!1126555.java!!!	getMultiplier() : int
        return ndf.getMultiplier();
!!!1126683.java!!!	getNegativePrefix() : String
        return ndf.getNegativePrefix();
!!!1126811.java!!!	getNegativeSuffix() : String
        return ndf.getNegativeSuffix();
!!!1126939.java!!!	getPositivePrefix() : String
        return ndf.getPositivePrefix();
!!!1127067.java!!!	getPositiveSuffix() : String
        return ndf.getPositiveSuffix();
!!!1127195.java!!!	hashCode() : int
        return getPositivePrefix().hashCode();
!!!1127323.java!!!	isDecimalSeparatorAlwaysShown() : boolean
        return ndf.isDecimalSeparatorAlwaysShown();
!!!1127451.java!!!	isParseBigDecimal() : boolean
        return ndf.isParseBigDecimal();
!!!1127579.java!!!	setParseIntegerOnly(inout value : boolean) : void
        // In this implementation, NativeDecimalFormat is wrapped to
        // fulfill most of the format and parse feature. And this method is
        // delegated to the wrapped instance of NativeDecimalFormat.
        ndf.setParseIntegerOnly(value);
!!!1127707.java!!!	isParseIntegerOnly() : boolean
        return ndf.isParseIntegerOnly();
!!!1127835.java!!!	parse(inout string : String, inout position : ParsePosition) : Number
        Number number = ndf.parse(string, position);
        if (number == null) {
            return null;
        }
        if (this.isParseBigDecimal()) {
            if (number instanceof Long) {
                return new BigDecimal(number.longValue());
            }
            if ((number instanceof Double) && !((Double) number).isInfinite()
                    && !((Double) number).isNaN()) {

                return new BigDecimal(number.toString());
            }
            if (number instanceof BigInteger) {
                return new BigDecimal(number.toString());
            }
            return number;
        }
        if ((number instanceof BigDecimal) || (number instanceof BigInteger)) {
            return new Double(number.doubleValue());
        }
        if (this.isParseIntegerOnly() && number.equals(NEGATIVE_ZERO_DOUBLE)) {
            return Long.valueOf(0);
        }
        return number;

!!!1127963.java!!!	setDecimalFormatSymbols(inout value : DecimalFormatSymbols) : void
        if (value != null) {
            // The Java object is canonical, and we copy down to native code.
            this.symbols = (DecimalFormatSymbols) value.clone();
            ndf.setDecimalFormatSymbols(this.symbols);
        }
!!!1128091.java!!!	setCurrency(inout currency : Currency) : void
        ndf.setCurrency(Currency.getInstance(currency.getCurrencyCode()));
        symbols.setCurrency(currency);
!!!1128219.java!!!	setDecimalSeparatorAlwaysShown(inout value : boolean) : void
        ndf.setDecimalSeparatorAlwaysShown(value);
!!!1128347.java!!!	setGroupingSize(in value : int) : void
        ndf.setGroupingSize(value);
!!!1128475.java!!!	setGroupingUsed(inout value : boolean) : void
        ndf.setGroupingUsed(value);
!!!1128603.java!!!	isGroupingUsed() : boolean
        return ndf.isGroupingUsed();
!!!1128731.java!!!	setMaximumFractionDigits(in value : int) : void
        super.setMaximumFractionDigits(value);
        ndf.setMaximumFractionDigits(getMaximumFractionDigits());
        // Changing the maximum fraction digits needs to update ICU4C's rounding configuration.
        setRoundingMode(roundingMode);
!!!1128859.java!!!	setMaximumIntegerDigits(in value : int) : void
        super.setMaximumIntegerDigits(value);
        ndf.setMaximumIntegerDigits(getMaximumIntegerDigits());
!!!1128987.java!!!	setMinimumFractionDigits(in value : int) : void
        super.setMinimumFractionDigits(value);
        ndf.setMinimumFractionDigits(getMinimumFractionDigits());
!!!1129115.java!!!	setMinimumIntegerDigits(in value : int) : void
        super.setMinimumIntegerDigits(value);
        ndf.setMinimumIntegerDigits(getMinimumIntegerDigits());
!!!1129243.java!!!	setMultiplier(in value : int) : void
        ndf.setMultiplier(value);
!!!1129371.java!!!	setNegativePrefix(inout value : String) : void
        ndf.setNegativePrefix(value);
!!!1129499.java!!!	setNegativeSuffix(inout value : String) : void
        ndf.setNegativeSuffix(value);
!!!1129627.java!!!	setPositivePrefix(inout value : String) : void
        ndf.setPositivePrefix(value);
!!!1129755.java!!!	setPositiveSuffix(inout value : String) : void
        ndf.setPositiveSuffix(value);
!!!1129883.java!!!	setParseBigDecimal(inout newValue : boolean) : void
        ndf.setParseBigDecimal(newValue);
!!!1130011.java!!!	toLocalizedPattern() : String
        return ndf.toLocalizedPattern();
!!!1130139.java!!!	toPattern() : String
        return ndf.toPattern();
!!!1130267.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        ObjectOutputStream.PutField fields = stream.putFields();
        fields.put("positivePrefix", ndf.getPositivePrefix());
        fields.put("positiveSuffix", ndf.getPositiveSuffix());
        fields.put("negativePrefix", ndf.getNegativePrefix());
        fields.put("negativeSuffix", ndf.getNegativeSuffix());
        fields.put("posPrefixPattern", (String) null);
        fields.put("posSuffixPattern", (String) null);
        fields.put("negPrefixPattern", (String) null);
        fields.put("negSuffixPattern", (String) null);
        fields.put("multiplier", ndf.getMultiplier());
        fields.put("groupingSize", (byte) ndf.getGroupingSize());
        fields.put("groupingUsed", ndf.isGroupingUsed());
        fields.put("decimalSeparatorAlwaysShown", ndf.isDecimalSeparatorAlwaysShown());
        fields.put("parseBigDecimal", ndf.isParseBigDecimal());
        fields.put("roundingMode", roundingMode);
        fields.put("symbols", symbols);
        fields.put("useExponentialNotation", false);
        fields.put("minExponentDigits", (byte) 0);
        fields.put("maximumIntegerDigits", ndf.getMaximumIntegerDigits());
        fields.put("minimumIntegerDigits", ndf.getMinimumIntegerDigits());
        fields.put("maximumFractionDigits", ndf.getMaximumFractionDigits());
        fields.put("minimumFractionDigits", ndf.getMinimumFractionDigits());
        fields.put("serialVersionOnStream", 4);
        stream.writeFields();
!!!1130395.java!!!	readObject(inout stream : ObjectInputStream) : void
        ObjectInputStream.GetField fields = stream.readFields();
        this.symbols = (DecimalFormatSymbols) fields.get("symbols", null);

        initNative("");
        ndf.setPositivePrefix((String) fields.get("positivePrefix", ""));
        ndf.setPositiveSuffix((String) fields.get("positiveSuffix", ""));
        ndf.setNegativePrefix((String) fields.get("negativePrefix", "-"));
        ndf.setNegativeSuffix((String) fields.get("negativeSuffix", ""));
        ndf.setMultiplier(fields.get("multiplier", 1));
        ndf.setGroupingSize(fields.get("groupingSize", (byte) 3));
        ndf.setGroupingUsed(fields.get("groupingUsed", true));
        ndf.setDecimalSeparatorAlwaysShown(fields.get("decimalSeparatorAlwaysShown", false));

        setRoundingMode((RoundingMode) fields.get("roundingMode", RoundingMode.HALF_EVEN));

        final int maximumIntegerDigits = fields.get("maximumIntegerDigits", 309);
        final int minimumIntegerDigits = fields.get("minimumIntegerDigits", 309);
        final int maximumFractionDigits = fields.get("maximumFractionDigits", 340);
        final int minimumFractionDigits = fields.get("minimumFractionDigits", 340);
        // Tell ICU what we want, then ask it what we can have, and then
        // set that in our Java object. This isn't RI-compatible, but then very little of our
        // behavior in this area is, and it's not obvious how we can second-guess ICU (or tell
        // it to just do exactly what we ask). We only need to do this with maximumIntegerDigits
        // because ICU doesn't seem to have its own ideas about the other options.
        ndf.setMaximumIntegerDigits(maximumIntegerDigits);
        super.setMaximumIntegerDigits(ndf.getMaximumIntegerDigits());

        setMinimumIntegerDigits(minimumIntegerDigits);
        setMinimumFractionDigits(minimumFractionDigits);
        setMaximumFractionDigits(maximumFractionDigits);
        setParseBigDecimal(fields.get("parseBigDecimal", false));

        if (fields.get("serialVersionOnStream", 0) < 3) {
            setMaximumIntegerDigits(super.getMaximumIntegerDigits());
            setMinimumIntegerDigits(super.getMinimumIntegerDigits());
            setMaximumFractionDigits(super.getMaximumFractionDigits());
            setMinimumFractionDigits(super.getMinimumFractionDigits());
        }
!!!1130523.java!!!	getRoundingMode() : RoundingMode
        return roundingMode;
!!!1130651.java!!!	setRoundingMode(inout roundingMode : RoundingMode) : void
        if (roundingMode == null) {
            throw new NullPointerException("roundingMode == null");
        }
        this.roundingMode = roundingMode;
        if (roundingMode != RoundingMode.UNNECESSARY) { // ICU4C doesn't support UNNECESSARY.
            double roundingIncrement = 1.0 / Math.pow(10, Math.max(0, getMaximumFractionDigits()));
            ndf.setRoundingMode(roundingMode, roundingIncrement);
        }
