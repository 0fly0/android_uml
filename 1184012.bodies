class Script
!!!6610188.java!!!	createKernelID(in slot : int, in sig : int, inout ein : Element, inout eout : Element) : KernelID
        KernelID k = mKIDs.get(slot);
        if (k != null) {
            return k;
        }

        int id = mRS.nScriptKernelIDCreate(getID(mRS), slot, sig);
        if (id == 0) {
            throw new RSDriverException("Failed to create KernelID");
        }

        k = new KernelID(id, mRS, this, slot, sig);
        mKIDs.put(slot, k);
        return k;
!!!6610444.java!!!	createFieldID(in slot : int, inout e : Element) : FieldID
        FieldID f = mFIDs.get(slot);
        if (f != null) {
            return f;
        }

        int id = mRS.nScriptFieldIDCreate(getID(mRS), slot);
        if (id == 0) {
            throw new RSDriverException("Failed to create FieldID");
        }

        f = new FieldID(id, mRS, this, slot);
        mFIDs.put(slot, f);
        return f;
!!!6610572.java!!!	invoke(in slot : int) : void
        mRS.nScriptInvoke(getID(mRS), slot);
!!!6610700.java!!!	invoke(in slot : int, inout v : FieldPacker) : void
        if (v != null) {
            mRS.nScriptInvokeV(getID(mRS), slot, v.getData());
        } else {
            mRS.nScriptInvoke(getID(mRS), slot);
        }
!!!6610828.java!!!	forEach(in slot : int, inout ain : Allocation, inout aout : Allocation, inout v : FieldPacker) : void
        if (ain == null && aout == null) {
            throw new RSIllegalArgumentException(
                "At least one of ain or aout is required to be non-null.");
        }
        int in_id = 0;
        if (ain != null) {
            in_id = ain.getID(mRS);
        }
        int out_id = 0;
        if (aout != null) {
            out_id = aout.getID(mRS);
        }
        byte[] params = null;
        if (v != null) {
            params = v.getData();
        }
        mRS.nScriptForEach(getID(mRS), slot, in_id, out_id, params);
!!!6610956.java!!!	Script(in id : int, inout rs : RenderScript)
        super(id, rs);
!!!6611084.java!!!	bindAllocation(inout va : Allocation, in slot : int) : void
        mRS.validate();
        if (va != null) {
            mRS.nScriptBindAllocation(getID(mRS), va.getID(mRS), slot);
        } else {
            mRS.nScriptBindAllocation(getID(mRS), 0, slot);
        }
!!!6611212.java!!!	setVar(in index : int, in v : float) : void
        mRS.nScriptSetVarF(getID(mRS), index, v);
!!!6611340.java!!!	setVar(in index : int, in v : double) : void
        mRS.nScriptSetVarD(getID(mRS), index, v);
!!!6611468.java!!!	setVar(in index : int, in v : int) : void
        mRS.nScriptSetVarI(getID(mRS), index, v);
!!!6611596.java!!!	setVar(in index : int, in v : long) : void
        mRS.nScriptSetVarJ(getID(mRS), index, v);
!!!6611724.java!!!	setVar(in index : int, inout v : boolean) : void
        mRS.nScriptSetVarI(getID(mRS), index, v ? 1 : 0);
!!!6611852.java!!!	setVar(in index : int, inout o : BaseObj) : void
        mRS.nScriptSetVarObj(getID(mRS), index, (o == null) ? 0 : o.getID(mRS));
!!!6611980.java!!!	setVar(in index : int, inout v : FieldPacker) : void
        mRS.nScriptSetVarV(getID(mRS), index, v.getData());
!!!6612108.java!!!	setVar(in index : int, inout v : FieldPacker, inout e : Element, inout dims : int) : void
        mRS.nScriptSetVarVE(getID(mRS), index, v.getData(), e.getID(mRS), dims);
!!!6612236.java!!!	setTimeZone(in timeZone : String) : void
        mRS.validate();
        try {
            mRS.nScriptSetTimeZone(getID(mRS), timeZone.getBytes("UTF-8"));
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
