class ByteBufferAsLongBuffer
!!!690075.java!!!	asLongBuffer(inout byteBuffer : ByteBuffer) : LongBuffer
        ByteBuffer slice = byteBuffer.slice();
        slice.order(byteBuffer.order());
        return new ByteBufferAsLongBuffer(slice);
!!!690203.java!!!	ByteBufferAsLongBuffer(inout byteBuffer : ByteBuffer)
        super(byteBuffer.capacity() / SizeOf.LONG);
        this.byteBuffer = byteBuffer;
        this.byteBuffer.clear();
        this.effectiveDirectAddress = byteBuffer.effectiveDirectAddress;
!!!690331.java!!!	asReadOnlyBuffer() : LongBuffer
        ByteBufferAsLongBuffer buf = new ByteBufferAsLongBuffer(byteBuffer.asReadOnlyBuffer());
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        buf.byteBuffer.order = byteBuffer.order;
        return buf;
!!!690459.java!!!	compact() : LongBuffer
        if (byteBuffer.isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        byteBuffer.limit(limit * SizeOf.LONG);
        byteBuffer.position(position * SizeOf.LONG);
        byteBuffer.compact();
        byteBuffer.clear();
        position = limit - position;
        limit = capacity;
        mark = UNSET_MARK;
        return this;
!!!690587.java!!!	duplicate() : LongBuffer
        ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());
        ByteBufferAsLongBuffer buf = new ByteBufferAsLongBuffer(bb);
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        return buf;
!!!690715.java!!!	get() : long
        if (position == limit) {
            throw new BufferUnderflowException();
        }
        return byteBuffer.getLong(position++ * SizeOf.LONG);
!!!690843.java!!!	get(in index : int) : long
        checkIndex(index);
        return byteBuffer.getLong(index * SizeOf.LONG);
!!!690971.java!!!	get(inout dst : long, in dstOffset : int, in longCount : int) : LongBuffer
        byteBuffer.limit(limit * SizeOf.LONG);
        byteBuffer.position(position * SizeOf.LONG);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).get(dst, dstOffset, longCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).get(dst, dstOffset, longCount);
        }
        this.position += longCount;
        return this;
!!!691099.java!!!	isDirect() : boolean
        return byteBuffer.isDirect();
!!!691227.java!!!	isReadOnly() : boolean
        return byteBuffer.isReadOnly();
!!!691355.java!!!	order() : ByteOrder
        return byteBuffer.order();
!!!691483.java!!!	protectedArray() : long
        throw new UnsupportedOperationException();
!!!691611.java!!!	protectedArrayOffset() : int
        throw new UnsupportedOperationException();
!!!691739.java!!!	protectedHasArray() : boolean
        return false;
!!!691867.java!!!	put(in c : long) : LongBuffer
        if (position == limit) {
            throw new BufferOverflowException();
        }
        byteBuffer.putLong(position++ * SizeOf.LONG, c);
        return this;
!!!691995.java!!!	put(in index : int, in c : long) : LongBuffer
        checkIndex(index);
        byteBuffer.putLong(index * SizeOf.LONG, c);
        return this;
!!!692123.java!!!	put(inout src : long, in srcOffset : int, in longCount : int) : LongBuffer
        byteBuffer.limit(limit * SizeOf.LONG);
        byteBuffer.position(position * SizeOf.LONG);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).put(src, srcOffset, longCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).put(src, srcOffset, longCount);
        }
        this.position += longCount;
        return this;
!!!692251.java!!!	slice() : LongBuffer
        byteBuffer.limit(limit * SizeOf.LONG);
        byteBuffer.position(position * SizeOf.LONG);
        ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());
        LongBuffer result = new ByteBufferAsLongBuffer(bb);
        byteBuffer.clear();
        return result;
