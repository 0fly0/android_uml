class OutputStreamWriter
!!!224667.java!!!	OutputStreamWriter(inout out : OutputStream)
        this(out, Charset.defaultCharset());
!!!224795.java!!!	OutputStreamWriter(inout out : OutputStream, in charsetName : String)
        super(out);
        if (charsetName == null) {
            throw new NullPointerException("charsetName == null");
        }
        this.out = out;
        try {
            encoder = Charset.forName(charsetName).newEncoder();
        } catch (Exception e) {
            throw new UnsupportedEncodingException(charsetName);
        }
        encoder.onMalformedInput(CodingErrorAction.REPLACE);
        encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);
!!!224923.java!!!	OutputStreamWriter(inout out : OutputStream, inout cs : Charset)
        super(out);
        this.out = out;
        encoder = cs.newEncoder();
        encoder.onMalformedInput(CodingErrorAction.REPLACE);
        encoder.onUnmappableCharacter(CodingErrorAction.REPLACE);
!!!225051.java!!!	OutputStreamWriter(inout out : OutputStream, inout charsetEncoder : CharsetEncoder)
        super(out);
        charsetEncoder.charset();
        this.out = out;
        encoder = charsetEncoder;
!!!225179.java!!!	close() : void
        synchronized (lock) {
            if (encoder != null) {
                drainEncoder();
                flushBytes(false);
                out.close();
                encoder = null;
                bytes = null;
            }
        }
!!!225307.java!!!	flush() : void
        flushBytes(true);
!!!225435.java!!!	flushBytes(inout flushUnderlyingStream : boolean) : void
        synchronized (lock) {
            checkStatus();
            int position = bytes.position();
            if (position > 0) {
                bytes.flip();
                out.write(bytes.array(), bytes.arrayOffset(), position);
                bytes.clear();
            }
            if (flushUnderlyingStream) {
                out.flush();
            }
        }
!!!225563.java!!!	convert(inout chars : CharBuffer) : void
        while (true) {
            CoderResult result = encoder.encode(chars, bytes, false);
            if (result.isOverflow()) {
                // Make room and try again.
                flushBytes(false);
                continue;
            } else if (result.isError()) {
                result.throwException();
            }
            break;
        }
!!!225691.java!!!	drainEncoder() : void
        // Strictly speaking, I think it's part of the CharsetEncoder contract that you call
        // encode with endOfInput true before flushing. Our ICU-based implementations don't
        // actually need this, and you'd hope that any reasonable implementation wouldn't either.
        // CharsetEncoder.encode doesn't actually pass the boolean through to encodeLoop anyway!
        CharBuffer chars = CharBuffer.allocate(0);
        while (true) {
            CoderResult result = encoder.encode(chars, bytes, true);
            if (result.isError()) {
                result.throwException();
            } else if (result.isOverflow()) {
                flushBytes(false);
                continue;
            }
            break;
        }

        // Some encoders (such as ISO-2022-JP) have stuff to write out after all the
        // characters (such as shifting back into a default state). In our implementation,
        // this is actually the first time ICU is told that we've run out of input.
        CoderResult result = encoder.flush(bytes);
        while (!result.isUnderflow()) {
            if (result.isOverflow()) {
                flushBytes(false);
                result = encoder.flush(bytes);
            } else {
                result.throwException();
            }
        }
!!!225819.java!!!	checkStatus() : void
        if (encoder == null) {
            throw new IOException("OutputStreamWriter is closed");
        }
!!!225947.java!!!	getEncoding() : String
        if (encoder == null) {
            return null;
        }
        return HistoricalCharsetNames.get(encoder.charset());
!!!226075.java!!!	write(inout buffer : char, in offset : int, in count : int) : void
        synchronized (lock) {
            checkStatus();
            Arrays.checkOffsetAndCount(buffer.length, offset, count);
            CharBuffer chars = CharBuffer.wrap(buffer, offset, count);
            convert(chars);
        }
!!!226203.java!!!	write(in oneChar : int) : void
        synchronized (lock) {
            checkStatus();
            CharBuffer chars = CharBuffer.wrap(new char[] { (char) oneChar });
            convert(chars);
        }
!!!226331.java!!!	write(inout str : String, in offset : int, in count : int) : void
        synchronized (lock) {
            if (count < 0) {
                throw new StringIndexOutOfBoundsException(str, offset, count);
            }
            if (str == null) {
                throw new NullPointerException("str == null");
            }
            if ((offset | count) < 0 || offset > str.length() - count) {
                throw new StringIndexOutOfBoundsException(str, offset, count);
            }
            checkStatus();
            CharBuffer chars = CharBuffer.wrap(str, offset, count + offset);
            convert(chars);
        }
!!!226459.java!!!	checkError() : boolean
        return out.checkError();
