class Streams
!!!2064411.java!!!	readSingleByte(inout in : InputStream) : int
        byte[] buffer = new byte[1];
        int result = in.read(buffer, 0, 1);
        return (result != -1) ? buffer[0] & 0xff : -1;
!!!2064539.java!!!	writeSingleByte(inout out : OutputStream, in b : int) : void
        byte[] buffer = new byte[1];
        buffer[0] = (byte) (b & 0xff);
        out.write(buffer);
!!!2064667.java!!!	readFully(inout in : InputStream, inout dst : byte) : void
        readFully(in, dst, 0, dst.length);
!!!2064795.java!!!	readFully(inout in : InputStream, inout dst : byte, in offset : int, in byteCount : int) : void
        if (byteCount == 0) {
            return;
        }
        if (in == null) {
            throw new NullPointerException("in == null");
        }
        if (dst == null) {
            throw new NullPointerException("dst == null");
        }
        Arrays.checkOffsetAndCount(dst.length, offset, byteCount);
        while (byteCount > 0) {
            int bytesRead = in.read(dst, offset, byteCount);
            if (bytesRead < 0) {
                throw new EOFException();
            }
            offset += bytesRead;
            byteCount -= bytesRead;
        }
!!!2064923.java!!!	readFully(inout in : InputStream) : byte
        try {
            return readFullyNoClose(in);
        } finally {
            in.close();
        }
!!!2065051.java!!!	readFullyNoClose(inout in : InputStream) : byte
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int count;
        while ((count = in.read(buffer)) != -1) {
            bytes.write(buffer, 0, count);
        }
        return bytes.toByteArray();
!!!2065179.java!!!	readFully(inout reader : Reader) : String
        try {
            StringWriter writer = new StringWriter();
            char[] buffer = new char[1024];
            int count;
            while ((count = reader.read(buffer)) != -1) {
                writer.write(buffer, 0, count);
            }
            return writer.toString();
        } finally {
            reader.close();
        }
!!!2065307.java!!!	skipAll(inout in : InputStream) : void
        do {
            in.skip(Long.MAX_VALUE);
        } while (in.read() != -1);
!!!2065435.java!!!	skipByReading(inout in : InputStream, in byteCount : long) : long
        // acquire the shared skip buffer.
        byte[] buffer = skipBuffer.getAndSet(null);
        if (buffer == null) {
            buffer = new byte[4096];
        }

        long skipped = 0;
        while (skipped < byteCount) {
            int toRead = (int) Math.min(byteCount - skipped, buffer.length);
            int read = in.read(buffer, 0, toRead);
            if (read == -1) {
                break;
            }
            skipped += read;
            if (read < toRead) {
                break;
            }
        }

        // release the shared skip buffer.
        skipBuffer.set(buffer);

        return skipped;
!!!2065563.java!!!	copy(inout in : InputStream, inout out : OutputStream) : int
        int total = 0;
        byte[] buffer = new byte[8192];
        int c;
        while ((c = in.read(buffer)) != -1) {
            total += c;
            out.write(buffer, 0, c);
        }
        return total;
!!!2065691.java!!!	readAsciiLine(inout in : InputStream) : String
        // TODO: support UTF-8 here instead

        StringBuilder result = new StringBuilder(80);
        while (true) {
            int c = in.read();
            if (c == -1) {
                throw new EOFException();
            } else if (c == '\n') {
                break;
            }

            result.append((char) c);
        }
        int length = result.length();
        if (length > 0 && result.charAt(length - 1) == '\r') {
            result.setLength(length - 1);
        }
        return result.toString();
