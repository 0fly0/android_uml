class ClassCastExceptionTest
!!!2701083.java!!!	testCast() : void
        Object o = new Exception();
        try {
            String s = (String) o;
            fail();
        } catch (ClassCastException ex) {
            assertEquals("java.lang.Exception cannot be cast to java.lang.String", ex.getMessage());
        }
!!!2701211.java!!!	testClassCast() : void
        Object o = new Exception();
        try {
            String.class.cast(o);
            fail();
        } catch (ClassCastException ex) {
            assertEquals("java.lang.Exception cannot be cast to java.lang.String", ex.getMessage());
        }
!!!2701339.java!!!	testClassAsSubclass() : void
        try {
            Exception.class.asSubclass(String.class);
            fail();
        } catch (ClassCastException ex) {
            assertEquals("java.lang.Exception cannot be cast to java.lang.String",
                    ex.getMessage());
        }
!!!2701467.java!!!	testCastOperator() : void
        try {
            Object o = (InputStream) makeInteger();
            fail();
        } catch (ClassCastException ex) {
            assertEquals("java.lang.Integer cannot be cast to java.io.InputStream",
                    ex.getMessage());
        }
!!!2701595.java!!!	testCastOperatorWithArrays() : void
        try {
            Object o = (E) makeArray(String.class);
            fail();
        } catch (ClassCastException ex) {
            assertEquals("java.lang.String[] cannot be cast to "
                    + "libcore.java.lang.ClassCastExceptionTest$E",
                    ex.getMessage());
        }

        try {
            Object o = (E) makeArray(float.class);
            fail();
        } catch (ClassCastException ex) {
            assertEquals("float[] cannot be cast to libcore.java.lang.ClassCastExceptionTest$E",
                    ex.getMessage());
        }

        try {
            Object o = (E) makeArray(char[].class);
            fail();
        } catch (ClassCastException ex) {
            assertEquals("char[][] cannot be cast to libcore.java.lang.ClassCastExceptionTest$E",
                    ex.getMessage());
        }

        try {
            Object o = (Object[][][]) makeInteger();
            fail();
        } catch (ClassCastException ex) {
            assertEquals("java.lang.Integer cannot be cast to java.lang.Object[][][]",
                    ex.getMessage());
        }
!!!2701723.java!!!	makeInteger() : Object
        return new Integer(5);
!!!2701851.java!!!	makeArray(inout clazz : Class) : Object
        return Array.newInstance(clazz, 1);
!!!2701979.java!!!	testEnumMapPut() : void
        EnumMap m = new EnumMap(E.class);
        try {
            m.put(F.A, "world");
            fail();
        } catch (ClassCastException ex) {
            ex.printStackTrace();
            assertNotNull(ex.getMessage());
        }
!!!2702107.java!!!	testMiniEnumSetAdd() : void
        EnumSet m = EnumSet.noneOf(E.class);
        try {
            m.add(F.A);
            fail();
        } catch (ClassCastException ex) {
            ex.printStackTrace();
            assertNotNull(ex.getMessage());
        }
!!!2702235.java!!!	testMiniEnumSetAddAll() : void
        EnumSet m = EnumSet.noneOf(E.class);
        EnumSet n = EnumSet.allOf(F.class);
        try {
            m.addAll(n);
            fail();
        } catch (ClassCastException ex) {
            ex.printStackTrace();
            assertNotNull(ex.getMessage());
        }
!!!2702363.java!!!	testHugeEnumSetAdd() : void
        EnumSet m = EnumSet.noneOf(HugeE.class);
        try {
            m.add(HugeF.A0);
            fail();
        } catch (ClassCastException ex) {
            ex.printStackTrace();
            assertNotNull(ex.getMessage());
        }
!!!2702491.java!!!	testHugeEnumSetAddAll() : void
        EnumSet m = EnumSet.noneOf(HugeE.class);
        EnumSet n = EnumSet.allOf(HugeF.class);
        try {
            m.addAll(n);
            fail();
        } catch (ClassCastException ex) {
            ex.printStackTrace();
            assertNotNull(ex.getMessage());
        }
