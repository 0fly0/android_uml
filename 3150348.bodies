class SqliteProviderHelperTest
!!!13334156.java!!!	setUp() : void
        mMockDatabase = EasyMock.createMock(DatabaseProxy.class);
        mMutations = 0;
        mMutableHelper = new SqliteProviderHelper(mMockDatabase, TABLE_NAME, DEFAULT_GROUP_BY,
                DEFAULT_SORT_ORDER, MIME_SUB_TYPE, null, true) {
            @Override
            protected void afterMutation(int rowCount) {
                mMutations++;
            }
        };
        mImmutableHelper = new SqliteProviderHelper(mMockDatabase, TABLE_NAME, DEFAULT_GROUP_BY,
                DEFAULT_SORT_ORDER, MIME_SUB_TYPE, PROJECTION_MAP, false);
!!!13334284.java!!!	testGetMimeSubtype() : void
        assertEquals(MIME_SUB_TYPE, mImmutableHelper.getMimeSubType());
!!!13334412.java!!!	testInsert() : void
        expect(mMockDatabase.insert(TABLE_NAME, CONTENT_VALUES)).andReturn(12345L);
        replay(mMockDatabase);
        assertEquals(12345L, mMutableHelper.insert(CONTENT_VALUES));
        assertEquals(1, mMutations);
        verify(mMockDatabase);
!!!13334540.java!!!	testInsertImmutable() : void
        try {
            mImmutableHelper.insert(CONTENT_VALUES);
            fail("Should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException e) { /* pass */ }
        assertEquals(0, mMutations);
!!!13334668.java!!!	testUpdate() : void
        expect(mMockDatabase.update(TABLE_NAME, CONTENT_VALUES, WHERE, WHERE_ARGS)).andReturn(1);
        replay(mMockDatabase);
        assertEquals(1, mMutableHelper.update(CONTENT_VALUES, WHERE, WHERE_ARGS));
        assertEquals(1, mMutations);
        verify(mMockDatabase);
!!!13334796.java!!!	testUpdateImmutable() : void
        try {
            mImmutableHelper.update(CONTENT_VALUES, WHERE, WHERE_ARGS);
            fail("Should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException e) { /* pass */ }
        assertEquals(0, mMutations);
!!!13334924.java!!!	testDelete() : void
        expect(mMockDatabase.delete(TABLE_NAME, WHERE, WHERE_ARGS)).andReturn(1);
        replay(mMockDatabase);
        assertEquals(1, mMutableHelper.delete(WHERE, WHERE_ARGS));
        assertEquals(1, mMutations);
        verify(mMockDatabase);
!!!13335052.java!!!	testDeleteImmutable() : void
        try {
            mImmutableHelper.delete(WHERE, WHERE_ARGS);
            fail("Should have thrown UnsupportedOperationException");
        } catch (UnsupportedOperationException e) { /* pass */ }
        assertEquals(0, mMutations);
!!!13335180.java!!!	testProjectionQuery() : void
        expect(mMockDatabase.query(
                "SELECT actual_column1, actual_column2, actual_column3 FROM table_name "
                + "WHERE (_id = ?) GROUP BY column3 ORDER BY column1 desc", WHERE_ARGS))
                .andReturn(RESULTS);
        replay(mMockDatabase);
        assertEquals(RESULTS,
                mImmutableHelper.query(QUERY_URI, PROJECTION, WHERE, WHERE_ARGS, null, null));
        assertEquals(0, mMutations);
        verify(mMockDatabase);
!!!13335308.java!!!	testSortQuery() : void
        expect(mMockDatabase.query(
                "SELECT column1, column2, column3 FROM table_name WHERE (_id = ?) "
                + "GROUP BY column3 ORDER BY column2 asc", WHERE_ARGS)).andReturn(RESULTS);
        replay(mMockDatabase);
        assertEquals(RESULTS,
                mMutableHelper.query(QUERY_URI, PROJECTION, WHERE, WHERE_ARGS, OTHER_SORT_ORDER,
                        null));
        assertEquals(0, mMutations);
        verify(mMockDatabase);
!!!13335436.java!!!	testLimitQuery() : void
        expect(mMockDatabase.query(
                "SELECT column1, column2, column3 FROM table_name WHERE (_id = ?) "
                + "GROUP BY column3 ORDER BY column1 desc LIMIT 5", WHERE_ARGS)).andReturn(RESULTS);
        replay(mMockDatabase);
        assertEquals(RESULTS,
                mMutableHelper.query(QUERY_URI, PROJECTION, WHERE, WHERE_ARGS, null, LIMIT));
        assertEquals(0, mMutations);
        verify(mMockDatabase);
