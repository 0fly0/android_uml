class VideoSelector
!!!12737292.java!!!	createLaunchIntent(inout ctx : Context, in url : String) : Intent
        boolean checked = mMetadataCheckbox.isChecked();
        Intent ret_val = new Intent(ctx,
                            checked ? MetadataList.class : VideoViewTest.class);
        ret_val.setData(Uri.parse(url));
        ret_val.putExtra(VideoViewTest.LOOPING_EXTRA_NAME,
                         mLoopingCheckbox.isChecked());
        return ret_val;
!!!12737420.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.video_selector);

        mSelectList  = (ListView) findViewById(R.id.select_list);
        final Button playButton = (Button) findViewById(R.id.play_button);
        mUrlText = (EditText) findViewById(R.id.video_selection_input);
        mSelectItems = createVil(TEST_VID_STASH);

        mSelectList.setAdapter(mSelectItems);
        mSelectList.setOnItemClickListener(mSelectHandler);

        playButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Intent launch = createLaunchIntent(
                        VideoSelector.this,
                        mUrlText.getText().toString());
                startActivity(launch);
            }
        });

        mMetadataCheckbox = (CheckBox) findViewById(R.id.metadata_checkbox);
        mMetadataCheckbox.setChecked(false);

        mLoopingCheckbox = (CheckBox) findViewById(R.id.looping_checkbox);
        mLoopingCheckbox.setChecked(false);
!!!12737548.java!!!	onBackPressed() : void
        if ((null != mSelectItems) &&
            (null != mSelectHandler) &&
            !mSelectItems.getIsRoot()) {
            mSelectHandler.onItemClick(null, null, 0, 0);
        } else {
            finish();
        }
!!!12738828.java!!!	createVil(in p : String) : VideoItemList
        boolean is_root = TEST_VID_STASH.equals(p);

        File dir = new File(p);
        if (!dir.isDirectory() || !dir.canRead())
            return null;

        VideoItemList retVal = new VideoItemList(p, is_root);

        // If this is not the root directory, go ahead and add the back link to
        // our parent.
        if (!is_root)
            retVal.add(new VideoItem("..",
                                     dir.getParentFile().getAbsolutePath(),
                                     true));

        // Make a sorted list of directories and files contained in this
        // directory.
        TreeMap<String, VideoItem> dirs  = new TreeMap<String, VideoItem>();
        TreeMap<String, VideoItem> files = new TreeMap<String, VideoItem>();
        
        File search_dir = new File(p);
        File[] flist = search_dir.listFiles();
        if (null == flist)
            return retVal;

        for (File f : flist) {
            if (f.canRead()) {
                if (f.isFile()) {
                    String fname = f.getName();
                    VideoItem newItem = null;

                    if (fname.endsWith(".url")) {
                        newItem = VideoItem.createFromLinkFile(f);
                    } else {
                        String url = "file://" + f.getAbsolutePath();
                        newItem = new VideoItem(fname, url, false);
                    }

                    if (null != newItem)
                        files.put(newItem.getName(), newItem);
                } else
                if (f.isDirectory()) {
                    VideoItem newItem = new VideoItem(
                            f.getName(),
                            f.getAbsolutePath(),
                            true);
                    dirs.put(newItem.getName(), newItem);
                }
            }
        }

        // now add the the sorted directories to the result set.
        for (VideoItem vi : dirs.values())
            retVal.add(vi);
        
        // finally add the the sorted files to the result set.
        for (VideoItem vi : files.values())
            retVal.add(vi);

        return retVal;
