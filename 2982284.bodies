class WFDSinkService
!!!12142092.java!!!	isWFDAVManagerConnected() : boolean
		return mWFDAVManager == null ? false : true;
!!!12142348.java!!!	onBind(inout intent : Intent) : IBinder
		return mBinder;
!!!12142476.java!!!	loadPreference() : void
		SharedPreferences sharedata = getSharedPreferences("preferences", 0);
		WFDDeviceCapability.debugMode = sharedata.getBoolean("debugMode", false);
		WFDDeviceCapability.CertMode = sharedata.getBoolean("CertMode", false);
		WFDDeviceCapability.groupOwnerIntent = sharedata.getInt("groupOwnerIntent", 7);
		WFDDeviceCapability.operationChannel = sharedata.getInt("operationChannel", 36);
		WFDDeviceCapability.listenChannel = sharedata.getInt("listenChannel", 6);
		WFDDeviceCapability.use40MBandwidth = sharedata.getBoolean("use40MBandwidth", true);
		WFDDeviceCapability.autoFind = sharedata.getBoolean("autoFind", true);
		WFDDeviceCapability.autoGO = sharedata.getBoolean("autoGO", false);
		WFDDeviceCapability.dynamicDebugInfo = sharedata.getBoolean("dynamicDebugInfo", false);
		WFDDeviceCapability.uibc = sharedata.getBoolean("uibc", false);
		WFDDeviceCapability.deviceRole = WFDDeviceCapability.SINK;
		WFDDeviceCapability.activeConnection = sharedata.getBoolean("activeConnection", false);
		WFDDeviceCapability.autoStreaming = sharedata.getBoolean("autoStreaming", true);
!!!12142604.java!!!	onCreate() : void
		super.onCreate();
		Log.i(TAG, "onCreate");
		// Get the notification service to show tips on status bar
		mNM = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
		// Get the ActivityManager to show the dynamic debug info
		mActivityManager = ActivityManagerNative.asInterface(ServiceManager.checkService("activity"));
		// Get the WFDAVManager service to control the RTSP session
		IBinder binder = ServiceManager.getService(WFDDeviceCapability.REAL_AVMANAGER_SERVICE_NAME);
		mWFDAVManager = IWFDAVManager.Stub.asInterface(binder);
		if (mWFDAVManager != null) {
			Log.i(TAG, "Connect to WFDAVManager succeed.");
		}
		// Get the WiFi P2p service
		mWifiP2pManager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);
		mChannel = mWifiP2pManager.initialize(this, getMainLooper(), null);

		loadPreference();

		// Start the state machine
		initStateMachine();
		// Register the receiver
		intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);
		intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);
		intentFilter.addAction(WFDSinkService.WIFI_DISPLAY_SINK_WPS_MESSAGE);
		receiver = new WFDSinkServiceReceiver(mWifiP2pManager, mChannel, mWFDSinkStateMachine, this);
		registerReceiver(receiver, intentFilter);
		mSelf = this;

		Notification noti = new Notification.Builder(this)
			.setContentTitle("Wifi Display Service Stopped!")
			.setContentText("Need reboot to enable it")
			.build();
		startForeground(1, noti);
!!!12142732.java!!!	onStartCommand(inout intent : Intent, in flags : int, in startId : int) : int
		return START_STICKY;
!!!12142860.java!!!	onDestroy() : void
		Log.i(TAG, "onDestroy WFDSinkService");
		mNM.cancelAll();
		if (receiver != null) {
			unregisterReceiver(receiver);
		}
		this.removeGroup();
		super.onDestroy();
!!!12142988.java!!!	showNotification(in tipID : int) : void
		CharSequence text = getText(tipID);
		PendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, WFDSinkActivity.class), 0);
		Builder nb = new Notification.Builder(this);
		nb.setDefaults(Notification.DEFAULT_SOUND);
		nb.setContentIntent(contentIntent);
		nb.setContentTitle(getText(R.string.wfd_sink_service_label));
		nb.setContentText(text);
		nb.setSmallIcon(R.drawable.sink_notification);
		nb.setTicker(text);
		Notification notification = nb.build();
		notification.flags = Notification.FLAG_NO_CLEAR;
		mNM.notify(NOTIFICATION_STATE, notification);
!!!12143116.java!!!	startClient(inout surface : Surface) : void
		try {
			Log.i(TAG, "Start WFD Session Client " + serverIP + ":" + serverPort + " hdcpPort=" + hdcpPort + " timeoutMs=" + timeoutMs + " listener="
					+ mWFDSessionClientListener.toString() + " surface=" + surface.toString());
			// In case of mediaServer restarts
			if (mWFDAVManager == null || !mWFDAVManager.asBinder().isBinderAlive()) {
				IBinder binder = ServiceManager.getService(WFDDeviceCapability.REAL_AVMANAGER_SERVICE_NAME);
				mWFDAVManager = IWFDAVManager.Stub.asInterface(binder);
			}
			mWFDAVManager.startWFDSessionClient(serverIP, serverPort, hdcpPort, timeoutMs, mWFDSessionClientListener, surface);
		} catch (RemoteException exception) {
			Log.e(TAG, exception.toString());
		}
!!!12143244.java!!!	teardownClient(in sourceTriggered : int) : void
		try {
			Log.i(TAG, "Teardown WFD Session Client");
			if (mWFDSessionClient != null && mWFDSessionClient.asBinder().isBinderAlive()) {
				mWFDSessionClient.teardown(sourceTriggered);
			}
		} catch (RemoteException exception) {
			Log.e(TAG, exception.toString());
		}
		mWFDSessionClient = null;
!!!12143372.java!!!	resetAVManager() : void
		// TODO : Lepeng is going to check why the reset function does not
		// return;
		/*
		 * try { Log.i(TAG, "Reset WFD AVManager Client"); if (mWFDAVManager !=
		 * null && mWFDAVManager.asBinder().isBinderAlive()) {
		 * mWFDAVManager.reset(); } } catch (RemoteException exception) {
		 * Log.e(TAG, exception.toString()); }
		 */
		mWFDSessionClient = null;
!!!12143500.java!!!	setServerInfo(in wfdRTPPort : int, inout wfdRTPServerIP : InetAddress) : void
		serverPort = wfdRTPPort;
		serverIP = wfdRTPServerIP.getHostAddress();
!!!12143628.java!!!	setServerInfo(in wfdRTPPort : int, in IP : String) : void
		serverPort = wfdRTPPort;
		serverIP = IP;
!!!12143756.java!!!	setHDCPPort(in srcHDCPPort : int) : void
                hdcpPort = srcHDCPPort;
!!!12143884.java!!!	initStateMachine() : void
		mWFDSinkStateMachine = new WFDSinkStateMachine(this);
		mWFDSinkStateMachine.start();
!!!12144012.java!!!	getWFDSinkStateMachine() : WFDSinkStateMachine
		return mWFDSinkStateMachine;
!!!12144140.java!!!	registerWFDDeviceInfo(inout wfdEnabled : boolean) : void
		WifiP2pWfdInfo wfdInfo = new WifiP2pWfdInfo();
		wfdInfo.setWfdEnabled(wfdEnabled);
		wfdInfo.setDeviceType(WifiP2pWfdInfo.PRIMARY_SINK);
		wfdInfo.setSessionAvailable(wfdEnabled);
		wfdInfo.setControlPort(7236);
		wfdInfo.setMaxThroughput(50);
		mWifiP2pManager.setWFDInfo(mChannel, wfdInfo, new ActionListener() {
			@Override
			public void onSuccess() {
				Log.i(TAG, "Register WFD Device Info Succeed.");
				mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.REGISTER_DEVICE_INFO_RESULT, true);
			}

			@Override
			public void onFailure(int reasonCode) {
				Log.e(TAG, "Register WFD Device Info Failed:" + reasonCode);
				mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.REGISTER_DEVICE_INFO_RESULT, false);
			}
		});

		mWFDSinkStateMachine.sendMessageDelayed(WFDSinkStateMachine.REGISTER_DEVICE_INFO_TIMEOUT,
				WFDSinkStateMachine.REGISTER_DEVICE_INFO_TIMEOUT_TIME);
!!!12144268.java!!!	resetWFDDeviceInfo(inout available : boolean) : void
		if (available) {
			Log.i(TAG, "Set WFD session status to available");
		} else {
			Log.i(TAG, "Set WFD session status to unavailable");
		}
		WifiP2pWfdInfo wfdInfo = new WifiP2pWfdInfo();
		wfdInfo.setWfdEnabled(true);
		wfdInfo.setDeviceType(WifiP2pWfdInfo.PRIMARY_SINK);
		wfdInfo.setSessionAvailable(available);
		wfdInfo.setControlPort(7236);
		wfdInfo.setMaxThroughput(50);
		mWifiP2pManager.setWFDInfo(mChannel, wfdInfo, new ActionListener() {
			@Override
			public void onSuccess() {
				Log.i(TAG, "Set WFD session status succeed.");
				mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.REGISTER_DEVICE_INFO_RESULT, true);
			}

			@Override
			public void onFailure(int reasonCode) {
				Log.i(TAG, "Set WFD session status failed.");
				mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.REGISTER_DEVICE_INFO_RESULT, false);
			}
		});
!!!12144396.java!!!	destroyP2pConnection() : void
		mWifiP2pManager.removeGroup(mChannel, new ActionListener() {

			@Override
			public void onFailure(int reasonCode) {
				//Toast.makeText(WFDSinkService.this, "Disconnect failed. Reason:" + reasonCode, Toast.LENGTH_SHORT).show();
				Log.e(TAG, "Disconnect failed. Reason:" + reasonCode);
			}

			@Override
			public void onSuccess() {
				//Toast.makeText(WFDSinkService.this, "Disconnect success.", Toast.LENGTH_SHORT).show();
				Log.d(TAG, "Disconnect success.");
			}
		});
!!!12144524.java!!!	setWifiP2pEnabled(inout enabled : boolean) : void
		if (enabled) {
			mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.USER_TURN_ON_WIFI_DIRECT);
		} else {
			mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.USER_TURN_OFF_WIFI_DIRECT);
		}
!!!12144652.java!!!	setOperationChannel(in operationChannel : int) : void

		mWifiP2pManager.setOperationChannel(mChannel, operationChannel, new ActionListener() {

			@Override
			public void onSuccess() {
				Log.i(TAG, "Set operation channel succeed.");
			}

			@Override
			public void onFailure(int reasonCode) {
				Log.e(TAG, "Set operation channel failed. " + reasonCode);
			}
		});

!!!12144780.java!!!	setListenChannel(in listenChannel : int) : void

		//Set Listen Channel only if "CertMode" is set to true
		if(WFDDeviceCapability.CertMode) {
			mWifiP2pManager.setListenChannel(mChannel, listenChannel, new ActionListener() {

				@Override
				public void onSuccess() {
					Log.i(TAG, "Set Listen Channel Succeed.");
				}

				@Override
				public void onFailure(int reasonCode) {
					Log.e(TAG, "Set Listen Channel Failed. " + reasonCode);
				}
			});
		}

!!!12144908.java!!!	setBandwidth(inout use40MBandwidth : boolean) : void
		mWifiP2pManager.setBandwidth(mChannel, use40MBandwidth, new ActionListener() {
			@Override
			public void onSuccess() {
				Log.i(TAG, "Set bandwidth succeed.");
			}

			@Override
			public void onFailure(int reasonCode) {
				Log.e(TAG, "Set bandwidth failed. " + reasonCode);
			}
		});
!!!12145036.java!!!	discoveryPeers() : void
		mWifiP2pManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {

			@Override
			public void onSuccess() {
				Log.i(TAG, "Discovery initiated.");
			}

			@Override
			public void onFailure(int reasonCode) {
				Log.e(TAG, "Discovery failed. " + reasonCode);
			}
		});
!!!12145164.java!!!	setAVManager() : void
		// Get the WFDAVManager service
		IBinder binder = ServiceManager.getService(WFDDeviceCapability.REAL_AVMANAGER_SERVICE_NAME);
		mWFDAVManager = IWFDAVManager.Stub.asInterface(binder);

		if (mWFDAVManager == null) {
			Log.e(TAG, "Connect to WFDAVManager failed.");
		} else {
			Log.i(TAG, "Connect to WFDAVManager succeed.");
		}
!!!12145292.java!!!	wfd_trigger_method(in id : int) : void
		if(mWFDAVManager != null){
			Log.i(TAG, "wfd_trigger_method, id: " + id);
			try{
				mWFDAVManager.wfd_trigger_method(id);
			} catch (RemoteException exception) {
				Log.e(TAG, exception.toString());
			}
		}
!!!12145420.java!!!	showDynamicInfo(inout showDynamicInfo : boolean) : void
		if (mActivityManager == null) {
			Log.e(TAG, "Fail to show dynamic info, ActivityManager is not connected.");
			return;
		}
		if (showDynamicInfo) {
			Log.i(TAG, "Enable dynamic info");
			// mActivityManager.showRuntimeInfo(1);
		} else {
			Log.i(TAG, "Disable dynamic info");
			// mActivityManager.showRuntimeInfo(0);
		}
!!!12145548.java!!!	notifyTouchEvent(inout event : MotionEvent, in surfaceWidth : int, in surfaceHeight : int) : void
		if (!WFDDeviceCapability.uibc) {
			return;
		}

		if (mSourceWidth == 0 || mSourceHeight == 0 || surfaceWidth == 0 || surfaceHeight == 0) {
			return;
		}

		if (mWFDSessionClient != null && mWFDSessionClient.asBinder().isBinderAlive()) {
			try {
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					UIBCLeftMouseTouchDownEvent actionDown = new UIBCLeftMouseTouchDownEvent();
					actionDown.pointerNum = event.getPointerCount();
					actionDown.timestamp = (int) event.getEventTime();
					actionDown.xCoord = new int[actionDown.pointerNum];
					actionDown.yCoord = new int[actionDown.pointerNum];
					for (int i = 0; i < actionDown.pointerNum; i++) {
						actionDown.xCoord[i] = (int) ((float) event.getX(i) / (float) surfaceWidth * (float) mSourceWidth);
						actionDown.yCoord[i] = (int) ((float) event.getY(i) / (float) surfaceHeight * (float) mSourceHeight);
						Log.i(TAG, "ACTION_DOWN event - " + actionDown.xCoord[i] + " * " + actionDown.yCoord[i]);
					}
					mWFDSessionClient.sendUIBCLeftMouseTouchDownEvent(actionDown);
					break;
				case MotionEvent.ACTION_HOVER_ENTER:
				case MotionEvent.ACTION_HOVER_MOVE:
				case MotionEvent.ACTION_HOVER_EXIT:
					UIBCLeftMouseTouchMoveEvent actionMove = new UIBCLeftMouseTouchMoveEvent();
					actionMove.pointerNum = event.getPointerCount();
					actionMove.timestamp = (int) event.getEventTime();
					actionMove.xCoord = new int[actionMove.pointerNum];
					actionMove.yCoord = new int[actionMove.pointerNum];
					for (int i = 0; i < actionMove.pointerNum; i++) {
						actionMove.xCoord[i] = (int) ((float) event.getX(i) / (float) surfaceWidth * (float) mSourceWidth);
						actionMove.yCoord[i] = (int) ((float) event.getY(i) / (float) surfaceHeight * (float) mSourceHeight);
						Log.i(TAG, "ACTION_MOVE event - " + actionMove.xCoord[i] + " * " + actionMove.yCoord[i]);
					}
					mWFDSessionClient.sendUIBCLeftMouseTouchMoveEvent(actionMove);
					break;
				case MotionEvent.ACTION_UP:
					UIBCLeftMouseTouchUpEvent actionUp = new UIBCLeftMouseTouchUpEvent();
					actionUp.pointerNum = event.getPointerCount();
					actionUp.timestamp = (int) event.getEventTime();
					actionUp.xCoord = new int[actionUp.pointerNum];
					actionUp.yCoord = new int[actionUp.pointerNum];
					for (int i = 0; i < actionUp.pointerNum; i++) {
						actionUp.xCoord[i] = (int) ((float) event.getX(i) / (float) surfaceWidth * (float) mSourceWidth);
						actionUp.yCoord[i] = (int) ((float) event.getY(i) / (float) surfaceHeight * (float) mSourceHeight);
						Log.i(TAG, "ACTION_UP event - " + actionUp.xCoord[i] + " * " + actionUp.yCoord[i]);
					}
					mWFDSessionClient.sendUIBCLeftMouseTouchUpEvent(actionUp);
					break;
				default:
					break;
				}
			} catch (RemoteException exception) {
				Log.e(TAG, exception.toString());
			}
		}
!!!12145676.java!!!	createGroup() : void
		mWifiP2pManager.createGroup(mChannel, new ActionListener() {
			@Override
			public void onSuccess() {
				Log.i(TAG, "CreateGroup succeed.");
			}

			@Override
			public void onFailure(int reasonCode) {
				Log.e(TAG, "CreateGroup failed. " + reasonCode);
			}
		});
!!!12145804.java!!!	removeGroup() : void
		mWifiP2pManager.removeGroup(mChannel, new ActionListener() {
			@Override
			public void onSuccess() {
				Log.i(TAG, "removeGroup succeed.");
			}

			@Override
			public void onFailure(int reasonCode) {
				Log.e(TAG, "removeGroup failed. " + reasonCode);
			}
		});
!!!12145932.java!!!	keyEventToAscii(inout e : KeyEvent) : int
		int ascii = 0;

		switch(e.getKeyCode()) {
			case KeyEvent.KEYCODE_DEL:
				ascii = 0x08;	// ascii character BS - backspace
				break;
			case KeyEvent.KEYCODE_TAB:
				ascii = 0x09;	// ascii character TAB - horizontal tab
				break;
			case KeyEvent.KEYCODE_ENTER:
				ascii = 0x0D;	// ascii character CR - carriage return
				break;
			case KeyEvent.KEYCODE_ESCAPE:
				ascii = 0x1B;	// ascii character ESC - escape
				break;
			case KeyEvent.KEYCODE_FORWARD_DEL:
				ascii = 0x7F;	// ascii character DEL - delete
				break;
			default:
				ascii = e.getUnicodeChar(e.getMetaState()); // ascii charecter between space (0x20) and ~ (7E)
				break;                                      // numbers, letters, comma, question mark ...
		}

		return ascii;
!!!12146060.java!!!	notifyKeyEvent(inout e : KeyEvent) : void
		if (!WFDDeviceCapability.uibc)
			return;

		if (mWFDSessionClient != null && mWFDSessionClient.asBinder().isBinderAlive()) {
			try {
				switch (e.getAction()) {
				case KeyEvent.ACTION_DOWN:
					UIBCKeyDownEvent keyDownEvent = new UIBCKeyDownEvent();
					keyDownEvent.timestamp = (int) System.currentTimeMillis();
					keyDownEvent.keyCode1 = keyEventToAscii(e);
					mWFDSessionClient.sendUIBCKeyDownEvent(keyDownEvent);
					Log.i(TAG, "KeyDown: " + keyDownEvent.keyCode1);
					break;
				case KeyEvent.ACTION_UP:
					UIBCKeyUpEvent keyUpEvent = new UIBCKeyUpEvent();
					keyUpEvent.timestamp = (int) System.currentTimeMillis();
					keyUpEvent.keyCode1 = keyEventToAscii(e);
					mWFDSessionClient.sendUIBCKeyUpEvent(keyUpEvent);
					Log.i(TAG, "KeyUp:" + keyUpEvent.keyCode1);
					break;
				default:
					Log.i(TAG, "Unhandled event - " + e);
					break;
				}
			} catch (RemoteException exception) {
				Log.e(TAG, exception.toString());
			}
		}
!!!12146188.java!!!	connect(in address : String, in pin : String, in wps_method : int) : void
		WifiP2pConfig config = new WifiP2pConfig();
		config.deviceAddress = address;
		config.wps.setup = wps_method;
		config.wps.pin = pin;
		config.groupOwnerIntent = WFDDeviceCapability.groupOwnerIntent;
		mWifiP2pManager.connect(mChannel, config, new ActionListener() {
			@Override
			public void onSuccess() {
				// WiFiDisplayBroadcastReceiver will notify us. Ignore for now.
			}

			@Override
			public void onFailure(int reason) {
				Toast.makeText(WFDSinkService.this, "Connect failed.", Toast.LENGTH_SHORT).show();
				Log.e(TAG, "Connect failed. " + reason);
			}
		});
		mWFDSinkStateMachine.sendMessageDelayed(WFDSinkStateMachine.P2P_CONNECT_TIMEOUT,
				WFDSinkStateMachine.P2P_CONNECT_TIMEOUT_TIME);
!!!12146316.java!!!	cancelConnect() : void
		mWifiP2pManager.cancelConnect(mChannel, new ActionListener() {
			@Override
			public void onSuccess() {
				Log.i(TAG, "Cancel connect succeed.");
			}

			@Override
			public void onFailure(int reasonCode) {
				Log.e(TAG, "Cancel connect failed. " + reasonCode);
			}
		});
