class AudioStreamInSource
!!!330124.cpp!!!	AudioStreamInSource(inout stream : audio_stream_in)
    ALOG_ASSERT(stream != NULL);
!!!330380.cpp!!!	negotiate(in offers : NBAIO_Format, in numOffers : size_t, in counterOffers : NBAIO_Format, inout numCounterOffers : size_t) : ssize_t
    if (mFormat == Format_Invalid) {
        mStreamBufferSizeBytes = mStream->common.get_buffer_size(&mStream->common);
        audio_format_t streamFormat = mStream->common.get_format(&mStream->common);
        if (streamFormat == AUDIO_FORMAT_PCM_16_BIT) {
            uint32_t sampleRate = mStream->common.get_sample_rate(&mStream->common);
            audio_channel_mask_t channelMask =
                    (audio_channel_mask_t) mStream->common.get_channels(&mStream->common);
            mFormat = Format_from_SR_C(sampleRate, popcount(channelMask));
            mBitShift = Format_frameBitShift(mFormat);
        }
    }
    return NBAIO_Source::negotiate(offers, numOffers, counterOffers, numCounterOffers);
!!!330508.cpp!!!	framesOverrun() : size_t
    uint32_t framesOverrun = mStream->get_input_frames_lost(mStream);
    if (framesOverrun > 0) {
        mFramesOverrun += framesOverrun;
        // FIXME only increment for contiguous ranges
        ++mOverruns;
    }
    return mFramesOverrun;
!!!330892.cpp!!!	read(inout buffer : void, in count : size_t) : ssize_t
    if (CC_UNLIKELY(mFormat == Format_Invalid)) {
        return NEGOTIATE;
    }
    ssize_t bytesRead = mStream->read(mStream, buffer, count << mBitShift);
    if (bytesRead > 0) {
        size_t framesRead = bytesRead >> mBitShift;
        mFramesRead += framesRead;
        return framesRead;
    } else {
        return bytesRead;
    }
