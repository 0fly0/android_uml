class CharsetDecoder
!!!789787.java!!!	CharsetDecoder(inout charset : Charset, in averageCharsPerByte : float, in maxCharsPerByte : float)
        if (averageCharsPerByte <= 0 || maxCharsPerByte <= 0) {
            throw new IllegalArgumentException("averageCharsPerByte and maxCharsPerByte must be positive");
        }
        if (averageCharsPerByte > maxCharsPerByte) {
            throw new IllegalArgumentException("averageCharsPerByte is greater than maxCharsPerByte");
        }
        this.averageCharsPerByte = averageCharsPerByte;
        this.maxCharsPerByte = maxCharsPerByte;
        cs = charset;
        status = INIT;
        malformedInputAction = CodingErrorAction.REPORT;
        unmappableCharacterAction = CodingErrorAction.REPORT;
        replacementChars = "\ufffd";
!!!789915.java!!!	averageCharsPerByte() : float
        return averageCharsPerByte;
!!!790043.java!!!	charset() : Charset
        return cs;
!!!790171.java!!!	decode(inout in : ByteBuffer) : CharBuffer
        reset();
        int length = (int) (in.remaining() * averageCharsPerByte);
        CharBuffer output = CharBuffer.allocate(length);
        CoderResult result = null;
        while (true) {
            result = decode(in, output, false);
            checkCoderResult(result);
            if (result.isUnderflow()) {
                break;
            } else if (result.isOverflow()) {
                output = allocateMore(output);
            }
        }
        result = decode(in, output, true);
        checkCoderResult(result);

        while (true) {
            result = flush(output);
            checkCoderResult(result);
            if (result.isOverflow()) {
                output = allocateMore(output);
            } else {
                break;
            }
        }

        output.flip();
        status = FLUSH;
        return output;
!!!790299.java!!!	checkCoderResult(inout result : CoderResult) : void
        if (result.isMalformed() && malformedInputAction == CodingErrorAction.REPORT) {
            throw new MalformedInputException(result.length());
        } else if (result.isUnmappable() && unmappableCharacterAction == CodingErrorAction.REPORT) {
            throw new UnmappableCharacterException(result.length());
        }
!!!790427.java!!!	allocateMore(inout output : CharBuffer) : CharBuffer
        if (output.capacity() == 0) {
            return CharBuffer.allocate(1);
        }
        CharBuffer result = CharBuffer.allocate(output.capacity() * 2);
        output.flip();
        result.put(output);
        return result;
!!!790555.java!!!	decode(inout in : ByteBuffer, inout out : CharBuffer, inout endOfInput : boolean) : CoderResult
        /*
         * status check
         */
        if ((status == FLUSH) || (!endOfInput && status == END)) {
            throw new IllegalStateException();
        }

        CoderResult result = null;

        // begin to decode
        while (true) {
            CodingErrorAction action = null;
            try {
                result = decodeLoop(in, out);
            } catch (BufferOverflowException ex) {
                // unexpected exception
                throw new CoderMalfunctionError(ex);
            } catch (BufferUnderflowException ex) {
                // unexpected exception
                throw new CoderMalfunctionError(ex);
            }

            /*
             * result handling
             */
            if (result.isUnderflow()) {
                int remaining = in.remaining();
                status = endOfInput ? END : ONGOING;
                if (endOfInput && remaining > 0) {
                    result = CoderResult.malformedForLength(remaining);
                } else {
                    return result;
                }
            }
            if (result.isOverflow()) {
                return result;
            }
            // set coding error handle action
            action = malformedInputAction;
            if (result.isUnmappable()) {
                action = unmappableCharacterAction;
            }
            // If the action is IGNORE or REPLACE, we should continue decoding.
            if (action == CodingErrorAction.REPLACE) {
                if (out.remaining() < replacementChars.length()) {
                    return CoderResult.OVERFLOW;
                }
                out.put(replacementChars);
            } else {
                if (action != CodingErrorAction.IGNORE)
                    return result;
            }
            in.position(in.position() + result.length());
        }
!!!790811.java!!!	detectedCharset() : Charset
        throw new UnsupportedOperationException();
!!!790939.java!!!	flush(inout out : CharBuffer) : CoderResult
        if (status != END && status != INIT) {
            throw new IllegalStateException();
        }
        CoderResult result = implFlush(out);
        if (result == CoderResult.UNDERFLOW) {
            status = FLUSH;
        }
        return result;
!!!791067.java!!!	implFlush(inout out : CharBuffer) : CoderResult
        return CoderResult.UNDERFLOW;
!!!791195.java!!!	implOnMalformedInput(inout newAction : CodingErrorAction) : void
        // default implementation is empty
!!!791323.java!!!	implOnUnmappableCharacter(inout newAction : CodingErrorAction) : void
        // default implementation is empty
!!!791451.java!!!	implReplaceWith(inout newReplacement : String) : void
        // default implementation is empty
!!!791579.java!!!	implReset() : void
        // default implementation is empty
!!!791707.java!!!	isAutoDetecting() : boolean
        return false;
!!!791835.java!!!	isCharsetDetected() : boolean
        throw new UnsupportedOperationException();
!!!791963.java!!!	malformedInputAction() : CodingErrorAction
        return malformedInputAction;
!!!792091.java!!!	maxCharsPerByte() : float
        return maxCharsPerByte;
!!!792219.java!!!	onMalformedInput(inout newAction : CodingErrorAction) : CharsetDecoder
        if (newAction == null) {
            throw new IllegalArgumentException("newAction == null");
        }
        malformedInputAction = newAction;
        implOnMalformedInput(newAction);
        return this;
!!!792347.java!!!	onUnmappableCharacter(inout newAction : CodingErrorAction) : CharsetDecoder
        if (newAction == null) {
            throw new IllegalArgumentException("newAction == null");
        }
        unmappableCharacterAction = newAction;
        implOnUnmappableCharacter(newAction);
        return this;
!!!792475.java!!!	replacement() : String
        return replacementChars;
!!!792603.java!!!	replaceWith(inout replacement : String) : CharsetDecoder
        if (replacement == null) {
            throw new IllegalArgumentException("replacement == null");
        }
        if (replacement.isEmpty()) {
            throw new IllegalArgumentException("replacement.isEmpty()");
        }
        if (replacement.length() > maxCharsPerByte()) {
            throw new IllegalArgumentException("replacement length > maxCharsPerByte: " +
                    replacement.length() + " > " + maxCharsPerByte());
        }
        replacementChars = replacement;
        implReplaceWith(replacement);
        return this;
!!!792731.java!!!	reset() : CharsetDecoder
        status = INIT;
        implReset();
        return this;
!!!792859.java!!!	unmappableCharacterAction() : CodingErrorAction
        return unmappableCharacterAction;
