class TabletStatusBarView
!!!7729036.java!!!	TabletStatusBarView(inout context : Context)
        this(context, null);
!!!7729164.java!!!	TabletStatusBarView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        mDelegateHelper = new DelegateViewHelper(this);
!!!7729292.java!!!	setDelegateView(inout view : View) : void
        mDelegateHelper.setDelegateView(view);
!!!7729420.java!!!	setBar(inout phoneStatusBar : BaseStatusBar) : void
        mDelegateHelper.setBar(phoneStatusBar);
!!!7729548.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        if (mDelegateHelper != null) {
            mDelegateHelper.onInterceptTouchEvent(event);
        }
        return true;
!!!7729676.java!!!	onLayout(inout changed : boolean, in left : int, in top : int, in right : int, in bottom : int) : void
        super.onLayout(changed, left, top, right, bottom);
        // Find the view we wish to grab events from in order to detect search gesture.
        // Depending on the device, this will be one of the id's listed below.
        // If we don't find one, we'll use the view provided in the constructor above (this view).
        View view = findViewById(R.id.navigationArea);
        if (view == null) {
            view = findViewById(R.id.nav_buttons);
        }
        mDelegateHelper.setSourceView(view);
        mDelegateHelper.setInitialTouchRegion(view);
!!!7729804.java!!!	onInterceptTouchEvent(inout ev : MotionEvent) : boolean
        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
            if (TabletStatusBar.DEBUG) {
                Slog.d(TabletStatusBar.TAG, "TabletStatusBarView intercepting touch event: " + ev);
            }
            // do not close the recents panel here- the intended behavior is that recents is dismissed
            // on touch up when clicking on status bar buttons
            // TODO: should we be closing the notification panel and input methods panel?
            mHandler.removeMessages(TabletStatusBar.MSG_CLOSE_NOTIFICATION_PANEL);
            mHandler.sendEmptyMessage(TabletStatusBar.MSG_CLOSE_NOTIFICATION_PANEL);
            mHandler.removeMessages(TabletStatusBar.MSG_CLOSE_INPUT_METHODS_PANEL);
            mHandler.sendEmptyMessage(TabletStatusBar.MSG_CLOSE_INPUT_METHODS_PANEL);
            mHandler.removeMessages(TabletStatusBar.MSG_STOP_TICKER);
            mHandler.sendEmptyMessage(TabletStatusBar.MSG_STOP_TICKER);

            for (int i=0; i < mPanels.length; i++) {
                if (mPanels[i] != null && mPanels[i].getVisibility() == View.VISIBLE) {
                    if (eventInside(mIgnoreChildren[i], ev)) {
                        if (TabletStatusBar.DEBUG) {
                            Slog.d(TabletStatusBar.TAG,
                                    "TabletStatusBarView eating event for view: "
                                    + mIgnoreChildren[i]);
                        }
                        return true;
                    }
                }
            }
        }
        if (TabletStatusBar.DEBUG) {
            Slog.d(TabletStatusBar.TAG, "TabletStatusBarView not intercepting event");
        }
        if (mDelegateHelper != null && mDelegateHelper.onInterceptTouchEvent(ev)) {
            return true;
        }
        return super.onInterceptTouchEvent(ev);
!!!7729932.java!!!	eventInside(inout v : View, inout ev : MotionEvent) : boolean
        // assume that x and y are window coords because we are.
        final int x = (int)ev.getX();
        final int y = (int)ev.getY();

        final int[] p = mPos;
        v.getLocationInWindow(p);

        final int l = p[0];
        final int t = p[1];
        final int r = p[0] + v.getWidth();
        final int b = p[1] + v.getHeight();

        return x >= l && x < r && y >= t && y < b;
!!!7730060.java!!!	setHandler(inout h : Handler) : void
        mHandler = h;
!!!7730188.java!!!	setIgnoreChildren(in index : int, inout ignore : View, inout panel : View) : void
        mIgnoreChildren[index] = ignore;
        mPanels[index] = panel;
