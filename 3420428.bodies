class ByteCatchList
!!!14667788.java!!!	ByteCatchList(in count : int)
        super(count);
!!!14667916.java!!!	byteLength() : int
        return 2 + size() * 8;
!!!14668044.java!!!	get(in n : int) : Item
        return (Item) get0(n);
!!!14668172.java!!!	set(in n : int, inout item : Item) : void
        if (item == null) {
            throw new NullPointerException("item == null");
        }

        set0(n, item);
!!!14668300.java!!!	set(in n : int, in startPc : int, in endPc : int, in handlerPc : int, inout exceptionClass : CstType) : void
        set0(n, new Item(startPc, endPc, handlerPc, exceptionClass));
!!!14668428.java!!!	listFor(in pc : int) : ByteCatchList
        int sz = size();
        Item[] resultArr = new Item[sz];
        int resultSz = 0;

        for (int i = 0; i < sz; i++) {
            Item one = get(i);
            if (one.covers(pc) && typeNotFound(one, resultArr, resultSz)) {
                resultArr[resultSz] = one;
                resultSz++;
            }
        }

        if (resultSz == 0) {
            return EMPTY;
        }

        ByteCatchList result = new ByteCatchList(resultSz);
        for (int i = 0; i < resultSz; i++) {
            result.set(i, resultArr[i]);
        }

        result.setImmutable();
        return result;
!!!14668556.java!!!	typeNotFound(inout item : Item, inout arr : Item, in count : int) : boolean
        CstType type = item.getExceptionClass();

        for (int i = 0; i < count; i++) {
            CstType one = arr[i].getExceptionClass();
            if ((one == type) || (one == CstType.OBJECT)) {
                return false;
            }
        }

        return true;
!!!14668684.java!!!	toTargetList(in noException : int) : IntList
        if (noException < -1) {
            throw new IllegalArgumentException("noException < -1");
        }

        boolean hasDefault = (noException >= 0);
        int sz = size();

        if (sz == 0) {
            if (hasDefault) {
                /*
                 * The list is empty, but there is a no-exception
                 * address; so, the result is just that address.
                 */
                return IntList.makeImmutable(noException);
            }
            /*
             * The list is empty and there isn't even a no-exception
             * address.
             */
            return IntList.EMPTY;
        }

        IntList result = new IntList(sz + (hasDefault ? 1 : 0));

        for (int i = 0; i < sz; i++) {
            result.add(get(i).getHandlerPc());
        }

        if (hasDefault) {
            result.add(noException);
        }

        result.setImmutable();
        return result;
!!!14668812.java!!!	toRopCatchList() : TypeList
        int sz = size();
        if (sz == 0) {
            return StdTypeList.EMPTY;
        }

        StdTypeList result = new StdTypeList(sz);

        for (int i = 0; i < sz; i++) {
            result.set(i, get(i).getExceptionClass().getClassType());
        }

        result.setImmutable();
        return result;
