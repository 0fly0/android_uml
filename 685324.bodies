class Looper
!!!3864076.java!!!	prepare() : void
        prepare(true);
!!!3864204.java!!!	prepare(inout quitAllowed : boolean) : void
        if (sThreadLocal.get() != null) {
            throw new RuntimeException("Only one Looper may be created per thread");
        }
        sThreadLocal.set(new Looper(quitAllowed));
!!!3864332.java!!!	prepareMainLooper() : void
        prepare(false);
        synchronized (Looper.class) {
            if (sMainLooper != null) {
                throw new IllegalStateException("The main Looper has already been prepared.");
            }
            sMainLooper = myLooper();
        }
!!!3864460.java!!!	getMainLooper() : Looper
        synchronized (Looper.class) {
            return sMainLooper;
        }
!!!3864588.java!!!	loop() : void
        final Looper me = myLooper();
        if (me == null) {
            throw new RuntimeException("No Looper; Looper.prepare() wasn't called on this thread.");
        }
        final MessageQueue queue = me.mQueue;

        // Make sure the identity of this thread is that of the local process,
        // and keep track of what that identity token actually is.
        Binder.clearCallingIdentity();
        final long ident = Binder.clearCallingIdentity();

        for (;;) {
            Message msg = queue.next(); // might block
            if (msg == null) {
                // No message indicates that the message queue is quitting.
                return;
            }

            // This must be in a local variable, in case a UI event sets the logger
            Printer logging = me.mLogging;
            if (logging != null) {
                logging.println(">>>>> Dispatching to " + msg.target + " " +
                        msg.callback + ": " + msg.what);
            }

            msg.target.dispatchMessage(msg);

            if (logging != null) {
                logging.println("<<<<< Finished to " + msg.target + " " + msg.callback);
            }

            // Make sure that during the course of dispatching the
            // identity of the thread wasn't corrupted.
            final long newIdent = Binder.clearCallingIdentity();
            if (ident != newIdent) {
                Log.wtf(TAG, "Thread identity changed from 0x"
                        + Long.toHexString(ident) + " to 0x"
                        + Long.toHexString(newIdent) + " while dispatching to "
                        + msg.target.getClass().getName() + " "
                        + msg.callback + " what=" + msg.what);
            }

            msg.recycle();
        }
!!!3864716.java!!!	myLooper() : Looper
        return sThreadLocal.get();
!!!3864844.java!!!	setMessageLogging(inout printer : Printer) : void
        mLogging = printer;
!!!3864972.java!!!	myQueue() : MessageQueue
        return myLooper().mQueue;
!!!3865100.java!!!	Looper(inout quitAllowed : boolean)
        mQueue = new MessageQueue(quitAllowed);
        mRun = true;
        mThread = Thread.currentThread();
!!!3865228.java!!!	quit() : void
        mQueue.quit();
!!!3865356.java!!!	postSyncBarrier() : int
        return mQueue.enqueueSyncBarrier(SystemClock.uptimeMillis());
!!!3865484.java!!!	removeSyncBarrier(in token : int) : void
        mQueue.removeSyncBarrier(token);
!!!3865612.java!!!	getThread() : Thread
        return mThread;
!!!3865740.java!!!	getQueue() : MessageQueue
        return mQueue;
!!!3865868.java!!!	dump(inout pw : Printer, in prefix : String) : void
        pw = PrefixPrinter.create(pw, prefix);
        pw.println(this.toString());
        pw.println("mRun=" + mRun);
        pw.println("mThread=" + mThread);
        pw.println("mQueue=" + ((mQueue != null) ? mQueue : "(null"));
        if (mQueue != null) {
            synchronized (mQueue) {
                long now = SystemClock.uptimeMillis();
                Message msg = mQueue.mMessages;
                int n = 0;
                while (msg != null) {
                    pw.println("  Message " + n + ": " + msg.toString(now));
                    n++;
                    msg = msg.next;
                }
                pw.println("(Total messages: " + n + ")");
            }
        }
!!!3865996.java!!!	toString() : String
        return "Looper{" + Integer.toHexString(System.identityHashCode(this)) + "}";
