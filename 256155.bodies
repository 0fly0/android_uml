class Sync
!!!1448987.java!!!	nonfairTryAcquire(in acquires : int) : boolean
            final Thread current = Thread.currentThread();
            int c = getState();
            if (c == 0) {
                if (compareAndSetState(0, acquires)) {
                    setExclusiveOwnerThread(current);
                    return true;
                }
            }
            else if (current == getExclusiveOwnerThread()) {
                int nextc = c + acquires;
                if (nextc < 0) // overflow
                    throw new Error("Maximum lock count exceeded");
                setState(nextc);
                return true;
            }
            return false;
!!!1449115.java!!!	tryRelease(in releases : int) : boolean
            int c = getState() - releases;
            if (Thread.currentThread() != getExclusiveOwnerThread())
                throw new IllegalMonitorStateException();
            boolean free = false;
            if (c == 0) {
                free = true;
                setExclusiveOwnerThread(null);
            }
            setState(c);
            return free;
!!!1449243.java!!!	isHeldExclusively() : boolean
            // While we must in general read state before owner,
            // we don't need to do so to check if current thread is owner
            return getExclusiveOwnerThread() == Thread.currentThread();
!!!1449371.java!!!	newCondition() : ConditionObject
            return new ConditionObject();
!!!1449499.java!!!	getOwner() : Thread
            return getState() == 0 ? null : getExclusiveOwnerThread();
!!!1449627.java!!!	getHoldCount() : int
            return isHeldExclusively() ? getState() : 0;
!!!1449755.java!!!	isLocked() : boolean
            return getState() != 0;
!!!1449883.java!!!	readObject(inout s : ObjectInputStream) : void
            s.defaultReadObject();
            setState(0); // reset to unlocked state
