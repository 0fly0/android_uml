class TreeMap
!!!1388443.java!!!	TreeMap()
        this.comparator = (Comparator<? super K>) NATURAL_ORDER;
!!!1388571.java!!!	TreeMap(inout copyFrom : Map)
        this();
        for (Map.Entry<? extends K, ? extends V> entry : copyFrom.entrySet()) {
            putInternal(entry.getKey(), entry.getValue());
        }
!!!1388699.java!!!	TreeMap(inout comparator : Comparator)
        if (comparator != null) {
            this.comparator = comparator;
        } else {
            this.comparator = (Comparator<? super K>) NATURAL_ORDER;
        }
!!!1388827.java!!!	TreeMap(inout copyFrom : SortedMap)
        Comparator<? super K> sourceComparator = copyFrom.comparator();
        if (sourceComparator != null) {
            this.comparator = sourceComparator;
        } else {
            this.comparator = (Comparator<? super K>) NATURAL_ORDER;
        }
        for (Map.Entry<K, ? extends V> entry : copyFrom.entrySet()) {
            putInternal(entry.getKey(), entry.getValue());
        }
!!!1388955.java!!!	clone() : Object
        try {
            @SuppressWarnings("unchecked") // super.clone() must return the same type
            TreeMap<K, V> map = (TreeMap<K, V>) super.clone();
            map.root = root != null ? root.copy(null) : null;
            map.entrySet = null;
            map.keySet = null;
            return map;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }
!!!1389083.java!!!	size() : int
        return size;
!!!1389211.java!!!	isEmpty() : boolean
        return size == 0;
!!!1389339.java!!!	get(inout key : Object) : V
        Entry<K, V> entry = findByObject(key);
        return entry != null ? entry.getValue() : null;
!!!1389467.java!!!	containsKey(inout key : Object) : boolean
        return findByObject(key) != null;
!!!1389595.java!!!	put(inout key : K, inout value : V) : V
        return putInternal(key, value);
!!!1389723.java!!!	clear() : void
        root = null;
        size = 0;
        modCount++;
!!!1389851.java!!!	remove(inout key : Object) : V
        Node<K, V> node = removeInternalByKey(key);
        return node != null ? node.value : null;
!!!1390107.java!!!	putInternal(inout key : K, inout value : V) : V
        Node<K, V> created = find(key, Relation.CREATE);
        V result = created.value;
        created.value = value;
        return result;
!!!1390235.java!!!	find(inout key : K, inout relation : Relation) : Node
        if (root == null) {
            if (comparator == NATURAL_ORDER && !(key instanceof Comparable)) {
                throw new ClassCastException(key.getClass().getName() + " is not Comparable"); // NullPointerException ok
            }
            if (relation == Relation.CREATE) {
                root = new Node<K, V>(null, key);
                size = 1;
                modCount++;
                return root;
            } else {
                return null;
            }
        }

        /*
         * Micro-optimization: avoid polymorphic calls to Comparator.compare().
         * This is 10% faster for naturally ordered trees.
         */
        @SuppressWarnings("unchecked") // will throw a ClassCastException below if there's trouble
        Comparable<Object> comparableKey = (comparator == NATURAL_ORDER)
                ? (Comparable<Object>) key
                : null;

        Node<K, V> nearest = root;
        while (true) {
            int comparison = (comparableKey != null)
                    ? comparableKey.compareTo(nearest.key)
                    : comparator.compare(key, nearest.key);

            /*
             * We found the requested key.
             */
            if (comparison == 0) {
                switch (relation) {
                    case LOWER:
                        return nearest.prev();
                    case FLOOR:
                    case EQUAL:
                    case CREATE:
                    case CEILING:
                        return nearest;
                    case HIGHER:
                        return nearest.next();
                }
            }

            Node<K, V> child = (comparison < 0) ? nearest.left : nearest.right;
            if (child != null) {
                nearest = child;
                continue;
            }

            /*
             * We found a nearest node. Every key not in the tree has up to two
             * nearest nodes, one lower and one higher.
             */

            if (comparison < 0) { // nearest.key is higher
                switch (relation) {
                    case LOWER:
                    case FLOOR:
                        return nearest.prev();
                    case CEILING:
                    case HIGHER:
                        return nearest;
                    case EQUAL:
                        return null;
                    case CREATE:
                        Node<K, V> created = new Node<K, V>(nearest, key);
                        nearest.left = created;
                        size++;
                        modCount++;
                        rebalance(nearest, true);
                        return created;
                }
            } else { // comparison > 0, nearest.key is lower
                switch (relation) {
                    case LOWER:
                    case FLOOR:
                        return nearest;
                    case CEILING:
                    case HIGHER:
                        return nearest.next();
                    case EQUAL:
                        return null;
                    case CREATE:
                        Node<K, V> created = new Node<K, V>(nearest, key);
                        nearest.right = created;
                        size++;
                        modCount++;
                        rebalance(nearest, true);
                        return created;
                }
            }
        }
!!!1390363.java!!!	findByObject(inout key : Object) : Node
        return find((K) key, EQUAL);
!!!1390491.java!!!	findByEntry(inout entry : Entry) : Node
        Node<K, V> mine = findByObject(entry.getKey());
        boolean valuesEqual = mine != null && Objects.equal(mine.value, entry.getValue());
        return valuesEqual ? mine : null;
!!!1390619.java!!!	removeInternal(inout node : Node) : void
        Node<K, V> left = node.left;
        Node<K, V> right = node.right;
        Node<K, V> originalParent = node.parent;
        if (left != null && right != null) {

            /*
             * To remove a node with both left and right subtrees, move an
             * adjacent node from one of those subtrees into this node's place.
             *
             * Removing the adjacent node may change this node's subtrees. This
             * node may no longer have two subtrees once the adjacent node is
             * gone!
             */

            Node<K, V> adjacent = (left.height > right.height) ? left.last() : right.first();
            removeInternal(adjacent); // takes care of rebalance and size--

            int leftHeight = 0;
            left = node.left;
            if (left != null) {
                leftHeight = left.height;
                adjacent.left = left;
                left.parent = adjacent;
                node.left = null;
            }
            int rightHeight = 0;
            right = node.right;
            if (right != null) {
                rightHeight = right.height;
                adjacent.right = right;
                right.parent = adjacent;
                node.right = null;
            }
            adjacent.height = Math.max(leftHeight, rightHeight) + 1;
            replaceInParent(node, adjacent);
            return;
        } else if (left != null) {
            replaceInParent(node, left);
            node.left = null;
        } else if (right != null) {
            replaceInParent(node, right);
            node.right = null;
        } else {
            replaceInParent(node, null);
        }

        rebalance(originalParent, false);
        size--;
        modCount++;
!!!1390747.java!!!	removeInternalByKey(inout key : Object) : Node
        Node<K, V> node = findByObject(key);
        if (node != null) {
            removeInternal(node);
        }
        return node;
!!!1390875.java!!!	replaceInParent(inout node : Node, inout replacement : Node) : void
        Node<K, V> parent = node.parent;
        node.parent = null;
        if (replacement != null) {
            replacement.parent = parent;
        }

        if (parent != null) {
            if (parent.left == node) {
                parent.left = replacement;
            } else {
                // assert (parent.right == node);
                parent.right = replacement;
            }
        } else {
            root = replacement;
        }
!!!1391003.java!!!	rebalance(inout unbalanced : Node, inout insert : boolean) : void
        for (Node<K, V> node = unbalanced; node != null; node = node.parent) {
            Node<K, V> left = node.left;
            Node<K, V> right = node.right;
            int leftHeight = left != null ? left.height : 0;
            int rightHeight = right != null ? right.height : 0;

            int delta = leftHeight - rightHeight;
            if (delta == -2) {
                Node<K, V> rightLeft = right.left;
                Node<K, V> rightRight = right.right;
                int rightRightHeight = rightRight != null ? rightRight.height : 0;
                int rightLeftHeight = rightLeft != null ? rightLeft.height : 0;

                int rightDelta = rightLeftHeight - rightRightHeight;
                if (rightDelta == -1 || (rightDelta == 0 && !insert)) {
                    rotateLeft(node); // AVL right right
                } else {
                    // assert (rightDelta == 1);
                    rotateRight(right); // AVL right left
                    rotateLeft(node);
                }
                if (insert) {
                    break; // no further rotations will be necessary
                }

            } else if (delta == 2) {
                Node<K, V> leftLeft = left.left;
                Node<K, V> leftRight = left.right;
                int leftRightHeight = leftRight != null ? leftRight.height : 0;
                int leftLeftHeight = leftLeft != null ? leftLeft.height : 0;

                int leftDelta = leftLeftHeight - leftRightHeight;
                if (leftDelta == 1 || (leftDelta == 0 && !insert)) {
                    rotateRight(node); // AVL left left
                } else {
                    // assert (leftDelta == -1);
                    rotateLeft(left); // AVL left right
                    rotateRight(node);
                }
                if (insert) {
                    break; // no further rotations will be necessary
                }

            } else if (delta == 0) {
                node.height = leftHeight + 1; // leftHeight == rightHeight
                if (insert) {
                    break; // the insert caused balance, so rebalancing is done!
                }

            } else {
                // assert (delta == -1 || delta == 1);
                node.height = Math.max(leftHeight, rightHeight) + 1;
                if (!insert) {
                    break; // the height hasn't changed, so rebalancing is done!
                }
            }
        }
!!!1391131.java!!!	rotateLeft(inout root : Node) : void
        Node<K, V> left = root.left;
        Node<K, V> pivot = root.right;
        Node<K, V> pivotLeft = pivot.left;
        Node<K, V> pivotRight = pivot.right;

        // move the pivot's left child to the root's right
        root.right = pivotLeft;
        if (pivotLeft != null) {
            pivotLeft.parent = root;
        }

        replaceInParent(root, pivot);

        // move the root to the pivot's left
        pivot.left = root;
        root.parent = pivot;

        // fix heights
        root.height = Math.max(left != null ? left.height : 0,
                pivotLeft != null ? pivotLeft.height : 0) + 1;
        pivot.height = Math.max(root.height,
                pivotRight != null ? pivotRight.height : 0) + 1;
!!!1391259.java!!!	rotateRight(inout root : Node) : void
        Node<K, V> pivot = root.left;
        Node<K, V> right = root.right;
        Node<K, V> pivotLeft = pivot.left;
        Node<K, V> pivotRight = pivot.right;

        // move the pivot's right child to the root's left
        root.left = pivotRight;
        if (pivotRight != null) {
            pivotRight.parent = root;
        }

        replaceInParent(root, pivot);

        // move the root to the pivot's right
        pivot.right = root;
        root.parent = pivot;

        // fixup heights
        root.height = Math.max(right != null ? right.height : 0,
                pivotRight != null ? pivotRight.height : 0) + 1;
        pivot.height = Math.max(root.height,
                pivotLeft != null ? pivotLeft.height : 0) + 1;
!!!1391387.java!!!	immutableCopy(inout entry : Entry) : SimpleImmutableEntry
        return entry == null ? null : new SimpleImmutableEntry<K, V>(entry);
!!!1391515.java!!!	firstEntry() : Entry
        return immutableCopy(root == null ? null : root.first());
!!!1391643.java!!!	internalPollFirstEntry() : Entry
        if (root == null) {
            return null;
        }
        Node<K, V> result = root.first();
        removeInternal(result);
        return result;
!!!1391771.java!!!	pollFirstEntry() : Entry
        return immutableCopy(internalPollFirstEntry());
!!!1391899.java!!!	firstKey() : K
        if (root == null) {
            throw new NoSuchElementException();
        }
        return root.first().getKey();
!!!1392027.java!!!	lastEntry() : Entry
        return immutableCopy(root == null ? null : root.last());
!!!1392155.java!!!	internalPollLastEntry() : Entry
        if (root == null) {
            return null;
        }
        Node<K, V> result = root.last();
        removeInternal(result);
        return result;
!!!1392283.java!!!	pollLastEntry() : Entry
        return immutableCopy(internalPollLastEntry());
!!!1392411.java!!!	lastKey() : K
        if (root == null) {
            throw new NoSuchElementException();
        }
        return root.last().getKey();
!!!1392539.java!!!	lowerEntry(inout key : K) : Entry
        return immutableCopy(find(key, LOWER));
!!!1392667.java!!!	lowerKey(inout key : K) : K
        Entry<K, V> entry = find(key, LOWER);
        return entry != null ? entry.getKey() : null;
!!!1392795.java!!!	floorEntry(inout key : K) : Entry
        return immutableCopy(find(key, FLOOR));
!!!1392923.java!!!	floorKey(inout key : K) : K
        Entry<K, V> entry = find(key, FLOOR);
        return entry != null ? entry.getKey() : null;
!!!1393051.java!!!	ceilingEntry(inout key : K) : Entry
        return immutableCopy(find(key, CEILING));
!!!1393179.java!!!	ceilingKey(inout key : K) : K
        Entry<K, V> entry = find(key, CEILING);
        return entry != null ? entry.getKey() : null;
!!!1393307.java!!!	higherEntry(inout key : K) : Entry
        return immutableCopy(find(key, HIGHER));
!!!1393435.java!!!	higherKey(inout key : K) : K
        Entry<K, V> entry = find(key, HIGHER);
        return entry != null ? entry.getKey() : null;
!!!1393563.java!!!	comparator() : Comparator
        return comparator != NATURAL_ORDER ? comparator : null;
!!!1393691.java!!!	entrySet() : Set
        EntrySet result = entrySet;
        return result != null ? result : (entrySet = new EntrySet());
!!!1393819.java!!!	keySet() : Set
        KeySet result = keySet;
        return result != null ? result : (keySet = new KeySet());
!!!1393947.java!!!	navigableKeySet() : NavigableSet
        KeySet result = keySet;
        return result != null ? result : (keySet = new KeySet());
!!!1394075.java!!!	subMap(inout from : K, inout fromInclusive : boolean, inout to : K, inout toInclusive : boolean) : NavigableMap
        Bound fromBound = fromInclusive ? INCLUSIVE : EXCLUSIVE;
        Bound toBound = toInclusive ? INCLUSIVE : EXCLUSIVE;
        return new BoundedMap(true, from, fromBound, to, toBound);
!!!1394203.java!!!	subMap(inout fromInclusive : K, inout toExclusive : K) : SortedMap
        return new BoundedMap(true, fromInclusive, INCLUSIVE, toExclusive, EXCLUSIVE);
!!!1394331.java!!!	headMap(inout to : K, inout inclusive : boolean) : NavigableMap
        Bound toBound = inclusive ? INCLUSIVE : EXCLUSIVE;
        return new BoundedMap(true, null, NO_BOUND, to, toBound);
!!!1394459.java!!!	headMap(inout toExclusive : K) : SortedMap
        return new BoundedMap(true, null, NO_BOUND, toExclusive, EXCLUSIVE);
!!!1394587.java!!!	tailMap(inout from : K, inout inclusive : boolean) : NavigableMap
        Bound fromBound = inclusive ? INCLUSIVE : EXCLUSIVE;
        return new BoundedMap(true, from, fromBound, null, NO_BOUND);
!!!1394715.java!!!	tailMap(inout fromInclusive : K) : SortedMap
        return new BoundedMap(true, fromInclusive, INCLUSIVE, null, NO_BOUND);
!!!1394843.java!!!	descendingMap() : NavigableMap
        return new BoundedMap(false, null, NO_BOUND, null, NO_BOUND);
!!!1394971.java!!!	descendingKeySet() : NavigableSet
        return new BoundedMap(false, null, NO_BOUND, null, NO_BOUND).navigableKeySet();
!!!1410075.java!!!	count(inout iterator : Iterator) : int
        int count = 0;
        while (iterator.hasNext()) {
            iterator.next();
            count++;
        }
        return count;
!!!1410203.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        stream.putFields().put("comparator", comparator());
        stream.writeFields();
        stream.writeInt(size);
        for (Map.Entry<K, V> entry : entrySet()) {
            stream.writeObject(entry.getKey());
            stream.writeObject(entry.getValue());
        }
!!!1410331.java!!!	readObject(inout stream : ObjectInputStream) : void
        GetField fields = stream.readFields();
        comparator = (Comparator<? super K>) fields.get("comparator", null);
        if (comparator == null) {
            comparator = (Comparator<? super K>) NATURAL_ORDER;
        }
        int size = stream.readInt();
        for (int i = 0; i < size; i++) {
            putInternal((K) stream.readObject(), (V) stream.readObject());
        }
