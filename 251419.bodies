class BoundedMap
!!!1400987.java!!!	BoundedMap(inout ascending : boolean, inout from : K, inout fromBound : Bound, inout to : K, inout toBound : Bound)
            /*
             * Validate the bounds. In addition to checking that from <= to, we
             * verify that the comparator supports our bound objects.
             */
            if (fromBound != NO_BOUND && toBound != NO_BOUND) {
                if (comparator.compare(from, to) > 0) {
                    throw new IllegalArgumentException(from + " > " + to);
                }
            } else if (fromBound != NO_BOUND) {
                comparator.compare(from, from);
            } else if (toBound != NO_BOUND) {
                comparator.compare(to, to);
            }

            this.ascending = ascending;
            this.from = from;
            this.fromBound = fromBound;
            this.to = to;
            this.toBound = toBound;
!!!1401115.java!!!	size() : int
            return count(entrySet().iterator());
!!!1401243.java!!!	isEmpty() : boolean
            return endpoint(true) == null;
!!!1401371.java!!!	get(inout key : Object) : V
            return isInBounds(key) ? TreeMap.this.get(key) : null;
!!!1401499.java!!!	containsKey(inout key : Object) : boolean
            return isInBounds(key) && TreeMap.this.containsKey(key);
!!!1401627.java!!!	put(inout key : K, inout value : V) : V
            if (!isInBounds(key)) {
                throw outOfBounds(key, fromBound, toBound);
            }
            return putInternal(key, value);
!!!1401755.java!!!	remove(inout key : Object) : V
            return isInBounds(key) ? TreeMap.this.remove(key) : null;
!!!1401883.java!!!	isInBounds(inout key : Object) : boolean
            return isInBounds((K) key, fromBound, toBound);
!!!1402011.java!!!	isInBounds(inout key : K, inout fromBound : Bound, inout toBound : Bound) : boolean
            if (fromBound == INCLUSIVE) {
                if (comparator.compare(key, from) < 0) {
                    return false; // less than from
                }
            } else if (fromBound == EXCLUSIVE) {
                if (comparator.compare(key, from) <= 0) {
                    return false; // less than or equal to from
                }
            }

            if (toBound == INCLUSIVE) {
                if (comparator.compare(key, to) > 0) {
                    return false; // greater than 'to'
                }
            } else if (toBound == EXCLUSIVE) {
                if (comparator.compare(key, to) >= 0) {
                    return false; // greater than or equal to 'to'
                }
            }

            return true;
!!!1402139.java!!!	bound(inout node : Node, inout fromBound : Bound, inout toBound : Bound) : Node
            return node != null && isInBounds(node.getKey(), fromBound, toBound) ? node : null;
!!!1402267.java!!!	firstEntry() : Entry
            return immutableCopy(endpoint(true));
!!!1402395.java!!!	pollFirstEntry() : Entry
            Node<K, V> result = endpoint(true);
            if (result != null) {
                removeInternal(result);
            }
            return immutableCopy(result);
!!!1402523.java!!!	firstKey() : K
            Entry<K, V> entry = endpoint(true);
            if (entry == null) {
                throw new NoSuchElementException();
            }
            return entry.getKey();
!!!1402651.java!!!	lastEntry() : Entry
            return immutableCopy(endpoint(false));
!!!1402779.java!!!	pollLastEntry() : Entry
            Node<K, V> result = endpoint(false);
            if (result != null) {
                removeInternal(result);
            }
            return immutableCopy(result);
!!!1402907.java!!!	lastKey() : K
            Entry<K, V> entry = endpoint(false);
            if (entry == null) {
                throw new NoSuchElementException();
            }
            return entry.getKey();
!!!1403035.java!!!	endpoint(inout first : boolean) : Node
            Node<K, V> node;
            if (ascending == first) {
                switch (fromBound) {
                    case NO_BOUND:
                        node = root == null ? null : root.first();
                        break;
                    case INCLUSIVE:
                        node = find(from, CEILING);
                        break;
                    case EXCLUSIVE:
                        node = find(from, HIGHER);
                        break;
                    default:
                        throw new AssertionError();
                }
                return bound(node, NO_BOUND, toBound);
            } else {
                switch (toBound) {
                    case NO_BOUND:
                        node = root == null ? null : root.last();
                        break;
                    case INCLUSIVE:
                        node = find(to, FLOOR);
                        break;
                    case EXCLUSIVE:
                        node = find(to, LOWER);
                        break;
                    default:
                        throw new AssertionError();
                }
                return bound(node, fromBound, NO_BOUND);
            }
!!!1403163.java!!!	findBounded(inout key : K, inout relation : Relation) : Entry
            relation = relation.forOrder(ascending);
            Bound fromBoundForCheck = fromBound;
            Bound toBoundForCheck = toBound;

            if (toBound != NO_BOUND && (relation == LOWER || relation == FLOOR)) {
                int comparison = comparator.compare(to, key);
                if (comparison <= 0) {
                    key = to;
                    if (toBound == EXCLUSIVE) {
                        relation = LOWER; // 'to' is too high
                    } else if (comparison < 0) {
                        relation = FLOOR; // we already went lower
                    }
                }
                toBoundForCheck = NO_BOUND; // we've already checked the upper bound
            }

            if (fromBound != NO_BOUND && (relation == CEILING || relation == HIGHER)) {
                int comparison = comparator.compare(from, key);
                if (comparison >= 0) {
                    key = from;
                    if (fromBound == EXCLUSIVE) {
                        relation = HIGHER; // 'from' is too low
                    } else if (comparison > 0) {
                        relation = CEILING; // we already went higher
                    }
                }
                fromBoundForCheck = NO_BOUND; // we've already checked the lower bound
            }

            return bound(find(key, relation), fromBoundForCheck, toBoundForCheck);
!!!1403291.java!!!	lowerEntry(inout key : K) : Entry
            return immutableCopy(findBounded(key, LOWER));
!!!1403419.java!!!	lowerKey(inout key : K) : K
            Entry<K, V> entry = findBounded(key, LOWER);
            return entry != null ? entry.getKey() : null;
!!!1403547.java!!!	floorEntry(inout key : K) : Entry
            return immutableCopy(findBounded(key, FLOOR));
!!!1403675.java!!!	floorKey(inout key : K) : K
            Entry<K, V> entry = findBounded(key, FLOOR);
            return entry != null ? entry.getKey() : null;
!!!1403803.java!!!	ceilingEntry(inout key : K) : Entry
            return immutableCopy(findBounded(key, CEILING));
!!!1403931.java!!!	ceilingKey(inout key : K) : K
            Entry<K, V> entry = findBounded(key, CEILING);
            return entry != null ? entry.getKey() : null;
!!!1404059.java!!!	higherEntry(inout key : K) : Entry
            return immutableCopy(findBounded(key, HIGHER));
!!!1404187.java!!!	higherKey(inout key : K) : K
            Entry<K, V> entry = findBounded(key, HIGHER);
            return entry != null ? entry.getKey() : null;
!!!1404315.java!!!	comparator() : Comparator
            Comparator<? super K> forward = TreeMap.this.comparator();
            if (ascending) {
                return forward;
            } else {
                return Collections.reverseOrder(forward);
            }
!!!1404443.java!!!	entrySet() : Set
            BoundedEntrySet result = entrySet;
            return result != null ? result : (entrySet = new BoundedEntrySet());
!!!1404571.java!!!	keySet() : Set
            return navigableKeySet();
!!!1404699.java!!!	navigableKeySet() : NavigableSet
            BoundedKeySet result = keySet;
            return result != null ? result : (keySet = new BoundedKeySet());
!!!1404827.java!!!	descendingMap() : NavigableMap
            return new BoundedMap(!ascending, from, fromBound, to, toBound);
!!!1404955.java!!!	descendingKeySet() : NavigableSet
            return new BoundedMap(!ascending, from, fromBound, to, toBound).navigableKeySet();
!!!1405083.java!!!	subMap(inout from : K, inout fromInclusive : boolean, inout to : K, inout toInclusive : boolean) : NavigableMap
            Bound fromBound = fromInclusive ? INCLUSIVE : EXCLUSIVE;
            Bound toBound = toInclusive ? INCLUSIVE : EXCLUSIVE;
            return subMap(from, fromBound, to, toBound);
!!!1405211.java!!!	subMap(inout fromInclusive : K, inout toExclusive : K) : NavigableMap
            return subMap(fromInclusive, INCLUSIVE, toExclusive, EXCLUSIVE);
!!!1405339.java!!!	headMap(inout to : K, inout inclusive : boolean) : NavigableMap
            Bound toBound = inclusive ? INCLUSIVE : EXCLUSIVE;
            return subMap(null, NO_BOUND, to, toBound);
!!!1405467.java!!!	headMap(inout toExclusive : K) : NavigableMap
            return subMap(null, NO_BOUND, toExclusive, EXCLUSIVE);
!!!1405595.java!!!	tailMap(inout from : K, inout inclusive : boolean) : NavigableMap
            Bound fromBound = inclusive ? INCLUSIVE : EXCLUSIVE;
            return subMap(from, fromBound, null, NO_BOUND);
!!!1405723.java!!!	tailMap(inout fromInclusive : K) : NavigableMap
            return subMap(fromInclusive, INCLUSIVE, null, NO_BOUND);
!!!1405851.java!!!	subMap(inout from : K, inout fromBound : Bound, inout to : K, inout toBound : Bound) : NavigableMap
            if (!ascending) {
                K fromTmp = from;
                Bound fromBoundTmp = fromBound;
                from = to;
                fromBound = toBound;
                to = fromTmp;
                toBound = fromBoundTmp;
            }

            /*
             * If both the current and requested bounds are exclusive, the isInBounds check must be
             * inclusive. For example, to create (C..F) from (A..F), the bound 'F' is in bounds.
             */

            if (fromBound == NO_BOUND) {
                from = this.from;
                fromBound = this.fromBound;
            } else {
                Bound fromBoundToCheck = fromBound == this.fromBound ? INCLUSIVE : this.fromBound;
                if (!isInBounds(from, fromBoundToCheck, this.toBound)) {
                    throw outOfBounds(to, fromBoundToCheck, this.toBound);
                }
            }

            if (toBound == NO_BOUND) {
                to = this.to;
                toBound = this.toBound;
            } else {
                Bound toBoundToCheck = toBound == this.toBound ? INCLUSIVE : this.toBound;
                if (!isInBounds(to, this.fromBound, toBoundToCheck)) {
                    throw outOfBounds(to, this.fromBound, toBoundToCheck);
                }
            }

            return new BoundedMap(ascending, from, fromBound, to, toBound);
!!!1405979.java!!!	outOfBounds(inout value : Object, inout fromBound : Bound, inout toBound : Bound) : IllegalArgumentException
            return new IllegalArgumentException(value + " not in range "
                    + fromBound.leftCap(from) + ".." + toBound.rightCap(to));
!!!1409947.java!!!	writeReplace() : Object
            return ascending
                    ? new AscendingSubMap<K, V>(TreeMap.this, from, fromBound, to, toBound)
                    : new DescendingSubMap<K, V>(TreeMap.this, from, fromBound, to, toBound);
