class ByteBufferAsIntBuffer
!!!684187.java!!!	asIntBuffer(inout byteBuffer : ByteBuffer) : IntBuffer
        ByteBuffer slice = byteBuffer.slice();
        slice.order(byteBuffer.order());
        return new ByteBufferAsIntBuffer(slice);
!!!684315.java!!!	ByteBufferAsIntBuffer(inout byteBuffer : ByteBuffer)
        super(byteBuffer.capacity() / SizeOf.INT);
        this.byteBuffer = byteBuffer;
        this.byteBuffer.clear();
        this.effectiveDirectAddress = byteBuffer.effectiveDirectAddress;
!!!684443.java!!!	asReadOnlyBuffer() : IntBuffer
        ByteBufferAsIntBuffer buf = new ByteBufferAsIntBuffer(byteBuffer.asReadOnlyBuffer());
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        buf.byteBuffer.order = byteBuffer.order;
        return buf;
!!!684571.java!!!	compact() : IntBuffer
        if (byteBuffer.isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        byteBuffer.limit(limit * SizeOf.INT);
        byteBuffer.position(position * SizeOf.INT);
        byteBuffer.compact();
        byteBuffer.clear();
        position = limit - position;
        limit = capacity;
        mark = UNSET_MARK;
        return this;
!!!684699.java!!!	duplicate() : IntBuffer
        ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());
        ByteBufferAsIntBuffer buf = new ByteBufferAsIntBuffer(bb);
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        return buf;
!!!684827.java!!!	get() : int
        if (position == limit) {
            throw new BufferUnderflowException();
        }
        return byteBuffer.getInt(position++ * SizeOf.INT);
!!!684955.java!!!	get(in index : int) : int
        checkIndex(index);
        return byteBuffer.getInt(index * SizeOf.INT);
!!!685083.java!!!	get(inout dst : int, in dstOffset : int, in intCount : int) : IntBuffer
        byteBuffer.limit(limit * SizeOf.INT);
        byteBuffer.position(position * SizeOf.INT);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).get(dst, dstOffset, intCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).get(dst, dstOffset, intCount);
        }
        this.position += intCount;
        return this;
!!!685211.java!!!	isDirect() : boolean
        return byteBuffer.isDirect();
!!!685339.java!!!	isReadOnly() : boolean
        return byteBuffer.isReadOnly();
!!!685467.java!!!	order() : ByteOrder
        return byteBuffer.order();
!!!685595.java!!!	protectedArray() : int
        throw new UnsupportedOperationException();
!!!685723.java!!!	protectedArrayOffset() : int
        throw new UnsupportedOperationException();
!!!685851.java!!!	protectedHasArray() : boolean
        return false;
!!!685979.java!!!	put(in c : int) : IntBuffer
        if (position == limit) {
            throw new BufferOverflowException();
        }
        byteBuffer.putInt(position++ * SizeOf.INT, c);
        return this;
!!!686107.java!!!	put(in index : int, in c : int) : IntBuffer
        checkIndex(index);
        byteBuffer.putInt(index * SizeOf.INT, c);
        return this;
!!!686235.java!!!	put(inout src : int, in srcOffset : int, in intCount : int) : IntBuffer
        byteBuffer.limit(limit * SizeOf.INT);
        byteBuffer.position(position * SizeOf.INT);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).put(src, srcOffset, intCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).put(src, srcOffset, intCount);
        }
        this.position += intCount;
        return this;
!!!686363.java!!!	slice() : IntBuffer
        byteBuffer.limit(limit * SizeOf.INT);
        byteBuffer.position(position * SizeOf.INT);
        ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());
        IntBuffer result = new ByteBufferAsIntBuffer(bb);
        byteBuffer.clear();
        return result;
