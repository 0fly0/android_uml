class ActionModeImpl
!!!5462156.java!!!	ActionModeImpl(inout callback : Callback)
            mCallback = callback;
            mMenu = new MenuBuilder(getThemedContext())
                    .setDefaultShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
            mMenu.setCallback(this);
!!!5462284.java!!!	getMenuInflater() : MenuInflater
            return new MenuInflater(getThemedContext());
!!!5462412.java!!!	getMenu() : Menu
            return mMenu;
!!!5462540.java!!!	finish() : void
            if (mActionMode != this) {
                // Not the active action mode - no-op
                return;
            }

            // If this change in state is going to cause the action bar
            // to be hidden, defer the onDestroy callback until the animation
            // is finished and associated relayout is about to happen. This lets
            // apps better anticipate visibility and layout behavior.
            if (!checkShowingFlags(mHiddenByApp, mHiddenBySystem, false)) {
                // With the current state but the action bar hidden, our
                // overall showing state is going to be false.
                mDeferredDestroyActionMode = this;
                mDeferredModeDestroyCallback = mCallback;
            } else {
                mCallback.onDestroyActionMode(this);
            }
            mCallback = null;
            animateToMode(false);

            // Clear out the context mode views after the animation finishes
            mContextView.closeMode();
            mActionView.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);

            mActionMode = null;
!!!5462668.java!!!	invalidate() : void
            mMenu.stopDispatchingItemsChanged();
            try {
                mCallback.onPrepareActionMode(this, mMenu);
            } finally {
                mMenu.startDispatchingItemsChanged();
            }
!!!5462796.java!!!	dispatchOnCreate() : boolean
            mMenu.stopDispatchingItemsChanged();
            try {
                return mCallback.onCreateActionMode(this, mMenu);
            } finally {
                mMenu.startDispatchingItemsChanged();
            }
!!!5462924.java!!!	setCustomView(inout view : View) : void
            mContextView.setCustomView(view);
            mCustomView = new WeakReference<View>(view);
!!!5463052.java!!!	setSubtitle(inout subtitle : CharSequence) : void
            mContextView.setSubtitle(subtitle);
!!!5463180.java!!!	setTitle(inout title : CharSequence) : void
            mContextView.setTitle(title);
!!!5463308.java!!!	setTitle(in resId : int) : void
            setTitle(mContext.getResources().getString(resId));
!!!5463436.java!!!	setSubtitle(in resId : int) : void
            setSubtitle(mContext.getResources().getString(resId));
!!!5463564.java!!!	getTitle() : CharSequence
            return mContextView.getTitle();
!!!5463692.java!!!	getSubtitle() : CharSequence
            return mContextView.getSubtitle();
!!!5463820.java!!!	setTitleOptionalHint(inout titleOptional : boolean) : void
            super.setTitleOptionalHint(titleOptional);
            mContextView.setTitleOptional(titleOptional);
!!!5463948.java!!!	isTitleOptional() : boolean
            return mContextView.isTitleOptional();
!!!5464076.java!!!	getCustomView() : View
            return mCustomView != null ? mCustomView.get() : null;
!!!5464204.java!!!	onMenuItemSelected(inout menu : MenuBuilder, inout item : MenuItem) : boolean
            if (mCallback != null) {
                return mCallback.onActionItemClicked(this, item);
            } else {
                return false;
            }
!!!5464460.java!!!	onSubMenuSelected(inout subMenu : SubMenuBuilder) : boolean
            if (mCallback == null) {
                return false;
            }

            if (!subMenu.hasVisibleItems()) {
                return true;
            }

            new MenuPopupHelper(getThemedContext(), subMenu).show();
            return true;
!!!5464716.java!!!	onMenuModeChange(inout menu : MenuBuilder) : void
            if (mCallback == null) {
                return;
            }
            invalidate();
            mContextView.showOverflowMenu();
