class LinkedList
!!!1322011.java!!!	LinkedList()
        voidLink = new Link<E>(null, null, null);
        voidLink.previous = voidLink;
        voidLink.next = voidLink;
!!!1322139.java!!!	LinkedList(inout collection : Collection)
        this();
        addAll(collection);
!!!1322267.java!!!	add(in location : int, inout object : E) : void
        if (location >= 0 && location <= size) {
            Link<E> link = voidLink;
            if (location < (size / 2)) {
                for (int i = 0; i <= location; i++) {
                    link = link.next;
                }
            } else {
                for (int i = size; i > location; i--) {
                    link = link.previous;
                }
            }
            Link<E> previous = link.previous;
            Link<E> newLink = new Link<E>(object, previous, link);
            previous.next = newLink;
            link.previous = newLink;
            size++;
            modCount++;
        } else {
            throw new IndexOutOfBoundsException();
        }
!!!1322395.java!!!	add(inout object : E) : boolean
        return addLastImpl(object);
!!!1322523.java!!!	addLastImpl(inout object : E) : boolean
        Link<E> oldLast = voidLink.previous;
        Link<E> newLink = new Link<E>(object, oldLast, voidLink);
        voidLink.previous = newLink;
        oldLast.next = newLink;
        size++;
        modCount++;
        return true;
!!!1322651.java!!!	addAll(in location : int, inout collection : Collection) : boolean
        if (location < 0 || location > size) {
            throw new IndexOutOfBoundsException();
        }
        int adding = collection.size();
        if (adding == 0) {
            return false;
        }
        Collection<? extends E> elements = (collection == this) ?
                new ArrayList<E>(collection) : collection;

        Link<E> previous = voidLink;
        if (location < (size / 2)) {
            for (int i = 0; i < location; i++) {
                previous = previous.next;
            }
        } else {
            for (int i = size; i >= location; i--) {
                previous = previous.previous;
            }
        }
        Link<E> next = previous.next;
        for (E e : elements) {
            Link<E> newLink = new Link<E>(e, previous, null);
            previous.next = newLink;
            previous = newLink;
        }
        previous.next = next;
        next.previous = previous;
        size += adding;
        modCount++;
        return true;
!!!1322779.java!!!	addAll(inout collection : Collection) : boolean
        int adding = collection.size();
        if (adding == 0) {
            return false;
        }
        Collection<? extends E> elements = (collection == this) ?
                new ArrayList<E>(collection) : collection;

        Link<E> previous = voidLink.previous;
        for (E e : elements) {
            Link<E> newLink = new Link<E>(e, previous, null);
            previous.next = newLink;
            previous = newLink;
        }
        previous.next = voidLink;
        voidLink.previous = previous;
        size += adding;
        modCount++;
        return true;
!!!1322907.java!!!	addFirst(inout object : E) : void
        addFirstImpl(object);
!!!1323035.java!!!	addFirstImpl(inout object : E) : boolean
        Link<E> oldFirst = voidLink.next;
        Link<E> newLink = new Link<E>(object, voidLink, oldFirst);
        voidLink.next = newLink;
        oldFirst.previous = newLink;
        size++;
        modCount++;
        return true;
!!!1323163.java!!!	addLast(inout object : E) : void
        addLastImpl(object);
!!!1323291.java!!!	clear() : void
        if (size > 0) {
            size = 0;
            voidLink.next = voidLink;
            voidLink.previous = voidLink;
            modCount++;
        }
!!!1323419.java!!!	clone() : Object
        try {
            LinkedList<E> l = (LinkedList<E>) super.clone();
            l.size = 0;
            l.voidLink = new Link<E>(null, null, null);
            l.voidLink.previous = l.voidLink;
            l.voidLink.next = l.voidLink;
            l.addAll(this);
            return l;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1323547.java!!!	contains(inout object : Object) : boolean
        Link<E> link = voidLink.next;
        if (object != null) {
            while (link != voidLink) {
                if (object.equals(link.data)) {
                    return true;
                }
                link = link.next;
            }
        } else {
            while (link != voidLink) {
                if (link.data == null) {
                    return true;
                }
                link = link.next;
            }
        }
        return false;
!!!1323675.java!!!	get(in location : int) : E
        if (location >= 0 && location < size) {
            Link<E> link = voidLink;
            if (location < (size / 2)) {
                for (int i = 0; i <= location; i++) {
                    link = link.next;
                }
            } else {
                for (int i = size; i > location; i--) {
                    link = link.previous;
                }
            }
            return link.data;
        }
        throw new IndexOutOfBoundsException();
!!!1323803.java!!!	getFirst() : E
        return getFirstImpl();
!!!1323931.java!!!	getFirstImpl() : E
        Link<E> first = voidLink.next;
        if (first != voidLink) {
            return first.data;
        }
        throw new NoSuchElementException();
!!!1324059.java!!!	getLast() : E
        Link<E> last = voidLink.previous;
        if (last != voidLink) {
            return last.data;
        }
        throw new NoSuchElementException();
!!!1324187.java!!!	indexOf(inout object : Object) : int
        int pos = 0;
        Link<E> link = voidLink.next;
        if (object != null) {
            while (link != voidLink) {
                if (object.equals(link.data)) {
                    return pos;
                }
                link = link.next;
                pos++;
            }
        } else {
            while (link != voidLink) {
                if (link.data == null) {
                    return pos;
                }
                link = link.next;
                pos++;
            }
        }
        return -1;
!!!1324315.java!!!	lastIndexOf(inout object : Object) : int
        int pos = size;
        Link<E> link = voidLink.previous;
        if (object != null) {
            while (link != voidLink) {
                pos--;
                if (object.equals(link.data)) {
                    return pos;
                }
                link = link.previous;
            }
        } else {
            while (link != voidLink) {
                pos--;
                if (link.data == null) {
                    return pos;
                }
                link = link.previous;
            }
        }
        return -1;
!!!1324443.java!!!	listIterator(in location : int) : ListIterator
        return new LinkIterator<E>(this, location);
!!!1324571.java!!!	remove(in location : int) : E
        if (location >= 0 && location < size) {
            Link<E> link = voidLink;
            if (location < (size / 2)) {
                for (int i = 0; i <= location; i++) {
                    link = link.next;
                }
            } else {
                for (int i = size; i > location; i--) {
                    link = link.previous;
                }
            }
            Link<E> previous = link.previous;
            Link<E> next = link.next;
            previous.next = next;
            next.previous = previous;
            size--;
            modCount++;
            return link.data;
        }
        throw new IndexOutOfBoundsException();
!!!1324699.java!!!	remove(inout object : Object) : boolean
        return removeFirstOccurrenceImpl(object);
!!!1324827.java!!!	removeFirst() : E
        return removeFirstImpl();
!!!1324955.java!!!	removeFirstImpl() : E
        Link<E> first = voidLink.next;
        if (first != voidLink) {
            Link<E> next = first.next;
            voidLink.next = next;
            next.previous = voidLink;
            size--;
            modCount++;
            return first.data;
        }
        throw new NoSuchElementException();
!!!1325083.java!!!	removeLast() : E
        return removeLastImpl();
!!!1325211.java!!!	removeLastImpl() : E
        Link<E> last = voidLink.previous;
        if (last != voidLink) {
            Link<E> previous = last.previous;
            voidLink.previous = previous;
            previous.next = voidLink;
            size--;
            modCount++;
            return last.data;
        }
        throw new NoSuchElementException();
!!!1325339.java!!!	descendingIterator() : Iterator
        return new ReverseLinkIterator<E>(this);
!!!1325467.java!!!	offerFirst(inout e : E) : boolean
        return addFirstImpl(e);
!!!1325595.java!!!	offerLast(inout e : E) : boolean
        return addLastImpl(e);
!!!1325723.java!!!	peekFirst() : E
        return peekFirstImpl();
!!!1325851.java!!!	peekLast() : E
        Link<E> last = voidLink.previous;
        return (last == voidLink) ? null : last.data;
!!!1325979.java!!!	pollFirst() : E
        return (size == 0) ? null : removeFirstImpl();
!!!1326107.java!!!	pollLast() : E
        return (size == 0) ? null : removeLastImpl();
!!!1326235.java!!!	pop() : E
        return removeFirstImpl();
!!!1326363.java!!!	push(inout e : E) : void
        addFirstImpl(e);
!!!1326491.java!!!	removeFirstOccurrence(inout o : Object) : boolean
        return removeFirstOccurrenceImpl(o);
!!!1326619.java!!!	removeLastOccurrence(inout o : Object) : boolean
        Iterator<E> iter = new ReverseLinkIterator<E>(this);
        return removeOneOccurrence(o, iter);
!!!1326747.java!!!	removeFirstOccurrenceImpl(inout o : Object) : boolean
        Iterator<E> iter = new LinkIterator<E>(this, 0);
        return removeOneOccurrence(o, iter);
!!!1326875.java!!!	removeOneOccurrence(inout o : Object, inout iter : Iterator) : boolean
        while (iter.hasNext()) {
            E element = iter.next();
            if (o == null ? element == null : o.equals(element)) {
                iter.remove();
                return true;
            }
        }
        return false;
!!!1327003.java!!!	set(in location : int, inout object : E) : E
        if (location >= 0 && location < size) {
            Link<E> link = voidLink;
            if (location < (size / 2)) {
                for (int i = 0; i <= location; i++) {
                    link = link.next;
                }
            } else {
                for (int i = size; i > location; i--) {
                    link = link.previous;
                }
            }
            E result = link.data;
            link.data = object;
            return result;
        }
        throw new IndexOutOfBoundsException();
!!!1327131.java!!!	size() : int
        return size;
!!!1327259.java!!!	offer(inout o : E) : boolean
        return addLastImpl(o);
!!!1327387.java!!!	poll() : E
        return size == 0 ? null : removeFirst();
!!!1327515.java!!!	remove() : E
        return removeFirstImpl();
!!!1327643.java!!!	peek() : E
        return peekFirstImpl();
!!!1327771.java!!!	peekFirstImpl() : E
        Link<E> first = voidLink.next;
        return first == voidLink ? null : first.data;
!!!1327899.java!!!	element() : E
        return getFirstImpl();
!!!1328027.java!!!	toArray() : Object
        int index = 0;
        Object[] contents = new Object[size];
        Link<E> link = voidLink.next;
        while (link != voidLink) {
            contents[index++] = link.data;
            link = link.next;
        }
        return contents;
!!!1328155.java!!!	toArray(inout contents : T) : T
        int index = 0;
        if (size > contents.length) {
            Class<?> ct = contents.getClass().getComponentType();
            contents = (T[]) Array.newInstance(ct, size);
        }
        Link<E> link = voidLink.next;
        while (link != voidLink) {
            contents[index++] = (T) link.data;
            link = link.next;
        }
        if (index < contents.length) {
            contents[index] = null;
        }
        return contents;
!!!1328283.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        stream.defaultWriteObject();
        stream.writeInt(size);
        Iterator<E> it = iterator();
        while (it.hasNext()) {
            stream.writeObject(it.next());
        }
!!!1328411.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();
        size = stream.readInt();
        voidLink = new Link<E>(null, null, null);
        Link<E> link = voidLink;
        for (int i = size; --i >= 0;) {
            Link<E> nextLink = new Link<E>((E) stream.readObject(), link, null);
            link.next = nextLink;
            link = nextLink;
        }
        link.next = voidLink;
        voidLink.previous = link;
