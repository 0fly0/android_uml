class Builder
!!!3927052.java!!!	Builder()
                mMask = 0;
!!!3927180.java!!!	Builder(inout base : VmPolicy)
                mMask = base.mask;
                mClassInstanceLimitNeedCow = true;
                mClassInstanceLimit = base.classInstanceLimit;
!!!3927308.java!!!	setClassInstanceLimit(inout klass : Class, in instanceLimit : int) : Builder
                if (klass == null) {
                    throw new NullPointerException("klass == null");
                }
                if (mClassInstanceLimitNeedCow) {
                    if (mClassInstanceLimit.containsKey(klass) &&
                        mClassInstanceLimit.get(klass) == instanceLimit) {
                        // no-op; don't break COW
                        return this;
                    }
                    mClassInstanceLimitNeedCow = false;
                    mClassInstanceLimit = (HashMap<Class, Integer>) mClassInstanceLimit.clone();
                } else if (mClassInstanceLimit == null) {
                    mClassInstanceLimit = new HashMap<Class, Integer>();
                }
                mMask |= DETECT_VM_INSTANCE_LEAKS;
                mClassInstanceLimit.put(klass, instanceLimit);
                return this;
!!!3927436.java!!!	detectActivityLeaks() : Builder
                return enable(DETECT_VM_ACTIVITY_LEAKS);
!!!3927564.java!!!	detectAll() : Builder
                return enable(DETECT_VM_ACTIVITY_LEAKS | DETECT_VM_CURSOR_LEAKS
                        | DETECT_VM_CLOSABLE_LEAKS | DETECT_VM_REGISTRATION_LEAKS);
!!!3927692.java!!!	detectLeakedSqlLiteObjects() : Builder
                return enable(DETECT_VM_CURSOR_LEAKS);
!!!3927820.java!!!	detectLeakedClosableObjects() : Builder
                return enable(DETECT_VM_CLOSABLE_LEAKS);
!!!3927948.java!!!	detectLeakedRegistrationObjects() : Builder
                return enable(DETECT_VM_REGISTRATION_LEAKS);
!!!3928076.java!!!	penaltyDeath() : Builder
                return enable(PENALTY_DEATH);
!!!3928204.java!!!	penaltyLog() : Builder
                return enable(PENALTY_LOG);
!!!3928332.java!!!	penaltyDropBox() : Builder
                return enable(PENALTY_DROPBOX);
!!!3928460.java!!!	enable(in bit : int) : Builder
                mMask |= bit;
                return this;
!!!3928588.java!!!	build() : VmPolicy
                // If there are detection bits set but no violation bits
                // set, enable simple logging.
                if (mMask != 0 &&
                    (mMask & (PENALTY_DEATH | PENALTY_LOG |
                              PENALTY_DROPBOX | PENALTY_DIALOG)) == 0) {
                    penaltyLog();
                }
                return new VmPolicy(mMask,
                        mClassInstanceLimit != null ? mClassInstanceLimit : EMPTY_CLASS_LIMIT_MAP);
