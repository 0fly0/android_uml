class OpenSSLServerSocketImpl
!!!2443675.java!!!	OpenSSLServerSocketImpl(inout sslParameters : SSLParametersImpl)
        this.sslParameters = sslParameters;
!!!2443803.java!!!	OpenSSLServerSocketImpl(in port : int, inout sslParameters : SSLParametersImpl)
        super(port);
        this.sslParameters = sslParameters;
!!!2443931.java!!!	OpenSSLServerSocketImpl(in port : int, in backlog : int, inout sslParameters : SSLParametersImpl)
        super(port, backlog);
        this.sslParameters = sslParameters;
!!!2444059.java!!!	OpenSSLServerSocketImpl(in port : int, in backlog : int, inout iAddress : InetAddress, inout sslParameters : SSLParametersImpl)
        super(port, backlog, iAddress);
        this.sslParameters = sslParameters;
!!!2444187.java!!!	getEnableSessionCreation() : boolean
        return sslParameters.getEnableSessionCreation();
!!!2444315.java!!!	setEnableSessionCreation(inout flag : boolean) : void
        sslParameters.setEnableSessionCreation(flag);
!!!2444443.java!!!	getSupportedProtocols() : String
        return NativeCrypto.getSupportedProtocols();
!!!2444571.java!!!	getEnabledProtocols() : String
        return enabledProtocols.clone();
!!!2444699.java!!!	setEnabledProtocols(inout protocols : String) : void
        enabledProtocols = NativeCrypto.checkEnabledProtocols(protocols);
!!!2444827.java!!!	getSupportedCipherSuites() : String
        return NativeCrypto.getSupportedCipherSuites();
!!!2444955.java!!!	getEnabledCipherSuites() : String
        return enabledCipherSuites.clone();
!!!2445083.java!!!	setChannelIdEnabled(inout enabled : boolean) : void
      channelIdEnabled = enabled;
!!!2445211.java!!!	isChannelIdEnabled() : boolean
      return channelIdEnabled;
!!!2445339.java!!!	setEnabledCipherSuites(inout suites : String) : void
        enabledCipherSuites = NativeCrypto.checkEnabledCipherSuites(suites);
!!!2445467.java!!!	getWantClientAuth() : boolean
        return sslParameters.getWantClientAuth();
!!!2445595.java!!!	setWantClientAuth(inout want : boolean) : void
        sslParameters.setWantClientAuth(want);
!!!2445723.java!!!	getNeedClientAuth() : boolean
        return sslParameters.getNeedClientAuth();
!!!2445851.java!!!	setNeedClientAuth(inout need : boolean) : void
        sslParameters.setNeedClientAuth(need);
!!!2445979.java!!!	setUseClientMode(inout mode : boolean) : void
        sslParameters.setUseClientMode(mode);
!!!2446107.java!!!	getUseClientMode() : boolean
        return sslParameters.getUseClientMode();
!!!2446235.java!!!	accept() : Socket

        if (!sslParameters.getUseClientMode()) {
            checkEnabledCipherSuites();
        }

        OpenSSLSocketImpl socket = new OpenSSLSocketImpl(sslParameters,
                                                         enabledProtocols.clone(),
                                                         enabledCipherSuites.clone());
        socket.setChannelIdEnabled(channelIdEnabled);
        implAccept(socket);
        return socket;
!!!2446363.java!!!	checkEnabledCipherSuites() : void
        /* Loop over all enabled cipher suites. If we find a problem,
         * we just continue to the next one. If we find one that could
         * work, we return. This basically makes sure the caller has
         * configured some appropriate certificate/key unless
         * an anonymous cipher is picked.
         */
        for (String enabledCipherSuite : enabledCipherSuites) {
            if (enabledCipherSuite.equals(NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {
                continue;
            }
            String keyType = CipherSuite.getByName(enabledCipherSuite).getServerKeyType();
            if (keyType == null) {
                // anonymous always work
                return;
            }
            if (keyType.equals(CipherSuite.KEY_TYPE_RSA)
                    || keyType.equals(CipherSuite.KEY_TYPE_DH_RSA)) {
                if (checkForPrivateKey(keyType, RSAPrivateKey.class)) {
                    return;
                }
                continue;
            }
            if (keyType.equals(CipherSuite.KEY_TYPE_DSA)
                    || keyType.equals(CipherSuite.KEY_TYPE_DH_DSA)) {
                if (checkForPrivateKey(keyType, DSAPrivateKey.class)) {
                    return;
                }
                continue;
            }
            if (keyType.equals(CipherSuite.KEY_TYPE_EC)
                    || keyType.equals(CipherSuite.KEY_TYPE_EC_RSA)
                    || keyType.equals(CipherSuite.KEY_TYPE_EC_EC)) {
                if (checkForPrivateKey(keyType, ECPrivateKey.class)) {
                    return;
                }
                continue;
            }
            throw new IllegalStateException("Unknown key type " + keyType);
        }
        throw new SSLException("Could not find any key store entries "
                               + "to support the enabled cipher suites.");
!!!2446491.java!!!	checkForPrivateKey(inout keyType : String, inout keyClass : Class) : boolean
        String alias = sslParameters.getKeyManager().chooseServerAlias(keyType, null, null);
        if (alias == null) {
            return false;
        }
        PrivateKey key = sslParameters.getKeyManager().getPrivateKey(alias);
        return (key != null && keyClass.isAssignableFrom(key.getClass()));
