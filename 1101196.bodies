class AsecTests
!!!6041868.java!!!	setUp() : void
        super.setUp();
        if (localLOGV) Log.i(TAG, "Cleaning out old test containers");
        cleanupContainers();
!!!6041996.java!!!	tearDown() : void
        super.tearDown();
        if (localLOGV) Log.i(TAG, "Cleaning out old test containers");
        cleanupContainers();
!!!6042124.java!!!	cleanupContainers() : void
        IMountService ms = getMs();
        String[] containers = ms.getSecureContainerList();

        for (int i = 0; i < containers.length; i++) {
            if (containers[i].startsWith(SECURE_CONTAINER_PREFIX)) {
                if (localLOGV)
                    Log.i(TAG, "Cleaning: " + containers[i]);
                ms.destroySecureContainer(containers[i], true);
            }
        }
!!!6042252.java!!!	containerExists(in localId : String) : boolean
        IMountService ms = getMs();
        String[] containers = ms.getSecureContainerList();
        String fullId = SECURE_CONTAINER_PREFIX + localId;

        for (int i = 0; i < containers.length; i++) {
            if (containers[i].equals(fullId)) {
                return true;
            }
        }
        return false;
!!!6042380.java!!!	createContainer(in localId : String, in size : int, in key : String, in filesystem : String, inout isExternal : boolean) : int
        assertTrue("Media should be mounted", isMediaMounted());
        String fullId = SECURE_CONTAINER_PREFIX + localId;

        IMountService ms = getMs();
        return ms.createSecureContainer(fullId, size, filesystem, key, android.os.Process.myUid(),
                isExternal);
!!!6042508.java!!!	mountContainer(in localId : String, in key : String) : int
        assertTrue("Media should be mounted", isMediaMounted());
        String fullId = SECURE_CONTAINER_PREFIX + localId;

        IMountService ms = getMs();
        return ms.mountSecureContainer(fullId, key, android.os.Process.myUid());
!!!6042636.java!!!	renameContainer(in localId1 : String, in localId2 : String) : int
        assertTrue("Media should be mounted", isMediaMounted());
        String fullId1 = SECURE_CONTAINER_PREFIX + localId1;
        String fullId2 = SECURE_CONTAINER_PREFIX + localId2;

        IMountService ms = getMs();
        return ms.renameSecureContainer(fullId1, fullId2);
!!!6042764.java!!!	unmountContainer(in localId : String, inout force : boolean) : int
        assertTrue("Media should be mounted", isMediaMounted());
        String fullId = SECURE_CONTAINER_PREFIX + localId;

        IMountService ms = getMs();
        return ms.unmountSecureContainer(fullId, force);
!!!6042892.java!!!	destroyContainer(in localId : String, inout force : boolean) : int
        assertTrue("Media should be mounted", isMediaMounted());
        String fullId = SECURE_CONTAINER_PREFIX + localId;

        IMountService ms = getMs();
        return ms.destroySecureContainer(fullId, force);
!!!6043020.java!!!	isContainerMounted(in localId : String) : boolean
        assertTrue("Media should be mounted", isMediaMounted());
        String fullId = SECURE_CONTAINER_PREFIX + localId;

        IMountService ms = getMs();
        return ms.isSecureContainerMounted(fullId);
!!!6043148.java!!!	getMs() : IMountService
        IBinder service = ServiceManager.getService("mount");
        if (service != null) {
            return IMountService.Stub.asInterface(service);
        } else {
            Log.e(TAG, "Can't get mount service");
        }
        return null;
!!!6043276.java!!!	isMediaMounted() : boolean
        String mPath = Environment.getExternalStorageDirectory().toString();
        String state = getMs().getVolumeState(mPath);
        return Environment.MEDIA_MOUNTED.equals(state);
!!!6043404.java!!!	test_Fat_External_Create_Success() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateContainer", 4, "none", FS_FAT, true));
        assertTrue(containerExists("testCreateContainer"));
!!!6043532.java!!!	test_Ext4_External_Create_Success() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateContainer", 4, "none", FS_EXT4, true));
        assertTrue(containerExists("testCreateContainer"));
!!!6043660.java!!!	test_Fat_Internal_Create_Success() : void
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateContainer", 4, "none", FS_FAT, false));
        assertTrue(containerExists("testCreateContainer"));
!!!6043788.java!!!	test_Ext4_Internal_Create_Success() : void
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateContainer", 4, "none", FS_EXT4, false));
        assertTrue(containerExists("testCreateContainer"));
!!!6043916.java!!!	test_Fat_External_CreateMinSize_Success() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateContainer", 1, "none", FS_FAT, true));
        assertTrue(containerExists("testCreateContainer"));
!!!6044044.java!!!	test_Ext4_External_CreateMinSize_Success() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateContainer", 1, "none", FS_EXT4, true));
        assertTrue(containerExists("testCreateContainer"));
!!!6044172.java!!!	test_Fat_Internal_CreateMinSize_Success() : void
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateContainer", 1, "none", FS_FAT, false));
        assertTrue(containerExists("testCreateContainer"));
!!!6044300.java!!!	test_Ext4_Internal_CreateMinSize_Success() : void
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateContainer", 1, "none", FS_EXT4, false));
        assertTrue(containerExists("testCreateContainer"));
!!!6044428.java!!!	test_Fat_External_CreateZeroSize_Failure() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationFailedInternalError,
                createContainer("testCreateZeroContainer", 0, "none", FS_FAT, true));
!!!6044556.java!!!	test_Ext4_External_CreateZeroSize_Failure() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationFailedInternalError,
                createContainer("testCreateZeroContainer", 0, "none", FS_EXT4, true));
!!!6044684.java!!!	test_Fat_Internal_CreateZeroSize_Failure() : void
        assertEquals(StorageResultCode.OperationFailedInternalError,
                createContainer("testCreateZeroContainer", 0, "none", FS_FAT, false));
!!!6044812.java!!!	test_Ext4_Internal_CreateZeroSize_Failure() : void
        assertEquals(StorageResultCode.OperationFailedInternalError,
                createContainer("testCreateZeroContainer", 0, "none", FS_EXT4, false));
!!!6044940.java!!!	test_Fat_External_CreateDuplicate_Failure() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateDupContainer", 4, "none", FS_FAT, true));

        assertEquals(StorageResultCode.OperationFailedInternalError,
                createContainer("testCreateDupContainer", 4, "none", FS_FAT, true));
!!!6045068.java!!!	test_Ext4_External_CreateDuplicate_Failure() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateDupContainer", 4, "none", FS_EXT4, true));

        assertEquals(StorageResultCode.OperationFailedInternalError,
                createContainer("testCreateDupContainer", 4, "none", FS_EXT4, true));
!!!6045196.java!!!	test_Fat_Internal_CreateDuplicate_Failure() : void
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateDupContainer", 4, "none", FS_FAT, false));

        assertEquals(StorageResultCode.OperationFailedInternalError,
                createContainer("testCreateDupContainer", 4, "none", FS_FAT, false));
!!!6045324.java!!!	test_Ext4_Internal_CreateDuplicate_Failure() : void
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testCreateDupContainer", 4, "none", FS_EXT4, false));

        assertEquals(StorageResultCode.OperationFailedInternalError,
                createContainer("testCreateDupContainer", 4, "none", FS_EXT4, false));
!!!6045452.java!!!	test_Fat_External_Destroy_Success() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testDestroyContainer", 4, "none", FS_FAT, true));
        assertEquals(StorageResultCode.OperationSucceeded,
                destroyContainer("testDestroyContainer", false));
!!!6045580.java!!!	test_Ext4_External_Destroy_Success() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testDestroyContainer", 4, "none", FS_EXT4, true));
        assertEquals(StorageResultCode.OperationSucceeded,
                destroyContainer("testDestroyContainer", false));
!!!6045708.java!!!	test_Fat_Internal_Destroy_Success() : void
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testDestroyContainer", 4, "none", FS_FAT, false));
        assertEquals(StorageResultCode.OperationSucceeded,
                destroyContainer("testDestroyContainer", false));
!!!6045836.java!!!	test_Ext4_Internal_Destroy_Success() : void
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testDestroyContainer", 4, "none", FS_EXT4, false));
        assertEquals(StorageResultCode.OperationSucceeded,
                destroyContainer("testDestroyContainer", false));
!!!6045964.java!!!	test_Fat_External_Mount() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testMountContainer", 4, "none", FS_FAT, true));

        assertEquals(StorageResultCode.OperationSucceeded,
                unmountContainer("testMountContainer", false));

        assertEquals(StorageResultCode.OperationSucceeded,
                mountContainer("testMountContainer", "none"));
!!!6046092.java!!!	test_Fat_External_MountBadKey_Failure() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testMountBadKey", 4, "00000000000000000000000000000000", FS_FAT,
                        true));

        assertEquals(StorageResultCode.OperationSucceeded,
                unmountContainer("testMountBadKey", false));

        assertEquals(StorageResultCode.OperationFailedInternalError,
                mountContainer("testMountContainer", "000000000000000000000000000000001"));

        assertEquals(StorageResultCode.OperationFailedInternalError,
                mountContainer("testMountContainer", "none"));
!!!6046220.java!!!	test_Fat_External_UnmountBusy_Success() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        IMountService ms = getMs();
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testUnmountBusyContainer", 4, "none", FS_FAT, true));

        String path = ms.getSecureContainerPath(SECURE_CONTAINER_PREFIX
                + "testUnmountBusyContainer");

        File f = new File(path, "reference");
        FileOutputStream fos = new FileOutputStream(f);

        assertEquals(StorageResultCode.OperationFailedStorageBusy,
                unmountContainer("testUnmountBusyContainer", false));

        fos.close();
        assertEquals(StorageResultCode.OperationSucceeded,
                unmountContainer("testUnmountBusyContainer", false));
!!!6046348.java!!!	test_Fat_External_DestroyBusy() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        IMountService ms = getMs();

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testDestroyBusyContainer", 4, "none", FS_FAT, true));

        String path = ms.getSecureContainerPath(SECURE_CONTAINER_PREFIX
                + "testDestroyBusyContainer");

        File f = new File(path, "reference");
        FileOutputStream fos = new FileOutputStream(f);

        assertEquals(StorageResultCode.OperationFailedStorageBusy,
                destroyContainer("testDestroyBusyContainer", false));

        fos.close();
        assertEquals(StorageResultCode.OperationSucceeded,
                destroyContainer("testDestroyBusyContainer", false));
!!!6046476.java!!!	test_Fat_External_Rename_Success() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testRenameContainer.1", 4, "none", FS_FAT, true));

        assertEquals(StorageResultCode.OperationSucceeded,
                unmountContainer("testRenameContainer.1", false));

        assertEquals(StorageResultCode.OperationSucceeded,
                renameContainer("testRenameContainer.1", "testRenameContainer.2"));

        assertFalse(containerExists("testRenameContainer.1"));
        assertTrue(containerExists("testRenameContainer.2"));
!!!6046604.java!!!	test_Fat_External_RenameSrcMounted_Failure() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testRenameContainer.1", 4, "none", FS_FAT, true));

        assertEquals(StorageResultCode.OperationFailedStorageMounted,
                renameContainer("testRenameContainer.1", "testRenameContainer.2"));
!!!6046732.java!!!	test_Fat_External_RenameDstMounted_Failure() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testRenameContainer.1", 4, "none", FS_FAT, true));

        assertEquals(StorageResultCode.OperationSucceeded,
                unmountContainer("testRenameContainer.1", false));

        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testRenameContainer.2", 4, "none", FS_FAT, true));

        assertEquals(StorageResultCode.OperationFailedStorageMounted,
                renameContainer("testRenameContainer.1", "testRenameContainer.2"));
!!!6046860.java!!!	test_Fat_External_Size_Success() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        IMountService ms = getMs();
        assertEquals(StorageResultCode.OperationSucceeded,
                createContainer("testContainerSize", 1, "none", FS_FAT, true));
        String path = ms.getSecureContainerPath(SECURE_CONTAINER_PREFIX + "testContainerSize");

        byte[] buf = new byte[4096];
        File f = new File(path, "reference");
        FileOutputStream fos = new FileOutputStream(f);
        for (int i = 0; i < (1024 * 1024); i += buf.length) {
            fos.write(buf);
        }
        fos.close();
!!!6046988.java!!!	testGetSecureContainerPath_NonExistPath_Failure() : void
        IMountService ms = getMs();
        assertNull("Getting the path for an invalid container should return null",
                ms.getSecureContainerPath("jparks.broke.it"));
!!!6047116.java!!!	getMediaState() : boolean
        String mPath = Environment.getExternalStorageDirectory().toString();
        String state = getMs().getVolumeState(mPath);
        return Environment.MEDIA_MOUNTED.equals(state);
!!!6047244.java!!!	mountMedia() : boolean
        if (Environment.isExternalStorageEmulated()) {
            return true;
        }

        if (getMediaState()) {
            return true;
        }

        String mPath = Environment.getExternalStorageDirectory().toString();
        int ret = getMs().mountVolume(mPath);
        return ret == StorageResultCode.OperationSucceeded;
!!!6047756.java!!!	unmountMedia() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        if (!getMediaState()) {
            return;
        }

        String path = Environment.getExternalStorageDirectory().toString();
        StorageListener observer = new StorageListener();
        StorageManager sm = (StorageManager) mContext.getSystemService(Context.STORAGE_SERVICE);
        sm.registerListener(observer);
        try {
            // Wait on observer
            synchronized(observer) {
                getMs().unmountVolume(path, false, false);
                long waitTime = 0;
                while((!observer.isDone()) && (waitTime < MAX_WAIT_TIME) ) {
                    observer.wait(WAIT_TIME_INCR);
                    waitTime += WAIT_TIME_INCR;
                }
                if(!observer.isDone()) {
                    fail("Timed out waiting for packageInstalled callback");
                }
            }
        } finally {
            sm.unregisterListener(observer);
        }
!!!6047884.java!!!	testUnmount() : void
        boolean oldStatus = getMediaState();
        Log.i(TAG, "oldStatus="+oldStatus);
        try {
            // Mount media firsts
            if (!getMediaState()) {
                mountMedia();
            }
            unmountMedia();
        } finally {
            // Restore old status
            boolean currStatus = getMediaState();
            if (oldStatus != currStatus) {
                if (oldStatus) {
                    // Mount media
                    mountMedia();
                } else {
                    unmountMedia();
                }
            }
        }
!!!6048140.java!!!	testUnmountMultiple() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        boolean oldStatus = getMediaState();
        StorageManager sm = (StorageManager) mContext.getSystemService(Context.STORAGE_SERVICE);
        MultipleStorageLis observer = new MultipleStorageLis();
        try {
            // Mount media firsts
            if (!getMediaState()) {
                mountMedia();
            }
            String path = Environment.getExternalStorageDirectory().toString();
            sm.registerListener(observer);
            // Wait on observer
            synchronized(observer) {
                for (int i = 0; i < 5; i++) {
                    getMs().unmountVolume(path, false, false);
                }
                long waitTime = 0;
                while((!observer.isDone()) && (waitTime < MAX_WAIT_TIME) ) {
                    observer.wait(WAIT_TIME_INCR);
                    waitTime += WAIT_TIME_INCR;
                }
                if(!observer.isDone()) {
                    fail("Timed out waiting for packageInstalled callback");
                }
            }
            assertEquals(observer.count, 1);
        } finally {
            sm.unregisterListener(observer);
            // Restore old status
            boolean currStatus = getMediaState();
            if (oldStatus != currStatus) {
                if (oldStatus) {
                    // Mount media
                    mountMedia();
                } else {
                    unmountMedia();
                }
            }
        }
!!!6048652.java!!!	invokeShutdown() : void
        IMountService ms = getMs();
        ShutdownObserver observer = new ShutdownObserver();
        synchronized (observer) {
            ms.shutdown(observer);
        }
!!!6048780.java!!!	testShutdown() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        boolean oldStatus = getMediaState();
        try {
            // Mount media firsts
            if (!getMediaState()) {
                mountMedia();
            }
            invokeShutdown();
        } finally {
            // Restore old status
            boolean currStatus = getMediaState();
            if (oldStatus != currStatus) {
                if (oldStatus) {
                    // Mount media
                    mountMedia();
                } else {
                    unmountMedia();
                }
            }
        }
!!!6048908.java!!!	testShutdownMultiple() : void
        if (Environment.isExternalStorageEmulated()) {
            return;
        }

        boolean oldStatus = getMediaState();
        try {
            // Mount media firsts
            if (!getMediaState()) {
                mountMedia();
            }
            IMountService ms = getMs();
            ShutdownObserver observer = new ShutdownObserver();
            synchronized (observer) {
                ms.shutdown(observer);
                for (int i = 0; i < 4; i++) {
                    ms.shutdown(null);
                }
            }
        } finally {
            // Restore old status
            boolean currStatus = getMediaState();
            if (oldStatus != currStatus) {
                if (oldStatus) {
                    // Mount media
                    mountMedia();
                } else {
                    unmountMedia();
                }
            }
        }
