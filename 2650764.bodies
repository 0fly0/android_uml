class OmxCoreMaster
!!!11147532.cpp!!!	OmxCoreMaster()
  OMX_HANDLETYPE pomxcore1;
  OMX_HANDLETYPE pomxcore2;
  loadCore(&pomxcore1);
  // loadCore(const_cast<char *>(kBellagioCoreName), &pomxcore2);
!!!11147660.cpp!!!	~OmxCoreMaster()
  while (!mCompHandleList.empty()) {
    vector<CompHandleInfo*>::iterator it;
    it = mCompHandleList.begin();
    OMX_ERRORTYPE err =  (*it)->mCore->freeHandle((*it)->mHandle);
    if (OMX_ErrorNone != err) {
      OMX_LOGW("%s: freeHandle %p, err %x", __func__, (*it)->mHandle, err);
    }
    delete (*it);
    mCompHandleList.erase(it);
  };
  while (!mCoreList.empty()) {
    vector<OmxCore *>::iterator it;
    OMX_ERRORTYPE result = OMX_ErrorNone;
    it = mCoreList.begin();
    (*it)->deinit();
    mCoreList.erase(it);
  };
  while (!mRoleInfoList.empty()) {
    vector<roleInfo*>::iterator it;
    it = mRoleInfoList.begin();
    delete (*it)->name;
    while (!(*it)->componentList.empty()) {
      vector<OmxNameString*>::iterator it2;
      it2 = (*it)->componentList.begin();
      delete (*it2);
      (*it)->componentList.erase(it2);
    };
    mRoleInfoList.erase(it);
  };

  while (!mComponentInfoList.empty()) {
    vector<componentInfo*>::iterator it;
    it = mComponentInfoList.begin();
    delete (*it)->name;
    while (!(*it)->roleList.empty()) {
      vector<OmxNameString*>::iterator it2;
      it2 = (*it)->roleList.begin();
      delete (*it2);
      (*it)->roleList.erase(it2);
    };
    mComponentInfoList.erase(it);
  };
!!!11147788.cpp!!!	getComponent(inout handle : OMX_HANDLETYPE, in componentName : OMX_STRING, in appData : OMX_PTR, inout callBacks : OMX_CALLBACKTYPE) : OMX_ERRORTYPE
  OMX_ERRORTYPE ret = OMX_ErrorNone;
  if (!handle || !componentName) {
    return OMX_ErrorBadParameter;
  }
  *handle = NULL;
  for (vector<OmxCore*>::iterator it = mCoreList.begin(); it != mCoreList.end();
       ++it) {
    ret = (*it)->getHandle(handle, componentName, appData, callBacks);
    if (NULL != *handle) {
      mCompHandleList.push_back(new CompHandleInfo(*handle, *it));
      return OMX_ErrorNone;
    }
  }
  return OMX_ErrorComponentNotFound;
!!!11147916.cpp!!!	freeComponent(in hComponent : OMX_HANDLETYPE) : OMX_ERRORTYPE
  if (!hComponent) {
    return OMX_ErrorBadParameter;
  }
  for (vector<CompHandleInfo *>::iterator it = mCompHandleList.begin();
       it != mCompHandleList.end(); ++it) {
    if ((*it)->mHandle == hComponent) {
      OMX_ERRORTYPE err = (*it)->mCore->freeHandle(hComponent);
      if (OMX_ErrorNone == err) {
        delete (*it);
        mCompHandleList.erase(it);
        return OMX_ErrorNone;
      }
    }
  }
  return OMX_ErrorComponentNotFound;
!!!11148044.cpp!!!	setupTunnel(in hOutput : OMX_HANDLETYPE, in nPortOutput : OMX_U32, in hInput : OMX_HANDLETYPE, in nPortInput : OMX_U32) : OMX_ERRORTYPE
  OMX_ERRORTYPE result = OMX_ErrorNone;
  OMX_COMPONENTTYPE *pOutputComp = static_cast<OMX_COMPONENTTYPE *>(hOutput);
  OMX_COMPONENTTYPE *pInputComp = static_cast<OMX_COMPONENTTYPE *>(hInput);
  OMX_TUNNELSETUPTYPE tunnelSetup;
  tunnelSetup.nTunnelFlags = 0;
  tunnelSetup.eSupplier = OMX_BufferSupplyUnspecified;
  OMX_LOGD("[%s: %d], [%p: %d] -> [%p: %d]", __FUNCTION__, __LINE__,
      hOutput, nPortOutput, hInput, nPortInput);
  result = pOutputComp->ComponentTunnelRequest(hOutput, nPortOutput, hInput,
      nPortInput, &tunnelSetup);

  if (OMX_ErrorNone != result) {
    return result;
  }
  OMX_LOGD("[%s: %d]", __FUNCTION__, __LINE__);
  return pInputComp->ComponentTunnelRequest(hInput, nPortInput, hOutput,
      nPortOutput, &tunnelSetup);
!!!11148172.cpp!!!	componentNameEnum(in componentName : OMX_STRING, in nameLength : OMX_U32, in index : OMX_U32) : OMX_ERRORTYPE
  if (NULL == componentName) {
    return OMX_ErrorBadParameter;
  }
  if (index >= mComponentInfoList.size()) {
    return OMX_ErrorNoMore;
  }
  if (nameLength <= mComponentInfoList[index]->name->getLength()) {
    return OMX_ErrorBadParameter;
  }
  strncpy(componentName, mComponentInfoList[index]->name->getString(),
      mComponentInfoList[index]->name->getLength() + 1);
  return OMX_ErrorNone;
!!!11148300.cpp!!!	getComponentsOfRole(in role : OMX_STRING, inout pNumComps : OMX_U32, inout compNames : OMX_U8) : OMX_ERRORTYPE
  OMX_ERRORTYPE result = OMX_ErrorNone;
  if (NULL == pNumComps) {
    return OMX_ErrorBadParameter;
  }

  OMX_U32 nNumComps = 0;
  for (vector<roleInfo*>::const_iterator it = mRoleInfoList.begin();
       it!= mRoleInfoList.end(); ++it) {
    if (!strcmp((*it)->name->getString(), role)) {
      *pNumComps = (*it)->componentList.size();
      if (compNames == NULL) {
        return OMX_ErrorNone;
      }
      OMX_U32 i;
      for (i = 0; i < *pNumComps ; i++) {
        OmxNameString *comp = (*it)->componentList[i];
        strncpy((OMX_STRING)compNames[i], comp->getString(),
            comp->getLength() + 1);
      }
      return OMX_ErrorNone;
    }
  }
  return result;
!!!11148428.cpp!!!	getRolesOfComponent(in compName : OMX_STRING, inout pNumRoles : OMX_U32, inout roles : OMX_U8) : OMX_ERRORTYPE
  OMX_ERRORTYPE result = OMX_ErrorNone;
  if (NULL == pNumRoles) {
    return OMX_ErrorBadParameter;
  }
  for (vector<componentInfo*>::const_iterator it = mComponentInfoList.begin();
       it != mComponentInfoList.end(); ++it) {
    if (!strcmp((*it)->name->getString(), compName)) {
       *pNumRoles = (*it)->roleList.size();
      if (roles == NULL) {
        return OMX_ErrorNone;
      }
      OMX_U32 i;
      for (i = 0; i < *pNumRoles ; i++) {
        OmxNameString *role = (*it)->roleList[i];
        strncpy((OMX_STRING)roles[i], role->getString(), role->getLength() + 1);
      }
      return OMX_ErrorNone;
    }
  }
  return result;
!!!11148556.cpp!!!	teardownTunnel(in hOutput : OMX_HANDLETYPE, in nPortOutput : OMX_U32, in hInput : OMX_HANDLETYPE, in nPortInput : OMX_U32) : OMX_ERRORTYPE
  return OMX_ErrorNone;
!!!11148684.cpp!!!	enumComponentsOfRole(in compName : OMX_STRING, in role : OMX_STRING, in nIndex : OMX_U32) : OMX_ERRORTYPE
  if (NULL == compName) {
    return OMX_ErrorBadParameter;
  }
  for (vector<roleInfo*>::const_iterator it = mRoleInfoList.begin();
       it!= mRoleInfoList.end(); ++it) {
    if (!strcmp((*it)->name->getString(), role)) {
      if (nIndex >= ((*it)->componentList).size()) {
        return OMX_ErrorNoMore;
      }
      OmxNameString *comp = (*it)->componentList[nIndex];
      strncpy(compName, comp->getString(), comp->getLength() + 1);
      return OMX_ErrorNone;
    }
  }
  return OMX_ErrorComponentNotFound;
!!!11148812.cpp!!!	enumRolesOfComponent(in role : OMX_STRING, in compName : OMX_STRING, in nIndex : OMX_U32) : OMX_ERRORTYPE
  if (NULL == role) {
    return OMX_ErrorBadParameter;
  }
  for (vector<componentInfo*>::const_iterator it = mComponentInfoList.begin();
       it != mComponentInfoList.end(); ++it) {
    if (!strcmp((*it)->name->getString(), compName)) {
      if (nIndex >= (*it)->roleList.size()) {
        return OMX_ErrorNoMore;
      }
      OmxNameString *role_name = (*it)->roleList[nIndex];
      strncpy(role, role_name->getString(), role_name->getLength() + 1);
      return OMX_ErrorNone;
    }
  }
  return OMX_ErrorComponentNotFound;
!!!11148940.cpp!!!	loadCore(in coreName : OMX_STRING, inout coreHandle : OMX_HANDLETYPE) : OMX_ERRORTYPE
  OMX_LOGD("In %s %d", __FUNCTION__, __LINE__);
  OmxCore *pcore = new DynamicOmxCore(coreName);
  if (NULL == pcore) {
    return OMX_ErrorComponentNotFound;
  }
  pcore->init();
  mCoreList.push_back(pcore);
  *coreHandle=(OMX_HANDLETYPE)pcore;
  recordComponentAndRole(pcore);
  // dumpComponentList();
  // dumpRoleList();
  OMX_LOGD("Out %s %d", __FUNCTION__, __LINE__);
  return OMX_ErrorNone;
!!!11149068.cpp!!!	loadCore(inout coreHandle : OMX_HANDLETYPE) : OMX_ERRORTYPE
  OMX_LOGD("In %s %d", __FUNCTION__, __LINE__);
  OmxCore *pcore= new BerlinCore;
  if (NULL == pcore) {
    return OMX_ErrorComponentNotFound;
  }
  pcore->init();
  mCoreList.push_back(pcore);
  *coreHandle=(OMX_HANDLETYPE)pcore;
  recordComponentAndRole(pcore);
  // dumpComponentList();
  // dumpRoleList();
  OMX_LOGD("Out %s %d", __FUNCTION__, __LINE__);
  return OMX_ErrorNone;
!!!11149196.cpp!!!	unloadCore(in coreHandle : OMX_HANDLETYPE) : OMX_ERRORTYPE
  OMX_ERRORTYPE ret = OMX_ErrorNone;
  OmxCore *core = static_cast<OmxCore *>(coreHandle);
  ret = core->deinit();
  vector<OmxCore *>::iterator it = mCoreList.begin();
  for (; it < mCoreList.end(); it++) {
    if (core == *it) {
      mCoreList.erase(it);
      break;
    }
  }
  return OMX_ErrorNone;
!!!11149324.cpp!!!	recordComponentAndRole(inout core : OmxCore) : OMX_ERRORTYPE
  OMX_LOGD("In %s %d", __FUNCTION__, __LINE__);
  OMX_U32 componentIndex = 0;
  OMX_ERRORTYPE ret = OMX_ErrorNone;
  char componentName[OMX_MAX_STRINGNAME_SIZE];
  while (OMX_ErrorNoMore != core->componentNameEnum(
             componentName, OMX_MAX_STRINGNAME_SIZE, componentIndex)) {
    componentInfo* comp_info = new componentInfo;
    comp_info->name = new OmxNameString(componentName);

    OMX_U32 roleNum = 0;
    ret = core->getRolesOfComponent(componentName, &roleNum, NULL);
    OMX_LOGD("Comp %s, have %lu roles", componentName, roleNum);
    if (OMX_ErrorNone == ret && roleNum > 0) {
      char** roles = new char*[roleNum];
      for (OMX_U32 idx = 0; idx < roleNum; idx++) {
        roles[idx] = new char[OMX_MAX_STRINGNAME_SIZE];
      }
      ret = core->getRolesOfComponent(componentName, &roleNum,
          reinterpret_cast<OMX_U8 **>(roles));

      for (OMX_U32 idx = 0; idx < roleNum; idx++) {
        OMX_BOOL roleIsExisting = OMX_FALSE;
        comp_info->roleList.push_back(new OmxNameString(roles[idx]));
        for (vector<roleInfo*>::const_iterator it = mRoleInfoList.begin();
             it != mRoleInfoList.end(); ++it) {
          if (!strcmp(roles[idx], (*it)->name->getString())) {
            (*it)->componentList.push_back(new OmxNameString(componentName));
            roleIsExisting = OMX_TRUE;
            break;
          }
        }
        if (!roleIsExisting) {
          roleInfo* role_info = new roleInfo;
          role_info->name = new OmxNameString(roles[idx]);
          role_info->componentList.push_back(new OmxNameString(componentName));
          mRoleInfoList.push_back(role_info);
          mRoleNum++;
        }
      }
      for (OMX_U32 idx = 0; idx < roleNum; idx++) {
        delete[] (roles[idx]);
      }
      delete[] roles;
      mComponentInfoList.push_back(comp_info);
      mComponentNum++;
    }
    componentIndex++;
  }
  OMX_LOGD("Out %s %d", __FUNCTION__, __LINE__);
  return OMX_ErrorNone;
!!!11149452.cpp!!!	dumpComponentList() : OMX_ERRORTYPE
  OMX_LOGD("In %s %d", __FUNCTION__, __LINE__);
  for (vector<componentInfo*>::const_iterator it = mComponentInfoList.begin();
       it != mComponentInfoList.end(); ++it) {
    OMX_LOGD("Component:%s", (*it)->name->getString());
    for (NameList::const_iterator role =((*it)->roleList).begin();
        role != ((*it)->roleList).end(); ++role) {
      OMX_LOGD("    %s", (*role)->getString());
    }
  }
  OMX_LOGD("Out %s %d", __FUNCTION__, __LINE__);
  return OMX_ErrorNone;
!!!11149580.cpp!!!	dumpRoleList() : OMX_ERRORTYPE
  for (vector<roleInfo*>::const_iterator it = mRoleInfoList.begin();
       it != mRoleInfoList.end(); ++it) {
    OMX_LOGV("Role:%s", (*it)->name->getString());
    OMX_LOGD("================================");
    for (NameList::const_iterator comp =((*it)->componentList).begin();
        comp != ((*it)->componentList).end(); ++comp) {
      OMX_LOGD("    %s", (*comp)->getString());
    }
    OMX_LOGD("================================");
  }
  OMX_LOGV("Out %s %d", __FUNCTION__, __LINE__);
  return OMX_ErrorNone;
