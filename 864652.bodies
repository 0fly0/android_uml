class WorkSource
!!!3955212.java!!!	WorkSource()
        mNum = 0;
!!!3955340.java!!!	WorkSource(inout orig : WorkSource)
        if (orig == null) {
            mNum = 0;
            return;
        }
        mNum = orig.mNum;
        if (orig.mUids != null) {
            mUids = orig.mUids.clone();
        } else {
            mUids = null;
        }
!!!3955468.java!!!	WorkSource(in uid : int)
        mNum = 1;
        mUids = new int[] { uid, 0 };
!!!3955596.java!!!	WorkSource(inout in : Parcel)
        mNum = in.readInt();
        mUids = in.createIntArray();
!!!3955724.java!!!	size() : int
        return mNum;
!!!3955852.java!!!	get(in index : int) : int
        return mUids[index];
!!!3955980.java!!!	clear() : void
        mNum = 0;
!!!3956108.java!!!	equals(inout o : Object) : boolean
        return o instanceof WorkSource && !diff((WorkSource)o);
!!!3956236.java!!!	hashCode() : int
        int result = 0;
        for (int i = 0; i < mNum; i++) {
            result = ((result << 4) | (result >>> 28)) ^ mUids[i];
        }
        return result;
!!!3956364.java!!!	diff(inout other : WorkSource) : boolean
        int N = mNum;
        if (N != other.mNum) {
            return true;
        }
        final int[] uids1 = mUids;
        final int[] uids2 = other.mUids;
        for (int i=0; i<N; i++) {
            if (uids1[i] != uids2[i]) {
                return true;
            }
        }
        return false;
!!!3956492.java!!!	set(inout other : WorkSource) : void
        if (other == null) {
            mNum = 0;
            return;
        }
        mNum = other.mNum;
        if (other.mUids != null) {
            if (mUids != null && mUids.length >= mNum) {
                System.arraycopy(other.mUids, 0, mUids, 0, mNum);
            } else {
                mUids = other.mUids.clone();
            }
        } else {
            mUids = null;
        }
!!!3956620.java!!!	set(in uid : int) : void
        mNum = 1;
        if (mUids == null) mUids = new int[2];
        mUids[0] = uid;
!!!3956748.java!!!	setReturningDiffs(inout other : WorkSource) : WorkSource
        synchronized (sTmpWorkSource) {
            sNewbWork = null;
            sGoneWork = null;
            updateLocked(other, true, true);
            if (sNewbWork != null || sGoneWork != null) {
                WorkSource[] diffs = new WorkSource[2];
                diffs[0] = sNewbWork;
                diffs[1] = sGoneWork;
                return diffs;
            }
            return null;
        }
!!!3956876.java!!!	add(inout other : WorkSource) : boolean
        synchronized (sTmpWorkSource) {
            return updateLocked(other, false, false);
        }
!!!3957004.java!!!	addReturningNewbs(inout other : WorkSource) : WorkSource
        synchronized (sTmpWorkSource) {
            sNewbWork = null;
            updateLocked(other, false, true);
            return sNewbWork;
        }
!!!3957132.java!!!	add(in uid : int) : boolean
        synchronized (sTmpWorkSource) {
            sTmpWorkSource.mUids[0] = uid;
            return updateLocked(sTmpWorkSource, false, false);
        }
!!!3957260.java!!!	addReturningNewbs(in uid : int) : WorkSource
        synchronized (sTmpWorkSource) {
            sNewbWork = null;
            sTmpWorkSource.mUids[0] = uid;
            updateLocked(sTmpWorkSource, false, true);
            return sNewbWork;
        }
!!!3957388.java!!!	remove(inout other : WorkSource) : boolean
        int N1 = mNum;
        final int[] uids1 = mUids;
        final int N2 = other.mNum;
        final int[] uids2 = other.mUids;
        boolean changed = false;
        int i1 = 0;
        for (int i2=0; i2<N2 && i1<N1; i2++) {
            if (uids2[i2] == uids1[i1]) {
                N1--;
                if (i1 < N1) System.arraycopy(uids1, i1+1, uids1, i1, N1-i1);
            }
            while (i1 < N1 && uids2[i2] > uids1[i1]) {
                i1++;
            }
        }

        mNum = N1;

        return changed;
!!!3957516.java!!!	updateLocked(inout other : WorkSource, inout set : boolean, inout returnNewbs : boolean) : boolean
        int N1 = mNum;
        int[] uids1 = mUids;
        final int N2 = other.mNum;
        final int[] uids2 = other.mUids;
        boolean changed = false;
        int i1 = 0;
        for (int i2=0; i2<N2; i2++) {
            if (i1 >= N1 || uids2[i2] < uids1[i1]) {
                // Need to insert a new uid.
                changed = true;
                if (uids1 == null) {
                    uids1 = new int[4];
                    uids1[0] = uids2[i2];
                } else if (i1 >= uids1.length) {
                    int[] newuids = new int[(uids1.length*3)/2];
                    if (i1 > 0) System.arraycopy(uids1, 0, newuids, 0, i1);
                    if (i1 < N1) System.arraycopy(uids1, i1, newuids, i1+1, N1-i1);
                    uids1 = newuids;
                    uids1[i1] = uids2[i2];
                } else {
                    if (i1 < N1) System.arraycopy(uids1, i1, uids1, i1+1, N1-i1);
                    uids1[i1] = uids2[i2];
                }
                if (returnNewbs) {
                    if (sNewbWork == null) {
                        sNewbWork = new WorkSource(uids2[i2]);
                    } else {
                        sNewbWork.addLocked(uids2[i2]);
                    }
                }
                N1++;
                i1++;
            } else {
                if (!set) {
                    // Skip uids that already exist or are not in 'other'.
                    do {
                        i1++;
                    } while (i1 < N1 && uids2[i2] >= uids1[i1]);
                } else {
                    // Remove any uids that don't exist in 'other'.
                    int start = i1;
                    while (i1 < N1 && uids2[i2] > uids1[i1]) {
                        if (sGoneWork == null) {
                            sGoneWork = new WorkSource(uids1[i1]);
                        } else {
                            sGoneWork.addLocked(uids1[i1]);
                        }
                        i1++;
                    }
                    if (start < i1) {
                        System.arraycopy(uids1, i1, uids1, start, i1-start);
                        N1 -= i1-start;
                        i1 = start;
                    }
                    // If there is a matching uid, skip it.
                    if (i1 < N1 && uids2[i1] == uids1[i1]) {
                        i1++;
                    }
                }
            }
        }

        mNum = N1;
        mUids = uids1;

        return changed;
!!!3957644.java!!!	addLocked(in uid : int) : void
        if (mUids == null) {
            mUids = new int[4];
            mUids[0] = uid;
            mNum = 1;
            return;
        }
        if (mNum >= mUids.length) {
            int[] newuids = new int[(mNum*3)/2];
            System.arraycopy(mUids, 0, newuids, 0, mNum);
            mUids = newuids;
        }

        mUids[mNum] = uid;
        mNum++;
!!!3957772.java!!!	describeContents() : int
        return 0;
!!!3957900.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mNum);
        dest.writeIntArray(mUids);
!!!3958028.java!!!	toString() : String
        StringBuilder result = new StringBuilder();
        result.append("{WorkSource: uids=[");
        for (int i = 0; i < mNum; i++) {
            if (i != 0) {
                result.append(", ");
            }
            result.append(mUids[i]);
        }
        result.append("]}");
        return result.toString();
