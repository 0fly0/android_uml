format 74
"io" // _unknown::java::io
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/io/"
  java_package "java.io"
  classview 128155 "io"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 128155 "Serializable"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Marks classes that can be serialized by {@link ObjectOutputStream} and
deserialized by {@link ObjectInputStream}.

<p><strong>Warning:</strong> this interface limits how its implementing
classes can change in the future. By implementing {@code Serializable} you
expose your flexible in-memory implementation details as a rigid binary
representation. Simple code changes--like renaming private fields--are
not safe when the changed class is serializable.

<h3>The Serialized Form</h3>
By default, the serialization mechanism encodes an object's class name, the
names of its non-transient fields (including non-public fields), and the
values of all of those fields. The output is an opaque sequence of bytes.
Those bytes can be decoded into a new, equivalent instance as long as the
decoder has compatible versions of the originating classes.

<p>Changing the class name, field names or field types breaks serialization
compatibility and complicates interoperability between old and new versions
of the serializable class. Adding or removing fields also complicates
serialization between versions of a class because it requires your code to
cope with missing fields.

<p>Every serializable class is assigned a version identifier called a {@code
serialVersionUID}. By default, this identifier is computed by hashing the
class declaration and its members. This identifier is included in the
serialized form so that version conflicts can be detected during
deserialization. If the local {@code serialVersionUID} differs from the
{@code serialVersionUID} in the serialized data, deserialization will fail
with an {@link InvalidClassException}.

<p>You can avoid this failure by declaring an explicit {@code
serialVersionUID}. Declaring an explicit {@code serialVersionUID} tells the
serialization mechanism that the class is forward and backward compatible
with all versions that share that {@code serialVersionUID}. Declaring a
{@code serialVersionUID} looks like this: <pre>   {@code

    private static final long serialVersionUID = 0L;
}</pre>
If you declare a {@code serialVersionUID}, you should increment it each
time your class changes incompatibly with the previous version. Typically
this is when you add, change or remove a non-transient field.

<p>You can take control of your serialized form by implementing these two
methods with these exact signatures in your serializable classes:
<pre>   {@code

  private void writeObject(java.io.ObjectOutputStream out)
      throws IOException {
    // write 'this' to 'out'...
  }

  private void readObject(java.io.ObjectInputStream in)
      throws IOException, ClassNotFoundException {
    // populate the fields of 'this' from the data in 'in'...
  }
}</pre>
It is impossible to maintain serialization compatibility across a class name
change. For this reason, implementing {@code Serializable} in anonymous
inner classes is highly discouraged: simply reordering the members in the
file could change the generated class name and break serialization
compatibility.

<p>You can exclude member fields from serialization by giving them the {@code
transient} modifier. Upon deserialization, the transient field's value will
be null, 0, or false according to its type.

<h3>Implement Serializable Judiciously</h3>
Refer to <i>Effective Java</i>'s chapter on serialization for thorough
coverage of the serialization API. The book explains how to use this
interface without harming your application's maintainability.

<h3>Recommended Alternatives</h3>
<strong>JSON</strong> is concise, human-readable and efficient. Android
includes both a {@link android.util.JsonReader streaming API} and a {@link
org.json.JSONObject tree API} to read and write JSON. Use a binding library
like <a href=\"http://code.google.com/p/google-gson/\">GSON</a> to read and
write Java objects directly."
    end

    class 128411 "ObjectOutputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link OutputStream} that is able to write (serialize) Java
objects as well as primitive data types (int, byte, char etc.). The data can
later be loaded using an ObjectInputStream.

@see ObjectInputStream
@see ObjectOutput
@see Serializable
@see Externalizable"
      class 136859 "PutField"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 184347 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param inout name "value" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the value of the boolean field identified by {@code name} to the
persistent field.

@param name
           the name of the field to serialize.
@param value
           the value that is put to the persistent field."
	end

	operation 184475 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "value" explicit_type "char"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the value of the character field identified by {@code name} to
the persistent field.

@param name
           the name of the field to serialize.
@param value
           the value that is put to the persistent field."
	end

	operation 184603 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "value" explicit_type "byte"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the value of the byte field identified by {@code name} to the
persistent field.

@param name
           the name of the field to serialize.
@param value
           the value that is put to the persistent field."
	end

	operation 184731 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "value" explicit_type "short"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the value of the short field identified by {@code name} to the
persistent field.

@param name
           the name of the field to serialize.
@param value
           the value that is put to the persistent field."
	end

	operation 184859 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "value" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the value of the integer field identified by {@code name} to the
persistent field.

@param name
           the name of the field to serialize.
@param value
           the value that is put to the persistent field."
	end

	operation 184987 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "value" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the value of the long field identified by {@code name} to the
persistent field.

@param name
           the name of the field to serialize.
@param value
           the value that is put to the persistent field."
	end

	operation 185115 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "value" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the value of the float field identified by {@code name} to the
persistent field.

@param name
           the name of the field to serialize.
@param value
           the value that is put to the persistent field."
	end

	operation 185243 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "value" explicit_type "double"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the value of the double field identified by {@code name} to the
persistent field.

@param name
           the name of the field to serialize.
@param value
           the value that is put to the persistent field."
	end

	operation 185371 "put"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param inout name "value" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts the value of the Object field identified by {@code name} to the
persistent field.

@param name
           the name of the field to serialize.
@param value
           the value that is put to the persistent field."
	end

	operation 185499 "write"
	  abstract public explicit_return_type "void"
	  nparams 1
	    param inout name "out" type class_ref 136987 // ObjectOutput
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "Writes the fields to the target stream {@code out}.

@param out
           the target stream
@throws IOException
            if an error occurs while writing to the target stream.
@deprecated This method is unsafe and may corrupt the target stream.
            Use ObjectOutputStream#writeFields() instead."
	end
      end

      classrelation 146075 // <generalisation>
	relation 146075 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 146075 // <generalisation>
	  b parent class_ref 132635 // OutputStream
      end

      classrelation 146459 // <realization>
	relation 146459 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 146459 // <realization>
	  b parent class_ref 136987 // ObjectOutput
      end

      classrelation 146843 // <realization>
	relation 146843 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 146843 // <realization>
	  b parent class_ref 137115 // ObjectStreamConstants
      end

      classrelation 146971 // WRITE_UNSHARED_PARAM_TYPES (<unidirectional association>)
	relation 146971 --->
	  a role_name "WRITE_UNSHARED_PARAM_TYPES" multiplicity "[]" init_value " new Class[] { Object.class }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 146971 // WRITE_UNSHARED_PARAM_TYPES (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      attribute 143515 "NOT_SC_BLOCK_DATA"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) (SC_BLOCK_DATA ^ 0xFF)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Mask to zero SC_BLOC_DATA bit.
"
      end

      attribute 143643 "nestedLevels"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "How many nested levels to writeObject. We may not need this.
"
      end

      classrelation 147099 // output (<unidirectional association>)
	relation 147099 --->
	  a role_name "output" private
	    comment "
Where we write to

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147099 // output (<unidirectional association>)
	  b parent class_ref 136347 // DataOutputStream
      end

      attribute 143771 "enableReplace"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If object replacement is enabled or not
"
      end

      classrelation 147227 // primitiveTypes (<unidirectional association>)
	relation 147227 --->
	  a role_name "primitiveTypes" private
	    comment "
Where we write primitive types to

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147227 // primitiveTypes (<unidirectional association>)
	  b parent class_ref 136347 // DataOutputStream
      end

      classrelation 147355 // primitiveTypesBuffer (<unidirectional association>)
	relation 147355 --->
	  a role_name "primitiveTypesBuffer" private
	    comment "
Where the write primitive types are actually written to

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147355 // primitiveTypesBuffer (<unidirectional association>)
	  b parent class_ref 134043 // ByteArrayOutputStream
      end

      classrelation 147483 // objectsWritten (<unidirectional association>)
	relation 147483 --->
	  a role_name "objectsWritten" private
	    comment "
Table mapping Object -> Integer (handle)

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147483 // objectsWritten (<unidirectional association>)
	  b parent class_ref 137371 // SerializationHandleMap
      end

      attribute 143899 "currentHandle"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "All objects are assigned an ID (integer handle)
"
      end

      classrelation 147611 // currentObject (<unidirectional association>)
	relation 147611 --->
	  a role_name "currentObject" private
	    comment "
Used by defaultWriteObject

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147611 // currentObject (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 147739 // currentClass (<unidirectional association>)
	relation 147739 --->
	  a role_name "currentClass" private
	    comment "
Used by defaultWriteObject

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147739 // currentClass (<unidirectional association>)
	  b parent class_ref 137499 // ObjectStreamClass
      end

      attribute 144027 "protocolVersion"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Either ObjectStreamConstants.PROTOCOL_VERSION_1 or
ObjectStreamConstants.PROTOCOL_VERSION_2
"
      end

      classrelation 147867 // nestedException (<unidirectional association>)
	relation 147867 --->
	  a role_name "nestedException" private
	    comment "
Used to detect nested exception when saving an exception due to an error

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147867 // nestedException (<unidirectional association>)
	  b parent class_ref 137627 // StreamCorruptedException
      end

      classrelation 147995 // currentPutField (<unidirectional association>)
	relation 147995 --->
	  a role_name "currentPutField" private
	    comment "
Used to keep track of the PutField object for the class/object being
written

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 147995 // currentPutField (<unidirectional association>)
	  b parent class_ref 136731 // EmulatedFieldsForDumping
      end

      attribute 144155 "subclassOverridingImplementation"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Allows the receiver to decide if it needs to call writeObjectOverride
"
      end

      classrelation 148123 // proxyClassDesc (<unidirectional association>)
	relation 148123 --->
	  a role_name "proxyClassDesc" init_value " ObjectStreamClass.lookup(Proxy.class)" const_relation private
	    comment "
Descriptor for java.lang.reflect.Proxy

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 148123 // proxyClassDesc (<unidirectional association>)
	  b parent class_ref 137499 // ObjectStreamClass
      end

      operation 185627 "ObjectOutputStream"
	protected explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ObjectOutputStream}. This default constructor can
be used by subclasses that do not want to use the public constructor if
it allocates unneeded data.

@throws IOException
            if an error occurs when creating this stream."
      end

      operation 185755 "ObjectOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "output" type class_ref 132635 // OutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ObjectOutputStream that writes to the OutputStream
{@code output}.

@param output
           the non-null OutputStream to filter writes on.

@throws IOException
            if an error occurs while writing the object stream
            header"
      end

      operation 185883 "annotateClass"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "aClass" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes optional information for class {@code aClass} to the output
stream. This optional data can be read when deserializing the class
descriptor (ObjectStreamClass) for this class from an input stream. By
default, no extra data is saved.

@param aClass
           the class to annotate.
@throws IOException
            if an error occurs while writing to the target stream.
@see ObjectInputStream#resolveClass(ObjectStreamClass)"
      end

      operation 186011 "annotateProxyClass"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "aClass" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes optional information for a proxy class to the target stream. This
optional data can be read when deserializing the proxy class from an
input stream. By default, no extra data is saved.

@param aClass
           the proxy class to annotate.
@throws IOException
            if an error occurs while writing to the target stream.
@see ObjectInputStream#resolveProxyClass(String[])"
      end

      operation 186139 "checkWritePrimitiveTypes"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Do the necessary work to see if the receiver can be used to write
primitive types like int, char, etc."
      end

      operation 186267 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream. Any buffered data is flushed. This implementation
closes the target stream.

@throws IOException
            if an error occurs while closing this stream."
      end

      operation 186395 "computePutField"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the collection of emulated fields that users can manipulate to
store a representation different than the one declared by the class of
the object being dumped.

@see #writeFields
@see #writeFieldValues(EmulatedFieldsForDumping)"
      end

      operation 186523 "defaultWriteObject"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default method to write objects to this stream. Serializable fields
defined in the object's class and superclasses are written to the output
stream.

@throws IOException
            if an error occurs while writing to the target stream.
@throws NotActiveException
            if this method is not called from {@code writeObject()}.
@see ObjectInputStream#defaultReadObject"
      end

      operation 186651 "drain"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes buffered data to the target stream. This is similar to {@code
flush} but the flush is not propagated to the target stream.

@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 186779 "dumpCycle"
	private explicit_return_type "int"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dumps the parameter {@code obj} only if it is {@code null}
or an object that has already been dumped previously.

@param obj
           Object to check if an instance previously dumped by this
           stream.
@return -1 if it is an instance which has not been dumped yet (and this
        method does nothing). The handle if {@code obj} is an
        instance which has been dumped already.

@throws IOException
            If an error occurs attempting to save {@code null} or
            a cyclic reference."
      end

      operation 186907 "enableReplaceObject"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables object replacement for this stream. By default this is not
enabled. Only trusted subclasses (loaded with system class loader) are
allowed to change this status.

@param enable
           {@code true} to enable object replacement; {@code false} to
           disable it.
@return the previous setting.
@see #replaceObject
@see ObjectInputStream#enableResolveObject"
      end

      operation 187035 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes buffered data to the target stream and calls the {@code flush}
method of the target stream.

@throws IOException
            if an error occurs while writing to or flushing the output
            stream."
      end

      operation 187163 "getFieldL"
	class_operation private return_type class_ref 3401484 // Object
	nparams 4
	  param inout name "instance" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "fieldName" type class_ref 3399692 // String
	  param inout name "fieldTypeName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
	comment "These methods get the value of a field named fieldName of object
instance. The field is declared by declaringClass. The field is the same
type as the method return value.

these methods could be implemented non-natively on top of
java.lang.reflect at the expense of extra object creation
(java.lang.reflect.Field). Otherwise Serialization could not fetch
private fields, except by the use of a native method like this one.

@throws NoSuchFieldError If the field does not exist."
      end

      operation 187291 "nextHandle"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the next handle to be used to indicate cyclic
references being saved to the stream.

@return the next handle to represent the next cyclic reference"
      end

      operation 187419 "putFields"
	public return_type class_ref 136859 // PutField
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets this stream's {@code PutField} object. This object provides access
to the persistent fields that are eventually written to the output
stream. It is used to transfer the values from the fields of the object
that is currently being written to the persistent fields.

@return the PutField object from which persistent fields can be accessed
        by name.
@throws IOException
            if an I/O error occurs.
@throws NotActiveException
            if this method is not called from {@code writeObject()}.
@see ObjectInputStream#defaultReadObject"
      end

      operation 187547 "registerObjectWritten"
	private explicit_return_type "int"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 187675 "removeUnsharedReference"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "previousHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the unshared object from the table, and restore any previous
handle.

@param obj
           Non-null object being dumped.
@param previousHandle
           The handle of the previous identical object dumped"
      end

      operation 187803 "replaceObject"
	protected return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows trusted subclasses to substitute the specified original {@code
object} with a new object. Object substitution has to be activated first
with calling {@code enableReplaceObject(true)}. This implementation just
returns {@code object}.

@param object
           the original object for which a replacement may be defined.
@return the replacement object for {@code object}.
@throws IOException
            if any I/O error occurs while creating the replacement
            object.
@see #enableReplaceObject
@see ObjectInputStream#enableResolveObject
@see ObjectInputStream#resolveObject"
      end

      operation 187931 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the state of this stream. A marker is written to the stream, so
that the corresponding input stream will also perform a reset at the same
point. Objects previously written are no longer remembered, so they will
be written again (instead of a cyclical reference) if found in the object
graph.

@throws IOException
            if {@code reset()} is called during the serialization of an
            object."
      end

      operation 188059 "resetSeenObjects"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the collection of objects already dumped by the receiver. If the
objects are found again in the object graph, the receiver will dump them
again, instead of a handle (cyclic reference).
"
      end

      operation 188187 "resetState"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the receiver. The collection of objects already dumped by the
receiver is reset, and internal structures are also reset so that the
receiver knows it is in a fresh clean state.
"
      end

      operation 188315 "useProtocolVersion"
	public explicit_return_type "void"
	nparams 1
	  param in name "version" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the specified protocol version to be used by this stream.

@param version
           the protocol version to be used. Use a {@code
           PROTOCOL_VERSION_x} constant from {@code
           java.io.ObjectStreamConstants}.
@throws IllegalArgumentException
            if an invalid {@code version} is specified.
@throws IOException
            if an I/O error occurs.
@see ObjectStreamConstants#PROTOCOL_VERSION_1
@see ObjectStreamConstants#PROTOCOL_VERSION_2"
      end

      operation 188443 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} bytes from the byte array {@code buffer} starting at
offset {@code index} to the target stream. Blocks until all bytes are
written.

@param buffer
           the buffer to write.
@param offset
           the index of the first byte in {@code buffer} to write.
@param length
           the number of bytes from {@code buffer} to write to the output
           stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 188571 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes a single byte to the target stream. Only the least significant
byte of the integer {@code value} is written to the stream. Blocks until
the byte is actually written.

@param value
           the byte to write.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 188699 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a boolean to the target stream.

@param value
           the boolean value to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 188827 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a byte (8 bit) to the target stream.

@param value
           the byte to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 188955 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the string {@code value} as a sequence of bytes to the target
stream. Only the least significant byte of each character in the string
is written.

@param value
           the string to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 189083 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a character (16 bit) to the target stream.

@param value
           the character to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 189211 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the string {@code value} as a sequence of characters to the target
stream.

@param value
           the string to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 189339 "writeClassDesc"
	private explicit_return_type "int"
	nparams 2
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a class descriptor {@code classDesc} (an
{@code ObjectStreamClass}) to the stream.

@param classDesc
           The class descriptor (an {@code ObjectStreamClass}) to
           be dumped
@param unshared
           Write the object unshared
@return the handle assigned to the class descriptor

@throws IOException
            If an IO exception happened when writing the class
            descriptor."
      end

      operation 189467 "writeCyclicReference"
	private explicit_return_type "void"
	nparams 1
	  param in name "handle" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a handle representing a cyclic reference (object previously
dumped)."
      end

      operation 189595 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a double (64 bit) to the target stream.

@param value
           the double to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 189723 "writeFieldDescriptors"
	private explicit_return_type "void"
	nparams 2
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	  param inout name "externalizable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a collection of field descriptors (name, type name, etc) for the
class descriptor {@code classDesc} (an
{@code ObjectStreamClass})

@param classDesc
           The class descriptor (an {@code ObjectStreamClass})
           for which to write field information
@param externalizable
           true if the descriptors are externalizable

@throws IOException
            If an IO exception happened when writing the field
            descriptors.

@see #writeObject(Object)"
      end

      operation 189851 "writeFields"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the fields of the object currently being written to the target
stream. The field values are buffered in the currently active {@code
PutField} object, which can be accessed by calling {@code putFields()}.

@throws IOException
            if an error occurs while writing to the target stream.
@throws NotActiveException
            if there are no fields to write to the target stream.
@see #putFields"
      end

      operation 189979 "writeFieldValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "emulatedFields" type class_ref 136731 // EmulatedFieldsForDumping
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a collection of field values for the emulated fields
{@code emulatedFields}

@param emulatedFields
           an {@code EmulatedFieldsForDumping}, concrete subclass
           of {@code PutField}

@throws IOException
            If an IO exception happened when writing the field values.

@see #writeFields
@see #writeObject(Object)"
      end

      operation 190107 "writeFieldValues"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a collection of field values for the fields described by class
descriptor {@code classDesc} (an {@code ObjectStreamClass}).
This is the default mechanism, when emulated fields (an
{@code PutField}) are not used. Actual values to dump are fetched
directly from object {@code obj}.

@param obj
           Instance from which to fetch field values to dump.
@param classDesc
           A class descriptor (an {@code ObjectStreamClass})
           defining which fields should be dumped.

@throws IOException
            If an IO exception happened when writing the field values.

@see #writeObject(Object)"
      end

      operation 190235 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "float"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a float (32 bit) to the target stream.

@param value
           the float to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 190363 "writeHierarchy"
	private explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 137755 // NotActiveException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Walks the hierarchy of classes described by class descriptor
{@code classDesc} and writes the field values corresponding to
fields declared by the corresponding class descriptor. The instance to
fetch field values from is {@code object}. If the class
(corresponding to class descriptor {@code classDesc}) defines
private instance method {@code writeObject} it will be used to
dump field values.

@param object
           Instance from which to fetch field values to dump.
@param classDesc
           A class descriptor (an {@code ObjectStreamClass})
           defining which fields should be dumped.

@throws IOException
            If an IO exception happened when writing the field values in
            the hierarchy.
@throws NotActiveException
            If the given object is not active

@see #defaultWriteObject
@see #writeObject(Object)"
      end

      operation 190491 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an integer (32 bit) to the target stream.

@param value
           the integer to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 190619 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a long (64 bit) to the target stream.

@param value
           the long to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 190747 "writeNewArray"
	private explicit_return_type "int"
	nparams 5
	  param inout name "array" type class_ref 3401484 // Object
	  param inout name "arrayClass" type class_ref 3421708 // Class
	  param inout name "arrayClDesc" type class_ref 137499 // ObjectStreamClass
	  param inout name "componentType" type class_ref 3421708 // Class
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write array {@code array} of class {@code arrayClass} with
component type {@code componentType} into the receiver. It is
assumed the array has not been dumped yet. Returns
the handle for this object (array) which is dumped here.

@param array
           The array object to dump
@param arrayClass
           A {@code java.lang.Class} representing the class of the
           array
@param componentType
           A {@code java.lang.Class} representing the array
           component type
@return the handle assigned to the array

@throws IOException
            If an IO exception happened when writing the array."
      end

      operation 190875 "writeNewClass"
	private explicit_return_type "int"
	nparams 2
	  param inout name "object" type class_ref 3421708 // Class
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write class {@code object} into the receiver. It is assumed the
class has not been dumped yet. Classes are not really dumped, but a class
descriptor ({@code ObjectStreamClass}) that corresponds to them.
Returns the handle for this object (class) which is dumped here.

@param object
           The {@code java.lang.Class} object to dump
@return the handle assigned to the class being dumped

@throws IOException
            If an IO exception happened when writing the class."
      end

      operation 191003 "writeNewClassDesc"
	private explicit_return_type "void"
	nparams 1
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write class descriptor {@code classDesc} into the receiver. It is
assumed the class descriptor has not been dumped yet. The class
descriptors for the superclass chain will be dumped as well. Returns
the handle for this object (class descriptor) which is dumped here.

@param classDesc
           The {@code ObjectStreamClass} object to dump

@throws IOException
            If an IO exception happened when writing the class
            descriptor."
      end

      operation 191131 "writeClassDescriptor"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a class descriptor to the target stream.

@param classDesc
           the class descriptor to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 191259 "writeNewException"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 132251 // Exception
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write exception {@code ex} into the receiver. It is assumed the
exception has not been dumped yet. Returns
the handle for this object (exception) which is dumped here.
This is used to dump the exception instance that happened (if any) when
dumping the original object graph. The set of seen objects will be reset
just before and just after dumping this exception object.

When exceptions are found normally in the object graph, they are dumped
as a regular object, and not by this method. In that case, the set of
\"known objects\" is not reset.

@param ex
           Exception object to dump

@throws IOException
            If an IO exception happened when writing the exception
            object."
      end

      operation 191387 "writeNewObject"
	private explicit_return_type "int"
	nparams 4
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "theClass" type class_ref 3421708 // Class
	  param inout name "clDesc" type class_ref 137499 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write object {@code object} of class {@code theClass} into
the receiver. It is assumed the object has not been dumped yet.
Return the handle for this object which
is dumped here.

If the object implements {@code Externalizable} its
{@code writeExternal} is called. Otherwise, all fields described
by the class hierarchy is dumped. Each class can define how its declared
instance fields are dumped by defining a private method
{@code writeObject}

@param object
           The object to dump
@param theClass
           A {@code java.lang.Class} representing the class of the
           object
@param unshared
           Write the object unshared
@return the handle assigned to the object

@throws IOException
            If an IO exception happened when writing the object."
      end

      operation 191515 "writeNewString"
	private explicit_return_type "int"
	nparams 2
	  param inout name "object" type class_ref 3399692 // String
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write String {@code object} into the receiver. It is assumed the
String has not been dumped yet. Returns the handle for this object (String) which is dumped here.
Strings are saved encoded with {@link DataInput modified UTF-8}.

@param object
           the string to dump.
@return the handle assigned to the String being dumped

@throws IOException
            If an IO exception happened when writing the String."
      end

      operation 191643 "writeNull"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a special tag that indicates the value {@code null} into the
receiver.

@throws IOException
            If an IO exception happened when writing the tag for
            {@code null}."
      end

      operation 191771 "writeObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an object to the target stream.

@param object
           the object to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream.
@see ObjectInputStream#readObject()"
      end

      operation 191899 "writeUnshared"
	public explicit_return_type "void"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an unshared object to the target stream. This method is identical
to {@code writeObject}, except that it always writes a new object to the
stream versus the use of back-referencing for identical objects by
{@code writeObject}.

@param object
           the object to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream.
@see ObjectInputStream#readUnshared()"
      end

      operation 192027 "writeObject"
	private explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 192155 "writeObjectInternal"
	private explicit_return_type "int"
	nparams 4
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "unshared" explicit_type "boolean"
	  param inout name "computeClassBasedReplacement" explicit_type "boolean"
	  param inout name "computeStreamReplacement" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write object {@code object} into the receiver's underlying stream.

@param object
           The object to write
@param unshared
           Write the object unshared
@param computeClassBasedReplacement
           A boolean indicating if class-based replacement should be
           computed (if supported) for the object.
@param computeStreamReplacement
           A boolean indicating if stream-based replacement should be
           computed (if supported) for the object.
@return the handle assigned to the final object being dumped

@throws IOException
            If an IO exception happened when writing the object

@see ObjectInputStream#readObject()"
      end

      operation 192283 "writeEnumDesc"
	private return_type class_ref 137499 // ObjectStreamClass
	nparams 3
	  param inout name "theClass" type class_ref 3421708 // Class
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " write for Enum Class Desc only, which is different from other classes"
      end

      operation 192411 "writeNewEnum"
	private explicit_return_type "int"
	nparams 3
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "theClass" type class_ref 3421708 // Class
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 192539 "writeObjectOverride"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be overridden by subclasses to write {@code object} to the
target stream.

@param object
           the object to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 192667 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a short (16 bit) to the target stream.

@param value
           the short to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 192795 "writeStreamHeader"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the {@link ObjectOutputStream} header to the target stream.

@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 192923 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string encoded with {@link DataInput modified UTF-8} to the
target stream.

@param value
           the string to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end
    end

    class 128539 "IOException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals a general, I/O-related error. Error details may be specified when
calling the constructor, as usual. Note there are also several subclasses of
this class for more specific error situations, such as
{@link FileNotFoundException} or {@link EOFException}."
      classrelation 143643 // <generalisation>
	relation 143643 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 143643 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      attribute 139035 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7818375828146090155L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 162971 "IOException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code IOException} with its stack trace filled in."
      end

      operation 163099 "IOException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code IOException} with its stack trace and detail
message filled in.

@param detailMessage
           the detail message for this exception."
      end

      operation 163227 "IOException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of this class with detail message and cause
filled in.

@param message
           The detail message for the exception.
@param cause
           The detail cause for the exception.
@since 1.6"
      end

      operation 163355 "IOException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of this class with its detail cause filled in.

@param cause
           The detail cause for the exception.
@since 1.6"
      end
    end

    class 128667 "ObjectInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link InputStream} that is able to read (deserialize) Java
objects as well as primitive data types (int, byte, char etc.). The data has
typically been saved using an ObjectOutputStream.

@see ObjectOutputStream
@see ObjectInput
@see Serializable
@see Externalizable"
      class 138011 "GetField"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 195483 "getObjectStreamClass"
	  abstract public return_type class_ref 137499 // ObjectStreamClass
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the ObjectStreamClass that describes a field.

@return the descriptor class for a serialized field."
	end

	operation 195611 "defaulted"
	  abstract public explicit_return_type "boolean"
	  nparams 1
	    param inout name "name" type class_ref 3399692 // String
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Indicates if the field identified by {@code name} is defaulted. This
means that it has no value in this stream.

@param name
           the name of the field to check.
@return {@code true} if the field is defaulted, {@code false}
        otherwise.
@throws IllegalArgumentException
            if {@code name} does not identify a serializable field.
@throws IOException
            if an error occurs while reading from the source input
            stream."
	end

	operation 195739 "get"
	  abstract public explicit_return_type "boolean"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param inout name "defaultValue" explicit_type "boolean"
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value of the boolean field identified by {@code name} from
the persistent field.

@param name
           the name of the field to get.
@param defaultValue
           the default value that is used if the field does not have
           a value when read from the source stream.
@return the value of the field identified by {@code name}.
@throws IOException
            if an error occurs while reading from the source input
            stream.
@throws IllegalArgumentException
            if the type of the field identified by {@code name} is
            not {@code boolean}."
	end

	operation 195867 "get"
	  abstract public explicit_return_type "char"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "defaultValue" explicit_type "char"
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value of the character field identified by {@code name} from
the persistent field.

@param name
           the name of the field to get.
@param defaultValue
           the default value that is used if the field does not have
           a value when read from the source stream.
@return the value of the field identified by {@code name}.
@throws IOException
            if an error occurs while reading from the source input
            stream.
@throws IllegalArgumentException
            if the type of the field identified by {@code name} is
            not {@code char}."
	end

	operation 195995 "get"
	  abstract public explicit_return_type "byte"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "defaultValue" explicit_type "byte"
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value of the byte field identified by {@code name} from the
persistent field.

@param name
           the name of the field to get.
@param defaultValue
           the default value that is used if the field does not have
           a value when read from the source stream.
@return the value of the field identified by {@code name}.
@throws IOException
            if an error occurs while reading from the source input
            stream.
@throws IllegalArgumentException
            if the type of the field identified by {@code name} is
            not {@code byte}."
	end

	operation 196123 "get"
	  abstract public explicit_return_type "short"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "defaultValue" explicit_type "short"
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value of the short field identified by {@code name} from the
persistent field.

@param name
           the name of the field to get.
@param defaultValue
           the default value that is used if the field does not have
           a value when read from the source stream.
@return the value of the field identified by {@code name}.
@throws IOException
            if an error occurs while reading from the source input
            stream.
@throws IllegalArgumentException
            if the type of the field identified by {@code name} is
            not {@code short}."
	end

	operation 196251 "get"
	  abstract public explicit_return_type "int"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "defaultValue" explicit_type "int"
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value of the integer field identified by {@code name} from
the persistent field.

@param name
           the name of the field to get.
@param defaultValue
           the default value that is used if the field does not have
           a value when read from the source stream.
@return the value of the field identified by {@code name}.
@throws IOException
            if an error occurs while reading from the source input
            stream.
@throws IllegalArgumentException
            if the type of the field identified by {@code name} is
            not {@code int}."
	end

	operation 196379 "get"
	  abstract public explicit_return_type "long"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "defaultValue" explicit_type "long"
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value of the long field identified by {@code name} from the
persistent field.

@param name
           the name of the field to get.
@param defaultValue
           the default value that is used if the field does not have
           a value when read from the source stream.
@return the value of the field identified by {@code name}.
@throws IOException
            if an error occurs while reading from the source input
            stream.
@throws IllegalArgumentException
            if the type of the field identified by {@code name} is
            not {@code long}."
	end

	operation 196507 "get"
	  abstract public explicit_return_type "float"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "defaultValue" explicit_type "float"
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value of the float field identified by {@code name} from the
persistent field.

@param name
           the name of the field to get.
@param defaultValue
           the default value that is used if the field does not have
           a value when read from the source stream.
@return the value of the field identified by {@code name}.
@throws IOException
            if an error occurs while reading from the source input
            stream.
@throws IllegalArgumentException
            if the type of the field identified by {@code float} is
            not {@code char}."
	end

	operation 196635 "get"
	  abstract public explicit_return_type "double"
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param in name "defaultValue" explicit_type "double"
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value of the double field identified by {@code name} from
the persistent field.

@param name
           the name of the field to get.
@param defaultValue
           the default value that is used if the field does not have
           a value when read from the source stream.
@return the value of the field identified by {@code name}.
@throws IOException
            if an error occurs while reading from the source input
            stream.
@throws IllegalArgumentException
            if the type of the field identified by {@code name} is
            not {@code double}."
	end

	operation 196763 "get"
	  abstract public return_type class_ref 3401484 // Object
	  nparams 2
	    param inout name "name" type class_ref 3399692 // String
	    param inout name "defaultValue" type class_ref 3401484 // Object
	  nexceptions 2
	    exception class_ref 128539 // IOException
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the value of the object field identified by {@code name} from
the persistent field.

@param name
           the name of the field to get.
@param defaultValue
           the default value that is used if the field does not have
           a value when read from the source stream.
@return the value of the field identified by {@code name}.
@throws IOException
            if an error occurs while reading from the source input
            stream.
@throws IllegalArgumentException
            if the type of the field identified by {@code name} is
            not {@code Object}."
	end
      end

      classrelation 148635 // <generalisation>
	relation 148635 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 148635 // <generalisation>
	  b parent class_ref 131867 // InputStream
      end

      classrelation 149019 // <realization>
	relation 149019 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 149019 // <realization>
	  b parent class_ref 138139 // ObjectInput
      end

      classrelation 149147 // <realization>
	relation 149147 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 149147 // <realization>
	  b parent class_ref 137115 // ObjectStreamConstants
      end

      classrelation 149275 // emptyStream (<unidirectional association>)
	relation 149275 --->
	  a role_name "emptyStream" init_value " new ByteArrayInputStream(EmptyArray.BYTE)" private
	    comment " TODO: this is non-static to avoid sync contention. Would static be faster?
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 149275 // emptyStream (<unidirectional association>)
	  b parent class_ref 131867 // InputStream
      end

      classrelation 149403 // UNSHARED_OBJ (<unidirectional association>)
	relation 149403 --->
	  a role_name "UNSHARED_OBJ" init_value " new Object()" class_relation const_relation private
	    comment " To put into objectsRead when reading unsharedObject
 $NON-LOCK-1$"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 149403 // UNSHARED_OBJ (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      attribute 144283 "hasPushbackTC"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " If the receiver has already read & not consumed a TC code"
      end

      attribute 144411 "pushbackTC"
	private explicit_type "byte"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Push back TC code if the variable above is true"
      end

      attribute 144539 "nestedLevels"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " How many nested levels to readObject. When we reach 0 we have to validate
 the graph then reset it"
      end

      attribute 144667 "nextHandle"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " All objects are assigned an ID (integer handle)"
      end

      classrelation 149531 // input (<unidirectional association>)
	relation 149531 --->
	  a role_name "input" private
	    comment " Where we read from
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 149531 // input (<unidirectional association>)
	  b parent class_ref 136091 // DataInputStream
      end

      classrelation 149659 // primitiveTypes (<unidirectional association>)
	relation 149659 --->
	  a role_name "primitiveTypes" private
	    comment " Where we read primitive types from
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 149659 // primitiveTypes (<unidirectional association>)
	  b parent class_ref 136091 // DataInputStream
      end

      classrelation 149787 // primitiveData (<unidirectional association>)
	relation 149787 --->
	  a role_name "primitiveData" init_value " emptyStream" private
	    comment " Where we keep primitive type data
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 149787 // primitiveData (<unidirectional association>)
	  b parent class_ref 131867 // InputStream
      end

      attribute 144795 "enableResolve"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Resolve object is a mechanism for replacement"
      end

      classrelation 149915 // objectsRead (<unidirectional association>)
	relation 149915 --->
	  a role_name "objectsRead" private
	    comment "
All the objects we've read, indexed by their serialization handle (minus the base offset).

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 149915 // objectsRead (<unidirectional association>)
	  b parent class_ref 138267 // ArrayList
      end

      classrelation 150043 // currentObject (<unidirectional association>)
	relation 150043 --->
	  a role_name "currentObject" private
	    comment " Used by defaultReadObject
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 150043 // currentObject (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 150171 // currentClass (<unidirectional association>)
	relation 150171 --->
	  a role_name "currentClass" private
	    comment " Used by defaultReadObject
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 150171 // currentClass (<unidirectional association>)
	  b parent class_ref 137499 // ObjectStreamClass
      end

      class 138395 "InputValidationDesc"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 150683 // validator (<unidirectional association>)
	  relation 150683 --->
	    a role_name "validator" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 150683 // validator (<unidirectional association>)
	    b parent class_ref 138779 // ObjectInputValidation
	end

	attribute 145307 "priority"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      classrelation 150299 // validations (<unidirectional association>)
	relation 150299 --->
	  a role_name "validations" multiplicity "[]" private
	    comment " All validations to be executed when the complete graph is read. See inner
 type below.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 150299 // validations (<unidirectional association>)
	  b parent class_ref 138395 // InputValidationDesc
      end

      attribute 144923 "subclassOverridingImplementation"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Allows the receiver to decide if it needs to call readObjectOverride"
      end

      classrelation 150427 // callerClassLoader (<unidirectional association>)
	relation 150427 --->
	  a role_name "callerClassLoader" private
	    comment " Original caller's class loader, used to perform class lookups
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 150427 // callerClassLoader (<unidirectional association>)
	  b parent class_ref 138523 // ClassLoader
      end

      attribute 145051 "mustResolve"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " false when reading missing fields"
      end

      attribute 145179 "descriptorHandle"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Handle for the current class descriptor"
      end

      classrelation 150555 // PRIMITIVE_CLASSES (<unidirectional association>)
	relation 150555 --->
	  a role_name "PRIMITIVE_CLASSES" init_value " new HashMap<String, Class<?>>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Class<?>> ${name}${value};
"
	    classrelation_ref 150555 // PRIMITIVE_CLASSES (<unidirectional association>)
	  b parent class_ref 138651 // HashMap
      end

      extra_member 128027 "initialization"
	
	cpp "" ""
	java "  static {
        PRIMITIVE_CLASSES.put(\"boolean\", boolean.class);
        PRIMITIVE_CLASSES.put(\"byte\", byte.class);
        PRIMITIVE_CLASSES.put(\"char\", char.class);
        PRIMITIVE_CLASSES.put(\"double\", double.class);
        PRIMITIVE_CLASSES.put(\"float\", float.class);
        PRIMITIVE_CLASSES.put(\"int\", int.class);
        PRIMITIVE_CLASSES.put(\"long\", long.class);
        PRIMITIVE_CLASSES.put(\"short\", short.class);
        PRIMITIVE_CLASSES.put(\"void\", void.class);
    }"
	php ""
	python ""
	idl ""
      end

      operation 196891 "ObjectInputStream"
	protected explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ObjectInputStream. This default constructor can be used
by subclasses that do not want to use the public constructor if it
allocates unneeded data.

@throws IOException
            if an error occurs when creating this stream."
      end

      operation 197019 "ObjectInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "input" type class_ref 131867 // InputStream
	nexceptions 2
	  exception class_ref 137627 // StreamCorruptedException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ObjectInputStream that reads from the InputStream
{@code input}.

@param input
           the non-null source InputStream to filter reads on.
@throws IOException
            if an error occurs while reading the stream header.
@throws StreamCorruptedException
            if the source stream does not contain serialized objects that
            can be read."
      end

      operation 197147 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 197275 "checkReadPrimitiveTypes"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks to if it is ok to read primitive types from this stream at
this point. One is not supposed to read primitive types when about to
read an object, for example, so an exception has to be thrown.

@throws IOException
            If any IO problem occurred when trying to read primitive type
            or if it is illegal to read primitive types"
      end

      operation 197403 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream. This implementation closes the source stream.

@throws IOException
            if an error occurs while closing this stream."
      end

      operation 197531 "defaultReadObject"
	public explicit_return_type "void"
	nparams 0
	nexceptions 3
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 137755 // NotActiveException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default method to read objects from this stream. Serializable fields
defined in the object's class and superclasses are read from the source
stream.

@throws ClassNotFoundException
            if the object's class cannot be found.
@throws IOException
            if an I/O error occurs while reading the object data.
@throws NotActiveException
            if this method is not called from {@code readObject()}.
@see ObjectOutputStream#defaultWriteObject"
      end

      operation 197659 "enableResolveObject"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables object replacement for this stream. By default this is not
enabled. Only trusted subclasses (loaded with system class loader) are
allowed to change this status.

@param enable
           {@code true} to enable object replacement; {@code false} to
           disable it.
@return the previous setting.
@see #resolveObject
@see ObjectOutputStream#enableReplaceObject"
      end

      operation 197787 "nextHandle"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the next {@code int} handle to be used to indicate cyclic
references being loaded from the stream.

@return the next handle to represent the next cyclic reference"
      end

      operation 197915 "nextTC"
	private explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the next token code (TC) from the receiver, which indicates what
kind of object follows

@return the next TC from the receiver

@throws IOException
            If an IO error occurs

@see ObjectStreamConstants"
      end

      operation 198043 "pushbackTC"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes back the last TC code read"
      end

      operation 198171 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single byte from the source stream and returns it as an integer
in the range from 0 to 255. Returns -1 if the end of the source stream
has been reached. Blocks if no input is available.

@return the byte read or -1 if the end of the source stream has been
        reached.
@throws IOException
            if an error occurs while reading from this stream."
      end

      operation 198299 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code length} bytes from the source stream and stores them
in byte array {@code buffer} starting at offset {@code count}. Blocks
until {@code count} bytes have been read, the end of the source stream is
detected or an exception is thrown.

@param buffer
           the array in which to store the bytes read.
@param offset
           the initial position in {@code buffer} to store the bytes
           read from the source stream.
@param length
           the maximum number of bytes to store in {@code buffer}.
@return the number of bytes read or -1 if the end of the source input
        stream has been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the length of
            {@code buffer}.
@throws IOException
            if an error occurs while reading from this stream.
@throws NullPointerException
            if {@code buffer} is {@code null}."
      end

      operation 198427 "readBlockData"
	private explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads and returns an array of raw bytes with primitive data. The array
will have up to 255 bytes. The primitive data will be in the format
described by {@code DataOutputStream}.

@return The primitive data read, as raw bytes

@throws IOException
            If an IO exception happened when reading the primitive data."
      end

      operation 198555 "readBlockDataLong"
	private explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads and returns an array of raw bytes with primitive data. The array
will have more than 255 bytes. The primitive data will be in the format
described by {@code DataOutputStream}.

@return The primitive data read, as raw bytes

@throws IOException
            If an IO exception happened when reading the primitive data."
      end

      operation 198683 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a boolean from the source stream.

@return the boolean value read from the source stream.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 198811 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte (8 bit) from the source stream.

@return the byte value read from the source stream.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 198939 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a character (16 bit) from the source stream.

@return the char value read from the source stream.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 199067 "discardData"
	private explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads and discards block data and objects until TC_ENDBLOCKDATA is found.

@throws IOException
            If an IO exception happened when reading the optional class
            annotation.
@throws ClassNotFoundException
            If the class corresponding to the class descriptor could not
            be found."
      end

      operation 199195 "readClassDesc"
	private return_type class_ref 137499 // ObjectStreamClass
	nparams 0
	nexceptions 2
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a class descriptor (an {@code ObjectStreamClass}) from the
stream.

@return the class descriptor read from the stream

@throws IOException
            If an IO exception happened when reading the class
            descriptor.
@throws ClassNotFoundException
            If the class corresponding to the class descriptor could not
            be found."
      end

      operation 199323 "corruptStream"
	private return_type class_ref 137627 // StreamCorruptedException
	nparams 1
	  param in name "tc" explicit_type "byte"
	nexceptions 1
	  exception class_ref 137627 // StreamCorruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 199451 "readContent"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param in name "tc" explicit_type "byte"
	nexceptions 2
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the content of the receiver based on the previously read token
{@code tc}.

@param tc
           The token code for the next item in the stream
@return the object read from the stream

@throws IOException
            If an IO exception happened when reading the class
            descriptor.
@throws ClassNotFoundException
            If the class corresponding to the object being read could not
            be found."
      end

      operation 199579 "readNonPrimitiveContent"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the content of the receiver based on the previously read token
{@code tc}. Primitive data content is considered an error.

@param unshared
           read the object unshared
@return the object read from the stream

@throws IOException
            If an IO exception happened when reading the class
            descriptor.
@throws ClassNotFoundException
            If the class corresponding to the object being read could not
            be found."
      end

      operation 199707 "readCyclicReference"
	private return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 2
	  exception class_ref 129563 // InvalidObjectException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next item from the stream assuming it is a cyclic reference to
an object previously read. Return the actual object previously read.

@return the object previously read from the stream

@throws IOException
            If an IO exception happened when reading the class
            descriptor.
@throws InvalidObjectException
            If the cyclic reference is not valid."
      end

      operation 199835 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a double (64 bit) from the source stream.

@return the double value read from the source stream.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 199963 "readException"
	private return_type class_ref 132251 // Exception
	nparams 0
	nexceptions 4
	  exception class_ref 138907 // WriteAbortedException
	  exception class_ref 139035 // OptionalDataException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read the next item assuming it is an exception. The exception is not a
regular instance in the object graph, but the exception instance that
happened (if any) when dumping the original object graph. The set of seen
objects will be reset just before and just after loading this exception
object.
<p>
When exceptions are found normally in the object graph, they are loaded
as a regular object, and not by this method. In that case, the set of
\"known objects\" is not reset.

@return the exception read

@throws IOException
            If an IO exception happened when reading the exception
            object.
@throws ClassNotFoundException
            If a class could not be found when reading the object graph
            for the exception
@throws OptionalDataException
            If optional data could not be found when reading the
            exception graph
@throws WriteAbortedException
            If another exception was caused when dumping this exception"
      end

      operation 200091 "readFieldDescriptors"
	private explicit_return_type "void"
	nparams 1
	  param inout name "cDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 2
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a collection of field descriptors (name, type name, etc) for the
class descriptor {@code cDesc} (an {@code ObjectStreamClass})

@param cDesc
           The class descriptor (an {@code ObjectStreamClass})
           for which to write field information

@throws IOException
            If an IO exception happened when reading the field
            descriptors.
@throws ClassNotFoundException
            If a class for one of the field types could not be found

@see #readObject()"
      end

      operation 200219 "formatClassSig"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "classSig" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format the class signature for ObjectStreamField, for example,
\"[L[Ljava.lang.String;;\" is converted to \"[Ljava.lang.String;\""
      end

      operation 200347 "readFields"
	public return_type class_ref 138011 // GetField
	nparams 0
	nexceptions 3
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 137755 // NotActiveException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the persistent fields of the object that is currently being read
from the source stream. The values read are stored in a GetField object
that provides access to the persistent fields. This GetField object is
then returned.

@return the GetField object from which persistent fields can be accessed
        by name.
@throws ClassNotFoundException
            if the class of an object being deserialized can not be
            found.
@throws IOException
            if an error occurs while reading from this stream.
@throws NotActiveException
            if this stream is currently not reading an object."
      end

      operation 200475 "readFieldValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "emulatedFields" type class_ref 137883 // EmulatedFieldsForLoading
	nexceptions 3
	  exception class_ref 139035 // OptionalDataException
	  exception class_ref 139163 // InvalidClassException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a collection of field values for the emulated fields
{@code emulatedFields}

@param emulatedFields
           an {@code EmulatedFieldsForLoading}, concrete subclass
           of {@code GetField}

@throws IOException
            If an IO exception happened when reading the field values.
@throws InvalidClassException
            If an incompatible type is being assigned to an emulated
            field.
@throws OptionalDataException
            If optional data could not be found when reading the
            exception graph

@see #readFields
@see #readObject()"
      end

      operation 200603 "readFieldValues"
	private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 3
	  exception class_ref 139035 // OptionalDataException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a collection of field values for the class descriptor
{@code classDesc} (an {@code ObjectStreamClass}). The
values will be used to set instance fields in object {@code obj}.
This is the default mechanism, when emulated fields (an
{@code GetField}) are not used. Actual values to load are stored
directly into the object {@code obj}.

@param obj
           Instance in which the fields will be set.
@param classDesc
           A class descriptor (an {@code ObjectStreamClass})
           defining which fields should be loaded.

@throws IOException
            If an IO exception happened when reading the field values.
@throws InvalidClassException
            If an incompatible type is being assigned to an emulated
            field.
@throws OptionalDataException
            If optional data could not be found when reading the
            exception graph
@throws ClassNotFoundException
            If a class of an object being de-serialized can not be found

@see #readFields
@see #readObject()"
      end

      operation 200731 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a float (32 bit) from the source stream.

@return the float value read from the source stream.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 200859 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dst" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from the source stream into the byte array {@code dst}.
This method will block until {@code dst.length} bytes have been read.

@param dst
           the array in which to store the bytes read.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 200987 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "dst" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads {@code byteCount} bytes from the source stream into the byte array {@code dst}.

@param dst
           the byte array in which to store the bytes read.
@param offset
           the initial position in {@code dst} to store the bytes
           read from the source stream.
@param byteCount
           the number of bytes to read.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 201115 "readHierarchy"
	private explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 3
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 137755 // NotActiveException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Walks the hierarchy of classes described by class descriptor
{@code classDesc} and reads the field values corresponding to
fields declared by the corresponding class descriptor. The instance to
store field values into is {@code object}. If the class
(corresponding to class descriptor {@code classDesc}) defines
private instance method {@code readObject} it will be used to load
field values.

@param object
           Instance into which stored field values loaded.
@param classDesc
           A class descriptor (an {@code ObjectStreamClass})
           defining which fields should be loaded.

@throws IOException
            If an IO exception happened when reading the field values in
            the hierarchy.
@throws ClassNotFoundException
            If a class for one of the field types could not be found
@throws NotActiveException
            If {@code defaultReadObject} is called from the wrong
            context.

@see #defaultReadObject
@see #readObject()"
      end

      classrelation 150811 // cachedSuperclasses (<unidirectional association>)
	relation 150811 --->
	  a role_name "cachedSuperclasses" init_value " new HashMap<Class<?>, List<Class<?>>>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>, List<Class<?>>> ${name}${value};
"
	    classrelation_ref 150811 // cachedSuperclasses (<unidirectional association>)
	  b parent class_ref 138651 // HashMap
      end

      operation 201243 "cacheSuperclassesFor"
	private return_type class_ref 131483 // List
	nparams 1
	  param inout name "c" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<?>> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 201371 "findStreamSuperclass"
	private explicit_return_type "int"
	nparams 3
	  param inout name "cl" type class_ref 3421708 // Class
	  param inout name "classList" type class_ref 131483 // List
	  param in name "lastIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<ObjectStreamClass> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 201499 "readObjectNoData"
	private explicit_return_type "void"
	nparams 3
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "cl" type class_ref 3421708 // Class
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 139291 // ObjectStreamException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 201627 "readObjectForClass"
	private explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "classDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 3
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 137755 // NotActiveException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 201755 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an integer (32 bit) from the source stream.

@return the integer value read from the source stream.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 201883 "readLine"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Reads the next line from the source stream. Lines are terminated by
{@code '\\r'}, {@code '\\n'}, {@code \"\\r\\n\"} or an {@code EOF}.

@return the string read from the source stream.
@throws IOException
            if an error occurs while reading from the source stream.
@deprecated Use {@link BufferedReader}"
      end

      operation 202011 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a long (64 bit) from the source stream.

@return the long value read from the source stream.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 202139 "readNewArray"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 139035 // OptionalDataException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a new array from the receiver. It is assumed the array has not been
read yet (not a cyclic reference). Return the array read.

@param unshared
           read the object unshared
@return the array read

@throws IOException
            If an IO exception happened when reading the array.
@throws ClassNotFoundException
            If a class for one of the objects could not be found
@throws OptionalDataException
            If optional data could not be found when reading the array."
      end

      operation 202267 "readNewClass"
	private return_type class_ref 3421708 // Class
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a new class from the receiver. It is assumed the class has not been
read yet (not a cyclic reference). Return the class read.

@param unshared
           read the object unshared
@return The {@code java.lang.Class} read from the stream.

@throws IOException
            If an IO exception happened when reading the class.
@throws ClassNotFoundException
            If a class for one of the objects could not be found"
      end

      operation 202395 "readEnumDesc"
	private return_type class_ref 137499 // ObjectStreamClass
	nparams 0
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "read class type for Enum, note there's difference between enum and normal
classes"
      end

      operation 202523 "readEnumDescInternal"
	private return_type class_ref 137499 // ObjectStreamClass
	nparams 0
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 202651 "readEnum"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 139035 // OptionalDataException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " For the Enum.valueOf call"
      end

      operation 202779 "readNewClassDesc"
	private return_type class_ref 137499 // ObjectStreamClass
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a new class descriptor from the receiver. It is assumed the class
descriptor has not been read yet (not a cyclic reference). Return the
class descriptor read.

@param unshared
           read the object unshared
@return The {@code ObjectStreamClass} read from the stream.

@throws IOException
            If an IO exception happened when reading the class
            descriptor.
@throws ClassNotFoundException
            If a class for one of the objects could not be found"
      end

      operation 202907 "readNewProxyClassDesc"
	private return_type class_ref 3421708 // Class
	nparams 0
	nexceptions 2
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a new proxy class descriptor from the receiver. It is assumed the
proxy class descriptor has not been read yet (not a cyclic reference).
Return the proxy class descriptor read.

@return The {@code Class} read from the stream.

@throws IOException
            If an IO exception happened when reading the class
            descriptor.
@throws ClassNotFoundException
            If a class for one of the objects could not be found"
      end

      operation 203035 "readClassDescriptor"
	protected return_type class_ref 137499 // ObjectStreamClass
	nparams 0
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a class descriptor from the source stream.

@return the class descriptor read from the source stream.
@throws ClassNotFoundException
            if a class for one of the objects cannot be found.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 203163 "resolveProxyClass"
	protected return_type class_ref 3421708 // Class
	nparams 1
	  param inout name "interfaceNames" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the proxy class that implements the interfaces specified in
{@code interfaceNames}.

@param interfaceNames
           the interfaces used to create the proxy class.
@return the proxy class.
@throws ClassNotFoundException
            if the proxy class or any of the specified interfaces cannot
            be created.
@throws IOException
            if an error occurs while reading from the source stream.
@see ObjectOutputStream#annotateProxyClass(Class)"
      end

      operation 203291 "readNewHandle"
	private explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 203419 "readNewObject"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 139035 // OptionalDataException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a new object from the stream. It is assumed the object has not been
loaded yet (not a cyclic reference). Return the object read.

If the object implements <code>Externalizable</code> its
<code>readExternal</code> is called. Otherwise, all fields described by
the class hierarchy are loaded. Each class can define how its declared
instance fields are loaded by defining a private method
<code>readObject</code>

@param unshared
           read the object unshared
@return the object read

@throws IOException
            If an IO exception happened when reading the object.
@throws OptionalDataException
            If optional data could not be found when reading the object
            graph
@throws ClassNotFoundException
            If a class for one of the objects could not be found"
      end

      operation 203547 "missingClassDescriptor"
	private return_type class_ref 139163 // InvalidClassException
	nparams 0
	nexceptions 1
	  exception class_ref 139163 // InvalidClassException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 203675 "readNewString"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a string encoded in {@link DataInput modified UTF-8} from the
receiver. Return the string read.

@param unshared
           read the object unshared
@return the string just read.
@throws IOException
            If an IO exception happened when reading the String."
      end

      operation 203803 "readNewLongString"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read a new String in UTF format from the receiver. Return the string
read.

@param unshared
           read the object unshared
@return the string just read.

@throws IOException
            If an IO exception happened when reading the String."
      end

      operation 203931 "readObject"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 3
	  exception class_ref 139035 // OptionalDataException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next object from the source stream.

@return the object read from the source stream.
@throws ClassNotFoundException
            if the class of one of the objects in the object graph cannot
            be found.
@throws IOException
            if an error occurs while reading from the source stream.
@throws OptionalDataException
            if primitive data types were found instead of an object.
@see ObjectOutputStream#writeObject(Object)"
      end

      operation 204059 "readUnshared"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next unshared object from the source stream.

@return the new object read.
@throws ClassNotFoundException
            if the class of one of the objects in the object graph cannot
            be found.
@throws IOException
            if an error occurs while reading from the source stream.
@see ObjectOutputStream#writeUnshared"
      end

      operation 204187 "readObject"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 139035 // OptionalDataException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 150939 // bootstrapLoader (<unidirectional association>)
	relation 150939 --->
	  a role_name "bootstrapLoader" init_value " Object.class.getClassLoader()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 150939 // bootstrapLoader (<unidirectional association>)
	  b parent class_ref 138523 // ClassLoader
      end

      classrelation 151067 // systemLoader (<unidirectional association>)
	relation 151067 --->
	  a role_name "systemLoader" init_value " ClassLoader.getSystemClassLoader()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 151067 // systemLoader (<unidirectional association>)
	  b parent class_ref 138523 // ClassLoader
      end

      operation 204315 "getClosestUserClassLoader"
	class_operation private return_type class_ref 138523 // ClassLoader
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches up the call stack to find the closest user-defined class loader.

@return a user-defined class loader or null if one isn't found"
      end

      operation 204443 "readObjectOverride"
	protected return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 3
	  exception class_ref 139035 // OptionalDataException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be overridden by subclasses to read the next object from the
source stream.

@return the object read from the source stream.
@throws ClassNotFoundException
            if the class of one of the objects in the object graph cannot
            be found.
@throws IOException
            if an error occurs while reading from the source stream.
@throws OptionalDataException
            if primitive data types were found instead of an object.
@see ObjectOutputStream#writeObjectOverride"
      end

      operation 204571 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a short (16 bit) from the source stream.

@return the short value read from the source stream.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 204699 "readStreamHeader"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 137627 // StreamCorruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads and validates the ObjectInputStream header from the source stream.

@throws IOException
            if an error occurs while reading from the source stream.
@throws StreamCorruptedException
            if the source stream does not contain readable serialized
            objects."
      end

      operation 204827 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned byte (8 bit) from the source stream.

@return the unsigned byte value read from the source stream packaged in
        an integer.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 204955 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned short (16 bit) from the source stream.

@return the unsigned short value read from the source stream packaged in
        an integer.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 205083 "readUTF"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a string encoded in {@link DataInput modified UTF-8} from the
source stream.

@return the string encoded in {@link DataInput modified UTF-8} read from
        the source stream.
@throws EOFException
            if the end of the input is reached before the read
            request can be satisfied.
@throws IOException
            if an error occurs while reading from the source stream."
      end

      operation 205211 "registeredObjectRead"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param in name "handle" explicit_type "int"
	nexceptions 1
	  exception class_ref 129563 // InvalidObjectException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the previously-read object corresponding to the given serialization handle.
@throws InvalidObjectException
            If there is no previously-read object with this handle"
      end

      operation 205339 "registerObjectRead"
	private explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "handle" explicit_type "int"
	  param inout name "unshared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates a read object with the its serialization handle."
      end

      operation 205467 "registerValidation"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 138779 // ObjectInputValidation
	  param in name "priority" explicit_type "int"
	nexceptions 2
	  exception class_ref 137755 // NotActiveException
	  exception class_ref 129563 // InvalidObjectException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a callback for post-deserialization validation of objects. It
allows to perform additional consistency checks before the {@code
readObject()} method of this class returns its result to the caller. This
method can only be called from within the {@code readObject()} method of
a class that implements \"special\" deserialization rules. It can be called
multiple times. Validation callbacks are then done in order of decreasing
priority, defined by {@code priority}.

@param object
           an object that can validate itself by receiving a callback.
@param priority
           the validator's priority.
@throws InvalidObjectException
            if {@code object} is {@code null}.
@throws NotActiveException
            if this stream is currently not reading objects. In that
            case, calling this method is not allowed.
@see ObjectInputValidation#validateObject()"
      end

      operation 205595 "resetSeenObjects"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the collection of objects already loaded by the receiver."
      end

      operation 205723 "resetState"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the receiver. The collection of objects already read by the
receiver is reset, and internal structures are also reset so that the
receiver knows it is in a fresh clean state."
      end

      operation 205851 "resolveClass"
	protected return_type class_ref 3421708 // Class
	nparams 1
	  param inout name "osClass" type class_ref 137499 // ObjectStreamClass
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the Java class corresponding to the class descriptor {@code
osClass} that has just been read from the source stream.

@param osClass
           an ObjectStreamClass read from the source stream.
@return a Class corresponding to the descriptor {@code osClass}.
@throws ClassNotFoundException
            if the class for an object cannot be found.
@throws IOException
            if an I/O error occurs while creating the class.
@see ObjectOutputStream#annotateClass(Class)"
      end

      operation 205979 "resolveObject"
	protected return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows trusted subclasses to substitute the specified original {@code
object} with a new object. Object substitution has to be activated first
with calling {@code enableResolveObject(true)}. This implementation just
returns {@code object}.

@param object
           the original object for which a replacement may be defined.
@return the replacement object for {@code object}.
@throws IOException
            if any I/O error occurs while creating the replacement
            object.
@see #enableResolveObject
@see ObjectOutputStream#enableReplaceObject
@see ObjectOutputStream#replaceObject"
      end

      operation 206107 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips {@code length} bytes on the source stream. This method should not
be used to skip bytes at any arbitrary position, just when reading
primitive data types (int, char etc).

@param length
           the number of bytes to skip.
@return the number of bytes actually skipped.
@throws IOException
            if an error occurs while skipping bytes on the source stream.
@throws NullPointerException
            if the source stream is {@code null}."
      end

      operation 206235 "verifyAndInit"
	private explicit_return_type "void"
	nparams 1
	  param inout name "loadedStreamClass" type class_ref 137499 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 139163 // InvalidClassException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verify if the SUID & the base name for descriptor
<code>loadedStreamClass</code>matches
the SUID & the base name of the corresponding loaded class and
init private fields.

@param loadedStreamClass
           An ObjectStreamClass that was loaded from the stream.

@throws InvalidClassException
            If the SUID of the stream class does not match the VM class"
      end

      operation 206363 "getBaseName"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "fullName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 206491 "checkedSetSuperClassDesc"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "desc" type class_ref 137499 // ObjectStreamClass
	  param inout name "superDesc" type class_ref 137499 // ObjectStreamClass
	nexceptions 1
	  exception class_ref 137627 // StreamCorruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Avoid recursive defining."
      end
    end

    class 129563 "InvalidObjectException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that, during deserialization, the validation of an object has failed.

@see ObjectInputStream#registerValidation(ObjectInputValidation, int)
@see ObjectInputValidation#validateObject()"
      classrelation 157339 // <generalisation>
	relation 157339 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 157339 // <generalisation>
	  b parent class_ref 139291 // ObjectStreamException
      end

      attribute 147227 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3233174318281839583L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 230299 "InvalidObjectException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code InvalidObjectException} with its stack trace and
detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 131355 "ObjectStreamField"
      visibility public 
      nactuals 1
      actual class class_ref 139675 // Comparable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Describes a field for the purpose of serialization. Classes can define the
collection of fields that are serialized, which may be different from the set
of all declared fields.

@see ObjectOutputStream#writeFields()
@see ObjectInputStream#readFields()"
      classrelation 161691 // <realization>
	relation 161691 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 161691 // <realization>
	  b parent class_ref 139675 // Comparable
      end

      classrelation 161819 // name (<unidirectional association>)
	relation 161819 --->
	  a role_name "name" private
	    comment " Declared name of the field
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 161819 // name (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 161947 // type (<unidirectional association>)
	relation 161947 --->
	  a role_name "type" private
	    comment " Declared type of the field
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 161947 // type (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      attribute 150811 "offset"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " offset of this field in the object"
      end

      classrelation 162075 // typeString (<unidirectional association>)
	relation 162075 --->
	  a role_name "typeString" private
	    comment " Cached version of intern'ed type String
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 162075 // typeString (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 150939 "unshared"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 151067 "isDeserialized"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 242459 "ObjectStreamField"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ObjectStreamField with the specified name and type.

@param name
           the name of the field.
@param cl
           the type of the field.
@throws NullPointerException
            if {@code name} or {@code cl} is {@code null}."
      end

      operation 242587 "ObjectStreamField"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "cl" type class_ref 3421708 // Class
	  param inout name "unshared" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ObjectStreamField with the specified name, type and the
indication if it is unshared.

@param name
           the name of the field.
@param cl
           the type of the field.
@param unshared
           {@code true} if the field is written and read unshared;
           {@code false} otherwise.
@throws NullPointerException
            if {@code name} or {@code cl} is {@code null}.
@see ObjectOutputStream#writeUnshared(Object)"
      end

      operation 242715 "ObjectStreamField"
	package explicit_return_type ""
	nparams 2
	  param inout name "signature" type class_ref 3399692 // String
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ObjectStreamField with the given name and the given type.
The type may be null.

@param signature
           A String representing the type of the field
@param name
           a String, the name of the field, or null"
      end

      operation 242843 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this field descriptor to the specified one. Checks first if one
of the compared fields has a primitive type and the other one not. If so,
the field with the primitive type is considered to be \"smaller\". If both
fields are equal, their names are compared.

@param o
           the object to compare with.
@return -1 if this field is \"smaller\" than field {@code o}, 0 if both
        fields are equal; 1 if this field is \"greater\" than field {@code
        o}."
      end

      operation 242971 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of this field.

@return the field's name."
      end

      operation 243099 "getOffset"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset of this field in the object.

@return this field's offset."
      end

      operation 243227 "getTypeInternal"
	package return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the type of the field the receiver represents, this is an internal
method

@return A Class object representing the type of the field

 Changed from private to default visibility for usage in ObjectStreamClass
 package "
      end

      operation 243355 "getType"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the type of this field.

@return a {@code Class} object representing the type of the field."
      end

      operation 243483 "getTypeCode"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a character code for the type of this field. The following codes are
used:

<pre>
B     byte
C     char
D     double
F     float
I     int
J     long
L     class or interface
S     short
Z     boolean
[     array
</pre>

@return the field's type code."
      end

      operation 243611 "typeCodeOf"
	private explicit_return_type "char"
	nparams 1
	  param inout name "type" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 243739 "getTypeString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the type signature used by the VM to represent the type of this
field.

@return the signature of this field's class or {@code null} if this
        field's type is primitive."
      end

      operation 243867 "isPrimitive"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this field's type is a primitive type.

@return {@code true} if this field's type is primitive; {@code false} if
        the type of this field is a regular class."
      end

      operation 243995 "writeField"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "out" type class_ref 136347 // DataOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 244123 "setOffset"
	protected explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this field's offset in the object.

@param newValue
           the field's new offset."
      end

      operation 244251 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string containing a concise, human-readable description of this
field descriptor.

@return a printable representation of this descriptor."
      end

      operation 244379 "resolve"
	package explicit_return_type "void"
	nparams 1
	  param inout name "loader" type class_ref 138523 // ClassLoader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 244507 "isUnshared"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this field is unshared.

@return {@code true} if this field is unshared, {@code false} otherwise."
      end

      operation 244635 "setUnshared"
	package explicit_return_type "void"
	nparams 1
	  param inout name "unshared" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 244763 "defaultResolve"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves typeString into type. Returns true if the type is primitive
and false otherwise."
      end
    end

    class 131611 "BufferedInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link InputStream} and <em>buffers</em> the input.
Expensive interaction with the underlying input stream is minimized, since
most (smaller) requests can be satisfied by accessing the buffer alone. The
drawback is that some extra space is required to hold the buffer and that
copying takes place when filling that buffer, but this is usually outweighed
by the performance benefits.

<p/>A typical application pattern for the class looks like this:<p/>

<pre>
BufferedInputStream buf = new BufferedInputStream(new FileInputStream(&quot;file.java&quot;));
</pre>

@see BufferedOutputStream"
      classrelation 140059 // <generalisation>
	relation 140059 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 140059 // <generalisation>
	  b parent class_ref 131739 // FilterInputStream
      end

      attribute 135451 "buf"
	volatile protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer containing the current bytes read from the target InputStream.
"
      end

      attribute 135579 "count"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The total number of bytes inside the byte array {@code buf}.
"
      end

      attribute 135707 "marklimit"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current limit, which when passed, invalidates the current mark.
"
      end

      attribute 135835 "markpos"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The currently marked position. -1 indicates no mark has been set or the
mark has been invalidated.
"
      end

      attribute 135963 "pos"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current position within the byte array {@code buf}.
"
      end

      operation 141339 "BufferedInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BufferedInputStream}, providing {@code in} with a buffer
of 8192 bytes.

<p><strong>Warning:</strong> passing a null source creates a closed
{@code BufferedInputStream}. All read operations on such a stream will
fail with an IOException.

@param in the {@code InputStream} the buffer reads from."
      end

      operation 141467 "BufferedInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 131867 // InputStream
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BufferedInputStream}, providing {@code in} with {@code size} bytes
of buffer.

<p><strong>Warning:</strong> passing a null source creates a closed
{@code BufferedInputStream}. All read operations on such a stream will
fail with an IOException.

@param in the {@code InputStream} the buffer reads from.
@param size the size of buffer in bytes.
@throws IllegalArgumentException if {@code size <= 0}."
      end

      operation 141595 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an estimated number of bytes that can be read or skipped without blocking for more
input. This method returns the number of bytes available in the buffer
plus those available in the source stream, but see {@link InputStream#available} for
important caveats.

@return the estimated number of bytes available
@throws IOException if this stream is closed or an error occurs"
      end

      operation 141723 "streamClosed"
	private return_type class_ref 128539 // IOException
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 141851 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream. The source stream is closed and any resources
associated with it are released.

@throws IOException
            if an error occurs while closing this stream."
      end

      operation 141979 "fillbuf"
	private explicit_return_type "int"
	nparams 2
	  param inout name "localIn" type class_ref 131867 // InputStream
	  param inout name "localBuf" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 142107 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a mark position in this stream. The parameter {@code readlimit}
indicates how many bytes can be read before a mark is invalidated.
Calling {@code reset()} will reposition the stream back to the marked
position if {@code readlimit} has not been surpassed. The underlying
buffer may be increased in size to allow {@code readlimit} number of
bytes to be supported.

@param readlimit
           the number of bytes that can be read before the mark is
           invalidated.
@see #reset()"
      end

      operation 142235 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether {@code BufferedInputStream} supports the {@code mark()}
and {@code reset()} methods.

@return {@code true} for BufferedInputStreams.
@see #mark(int)
@see #reset()"
      end

      operation 142363 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single byte from this stream and returns it as an integer in the
range from 0 to 255. Returns -1 if the end of the source string has been
reached. If the internal buffer does not contain any available bytes then
it is filled from the source stream and the first byte is returned.

@return the byte read or -1 if the end of the source stream has been
        reached.
@throws IOException
            if this stream is closed or another IOException occurs."
      end

      operation 142491 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code byteCount} bytes from this stream and stores them in
byte array {@code buffer} starting at offset {@code offset}. Returns the
number of bytes actually read or -1 if no bytes were read and the end of
the stream was encountered. If all the buffered bytes have been used, a
mark has not been set and the requested number of bytes is larger than
the receiver's buffer size, this implementation bypasses the buffer and
simply places the results directly into {@code buffer}.

@param buffer
           the byte array in which to store the bytes read.
@return the number of bytes actually read or -1 if end of stream.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code byteCount < 0}, or if
            {@code offset + byteCount} is greater than the size of
            {@code buffer}.
@throws IOException
            if the stream is already closed or another IOException
            occurs."
      end

      operation 142619 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this stream to the last marked location.

@throws IOException
            if this stream is closed, no mark has been set or the mark is
            no longer valid because more than {@code readlimit} bytes
            have been read since setting the mark.
@see #mark(int)"
      end

      operation 142747 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "byteCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code byteCount} bytes in this stream. Subsequent calls to
{@code read} will not return these bytes unless {@code reset} is
used.

@param byteCount
           the number of bytes to skip. {@code skip} does nothing and
           returns 0 if {@code byteCount} is less than zero.
@return the number of bytes actually skipped.
@throws IOException
            if this stream is closed or another IOException occurs."
      end
    end

    class 131739 "FilterInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link InputStream} and performs some transformation on
the input data while it is being read. Transformations can be anything from a
simple byte-wise filtering input data to an on-the-fly compression or
decompression of the underlying stream. Input streams that wrap another input
stream and provide some additional functionality on top of it usually inherit
from this class.

@see FilterOutputStream"
      classrelation 139803 // <generalisation>
	relation 139803 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 139803 // <generalisation>
	  b parent class_ref 131867 // InputStream
      end

      classrelation 139931 // in (<unidirectional association>)
	relation 139931 --->
	  a role_name "in" volatile protected
	    comment "
The source input stream that is filtered.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 139931 // in (<unidirectional association>)
	  b parent class_ref 131867 // InputStream
      end

      operation 140187 "FilterInputStream"
	protected explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FilterInputStream} with the specified input
stream as source.

<p><strong>Warning:</strong> passing a null source creates an invalid
{@code FilterInputStream}, that fails on every method that is not
overridden. Subclasses should check for null in their constructors.

@param in the input stream to filter reads on."
      end

      operation 140315 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 140443 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream. This implementation closes the filtered stream.

@throws IOException
            if an error occurs while closing this stream."
      end

      operation 140571 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a mark position in this stream. The parameter {@code readlimit}
indicates how many bytes can be read before the mark is invalidated.
Sending {@code reset()} will reposition this stream back to the marked
position, provided that {@code readlimit} has not been surpassed.
<p>
This implementation sets a mark in the filtered stream.

@param readlimit
           the number of bytes that can be read from this stream before
           the mark is invalidated.
@see #markSupported()
@see #reset()"
      end

      operation 140699 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this stream supports {@code mark()} and {@code reset()}.
This implementation returns whether or not the filtered stream supports
marking.

@return {@code true} if {@code mark()} and {@code reset()} are supported,
        {@code false} otherwise.
@see #mark(int)
@see #reset()
@see #skip(long)"
      end

      operation 140827 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single byte from the filtered stream and returns it as an integer
in the range from 0 to 255. Returns -1 if the end of this stream has been
reached.

@return the byte read or -1 if the end of the filtered stream has been
        reached.
@throws IOException
            if the stream is closed or another IOException occurs."
      end

      operation 140955 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code count} bytes from this stream and stores them in the
byte array {@code buffer} starting at {@code offset}. Returns the number
of bytes actually read or -1 if no bytes have been read and the end of
this stream has been reached. This implementation reads bytes from the
filtered stream.

@param buffer
           the byte array in which to store the bytes read.
@param offset
           the initial position in {@code buffer} to store the bytes
           read from this stream.
@param count
           the maximum number of bytes to store in {@code buffer}.
@return the number of bytes actually read or -1 if the end of the
        filtered stream has been reached while reading.
@throws IOException
            if this stream is closed or another I/O error occurs."
      end

      operation 141083 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this stream to the last marked location. This implementation
resets the target stream.

@throws IOException
            if this stream is already closed, no mark has been set or the
            mark is no longer valid because more than {@code readlimit}
            bytes have been read since setting the mark.
@see #mark(int)
@see #markSupported()"
      end

      operation 141211 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "byteCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code byteCount} bytes in this stream. Subsequent
calls to {@code read} will not return these bytes unless {@code reset} is
used. This implementation skips {@code byteCount} bytes in the
filtered stream.

@return the number of bytes actually skipped.
@throws IOException
            if this stream is closed or another IOException occurs.
@see #mark(int)
@see #reset()"
      end
    end

    class 131867 "InputStream"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A readable source of bytes.

<p>Most clients will use input streams that read data from the file system
({@link FileInputStream}), the network ({@link java.net.Socket#getInputStream()}/{@link
java.net.HttpURLConnection#getInputStream()}), or from an in-memory byte
array ({@link ByteArrayInputStream}).

<p>Use {@link InputStreamReader} to adapt a byte stream like this one into a
character stream.

<p>Most clients should wrap their input stream with {@link
BufferedInputStream}. Callers that do only bulk reads may omit buffering.

<p>Some implementations support marking a position in the input stream and
resetting back to this position later. Implementations that don't return
false from {@link #markSupported()} and throw an {@link IOException} when
{@link #reset()} is called.

<h3>Subclassing InputStream</h3>
Subclasses that decorate another input stream should consider subclassing
{@link FilterInputStream}, which delegates all calls to the source input
stream.

<p>All input stream subclasses should override <strong>both</strong> {@link
#read() read()} and {@link #read(byte[],int,int) read(byte[],int,int)}. The
three argument overload is necessary for bulk access to the data. This is
much more efficient than byte-by-byte access.

@see OutputStream"
      classrelation 139419 // <generalisation>
	relation 139419 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 139419 // <generalisation>
	  b parent class_ref 3401484 // Object
      end

      classrelation 139675 // <realization>
	relation 139675 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 139675 // <realization>
	  b parent class_ref 131995 // Closeable
      end

      operation 138907 "InputStream"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This constructor does nothing. It is provided for signature
compatibility."
      end

      operation 139035 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimated number of bytes that can be read or skipped without blocking for more
input.

<p>Note that this method provides such a weak guarantee that it is not very useful in
practice.

<p>Firstly, the guarantee is \"without blocking for more input\" rather than \"without
blocking\": a read may still block waiting for I/O to complete&nbsp;&mdash; the guarantee is
merely that it won't have to wait indefinitely for data to be written. The result of this
method should not be used as a license to do I/O on a thread that shouldn't be blocked.

<p>Secondly, the result is a
conservative estimate and may be significantly smaller than the actual number of bytes
available. In particular, an implementation that always returns 0 would be correct.
In general, callers should only use this method if they'd be satisfied with
treating the result as a boolean yes or no answer to the question \"is there definitely
data ready?\".

<p>Thirdly, the fact that a given number of bytes is \"available\" does not guarantee that a
read or skip will actually read or skip that many bytes: they may read or skip fewer.

<p>It is particularly important to realize that you <i>must not</i> use this method to
size a container and assume that you can read the entirety of the stream without needing
to resize the container. Such callers should probably write everything they read to a
{@link ByteArrayOutputStream} and convert that to a byte array. Alternatively, if you're
reading from a file, {@link File#length} returns the current length of the file (though
assuming the file's length can't change may be incorrect, reading a file is inherently
racy).

<p>The default implementation of this method in {@code InputStream} always returns 0.
Subclasses should override this method if they are able to indicate the number of bytes
available.

@return the estimated number of bytes available
@throws IOException if this stream is closed or an error occurs"
      end

      operation 139163 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this stream. Concrete implementations of this class should free
any resources during close. This implementation does nothing.

@throws IOException
            if an error occurs while closing this stream."
      end

      operation 139291 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a mark position in this InputStream. The parameter {@code readlimit}
indicates how many bytes can be read before the mark is invalidated.
Sending {@code reset()} will reposition the stream back to the marked
position provided {@code readLimit} has not been surpassed.
<p>
This default implementation does nothing and concrete subclasses must
provide their own implementation.

@param readlimit
           the number of bytes that can be read from this stream before
           the mark is invalidated.
@see #markSupported()
@see #reset()"
      end

      operation 139419 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this stream supports the {@code mark()} and
{@code reset()} methods. The default implementation returns {@code false}.

@return always {@code false}.
@see #mark(int)
@see #reset()"
      end

      operation 139547 "read"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single byte from this stream and returns it as an integer in the
range from 0 to 255. Returns -1 if the end of the stream has been
reached. Blocks until one byte has been read, the end of the source
stream is detected or an exception is thrown.

@return the byte read or -1 if the end of stream has been reached.
@throws IOException
            if the stream is closed or another IOException occurs."
      end

      operation 139675 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "buffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code read(buffer, 0, buffer.length)}."
      end

      operation 139803 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads at most {@code length} bytes from this stream and stores them in
the byte array {@code b} starting at {@code offset}.

@param buffer
           the byte array in which to store the bytes read.
@param offset
           the initial position in {@code buffer} to store the bytes read
           from this stream.
@param length
           the maximum number of bytes to store in {@code b}.
@return the number of bytes actually read or -1 if the end of the stream
        has been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the length of
            {@code b}.
@throws IOException
            if the stream is closed or another IOException occurs."
      end

      operation 139931 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this stream to the last marked location. Throws an
{@code IOException} if the number of bytes read since the mark has been
set is greater than the limit provided to {@code mark}, or if no mark
has been set.
<p>
This implementation always throws an {@code IOException} and concrete
subclasses should provide the proper implementation.

@throws IOException
            if this stream is closed or another IOException occurs."
      end

      operation 140059 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "byteCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips at most {@code n} bytes in this stream. This method does nothing and returns
0 if {@code n} is negative, but some subclasses may throw.

<p>Note the \"at most\" in the description of this method: this method may choose to skip
fewer bytes than requested. Callers should <i>always</i> check the return value.

<p>This default implementation reads bytes into a temporary
buffer. Concrete subclasses should provide their own implementation.

@param byteCount the number of bytes to skip.
@return the number of bytes actually skipped.
@throws IOException
            if this stream is closed or another IOException occurs."
      end
    end

    class 131995 "Closeable"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code AutoCloseable} whose close method may throw an {@link IOException}."
      classrelation 139547 // <generalisation>
	relation 139547 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 139547 // <generalisation>
	  b parent class_ref 132123 // AutoCloseable
      end

      operation 138779 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the object and release any system resources it holds.

<p>Although only the first call has any effect, it is safe to call close
multiple times on the same object. This is more lenient than the
overridden {@code AutoCloseable.close()}, which may be called at most
once."
      end
    end

    class 132379 "BufferedOutputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link OutputStream} and <em>buffers</em> the output.
Expensive interaction with the underlying input stream is minimized, since
most (smaller) requests can be satisfied by accessing the buffer alone. The
drawback is that some extra space is required to hold the buffer and that
copying takes place when flushing that buffer, but this is usually outweighed
by the performance benefits.

<p/>A typical application pattern for the class looks like this:<p/>

<pre>
BufferedOutputStream buf = new BufferedOutputStream(new FileOutputStream(&quot;file.java&quot;));
</pre>

@see BufferedInputStream"
      classrelation 140699 // <generalisation>
	relation 140699 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 140699 // <generalisation>
	  b parent class_ref 132507 // FilterOutputStream
      end

      attribute 136091 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer containing the bytes to be written to the target stream.
"
      end

      attribute 136219 "count"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The total number of bytes inside the byte array {@code buf}.
"
      end

      operation 144539 "BufferedOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BufferedOutputStream}, providing {@code out} with a buffer
of 8192 bytes.

@param out the {@code OutputStream} the buffer writes to."
      end

      operation 144667 "BufferedOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 132635 // OutputStream
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BufferedOutputStream}, providing {@code out} with {@code size} bytes
of buffer.

@param out the {@code OutputStream} the buffer writes to.
@param size the size of buffer in bytes.
@throws IllegalArgumentException if {@code size <= 0}."
      end

      operation 144795 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flushes this stream to ensure all pending data is written out to the
target stream. In addition, the target stream is flushed.

@throws IOException
            if an error occurs attempting to flush this stream."
      end

      operation 144923 "checkNotClosed"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 145051 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} bytes from the byte array {@code buffer} starting at
{@code offset} to this stream. If there is room in the buffer to hold the
bytes, they are copied in. If not, the buffered bytes plus the bytes in
{@code buffer} are written to the target stream, the target is flushed,
and the buffer is cleared.

@param buffer
           the buffer to be written.
@param offset
           the start position in {@code buffer} from where to get bytes.
@param length
           the number of bytes from {@code buffer} to write to this
           stream.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the size of
            {@code buffer}.
@throws IOException
            if an error occurs attempting to write to this stream.
@throws NullPointerException
            if {@code buffer} is {@code null}.
@throws ArrayIndexOutOfBoundsException
            If offset or count is outside of bounds."
      end

      operation 145179 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 145307 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes one byte to this stream. Only the low order byte of the integer
{@code oneByte} is written. If there is room in the buffer, the byte is
copied into the buffer and the count incremented. Otherwise, the buffer
plus {@code oneByte} are written to the target stream, the target is
flushed, and the buffer is reset.

@param oneByte
           the byte to be written.
@throws IOException
            if an error occurs attempting to write to this stream."
      end

      operation 145435 "flushInternal"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes only internal buffer."
      end
    end

    class 132507 "FilterOutputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link OutputStream} and performs some transformation on
the output data while it is being written. Transformations can be anything
from a simple byte-wise filtering output data to an on-the-fly compression or
decompression of the underlying stream. Output streams that wrap another
output stream and provide some additional functionality on top of it usually
inherit from this class.

@see FilterOutputStream"
      classrelation 140443 // <generalisation>
	relation 140443 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 140443 // <generalisation>
	  b parent class_ref 132635 // OutputStream
      end

      classrelation 140571 // out (<unidirectional association>)
	relation 140571 --->
	  a role_name "out" protected
	    comment "
The target output stream for this filter stream.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 140571 // out (<unidirectional association>)
	  b parent class_ref 132635 // OutputStream
      end

      operation 143899 "FilterOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FilterOutputStream} with {@code out} as its
target stream.

@param out
           the target stream that this stream writes to."
      end

      operation 144027 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream. This implementation closes the target stream.

@throws IOException
            if an error occurs attempting to close this stream."
      end

      operation 144155 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Ensures that all pending data is sent out to the target stream. This
implementation flushes the target stream.

@throws IOException
            if an error occurs attempting to flush this stream."
      end

      operation 144283 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} bytes from the byte array {@code buffer} starting at
{@code offset} to the target stream.

@param buffer
           the buffer to write.
@param offset
           the index of the first byte in {@code buffer} to write.
@param length
           the number of bytes in {@code buffer} to write.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if
            {@code offset + count} is bigger than the length of
            {@code buffer}.
@throws IOException
            if an I/O error occurs while writing to this stream."
      end

      operation 144411 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes one byte to the target stream. Only the low order byte of the
integer {@code oneByte} is written.

@param oneByte
           the byte to be written.
@throws IOException
            if an I/O error occurs while writing to this stream."
      end
    end

    class 132635 "OutputStream"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A writable sink for bytes.

<p>Most clients will use output streams that write data to the file system
({@link FileOutputStream}), the network ({@link java.net.Socket#getOutputStream()}/{@link
java.net.HttpURLConnection#getOutputStream()}), or to an in-memory byte array
({@link ByteArrayOutputStream}).

<p>Use {@link OutputStreamWriter} to adapt a byte stream like this one into a
character stream.

<p>Most clients should wrap their output stream with {@link
BufferedOutputStream}. Callers that do only bulk writes may omit buffering.

<h3>Subclassing OutputStream</h3>
Subclasses that decorate another output stream should consider subclassing
{@link FilterOutputStream}, which delegates all calls to the target output
stream.

<p>All output stream subclasses should override <strong>both</strong> {@link
#write(int)} and {@link #write(byte[],int,int) write(byte[],int,int)}. The
three argument overload is necessary for bulk access to the data. This is
much more efficient than byte-by-byte access.

@see InputStream"
      classrelation 140187 // <realization>
	relation 140187 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 140187 // <realization>
	  b parent class_ref 131995 // Closeable
      end

      classrelation 140315 // <realization>
	relation 140315 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 140315 // <realization>
	  b parent class_ref 132763 // Flushable
      end

      operation 143003 "OutputStream"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor."
      end

      operation 143131 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this stream. Implementations of this method should free any
resources used by the stream. This implementation does nothing.

@throws IOException
            if an error occurs while closing this stream."
      end

      operation 143259 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this stream. Implementations of this method should ensure that
any buffered data is written out. This implementation does nothing.

@throws IOException
            if an error occurs while flushing this stream."
      end

      operation 143387 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code write(buffer, 0, buffer.length)}."
      end

      operation 143515 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes {@code count} bytes from the byte array {@code buffer} starting at
position {@code offset} to this stream.

@param buffer
           the buffer to be written.
@param offset
           the start position in {@code buffer} from where to get bytes.
@param count
           the number of bytes from {@code buffer} to write to this
           stream.
@throws IOException
            if an error occurs while writing to this stream.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if
            {@code offset + count} is bigger than the length of
            {@code buffer}."
      end

      operation 143643 "write"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a single byte to this stream. Only the least significant byte of
the integer {@code oneByte} is written to the stream.

@param oneByte
           the byte to be written.
@throws IOException
            if an error occurs while writing to this stream."
      end

      operation 143771 "checkError"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this writer has encountered and suppressed an error. Used
by PrintStreams as an alternative to checked exceptions."
      end
    end

    class 132763 "Flushable"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Defines an interface for classes that can (or need to) be flushed, typically
before some output processing is considered to be finished and the object
gets closed."
      operation 142875 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the object by writing out any buffered data to the underlying
output.

@throws IOException
            if there are any issues writing the data."
      end
    end

    class 132891 "BufferedReader"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link Reader} and <em>buffers</em> the input. Expensive
interaction with the underlying reader is minimized, since most (smaller)
requests can be satisfied by accessing the buffer alone. The drawback is that
some extra space is required to hold the buffer and that copying takes place
when filling that buffer, but this is usually outweighed by the performance
benefits.

<p/>A typical application pattern for the class looks like this:<p/>

<pre>
BufferedReader buf = new BufferedReader(new FileReader(&quot;file.java&quot;));
</pre>

@see BufferedWriter
@since 1.1"
      classrelation 141211 // <generalisation>
	relation 141211 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 141211 // <generalisation>
	  b parent class_ref 133019 // Reader
      end

      classrelation 141339 // in (<unidirectional association>)
	relation 141339 --->
	  a role_name "in" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 141339 // in (<unidirectional association>)
	  b parent class_ref 133019 // Reader
      end

      attribute 136347 "buf"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The characters that can be read and refilled in bulk. We maintain three
indices into this buffer:<pre>
    { X X X X X X X X X X X X - - }
          ^     ^             ^
          |     |             |
        mark   pos           end</pre>
Pos points to the next readable character. End is one greater than the
last readable character. When {@code pos == end}, the buffer is empty and
must be {@link #fillBuf() filled} before characters can be read.

<p>Mark is the value pos will be set to on calls to {@link #reset}. Its
value is in the range {@code [0...pos]}. If the mark is {@code -1}, the
buffer cannot be reset.

<p>MarkLimit limits the distance between the mark and the pos. When this
limit is exceeded, {@link #reset} is permitted (but not required) to
throw an exception. For shorter distances, {@link #reset} shall not throw
(unless the reader is closed).
"
      end

      attribute 136475 "pos"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136603 "end"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136731 "mark"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 136859 "markLimit"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 147227 "BufferedReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 133019 // Reader
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BufferedReader}, providing {@code in} with a buffer
of 8192 characters.

@param in the {@code Reader} the buffer reads from."
      end

      operation 147355 "BufferedReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 133019 // Reader
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BufferedReader}, providing {@code in} with {@code size} characters
of buffer.

@param in the {@code InputStream} the buffer reads from.
@param size the size of buffer in characters.
@throws IllegalArgumentException if {@code size <= 0}."
      end

      operation 147483 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this reader. This implementation closes the buffered source reader
and releases the buffer. Nothing is done if this reader has already been
closed.

@throws IOException
            if an error occurs while closing this reader."
      end

      operation 147611 "fillBuf"
	private explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates the buffer with data. It is an error to call this method when
the buffer still contains data; ie. if {@code pos < end}.

@return the number of chars read into the buffer, or -1 if the end of the
     source stream has been reached."
      end

      operation 147739 "isClosed"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this reader is closed.

@return {@code true} if this reader is closed, {@code false}
        otherwise."
      end

      operation 147867 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "markLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a mark position in this reader. The parameter {@code markLimit}
indicates how many characters can be read before the mark is invalidated.
Calling {@code reset()} will reposition the reader back to the marked
position if {@code markLimit} has not been surpassed.

@param markLimit
           the number of characters that can be read before the mark is
           invalidated.
@throws IllegalArgumentException
            if {@code markLimit < 0}.
@throws IOException
            if an error occurs while setting a mark in this reader.
@see #markSupported()
@see #reset()"
      end

      operation 147995 "checkNotClosed"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 148123 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader supports the {@code mark()} and
{@code reset()} methods. This implementation returns {@code true}.

@return {@code true} for {@code BufferedReader}.
@see #mark(int)
@see #reset()"
      end

      operation 148251 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single character from this reader and returns it with the two
higher-order bytes set to 0. If possible, BufferedReader returns a
character from the buffer. If there are no characters available in the
buffer, it fills the buffer and then returns a character. It returns -1
if there are no more characters in the source reader.

@return the character read or -1 if the end of the source reader has been
        reached.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end

      operation 148379 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code length} characters from this reader and stores them
at {@code offset} in the character array {@code buffer}. Returns the
number of characters actually read or -1 if the end of the source reader
has been reached. If all the buffered characters have been used, a mark
has not been set and the requested number of characters is larger than
this readers buffer size, BufferedReader bypasses the buffer and simply
places the results directly into {@code buffer}.

@param buffer
           the character array to store the characters read.
@param offset
           the initial position in {@code buffer} to store the chars read
           from this reader.
@param length
           the maximum number of characters to read, must be
           non-negative.
@return number of characters read or -1 if the end of the source reader
        has been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the size of
            {@code buffer}.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end

      operation 148507 "chompNewline"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Peeks at the next input character, refilling the buffer if necessary. If
this character is a newline character (\"\\n\"), it is discarded."
      end

      operation 148635 "readLine"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next line of text available from this reader. A line is
represented by zero or more characters followed by {@code '\\n'},
{@code '\\r'}, {@code \"\\r\\n\"} or the end of the reader. The string does
not include the newline sequence.

@return the contents of the line or {@code null} if no characters were
        read before the end of the reader has been reached.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end

      operation 148763 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader is ready to be read without blocking.

@return {@code true} if this reader will not block when {@code read} is
        called, {@code false} if unknown or blocking will occur.
@throws IOException
            if this reader is closed or some other I/O error occurs.
@see #read()
@see #read(char[], int, int)
@see #readLine()"
      end

      operation 148891 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this reader's position to the last {@code mark()} location.
Invocations of {@code read()} and {@code skip()} will occur from this new
location.

@throws IOException
            if this reader is closed or no mark has been set.
@see #mark(int)
@see #markSupported()"
      end

      operation 149019 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "charCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code charCount} chars in this stream. Subsequent calls to
{@code read} will not return these chars unless {@code reset} is
used.

<p>Skipping characters may invalidate a mark if {@code markLimit}
is surpassed.

@param charCount the maximum number of characters to skip.
@return the number of characters actually skipped.
@throws IllegalArgumentException if {@code charCount < 0}.
@throws IOException
            if this reader is closed or some other I/O error occurs.
@see #mark(int)
@see #markSupported()
@see #reset()"
      end
    end

    class 133019 "Reader"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The base class for all readers. A reader is a means of reading data from a
source in a character-wise manner. Some readers also support marking a
position in the input and returning to this position later.
<p>
This abstract class does not provide a fully working implementation, so it
needs to be subclassed, and at least the {@link #read(char[], int, int)} and
{@link #close()} methods needs to be overridden. Overriding some of the
non-abstract methods is also often advised, since it might result in higher
efficiency.
<p>
Many specialized readers for purposes like reading from a file already exist
in this package.

@see Writer"
      classrelation 140827 // <realization>
	relation 140827 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 140827 // <realization>
	  b parent class_ref 133147 // Readable
      end

      classrelation 140955 // <realization>
	relation 140955 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 140955 // <realization>
	  b parent class_ref 131995 // Closeable
      end

      classrelation 141083 // lock (<unidirectional association>)
	relation 141083 --->
	  a role_name "lock" protected
	    comment "
The object used to synchronize access to the reader.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 141083 // lock (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      operation 145691 "Reader"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Reader} with {@code this} as the object used to
synchronize critical sections."
      end

      operation 145819 "Reader"
	protected explicit_return_type ""
	nparams 1
	  param inout name "lock" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Reader} with {@code lock} used to synchronize
critical sections.

@param lock
           the {@code Object} used to synchronize critical sections.
@throws NullPointerException
            if {@code lock} is {@code null}."
      end

      operation 145947 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this reader. Implementations of this method should free any
resources associated with the reader.

@throws IOException
            if an error occurs while closing this reader."
      end

      operation 146075 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a mark position in this reader. The parameter {@code readLimit}
indicates how many characters can be read before the mark is invalidated.
Calling {@code reset()} will reposition the reader back to the marked
position if {@code readLimit} has not been surpassed.
<p>
This default implementation simply throws an {@code IOException};
subclasses must provide their own implementation.

@param readLimit
           the number of characters that can be read before the mark is
           invalidated.
@throws IllegalArgumentException
            if {@code readLimit < 0}.
@throws IOException
            if an error occurs while setting a mark in this reader.
@see #markSupported()
@see #reset()"
      end

      operation 146203 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this reader supports the {@code mark()} and
{@code reset()} methods. This default implementation returns
{@code false}.

@return always {@code false}."
      end

      operation 146331 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single character from this reader and returns it as an integer
with the two higher-order bytes set to 0. Returns -1 if the end of the
reader has been reached.

@return the character read or -1 if the end of the reader has been
        reached.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end

      operation 146459 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "buf" explicit_type "char"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters from this reader and stores them in the character array
{@code buf} starting at offset 0. Returns the number of characters
actually read or -1 if the end of the reader has been reached.

@param buf
           character array to store the characters read.
@return the number of characters read or -1 if the end of the reader has
        been reached.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end

      operation 146587 "read"
	abstract public explicit_return_type "int"
	nparams 3
	  param inout name "buf" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads at most {@code count} characters from this reader and stores them
at {@code offset} in the character array {@code buf}. Returns the number
of characters actually read or -1 if the end of the reader has been
reached.

@param buf
           the character array to store the characters read.
@param offset
           the initial position in {@code buffer} to store the characters
           read from this reader.
@param count
           the maximum number of characters to read.
@return the number of characters read or -1 if the end of the reader has
        been reached.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end

      operation 146715 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this reader is ready to be read without blocking.
Returns {@code true} if this reader will not block when {@code read} is
called, {@code false} if unknown or blocking will occur. This default
implementation always returns {@code false}.

@return always {@code false}.
@throws IOException
            if this reader is closed or some other I/O error occurs.
@see #read()
@see #read(char[])
@see #read(char[], int, int)"
      end

      operation 146843 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this reader's position to the last {@code mark()} location.
Invocations of {@code read()} and {@code skip()} will occur from this new
location. If this reader has not been marked, the behavior of
{@code reset()} is implementation specific. This default
implementation throws an {@code IOException}.

@throws IOException
            always thrown in this default implementation.
@see #mark(int)
@see #markSupported()"
      end

      operation 146971 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "charCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips {@code charCount} characters in this reader. Subsequent calls of
{@code read} methods will not return these characters unless {@code
reset} is used. This method may perform multiple reads to read {@code
charCount} characters.

@return the number of characters actually skipped.
@throws IllegalArgumentException
            if {@code charCount < 0}.
@throws IOException
            if this reader is closed or some other I/O error occurs.
@see #mark(int)
@see #markSupported()
@see #reset()"
      end

      operation 147099 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 133275 // CharBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads characters and puts them into the {@code target} character buffer.

@param target
           the destination character buffer.
@return the number of characters put into {@code target} or -1 if the end
        of this reader has been reached before a character has been read.
@throws IOException
            if any I/O error occurs while reading from this reader.
@throws NullPointerException
            if {@code target} is {@code null}.
@throws ReadOnlyBufferException
            if {@code target} is read-only."
      end
    end

    class 133403 "BufferedWriter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link Writer} and <em>buffers</em> the output. Expensive
interaction with the underlying reader is minimized, since most (smaller)
requests can be satisfied by accessing the buffer alone. The drawback is that
some extra space is required to hold the buffer and that copying takes place
when filling that buffer, but this is usually outweighed by the performance
benefits.

<p/>A typical application pattern for the class looks like this:<p/>

<pre>
BufferedWriter buf = new BufferedWriter(new FileWriter(&quot;file.java&quot;));
</pre>

@see BufferedReader"
      classrelation 141979 // <generalisation>
	relation 141979 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 141979 // <generalisation>
	  b parent class_ref 133531 // Writer
      end

      classrelation 142107 // out (<unidirectional association>)
	relation 142107 --->
	  a role_name "out" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 142107 // out (<unidirectional association>)
	  b parent class_ref 133531 // Writer
      end

      attribute 136987 "buf"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 137115 "pos"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 151195 "BufferedWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 133531 // Writer
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BufferedWriter}, providing {@code out} with a buffer
of 8192 chars.

@param out the {@code Writer} the buffer writes to."
      end

      operation 151323 "BufferedWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 133531 // Writer
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code BufferedWriter}, providing {@code out} with {@code size} chars
of buffer.

@param out the {@code OutputStream} the buffer writes to.
@param size the size of buffer in chars.
@throws IllegalArgumentException if {@code size <= 0}."
      end

      operation 151451 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this writer. The contents of the buffer are flushed, the target
writer is closed, and the buffer is released. Only the first invocation
of close has any effect.

@throws IOException
            if an error occurs while closing this writer."
      end

      operation 151579 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flushes this writer. The contents of the buffer are committed to the
target writer and it is then flushed.

@throws IOException
            if an error occurs while flushing this writer."
      end

      operation 151707 "checkNotClosed"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 151835 "flushInternal"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the internal buffer."
      end

      operation 151963 "isClosed"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this writer is closed.

@return {@code true} if this writer is closed, {@code false} otherwise."
      end

      operation 152091 "newLine"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a newline to this writer. On Android, this is {@code \"\\n\"}.
The target writer may or may not be flushed when a newline is written.

@throws IOException
            if an error occurs attempting to write to this writer."
      end

      operation 152219 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters starting at {@code offset} in
{@code buffer} to this writer. If {@code count} is greater than this
writer's buffer, then the buffer is flushed and the characters are
written directly to the target writer.

@param buffer
           the array containing characters to write.
@param offset
           the start position in {@code buffer} for retrieving characters.
@param count
           the maximum number of characters to write.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if
            {@code offset + count} is greater than the size of
            {@code buffer}.
@throws IOException
            if this writer is closed or another I/O error occurs."
      end

      operation 152347 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneChar" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the character {@code oneChar} to this writer. If the buffer
gets full by writing this character, this writer is flushed. Only the
lower two bytes of the integer {@code oneChar} are written.

@param oneChar
           the character to write.
@throws IOException
            if this writer is closed or another I/O error occurs."
      end

      operation 152475 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters starting at {@code offset} in {@code str}
to this writer. If {@code count} is greater than this writer's buffer,
then this writer is flushed and the remaining characters are written
directly to the target writer. If count is negative no characters are
written to the buffer. This differs from the behavior of the superclass.

@param str
           the non-null String containing characters to write.
@param offset
           the start position in {@code str} for retrieving characters.
@param count
           maximum number of characters to write.
@throws IOException
            if this writer has already been closed or another I/O error
            occurs.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code offset + count} is greater
            than the length of {@code str}."
      end
    end

    class 133531 "Writer"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The base class for all writers. A writer is a means of writing data to a
target in a character-wise manner. Most output streams expect the
{@link #flush()} method to be called before closing the stream, to ensure all
data is actually written out.
<p>
This abstract class does not provide a fully working implementation, so it
needs to be subclassed, and at least the {@link #write(char[], int, int)},
{@link #close()} and {@link #flush()} methods needs to be overridden.
Overriding some of the non-abstract methods is also often advised, since it
might result in higher efficiency.
<p>
Many specialized readers for purposes like reading from a file already exist
in this package.

@see Reader"
      classrelation 141467 // <realization>
	relation 141467 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 141467 // <realization>
	  b parent class_ref 133659 // Appendable
      end

      classrelation 141595 // <realization>
	relation 141595 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 141595 // <realization>
	  b parent class_ref 131995 // Closeable
      end

      classrelation 141723 // <realization>
	relation 141723 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 141723 // <realization>
	  b parent class_ref 132763 // Flushable
      end

      classrelation 141851 // lock (<unidirectional association>)
	relation 141851 --->
	  a role_name "lock" protected
	    comment "
The object used to synchronize access to the writer.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 141851 // lock (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      operation 149531 "Writer"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Writer} with {@code this} as the object used to
synchronize critical sections."
      end

      operation 149659 "Writer"
	protected explicit_return_type ""
	nparams 1
	  param inout name "lock" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Writer} with {@code lock} used to synchronize
critical sections.

@param lock
           the {@code Object} used to synchronize critical sections.
@throws NullPointerException
            if {@code lock} is {@code null}."
      end

      operation 149787 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this writer. Implementations of this method should free any
resources associated with the writer.

@throws IOException
            if an error occurs while closing this writer."
      end

      operation 149915 "flush"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this writer. Implementations of this method should ensure that
all buffered characters are written to the target.

@throws IOException
            if an error occurs while flushing this writer."
      end

      operation 150043 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buf" explicit_type "char"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the entire character buffer {@code buf} to the target.

@param buf
           the non-null array containing characters to write.
@throws IOException
            if this writer is closed or another I/O error occurs."
      end

      operation 150171 "write"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "buf" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes {@code count} characters starting at {@code offset} in {@code buf}
to the target.

@param buf
           the non-null character array to write.
@param offset
           the index of the first character in {@code buf} to write.
@param count
           the maximum number of characters to write.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is greater than the size of {@code buf}.
@throws IOException
            if this writer is closed or another I/O error occurs."
      end

      operation 150299 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneChar" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes one character to the target. Only the two least significant bytes
of the integer {@code oneChar} are written.

@param oneChar
           the character to write to the target.
@throws IOException
            if this writer is closed or another I/O error occurs."
      end

      operation 150427 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the characters from the specified string to the target.

@param str
           the non-null string containing the characters to write.
@throws IOException
            if this writer is closed or another I/O error occurs."
      end

      operation 150555 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes {@code count} characters from {@code str} starting at {@code
offset} to the target.

@param str
           the non-null string containing the characters to write.
@param offset
           the index of the first character in {@code str} to write.
@param count
           the number of characters from {@code str} to write.
@throws IOException
            if this writer is closed or another I/O error occurs.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is greater than the length of {@code str}."
      end

      operation 150683 "append"
	public return_type class_ref 133531 // Writer
	nparams 1
	  param in name "c" explicit_type "char"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the character {@code c} to the target. This method works the same
way as {@link #write(int)}.

@param c
           the character to append to the target stream.
@return this writer.
@throws IOException
            if this writer is closed or another I/O error occurs."
      end

      operation 150811 "append"
	public return_type class_ref 133531 // Writer
	nparams 1
	  param inout name "csq" type class_ref 133787 // CharSequence
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the character sequence {@code csq} to the target. This method
works the same way as {@code Writer.write(csq.toString())}. If {@code
csq} is {@code null}, then the string \"null\" is written to the target
stream.

@param csq
           the character sequence appended to the target.
@return this writer.
@throws IOException
            if this writer is closed or another I/O error occurs."
      end

      operation 150939 "append"
	public return_type class_ref 133531 // Writer
	nparams 3
	  param inout name "csq" type class_ref 133787 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the character sequence {@code csq} to the
target. This method works the same way as {@code
Writer.writer(csq.subsequence(start, end).toString())}. If {@code
csq} is {@code null}, then the specified subsequence of the string \"null\"
will be written to the target.

@param csq
           the character sequence appended to the target.
@param start
           the index of the first char in the character sequence appended
           to the target.
@param end
           the index of the character following the last character of the
           subsequence appended to the target.
@return this writer.
@throws IOException
            if this writer is closed or another I/O error occurs.
@throws IndexOutOfBoundsException
            if {@code start > end}, {@code start < 0}, {@code end < 0} or
            either {@code start} or {@code end} are greater or equal than
            the length of {@code csq}."
      end

      operation 151067 "checkError"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this writer has encountered and suppressed an error. Used
by PrintWriters as an alternative to checked exceptions."
      end
    end

    class 133915 "ByteArrayInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link InputStream } for reading the contents of a byte array.

@see ByteArrayOutputStream"
      classrelation 142235 // <generalisation>
	relation 142235 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 142235 // <generalisation>
	  b parent class_ref 131867 // InputStream
      end

      attribute 137243 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code byte} array containing the bytes to stream over.
"
      end

      attribute 137371 "pos"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current position within the byte array.
"
      end

      attribute 137499 "mark"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current mark position. Initially set to 0 or the <code>offset</code>
parameter within the constructor.
"
      end

      attribute 137627 "count"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The total number of bytes initially available in the byte array
{@code buf}.
"
      end

      operation 152603 "ByteArrayInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "buf" explicit_type "byte"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ByteArrayInputStream} on the byte array
{@code buf}.

@param buf
           the byte array to stream over."
      end

      operation 152731 "ByteArrayInputStream"
	public explicit_return_type ""
	nparams 3
	  param inout name "buf" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ByteArrayInputStream} on the byte array
{@code buf} with the initial position set to {@code offset} and the
number of bytes available set to {@code offset} + {@code length}.

@param buf
           the byte array to stream over.
@param offset
           the initial position in {@code buf} to start streaming from.
@param length
           the number of bytes available for streaming."
      end

      operation 152859 "available"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the number of remaining bytes.

@return {@code count - pos}"
      end

      operation 152987 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream and frees resources associated with this stream.

@throws IOException
            if an I/O error occurs while closing this stream."
      end

      operation 153115 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a mark position in this ByteArrayInputStream. The parameter
{@code readlimit} is ignored. Sending {@code reset()} will reposition the
stream back to the marked position.

@param readlimit
           ignored.
@see #markSupported()
@see #reset()"
      end

      operation 153243 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this stream supports the {@code mark()} and
{@code reset()} methods. Returns {@code true} since this class supports
these methods.

@return always {@code true}.
@see #mark(int)
@see #reset()"
      end

      operation 153371 "read"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single byte from the source byte array and returns it as an
integer in the range from 0 to 255. Returns -1 if the end of the source
array has been reached.

@return the byte read or -1 if the end of this stream has been reached."
      end

      operation 153499 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code len} bytes from this stream and stores
them in byte array {@code b} starting at {@code offset}. This
implementation reads bytes from the source byte array.

@param buffer
           the byte array in which to store the bytes read.
@param offset
           the initial position in {@code b} to store the bytes read from
           this stream.
@param length
           the maximum number of bytes to store in {@code b}.
@return the number of bytes actually read or -1 if no bytes were read and
        the end of the stream was encountered.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the size of
            {@code b}.
@throws NullPointerException
            if {@code b} is {@code null}."
      end

      operation 153627 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this stream to the last marked location. This implementation
resets the position to either the marked position, the start position
supplied in the constructor or 0 if neither has been provided.

@see #mark(int)"
      end

      operation 153755 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "byteCount" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code byteCount} bytes in this InputStream. Subsequent
calls to {@code read} will not return these bytes unless {@code reset} is
used. This implementation skips {@code byteCount} number of bytes in the
target stream. It does nothing and returns 0 if {@code byteCount} is negative.

@return the number of bytes actually skipped."
      end
    end

    class 134043 "ByteArrayOutputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link OutputStream} for class for writing content to an
(internal) byte array. As bytes are written to this stream, the byte array
may be expanded to hold more bytes. When the writing is considered to be
finished, a copy of the byte array can be requested from the class.

@see ByteArrayInputStream"
      classrelation 142363 // <generalisation>
	relation 142363 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 142363 // <generalisation>
	  b parent class_ref 132635 // OutputStream
      end

      attribute 137755 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The byte array containing the bytes written.
"
      end

      attribute 137883 "count"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bytes written.
"
      end

      operation 153883 "ByteArrayOutputStream"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new ByteArrayOutputStream with a default size of 32 bytes.
If more than 32 bytes are written to this instance, the underlying byte
array will expand."
      end

      operation 154011 "ByteArrayOutputStream"
	public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ByteArrayOutputStream} with a default size of
{@code size} bytes. If more than {@code size} bytes are written to this
instance, the underlying byte array will expand.

@param size
           initial size for the underlying byte array, must be
           non-negative.
@throws IllegalArgumentException
            if {@code size} < 0."
      end

      operation 154139 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream. This releases system resources used for this stream.

@throws IOException
            if an error occurs while attempting to close this stream."
      end

      operation 154267 "expand"
	private explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 154395 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this stream to the beginning of the underlying byte array. All
subsequent writes will overwrite any bytes previously stored in this
stream."
      end

      operation 154523 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total number of bytes written to this stream so far.

@return the number of bytes written to this stream."
      end

      operation 154651 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the contents of this ByteArrayOutputStream as a byte array. Any
changes made to the receiver after returning will not be reflected in the
byte array returned to the caller.

@return this stream's current contents as a byte array."
      end

      operation 154779 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the contents of this ByteArrayOutputStream as a string. Any
changes made to the receiver after returning will not be reflected in the
string returned to the caller.

@return this stream's current contents as a string."
      end

      operation 154907 "toString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "hibyte" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the contents of this ByteArrayOutputStream as a string. Each byte
{@code b} in this stream is converted to a character {@code c} using the
following function:
{@code c == (char)(((hibyte & 0xff) << 8) | (b & 0xff))}. This method is
deprecated and either {@link #toString()} or {@link #toString(String)}
should be used.

@param hibyte
           the high byte of each resulting Unicode character.
@return this stream's current contents as a string with the high byte set
        to {@code hibyte}.
@deprecated Use {@link #toString()}."
      end

      operation 155035 "toString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "charsetName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the contents of this ByteArrayOutputStream as a string converted
according to the encoding declared in {@code charsetName}.

@param charsetName
           a string representing the encoding to use when translating
           this stream to a string.
@return this stream's current contents as an encoded string.
@throws UnsupportedEncodingException
            if the provided encoding is not supported."
      end

      operation 155163 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} bytes from the byte array {@code buffer} starting at
offset {@code index} to this stream.

@param buffer
           the buffer to be written.
@param offset
           the initial position in {@code buffer} to retrieve bytes.
@param len
           the number of bytes of {@code buffer} to write.
@throws NullPointerException
            if {@code buffer} is {@code null}.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code len < 0}, or if
            {@code offset + len} is greater than the length of
            {@code buffer}."
      end

      operation 155291 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the specified byte {@code oneByte} to the OutputStream. Only the
low order byte of {@code oneByte} is written.

@param oneByte
           the byte to be written."
      end

      operation 155419 "writeTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 132635 // OutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Takes the contents of this stream and writes it to the output stream
{@code out}.

@param out
           an OutputStream on which to write the contents of this stream.
@throws IOException
            if an error occurs while writing to {@code out}."
      end
    end

    class 134171 "UnsupportedEncodingException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a program asks for a particular character converter that is
unavailable."
      classrelation 167451 // <generalisation>
	relation 167451 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 167451 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 158491 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4274276298326136670L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 274203 "UnsupportedEncodingException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UnsupportedEncodingException} with its stack
trace filled in."
      end

      operation 274331 "UnsupportedEncodingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UnsupportedEncodingException} with its stack
trace and detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 134299 "CharArrayReader"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link Reader} for reading the contents of a char array.

@see CharArrayWriter"
      classrelation 142491 // <generalisation>
	relation 142491 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 142491 // <generalisation>
	  b parent class_ref 133019 // Reader
      end

      attribute 138011 "buf"
	protected explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer for characters.
"
      end

      attribute 138139 "pos"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current buffer position.
"
      end

      attribute 138267 "markedPos"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current mark position.
"
      end

      attribute 138395 "count"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The ending index of the buffer.
"
      end

      operation 155547 "CharArrayReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "buf" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CharArrayReader on the char array {@code buf}. The size of
the reader is set to the length of the buffer and the object to to read
from is set to {@code buf}.

@param buf
           the char array from which to read."
      end

      operation 155675 "CharArrayReader"
	public explicit_return_type ""
	nparams 3
	  param inout name "buf" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CharArrayReader on the char array {@code buf}. The size of
the reader is set to {@code length} and the start position from which to
read the buffer is set to {@code offset}.

@param buf
           the char array from which to read.
@param offset
           the index of the first character in {@code buf} to read.
@param length
           the number of characters that can be read from {@code buf}.
@throws IllegalArgumentException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset} is greater than the size of {@code buf} ."
      end

      operation 155803 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "This method closes this CharArrayReader. Once it is closed, you can no
longer read from it. Only the first invocation of this method has any
effect."
      end

      operation 155931 "isOpen"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this reader is open.

@return {@code true} if the reader is open, {@code false} otherwise."
      end

      operation 156059 "isClosed"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this reader is closed.

@return {@code true} if the reader is closed, {@code false} otherwise."
      end

      operation 156187 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a mark position in this reader. The parameter {@code readLimit} is
ignored for CharArrayReaders. Calling {@code reset()} will reposition the
reader back to the marked position provided the mark has not been
invalidated.

@param readLimit
           ignored for CharArrayReaders.
@throws IOException
            if this reader is closed."
      end

      operation 156315 "checkNotClosed"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 156443 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader supports the {@code mark()} and
{@code reset()} methods.

@return {@code true} for CharArrayReader.
@see #mark(int)
@see #reset()"
      end

      operation 156571 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single character from this reader and returns it as an integer
with the two higher-order bytes set to 0. Returns -1 if no more
characters are available from this reader.

@return the character read as an int or -1 if the end of the reader has
        been reached.
@throws IOException
            if this reader is closed."
      end

      operation 156699 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code count} characters from this CharArrayReader and
stores them at {@code offset} in the character array {@code buf}.
Returns the number of characters actually read or -1 if the end of reader
was encountered.

@param buffer
           the character array to store the characters read.
@param offset
           the initial position in {@code buffer} to store the characters
           read from this reader.
@param len
           the maximum number of characters to read.
@return number of characters read or -1 if the end of the reader has been
        reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code len < 0}, or if
            {@code offset + len} is bigger than the size of
            {@code buffer}.
@throws IOException
            if this reader is closed."
      end

      operation 156827 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader is ready to be read without blocking.
Returns {@code true} if the next {@code read} will not block. Returns
{@code false} if this reader may or may not block when {@code read} is
called. The implementation in CharArrayReader always returns {@code true}
even when it has been closed.

@return {@code true} if this reader will not block when {@code read} is
        called, {@code false} if unknown or blocking will occur.
@throws IOException
            if this reader is closed."
      end

      operation 156955 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this reader's position to the last {@code mark()} location.
Invocations of {@code read()} and {@code skip()} will occur from this new
location. If this reader has not been marked, it is reset to the
beginning of the string.

@throws IOException
            if this reader is closed."
      end

      operation 157083 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "charCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code charCount} characters in this reader. Subsequent calls to
{@code read} will not return these characters unless {@code reset}
is used. This method does nothing and returns 0 if {@code charCount <= 0}.

@return the number of characters actually skipped.
@throws IOException
            if this reader is closed."
      end
    end

    class 134427 "CharArrayWriter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link Writer} for class for writing content to an (internal)
char array. As bytes are written to this writer, the char array may be
expanded to hold more characters. When the writing is considered to be
finished, a copy of the char array can be requested from the class.

@see CharArrayReader"
      classrelation 142619 // <generalisation>
	relation 142619 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 142619 // <generalisation>
	  b parent class_ref 133531 // Writer
      end

      attribute 138523 "buf"
	protected explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer for characters.
"
      end

      attribute 138651 "count"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The ending index of the buffer.
"
      end

      operation 157211 "CharArrayWriter"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code CharArrayWriter} which has a buffer allocated
with the default size of 32 characters. This buffer is also used as the
{@code lock} to synchronize access to this writer."
      end

      operation 157339 "CharArrayWriter"
	public explicit_return_type ""
	nparams 1
	  param in name "initialSize" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code CharArrayWriter} which has a buffer allocated
with the size of {@code initialSize} characters. The buffer is also used
as the {@code lock} to synchronize access to this writer.

@param initialSize
           the initial size of this CharArrayWriters buffer.
@throws IllegalArgumentException
            if {@code initialSize < 0}."
      end

      operation 157467 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this writer. The implementation in {@code CharArrayWriter} does nothing."
      end

      operation 157595 "expand"
	private explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 157723 "flush"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flushes this writer. The implementation in {@code CharArrayWriter} does nothing."
      end

      operation 157851 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this writer. The current write position is reset to the beginning
of the buffer. All written characters are lost and the size of this
writer is set to 0."
      end

      operation 157979 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of this writer, that is the number of characters it
stores. This number changes if this writer is reset or when more
characters are written to it.

@return this CharArrayWriter's current size in characters."
      end

      operation 158107 "toCharArray"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the contents of the receiver as a char array. The array returned
is a copy and any modifications made to this writer after calling this
method are not reflected in the result.

@return this CharArrayWriter's contents as a new char array."
      end

      operation 158235 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the contents of this {@code CharArrayWriter} as a string. The
string returned is a copy and any modifications made to this writer after
calling this method are not reflected in the result.

@return this CharArrayWriters contents as a new string."
      end

      operation 158363 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters starting at {@code offset} in {@code c}
to this writer.

@param buffer
           the non-null array containing characters to write.
@param offset
           the index of the first character in {@code buf} to write.
@param len
           maximum number of characters to write.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code len < 0}, or if
            {@code offset + len} is bigger than the size of {@code c}."
      end

      operation 158491 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneChar" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the specified character {@code oneChar} to this writer.
This implementation writes the two low order bytes of the integer
{@code oneChar} to the buffer.

@param oneChar
           the character to write."
      end

      operation 158619 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters starting at {@code offset} from
the string {@code str} to this CharArrayWriter.

@throws NullPointerException
            if {@code str} is {@code null}.
@throws StringIndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if
            {@code offset + count} is bigger than the length of
            {@code str}."
      end

      operation 158747 "writeTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 133531 // Writer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the contents of this {@code CharArrayWriter} to another {@code
Writer}. The output is all the characters that have been written to the
receiver since the last reset or since it was created.

@param out
           the non-null {@code Writer} on which to write the contents.
@throws NullPointerException
            if {@code out} is {@code null}.
@throws IOException
            if an error occurs attempting to write out the contents."
      end

      operation 158875 "append"
	public return_type class_ref 134427 // CharArrayWriter
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends a char {@code c} to the {@code CharArrayWriter}. The method works
the same way as {@code write(c)}.

@param c
           the character appended to the CharArrayWriter.
@return this CharArrayWriter."
      end

      operation 159003 "append"
	public return_type class_ref 134427 // CharArrayWriter
	nparams 1
	  param inout name "csq" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends a {@code CharSequence} to the {@code CharArrayWriter}. The method
works the same way as {@code write(csq.toString())}. If {@code csq} is
{@code null}, then it will be substituted with the string {@code \"null\"}.

@param csq
           the {@code CharSequence} appended to the {@code
           CharArrayWriter}, may be {@code null}.
@return this CharArrayWriter."
      end

      operation 159131 "append"
	public return_type class_ref 134427 // CharArrayWriter
	nparams 3
	  param inout name "csq" type class_ref 133787 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Append a subsequence of a {@code CharSequence} to the {@code
CharArrayWriter}. The first and last characters of the subsequence are
specified by the parameters {@code start} and {@code end}. A call to
{@code CharArrayWriter.append(csq)} works the same way as {@code
CharArrayWriter.write(csq.subSequence(start, end).toString)}. If {@code
csq} is {@code null}, then it will be substituted with the string {@code
\"null\"}.

@param csq
           the {@code CharSequence} appended to the {@code
           CharArrayWriter}, may be {@code null}.
@param start
           the index of the first character in the {@code CharSequence}
           appended to the {@code CharArrayWriter}.
@param end
           the index of the character after the last one in the {@code
           CharSequence} appended to the {@code CharArrayWriter}.
@return this CharArrayWriter.
@throws IndexOutOfBoundsException
            if {@code start < 0}, {@code end < 0}, {@code start > end},
            or if {@code end} is greater than the length of {@code csq}."
      end
    end

    class 134555 "CharConversionException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The top level class for character conversion exceptions."
      classrelation 143771 // <generalisation>
	relation 143771 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 143771 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 139163 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8680016352018427031L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 163483 "CharConversionException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code CharConversionException} with its stack trace
filled in."
      end

      operation 163611 "CharConversionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code CharConversionException} with its stack trace and
detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 134939 "PrintStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link OutputStream} and provides convenience methods for
writing common data types in a human readable format. This is not to be
confused with DataOutputStream which is used for encoding common data types
so that they can be read back in. No {@code IOException} is thrown by this
class. Instead, callers should use {@link #checkError()} to see if a problem
has occurred in this stream."
      classrelation 163611 // <generalisation>
	relation 163611 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 163611 // <generalisation>
	  b parent class_ref 132507 // FilterOutputStream
      end

      classrelation 163739 // <realization>
	relation 163739 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 163739 // <realization>
	  b parent class_ref 133659 // Appendable
      end

      classrelation 163867 // <realization>
	relation 163867 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 163867 // <realization>
	  b parent class_ref 131995 // Closeable
      end

      attribute 153243 "ioError"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "indicates whether or not this PrintStream has incurred an error.
"
      end

      attribute 153371 "autoFlush"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "indicates whether or not this PrintStream should flush its contents after
printing a new line.
"
      end

      classrelation 163995 // encoding (<unidirectional association>)
	relation 163995 --->
	  a role_name "encoding" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 163995 // encoding (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 250139 "PrintStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintStream} with {@code out} as its target
stream. By default, the new print stream does not automatically flush its
contents to the target stream when a newline is encountered.

@param out
           the target output stream.
@throws NullPointerException
            if {@code out} is {@code null}."
      end

      operation 250267 "PrintStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 132635 // OutputStream
	  param inout name "autoFlush" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintStream} with {@code out} as its target
stream. The parameter {@code autoFlush} determines if the print stream
automatically flushes its contents to the target stream when a newline is
encountered.

@param out
           the target output stream.
@param autoFlush
           indicates whether to flush contents upon encountering a
           newline sequence.
@throws NullPointerException
            if {@code out} is {@code null}."
      end

      operation 250395 "PrintStream"
	public explicit_return_type ""
	nparams 3
	  param inout name "out" type class_ref 132635 // OutputStream
	  param inout name "autoFlush" explicit_type "boolean"
	  param inout name "charsetName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintStream} with {@code out} as its target
stream and using the character encoding {@code charsetName} while writing. The
parameter {@code autoFlush} determines if the print stream automatically
flushes its contents to the target stream when a newline is encountered.

@param out
           the target output stream.
@param autoFlush
           indicates whether or not to flush contents upon encountering a
           newline sequence.
@param charsetName
           the non-null string describing the desired character encoding.
@throws NullPointerException
            if {@code out} or {@code charsetName} are {@code null}.
@throws UnsupportedEncodingException
            if the encoding specified by {@code charsetName} is not supported."
      end

      operation 250523 "PrintStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 135579 // File
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintStream} with {@code file} as its target. The
VM's default character set is used for character encoding.

@param file
           the target file. If the file already exists, its contents are
           removed, otherwise a new file is created.
@throws FileNotFoundException
            if an error occurs while opening or creating the target file."
      end

      operation 250651 "PrintStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 135579 // File
	  param inout name "charsetName" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 135707 // FileNotFoundException
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintStream} with {@code file} as its target. The
character set named {@code charsetName} is used for character encoding.

@param file
           the target file. If the file already exists, its contents are
           removed, otherwise a new file is created.
@param charsetName
           the name of the character set used for character encoding.
@throws FileNotFoundException
            if an error occurs while opening or creating the target file.
@throws NullPointerException
            if {@code charsetName} is {@code null}.
@throws UnsupportedEncodingException
            if the encoding specified by {@code charsetName} is not supported."
      end

      operation 250779 "PrintStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "fileName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintStream} with the file identified by
{@code fileName} as its target. The VM's default character
set is used for character encoding.

@param fileName
           the target file's name. If the file already exists, its
           contents are removed, otherwise a new file is created.
@throws FileNotFoundException
            if an error occurs while opening or creating the target file."
      end

      operation 250907 "PrintStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "fileName" type class_ref 3399692 // String
	  param inout name "charsetName" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 135707 // FileNotFoundException
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintStream} with the file identified by
{@code fileName} as its target. The character set named {@code charsetName} is
used for character encoding.

@param fileName
           the target file's name. If the file already exists, its
           contents are removed, otherwise a new file is created.
@param charsetName
           the name of the character set used for character encoding.
@throws FileNotFoundException
            if an error occurs while opening or creating the target file.
@throws NullPointerException
            if {@code charsetName} is {@code null}.
@throws UnsupportedEncodingException
            if the encoding specified by {@code charsetName} is not supported."
      end

      operation 251035 "checkError"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this stream and returns the value of the error flag.

@return {@code true} if either an {@code IOException} has been thrown
        previously or if {@code setError()} has been called;
        {@code false} otherwise.
@see #setError()"
      end

      operation 251163 "clearError"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the error state of the stream to false.
@since 1.6"
      end

      operation 251291 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this print stream. Flushes this stream and then closes the target
stream. If an I/O error occurs, this stream's error state is set to
{@code true}."
      end

      operation 251419 "flush"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Ensures that all pending data is sent out to the target stream. It also
flushes the target stream. If an I/O error occurs, this stream's error
state is set to {@code true}."
      end

      operation 251547 "format"
	public return_type class_ref 134939 // PrintStream
	nparams 2
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats {@code args} according to the format string {@code format}, and writes the result
to this stream. This method uses the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return this stream.
@throws IllegalFormatException
            if the format string is illegal or incompatible with the
            arguments, if there are not enough arguments or if any other
            error regarding the format string or arguments is detected.
@throws NullPointerException if {@code format == null}"
      end

      operation 251675 "format"
	public return_type class_ref 134939 // PrintStream
	nparams 3
	  param inout name "l" type class_ref 135835 // Locale
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string formatted by an intermediate {@link Formatter} to this
stream using the specified locale, format string and arguments.

@param l
           the locale used in the method. No localization will be applied
           if {@code l} is {@code null}.
@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return this stream.
@throws IllegalFormatException
            if the format string is illegal or incompatible with the
            arguments, if there are not enough arguments or if any other
            error regarding the format string or arguments is detected.
@throws NullPointerException if {@code format == null}"
      end

      operation 251803 "printf"
	public return_type class_ref 134939 // PrintStream
	nparams 2
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a formatted string. The behavior of this method is the same as
this stream's {@code #format(String, Object...)} method.

<p>The {@code Locale} used is the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return this stream.
@throws IllegalFormatException
            if the format string is illegal or incompatible with the
            arguments, if there are not enough arguments or if any other
            error regarding the format string or arguments is detected.
@throws NullPointerException if {@code format == null}"
      end

      operation 251931 "printf"
	public return_type class_ref 134939 // PrintStream
	nparams 3
	  param inout name "l" type class_ref 135835 // Locale
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a formatted string. The behavior of this method is the same as
this stream's {@code #format(Locale, String, Object...)} method.

@param l
           the locale used in the method. No localization will be applied
           if {@code l} is {@code null}.
@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return this stream.
@throws IllegalFormatException
            if the format string is illegal or incompatible with the
            arguments, if there are not enough arguments or if any other
            error regarding the format string or arguments is detected.
@throws NullPointerException if {@code format == null}."
      end

      operation 252059 "newline"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put the line separator String onto the print stream."
      end

      operation 252187 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "chars" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the character array {@code chars}."
      end

      operation 252315 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the char {@code c}."
      end

      operation 252443 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the double {@code d}."
      end

      operation 252571 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "f" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the float {@code f}."
      end

      operation 252699 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the int {@code i}."
      end

      operation 252827 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "l" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the long {@code l}."
      end

      operation 252955 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the Object {@code o}, or {@code \"null\"}."
      end

      operation 253083 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a string to the target stream. The string is converted to an array
of bytes using the encoding chosen during the construction of this
stream. The bytes are then written to the target stream with
{@code write(int)}.

<p>If an I/O error occurs, this stream's error state is set to {@code true}.

@param str
           the string to print to the target stream.
@see #write(int)"
      end

      operation 253211 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the boolean {@code b}."
      end

      operation 253339 "println"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a newline."
      end

      operation 253467 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "chars" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the character array {@code chars} followed by a newline."
      end

      operation 253595 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the char {@code c} followed by a newline."
      end

      operation 253723 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the double {@code d} followed by a newline."
      end

      operation 253851 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "f" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the float {@code f} followed by a newline."
      end

      operation 253979 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the int {@code i} followed by a newline."
      end

      operation 254107 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "l" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the long {@code l} followed by a newline."
      end

      operation 254235 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the Object {@code o}, or {@code \"null\"},
followed by a newline."
      end

      operation 254363 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a string followed by a newline. The string is converted to an array of bytes using
the encoding chosen during the construction of this stream. The bytes are
then written to the target stream with {@code write(int)}.

<p>If an I/O error occurs, this stream's error state is set to {@code true}.

@param str
           the string to print to the target stream.
@see #write(int)"
      end

      operation 254491 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the boolean {@code b} followed by a newline."
      end

      operation 254619 "setError"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the error flag of this print stream to true."
      end

      operation 254747 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} bytes from {@code buffer} starting at {@code offset}
to the target stream. If autoFlush is set, this stream gets flushed after
writing the buffer.

<p>This stream's error flag is set to {@code true} if this stream is closed
or an I/O error occurs.

@param buffer
           the buffer to be written.
@param offset
           the index of the first byte in {@code buffer} to write.
@param length
           the number of bytes in {@code buffer} to write.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is bigger than the length of {@code buffer}.
@see #flush()"
      end

      operation 254875 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes one byte to the target stream. Only the least significant byte of
the integer {@code oneByte} is written. This stream is flushed if
{@code oneByte} is equal to the character {@code '\\n'} and this stream is
set to autoFlush.
<p>
This stream's error flag is set to {@code true} if it is closed or an I/O
error occurs.

@param oneByte
           the byte to be written"
      end

      operation 255003 "append"
	public return_type class_ref 134939 // PrintStream
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the char {@code c}.
@return this stream."
      end

      operation 255131 "append"
	public return_type class_ref 134939 // PrintStream
	nparams 1
	  param inout name "charSequence" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the CharSequence {@code charSequence}, or {@code \"null\"}.
@return this stream."
      end

      operation 255259 "append"
	public return_type class_ref 134939 // PrintStream
	nparams 3
	  param inout name "charSequence" type class_ref 133787 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of CharSequence {@code charSequence}, or {@code \"null\"}.

@param charSequence
           the character sequence appended to the target stream.
@param start
           the index of the first char in the character sequence appended
           to the target stream.
@param end
           the index of the character following the last character of the
           subsequence appended to the target stream.
@return this stream.
@throws IndexOutOfBoundsException
            if {@code start > end}, {@code start < 0}, {@code end < 0} or
            either {@code start} or {@code end} are greater or equal than
            the length of {@code charSequence}."
      end
    end

    class 135067 "PrintWriter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps either an existing {@link OutputStream} or an existing {@link Writer}
and provides convenience methods for printing common data types in a human
readable format. No {@code IOException} is thrown by this class. Instead,
callers should use {@link #checkError()} to see if a problem has occurred in
this writer."
      classrelation 144667 // <generalisation>
	relation 144667 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 144667 // <generalisation>
	  b parent class_ref 133531 // Writer
      end

      classrelation 144795 // out (<unidirectional association>)
	relation 144795 --->
	  a role_name "out" protected
	    comment "
The writer to print data to.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 144795 // out (<unidirectional association>)
	  b parent class_ref 133531 // Writer
      end

      attribute 139291 "ioError"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates whether this PrintWriter is in an error state.
"
      end

      attribute 139419 "autoFlush"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates whether or not this PrintWriter should flush its contents after
printing a new line.
"
      end

      operation 165787 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintWriter} with {@code out} as its target
stream. By default, the new print writer does not automatically flush its
contents to the target stream when a newline is encountered.

@param out
           the target output stream.
@throws NullPointerException
            if {@code out} is {@code null}."
      end

      operation 165915 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 132635 // OutputStream
	  param inout name "autoFlush" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintWriter} with {@code out} as its target
stream. The parameter {@code autoFlush} determines if the print writer
automatically flushes its contents to the target stream when a newline is
encountered.

@param out
           the target output stream.
@param autoFlush
           indicates whether contents are flushed upon encountering a
           newline sequence.
@throws NullPointerException
            if {@code out} is {@code null}."
      end

      operation 166043 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "wr" type class_ref 133531 // Writer
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintWriter} with {@code wr} as its target
writer. By default, the new print writer does not automatically flush its
contents to the target writer when a newline is encountered.

@param wr
           the target writer.
@throws NullPointerException
            if {@code wr} is {@code null}."
      end

      operation 166171 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "wr" type class_ref 133531 // Writer
	  param inout name "autoFlush" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintWriter} with {@code out} as its target
writer. The parameter {@code autoFlush} determines if the print writer
automatically flushes its contents to the target writer when a newline is
encountered.

@param wr
           the target writer.
@param autoFlush
           indicates whether to flush contents upon encountering a
           newline sequence.
@throws NullPointerException
            if {@code out} is {@code null}."
      end

      operation 166299 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 135579 // File
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintWriter} with {@code file} as its target. The
VM's default character set is used for character encoding.
The print writer does not automatically flush its contents to the target
file when a newline is encountered. The output to the file is buffered.

@param file
           the target file. If the file already exists, its contents are
           removed, otherwise a new file is created.
@throws FileNotFoundException
            if an error occurs while opening or creating the target file."
      end

      operation 166427 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 135579 // File
	  param inout name "csn" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 135707 // FileNotFoundException
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintWriter} with {@code file} as its target. The
character set named {@code csn} is used for character encoding.
The print writer does not automatically flush its contents to the target
file when a newline is encountered. The output to the file is buffered.

@param file
           the target file. If the file already exists, its contents are
           removed, otherwise a new file is created.
@param csn
           the name of the character set used for character encoding.
@throws FileNotFoundException
            if an error occurs while opening or creating the target file.
@throws NullPointerException
            if {@code csn} is {@code null}.
@throws UnsupportedEncodingException
            if the encoding specified by {@code csn} is not supported."
      end

      operation 166555 "PrintWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "fileName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintWriter} with the file identified by {@code
fileName} as its target. The VM's default character set is
used for character encoding. The print writer does not automatically
flush its contents to the target file when a newline is encountered. The
output to the file is buffered.

@param fileName
           the target file's name. If the file already exists, its
           contents are removed, otherwise a new file is created.
@throws FileNotFoundException
            if an error occurs while opening or creating the target file."
      end

      operation 166683 "PrintWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "fileName" type class_ref 3399692 // String
	  param inout name "csn" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 135707 // FileNotFoundException
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PrintWriter} with the file identified by {@code
fileName} as its target. The character set named {@code csn} is used for
character encoding. The print writer does not automatically flush its
contents to the target file when a newline is encountered. The output to
the file is buffered.

@param fileName
           the target file's name. If the file already exists, its
           contents are removed, otherwise a new file is created.
@param csn
           the name of the character set used for character encoding.
@throws FileNotFoundException
            if an error occurs while opening or creating the target file.
@throws NullPointerException
            if {@code csn} is {@code null}.
@throws UnsupportedEncodingException
            if the encoding specified by {@code csn} is not supported."
      end

      operation 166811 "checkError"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this writer and returns the value of the error flag.

@return {@code true} if either an {@code IOException} has been thrown
        previously or if {@code setError()} has been called;
        {@code false} otherwise.
@see #setError()"
      end

      operation 166939 "clearError"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the error state of the stream to false.
@since 1.6"
      end

      operation 167067 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this print writer. Flushes this writer and then closes the target.
If an I/O error occurs, this writer's error flag is set to {@code true}."
      end

      operation 167195 "flush"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Ensures that all pending data is sent out to the target. It also
flushes the target. If an I/O error occurs, this writer's error
state is set to {@code true}."
      end

      operation 167323 "format"
	public return_type class_ref 135067 // PrintWriter
	nparams 2
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats {@code args} according to the format string {@code format}, and writes the result
to this stream. This method uses the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
If automatic flushing is enabled then the buffer is flushed as well.

@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return this writer.
@throws IllegalFormatException
            if the format string is illegal or incompatible with the
            arguments, if there are not enough arguments or if any other
            error regarding the format string or arguments is detected.
@throws NullPointerException if {@code format == null}"
      end

      operation 167451 "format"
	public return_type class_ref 135067 // PrintWriter
	nparams 3
	  param inout name "l" type class_ref 135835 // Locale
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string formatted by an intermediate {@code Formatter} to the
target using the specified locale, format string and arguments. If
automatic flushing is enabled then this writer is flushed.

@param l
           the locale used in the method. No localization will be applied
           if {@code l} is {@code null}.
@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return this writer.
@throws IllegalFormatException
            if the format string is illegal or incompatible with the
            arguments, if there are not enough arguments or if any other
            error regarding the format string or arguments is detected.
@throws NullPointerException if {@code format == null}"
      end

      operation 167579 "printf"
	public return_type class_ref 135067 // PrintWriter
	nparams 2
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a formatted string. The behavior of this method is the same as
this writer's {@code #format(String, Object...)} method.

<p>The {@code Locale} used is the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return this writer.
@throws IllegalFormatException
            if the format string is illegal or incompatible with the
            arguments, if there are not enough arguments or if any other
            error regarding the format string or arguments is detected.
@throws NullPointerException if {@code format == null}"
      end

      operation 167707 "printf"
	public return_type class_ref 135067 // PrintWriter
	nparams 3
	  param inout name "l" type class_ref 135835 // Locale
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a formatted string. The behavior of this method is the same as
this writer's {@code #format(Locale, String, Object...)} method.

@param l
           the locale used in the method. No localization will be applied
           if {@code l} is {@code null}.
@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return this writer.
@throws IllegalFormatException
            if the format string is illegal or incompatible with the
            arguments, if there are not enough arguments or if any other
            error regarding the format string or arguments is detected.
@throws NullPointerException if {@code format == null}"
      end

      operation 167835 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "charArray" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the specified character array
to the target.

@param charArray
           the character array to print to the target.
@see #print(String)"
      end

      operation 167963 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the specified character to the
target.

@param ch
           the character to print to the target.
@see #print(String)"
      end

      operation 168091 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "dnum" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the specified double to the target.

@param dnum
           the double value to print to the target.
@see #print(String)"
      end

      operation 168219 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "fnum" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the specified float to the target.

@param fnum
           the float value to print to the target.
@see #print(String)"
      end

      operation 168347 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "inum" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the specified integer to the target.

@param inum
           the integer value to print to the target.
@see #print(String)"
      end

      operation 168475 "print"
	public explicit_return_type "void"
	nparams 1
	  param in name "lnum" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the specified long to the target.

@param lnum
           the long value to print to the target.
@see #print(String)"
      end

      operation 168603 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the specified object to the target.

@param obj
           the object to print to the target.
@see #print(String)"
      end

      operation 168731 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a string to the target. The string is converted to an array of
bytes using the encoding chosen during the construction of this writer.
The bytes are then written to the target with {@code write(int)}.
<p>
If an I/O error occurs, this writer's error flag is set to {@code true}.

@param str
           the string to print to the target.
@see #write(int)"
      end

      operation 168859 "print"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bool" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the specified boolean to the target.

@param bool
           the boolean value to print the target.
@see #print(String)"
      end

      operation 168987 "println"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a newline. Flushes this writer if the autoFlush flag is set to {@code true}."
      end

      operation 169115 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "chars" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the character array {@code chars} followed by a newline.
Flushes this writer if the autoFlush flag is set to {@code true}."
      end

      operation 169243 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the char {@code c} followed by a newline.
Flushes this writer if the autoFlush flag is set to {@code true}."
      end

      operation 169371 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the double {@code d} followed by a newline.
Flushes this writer if the autoFlush flag is set to {@code true}."
      end

      operation 169499 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "f" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the float {@code f} followed by a newline.
Flushes this writer if the autoFlush flag is set to {@code true}."
      end

      operation 169627 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the int {@code i} followed by a newline.
Flushes this writer if the autoFlush flag is set to {@code true}."
      end

      operation 169755 "println"
	public explicit_return_type "void"
	nparams 1
	  param in name "l" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the long {@code l} followed by a newline.
Flushes this writer if the autoFlush flag is set to {@code true}."
      end

      operation 169883 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the object {@code o}, or {@code \"null},
followed by a newline.
Flushes this writer if the autoFlush flag is set to {@code true}."
      end

      operation 170011 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the string {@code s} followed by a newline.
Flushes this writer if the autoFlush flag is set to {@code true}.

<p>The string is converted to an array of bytes using the
encoding chosen during the construction of this writer. The bytes are
then written to the target with {@code write(int)}. Finally, this writer
is flushed if the autoFlush flag is set to {@code true}.

<p>If an I/O error occurs, this writer's error flag is set to {@code true}."
      end

      operation 170139 "println"
	public explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints the string representation of the boolean {@code b} followed by a newline.
Flushes this writer if the autoFlush flag is set to {@code true}."
      end

      operation 170267 "setError"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the error flag of this writer to true."
      end

      operation 170395 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buf" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the character buffer {@code buf} to the target.

@param buf
           the non-null array containing characters to write."
      end

      operation 170523 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buf" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters from {@code buffer} starting at {@code
offset} to the target.
<p>
This writer's error flag is set to {@code true} if this writer is closed
or an I/O error occurs.

@param buf
           the buffer to write to the target.
@param offset
           the index of the first character in {@code buffer} to write.
@param count
           the number of characters in {@code buffer} to write.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is greater than the length of {@code buf}."
      end

      operation 170651 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneChar" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes one character to the target. Only the two least significant bytes
of the integer {@code oneChar} are written.
<p>
This writer's error flag is set to {@code true} if this writer is closed
or an I/O error occurs.

@param oneChar
           the character to write to the target."
      end

      operation 170779 "doWrite"
	private explicit_return_type "void"
	nparams 3
	  param inout name "buf" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 170907 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the characters from the specified string to the target.

@param str
           the non-null string containing the characters to write."
      end

      operation 171035 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters from {@code str} starting at {@code
offset} to the target.

@param str
           the non-null string containing the characters to write.
@param offset
           the index of the first character in {@code str} to write.
@param count
           the number of characters from {@code str} to write.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is greater than the length of {@code str}."
      end

      operation 171163 "append"
	public return_type class_ref 135067 // PrintWriter
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends the character {@code c} to the target.

@param c
           the character to append to the target.
@return this writer."
      end

      operation 171291 "append"
	public return_type class_ref 135067 // PrintWriter
	nparams 1
	  param inout name "csq" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends the character sequence {@code csq} to the target. This
method works the same way as {@code PrintWriter.print(csq.toString())}.
If {@code csq} is {@code null}, then the string \"null\" is written
to the target.

@param csq
           the character sequence appended to the target.
@return this writer."
      end

      operation 171419 "append"
	public return_type class_ref 135067 // PrintWriter
	nparams 3
	  param inout name "csq" type class_ref 133787 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends a subsequence of the character sequence {@code csq} to the
target. This method works the same way as {@code
PrintWriter.print(csq.subsequence(start, end).toString())}. If {@code
csq} is {@code null}, then the specified subsequence of the string \"null\"
will be written to the target.

@param csq
           the character sequence appended to the target.
@param start
           the index of the first char in the character sequence appended
           to the target.
@param end
           the index of the character following the last character of the
           subsequence appended to the target.
@return this writer.
@throws StringIndexOutOfBoundsException
            if {@code start > end}, {@code start < 0}, {@code end < 0} or
            either {@code start} or {@code end} are greater or equal than
            the length of {@code csq}."
      end
    end

    class 135195 "Console"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides access to the console, if available. The system-wide instance can
be accessed via {@link java.lang.System#console}.
@since 1.6"
      classrelation 143899 // <realization>
	relation 143899 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 143899 // <realization>
	  b parent class_ref 132763 // Flushable
      end

      classrelation 144027 // CONSOLE_LOCK (<unidirectional association>)
	relation 144027 --->
	  a role_name "CONSOLE_LOCK" init_value " new Object()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 144027 // CONSOLE_LOCK (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 144155 // console (<unidirectional association>)
	relation 144155 --->
	  a role_name "console" init_value " makeConsole()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 144155 // console (<unidirectional association>)
	  b parent class_ref 135195 // Console
      end

      class 135323 "ConsoleReader"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 144539 // <generalisation>
	  relation 144539 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 144539 // <generalisation>
	    b parent class_ref 132891 // BufferedReader
	end

	operation 165531 "ConsoleReader"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "in" type class_ref 131867 // InputStream
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 165659 "close"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 144283 // reader (<unidirectional association>)
	relation 144283 --->
	  a role_name "reader" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 144283 // reader (<unidirectional association>)
	  b parent class_ref 135323 // ConsoleReader
      end

      classrelation 144411 // writer (<unidirectional association>)
	relation 144411 --->
	  a role_name "writer" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 144411 // writer (<unidirectional association>)
	  b parent class_ref 135067 // PrintWriter
      end

      operation 163739 "getConsole"
	class_operation public return_type class_ref 135195 // Console
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Secret accessor for {@code System.console}.
@hide"
      end

      operation 163867 "makeConsole"
	class_operation private return_type class_ref 135195 // Console
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 163995 "Console"
	private explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 131867 // InputStream
	  param inout name "out" type class_ref 132635 // OutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 164123 "flush"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 164251 "format"
	public return_type class_ref 135195 // Console
	nparams 2
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a formatted string to the console using
the specified format string and arguments.

@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return the console instance."
      end

      operation 164379 "printf"
	public return_type class_ref 135195 // Console
	nparams 2
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code format(format, args)}."
      end

      operation 164507 "reader"
	public return_type class_ref 133019 // Reader
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link Reader} associated with this console."
      end

      operation 164635 "readLine"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a line from the console.

@return the line, or null at EOF."
      end

      operation 164763 "readLine"
	public return_type class_ref 3399692 // String
	nparams 2
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a line from this console, using the specified prompt.
The prompt is given as a format string and optional arguments.
Note that this can be a source of errors: if it is possible that your
prompt contains {@code %} characters, you must use the format string {@code \"%s\"}
and pass the actual prompt as a parameter.

@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return the line, or null at EOF."
      end

      operation 164891 "readPassword"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a password from the console. The password will not be echoed to the display.

@return a character array containing the password, or null at EOF."
      end

      operation 165019 "setEcho"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "on" explicit_type "boolean"
	  param in name "previousState" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 165147 "setEchoImpl"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "on" explicit_type "boolean"
	  param in name "previousState" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 165275 "readPassword"
	public explicit_return_type "char"
	nparams 2
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a password from the console. The password will not be echoed to the display.
A formatted prompt is also displayed.

@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return a character array containing the password, or null at EOF."
      end

      operation 165403 "writer"
	public return_type class_ref 135067 // PrintWriter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link Writer} associated with this console."
      end

      class 135451 "ConsoleWriter"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 144923 // <generalisation>
	  relation 144923 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 144923 // <generalisation>
	    b parent class_ref 135067 // PrintWriter
	end

	operation 171547 "ConsoleWriter"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "out" type class_ref 132635 // OutputStream
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 171675 "close"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 135579 "File"
      visibility public 
      nactuals 1
      actual class class_ref 139675 // Comparable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An \"abstract\" representation of a file system entity identified by a
pathname. The pathname may be absolute (relative to the root directory
of the file system) or relative to the current directory in which the program
is running.

<p>The actual file referenced by a {@code File} may or may not exist. It may
also, despite the name {@code File}, be a directory or other non-regular
file.

<p>This class provides limited functionality for getting/setting file
permissions, file type, and last modified time.

<p>On Android strings are converted to UTF-8 byte sequences when sending filenames to
the operating system, and byte sequences returned by the operating system (from the
various {@code list} methods) are converted to strings by decoding them as UTF-8
byte sequences.

@see java.io.Serializable
@see java.lang.Comparable"
      classrelation 151835 // <realization>
	relation 151835 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 151835 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      classrelation 151963 // <realization>
	relation 151963 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 151963 // <realization>
	  b parent class_ref 139675 // Comparable
      end

      attribute 145563 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 301077366599181567L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 152091 // tempFileRandom (<unidirectional association>)
	relation 152091 --->
	  a role_name "tempFileRandom" init_value " new Random()" class_relation const_relation private
	    comment "
Reusing a Random makes temporary filenames slightly harder to predict.
(Random is thread-safe.)

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 152091 // tempFileRandom (<unidirectional association>)
	  b parent class_ref 139803 // Random
      end

      attribute 145691 "separatorChar"
	class_attribute const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The system-dependent character used to separate components in filenames ('/').
Use of this (rather than hard-coding '/') helps portability to other operating systems.

<p>This field is initialized from the system property \"file.separator\".
Later changes to that property will have no effect on this field or this class.
"
      end

      classrelation 152219 // separator (<unidirectional association>)
	relation 152219 --->
	  a role_name "separator" class_relation const_relation public
	    comment "
The system-dependent string used to separate components in filenames ('/').
See {@link #separatorChar}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 152219 // separator (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 145819 "pathSeparatorChar"
	class_attribute const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The system-dependent character used to separate components in search paths (':').
This is used to split such things as the PATH environment variable and classpath
system properties into lists of directories to be searched.

<p>This field is initialized from the system property \"path.separator\".
Later changes to that property will have no effect on this field or this class.
"
      end

      classrelation 152347 // pathSeparator (<unidirectional association>)
	relation 152347 --->
	  a role_name "pathSeparator" class_relation const_relation public
	    comment "
The system-dependent string used to separate components in search paths (\":\").
See {@link #pathSeparatorChar}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 152347 // pathSeparator (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 152475 // path (<unidirectional association>)
	relation 152475 --->
	  a role_name "path" private
	    comment "
The path we return from getPath. This is almost the path we were
given, but without duplicate adjacent slashes and without trailing
slashes (except for the special case of the root directory). This
path may be the empty string.

This can't be final because we override readObject.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 152475 // path (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      extra_member 128155 "initialization"
	
	cpp "" ""
	java "  static {
        separatorChar = System.getProperty(\"file.separator\", \"/\").charAt(0);
        pathSeparatorChar = System.getProperty(\"path.separator\", \":\").charAt(0);
        separator = String.valueOf(separatorChar);
        pathSeparator = String.valueOf(pathSeparatorChar);
    }"
	php ""
	python ""
	idl ""
      end

      operation 208923 "File"
	public explicit_return_type ""
	nparams 2
	  param inout name "dir" type class_ref 135579 // File
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new file using the specified directory and name.

@param dir
           the directory where the file is stored.
@param name
           the file's name.
@throws NullPointerException
            if {@code name} is {@code null}."
      end

      operation 209051 "File"
	public explicit_return_type ""
	nparams 1
	  param inout name "path" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new file using the specified path.

@param path
           the path to be used for the file."
      end

      operation 209179 "File"
	public explicit_return_type ""
	nparams 2
	  param inout name "dirPath" type class_ref 3399692 // String
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new File using the specified directory path and file name,
placing a path separator between the two.

@param dirPath
           the path to the directory where the file is stored.
@param name
           the file's name.
@throws NullPointerException
            if {@code name == null}."
      end

      operation 209307 "File"
	public explicit_return_type ""
	nparams 1
	  param inout name "uri" type class_ref 139931 // URI
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new File using the path of the specified URI. {@code uri}
needs to be an absolute and hierarchical Unified Resource Identifier with
file scheme and non-empty path component, but with undefined authority,
query or fragment components.

@param uri
           the Unified Resource Identifier that is used to construct this
           file.
@throws IllegalArgumentException
            if {@code uri} does not comply with the conditions above.
@see #toURI
@see java.net.URI"
      end

      operation 209435 "fixSlashes"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "origPath" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Removes duplicate adjacent slashes and any trailing slash."
      end

      operation 209563 "join"
	class_operation private return_type class_ref 3399692 // String
	nparams 2
	  param inout name "prefix" type class_ref 3399692 // String
	  param inout name "suffix" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Joins two path components, adding a separator only if necessary."
      end

      operation 209691 "checkURI"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "uri" type class_ref 139931 // URI
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 209819 "listRoots"
	class_operation public return_type class_ref 135579 // File
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the file system roots. On Android and other Unix systems, there is
a single root, {@code /}."
      end

      operation 209947 "canExecute"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether or not this process is allowed to execute this file.
Note that this is a best-effort result; the only way to be certain is
to actually attempt the operation.

@return {@code true} if this file can be executed, {@code false} otherwise.
@since 1.6"
      end

      operation 210075 "canRead"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the current context is allowed to read from this file.

@return {@code true} if this file can be read, {@code false} otherwise."
      end

      operation 210203 "canWrite"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the current context is allowed to write to this file.

@return {@code true} if this file can be written, {@code false}
        otherwise."
      end

      operation 210331 "doAccess"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 210459 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "another" type class_ref 135579 // File
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relative sort ordering of the paths for this file and the
file {@code another}. The ordering is platform dependent.

@param another
           a file to compare this file to
@return an int determined by comparing the two paths. Possible values are
        described in the Comparable interface.
@see Comparable"
      end

      operation 210587 "delete"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes this file. Directories must be empty before they will be deleted.

<p>Note that this method does <i>not</i> throw {@code IOException} on failure.
Callers must check the return value.

@return {@code true} if this file was deleted, {@code false} otherwise."
      end

      operation 210715 "deleteOnExit"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Schedules this file to be automatically deleted when the VM terminates normally.

<p><i>Note that on Android, the application lifecycle does not include VM termination,
so calling this method will not ensure that files are deleted</i>. Instead, you should
use the most appropriate out of:
<ul>
<li>Use a {@code finally} clause to manually invoke {@link #delete}.
<li>Maintain your own set of files to delete, and process it at an appropriate point
in your application's lifecycle.
<li>Use the Unix trick of deleting the file as soon as all readers and writers have
opened it. No new readers/writers will be able to access the file, but all existing
ones will still have access until the last one closes the file.
</ul>"
      end

      operation 210843 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares {@code obj} to this file and returns {@code true} if they
represent the <em>same</em> object using a path specific comparison.

@param obj
           the object to compare this file with.
@return {@code true} if {@code obj} is the same as this object,
        {@code false} otherwise."
      end

      operation 210971 "exists"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a boolean indicating whether this file can be found on the
underlying file system.

@return {@code true} if this file exists, {@code false} otherwise."
      end

      operation 211099 "getAbsolutePath"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute path of this file. An absolute path is a path that starts at a root
of the file system. On Android, there is only one root: {@code /}.

<p>A common use for absolute paths is when passing paths to a {@code Process} as
command-line arguments, to remove the requirement implied by relative paths, that the
child must have the same working directory as its parent."
      end

      operation 211227 "getAbsoluteFile"
	public return_type class_ref 135579 // File
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new file constructed using the absolute path of this file.
Equivalent to {@code new File(this.getAbsolutePath())}."
      end

      operation 211355 "getCanonicalPath"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical path of this file.
An <i>absolute</i> path is one that begins at the root of the file system.
A <i>canonical</i> path is an absolute path with symbolic links
and references to \".\" or \"..\" resolved. If a path element does not exist (or
is not searchable), there is a conflict between interpreting canonicalization
as a textual operation (where \"a/../b\" is \"b\" even if \"a\" does not exist) .

<p>Most callers should use {@link #getAbsolutePath} instead. A canonical path is
significantly more expensive to compute, and not generally useful. The primary
use for canonical paths is determining whether two paths point to the same file by
comparing the canonicalized paths.

<p>It can be actively harmful to use a canonical path, specifically because
canonicalization removes symbolic links. It's wise to assume that a symbolic link
is present for a reason, and that that reason is because the link may need to change.
Canonicalization removes this layer of indirection. Good code should generally avoid
caching canonical paths.

@return the canonical path of this file.
@throws IOException
            if an I/O error occurs."
      end

      operation 211483 "realpath"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "path" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "TODO: move this stuff to libcore.os.
@hide"
      end

      operation 211611 "readlink"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "path" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 211739 "getCanonicalFile"
	public return_type class_ref 135579 // File
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new file created using the canonical path of this file.
Equivalent to {@code new File(this.getCanonicalPath())}.

@return the new file constructed from this file's canonical path.
@throws IOException
            if an I/O error occurs."
      end

      operation 211867 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the file or directory represented by this file.

@return this file's name or an empty string if there is no name part in
        the file's path."
      end

      operation 211995 "getParent"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pathname of the parent of this file. This is the path up to
but not including the last name. {@code null} is returned if there is no
parent.

@return this file's parent pathname or {@code null}."
      end

      operation 212123 "getParentFile"
	public return_type class_ref 135579 // File
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new file made from the pathname of the parent of this file.
This is the path up to but not including the last name. {@code null} is
returned when there is no parent.

@return a new file representing this file's parent or {@code null}."
      end

      operation 212251 "getPath"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path of this file.

@return this file's path."
      end

      operation 212379 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an integer hash code for the receiver. Any two objects for which
{@code equals} returns {@code true} must return the same hash code.

@return this files's hash value.
@see #equals"
      end

      operation 212507 "isAbsolute"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if this file's pathname is absolute. Whether a pathname is
absolute is platform specific. On Android, absolute paths start with
the character '/'.

@return {@code true} if this file's pathname is absolute, {@code false}
        otherwise.
@see #getPath"
      end

      operation 212635 "isDirectory"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if this file represents a <em>directory</em> on the
underlying file system.

@return {@code true} if this file is a directory, {@code false}
        otherwise."
      end

      operation 212763 "isFile"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if this file represents a <em>file</em> on the underlying
file system.

@return {@code true} if this file is a file, {@code false} otherwise."
      end

      operation 212891 "isHidden"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not this file is a hidden file as defined by the
operating system. The notion of \"hidden\" is system-dependent. For Unix
systems a file is considered hidden if its name starts with a \".\". For
Windows systems there is an explicit flag in the file system for this
purpose.

@return {@code true} if the file is hidden, {@code false} otherwise."
      end

      operation 213019 "lastModified"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time when this file was last modified, measured in
milliseconds since January 1st, 1970, midnight.
Returns 0 if the file does not exist.

@return the time when this file was last modified."
      end

      operation 213147 "setLastModified"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "time" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time this file was last modified, measured in milliseconds since
January 1st, 1970, midnight.

<p>Note that this method does <i>not</i> throw {@code IOException} on failure.
Callers must check the return value.

@param time
           the last modification time for this file.
@return {@code true} if the operation is successful, {@code false}
        otherwise.
@throws IllegalArgumentException
            if {@code time < 0}."
      end

      operation 213275 "setLastModifiedImpl"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "path" type class_ref 3399692 // String
	  param in name "time" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 213403 "setReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to setWritable(false, false).

@see #setWritable(boolean, boolean)"
      end

      operation 213531 "setExecutable"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "executable" explicit_type "boolean"
	  param inout name "ownerOnly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Manipulates the execute permissions for the abstract path designated by
this file.

<p>Note that this method does <i>not</i> throw {@code IOException} on failure.
Callers must check the return value.

@param executable
           To allow execute permission if true, otherwise disallow
@param ownerOnly
           To manipulate execute permission only for owner if true,
           otherwise for everyone. The manipulation will apply to
           everyone regardless of this value if the underlying system
           does not distinguish owner and other users.
@return true if and only if the operation succeeded. If the user does not
        have permission to change the access permissions of this abstract
        pathname the operation will fail. If the underlying file system
        does not support execute permission and the value of executable
        is false, this operation will fail.
@since 1.6"
      end

      operation 213659 "setExecutable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "executable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to setExecutable(executable, true).
@see #setExecutable(boolean, boolean)
@since 1.6"
      end

      operation 213787 "setReadable"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "readable" explicit_type "boolean"
	  param inout name "ownerOnly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Manipulates the read permissions for the abstract path designated by this
file.

@param readable
           To allow read permission if true, otherwise disallow
@param ownerOnly
           To manipulate read permission only for owner if true,
           otherwise for everyone. The manipulation will apply to
           everyone regardless of this value if the underlying system
           does not distinguish owner and other users.
@return true if and only if the operation succeeded. If the user does not
        have permission to change the access permissions of this abstract
        pathname the operation will fail. If the underlying file system
        does not support read permission and the value of readable is
        false, this operation will fail.
@since 1.6"
      end

      operation 213915 "setReadable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "readable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to setReadable(readable, true).
@see #setReadable(boolean, boolean)
@since 1.6"
      end

      operation 214043 "setWritable"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "writable" explicit_type "boolean"
	  param inout name "ownerOnly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Manipulates the write permissions for the abstract path designated by this
file.

@param writable
           To allow write permission if true, otherwise disallow
@param ownerOnly
           To manipulate write permission only for owner if true,
           otherwise for everyone. The manipulation will apply to
           everyone regardless of this value if the underlying system
           does not distinguish owner and other users.
@return true if and only if the operation succeeded. If the user does not
        have permission to change the access permissions of this abstract
        pathname the operation will fail.
@since 1.6"
      end

      operation 214171 "setWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "writable" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to setWritable(writable, true).
@see #setWritable(boolean, boolean)
@since 1.6"
      end

      operation 214299 "doChmod"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "mask" explicit_type "int"
	  param inout name "set" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 214427 "length"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this file in bytes.
Returns 0 if the file does not exist.
The result for a directory is not defined.

@return the number of bytes in this file."
      end

      operation 214555 "list"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of strings with the file names in the directory
represented by this file. The result is {@code null} if this file is not
a directory.
<p>
The entries {@code .} and {@code ..} representing the current and parent
directory are not returned as part of the list.

@return an array of strings with file names or {@code null}."
      end

      operation 214683 "listImpl"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "path" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 214811 "list"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "filter" type class_ref 140059 // FilenameFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a list of the files in the directory represented by this file. This
list is then filtered through a FilenameFilter and the names of files
with matching names are returned as an array of strings. Returns
{@code null} if this file is not a directory. If {@code filter} is
{@code null} then all filenames match.
<p>
The entries {@code .} and {@code ..} representing the current and parent
directories are not returned as part of the list.

@param filter
           the filter to match names against, may be {@code null}.
@return an array of files or {@code null}."
      end

      operation 214939 "listFiles"
	public return_type class_ref 135579 // File
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of files contained in the directory represented by this
file. The result is {@code null} if this file is not a directory. The
paths of the files in the array are absolute if the path of this file is
absolute, they are relative otherwise.

@return an array of files or {@code null}."
      end

      operation 215067 "listFiles"
	public return_type class_ref 135579 // File
	nparams 1
	  param inout name "filter" type class_ref 140059 // FilenameFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a list of the files in the directory represented by this file. This
list is then filtered through a FilenameFilter and files with matching
names are returned as an array of files. Returns {@code null} if this
file is not a directory. If {@code filter} is {@code null} then all
filenames match.
<p>
The entries {@code .} and {@code ..} representing the current and parent
directories are not returned as part of the list.

@param filter
           the filter to match names against, may be {@code null}.
@return an array of files or {@code null}."
      end

      operation 215195 "listFiles"
	public return_type class_ref 135579 // File
	nparams 1
	  param inout name "filter" type class_ref 140187 // FileFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a list of the files in the directory represented by this file. This
list is then filtered through a FileFilter and matching files are
returned as an array of files. Returns {@code null} if this file is not a
directory. If {@code filter} is {@code null} then all files match.
<p>
The entries {@code .} and {@code ..} representing the current and parent
directories are not returned as part of the list.

@param filter
           the filter to match names against, may be {@code null}.
@return an array of files or {@code null}."
      end

      operation 215323 "filenamesToFiles"
	private return_type class_ref 135579 // File
	nparams 1
	  param inout name "filenames" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a String[] containing filenames to a File[].
Note that the filenames must not contain slashes.
This method is to remove duplication in the implementation
of File.list's overloads."
      end

      operation 215451 "mkdir"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the directory named by this file, assuming its parents exist.
Use {@link #mkdirs} if you also want to create missing parents.

<p>Note that this method does <i>not</i> throw {@code IOException} on failure.
Callers must check the return value. Note also that this method returns
false if the directory already existed. If you want to know whether the
directory exists on return, either use {@code (f.mkdir() || f.isDirectory())}
or simply ignore the return value from this method and simply call {@link #isDirectory}.

@return {@code true} if the directory was created,
        {@code false} on failure or if the directory already existed."
      end

      operation 215579 "mkdirErrno"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 140315 // ErrnoException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 215707 "mkdirs"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the directory named by this file, creating missing parent
directories if necessary.
Use {@link #mkdir} if you don't want to create missing parents.

<p>Note that this method does <i>not</i> throw {@code IOException} on failure.
Callers must check the return value. Note also that this method returns
false if the directory already existed. If you want to know whether the
directory exists on return, either use {@code (f.mkdirs() || f.isDirectory())}
or simply ignore the return value from this method and simply call {@link #isDirectory}.

@return {@code true} if the directory was created,
        {@code false} on failure or if the directory already existed."
      end

      operation 215835 "mkdirs"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "resultIfExists" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 215963 "createNewFile"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, empty file on the file system according to the path
information stored in this file. This method returns true if it creates
a file, false if the file already existed. Note that it returns false
even if the file is not a file (because it's a directory, say).

<p>This method is not generally useful. For creating temporary files,
use {@link #createTempFile} instead. For reading/writing files, use {@link FileInputStream},
{@link FileOutputStream}, or {@link RandomAccessFile}, all of which can create files.

<p>Note that this method does <i>not</i> throw {@code IOException} if the file
already exists, even if it's not a regular file. Callers should always check the
return value, and may additionally want to call {@link #isFile}.

@return true if the file has been created, false if it
        already exists.
@throws IOException if it's not possible to create the file."
      end

      operation 216091 "createTempFile"
	class_operation public return_type class_ref 135579 // File
	nparams 2
	  param inout name "prefix" type class_ref 3399692 // String
	  param inout name "suffix" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty temporary file using the given prefix and suffix as part
of the file name. If {@code suffix} is null, {@code .tmp} is used. This
method is a convenience method that calls
{@link #createTempFile(String, String, File)} with the third argument
being {@code null}.

@param prefix
           the prefix to the temp file name.
@param suffix
           the suffix to the temp file name.
@return the temporary file.
@throws IOException
            if an error occurs when writing the file."
      end

      operation 216219 "createTempFile"
	class_operation public return_type class_ref 135579 // File
	nparams 3
	  param inout name "prefix" type class_ref 3399692 // String
	  param inout name "suffix" type class_ref 3399692 // String
	  param inout name "directory" type class_ref 135579 // File
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty temporary file in the given directory using the given
prefix and suffix as part of the file name. If {@code suffix} is null, {@code .tmp} is used.

<p>Note that this method does <i>not</i> call {@link #deleteOnExit}, but see the
documentation for that method before you call it manually.

@param prefix
           the prefix to the temp file name.
@param suffix
           the suffix to the temp file name.
@param directory
           the location to which the temp file is to be written, or
           {@code null} for the default location for temporary files,
           which is taken from the \"java.io.tmpdir\" system property. It
           may be necessary to set this property to an existing, writable
           directory for this method to work properly.
@return the temporary file.
@throws IllegalArgumentException
            if the length of {@code prefix} is less than 3.
@throws IOException
            if an error occurs when writing the file."
      end

      operation 216347 "renameTo"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "newPath" type class_ref 135579 // File
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Renames this file to {@code newPath}. This operation is supported for both
files and directories.

<p>Many failures are possible. Some of the more likely failures include:
<ul>
<li>Write permission is required on the directories containing both the source and
destination paths.
<li>Search permission is required for all parents of both paths.
<li>Both paths be on the same mount point. On Android, applications are most likely to hit
this restriction when attempting to copy between internal storage and an SD card.
</ul>

<p>Note that this method does <i>not</i> throw {@code IOException} on failure.
Callers must check the return value.

@param newPath the new path.
@return true on success."
      end

      operation 216475 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string containing a concise, human-readable description of this
file.

@return a printable representation of this file."
      end

      operation 216603 "toURI"
	public return_type class_ref 139931 // URI
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Uniform Resource Identifier for this file. The URI is system
dependent and may not be transferable between different operating / file
systems.

@return an URI for this file."
      end

      operation 216731 "toURL"
	public return_type class_ref 140443 // URL
	nparams 0
	nexceptions 1
	  exception class_ref 140571 // MalformedURLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns a Uniform Resource Locator for this file. The URL is system
dependent and may not be transferable between different operating / file
systems.

@return a URL for this file.
@throws java.net.MalformedURLException
            if the path cannot be transformed into a URL.
@deprecated use {@link #toURI} and {@link java.net.URI#toURL} to get
correct escaping of illegal characters."
      end

      operation 216859 "getAbsoluteName"
	private return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TODO: is this really necessary, or can it be replaced with getAbsolutePath?"
      end

      operation 216987 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 217115 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 217243 "getTotalSpace"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total size in bytes of the partition containing this path.
Returns 0 if this path does not exist.

@since 1.6"
      end

      operation 217371 "getUsableSpace"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of usable free bytes on the partition containing this path.
Returns 0 if this path does not exist.

<p>Note that this is likely to be an optimistic over-estimate and should not
be taken as a guarantee your application can actually write this many bytes.
On Android (and other Unix-based systems), this method returns the number of free bytes
available to non-root users, regardless of whether you're actually running as root,
and regardless of any quota or other restrictions that might apply to the user.
(The {@code getFreeSpace} method returns the number of bytes potentially available to root.)

@since 1.6"
      end

      operation 217499 "getFreeSpace"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of free bytes on the partition containing this path.
Returns 0 if this path does not exist.

<p>Note that this is likely to be an optimistic over-estimate and should not
be taken as a guarantee your application can actually write this many bytes.

@since 1.6"
      end
    end

    class 135707 "FileNotFoundException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a file specified by a program cannot be found."
      classrelation 153627 // <generalisation>
	relation 153627 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 153627 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 146203 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -897856973823710492L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 220059 "FileNotFoundException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileNotFoundException} with its stack trace
filled in."
      end

      operation 220187 "FileNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileNotFoundException} with its stack trace and
detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 135963 "DataInput"
      abstract visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Defines an interface for classes that are able to read big-endian typed data from some
source. Typically, this data has been written by a class which implements
{@link DataOutput}. Types that can be read include byte, 16-bit short, 32-bit
int, 32-bit float, 64-bit long, 64-bit double, byte strings, and MUTF-8
strings.

<h3>MUTF-8 (Modified UTF-8) Encoding</h3>
<p>
When encoding strings as UTF, implementations of {@code DataInput} and
{@code DataOutput} use a slightly modified form of UTF-8, hereafter referred
to as MUTF-8. This form is identical to standard UTF-8, except:
<ul>
<li>Only the one-, two-, and three-byte encodings are used.</li>
<li>Code points in the range <code>U+10000</code> &hellip;
<code>U+10ffff</code> are encoded as a surrogate pair, each of which is
represented as a three-byte encoded value.</li>
<li>The code point <code>U+0000</code> is encoded in two-byte form.</li>
</ul>
<p>
Please refer to <a href=\"http://unicode.org\">The Unicode Standard</a> for
further information about character encoding. MUTF-8 is actually closer to
the (relatively less well-known) encoding <a
href=\"http://www.unicode.org/reports/tr26/\">CESU-8</a> than to UTF-8 per se.

@see DataInputStream
@see RandomAccessFile"
      operation 171803 "readBoolean"
	abstract public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a boolean.

@return the next boolean value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeBoolean(boolean)"
      end

      operation 171931 "readByte"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an 8-bit byte value.

@return the next byte value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeByte(int)"
      end

      operation 172059 "readChar"
	abstract public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 16-bit character value.

@return the next char value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeChar(int)"
      end

      operation 172187 "readDouble"
	abstract public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 64-bit double value.

@return the next double value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeDouble(double)"
      end

      operation 172315 "readFloat"
	abstract public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 32-bit float value.

@return the next float value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeFloat(float)"
      end

      operation 172443 "readFully"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "dst" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code readFully(dst, 0, dst.length);}."
      end

      operation 172571 "readFully"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "dst" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads {@code byteCount} bytes from this stream and stores them in the byte
array {@code dst} starting at {@code offset}. If {@code byteCount} is zero, then this
method returns without reading any bytes. Otherwise, this method blocks until
{@code byteCount} bytes have been read. If insufficient bytes are available,
{@code EOFException} is thrown. If an I/O error occurs, {@code IOException} is
thrown. When an exception is thrown, some bytes may have been consumed from the stream
and written into the array.

@param dst
           the byte array into which the data is read.
@param offset
           the offset in {@code dst} at which to store the bytes.
@param byteCount
           the number of bytes to read.
@throws EOFException
            if the end of the source stream is reached before enough
            bytes have been read.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code byteCount < 0}, or
            {@code offset + byteCount > dst.length}.
@throws IOException
            if a problem occurs while reading from this stream.
@throws NullPointerException
            if {@code dst} is null."
      end

      operation 172699 "readInt"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 32-bit integer value.

@return the next int value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeInt(int)"
      end

      operation 172827 "readLine"
	abstract public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string containing the next line of text available from this
stream. A line is made of zero or more characters followed by {@code
'\\n'}, {@code '\\r'}, {@code \"\\r\\n\"} or the end of the stream. The string
does not include the newline sequence.

@return the contents of the line or null if no characters have been read
        before the end of the stream.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading."
      end

      operation 172955 "readLong"
	abstract public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 64-bit long value.

@return the next long value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeLong(long)"
      end

      operation 173083 "readShort"
	abstract public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 16-bit short value.

@return the next short value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeShort(int)"
      end

      operation 173211 "readUnsignedByte"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned 8-bit byte value and returns it as an int.

@return the next unsigned byte value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeByte(int)"
      end

      operation 173339 "readUnsignedShort"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 16-bit unsigned short value and returns it as an int.

@return the next unsigned short value.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeShort(int)"
      end

      operation 173467 "readUTF"
	abstract public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a string encoded with {@link DataInput modified UTF-8}.

@return the next string encoded with {@link DataInput modified UTF-8}.
@throws EOFException if the end of the input is reached before the read
        request can be satisfied.
@throws IOException
            if an I/O error occurs while reading.
@see DataOutput#writeUTF(java.lang.String)"
      end

      operation 173595 "skipBytes"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips {@code count} number of bytes. This method will not throw an
{@link EOFException} if the end of the input is reached before
{@code count} bytes where skipped.

@param count
           the number of bytes to skip.
@return the number of bytes actually skipped.
@throws IOException
            if a problem occurs during skipping."
      end
    end

    class 136091 "DataInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link InputStream} and reads big-endian typed data from it.
Typically, this stream has been written by a DataOutputStream. Types that can
be read include byte, 16-bit short, 32-bit int, 32-bit float, 64-bit long,
64-bit double, byte strings, and strings encoded in
{@link DataInput modified UTF-8}.

@see DataOutputStream"
      classrelation 145051 // <generalisation>
	relation 145051 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 145051 // <generalisation>
	  b parent class_ref 131739 // FilterInputStream
      end

      classrelation 145179 // <realization>
	relation 145179 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 145179 // <realization>
	  b parent class_ref 135963 // DataInput
      end

      attribute 139547 "scratch"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[8]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 173723 "DataInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new DataInputStream on the InputStream {@code in}. All
reads are then filtered through this stream. Note that data read by this
stream is not in a human readable format and was most likely created by a
DataOutputStream.

<p><strong>Warning:</strong> passing a null source creates an invalid
{@code DataInputStream}. All operations on such a stream will fail.

@param in
           the source InputStream the filter reads from.
@see DataOutputStream
@see RandomAccessFile"
      end

      operation 173851 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "buffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " overridden to add 'final'"
      end

      operation 173979 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code length} bytes from this stream and stores them in
the byte array {@code buffer} starting at {@code offset}. Returns the
number of bytes that have been read or -1 if no bytes have been read and
the end of the stream has been reached.

@param buffer
           the byte array in which to store the bytes read.
@param offset
           the initial position in {@code buffer} to store the bytes
           read from this stream.
@param length
           the maximum number of bytes to store in {@code buffer}.
@return the number of bytes that have been read or -1 if the end of the
        stream has been reached.
@throws IOException
            if a problem occurs while reading from this stream.
@see DataOutput#write(byte[])
@see DataOutput#write(byte[], int, int)"
      end

      operation 174107 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 174235 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 174363 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 174491 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 174619 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 174747 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dst" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 174875 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "dst" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 175003 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 175131 "readLine"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
      end

      operation 175259 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 175387 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 175515 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 175643 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 175771 "readUTF"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 175899 "decodeUTF"
	package return_type class_ref 3399692 // String
	nparams 1
	  param in name "utfSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 176027 "decodeUTF"
	class_operation private return_type class_ref 3399692 // String
	nparams 2
	  param in name "utfSize" explicit_type "int"
	  param inout name "in" type class_ref 135963 // DataInput
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 176155 "readUTF"
	class_operation public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "in" type class_ref 135963 // DataInput
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 176283 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips {@code count} number of bytes in this stream. Subsequent {@code
read()}s will not return these bytes unless {@code reset()} is used.

This method will not throw an {@link EOFException} if the end of the
input is reached before {@code count} bytes where skipped.

@param count
           the number of bytes to skip.
@return the number of bytes actually skipped.
@throws IOException
            if a problem occurs during skipping.
@see #mark(int)
@see #reset()"
      end
    end

    class 136219 "DataOutput"
      abstract visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Defines an interface for classes that are able to write big-endian typed data to some
target. Typically, this data can be read in by a class which implements
DataInput. Types that can be written include byte, 16-bit short, 32-bit int,
32-bit float, 64-bit long, 64-bit double, byte strings, and {@link DataInput
MUTF-8} encoded strings.

@see DataOutputStream
@see RandomAccessFile"
      operation 176411 "write"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the entire contents of the byte array {@code buffer} to this
stream.

@param buffer
           the buffer to write.
@throws IOException
            if an I/O error occurs while writing."
      end

      operation 176539 "write"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes {@code count} bytes from the byte array {@code buffer} starting at
offset {@code index}.

@param buffer
           the buffer to write.
@param offset
           the index of the first byte in {@code buffer} to write.
@param count
           the number of bytes from the {@code buffer} to write.
@throws IOException
            if an I/O error occurs while writing."
      end

      operation 176667 "write"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified 8-bit byte.

@param oneByte
           the byte to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readByte()"
      end

      operation 176795 "writeBoolean"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified boolean.

@param val
           the boolean value to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readBoolean()"
      end

      operation 176923 "writeByte"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified 8-bit byte.

@param val
           the byte value to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readByte()
@see DataInput#readUnsignedByte()"
      end

      operation 177051 "writeBytes"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the low order 8-bit bytes from the specified string.

@param str
           the string containing the bytes to write.
@throws IOException
            if an I/O error occurs while writing."
      end

      operation 177179 "writeChar"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified 16-bit character in big-endian order. Only the two least significant
bytes of the integer {@code oneByte} are written.

@param val
           the character to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readChar()"
      end

      operation 177307 "writeChars"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the 16-bit characters contained in {@code str} in big-endian order.

@param str
           the string that contains the characters to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readChar()"
      end

      operation 177435 "writeDouble"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified 64-bit double in big-endian order. The resulting output is the eight
bytes returned by {@link Double#doubleToLongBits(double)}.

@param val
           the double to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readDouble()"
      end

      operation 177563 "writeFloat"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "float"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified 32-bit float in big-endian order. The resulting output is the four bytes
returned by {@link Float#floatToIntBits(float)}.

@param val
           the float to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readFloat()"
      end

      operation 177691 "writeInt"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified 32-bit int in big-endian order.

@param val
           the int to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readInt()"
      end

      operation 177819 "writeLong"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified 64-bit long in big-endian order.

@param val
           the long to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readLong()"
      end

      operation 177947 "writeShort"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified 16-bit short in big-endian order. Only the lower two bytes of {@code
val} are written.

@param val
           the short to write.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readShort()
@see DataInput#readUnsignedShort()"
      end

      operation 178075 "writeUTF"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified string encoded in {@link DataInput modified UTF-8}.

@param str
           the string to write encoded in {@link DataInput modified UTF-8}.
@throws IOException
            if an I/O error occurs while writing.
@see DataInput#readUTF()"
      end
    end

    class 136347 "DataOutputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link OutputStream} and writes big-endian typed data to it.
Typically, this stream can be read in by DataInputStream. Types that can be
written include byte, 16-bit short, 32-bit int, 32-bit float, 64-bit long,
64-bit double, byte strings, and {@link DataInput MUTF-8} encoded strings.

@see DataInputStream"
      classrelation 145307 // <generalisation>
	relation 145307 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 145307 // <generalisation>
	  b parent class_ref 132507 // FilterOutputStream
      end

      classrelation 145435 // <realization>
	relation 145435 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 145435 // <realization>
	  b parent class_ref 136219 // DataOutput
      end

      attribute 139675 "scratch"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[8]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 139803 "written"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bytes written out so far.
"
      end

      operation 178203 "DataOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code DataOutputStream} on the {@code OutputStream}
{@code out}. Note that data written by this stream is not in a human
readable form but can be reconstructed by using a {@link DataInputStream}
on the resulting output.

@param out
           the target stream for writing."
      end

      operation 178331 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flushes this stream to ensure all pending data is sent out to the target
stream. This implementation then also flushes the target stream.

@throws IOException
            if an error occurs attempting to flush this stream."
      end

      operation 178459 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total number of bytes written to the target stream so far.

@return the number of bytes written to the target stream."
      end

      operation 178587 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} bytes from the byte array {@code buffer} starting at
{@code offset} to the target stream.

@param buffer
           the buffer to write to the target stream.
@param offset
           the index of the first byte in {@code buffer} to write.
@param count
           the number of bytes from the {@code buffer} to write.
@throws IOException
            if an error occurs while writing to the target stream.
@throws NullPointerException
            if {@code buffer} is {@code null}."
      end

      operation 178715 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes a byte to the target stream. Only the least significant byte of
the integer {@code oneByte} is written.

@param oneByte
           the byte to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream.
@see DataInputStream#readByte()"
      end

      operation 178843 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a boolean to the target stream.

@param val
           the boolean value to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream.
@see DataInputStream#readBoolean()"
      end

      operation 178971 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an 8-bit byte to the target stream. Only the least significant
byte of the integer {@code val} is written.

@param val
           the byte value to write to the target stream.
@throws IOException
            if an error occurs while writing to the target stream.
@see DataInputStream#readByte()
@see DataInputStream#readUnsignedByte()"
      end

      operation 179099 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 179227 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 179355 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 179483 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 179611 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "float"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 179739 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 179867 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 179995 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 180123 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 136475 "EmulatedFields"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An EmulatedFields is an object that represents a set of emulated fields for
an object being dumped or loaded. It allows objects to be dumped with a shape
different than the fields they were declared to have.

@see ObjectInputStream.GetField
@see ObjectOutputStream.PutField
@see EmulatedFieldsForLoading
@see EmulatedFieldsForDumping"
      class 136603 "ObjectSlot"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 145563 // field (<unidirectional association>)
	  relation 145563 --->
	    a role_name "field" package
	      comment " Field descriptor
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 145563 // field (<unidirectional association>)
	    b parent class_ref 131355 // ObjectStreamField
	end

	classrelation 145691 // fieldValue (<unidirectional association>)
	  relation 145691 --->
	    a role_name "fieldValue" package
	      comment " Actual value this emulated field holds
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 145691 // fieldValue (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	attribute 139931 "defaulted"
	  package explicit_type "boolean"
	  init_value " true"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " If this field has a default value (true) or something has been
 assigned (false)"
	end

	operation 180251 "getField"
	  public return_type class_ref 131355 // ObjectStreamField
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the descriptor for this emulated field.

@return the field descriptor"
	end

	operation 180379 "getFieldValue"
	  public return_type class_ref 3401484 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the value held by this emulated field.

@return the field value"
	end
      end

      classrelation 145819 // slotsToSerialize (<unidirectional association>)
	relation 145819 --->
	  a role_name "slotsToSerialize" multiplicity "[]" private
	    comment " The collection of slots the receiver represents
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 145819 // slotsToSerialize (<unidirectional association>)
	  b parent class_ref 136603 // ObjectSlot
      end

      classrelation 145947 // declaredFields (<unidirectional association>)
	relation 145947 --->
	  a role_name "declaredFields" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 145947 // declaredFields (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      operation 180507 "EmulatedFields"
	public explicit_return_type ""
	nparams 2
	  param inout name "fields" type class_ref 131355 // ObjectStreamField
	  param inout name "declared" type class_ref 131355 // ObjectStreamField
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of EmulatedFields.

@param fields
           an array of ObjectStreamFields, which describe the fields to
           be emulated (names, types, etc).
@param declared
           an array of ObjectStreamFields, which describe the declared
           fields."
      end

      operation 180635 "buildSlots"
	private explicit_return_type "void"
	nparams 1
	  param inout name "fields" type class_ref 131355 // ObjectStreamField
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Build emulated slots that correspond to emulated fields. A slot is a
field descriptor (ObjectStreamField) plus the actual value it holds.

@param fields
           an array of ObjectStreamField, which describe the fields to be
           emulated (names, types, etc)."
      end

      operation 180763 "defaulted"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} indicating the field called {@code name} has not had
a value explicitly assigned and that it still holds a default value for
its type, or {@code false} indicating that the field named has been
assigned a value explicitly.

@param name
           the name of the field to test.
@return {@code true} if {@code name} still holds its default value,
        {@code false} otherwise

@throws IllegalArgumentException
            if {@code name} is {@code null}"
      end

      operation 180891 "findSlot"
	private return_type class_ref 136603 // ObjectSlot
	nparams 2
	  param inout name "fieldName" type class_ref 3399692 // String
	  param inout name "fieldType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns an ObjectSlot that corresponds to a field named {@code
fieldName} and type {@code fieldType}. If the field type {@code
fieldType} corresponds to a primitive type, the field type has to match
exactly or {@code null} is returned. If the field type {@code fieldType}
corresponds to an object type, the field type has to be compatible in
terms of assignment, or null is returned. If {@code fieldType} is {@code
null}, no such compatibility checking is performed and the slot is
returned.

@param fieldName
           the name of the field to find
@param fieldType
           the type of the field. This will be used to test
           compatibility. If {@code null}, no testing is done, the
           corresponding slot is returned.
@return the object slot, or {@code null} if there is no field with that
        name, or no compatible field (relative to {@code fieldType})"
      end

      operation 181019 "findMandatorySlot"
	private return_type class_ref 136603 // ObjectSlot
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "type" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 181147 "get"
	public explicit_return_type "byte"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the byte value of a given field named {@code name}
in the receiver. If the field has not been assigned any value yet, the
default value {@code defaultValue} is returned instead.

@param name
           the name of the field to find.
@param defaultValue
           return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, the default
        value otherwise.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 181275 "get"
	public explicit_return_type "char"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "char"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the char value of a given field named {@code name} in the
receiver. If the field has not been assigned any value yet, the default
value {@code defaultValue} is returned instead.

@param name
           the name of the field to find.
@param defaultValue
           return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, the default
        value otherwise.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 181403 "get"
	public explicit_return_type "double"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "double"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the double value of a given field named {@code name}
in the receiver. If the field has not been assigned any value yet, the
default value {@code defaultValue} is returned instead.

@param name
           the name of the field to find.
@param defaultValue
           return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, the default
        value otherwise.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 181531 "get"
	public explicit_return_type "float"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "float"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the float value of a given field named {@code name} in
the receiver. If the field has not been assigned any value yet, the
default value {@code defaultValue} is returned instead.

@param name
           the name of the field to find.
@param defaultValue
           return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, the default
        value otherwise.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 181659 "get"
	public explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "int"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the int value of a given field named {@code name} in the
receiver. If the field has not been assigned any value yet, the default
value {@code defaultValue} is returned instead.

@param name
           the name of the field to find.
@param defaultValue
           return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, the default
        value otherwise.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 181787 "get"
	public explicit_return_type "long"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "long"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the long value of a given field named {@code name} in the
receiver. If the field has not been assigned any value yet, the default
value {@code defaultValue} is returned instead.

@param name
           the name of the field to find.
@param defaultValue
           return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, the default
        value otherwise.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 181915 "get"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "defaultValue" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the Object value of a given field named {@code name} in
the receiver. If the field has not been assigned any value yet, the
default value {@code defaultValue} is returned instead.

@param name
           the name of the field to find.
@param defaultValue
           return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, the default
        value otherwise.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 182043 "get"
	public explicit_return_type "short"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "short"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the short value of a given field named {@code name} in
the receiver. If the field has not been assigned any value yet, the
default value {@code defaultValue} is returned instead.

@param name
           the name of the field to find.
@param defaultValue
           return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, the default
        value otherwise.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 182171 "get"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "defaultValue" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the boolean value of a given field named {@code name} in
the receiver. If the field has not been assigned any value yet, the
default value {@code defaultValue} is returned instead.

@param name
           the name of the field to find.
@param defaultValue
           return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, the default
        value otherwise.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 182299 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find and set the byte value of a given field named {@code name} in the
receiver.

@param name
           the name of the field to set.
@param value
           new value for the field.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 182427 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "char"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find and set the char value of a given field named {@code name} in the
receiver.

@param name
           the name of the field to set.
@param value
           new value for the field.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 182555 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "double"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find and set the double value of a given field named {@code name} in the
receiver.

@param name
           the name of the field to set.
@param value
           new value for the field.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 182683 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "float"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find and set the float value of a given field named {@code name} in the
receiver.

@param name
           the name of the field to set.
@param value
           new value for the field.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 182811 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find and set the int value of a given field named {@code name} in the
receiver.

@param name
           the name of the field to set.
@param value
           new value for the field.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 182939 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "long"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find and set the long value of a given field named {@code name} in the
receiver.

@param name
           the name of the field to set.
@param value
           new value for the field.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 183067 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find and set the Object value of a given field named {@code name} in the
receiver.

@param name
           the name of the field to set.
@param value
           new value for the field.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 183195 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "short"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find and set the short value of a given field named {@code name} in the
receiver.

@param name
           the name of the field to set.
@param value
           new value for the field.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 183323 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find and set the boolean value of a given field named {@code name} in the
receiver.

@param name
           the name of the field to set.
@param value
           new value for the field.

@throws IllegalArgumentException
            if the corresponding field can not be found."
      end

      operation 183451 "slots"
	public return_type class_ref 136603 // ObjectSlot
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the array of ObjectSlot the receiver represents.

@return array of ObjectSlot the receiver represents."
      end
    end

    class 136731 "EmulatedFieldsForDumping"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An EmulatedFieldsForDumping is an object that represents a set of emulated
fields for an object being dumped. It is a concrete implementation for
ObjectOutputStream.PutField


@see ObjectOutputStream.PutField
@see EmulatedFieldsForLoading"
      classrelation 148251 // <generalisation>
	relation 148251 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 148251 // <generalisation>
	  b parent class_ref 136859 // PutField
      end

      classrelation 148379 // oos (<unidirectional association>)
	relation 148379 --->
	  a role_name "oos" const_relation private
	    comment " Record the ObjectOutputStream that created this PutField for checking in 'write'.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 148379 // oos (<unidirectional association>)
	  b parent class_ref 128411 // ObjectOutputStream
      end

      classrelation 148507 // emulatedFields (<unidirectional association>)
	relation 148507 --->
	  a role_name "emulatedFields" private
	    comment " The actual representation, with a more powerful API (set&get)
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 148507 // emulatedFields (<unidirectional association>)
	  b parent class_ref 136475 // EmulatedFields
      end

      operation 193051 "EmulatedFieldsForDumping"
	package explicit_return_type ""
	nparams 2
	  param inout name "oos" type class_ref 128411 // ObjectOutputStream
	  param inout name "streamClass" type class_ref 137499 // ObjectStreamClass
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of EmulatedFieldsForDumping.

@param streamClass
           a ObjectStreamClass, which describe the fields to be emulated
           (names, types, etc)."
      end

      operation 193179 "emulatedFields"
	package return_type class_ref 136475 // EmulatedFields
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the actual EmulatedFields instance used by the receiver. We have
the actual work in a separate class so that the code can be shared. The
receiver has to be of a subclass of PutField.

@return array of ObjectSlot the receiver represents."
      end

      operation 193307 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and set the byte value of a given field named <code>name</code> in
the receiver.

@param name
           A String, the name of the field to set
@param value
           New value for the field."
      end

      operation 193435 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and set the char value of a given field named <code>name</code> in
the receiver.

@param name
           A String, the name of the field to set
@param value
           New value for the field."
      end

      operation 193563 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and set the double value of a given field named <code>name</code>
in the receiver.

@param name
           A String, the name of the field to set
@param value
           New value for the field."
      end

      operation 193691 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and set the float value of a given field named <code>name</code>
in the receiver.

@param name
           A String, the name of the field to set
@param value
           New value for the field."
      end

      operation 193819 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and set the int value of a given field named <code>name</code> in
the receiver.

@param name
           A String, the name of the field to set
@param value
           New value for the field."
      end

      operation 193947 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and set the long value of a given field named <code>name</code> in
the receiver.

@param name
           A String, the name of the field to set
@param value
           New value for the field."
      end

      operation 194075 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and set the Object value of a given field named <code>name</code>
in the receiver.

@param name
           A String, the name of the field to set
@param value
           New value for the field."
      end

      operation 194203 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "value" explicit_type "short"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and set the short value of a given field named <code>name</code>
in the receiver.

@param name
           A String, the name of the field to set
@param value
           New value for the field."
      end

      operation 194331 "put"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and set the boolean value of a given field named <code>name</code>
in the receiver.

@param name
           A String, the name of the field to set
@param value
           New value for the field."
      end

      operation 194459 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "output" type class_ref 136987 // ObjectOutput
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
    @Deprecated
"
	
	
	
	comment "Write the field values to the specified ObjectOutput.

@param output
           the ObjectOutput

@throws IOException
            If an IO exception happened when writing the field values."
      end
    end

    class 136987 "ObjectOutput"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Defines an interface for classes that allow reading serialized objects.

@see ObjectOutputStream
@see ObjectInput"
      classrelation 146203 // <generalisation>
	relation 146203 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 146203 // <generalisation>
	  b parent class_ref 136219 // DataOutput
      end

      classrelation 146331 // <generalisation>
	relation 146331 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 146331 // <generalisation>
	  b parent class_ref 132123 // AutoCloseable
      end

      operation 183579 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the target stream. Implementations of this method should free any
resources used by the stream.

@throws IOException
            if an error occurs while closing the target stream."
      end

      operation 183707 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes the target stream. Implementations of this method should ensure
that any pending writes are written out to the target stream.

@throws IOException
            if an error occurs while flushing the target stream."
      end

      operation 183835 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the entire contents of the byte array {@code buffer} to the output
stream. Blocks until all bytes are written.

@param buffer
           the buffer to write.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 183963 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes {@code count} bytes from the byte array {@code buffer} starting at
position {@code offset} to the target stream. Blocks until all bytes are
written.

@param buffer
           the buffer to write.
@param offset
           the index of the first byte in {@code buffer} to write.
@param count
           the number of bytes from {@code buffer} to write to the target
           stream.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 184091 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a single byte to the target stream. Only the least significant
byte of the integer {@code value} is written to the stream. Blocks until
the byte is actually written.

@param value
           the byte to write.
@throws IOException
            if an error occurs while writing to the target stream."
      end

      operation 184219 "writeObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the specified object {@code obj} to the target stream.

@param obj
           the object to write.
@throws IOException
            if an error occurs while writing to the target stream."
      end
    end

    class 137115 "ObjectStreamConstants"
      abstract visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A helper interface with constants used by the serialization implementation."
      attribute 140059 "STREAM_MAGIC"
	class_attribute const_attribute public explicit_type "short"
	init_value " (short) 0xaced"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The stream header's magic number.
"
      end

      attribute 140187 "STREAM_VERSION"
	class_attribute const_attribute public explicit_type "short"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The stream header's version number.
"
      end

      attribute 140315 "TC_BASE"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x70"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " These are tags to indicate the stream contents

The minimum tag value.
"
      end

      attribute 140443 "TC_NULL"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x70"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a {@code null} object reference.
"
      end

      attribute 140571 "TC_REFERENCE"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x71"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a reference to an object that has already been written to the
stream.
"
      end

      attribute 140699 "TC_CLASSDESC"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x72"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a new class descriptor.
"
      end

      attribute 140827 "TC_OBJECT"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x73"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a new object.
"
      end

      attribute 140955 "TC_STRING"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x74"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a new string.
"
      end

      attribute 141083 "TC_ARRAY"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x75"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a new array.
"
      end

      attribute 141211 "TC_CLASS"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x76"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a reference to a class.
"
      end

      attribute 141339 "TC_BLOCKDATA"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x77"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a block of optional data. The byte following this tag
indicates the size of the block.
"
      end

      attribute 141467 "TC_ENDBLOCKDATA"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x78"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark the end of block data blocks for an object.
"
      end

      attribute 141595 "TC_RESET"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x79"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a stream reset.
"
      end

      attribute 141723 "TC_BLOCKDATALONG"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x7A"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a long block of data. The long following this tag
indicates the size of the block.
"
      end

      attribute 141851 "TC_EXCEPTION"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x7B"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark an exception.
"
      end

      attribute 141979 "TC_LONGSTRING"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x7C"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a long string.
"
      end

      attribute 142107 "TC_PROXYCLASSDESC"
	class_attribute const_attribute public explicit_type "byte"
	init_value " (byte) 0x7D"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a new proxy class descriptor.
"
      end

      attribute 142235 "TC_MAX"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x7E"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum tag value.
"
      end

      attribute 142363 "baseWireHandle"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x007e0000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Handle for the first object that gets serialized.
"
      end

      attribute 142491 "PROTOCOL_VERSION_1"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Stream protocol version 1.
"
      end

      attribute 142619 "PROTOCOL_VERSION_2"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Stream protocol version 2.
"
      end

      classrelation 146587 // SUBCLASS_IMPLEMENTATION_PERMISSION (<unidirectional association>)
	relation 146587 --->
	  a role_name "SUBCLASS_IMPLEMENTATION_PERMISSION" init_value " new SerializablePermission(
            \"enableSubclassImplementation\")" class_relation const_relation public
	    comment "
Permission constant to enable subclassing of ObjectInputStream and
ObjectOutputStream.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 146587 // SUBCLASS_IMPLEMENTATION_PERMISSION (<unidirectional association>)
	  b parent class_ref 137243 // SerializablePermission
      end

      classrelation 146715 // SUBSTITUTION_PERMISSION (<unidirectional association>)
	relation 146715 --->
	  a role_name "SUBSTITUTION_PERMISSION" init_value " new SerializablePermission(
            \"enableSubstitution\")" class_relation const_relation public
	    comment "
Permission constant to enable object substitution during serialization
and deserialization.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 146715 // SUBSTITUTION_PERMISSION (<unidirectional association>)
	  b parent class_ref 137243 // SerializablePermission
      end

      attribute 142747 "SC_WRITE_METHOD"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x01"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Flags that indicate if the object was serializable, externalizable
 and had a writeObject method when dumped.

Bit mask for the {@code flag} field in ObjectStreamClass. Indicates
that a serializable class has its own {@code writeObject} method.

 If SC_SERIALIZABLE"
      end

      attribute 142875 "SC_SERIALIZABLE"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x02"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for the {@code flag} field in ObjectStreamClass. Indicates
that a class is serializable.
"
      end

      attribute 143003 "SC_EXTERNALIZABLE"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x04"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for the {@code flag} field in ObjectStreamClass. Indicates
that a class is externalizable.
"
      end

      attribute 143131 "SC_BLOCK_DATA"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x08"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for the {@code flag} field in ObjectStreamClass. Indicates
that an externalizable class is written in block data mode.

 If SC_EXTERNALIZABLE"
      end

      attribute 143259 "TC_ENUM"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x7E"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag to mark a new enum.
"
      end

      attribute 143387 "SC_ENUM"
	class_attribute const_attribute public explicit_type "byte"
	init_value " 0x10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for the {@code flag} field in ObjectStreamClass. Indicates
that a class is an enum type.
"
      end
    end

    class 137243 "SerializablePermission"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Legacy security code; do not use."
      classrelation 165787 // <generalisation>
	relation 165787 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 165787 // <generalisation>
	  b parent class_ref 146075 // BasicPermission
      end

      operation 265755 "SerializablePermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "permissionName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 265883 "SerializablePermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "actions" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 266011 "getActions"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 266139 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 141467 // Permission
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 137371 "SerializationHandleMap"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialization of IdentityHashMap<Object, int> for use when serializing objects.
We need to assign each object we write an int 'handle' (densely packed but not starting
at zero), and use the same handle any time we write the same object again."
      attribute 154395 "LOAD_FACTOR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 7500"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Default load factor of 0.75; "
      end

      classrelation 165915 // keys (<unidirectional association>)
	relation 165915 --->
	  a role_name "keys" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 165915 // keys (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      attribute 154523 "values"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 154651 "size"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actual number of key-value pairs. "
      end

      attribute 154779 "threshold"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Maximum number of elements that can be put in this map before having to rehash. "
      end

      operation 266267 "SerializationHandleMap"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 266395 "resizeArrays"
	private explicit_return_type "void"
	nparams 1
	  param in name "newSize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 266523 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "key" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 266651 "findIndex"
	private explicit_return_type "int"
	nparams 2
	  param inout name "key" type class_ref 3401484 // Object
	  param inout name "array" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index where the key is found at, or the index of the next
empty spot if the key is not found in this table."
      end

      operation 266779 "getModuloHash"
	private explicit_return_type "int"
	nparams 2
	  param inout name "key" type class_ref 3401484 // Object
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 266907 "put"
	public explicit_return_type "int"
	nparams 2
	  param inout name "key" type class_ref 3401484 // Object
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 267035 "rehash"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 267163 "remove"
	public explicit_return_type "int"
	nparams 1
	  param inout name "key" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 267291 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 137499 "ObjectStreamClass"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents a descriptor for identifying a class during serialization and
deserialization. Information contained in the descriptor includes the name
and SUID of the class as well as field names and types. Information inherited
from the superclasses is also taken into account.

@see ObjectOutputStream
@see ObjectInputStream
@see java.lang.Class"
      classrelation 158235 // <realization>
	relation 158235 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 158235 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 148891 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6120832682080437368L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " No need to compute the SUID for ObjectStreamClass, just use the value
 below"
      end

      classrelation 158363 // UID_FIELD_NAME (<unidirectional association>)
	relation 158363 --->
	  a role_name "UID_FIELD_NAME" init_value " \"serialVersionUID\"" class_relation const_relation private
	    comment " Name of the field that contains the SUID value (if present)
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 158363 // UID_FIELD_NAME (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 149019 "CONSTRUCTOR_IS_NOT_RESOLVED"
	class_attribute const_attribute package explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 149147 "CLASS_MODIFIERS_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " Modifier.PUBLIC | Modifier.FINAL |
            Modifier.INTERFACE | Modifier.ABSTRACT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 149275 "FIELD_MODIFIERS_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " Modifier.PUBLIC | Modifier.PRIVATE |
            Modifier.PROTECTED | Modifier.STATIC | Modifier.FINAL | Modifier.VOLATILE |
            Modifier.TRANSIENT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 149403 "METHOD_MODIFIERS_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " Modifier.PUBLIC | Modifier.PRIVATE |
            Modifier.PROTECTED | Modifier.STATIC | Modifier.FINAL | Modifier.SYNCHRONIZED |
            Modifier.NATIVE | Modifier.ABSTRACT | Modifier.STRICT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 158491 // READ_PARAM_TYPES (<unidirectional association>)
	relation 158491 --->
	  a role_name "READ_PARAM_TYPES" multiplicity "[]" init_value " new Class[] { ObjectInputStream.class }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 158491 // READ_PARAM_TYPES (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 158619 // WRITE_PARAM_TYPES (<unidirectional association>)
	relation 158619 --->
	  a role_name "WRITE_PARAM_TYPES" multiplicity "[]" init_value " new Class[] { ObjectOutputStream.class }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 158619 // WRITE_PARAM_TYPES (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 158747 // NO_FIELDS (<unidirectional association>)
	relation 158747 --->
	  a role_name "NO_FIELDS" multiplicity "[]" init_value " new ObjectStreamField[0]" class_relation const_relation public
	    comment "
Constant indicating that the class has no Serializable fields.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 158747 // NO_FIELDS (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      classrelation 158875 // ARRAY_OF_FIELDS (<unidirectional association>)
	relation 158875 --->
	  a role_name "ARRAY_OF_FIELDS" class_relation const_relation package
	    comment "
used to fetch field serialPersistentFields and checking its type

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 158875 // ARRAY_OF_FIELDS (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      extra_member 128539 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            ARRAY_OF_FIELDS = Class.forName(\"[Ljava.io.ObjectStreamField;\");
        } catch (ClassNotFoundException e) {
            // This should not happen
            throw new AssertionError(e);
        }
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 159003 // CLINIT_NAME (<unidirectional association>)
	relation 159003 --->
	  a role_name "CLINIT_NAME" init_value " \"<clinit>\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 159003 // CLINIT_NAME (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 149531 "CLINIT_MODIFIERS"
	class_attribute const_attribute private explicit_type "int"
	init_value " Modifier.STATIC"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 159131 // CLINIT_SIGNATURE (<unidirectional association>)
	relation 159131 --->
	  a role_name "CLINIT_SIGNATURE" init_value " \"()V\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 159131 // CLINIT_SIGNATURE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 159259 // SERIALIZABLE (<unidirectional association>)
	relation 159259 --->
	  a role_name "SERIALIZABLE" init_value " Serializable.class" class_relation const_relation private
	    comment " Used to determine if an object is Serializable or Externalizable
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Serializable> ${name}${value};
"
	    classrelation_ref 159259 // SERIALIZABLE (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 159387 // EXTERNALIZABLE (<unidirectional association>)
	relation 159387 --->
	  a role_name "EXTERNALIZABLE" init_value " Externalizable.class" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Externalizable> ${name}${value};
"
	    classrelation_ref 159387 // EXTERNALIZABLE (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 159515 // STRINGCLASS (<unidirectional association>)
	relation 159515 --->
	  a role_name "STRINGCLASS" init_value " String.class" class_relation const_relation package
	    comment " Used to test if the object is a String or a class.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 159515 // STRINGCLASS (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 159643 // CLASSCLASS (<unidirectional association>)
	relation 159643 --->
	  a role_name "CLASSCLASS" init_value " Class.class" class_relation const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 159643 // CLASSCLASS (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 159771 // OBJECTSTREAMCLASSCLASS (<unidirectional association>)
	relation 159771 --->
	  a role_name "OBJECTSTREAMCLASSCLASS" init_value " ObjectStreamClass.class" class_relation const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectStreamClass> ${name}${value};
"
	    classrelation_ref 159771 // OBJECTSTREAMCLASSCLASS (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 159899 // methodWriteReplace (<unidirectional association>)
	relation 159899 --->
	  a role_name "methodWriteReplace" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 159899 // methodWriteReplace (<unidirectional association>)
	  b parent class_ref 144155 // Method
      end

      classrelation 160027 // methodReadResolve (<unidirectional association>)
	relation 160027 --->
	  a role_name "methodReadResolve" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 160027 // methodReadResolve (<unidirectional association>)
	  b parent class_ref 144155 // Method
      end

      classrelation 160155 // methodWriteObject (<unidirectional association>)
	relation 160155 --->
	  a role_name "methodWriteObject" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 160155 // methodWriteObject (<unidirectional association>)
	  b parent class_ref 144155 // Method
      end

      classrelation 160283 // methodReadObject (<unidirectional association>)
	relation 160283 --->
	  a role_name "methodReadObject" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 160283 // methodReadObject (<unidirectional association>)
	  b parent class_ref 144155 // Method
      end

      classrelation 160411 // methodReadObjectNoData (<unidirectional association>)
	relation 160411 --->
	  a role_name "methodReadObjectNoData" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 160411 // methodReadObjectNoData (<unidirectional association>)
	  b parent class_ref 144155 // Method
      end

      attribute 149659 "arePropertiesResolved"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates whether the class properties resolved

@see #resolveProperties()
"
      end

      attribute 149787 "isSerializable"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Cached class properties

@see #resolveProperties()
@see #isSerializable()
@see #isExternalizable()
@see #isProxy()
@see #isEnum()
"
      end

      attribute 149915 "isExternalizable"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 150043 "isProxy"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 150171 "isEnum"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 160539 // className (<unidirectional association>)
	relation 160539 --->
	  a role_name "className" private
	    comment " ClassDesc //
 Name of the class this descriptor represents
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 160539 // className (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 160667 // resolvedClass (<unidirectional association>)
	relation 160667 --->
	  a role_name "resolvedClass" private
	    comment " Corresponding loaded class with the name above
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 160667 // resolvedClass (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 160795 // resolvedConstructorClass (<unidirectional association>)
	relation 160795 --->
	  a role_name "resolvedConstructorClass" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 160795 // resolvedConstructorClass (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      attribute 150299 "resolvedConstructorMethodId"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 150427 "svUID"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serial version UID of the class the descriptor represents"
      end

      attribute 150555 "flags"
	private explicit_type "byte"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ClassDescInfo //
 Any combination of SC_WRITE_METHOD, SC_SERIALIZABLE and SC_EXTERNALIZABLE
 (see ObjectStreamConstants)"
      end

      classrelation 160923 // superclass (<unidirectional association>)
	relation 160923 --->
	  a role_name "superclass" private
	    comment " Descriptor for the superclass of the class associated with this
 descriptor
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 160923 // superclass (<unidirectional association>)
	  b parent class_ref 137499 // ObjectStreamClass
      end

      classrelation 161051 // fields (<unidirectional association>)
	relation 161051 --->
	  a role_name "fields" multiplicity "[]" private
	    comment " Array of ObjectStreamField (see below) describing the fields of this
 class
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 161051 // fields (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      classrelation 161179 // loadFields (<unidirectional association>)
	relation 161179 --->
	  a role_name "loadFields" multiplicity "[]" private
	    comment " Array of ObjectStreamField describing the serialized fields of this class
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 161179 // loadFields (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      classrelation 161307 // reflectionFields (<unidirectional association>)
	relation 161307 --->
	  a role_name "reflectionFields" init_value "
            new HashMap<ObjectStreamField, Field>()" private
	    comment " ObjectStreamField doesn't override hashCode or equals, so this is equivalent to an
 IdentityHashMap, which is fine for our purposes.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectStreamField, Field> ${name}${value};
"
	    classrelation_ref 161307 // reflectionFields (<unidirectional association>)
	  b parent class_ref 138651 // HashMap
      end

      attribute 150683 "constructor"
	private explicit_type "long"
	init_value " CONSTRUCTOR_IS_NOT_RESOLVED"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " MethodID for deserialization constructor"
      end

      operation 234139 "setConstructor"
	package explicit_return_type "void"
	nparams 1
	  param in name "newConstructor" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 234267 "getConstructor"
	package explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 234395 "getReflectionField"
	package return_type class_ref 144283 // Field
	nparams 1
	  param inout name "osf" type class_ref 131355 // ObjectStreamField
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 234523 "ObjectStreamClass"
	package explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If an ObjectStreamClass describes an Externalizable class, it (the
descriptor) should not have field descriptors (ObjectStreamField) at all.
The ObjectStreamClass that gets saved should simply have no field info.
This is a footnote in page 1511 (class Serializable) of \"The Java Class
Libraries, Second Edition, Vol. I\".


Constructs a new instance of this class."
      end

      operation 234651 "createClassDesc"
	class_operation private return_type class_ref 137499 // ObjectStreamClass
	nparams 1
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute class descriptor for a given class <code>cl</code>.

@param cl
           a java.langClass for which to compute the corresponding
           descriptor
@return the computer class descriptor"
      end

      operation 234779 "buildFieldDescriptors"
	package explicit_return_type "void"
	nparams 1
	  param inout name "declaredFields" type class_ref 144283 // Field
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Builds the collection of field descriptors for the receiver

@param declaredFields
           collection of java.lang.reflect.Field for which to compute
           field descriptors"
      end

      operation 234907 "computeSerialVersionUID"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "cl" type class_ref 3421708 // Class
	  param inout name "fields" type class_ref 144283 // Field
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute and return the Serial Version UID of the class {@code cl}.
The value is computed based on the class name, superclass chain, field
names, method names, modifiers, etc.

@param cl
           a java.lang.Class for which to compute the SUID
@param fields
           cl.getDeclaredFields(), pre-computed by the caller
@return the value of SUID of this class"
      end

      operation 235035 "descriptorForFieldSignature"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "signature" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns what the serialization specification calls \"descriptor\" given a
field signature.

@param signature
           a field signature
@return containing the descriptor"
      end

      operation 235163 "descriptorForSignature"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "signature" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return what the serialization specification calls \"descriptor\" given a
method/constructor signature.

@param signature
           a method or constructor signature
@return containing the descriptor"
      end

      operation 235291 "fieldSerialPersistentFields"
	class_operation package return_type class_ref 144283 // Field
	nparams 1
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the java.lang.reflect.Field {@code serialPersistentFields}
if class {@code cl} implements it. Return null otherwise.

@param cl
           a java.lang.Class which to test
@return {@code java.lang.reflect.Field} if the class has
        serialPersistentFields {@code null} if the class does not
        have serialPersistentFields"
      end

      operation 235419 "forClass"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class (java.lang.Class) for this descriptor.

@return the class in the local VM that this descriptor represents;
        {@code null} if there is no corresponding class."
      end

      operation 235547 "newInstance"
	package return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "instantiationClass" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 139163 // InvalidClassException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create and return a new instance of class 'instantiationClass'
using JNI to call the constructor chosen by resolveConstructorClass.

The returned instance may have uninitialized fields, including final fields."
      end

      operation 235675 "newInstance"
	class_operation private return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "instantiationClass" type class_ref 3421708 // Class
	  param in name "methodId" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 235803 "resolveConstructorClass"
	private return_type class_ref 3421708 // Class
	nparams 1
	  param inout name "objectClass" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 139163 // InvalidClassException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 235931 "getConstructorId"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "c" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}${)}${throws};
"
	
	
	
      end

      operation 236059 "inSamePackage"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "c1" type class_ref 3421708 // Class
	  param inout name "c2" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if two classes belong to the same package.

@param c1
           one of the classes to test.
@param c2
           the other class to test.
@return {@code true} if the two classes belong to the same package,
        {@code false} otherwise."
      end

      operation 236187 "getConstructorSignature"
	class_operation package return_type class_ref 3399692 // String
	nparams 1
	  param inout name "c" type class_ref 144411 // Constructor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}${)}${throws};
"
	
	
	
	comment "Return a String representing the signature for a Constructor {@code c}.

@param c
           a java.lang.reflect.Constructor for which to compute the
           signature
@return the constructor's signature"
      end

      operation 236315 "getField"
	public return_type class_ref 131355 // ObjectStreamField
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a field descriptor of the class represented by this class
descriptor.

@param name
           the name of the desired field.
@return the field identified by {@code name} or {@code null} if there is
        no such field."
      end

      operation 236443 "fields"
	package return_type class_ref 131355 // ObjectStreamField
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the collection of field descriptors for the fields of the
corresponding class

@return the receiver's collection of declared fields for the class it
        represents"
      end

      operation 236571 "getFields"
	public return_type class_ref 131355 // ObjectStreamField
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection of field descriptors for the serialized fields of
the class represented by this class descriptor.

@return an array of field descriptors or an array of length zero if there
        are no fields in this descriptor's class."
      end

      classrelation 161435 // cachedHierarchy (<unidirectional association>)
	relation 161435 --->
	  a role_name "cachedHierarchy" volatile private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectStreamClass> ${name}${value};
"
	    classrelation_ref 161435 // cachedHierarchy (<unidirectional association>)
	  b parent class_ref 131483 // List
      end

      operation 236699 "getHierarchy"
	package return_type class_ref 131483 // List
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectStreamClass> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 236827 "makeHierarchy"
	private return_type class_ref 131483 // List
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectStreamClass> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 236955 "copyFieldAttributes"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If a Class uses \"serialPersistentFields\" to define the serialized fields,
this.loadFields cannot get the \"unshared\" information when deserializing
fields using current implementation of ObjectInputStream. This method
provides a way to copy the \"unshared\" attribute from this.fields.
"
      end

      operation 237083 "getLoadFields"
	package return_type class_ref 131355 // ObjectStreamField
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the collection of field descriptors for the input fields of the
corresponding class

@return the receiver's collection of input fields for the class it
        represents"
      end

      operation 237211 "getFieldSignature"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "f" type class_ref 144283 // Field
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Return a String representing the signature for a field {@code f}.

@param f
           a java.lang.reflect.Field for which to compute the signature
@return the field's signature"
      end

      operation 237339 "getFlags"
	package explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flags for this descriptor, where possible combined values are

ObjectStreamConstants.SC_WRITE_METHOD
ObjectStreamConstants.SC_SERIALIZABLE
ObjectStreamConstants.SC_EXTERNALIZABLE

@return byte the receiver's flags for the class it represents"
      end

      operation 237467 "getMethodSignature"
	class_operation package return_type class_ref 3399692 // String
	nparams 1
	  param inout name "m" type class_ref 144155 // Method
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Return a String representing the signature for a method {@code m}.

@param m
           a java.lang.reflect.Method for which to compute the signature
@return the method's signature"
      end

      operation 237595 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the class represented by this descriptor.

@return the fully qualified name of the class this descriptor represents."
      end

      operation 237723 "getSerialVersionUID"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Serial Version User ID of the class represented by this
descriptor.

@return the SUID for the class represented by this descriptor."
      end

      operation 237851 "getSuperclass"
	package return_type class_ref 137499 // ObjectStreamClass
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descriptor (ObjectStreamClass) of the superclass of the class
represented by the receiver.

@return an ObjectStreamClass representing the superclass of the class
        represented by the receiver."
      end

      operation 237979 "hasClinit"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}${)}${throws};
"
	
	
	
	comment "Return true if the given class {@code cl} has the
compiler-generated method {@code clinit}. Even though it is
compiler-generated, it is used by the serialization code to compute SUID.
This is unfortunate, since it may depend on compiler optimizations in
some cases.

@param cl
           a java.lang.Class which to test
@return {@code true} if the class has <clinit> {@code false}
        if the class does not have <clinit>"
      end

      operation 238107 "isExternalizable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if instances of class {@code cl} are Externalizable,
false otherwise.

@param cl
           a java.lang.Class which to test
@return {@code true} if instances of the class are Externalizable
        {@code false} if instances of the class are not
        Externalizable

@see Object#hashCode"
      end

      operation 238235 "isPrimitiveType"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "typecode" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the type code
<code>typecode<code> describes a primitive type

@param typecode a char describing the typecode
@return {@code true} if the typecode represents a primitive type
{@code false} if the typecode represents an Object type (including arrays)

@see Object#hashCode"
      end

      operation 238363 "isSerializable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if instances of class {@code cl} are Serializable,
false otherwise.

@param cl
           a java.lang.Class which to test
@return {@code true} if instances of the class are Serializable
        {@code false} if instances of the class are not
        Serializable

@see Object#hashCode"
      end

      operation 238491 "resolveProperties"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves the class properties, if they weren't already"
      end

      operation 238619 "isSerializable"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 238747 "isExternalizable"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 238875 "isProxy"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 239003 "isEnum"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 239131 "lookup"
	class_operation public return_type class_ref 137499 // ObjectStreamClass
	nparams 1
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descriptor for a serializable class.
Returns null if the class doesn't implement {@code Serializable} or {@code Externalizable}.

@param cl
           a java.lang.Class for which to obtain the corresponding
           descriptor
@return the corresponding descriptor if the class is serializable or
        externalizable; null otherwise."
      end

      operation 239259 "lookupAny"
	class_operation public return_type class_ref 137499 // ObjectStreamClass
	nparams 1
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descriptor for any class, whether or not the class
implements Serializable or Externalizable.

@param cl
           a java.lang.Class for which to obtain the corresponding
           descriptor
@return the descriptor
@since 1.6"
      end

      operation 239387 "lookupStreamClass"
	class_operation package return_type class_ref 137499 // ObjectStreamClass
	nparams 1
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the descriptor (ObjectStreamClass) corresponding to the class
{@code cl}. Returns an ObjectStreamClass even if instances of the
class cannot be serialized

@param cl
           a java.langClass for which to obtain the corresponding
           descriptor
@return the corresponding descriptor"
      end

      classrelation 161563 // storage (<unidirectional association>)
	relation 161563 --->
	  a role_name "storage" init_value "
            new SoftReference<ThreadLocal<WeakHashMap<Class<?>, ObjectStreamClass>>>(null)" class_relation private
	    comment "
A ThreadLocal cache for lookupStreamClass, with the possibility of discarding the thread
local storage content when the heap is exhausted.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ThreadLocal<WeakHashMap<Class<?>, ObjectStreamClass>>> ${name}${value};
"
	    classrelation_ref 161563 // storage (<unidirectional association>)
	  b parent class_ref 144667 // SoftReference
      end

      operation 239515 "getCache"
	class_operation private return_type class_ref 144795 // WeakHashMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<?>, ObjectStreamClass> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 239643 "findMethod"
	class_operation package return_type class_ref 144155 // Method
	nparams 2
	  param inout name "cl" type class_ref 3421708 // Class
	  param inout name "methodName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the java.lang.reflect.Method if class <code>cl</code> implements
<code>methodName</code> . Return null otherwise.

@param cl
           a java.lang.Class which to test
@return <code>java.lang.reflect.Method</code> if the class implements
        writeReplace <code>null</code> if the class does not implement
        writeReplace"
      end

      operation 239771 "findPrivateMethod"
	class_operation package return_type class_ref 144155 // Method
	nparams 3
	  param inout name "cl" type class_ref 3421708 // Class
	  param inout name "methodName" type class_ref 3399692 // String
	  param inout name "param" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?>[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the java.lang.reflect.Method if class <code>cl</code> implements
private <code>methodName</code> . Return null otherwise.

@param cl
           a java.lang.Class which to test
@return {@code java.lang.reflect.Method} if the class implements
        writeReplace {@code null} if the class does not implement
        writeReplace"
      end

      operation 239899 "hasMethodWriteReplace"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 240027 "getMethodWriteReplace"
	package return_type class_ref 144155 // Method
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 240155 "hasMethodReadResolve"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 240283 "getMethodReadResolve"
	package return_type class_ref 144155 // Method
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 240411 "hasMethodWriteObject"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 240539 "getMethodWriteObject"
	package return_type class_ref 144155 // Method
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 240667 "hasMethodReadObject"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 240795 "getMethodReadObject"
	package return_type class_ref 144155 // Method
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 240923 "hasMethodReadObjectNoData"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 241051 "getMethodReadObjectNoData"
	package return_type class_ref 144155 // Method
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 241179 "initPrivateFields"
	package explicit_return_type "void"
	nparams 1
	  param inout name "desc" type class_ref 137499 // ObjectStreamClass
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 241307 "setClass"
	package explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the class (java.lang.Class) that the receiver represents

@param c
           aClass, the new class that the receiver describes"
      end

      operation 241435 "setFields"
	package explicit_return_type "void"
	nparams 1
	  param inout name "f" type class_ref 131355 // ObjectStreamField
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the collection of field descriptors for the fields of the
corresponding class

@param f
           ObjectStreamField[], the receiver's new collection of declared
           fields for the class it represents"
      end

      operation 241563 "setLoadFields"
	package explicit_return_type "void"
	nparams 1
	  param inout name "f" type class_ref 131355 // ObjectStreamField
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the collection of field descriptors for the input fields of the
corresponding class

@param f
           ObjectStreamField[], the receiver's new collection of input
           fields for the class it represents"
      end

      operation 241691 "setFlags"
	package explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the flags for this descriptor, where possible combined values are

ObjectStreamConstants.SC_WRITE_METHOD
ObjectStreamConstants.SC_SERIALIZABLE
ObjectStreamConstants.SC_EXTERNALIZABLE

@param b
           byte, the receiver's new flags for the class it represents"
      end

      operation 241819 "setName"
	package explicit_return_type "void"
	nparams 1
	  param inout name "newName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the name of the class represented by the receiver

@param newName
           a String, the new fully qualified name of the class the
           receiver represents"
      end

      operation 241947 "setSerialVersionUID"
	package explicit_return_type "void"
	nparams 1
	  param in name "l" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the Serial Version User ID of the class represented by the receiver

@param l
           a long, the new SUID for the class represented by the receiver"
      end

      operation 242075 "setSuperclass"
	package explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 137499 // ObjectStreamClass
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the descriptor for the superclass of the class described by the
receiver

@param c
           an ObjectStreamClass, the new ObjectStreamClass for the
           superclass of the class represented by the receiver"
      end

      operation 242203 "primitiveSize"
	private explicit_return_type "int"
	nparams 1
	  param inout name "type" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 242331 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string containing a concise, human-readable description of this
descriptor.

@return a printable representation of this descriptor."
      end
    end

    class 137627 "StreamCorruptedException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that the {@link ObjectInputStream#readObject()} method could not
read an object due to missing information (for example, a cyclic reference
that doesn't match a previous instance, or a missing class descriptor for the
object to be loaded).

@see ObjectInputStream
@see OptionalDataException"
      classrelation 166043 // <generalisation>
	relation 166043 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 166043 // <generalisation>
	  b parent class_ref 139291 // ObjectStreamException
      end

      attribute 154907 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8983558202217591746L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 267419 "StreamCorruptedException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code StreamCorruptedException} with its stack trace
filled in."
      end

      operation 267547 "StreamCorruptedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code StreamCorruptedException} with its stack trace
and detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 137755 "NotActiveException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that a serialization-related method has been invoked in the wrong
place. Some methods in {@code ObjectInputStream} and {@code
ObjectOutputStream} can only be called from a nested call to readObject() or
writeObject(). Any attempt to call them from another context will cause a
{@code NotActiveException} to be thrown. The list of methods that are
protected this way is:
<ul>
<li>{@link ObjectInputStream#defaultReadObject()}</li>
<li>{@link ObjectInputStream#registerValidation(ObjectInputValidation, int)}</li>
<li>{@link ObjectOutputStream#defaultWriteObject()}</li>
</ul>"
      classrelation 157979 // <generalisation>
	relation 157979 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 157979 // <generalisation>
	  b parent class_ref 139291 // ObjectStreamException
      end

      attribute 148635 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3893467273049808895L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 233499 "NotActiveException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code NotActiveException} with its stack trace filled
in."
      end

      operation 233627 "NotActiveException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code NotActiveException} with its stack trace and
detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 137883 "EmulatedFieldsForLoading"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An EmulatedFieldsForLoading is an object that represents a set of emulated
fields for an object being loaded. It is a concrete implementation for
ObjectInputStream.GetField

@see ObjectInputStream.GetField
@see EmulatedFieldsForDumping"
      classrelation 151195 // <generalisation>
	relation 151195 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 151195 // <generalisation>
	  b parent class_ref 138011 // GetField
      end

      classrelation 151323 // streamClass (<unidirectional association>)
	relation 151323 --->
	  a role_name "streamClass" private
	    comment " The class descriptor with the declared fields the receiver emulates
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 151323 // streamClass (<unidirectional association>)
	  b parent class_ref 137499 // ObjectStreamClass
      end

      classrelation 151451 // emulatedFields (<unidirectional association>)
	relation 151451 --->
	  a role_name "emulatedFields" private
	    comment " The actual representation, with a more powerful API (set&get)
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 151451 // emulatedFields (<unidirectional association>)
	  b parent class_ref 136475 // EmulatedFields
      end

      operation 206619 "EmulatedFieldsForLoading"
	package explicit_return_type ""
	nparams 1
	  param inout name "streamClass" type class_ref 137499 // ObjectStreamClass
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of EmulatedFieldsForDumping.

@param streamClass
           an ObjectStreamClass, defining the class for which to emulate
           fields."
      end

      operation 206747 "defaulted"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return a boolean indicating if the field named <code>name</code> has
been assigned a value explicitly (false) or if it still holds a default
value for the type (true) because it hasn't been assigned to yet.

@param name
           A String, the name of the field to test
@return <code>true</code> if the field holds it default value,
        <code>false</code> otherwise.

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 206875 "emulatedFields"
	package return_type class_ref 136475 // EmulatedFields
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the actual EmulatedFields instance used by the receiver. We have
the actual work in a separate class so that the code can be shared. The
receiver has to be of a subclass of GetField.

@return array of ObjectSlot the receiver represents."
      end

      operation 207003 "get"
	public explicit_return_type "byte"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "byte"
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and return the byte value of a given field named <code>name</code>
in the receiver. If the field has not been assigned any value yet, the
default value <code>defaultValue</code> is returned instead.

@param name
           A String, the name of the field to find
@param defaultValue
           Return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, or the
        default value otherwise

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 207131 "get"
	public explicit_return_type "char"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "char"
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and return the char value of a given field named <code>name</code>
in the receiver. If the field has not been assigned any value yet, the
default value <code>defaultValue</code> is returned instead.

@param name
           A String, the name of the field to find
@param defaultValue
           Return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, or the
        default value otherwise

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 207259 "get"
	public explicit_return_type "double"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "double"
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and return the double value of a given field named <code>name</code>
in the receiver. If the field has not been assigned any value yet, the
default value <code>defaultValue</code> is returned instead.

@param name
           A String, the name of the field to find
@param defaultValue
           Return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, or the
        default value otherwise

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 207387 "get"
	public explicit_return_type "float"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "float"
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and return the float value of a given field named <code>name</code>
in the receiver. If the field has not been assigned any value yet, the
default value <code>defaultValue</code> is returned instead.

@param name
           A String, the name of the field to find
@param defaultValue
           Return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, or the
        default value otherwise

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 207515 "get"
	public explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "int"
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and return the int value of a given field named <code>name</code>
in the receiver. If the field has not been assigned any value yet, the
default value <code>defaultValue</code> is returned instead.

@param name
           A String, the name of the field to find
@param defaultValue
           Return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, or the
        default value otherwise

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 207643 "get"
	public explicit_return_type "long"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "long"
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and return the long value of a given field named <code>name</code>
in the receiver. If the field has not been assigned any value yet, the
default value <code>defaultValue</code> is returned instead.

@param name
           A String, the name of the field to find
@param defaultValue
           Return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, or the
        default value otherwise

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 207771 "get"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "defaultValue" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and return the Object value of a given field named <code>name</code>
in the receiver. If the field has not been assigned any value yet, the
default value <code>defaultValue</code> is returned instead.

@param name
           A String, the name of the field to find
@param defaultValue
           Return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, or the
        default value otherwise

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 207899 "get"
	public explicit_return_type "short"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param in name "defaultValue" explicit_type "short"
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and return the short value of a given field named <code>name</code>
in the receiver. If the field has not been assigned any value yet, the
default value <code>defaultValue</code> is returned instead.

@param name
           A String, the name of the field to find
@param defaultValue
           Return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, or the
        default value otherwise

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 208027 "get"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "defaultValue" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Find and return the boolean value of a given field named
<code>name</code> in the receiver. If the field has not been assigned
any value yet, the default value <code>defaultValue</code> is returned
instead.

@param name
           A String, the name of the field to find
@param defaultValue
           Return value in case the field has not been assigned to yet.
@return the value of the given field if it has been assigned, or the
        default value otherwise

@throws IOException
            If an IO error occurs
@throws IllegalArgumentException
            If the corresponding field can not be found."
      end

      operation 208155 "getObjectStreamClass"
	public return_type class_ref 137499 // ObjectStreamClass
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Return the class descriptor for which the emulated fields are defined.

@return ObjectStreamClass The class descriptor for which the emulated
        fields are defined."
      end
    end

    class 138139 "ObjectInput"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Defines an interface for classes that allow reading serialized objects.

@see ObjectInputStream
@see ObjectOutput"
      classrelation 148763 // <generalisation>
	relation 148763 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 148763 // <generalisation>
	  b parent class_ref 135963 // DataInput
      end

      classrelation 148891 // <generalisation>
	relation 148891 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 148891 // <generalisation>
	  b parent class_ref 132123 // AutoCloseable
      end

      operation 194587 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates the number of bytes of primitive data that can be read without
blocking.

@return the number of bytes available.
@throws IOException
            if an I/O error occurs."
      end

      operation 194715 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this stream. Implementations of this method should free any
resources used by the stream.

@throws IOException
            if an I/O error occurs while closing the input stream."
      end

      operation 194843 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single byte from this stream and returns it as an integer in the
range from 0 to 255. Returns -1 if the end of this stream has been
reached. Blocks if no input is available.

@return the byte read or -1 if the end of this stream has been reached.
@throws IOException
            if this stream is closed or another I/O error occurs."
      end

      operation 194971 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "buffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this stream into the byte array {@code buffer}. Blocks
while waiting for input.

@param buffer
           the array in which to store the bytes read.
@return the number of bytes read or -1 if the end of this stream has been
        reached.
@throws IOException
            if this stream is closed or another I/O error occurs."
      end

      operation 195099 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads at most {@code count} bytes from this stream and stores them in
byte array {@code buffer} starting at offset {@code count}. Blocks while
waiting for input.

@param buffer
           the array in which to store the bytes read.
@param offset
           the initial position in {@code buffer} to store the bytes read
           from this stream.
@param count
           the maximum number of bytes to store in {@code buffer}.
@return the number of bytes read or -1 if the end of this stream has been
        reached.
@throws IOException
            if this stream is closed or another I/O error occurs."
      end

      operation 195227 "readObject"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 2
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next object from this stream.

@return the object read.

@throws ClassNotFoundException
            if the object's class cannot be found.
@throws IOException
            if this stream is closed or another I/O error occurs."
      end

      operation 195355 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "byteCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips {@code byteCount} bytes on this stream. Less than {@code byteCount} byte are
skipped if the end of this stream is reached before the operation
completes.

@return the number of bytes actually skipped.
@throws IOException
            if this stream is closed or another I/O error occurs."
      end
    end

    class 138779 "ObjectInputValidation"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A callback interface for post-deserialization checks on objects. Allows, for
example, the validation of a whole graph of objects after all of them have
been loaded.

@see ObjectInputStream#registerValidation(ObjectInputValidation, int)"
      operation 234011 "validateObject"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129563 // InvalidObjectException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates this object.

@throws InvalidObjectException
            if this object fails to validate itself."
      end
    end

    class 138907 "WriteAbortedException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that the {@link ObjectInputStream#readObject()} method has detected
an exception marker in the input stream. This marker indicates that exception
occurred when the object was serialized, and this marker was inserted instead
of the original object. It is a way to \"propagate\" an exception from the code
that attempted to write the object to the code that is attempting to read the
object.

@see ObjectInputStream#readObject()"
      classrelation 167707 // <generalisation>
	relation 167707 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 167707 // <generalisation>
	  b parent class_ref 139291 // ObjectStreamException
      end

      attribute 158747 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3326426625597282442L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 167835 // detail (<unidirectional association>)
	relation 167835 --->
	  a role_name "detail" public
	    comment "
The exception that occured when writeObject() was attempting to serialize
the object.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167835 // detail (<unidirectional association>)
	  b parent class_ref 132251 // Exception
      end

      operation 274715 "WriteAbortedException"
	public explicit_return_type ""
	nparams 2
	  param inout name "detailMessage" type class_ref 3399692 // String
	  param inout name "rootCause" type class_ref 132251 // Exception
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code WriteAbortedException} with its stack trace,
detail message and the exception which caused the underlying problem when
serializing the object filled in.

@param detailMessage
           the detail message for this exception.
@param rootCause
           the exception that was thrown when serializing the object."
      end

      operation 274843 "getMessage"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the extra information message which was provided when this exception
was created. Returns {@code null} if no message was provided at creation
time.

@return the exception message."
      end

      operation 274971 "getCause"
	public return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the cause of this exception or {@code null} if there is no cause.

@return the exception cause."
      end
    end

    class 139035 "OptionalDataException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that the {@link ObjectInputStream} class encountered a primitive type
({@code int}, {@code char} etc.) instead of an object instance in the input
stream.

@see ObjectInputStream#available()
@see ObjectInputStream#readObject()
@see ObjectInputStream#skipBytes(int)"
      classrelation 162203 // <generalisation>
	relation 162203 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 162203 // <generalisation>
	  b parent class_ref 139291 // ObjectStreamException
      end

      attribute 151195 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8011121865681257820L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 151323 "eof"
	public explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "{@code true} indicates that there is no more primitive data available.
"
      end

      attribute 151451 "length"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bytes of primitive data (int, char, long etc.) that are
available.
"
      end

      operation 244891 "OptionalDataException"
	package explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code OptionalDataException} with its stack trace
filled in."
      end

      operation 245019 "OptionalDataException"
	package explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code OptionalDataException} with its stack trace and
detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 139163 "InvalidClassException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals a problem during the serialization or or deserialization of an
object. Possible reasons include:
<ul>
<li>The SUIDs of the class loaded by the VM and the serialized class info do
not match.</li>
<li>A serializable or externalizable object cannot be instantiated (when
deserializing) because the no-arg constructor that needs to be run is not
visible or fails.</li>
</ul>

@see ObjectInputStream #readObject()
@see ObjectInputValidation#validateObject()"
      classrelation 157083 // <generalisation>
	relation 157083 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 157083 // <generalisation>
	  b parent class_ref 139291 // ObjectStreamException
      end

      attribute 147099 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4333316296251054416L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 157211 // classname (<unidirectional association>)
	relation 157211 --->
	  a role_name "classname" public
	    comment "
The fully qualified name of the class that caused the problem.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 157211 // classname (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 229915 "InvalidClassException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code InvalidClassException} with its stack trace and
detailed message filled in.

@param detailMessage
           the detail message for this exception."
      end

      operation 230043 "InvalidClassException"
	public explicit_return_type ""
	nparams 2
	  param inout name "className" type class_ref 3399692 // String
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code InvalidClassException} with its stack trace,
detail message and the fully qualified name of the class which caused the
exception filled in.

@param className
           the name of the class that caused the exception.
@param detailMessage
           the detail message for this exception."
      end

      operation 230171 "getMessage"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the detail message which was provided when the exception was
created. {@code null} is returned if no message was provided at creation
time. If a detail message as well as a class name are provided, then the
values are concatenated and returned.

@return the detail message, possibly concatenated with the name of the
        class that caused the problem."
      end
    end

    class 139291 "ObjectStreamException"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals some sort of problem during either serialization or deserialization
of objects. This is actually the superclass of several other, more specific
exception classes.

@see InvalidObjectException
@see NotActiveException
@see NotSerializableException
@see OptionalDataException
@see StreamCorruptedException
@see WriteAbortedException"
      classrelation 156955 // <generalisation>
	relation 156955 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 156955 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 146971 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7260898174833392607L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 229659 "ObjectStreamException"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ObjectStreamException} with its stack trace
filled in."
      end

      operation 229787 "ObjectStreamException"
	protected explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ObjectStreamException} with its stack trace and
detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 139419 "EOFException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a program encounters the end of a file or stream during an input
operation."
      classrelation 151579 // <generalisation>
	relation 151579 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 151579 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 145435 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6433858223774886977L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 208283 "EOFException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code EOFException} with its stack trace filled in."
      end

      operation 208411 "EOFException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code EOFException} with its stack trace and detail
message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 139547 "Externalizable"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Defines an interface for classes that want to be serializable, but have their
own binary representation."
      classrelation 151707 // <generalisation>
	relation 151707 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 151707 // <generalisation>
	  b parent class_ref 128155 // Serializable
      end

      operation 208539 "readExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "input" type class_ref 138139 // ObjectInput
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next object from the ObjectInput <code>input</code>.

@param input
           the ObjectInput from which the next object is read.
@throws IOException
            if an error occurs attempting to read from {@code input}.
@throws ClassNotFoundException
            if the class of the instance being loaded cannot be found."
      end

      operation 208667 "writeExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "output" type class_ref 136987 // ObjectOutput
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the receiver to the ObjectOutput <code>output</code>.

@param output
           the ObjectOutput to write the object to.
@throws IOException
            if an error occurs attempting to write to {@code output}."
      end
    end

    class 140059 "FilenameFilter"
      abstract visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface for filtering {@link File} objects based on their names
or the directory they reside in.

@see File
@see File#list(FilenameFilter)"
      operation 219931 "accept"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param inout name "dir" type class_ref 135579 // File
	  param inout name "filename" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if a specific filename matches this filter.

@param dir
           the directory in which the {@code filename} was found.
@param filename
           the name of the file in {@code dir} to test.
@return  {@code true} if the filename matches the filter
           and can be included in the list, {@code false}
           otherwise."
      end
    end

    class 140187 "FileFilter"
      abstract visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface for filtering {@link File} objects based on their names
or other information.

@see File#listFiles(FileFilter)"
      operation 218395 "accept"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "pathname" type class_ref 135579 // File
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicating whether a specific file should be included in a pathname list.

@param pathname
           the abstract file to check.
@return {@code true} if the file should be included, {@code false}
        otherwise."
      end
    end

    class 140699 "FileDescriptor"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps a Unix file descriptor. It's possible to get the file descriptor used by some
classes (such as {@link FileInputStream}, {@link FileOutputStream},
and {@link RandomAccessFile}), and then create new streams that point to the same
file descriptor."
      classrelation 152603 // in (<unidirectional association>)
	relation 152603 --->
	  a role_name "in" init_value " new FileDescriptor()" class_relation const_relation public
	    comment "
Corresponds to {@code stdin}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 152603 // in (<unidirectional association>)
	  b parent class_ref 140699 // FileDescriptor
      end

      classrelation 152731 // out (<unidirectional association>)
	relation 152731 --->
	  a role_name "out" init_value " new FileDescriptor()" class_relation const_relation public
	    comment "
Corresponds to {@code stdout}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 152731 // out (<unidirectional association>)
	  b parent class_ref 140699 // FileDescriptor
      end

      classrelation 152859 // err (<unidirectional association>)
	relation 152859 --->
	  a role_name "err" init_value " new FileDescriptor()" class_relation const_relation public
	    comment "
Corresponds to {@code stderr}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 152859 // err (<unidirectional association>)
	  b parent class_ref 140699 // FileDescriptor
      end

      attribute 145947 "descriptor"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The Unix file descriptor backing this FileDescriptor.
A value of -1 indicates that this FileDescriptor is invalid.
"
      end

      extra_member 128283 "initialization"
	
	cpp "" ""
	java "  static {
        in.descriptor = STDIN_FILENO;
        out.descriptor = STDOUT_FILENO;
        err.descriptor = STDERR_FILENO;
    }"
	php ""
	python ""
	idl ""
      end

      operation 217627 "FileDescriptor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new invalid FileDescriptor."
      end

      operation 217755 "sync"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 140827 // SyncFailedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that data which is buffered within the underlying implementation
is written out to the appropriate device before returning."
      end

      operation 217883 "valid"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this {@code FileDescriptor} is valid."
      end

      operation 218011 "getInt$"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the int fd. It's highly unlikely you should be calling this. Please discuss
your needs with a libcore maintainer before using this method.
@hide internal use only"
      end

      operation 218139 "setInt$"
	public explicit_return_type "void"
	nparams 1
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the int fd. It's highly unlikely you should be calling this. Please discuss
your needs with a libcore maintainer before using this method.
@hide internal use only"
      end

      operation 218267 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 140827 "SyncFailedException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that the {@link FileDescriptor#sync()} method has failed to
complete."
      classrelation 167323 // <generalisation>
	relation 167323 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 167323 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 158363 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2353342684412443330L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 274075 "SyncFailedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SyncFailedException} with its stack trace and
detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 140955 "FileInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An input stream that reads bytes from a file.
<pre>   {@code
  File file = ...
  InputStream in = null;
  try {
    in = new BufferedInputStream(new FileInputStream(file));
    ...
  } finally {
    if (in != null) {
      in.close();
    }
  }
}</pre>

<p>This stream is <strong>not buffered</strong>. Most callers should wrap
this stream with a {@link BufferedInputStream}.

<p>Use {@link FileReader} to read characters, as opposed to bytes, from a
file.

@see BufferedInputStream
@see FileOutputStream"
      classrelation 152987 // <generalisation>
	relation 152987 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 152987 // <generalisation>
	  b parent class_ref 131867 // InputStream
      end

      classrelation 153115 // <realization>
	relation 153115 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 153115 // <realization>
	  b parent class_ref 131995 // Closeable
      end

      classrelation 153243 // fd (<unidirectional association>)
	relation 153243 --->
	  a role_name "fd" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 153243 // fd (<unidirectional association>)
	  b parent class_ref 140699 // FileDescriptor
      end

      attribute 146075 "shouldClose"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 153371 // channel (<unidirectional association>)
	relation 153371 --->
	  a role_name "channel" private
	    comment " The unique file channel. Lazily initialized because it's rarely needed. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 153371 // channel (<unidirectional association>)
	  b parent class_ref 141083 // FileChannel
      end

      classrelation 153499 // guard (<unidirectional association>)
	relation 153499 --->
	  a role_name "guard" init_value " CloseGuard.get()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 153499 // guard (<unidirectional association>)
	  b parent class_ref 3574028 // CloseGuard
      end

      operation 218523 "FileInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 135579 // File
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileInputStream} that reads from {@code file}.

@param file
           the file from which this stream reads.
@throws FileNotFoundException
            if {@code file} does not exist."
      end

      operation 218651 "FileInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "fd" type class_ref 140699 // FileDescriptor
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileInputStream} that reads from {@code fd}.

@param fd
           the FileDescriptor from which this stream reads.
@throws NullPointerException
            if {@code fd} is {@code null}."
      end

      operation 218779 "FileInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "path" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code new FileInputStream(new File(path))}."
      end

      operation 218907 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 219035 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 219163 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Ensures that all resources for this stream are released when it is about
to be garbage collected.

@throws IOException
            if an error occurs attempting to finalize this stream."
      end

      operation 219291 "getChannel"
	public return_type class_ref 141083 // FileChannel
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a read-only {@link FileChannel} that shares its position with
this stream."
      end

      operation 219419 "getFD"
	public return_type class_ref 140699 // FileDescriptor
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the underlying file descriptor."
      end

      operation 219547 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 219675 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "byteOffset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 219803 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "byteCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 141211 "FileOutputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An output stream that writes bytes to a file. If the output file exists, it
can be replaced or appended to. If it does not exist, a new file will be
created.
<pre>   {@code
  File file = ...
  OutputStream out = null;
  try {
    out = new BufferedOutputStream(new FileOutputStream(file));
    ...
  } finally {
    if (out != null) {
      out.close();
    }
  }
}</pre>

<p>This stream is <strong>not buffered</strong>. Most callers should wrap
this stream with a {@link BufferedOutputStream}.

<p>Use {@link FileWriter} to write characters, as opposed to bytes, to a file.

@see BufferedOutputStream
@see FileInputStream"
      classrelation 153755 // <generalisation>
	relation 153755 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 153755 // <generalisation>
	  b parent class_ref 132635 // OutputStream
      end

      classrelation 153883 // <realization>
	relation 153883 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 153883 // <realization>
	  b parent class_ref 131995 // Closeable
      end

      classrelation 154011 // fd (<unidirectional association>)
	relation 154011 --->
	  a role_name "fd" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 154011 // fd (<unidirectional association>)
	  b parent class_ref 140699 // FileDescriptor
      end

      attribute 146331 "shouldClose"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 154139 // channel (<unidirectional association>)
	relation 154139 --->
	  a role_name "channel" private
	    comment " The unique file channel. Lazily initialized because it's rarely needed. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 154139 // channel (<unidirectional association>)
	  b parent class_ref 141083 // FileChannel
      end

      attribute 146459 "mode"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " File access mode "
      end

      classrelation 154267 // guard (<unidirectional association>)
	relation 154267 --->
	  a role_name "guard" init_value " CloseGuard.get()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 154267 // guard (<unidirectional association>)
	  b parent class_ref 3574028 // CloseGuard
      end

      operation 220315 "FileOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 135579 // File
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileOutputStream} that writes to {@code file}. The file will be
truncated if it exists, and created if it doesn't exist.

@throws FileNotFoundException if file cannot be opened for writing."
      end

      operation 220443 "FileOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 135579 // File
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileOutputStream} that writes to {@code file}.
If {@code append} is true and the file already exists, it will be appended to; otherwise
it will be truncated. The file will be created if it does not exist.

@throws FileNotFoundException if the file cannot be opened for writing."
      end

      operation 220571 "FileOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "fd" type class_ref 140699 // FileDescriptor
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileOutputStream} that writes to {@code fd}.

@throws NullPointerException if {@code fd} is null."
      end

      operation 220699 "FileOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "path" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileOutputStream} that writes to {@code path}. The file will be
truncated if it exists, and created if it doesn't exist.

@throws FileNotFoundException if file cannot be opened for writing."
      end

      operation 220827 "FileOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "path" type class_ref 3399692 // String
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FileOutputStream} that writes to {@code path}.
If {@code append} is true and the file already exists, it will be appended to; otherwise
it will be truncated. The file will be created if it does not exist.

@throws FileNotFoundException if the file cannot be opened for writing."
      end

      operation 220955 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 221083 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 221211 "getChannel"
	public return_type class_ref 141083 // FileChannel
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a write-only {@link FileChannel} that shares its position with
this stream."
      end

      operation 221339 "getFD"
	public return_type class_ref 140699 // FileDescriptor
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the underlying file descriptor."
      end

      operation 221467 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "byteOffset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 221595 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 141339 "FilePermission"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Legacy security code; do not use."
      classrelation 154651 // <generalisation>
	relation 154651 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 154651 // <generalisation>
	  b parent class_ref 141467 // Permission
      end

      classrelation 154779 // <realization>
	relation 154779 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 154779 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      operation 222619 "FilePermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "path" type class_ref 3399692 // String
	  param inout name "actions" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 222747 "getActions"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 222875 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 141467 // Permission
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 141979 "FileReader"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link Reader} that reads from a file in the file system.
All read requests made by calling methods in this class are directly
forwarded to the equivalent function of the underlying operating system.
Since this may induce some performance penalty, in particular if many small
read requests are made, a FileReader is often wrapped by a
BufferedReader.

@see BufferedReader
@see FileWriter"
      classrelation 155419 // <generalisation>
	relation 155419 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 155419 // <generalisation>
	  b parent class_ref 142107 // InputStreamReader
      end

      operation 224283 "FileReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 135579 // File
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new FileReader on the given {@code file}.

@param file
           a File to be opened for reading characters from.
@throws FileNotFoundException
            if {@code file} does not exist."
      end

      operation 224411 "FileReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "fd" type class_ref 140699 // FileDescriptor
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new FileReader on the given FileDescriptor {@code fd}. Since
a previously opened FileDescriptor is passed as an argument, no
FileNotFoundException can be thrown.

@param fd
           the previously opened file descriptor."
      end

      operation 224539 "FileReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "filename" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new FileReader on the given file named {@code filename}.

@param filename
           an absolute or relative path specifying the file to open.
@throws FileNotFoundException
            if there is no file named {@code filename}."
      end
    end

    class 142107 "InputStreamReader"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class for turning a byte stream into a character stream. Data read from the
source input stream is converted into characters by either a default or a
provided character converter. The default encoding is taken from the
\"file.encoding\" system property. {@code InputStreamReader} contains a buffer
of bytes read from the source stream and converts these into characters as
needed. The buffer size is 8K.

@see OutputStreamWriter"
      classrelation 154907 // <generalisation>
	relation 154907 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 154907 // <generalisation>
	  b parent class_ref 133019 // Reader
      end

      classrelation 155035 // in (<unidirectional association>)
	relation 155035 --->
	  a role_name "in" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 155035 // in (<unidirectional association>)
	  b parent class_ref 131867 // InputStream
      end

      attribute 146587 "endOfInput"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 155163 // decoder (<unidirectional association>)
	relation 155163 --->
	  a role_name "decoder" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 155163 // decoder (<unidirectional association>)
	  b parent class_ref 142235 // CharsetDecoder
      end

      classrelation 155291 // bytes (<unidirectional association>)
	relation 155291 --->
	  a role_name "bytes" init_value " ByteBuffer.allocate(8192)" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 155291 // bytes (<unidirectional association>)
	  b parent class_ref 142363 // ByteBuffer
      end

      operation 223003 "InputStreamReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code InputStreamReader} on the {@link InputStream}
{@code in}. This constructor sets the character converter to the encoding
specified in the \"file.encoding\" property and falls back to ISO 8859_1
(ISO-Latin-1) if the property doesn't exist.

@param in
           the input stream from which to read characters."
      end

      operation 223131 "InputStreamReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 131867 // InputStream
	  param in name "charsetName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new InputStreamReader on the InputStream {@code in}. The
character converter that is used to decode bytes into characters is
identified by name by {@code charsetName}. If the encoding cannot be found, an
UnsupportedEncodingException error is thrown.

@param in
           the InputStream from which to read characters.
@param charsetName
           identifies the character converter to use.
@throws NullPointerException
            if {@code charsetName} is {@code null}.
@throws UnsupportedEncodingException
            if the encoding specified by {@code charsetName} cannot be found."
      end

      operation 223259 "InputStreamReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 131867 // InputStream
	  param inout name "dec" type class_ref 142235 // CharsetDecoder
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new InputStreamReader on the InputStream {@code in} and
CharsetDecoder {@code dec}.

@param in
           the source InputStream from which to read characters.
@param dec
           the CharsetDecoder used by the character conversion."
      end

      operation 223387 "InputStreamReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 131867 // InputStream
	  param inout name "charset" type class_ref 142491 // Charset
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new InputStreamReader on the InputStream {@code in} and
Charset {@code charset}.

@param in
           the source InputStream from which to read characters.
@param charset
           the Charset that defines the character converter"
      end

      operation 223515 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this reader. This implementation closes the source InputStream and
releases all local storage.

@throws IOException
            if an error occurs attempting to close this reader."
      end

      operation 223643 "getEncoding"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the historical name of the encoding used by this writer to convert characters to
bytes, or null if this writer has been closed. Most callers should probably keep
track of the String or Charset they passed in; this method may not return the same
name."
      end

      operation 223771 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single character from this reader and returns it as an integer
with the two higher-order bytes set to 0. Returns -1 if the end of the
reader has been reached. The byte value is either obtained from
converting bytes in this reader's buffer or by first filling the buffer
from the source InputStream and then reading from the buffer.

@return the character read or -1 if the end of the reader has been
        reached.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end

      operation 223899 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code length} characters from this reader and stores them
at position {@code offset} in the character array {@code buf}. Returns
the number of characters actually read or -1 if the end of the reader has
been reached. The bytes are either obtained from converting bytes in this
reader's buffer or by first filling the buffer from the source
InputStream and then reading from the buffer.

@param buffer
           the array to store the characters read.
@param offset
           the initial position in {@code buf} to store the characters
           read from this reader.
@param length
           the maximum number of characters to read.
@return the number of characters read or -1 if the end of the reader has
        been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the length of
            {@code buf}.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end

      operation 224027 "isOpen"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 224155 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader is ready to be read without blocking. If
the result is {@code true}, the next {@code read()} will not block. If
the result is {@code false} then this reader may or may not block when
{@code read()} is called. This implementation returns {@code true} if
there are bytes available in the buffer or the source stream has bytes
available.

@return {@code true} if the receiver will not block when {@code read()}
        is called, {@code false} if unknown or blocking will occur.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end
    end

    class 142619 "FileWriter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link Writer} that writes to a file in the file system.
All write requests made by calling methods in this class are directly
forwarded to the equivalent function of the underlying operating system.
Since this may induce some performance penalty, in particular if many small
write requests are made, a FileWriter is often wrapped by a
BufferedWriter.

@see BufferedWriter
@see FileReader"
      classrelation 156059 // <generalisation>
	relation 156059 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 156059 // <generalisation>
	  b parent class_ref 142747 // OutputStreamWriter
      end

      operation 226587 "FileWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "file" type class_ref 135579 // File
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a FileWriter using the File {@code file}.

@param file
           the non-null File to write bytes to.
@throws IOException
            if {@code file} cannot be opened for writing."
      end

      operation 226715 "FileWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 135579 // File
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a FileWriter using the File {@code file}. The parameter
{@code append} determines whether or not the file is opened and appended
to or just opened and overwritten.

@param file
           the non-null File to write bytes to.
@param append
           indicates whether or not to append to an existing file.
@throws IOException
            if the {@code file} cannot be opened for writing."
      end

      operation 226843 "FileWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "fd" type class_ref 140699 // FileDescriptor
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a FileWriter using the existing FileDescriptor {@code fd}.

@param fd
           the non-null FileDescriptor to write bytes to."
      end

      operation 226971 "FileWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "filename" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a FileWriter using the platform dependent {@code filename}.

@param filename
           the non-null name of the file to write bytes to.
@throws IOException
            if the file cannot be opened for writing."
      end

      operation 227099 "FileWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "filename" type class_ref 3399692 // String
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a FileWriter using the platform dependent {@code filename}. The
parameter {@code append} determines whether or not the file is opened and
appended to or just opened and overwritten.

@param filename
           the non-null name of the file to write bytes to.
@param append
           indicates whether or not to append to an existing file.
@throws IOException
            if the {@code file} cannot be opened for writing."
      end
    end

    class 142747 "OutputStreamWriter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class for turning a character stream into a byte stream. Data written to
the target input stream is converted into bytes by either a default or a
provided character converter. The default encoding is taken from the
\"file.encoding\" system property. {@code OutputStreamWriter} contains a buffer
of bytes to be written to target stream and converts these into characters as
needed. The buffer size is 8K.

@see InputStreamReader"
      classrelation 155547 // <generalisation>
	relation 155547 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 155547 // <generalisation>
	  b parent class_ref 133531 // Writer
      end

      classrelation 155675 // out (<unidirectional association>)
	relation 155675 --->
	  a role_name "out" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 155675 // out (<unidirectional association>)
	  b parent class_ref 132635 // OutputStream
      end

      classrelation 155803 // encoder (<unidirectional association>)
	relation 155803 --->
	  a role_name "encoder" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 155803 // encoder (<unidirectional association>)
	  b parent class_ref 142875 // CharsetEncoder
      end

      classrelation 155931 // bytes (<unidirectional association>)
	relation 155931 --->
	  a role_name "bytes" init_value " ByteBuffer.allocate(8192)" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 155931 // bytes (<unidirectional association>)
	  b parent class_ref 142363 // ByteBuffer
      end

      operation 224667 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new OutputStreamWriter using {@code out} as the target
stream to write converted characters to. The default character encoding
is used.

@param out
           the non-null target stream to write converted bytes to."
      end

      operation 224795 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 132635 // OutputStream
	  param in name "charsetName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new OutputStreamWriter using {@code out} as the target
stream to write converted characters to and {@code charsetName} as the character
encoding. If the encoding cannot be found, an
UnsupportedEncodingException error is thrown.

@param out
           the target stream to write converted bytes to.
@param charsetName
           the string describing the desired character encoding.
@throws NullPointerException
            if {@code charsetName} is {@code null}.
@throws UnsupportedEncodingException
            if the encoding specified by {@code charsetName} cannot be found."
      end

      operation 224923 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 132635 // OutputStream
	  param inout name "cs" type class_ref 142491 // Charset
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new OutputStreamWriter using {@code out} as the target
stream to write converted characters to and {@code cs} as the character
encoding.

@param out
           the target stream to write converted bytes to.
@param cs
           the {@code Charset} that specifies the character encoding."
      end

      operation 225051 "OutputStreamWriter"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 132635 // OutputStream
	  param inout name "charsetEncoder" type class_ref 142875 // CharsetEncoder
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new OutputStreamWriter using {@code out} as the target
stream to write converted characters to and {@code charsetEncoder} as the character
encoder.

@param out
           the target stream to write converted bytes to.
@param charsetEncoder
           the character encoder used for character conversion."
      end

      operation 225179 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this writer. This implementation flushes the buffer as well as the
target stream. The target stream is then closed and the resources for the
buffer and converter are released.

<p>Only the first invocation of this method has any effect. Subsequent calls
do nothing.

@throws IOException
            if an error occurs while closing this writer."
      end

      operation 225307 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flushes this writer. This implementation ensures that all buffered bytes
are written to the target stream. After writing the bytes, the target
stream is flushed as well.

@throws IOException
            if an error occurs while flushing this writer."
      end

      operation 225435 "flushBytes"
	private explicit_return_type "void"
	nparams 1
	  param inout name "flushUnderlyingStream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 225563 "convert"
	private explicit_return_type "void"
	nparams 1
	  param inout name "chars" type class_ref 133275 // CharBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 225691 "drainEncoder"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 225819 "checkStatus"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 225947 "getEncoding"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the historical name of the encoding used by this writer to convert characters to
bytes, or null if this writer has been closed. Most callers should probably keep
track of the String or Charset they passed in; this method may not return the same
name."
      end

      operation 226075 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters starting at {@code offset} in {@code buf}
to this writer. The characters are immediately converted to bytes by the
character converter and stored in a local buffer. If the buffer gets full
as a result of the conversion, this writer is flushed.

@param buffer
           the array containing characters to write.
@param offset
           the index of the first character in {@code buf} to write.
@param count
           the maximum number of characters to write.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if
            {@code offset + count} is greater than the size of
            {@code buf}.
@throws IOException
            if this writer has already been closed or another I/O error
            occurs."
      end

      operation 226203 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneChar" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the character {@code oneChar} to this writer. The lowest two bytes
of the integer {@code oneChar} are immediately converted to bytes by the
character converter and stored in a local buffer. If the buffer gets full
by converting this character, this writer is flushed.

@param oneChar
           the character to write.
@throws IOException
            if this writer is closed or another I/O error occurs."
      end

      operation 226331 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters starting at {@code offset} in {@code str}
to this writer. The characters are immediately converted to bytes by the
character converter and stored in a local buffer. If the buffer gets full
as a result of the conversion, this writer is flushed.

@param str
           the string containing characters to write.
@param offset
           the start position in {@code str} for retrieving characters.
@param count
           the maximum number of characters to write.
@throws IOException
            if this writer has already been closed or another I/O error
            occurs.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if
            {@code offset + count} is bigger than the length of
            {@code str}."
      end

      operation 226459 "checkError"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 143003 "FilterReader"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link Reader} and performs some transformation on the
input data while it is being read. Transformations can be anything from a
simple byte-wise filtering input data to an on-the-fly compression or
decompression of the underlying reader. Readers that wrap another reader and
provide some additional functionality on top of it usually inherit from this
class.

@see FilterWriter"
      classrelation 156187 // <generalisation>
	relation 156187 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 156187 // <generalisation>
	  b parent class_ref 133019 // Reader
      end

      classrelation 156315 // in (<unidirectional association>)
	relation 156315 --->
	  a role_name "in" protected
	    comment "
The target Reader which is being filtered.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 156315 // in (<unidirectional association>)
	  b parent class_ref 133019 // Reader
      end

      operation 227227 "FilterReader"
	protected explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 133019 // Reader
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new FilterReader on the Reader {@code in}.

@param in
           The non-null Reader to filter reads on."
      end

      operation 227355 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this reader. This implementation closes the filtered reader.

@throws IOException
            if an error occurs while closing this reader."
      end

      operation 227483 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a mark position in this reader. The parameter {@code readlimit}
indicates how many bytes can be read before the mark is invalidated.
Sending {@code reset()} will reposition this reader back to the marked
position, provided that {@code readlimit} has not been surpassed.
<p>
This implementation sets a mark in the filtered reader.

@param readlimit
           the number of bytes that can be read from this reader before
           the mark is invalidated.
@throws IOException
            if an error occurs while marking this reader.
@see #markSupported()
@see #reset()"
      end

      operation 227611 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader supports {@code mark()} and {@code reset()}.
This implementation returns whether the filtered reader supports marking.

@return {@code true} if {@code mark()} and {@code reset()} are supported
        by the filtered reader, {@code false} otherwise.
@see #mark(int)
@see #reset()
@see #skip(long)"
      end

      operation 227739 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single character from the filtered reader and returns it as an
integer with the two higher-order bytes set to 0. Returns -1 if the end
of the filtered reader has been reached.

@return The character read or -1 if the end of the filtered reader has
        been reached.
@throws IOException
            if an error occurs while reading from this reader."
      end

      operation 227867 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code count} characters from the filtered reader and stores them
in the byte array {@code buffer} starting at {@code offset}. Returns the
number of characters actually read or -1 if no characters were read and
the end of the filtered reader was encountered.

@param buffer
           the char array in which to store the characters read.
@param offset
           the initial position in {@code buffer} to store the characters
           read from this reader.
@param count
           the maximum number of characters to store in {@code buffer}.
@return the number of characters actually read or -1 if the end of the
        filtered reader has been reached while reading.
@throws IOException
            if an error occurs while reading from this reader."
      end

      operation 227995 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader is ready to be read without blocking. If
the result is {@code true}, the next {@code read()} will not block. If
the result is {@code false}, this reader may or may not block when
{@code read()} is sent.

@return {@code true} if this reader will not block when {@code read()}
        is called, {@code false} if unknown or blocking will occur.
@throws IOException
            if the reader is closed or some other I/O error occurs."
      end

      operation 228123 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this reader's position to the last marked location. Invocations of
{@code read()} and {@code skip()} will occur from this new location. If
this reader was not marked, the behavior depends on the implementation of
{@code reset()} in the Reader subclass that is filtered by this reader.
The default behavior for Reader is to throw an {@code IOException}.

@throws IOException
            if a problem occurred or the filtered reader does not support
            {@code mark()} and {@code reset()}.
@see #mark(int)
@see #markSupported()"
      end

      operation 228251 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "charCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code charCount} characters in this reader. Subsequent calls to {@code read}
will not return these characters unless {@code reset} is used. The
default implementation is to skip characters in the filtered reader.

@return the number of characters actually skipped.
@throws IOException
            if the filtered reader is closed or some other I/O error
            occurs.
@see #mark(int)
@see #markSupported()
@see #reset()"
      end
    end

    class 143131 "FilterWriter"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link Writer} and performs some transformation on the
output data while it is being written. Transformations can be anything from a
simple byte-wise filtering output data to an on-the-fly compression or
decompression of the underlying writer. Writers that wrap another writer and
provide some additional functionality on top of it usually inherit from this
class.

@see FilterReader"
      classrelation 156443 // <generalisation>
	relation 156443 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 156443 // <generalisation>
	  b parent class_ref 133531 // Writer
      end

      classrelation 156571 // out (<unidirectional association>)
	relation 156571 --->
	  a role_name "out" protected
	    comment "
The Writer being filtered.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 156571 // out (<unidirectional association>)
	  b parent class_ref 133531 // Writer
      end

      operation 228379 "FilterWriter"
	protected explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 133531 // Writer
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new FilterWriter on the Writer {@code out}. All writes are
now filtered through this writer.

@param out
           the target Writer to filter writes on."
      end

      operation 228507 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this writer. This implementation closes the target writer.

@throws IOException
            if an error occurs attempting to close this writer."
      end

      operation 228635 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flushes this writer to ensure all pending data is sent out to the target
writer. This implementation flushes the target writer.

@throws IOException
            if an error occurs attempting to flush this writer."
      end

      operation 228763 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters from the char array {@code buffer}
starting at position {@code offset} to the target writer.

@param buffer
           the buffer to write.
@param offset
           the index of the first character in {@code buffer} to write.
@param count
           the number of characters in {@code buffer} to write.
@throws IOException
            if an error occurs while writing to this writer."
      end

      operation 228891 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneChar" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the specified character {@code oneChar} to the target writer. Only the
two least significant bytes of the integer {@code oneChar} are written.

@param oneChar
           the char to write to the target writer.
@throws IOException
            if an error occurs while writing to this writer."
      end

      operation 229019 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters from the string {@code str} starting at
position {@code index} to this writer. This implementation writes
{@code str} to the target writer.

@param str
           the string to be written.
@param offset
           the index of the first character in {@code str} to write.
@param count
           the number of chars in {@code str} to write.
@throws IOException
            if an error occurs while writing to this writer."
      end
    end

    class 143259 "HistoricalCharsetNames"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This could have been in Charset or Charsets, but all code uses those classes whereas no code
should need to use this, so let's not make good code pay to initialize this map."
      classrelation 156699 // historicalNames (<unidirectional association>)
	relation 156699 --->
	  a role_name "historicalNames" init_value " new HashMap<String, String>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 156699 // historicalNames (<unidirectional association>)
	  b parent class_ref 138651 // HashMap
      end

      extra_member 128411 "initialization"
	
	cpp "" ""
	java "  static {
        historicalNames.put(\"Big5-HKSCS\", \"Big5_HKSCS\");
        historicalNames.put(\"EUC-JP\", \"EUC_JP\");
        historicalNames.put(\"EUC-KR\", \"EUC_KR\");
        historicalNames.put(\"GB2312\", \"EUC_CN\");
        historicalNames.put(\"IBM-Thai\", \"Cp838\");
        historicalNames.put(\"IBM00858\", \"Cp858\");
        historicalNames.put(\"IBM01140\", \"Cp1140\");
        historicalNames.put(\"IBM01141\", \"Cp1141\");
        historicalNames.put(\"IBM01142\", \"Cp1142\");
        historicalNames.put(\"IBM01143\", \"Cp1143\");
        historicalNames.put(\"IBM01144\", \"Cp1144\");
        historicalNames.put(\"IBM01145\", \"Cp1145\");
        historicalNames.put(\"IBM01146\", \"Cp1146\");
        historicalNames.put(\"IBM01147\", \"Cp1147\");
        historicalNames.put(\"IBM01148\", \"Cp1148\");
        historicalNames.put(\"IBM01149\", \"Cp1149\");
        historicalNames.put(\"IBM037\", \"Cp037\");
        historicalNames.put(\"IBM1026\", \"Cp1026\");
        historicalNames.put(\"IBM1047\", \"Cp1047\");
        historicalNames.put(\"IBM273\", \"Cp273\");
        historicalNames.put(\"IBM277\", \"Cp277\");
        historicalNames.put(\"IBM278\", \"Cp278\");
        historicalNames.put(\"IBM280\", \"Cp280\");
        historicalNames.put(\"IBM284\", \"Cp284\");
        historicalNames.put(\"IBM285\", \"Cp285\");
        historicalNames.put(\"IBM297\", \"Cp297\");
        historicalNames.put(\"IBM420\", \"Cp420\");
        historicalNames.put(\"IBM424\", \"Cp424\");
        historicalNames.put(\"IBM437\", \"Cp437\");
        historicalNames.put(\"IBM500\", \"Cp500\");
        historicalNames.put(\"IBM775\", \"Cp775\");
        historicalNames.put(\"IBM850\", \"Cp850\");
        historicalNames.put(\"IBM852\", \"Cp852\");
        historicalNames.put(\"IBM855\", \"Cp855\");
        historicalNames.put(\"IBM857\", \"Cp857\");
        historicalNames.put(\"IBM860\", \"Cp860\");
        historicalNames.put(\"IBM861\", \"Cp861\");
        historicalNames.put(\"IBM862\", \"Cp862\");
        historicalNames.put(\"IBM863\", \"Cp863\");
        historicalNames.put(\"IBM864\", \"Cp864\");
        historicalNames.put(\"IBM865\", \"Cp865\");
        historicalNames.put(\"IBM866\", \"Cp866\");
        historicalNames.put(\"IBM868\", \"Cp868\");
        historicalNames.put(\"IBM869\", \"Cp869\");
        historicalNames.put(\"IBM870\", \"Cp870\");
        historicalNames.put(\"IBM871\", \"Cp871\");
        historicalNames.put(\"IBM918\", \"Cp918\");
        historicalNames.put(\"ISO-2022-CN\", \"ISO2022CN\");
        historicalNames.put(\"ISO-2022-JP\", \"ISO2022JP\");
        historicalNames.put(\"ISO-2022-KR\", \"ISO2022KR\");
        historicalNames.put(\"ISO-8859-1\", \"ISO8859_1\");
        historicalNames.put(\"ISO-8859-13\", \"ISO8859_13\");
        historicalNames.put(\"ISO-8859-15\", \"ISO8859_15\");
        historicalNames.put(\"ISO-8859-2\", \"ISO8859_2\");
        historicalNames.put(\"ISO-8859-3\", \"ISO8859_3\");
        historicalNames.put(\"ISO-8859-4\", \"ISO8859_4\");
        historicalNames.put(\"ISO-8859-5\", \"ISO8859_5\");
        historicalNames.put(\"ISO-8859-6\", \"ISO8859_6\");
        historicalNames.put(\"ISO-8859-7\", \"ISO8859_7\");
        historicalNames.put(\"ISO-8859-8\", \"ISO8859_8\");
        historicalNames.put(\"ISO-8859-9\", \"ISO8859_9\");
        historicalNames.put(\"KOI8-R\", \"KOI8_R\");
        historicalNames.put(\"Shift_JIS\", \"SJIS\");
        historicalNames.put(\"TIS-620\", \"TIS620\");
        historicalNames.put(\"US-ASCII\", \"ASCII\");
        historicalNames.put(\"UTF-16BE\", \"UnicodeBigUnmarked\");
        historicalNames.put(\"UTF-16LE\", \"UnicodeLittleUnmarked\");
        historicalNames.put(\"UTF-8\", \"UTF8\");
        historicalNames.put(\"windows-1250\", \"Cp1250\");
        historicalNames.put(\"windows-1251\", \"Cp1251\");
        historicalNames.put(\"windows-1252\", \"Cp1252\");
        historicalNames.put(\"windows-1253\", \"Cp1253\");
        historicalNames.put(\"windows-1254\", \"Cp1254\");
        historicalNames.put(\"windows-1255\", \"Cp1255\");
        historicalNames.put(\"windows-1256\", \"Cp1256\");
        historicalNames.put(\"windows-1257\", \"Cp1257\");
        historicalNames.put(\"windows-1258\", \"Cp1258\");
        historicalNames.put(\"windows-31j\", \"MS932\");
        historicalNames.put(\"x-Big5-Solaris\", \"Big5_Solaris\");
        historicalNames.put(\"x-euc-jp-linux\", \"EUC_JP_LINUX\");
        historicalNames.put(\"x-EUC-TW\", \"EUC_TW\");
        historicalNames.put(\"x-eucJP-Open\", \"EUC_JP_Solaris\");
        historicalNames.put(\"x-IBM1006\", \"Cp1006\");
        historicalNames.put(\"x-IBM1025\", \"Cp1025\");
        historicalNames.put(\"x-IBM1046\", \"Cp1046\");
        historicalNames.put(\"x-IBM1097\", \"Cp1097\");
        historicalNames.put(\"x-IBM1098\", \"Cp1098\");
        historicalNames.put(\"x-IBM1112\", \"Cp1112\");
        historicalNames.put(\"x-IBM1122\", \"Cp1122\");
        historicalNames.put(\"x-IBM1123\", \"Cp1123\");
        historicalNames.put(\"x-IBM1124\", \"Cp1124\");
        historicalNames.put(\"x-IBM1381\", \"Cp1381\");
        historicalNames.put(\"x-IBM1383\", \"Cp1383\");
        historicalNames.put(\"x-IBM33722\", \"Cp33722\");
        historicalNames.put(\"x-IBM737\", \"Cp737\");
        historicalNames.put(\"x-IBM856\", \"Cp856\");
        historicalNames.put(\"x-IBM874\", \"Cp874\");
        historicalNames.put(\"x-IBM875\", \"Cp875\");
        historicalNames.put(\"x-IBM921\", \"Cp921\");
        historicalNames.put(\"x-IBM922\", \"Cp922\");
        historicalNames.put(\"x-IBM930\", \"Cp930\");
        historicalNames.put(\"x-IBM933\", \"Cp933\");
        historicalNames.put(\"x-IBM935\", \"Cp935\");
        historicalNames.put(\"x-IBM937\", \"Cp937\");
        historicalNames.put(\"x-IBM939\", \"Cp939\");
        historicalNames.put(\"x-IBM942\", \"Cp942\");
        historicalNames.put(\"x-IBM942C\", \"Cp942C\");
        historicalNames.put(\"x-IBM943\", \"Cp943\");
        historicalNames.put(\"x-IBM943C\", \"Cp943C\");
        historicalNames.put(\"x-IBM948\", \"Cp948\");
        historicalNames.put(\"x-IBM949\", \"Cp949\");
        historicalNames.put(\"x-IBM949C\", \"Cp949C\");
        historicalNames.put(\"x-IBM950\", \"Cp950\");
        historicalNames.put(\"x-IBM964\", \"Cp964\");
        historicalNames.put(\"x-IBM970\", \"Cp970\");
        historicalNames.put(\"x-ISCII91\", \"ISCII91\");
        historicalNames.put(\"x-ISO-2022-CN-CNS\", \"ISO2022CN\");
        historicalNames.put(\"x-ISO-2022-CN-GB\", \"ISO2022CN\");
        historicalNames.put(\"x-JISAutoDetect\", \"JISAutoDetect\");
        historicalNames.put(\"x-MacArabic\", \"MacArabic\");
        historicalNames.put(\"x-MacCentralEurope\", \"MacCentralEurope\");
        historicalNames.put(\"x-MacCroatian\", \"MacCroatian\");
        historicalNames.put(\"x-MacCyrillic\", \"MacCyrillic\");
        historicalNames.put(\"x-MacDingbat\", \"MacDingbat\");
        historicalNames.put(\"x-MacGreek\", \"MacGreek\");
        historicalNames.put(\"x-MacHebrew\", \"MacHebrew\");
        historicalNames.put(\"x-MacIceland\", \"MacIceland\");
        historicalNames.put(\"x-MacRoman\", \"MacRoman\");
        historicalNames.put(\"x-MacRomania\", \"MacRomania\");
        historicalNames.put(\"x-MacSymbol\", \"MacSymbol\");
        historicalNames.put(\"x-MacThai\", \"MacThai\");
        historicalNames.put(\"x-MacTurkish\", \"MacTurkish\");
        historicalNames.put(\"x-MacUkraine\", \"MacUkraine\");
        historicalNames.put(\"x-MS950-HKSCS\", \"MS950_HKSCS\");
        historicalNames.put(\"x-mswin-936\", \"MS936\");
        historicalNames.put(\"x-PCK\", \"PCK\");
        historicalNames.put(\"x-windows-874\", \"MS874\");
        historicalNames.put(\"x-windows-949\", \"MS949\");
        historicalNames.put(\"x-windows-950\", \"MS950\");
    }"
	php ""
	python ""
	idl ""
      end

      operation 229147 "get"
	class_operation public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "charset" type class_ref 142491 // Charset
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 143387 "InterruptedIOException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that a blocking I/O operation has been interrupted. The number of
bytes that were transferred successfully before the interruption took place
is stored in a field of the exception."
      classrelation 156827 // <generalisation>
	relation 156827 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 156827 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 146715 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4020568460727500567L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 146843 "bytesTransferred"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bytes transferred before the I/O interrupt occurred.
"
      end

      operation 229275 "InterruptedIOException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance."
      end

      operation 229403 "InterruptedIOException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance with the given detail message."
      end

      operation 229531 "InterruptedIOException"
	public explicit_return_type ""
	nparams 2
	  param inout name "detailMessage" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance with given detail message and cause.
@hide internal use only"
      end
    end

    class 143515 "IOError"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This error is thrown when a severe I/O error has happened.

@since 1.6"
      classrelation 157595 // <generalisation>
	relation 157595 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 157595 // <generalisation>
	  b parent class_ref 143643 // Error
      end

      attribute 147483 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 67100927991680413L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 230939 "IOError"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance with its cause filled in.

@param cause
           The detail cause for the error."
      end
    end

    class 143771 "LineNumberInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link InputStream} and counts the line terminators
encountered while reading the data. Line numbering starts at 0. Recognized
line terminator sequences are {@code '\\r'}, {@code '\\n'} and {@code \"\\r\\n\"}.
When using {@code read}, line terminator sequences are always translated into
{@code '\\n'}.

@deprecated Use {@link LineNumberReader}"
      classrelation 157723 // <generalisation>
	relation 157723 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 157723 // <generalisation>
	  b parent class_ref 131739 // FilterInputStream
      end

      attribute 147611 "lineNumber"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 147739 "markedLineNumber"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 147867 "lastChar"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 147995 "markedLastChar"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 231067 "LineNumberInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code LineNumberInputStream} on the {@link InputStream}
{@code in}. Line numbers are counted for all data read from this stream.

<p><strong>Warning:</strong> passing a null source creates an invalid
{@code LineNumberInputStream}. All operations on such a stream will fail.

@param in
           The non-null input stream to count line numbers."
      end

      operation 231195 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

<p>Note that the source stream may just be a sequence of {@code \"\\r\\n\"} bytes
which are converted into {@code '\\n'} by this stream. Therefore,
{@code available} returns only {@code in.available() / 2} bytes as
result."
      end

      operation 231323 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current line number for this stream. Numbering starts at 0.

@return the current line number."
      end

      operation 231451 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a mark position in this stream. The parameter {@code readlimit}
indicates how many bytes can be read before the mark is invalidated.
Sending {@code reset()} will reposition this stream back to the marked
position, provided that {@code readlimit} has not been surpassed.
The line number count will also be reset to the last marked
line number count.
<p>
This implementation sets a mark in the filtered stream.

@param readlimit
           the number of bytes that can be read from this stream before
           the mark is invalidated.
@see #markSupported()
@see #reset()"
      end

      operation 231579 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
    @Override
"
	
	
	
	comment "Reads a single byte from the filtered stream and returns it as an integer
in the range from 0 to 255. Returns -1 if the end of this stream has been
reached.
<p>
The line number count is incremented if a line terminator is encountered.
Recognized line terminator sequences are {@code '\\r'}, {@code '\\n'} and
{@code \"\\r\\n\"}. Line terminator sequences are always translated into
{@code '\\n'}.

@return the byte read or -1 if the end of the filtered stream has been
        reached.
@throws IOException
            if the stream is closed or another IOException occurs."
      end

      operation 231707 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code length} bytes from the filtered stream and stores
them in the byte array {@code buffer} starting at {@code offset}.
Returns the number of bytes actually read or -1 if no bytes have been
read and the end of this stream has been reached.
<p>
The line number count is incremented if a line terminator is encountered.
Recognized line terminator sequences are {@code '\\r'}, {@code '\\n'} and
{@code \"\\r\\n\"}. Line terminator sequences are always translated into
{@code '\\n'}.

@param buffer
           the array in which to store the bytes read.
@param offset
           the initial position in {@code buffer} to store the bytes read
           from this stream.
@param length
           the maximum number of bytes to store in {@code buffer}.
@return the number of bytes actually read or -1 if the end of the
        filtered stream has been reached while reading.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the length of
            {@code buffer}.
@throws IOException
            if this stream is closed or another IOException occurs.
@throws NullPointerException
            if {@code buffer} is {@code null}."
      end

      operation 231835 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this stream to the last marked location. It also resets the line
count to what is was when this stream was marked.

@throws IOException
            if this stream is already closed, no mark has been set or the
            mark is no longer valid because more than {@code readlimit}
            bytes have been read since setting the mark.
@see #mark(int)
@see #markSupported()"
      end

      operation 231963 "setLineNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "lineNumber" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the line number of this stream to the specified
{@code lineNumber}. Note that this may have side effects on the
line number associated with the last marked position.

@param lineNumber
           the new lineNumber value.
@see #mark(int)
@see #reset()"
      end

      operation 232091 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "byteCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code count} number of bytes in this stream. Subsequent
calls to {@code read} will not return these bytes unless {@code reset} is
used. This implementation skips {@code byteCount} bytes in the
filtered stream and increments the line number count whenever line
terminator sequences are skipped.

@param byteCount
           the number of bytes to skip.
@return the number of bytes actually skipped.
@throws IOException
            if this stream is closed or another IOException occurs.
@see #mark(int)
@see #read()
@see #reset()"
      end
    end

    class 143899 "LineNumberReader"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link Reader} and counts the line terminators encountered
while reading the data. The line number starts at 0 and is incremented any
time {@code '\\r'}, {@code '\\n'} or {@code \"\\r\\n\"} is read. The class has an
internal buffer for its data. The size of the buffer defaults to 8 KB."
      classrelation 157851 // <generalisation>
	relation 157851 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 157851 // <generalisation>
	  b parent class_ref 132891 // BufferedReader
      end

      attribute 148123 "lineNumber"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148251 "markedLineNumber"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148379 "lastWasCR"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 148507 "markedLastWasCR"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 232219 "LineNumberReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 133019 // Reader
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new LineNumberReader on the Reader {@code in}. The internal
buffer gets the default size (8 KB).

@param in
           the Reader that is buffered."
      end

      operation 232347 "LineNumberReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 133019 // Reader
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new LineNumberReader on the Reader {@code in}. The size of
the internal buffer is specified by the parameter {@code size}.

@param in
           the Reader that is buffered.
@param size
           the size of the buffer to allocate.
@throws IllegalArgumentException
            if {@code size <= 0}."
      end

      operation 232475 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current line number for this reader. Numbering starts at 0.

@return the current line number."
      end

      operation 232603 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a mark position in this reader. The parameter {@code readlimit}
indicates how many characters can be read before the mark is invalidated.
Sending {@code reset()} will reposition this reader back to the marked
position, provided that {@code readlimit} has not been surpassed. The
line number associated with this marked position is also stored so that
it can be restored when {@code reset()} is called.

@param readlimit
           the number of characters that can be read from this stream
           before the mark is invalidated.
@throws IOException
            if an error occurs while setting the mark in this reader.
@see #markSupported()
@see #reset()"
      end

      operation 232731 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
    @Override
"
	
	
	
	comment "Reads a single character from the source reader and returns it as an
integer with the two higher-order bytes set to 0. Returns -1 if the end
of the source reader has been reached.
<p>
The line number count is incremented if a line terminator is encountered.
Recognized line terminator sequences are {@code '\\r'}, {@code '\\n'} and
{@code \"\\r\\n\"}. Line terminator sequences are always translated into
{@code '\\n'}.

@return the character read or -1 if the end of the source reader has been
        reached.
@throws IOException
            if the reader is closed or another IOException occurs."
      end

      operation 232859 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code count} characters from the source reader and stores
them in the character array {@code buffer} starting at {@code offset}.
Returns the number of characters actually read or -1 if no characters
have been read and the end of this reader has been reached.
<p>
The line number count is incremented if a line terminator is encountered.
Recognized line terminator sequences are {@code '\\r'}, {@code '\\n'} and
{@code \"\\r\\n\"}.

@param buffer
           the array in which to store the characters read.
@param offset
           the initial position in {@code buffer} to store the characters
           read from this reader.
@param count
           the maximum number of characters to store in {@code buffer}.
@return the number of characters actually read or -1 if the end of the
        source reader has been reached while reading.
@throws IOException
            if this reader is closed or another IOException occurs."
      end

      operation 232987 "readLine"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the next line of text available from this reader. A line is
represented by 0 or more characters followed by {@code '\\r'},
{@code '\\n'}, {@code \"\\r\\n\"} or the end of the stream. The returned
string does not include the newline sequence.

@return the contents of the line or {@code null} if no characters have
        been read before the end of the stream has been reached.
@throws IOException
            if this reader is closed or another IOException occurs."
      end

      operation 233115 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this reader to the last marked location. It also resets the line
count to what is was when this reader was marked. This implementation
resets the source reader.

@throws IOException
            if this reader is already closed, no mark has been set or the
            mark is no longer valid because more than {@code readlimit}
            bytes have been read since setting the mark.
@see #mark(int)
@see #markSupported()"
      end

      operation 233243 "setLineNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "lineNumber" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the line number of this reader to the specified {@code lineNumber}.
Note that this may have side effects on the line number associated with
the last marked position.

@param lineNumber
           the new line number value.
@see #mark(int)
@see #reset()"
      end

      operation 233371 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "charCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code charCount} characters in this reader. Subsequent calls to
{@code read} will not return these characters unless {@code reset}
is used. This implementation skips {@code charCount} number of characters in
the source reader and increments the line number count whenever line
terminator sequences are skipped.

@return the number of characters actually skipped.
@throws IllegalArgumentException
            if {@code charCount < 0}.
@throws IOException
            if this reader is closed or another IOException occurs.
@see #mark(int)
@see #read()
@see #reset()"
      end
    end

    class 144027 "NotSerializableException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that an object that is not serializable has been passed into the
{@code ObjectOutput.writeObject()} method. This can happen if the object
does not implement {@code Serializable} or {@code Externalizable}, or if it
is serializable but it overrides {@code writeObject(ObjectOutputStream)} and
explicitly prevents serialization by throwing this type of exception.

@see ObjectOutput#writeObject(Object)
@see ObjectOutputStream#writeObject(Object)"
      classrelation 158107 // <generalisation>
	relation 158107 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 158107 // <generalisation>
	  b parent class_ref 139291 // ObjectStreamException
      end

      attribute 148763 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2906642554793891381L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 233755 "NotSerializableException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code NotSerializableException} with its stack trace
filled in."
      end

      operation 233883 "NotSerializableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@link NotSerializableException} with its stack trace
and detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end

    class 144923 "PipedInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Receives information from a communications pipe. When two threads want to
pass data back and forth, one creates a piped output stream and the other one
creates a piped input stream.

@see PipedOutputStream"
      classrelation 162331 // <generalisation>
	relation 162331 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 162331 // <generalisation>
	  b parent class_ref 131867 // InputStream
      end

      classrelation 162459 // lastReader (<unidirectional association>)
	relation 162459 --->
	  a role_name "lastReader" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 162459 // lastReader (<unidirectional association>)
	  b parent class_ref 1201420 // Thread
      end

      classrelation 162587 // lastWriter (<unidirectional association>)
	relation 162587 --->
	  a role_name "lastWriter" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 162587 // lastWriter (<unidirectional association>)
	  b parent class_ref 1201420 // Thread
      end

      attribute 151579 "isClosed"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 151707 "buffer"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The circular buffer through which data is passed. Data is read from the
range {@code [out, in)} and written to the range {@code [in, out)}.
Data in the buffer is either sequential: <pre>
    { - - - X X X X X X X - - - - - }
            ^             ^
            |             |
           out           in</pre>
...or wrapped around the buffer's end: <pre>
    { X X X X - - - - - - - - X X X }
              ^               ^
              |               |
             in              out</pre>
When the buffer is empty, {@code in == -1}. Reading when the buffer is
empty will block until data is available. When the buffer is full,
{@code in == out}. Writing when the buffer is full will block until free
space is available.
"
      end

      attribute 151835 "in"
	protected explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index in {@code buffer} where the next byte will be written.
"
      end

      attribute 151963 "out"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index in {@code buffer} where the next byte will be read.
"
      end

      attribute 152091 "PIPE_SIZE"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 1024"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The size of the default pipe in bytes.
"
      end

      attribute 152219 "isConnected"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates if this pipe is connected.
"
      end

      operation 245147 "PipedInputStream"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new unconnected {@code PipedInputStream}. The resulting
stream must be connected to a {@link PipedOutputStream} before data may
be read from it."
      end

      operation 245275 "PipedInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 145051 // PipedOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PipedInputStream} connected to the
{@link PipedOutputStream} {@code out}. Any data written to the output
stream can be read from the this input stream.

@param out
           the piped output stream to connect to.
@throws IOException
            if this stream or {@code out} are already connected."
      end

      operation 245403 "PipedInputStream"
	public explicit_return_type ""
	nparams 1
	  param in name "pipeSize" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new unconnected {@code PipedInputStream} with the given
buffer size. The resulting stream must be connected to a
{@code PipedOutputStream} before data may be read from it.

@param pipeSize the size of the buffer in bytes.
@throws IllegalArgumentException if pipeSize is less than or equal to zero.
@since 1.6"
      end

      operation 245531 "PipedInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 145051 // PipedOutputStream
	  param in name "pipeSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PipedInputStream} connected to the given {@code PipedOutputStream},
with the given buffer size. Any data written to the output stream can be read from this
input stream.

@param out the {@code PipedOutputStream} to connect to.
@param pipeSize the size of the buffer in bytes.
@throws IOException if an I/O error occurs.
@throws IllegalArgumentException if pipeSize is less than or equal to zero.
@since 1.6"
      end

      operation 245659 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

<p>Unlike most streams, {@code PipedInputStream} returns 0 rather than throwing
{@code IOException} if the stream has been closed. Unconnected and broken pipes also
return 0.

@throws IOException if an I/O error occurs"
      end

      operation 245787 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream. This implementation releases the buffer used for the
pipe and notifies all threads waiting to read or write.

@throws IOException
            if an error occurs while closing this stream."
      end

      operation 245915 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "src" type class_ref 145051 // PipedOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this {@code PipedInputStream} to a {@link PipedOutputStream}.
Any data written to the output stream becomes readable in this input
stream.

@param src
           the source output stream.
@throws IOException
            if either stream is already connected."
      end

      operation 246043 "establishConnection"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the connection to the PipedOutputStream.

@throws IOException
            If this Reader is already connected."
      end

      operation 246171 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single byte from this stream and returns it as an integer in the
range from 0 to 255. Returns -1 if the end of this stream has been
reached. If there is no data in the pipe, this method blocks until data
is available, the end of the stream is detected or an exception is
thrown.
<p>
Separate threads should be used to read from a {@code PipedInputStream}
and to write to the connected {@link PipedOutputStream}. If the same
thread is used, a deadlock may occur.

@return the byte read or -1 if the end of the source stream has been
        reached.
@throws IOException
            if this stream is closed or not connected to an output
            stream, or if the thread writing to the connected output
            stream is no longer alive."
      end

      operation 246299 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code byteCount} bytes from this stream and stores them in the
byte array {@code bytes} starting at {@code offset}. Blocks until at
least one byte has been read, the end of the stream is detected or an
exception is thrown.
<p>
Separate threads should be used to read from a {@code PipedInputStream}
and to write to the connected {@link PipedOutputStream}. If the same
thread is used, a deadlock may occur.

@return the number of bytes actually read or -1 if the end of the stream
        has been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code byteCount < 0}, or if {@code
            offset + byteCount} is greater than the size of {@code bytes}.
@throws InterruptedIOException
            if the thread reading from this stream is interrupted.
@throws IOException
            if this stream is closed or not connected to an output
            stream, or if the thread writing to the connected output
            stream is no longer alive.
@throws NullPointerException
            if {@code bytes} is {@code null}."
      end

      operation 246427 "receive"
	protected explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives a byte and stores it in this stream's {@code buffer}. This
method is called by {@link PipedOutputStream#write(int)}. The least
significant byte of the integer {@code oneByte} is stored at index
{@code in} in the {@code buffer}.
<p>
This method blocks as long as {@code buffer} is full.

@param oneByte
           the byte to store in this pipe.
@throws InterruptedIOException
            if the {@code buffer} is full and the thread that has called
            this method is interrupted.
@throws IOException
            if this stream is closed or the thread that has last read
            from this stream is no longer alive."
      end

      operation 246555 "done"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 145051 "PipedOutputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Places information on a communications pipe. When two threads want to pass
data back and forth, one creates a piped output stream and the other one
creates a piped input stream.

@see PipedInputStream"
      classrelation 162715 // <generalisation>
	relation 162715 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 162715 // <generalisation>
	  b parent class_ref 132635 // OutputStream
      end

      classrelation 162843 // target (<unidirectional association>)
	relation 162843 --->
	  a role_name "target" private
	    comment "
The destination PipedInputStream

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 162843 // target (<unidirectional association>)
	  b parent class_ref 144923 // PipedInputStream
      end

      operation 246683 "PipedOutputStream"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new unconnected {@code PipedOutputStream}. The resulting
stream must be connected to a {@link PipedInputStream} before data can be
written to it."
      end

      operation 246811 "PipedOutputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 144923 // PipedInputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PipedOutputStream} connected to the
{@link PipedInputStream} {@code target}. Any data written to this stream
can be read from the target stream.

@param target
           the piped input stream to connect to.
@throws IOException
            if this stream or {@code target} are already connected."
      end

      operation 246939 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream. If this stream is connected to an input stream, the
input stream is closed and the pipe is disconnected.

@throws IOException
            if an error occurs while closing this stream."
      end

      operation 247067 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 144923 // PipedInputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this stream to a {@link PipedInputStream}. Any data written to
this output stream becomes readable in the input stream.

@param stream
           the piped input stream to connect to.
@throws IOException
            if either stream is already connected."
      end

      operation 247195 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Notifies the readers of this {@link PipedInputStream} that bytes can be
read. This method does nothing if this stream is not connected.

@throws IOException
            if an I/O error occurs while flushing this stream."
      end

      operation 247323 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} bytes from the byte array {@code buffer} starting at
{@code offset} to this stream. The written data can then be read from the
connected input stream.
<p>
Separate threads should be used to write to a {@code PipedOutputStream}
and to read from the connected {@link PipedInputStream}. If the same
thread is used, a deadlock may occur.

@param buffer
           the buffer to write.
@param offset
           the index of the first byte in {@code buffer} to write.
@param count
           the number of bytes from {@code buffer} to write to this
           stream.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is bigger than the length of {@code buffer}.
@throws InterruptedIOException
            if the pipe is full and the current thread is interrupted
            waiting for space to write data. This case is not currently
            handled correctly.
@throws IOException
            if this stream is not connected, if the target stream is
            closed or if the thread reading from the target stream is no
            longer alive. This case is currently not handled correctly."
      end

      operation 247451 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes a single byte to this stream. Only the least significant byte of
the integer {@code oneByte} is written. The written byte can then be read
from the connected input stream.
<p>
Separate threads should be used to write to a {@code PipedOutputStream}
and to read from the connected {@link PipedInputStream}. If the same
thread is used, a deadlock may occur.

@param oneByte
           the byte to write.
@throws InterruptedIOException
            if the pipe is full and the current thread is interrupted
            waiting for space to write data. This case is not currently
            handled correctly.
@throws IOException
            if this stream is not connected, if the target stream is
            closed or if the thread reading from the target stream is no
            longer alive. This case is currently not handled correctly."
      end
    end

    class 145179 "PipedReader"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Receives information on a communications pipe. When two threads want to pass
data back and forth, one creates a piped writer and the other creates a piped
reader.

@see PipedWriter"
      classrelation 162971 // <generalisation>
	relation 162971 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 162971 // <generalisation>
	  b parent class_ref 133019 // Reader
      end

      classrelation 163099 // lastReader (<unidirectional association>)
	relation 163099 --->
	  a role_name "lastReader" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 163099 // lastReader (<unidirectional association>)
	  b parent class_ref 1201420 // Thread
      end

      classrelation 163227 // lastWriter (<unidirectional association>)
	relation 163227 --->
	  a role_name "lastWriter" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 163227 // lastWriter (<unidirectional association>)
	  b parent class_ref 1201420 // Thread
      end

      attribute 152347 "isClosed"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 152475 "buffer"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The circular buffer through which data is passed. Data is read from the
range {@code [out, in)} and written to the range {@code [in, out)}.
Data in the buffer is either sequential: <pre>
    { - - - X X X X X X X - - - - - }
            ^             ^
            |             |
           out           in</pre>
...or wrapped around the buffer's end: <pre>
    { X X X X - - - - - - - - X X X }
              ^               ^
              |               |
             in              out</pre>
When the buffer is empty, {@code in == -1}. Reading when the buffer is
empty will block until data is available. When the buffer is full,
{@code in == out}. Writing when the buffer is full will block until free
space is available.
"
      end

      attribute 152603 "in"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index in {@code buffer} where the next character will be written.
"
      end

      attribute 152731 "out"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index in {@code buffer} where the next character will be read.
"
      end

      attribute 152859 "PIPE_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1024"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The size of the default pipe in characters
"
      end

      attribute 152987 "isConnected"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates if this pipe is connected
"
      end

      operation 247579 "PipedReader"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new unconnected {@code PipedReader}. The resulting reader
must be connected to a {@code PipedWriter} before data may be read from
it."
      end

      operation 247707 "PipedReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "out" type class_ref 145307 // PipedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PipedReader} connected to the {@link PipedWriter}
{@code out}. Any data written to the writer can be read from the this
reader.

@param out
           the {@code PipedWriter} to connect to.
@throws IOException
            if {@code out} is already connected."
      end

      operation 247835 "PipedReader"
	public explicit_return_type ""
	nparams 1
	  param in name "pipeSize" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new unconnected {@code PipedReader} with the given buffer size.
The resulting reader must be connected to a {@code PipedWriter} before
data may be read from it.

@param pipeSize the size of the buffer in chars.
@throws IllegalArgumentException if pipeSize is less than or equal to zero.
@since 1.6"
      end

      operation 247963 "PipedReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 145307 // PipedWriter
	  param in name "pipeSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PipedReader} connected to the given {@code PipedWriter},
with the given buffer size. Any data written to the writer can be read from
this reader.

@param out the {@code PipedWriter} to connect to.
@param pipeSize the size of the buffer in chars.
@throws IOException if an I/O error occurs
@throws IllegalArgumentException if pipeSize is less than or equal to zero.
@since 1.6"
      end

      operation 248091 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this reader. This implementation releases the buffer used for
the pipe and notifies all threads waiting to read or write.

@throws IOException
            if an error occurs while closing this reader."
      end

      operation 248219 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "src" type class_ref 145307 // PipedWriter
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this {@code PipedReader} to a {@link PipedWriter}. Any data
written to the writer becomes readable in this reader.

@param src
           the writer to connect to.
@throws IOException
            if this reader is closed or already connected, or if {@code
            src} is already connected."
      end

      operation 248347 "establishConnection"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the connection to the PipedWriter.

@throws IOException
            If this Reader is already connected."
      end

      operation 248475 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single character from this reader and returns it as an integer
with the two higher-order bytes set to 0. Returns -1 if the end of the
reader has been reached. If there is no data in the pipe, this method
blocks until data is available, the end of the reader is detected or an
exception is thrown.
<p>
Separate threads should be used to read from a {@code PipedReader} and to
write to the connected {@link PipedWriter}. If the same thread is used,
a deadlock may occur.

@return the character read or -1 if the end of the reader has been
        reached.
@throws IOException
            if this reader is closed or some other I/O error occurs."
      end

      operation 248603 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code count} characters from this reader and stores them
in the character array {@code buffer} starting at {@code offset}. If
there is no data in the pipe, this method blocks until at least one byte
has been read, the end of the reader is detected or an exception is
thrown.
<p>
Separate threads should be used to read from a {@code PipedReader} and to
write to the connected {@link PipedWriter}. If the same thread is used, a
deadlock may occur.

@param buffer
           the character array in which to store the characters read.
@param offset
           the initial position in {@code bytes} to store the characters
           read from this reader.
@param count
           the maximum number of characters to store in {@code buffer}.
@return the number of characters read or -1 if the end of the reader has
        been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is greater than the size of {@code buffer}.
@throws InterruptedIOException
            if the thread reading from this reader is interrupted.
@throws IOException
            if this reader is closed or not connected to a writer, or if
            the thread writing to the connected writer is no longer
            alive."
      end

      operation 248731 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader is ready to be read without blocking.
Returns {@code true} if this reader will not block when {@code read} is
called, {@code false} if unknown or blocking will occur. This
implementation returns {@code true} if the internal buffer contains
characters that can be read.

@return always {@code false}.
@throws IOException
            if this reader is closed or not connected, or if some other
            I/O error occurs.
@see #read()
@see #read(char[], int, int)"
      end

      operation 248859 "receive"
	package explicit_return_type "void"
	nparams 1
	  param in name "oneChar" explicit_type "char"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives a char and stores it into the PipedReader. This called by
PipedWriter.write() when writes occur.
<P>
If the buffer is full and the thread sending #receive is interrupted, the
InterruptedIOException will be thrown.

@param oneChar
           the char to store into the pipe.

@throws IOException
            If the stream is already closed or another IOException
            occurs."
      end

      operation 248987 "receive"
	package explicit_return_type "void"
	nparams 3
	  param inout name "chars" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receives a char array and stores it into the PipedReader. This called by
PipedWriter.write() when writes occur.
<P>
If the buffer is full and the thread sending #receive is interrupted, the
InterruptedIOException will be thrown.

@throws IOException
            If the stream is already closed or another IOException
            occurs."
      end

      operation 249115 "done"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 145307 "PipedWriter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Places information on a communications pipe. When two threads want to pass
data back and forth, one creates a piped writer and the other creates a piped
reader.

@see PipedReader"
      classrelation 163355 // <generalisation>
	relation 163355 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 163355 // <generalisation>
	  b parent class_ref 133531 // Writer
      end

      classrelation 163483 // destination (<unidirectional association>)
	relation 163483 --->
	  a role_name "destination" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 163483 // destination (<unidirectional association>)
	  b parent class_ref 145179 // PipedReader
      end

      attribute 153115 "isClosed"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 249243 "PipedWriter"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new unconnected {@code PipedWriter}. The resulting writer
must be connected to a {@code PipedReader} before data may be written to
it.

@see PipedReader"
      end

      operation 249371 "PipedWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "destination" type class_ref 145179 // PipedReader
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PipedWriter} connected to {@code destination}.
Any data written to this writer can be read from {@code destination}.

@param destination
           the {@code PipedReader} to connect to.
@throws IOException
            if {@code destination} is already connected."
      end

      operation 249499 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this writer. If a {@link PipedReader} is connected to this writer,
it is closed as well and the pipe is disconnected. Any data buffered in
the reader can still be read.

@throws IOException
            if an error occurs while closing this writer."
      end

      operation 249627 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 145179 // PipedReader
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this {@code PipedWriter} to a {@link PipedReader}. Any data
written to this writer becomes readable in the reader.

@param reader
           the reader to connect to.
@throws IOException
            if this writer is closed or already connected, or if {@code
            reader} is already connected."
      end

      operation 249755 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Notifies the readers of this {@code PipedReader} that characters can be read. This
method does nothing if this Writer is not connected.

@throws IOException
            if an I/O error occurs while flushing this writer."
      end

      operation 249883 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters from the character array {@code buffer}
starting at offset {@code index} to this writer. The written data can
then be read from the connected {@link PipedReader} instance.
<p>
Separate threads should be used to write to a {@code PipedWriter} and to
read from the connected {@code PipedReader}. If the same thread is used,
a deadlock may occur.

@param buffer
           the buffer to write.
@param offset
           the index of the first character in {@code buffer} to write.
@param count
           the number of characters from {@code buffer} to write to this
           writer.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is bigger than the length of {@code buffer}.
@throws InterruptedIOException
            if the pipe is full and the current thread is interrupted
            waiting for space to write data. This case is not currently
            handled correctly.
@throws IOException
            if this writer is closed or not connected, if the target
            reader is closed or if the thread reading from the target
            reader is no longer alive. This case is currently not handled
            correctly.
@throws NullPointerException
            if {@code buffer} is {@code null}."
      end

      operation 250011 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes a single character {@code c} to this writer. This character can
then be read from the connected {@link PipedReader} instance.
<p>
Separate threads should be used to write to a {@code PipedWriter} and to
read from the connected {@code PipedReader}. If the same thread is used,
a deadlock may occur.

@param c
           the character to write.
@throws InterruptedIOException
            if the pipe is full and the current thread is interrupted
            waiting for space to write data. This case is not currently
            handled correctly.
@throws IOException
            if this writer is closed or not connected, if the target
            reader is closed or if the thread reading from the target
            reader is no longer alive. This case is currently not handled
            correctly."
      end
    end

    class 145435 "PushbackInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link InputStream} and adds functionality to \"push back\"
bytes that have been read, so that they can be read again. Parsers may find
this useful. The number of bytes which may be pushed back can be specified
during construction. If the buffer of pushed back bytes is empty, bytes are
read from the underlying input stream."
      classrelation 164123 // <generalisation>
	relation 164123 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 164123 // <generalisation>
	  b parent class_ref 131739 // FilterInputStream
      end

      attribute 153499 "buf"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The buffer that contains pushed-back bytes.
"
      end

      attribute 153627 "pos"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current position within {@code buf}. A value equal to
{@code buf.length} indicates that no bytes are available. A value of 0
indicates that the buffer is full.
"
      end

      operation 255387 "PushbackInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PushbackInputStream} with the specified input
stream as source. The size of the pushback buffer is set to the default
value of 1 byte.

<p><strong>Warning:</strong> passing a null source creates an invalid
{@code PushbackInputStream}. All read operations on such a stream will
fail.

@param in
           the source input stream."
      end

      operation 255515 "PushbackInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 131867 // InputStream
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PushbackInputStream} with {@code in} as source
input stream. The size of the pushback buffer is set to {@code size}.

<p><strong>Warning:</strong> passing a null source creates an invalid
{@code PushbackInputStream}. All read operations on such a stream will
fail.

@param in
           the source input stream.
@param size
           the size of the pushback buffer.
@throws IllegalArgumentException
            if {@code size} is negative."
      end

      operation 255643 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 255771 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream. This implementation closes the source stream
and releases the pushback buffer.

@throws IOException
            if an error occurs while closing this stream."
      end

      operation 255899 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this stream supports the {@code mark(int)} and
{@code reset()} methods. {@code PushbackInputStream} does not support
them, so it returns {@code false}.

@return always {@code false}.
@see #mark(int)
@see #reset()"
      end

      operation 256027 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single byte from this stream and returns it as an integer in the
range from 0 to 255. If the pushback buffer does not contain any
available bytes then a byte from the source input stream is returned.
Blocks until one byte has been read, the end of the source stream is
detected or an exception is thrown.

@return the byte read or -1 if the end of the source stream has been
        reached.
@throws IOException
            if this stream is closed or an I/O error occurs while reading
            from this stream."
      end

      operation 256155 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code length} bytes from this stream and stores them in
the byte array {@code buffer} starting at {@code offset}. Bytes are read
from the pushback buffer first, then from the source stream if more bytes
are required. Blocks until {@code count} bytes have been read, the end of
the source stream is detected or an exception is thrown.

@param buffer
           the array in which to store the bytes read from this stream.
@param offset
           the initial position in {@code buffer} to store the bytes read
           from this stream.
@param length
           the maximum number of bytes to store in {@code buffer}.
@return the number of bytes read or -1 if the end of the source stream
        has been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the length of
            {@code buffer}.
@throws IOException
            if this stream is closed or another I/O error occurs while
            reading from this stream.
@throws NullPointerException
            if {@code buffer} is {@code null}."
      end

      operation 256283 "streamClosed"
	private return_type class_ref 128539 // IOException
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 256411 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "byteCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code byteCount} bytes in this stream. This implementation skips bytes
in the pushback buffer first and then in the source stream if necessary.

@return the number of bytes actually skipped.
@throws IOException
            if this stream is closed or another I/O error occurs."
      end

      operation 256539 "unread"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes all the bytes in {@code buffer} back to this stream. The bytes are
pushed back in such a way that the next byte read from this stream is
buffer[0], then buffer[1] and so on.
<p>
If this stream's internal pushback buffer cannot store the entire
contents of {@code buffer}, an {@code IOException} is thrown. Parts of
{@code buffer} may have already been copied to the pushback buffer when
the exception is thrown.

@param buffer
           the buffer containing the bytes to push back to this stream.
@throws IOException
            if the free space in the internal pushback buffer is not
            sufficient to store the contents of {@code buffer}."
      end

      operation 256667 "unread"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes a subset of the bytes in {@code buffer} back to this stream. The
subset is defined by the start position {@code offset} within
{@code buffer} and the number of bytes specified by {@code length}. The
bytes are pushed back in such a way that the next byte read from this
stream is {@code buffer[offset]}, then {@code buffer[1]} and so on.
<p>
If this stream's internal pushback buffer cannot store the selected
subset of {@code buffer}, an {@code IOException} is thrown. Parts of
{@code buffer} may have already been copied to the pushback buffer when
the exception is thrown.

@param buffer
           the buffer containing the bytes to push back to this stream.
@param offset
           the index of the first byte in {@code buffer} to push back.
@param length
           the number of bytes to push back.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the length of
            {@code buffer}.
@throws IOException
            if the free space in the internal pushback buffer is not
            sufficient to store the selected contents of {@code buffer}."
      end

      operation 256795 "unread"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes the specified byte {@code oneByte} back to this stream. Only the
least significant byte of the integer {@code oneByte} is pushed back.
This is done in such a way that the next byte read from this stream is
{@code (byte) oneByte}.
<p>
If this stream's internal pushback buffer cannot store the byte, an
{@code IOException} is thrown.

@param oneByte
           the byte to push back to this stream.
@throws IOException
            if this stream is closed or the internal pushback buffer is
            full."
      end

      operation 256923 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Marks the current position in this stream. Setting a mark is not
supported in this class; this implementation does nothing.

@param readlimit
           the number of bytes that can be read from this stream before
           the mark is invalidated; this parameter is ignored."
      end

      operation 257051 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this stream to the last marked position. Resetting the stream is
not supported in this class; this implementation always throws an
{@code IOException}.

@throws IOException
            if this method is called."
      end
    end

    class 145563 "PushbackReader"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps an existing {@link Reader} and adds functionality to \"push back\"
characters that have been read, so that they can be read again. Parsers may
find this useful. The number of characters which may be pushed back can be
specified during construction. If the buffer of pushed back bytes is empty,
characters are read from the underlying reader."
      classrelation 164251 // <generalisation>
	relation 164251 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 164251 // <generalisation>
	  b parent class_ref 143003 // FilterReader
      end

      attribute 153755 "buf"
	package explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code char} array containing the chars to read.
"
      end

      attribute 153883 "pos"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current position within the char array {@code buf}. A value
equal to buf.length indicates no chars available. A value of 0 indicates
the buffer is full.
"
      end

      operation 257179 "PushbackReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 133019 // Reader
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PushbackReader} with the specified reader as
source. The size of the pushback buffer is set to the default value of 1
character.

@param in
           the source reader."
      end

      operation 257307 "PushbackReader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 133019 // Reader
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code PushbackReader} with {@code in} as source reader.
The size of the pushback buffer is set to {@code size}.

@param in
           the source reader.
@param size
           the size of the pushback buffer.
@throws IllegalArgumentException
            if {@code size} is negative."
      end

      operation 257435 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this reader. This implementation closes the source reader
and releases the pushback buffer.

@throws IOException
            if an error occurs while closing this reader."
      end

      operation 257563 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readAheadLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Marks the current position in this stream. Setting a mark is not
supported in this class; this implementation always throws an
{@code IOException}.

@param readAheadLimit
           the number of character that can be read from this reader
           before the mark is invalidated; this parameter is ignored.
@throws IOException
            if this method is called."
      end

      operation 257691 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader supports the {@code mark(int)} and
{@code reset()} methods. {@code PushbackReader} does not support them, so
it returns {@code false}.

@return always {@code false}.
@see #mark(int)
@see #reset()"
      end

      operation 257819 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single character from this reader and returns it as an integer
with the two higher-order bytes set to 0. Returns -1 if the end of the
reader has been reached. If the pushback buffer does not contain any
available characters then a character from the source reader is returned.
Blocks until one character has been read, the end of the source reader is
detected or an exception is thrown.

@return the character read or -1 if the end of the source reader has been
        reached.
@throws IOException
            if this reader is closed or an I/O error occurs while reading
            from this reader."
      end

      operation 257947 "checkNotClosed"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 258075 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code length} bytes from this reader and stores them in
byte array {@code buffer} starting at {@code offset}. Characters are
read from the pushback buffer first, then from the source reader if more
bytes are required. Blocks until {@code count} characters have been read,
the end of the source reader is detected or an exception is thrown.

@param buffer
           the array in which to store the characters read from this
           reader.
@param offset
           the initial position in {@code buffer} to store the characters
           read from this reader.
@param count
           the maximum number of bytes to store in {@code buffer}.
@return the number of bytes read or -1 if the end of the source reader
        has been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if
            {@code offset + count} is greater than the length of
            {@code buffer}.
@throws IOException
            if this reader is closed or another I/O error occurs while
            reading from this reader."
      end

      operation 258203 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader is ready to be read without blocking.
Returns {@code true} if this reader will not block when {@code read} is
called, {@code false} if unknown or blocking will occur.

@return {@code true} if the receiver will not block when
        {@code read()} is called, {@code false} if unknown
        or blocking will occur.
@throws IOException
            if this reader is closed or some other I/O error occurs.
@see #read()
@see #read(char[], int, int)"
      end

      operation 258331 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this reader to the last marked position. Resetting the reader is
not supported in this class; this implementation always throws an
{@code IOException}.

@throws IOException
            if this method is called."
      end

      operation 258459 "unread"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "char"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes all the characters in {@code buffer} back to this reader. The
characters are pushed back in such a way that the next character read
from this reader is buffer[0], then buffer[1] and so on.
<p>
If this reader's internal pushback buffer cannot store the entire
contents of {@code buffer}, an {@code IOException} is thrown. Parts of
{@code buffer} may have already been copied to the pushback buffer when
the exception is thrown.

@param buffer
           the buffer containing the characters to push back to this
           reader.
@throws IOException
            if this reader is closed or the free space in the internal
            pushback buffer is not sufficient to store the contents of
            {@code buffer}."
      end

      operation 258587 "unread"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes a subset of the characters in {@code buffer} back to this reader.
The subset is defined by the start position {@code offset} within
{@code buffer} and the number of characters specified by {@code length}.
The bytes are pushed back in such a way that the next byte read from this
stream is {@code buffer[offset]}, then {@code buffer[1]} and so on.
<p>
If this stream's internal pushback buffer cannot store the selected
subset of {@code buffer}, an {@code IOException} is thrown. Parts of
{@code buffer} may have already been copied to the pushback buffer when
the exception is thrown.

@param buffer
           the buffer containing the characters to push back to this
           reader.
@param offset
           the index of the first byte in {@code buffer} to push back.
@param length
           the number of bytes to push back.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if
            {@code offset + count} is greater than the length of
            {@code buffer}.
@throws IOException
            if this reader is closed or the free space in the internal
            pushback buffer is not sufficient to store the selected
            contents of {@code buffer}.
@throws NullPointerException
            if {@code buffer} is {@code null}."
      end

      operation 258715 "unread"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneChar" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes the specified character {@code oneChar} back to this reader. This
is done in such a way that the next character read from this reader is
{@code (char) oneChar}.
<p>
If this reader's internal pushback buffer cannot store the character, an
{@code IOException} is thrown.

@param oneChar
           the character to push back to this stream.
@throws IOException
            if this reader is closed or the internal pushback buffer is
            full."
      end

      operation 258843 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "charCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code charCount} characters in this reader. This implementation skips
characters in the pushback buffer first and then in the source reader if
necessary.

@return the number of characters actually skipped.
@throws IllegalArgumentException if {@code charCount < 0}.
@throws IOException
            if this reader is closed or another I/O error occurs."
      end
    end

    class 145691 "RandomAccessFile"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Allows reading from and writing to a file in a random-access manner. This is
different from the uni-directional sequential access that a
{@link FileInputStream} or {@link FileOutputStream} provides. If the file is
opened in read/write mode, write operations are available as well. The
position of the next read or write operation can be moved forwards and
backwards after every operation."
      classrelation 164379 // <realization>
	relation 164379 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 164379 // <realization>
	  b parent class_ref 135963 // DataInput
      end

      classrelation 164507 // <realization>
	relation 164507 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 164507 // <realization>
	  b parent class_ref 136219 // DataOutput
      end

      classrelation 164635 // <realization>
	relation 164635 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 164635 // <realization>
	  b parent class_ref 131995 // Closeable
      end

      classrelation 164763 // fd (<unidirectional association>)
	relation 164763 --->
	  a role_name "fd" private
	    comment "
The FileDescriptor representing this RandomAccessFile.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 164763 // fd (<unidirectional association>)
	  b parent class_ref 140699 // FileDescriptor
      end

      attribute 154011 "syncMetadata"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 164891 // channel (<unidirectional association>)
	relation 164891 --->
	  a role_name "channel" private
	    comment " The unique file channel associated with this FileInputStream (lazily
 initialized).
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 164891 // channel (<unidirectional association>)
	  b parent class_ref 141083 // FileChannel
      end

      attribute 154139 "mode"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 165019 // guard (<unidirectional association>)
	relation 165019 --->
	  a role_name "guard" init_value " CloseGuard.get()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 165019 // guard (<unidirectional association>)
	  b parent class_ref 3574028 // CloseGuard
      end

      attribute 154267 "scratch"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[8]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 258971 "RandomAccessFile"
	public explicit_return_type ""
	nparams 2
	  param inout name "file" type class_ref 135579 // File
	  param inout name "mode" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code RandomAccessFile} based on {@code file} and opens
it according to the access string in {@code mode}.
<p><a id=\"accessmode\"/>
{@code mode} may have one of following values:
<table border=\"0\">
<tr>
<td>{@code \"r\"}</td>
<td>The file is opened in read-only mode. An {@code IOException} is
thrown if any of the {@code write} methods is called.</td>
</tr>
<tr>
<td>{@code \"rw\"}</td>
<td>The file is opened for reading and writing. If the file does not
exist, it will be created.</td>
</tr>
<tr>
<td>{@code \"rws\"}</td>
<td>The file is opened for reading and writing. Every change of the
file's content or metadata must be written synchronously to the target
device.</td>
</tr>
<tr>
<td>{@code \"rwd\"}</td>
<td>The file is opened for reading and writing. Every change of the
file's content must be written synchronously to the target device.</td>
</tr>
</table>

@param file
           the file to open.
@param mode
           the file access <a href=\"#accessmode\">mode</a>, either {@code
           \"r\"}, {@code \"rw\"}, {@code \"rws\"} or {@code \"rwd\"}.
@throws FileNotFoundException
            if the file cannot be opened or created according to {@code
            mode}.
@throws IllegalArgumentException
            if {@code mode} is not {@code \"r\"}, {@code \"rw\"}, {@code
            \"rws\"} or {@code \"rwd\"}."
      end

      operation 259099 "RandomAccessFile"
	public explicit_return_type ""
	nparams 2
	  param inout name "fileName" type class_ref 3399692 // String
	  param inout name "mode" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 135707 // FileNotFoundException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code RandomAccessFile} based on the file named {@code
fileName} and opens it according to the access string in {@code mode}.
The file path may be specified absolutely or relative to the system
property {@code \"user.dir\"}.

@param fileName
           the name of the file to open.
@param mode
           the file access <a href=\"#accessmode\">mode</a>, either {@code
           \"r\"}, {@code \"rw\"}, {@code \"rws\"} or {@code \"rwd\"}.
@throws FileNotFoundException
            if the file cannot be opened or created according to {@code
            mode}.
@throws IllegalArgumentException
            if {@code mode} is not {@code \"r\"}, {@code \"rw\"}, {@code
            \"rws\"} or {@code \"rwd\"}."
      end

      operation 259227 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this file.

@throws IOException
            if an error occurs while closing this file."
      end

      operation 259355 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 259483 "getChannel"
	public return_type class_ref 141083 // FileChannel
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets this file's {@link FileChannel} object.
<p>
The file channel's {@link FileChannel#position() position} is the same
as this file's file pointer offset (see {@link #getFilePointer()}). Any
changes made to this file's file pointer offset are also visible in the
file channel's position and vice versa.

@return this file's file channel instance."
      end

      operation 259611 "getFD"
	public return_type class_ref 140699 // FileDescriptor
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets this file's {@link FileDescriptor}. This represents the operating
system resource for this random access file.

@return this file's file descriptor object.
@throws IOException
            if an error occurs while getting the file descriptor of this
            file."
      end

      operation 259739 "getFilePointer"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current position within this file. All reads and
writes take place at the current file pointer position.

@return the current offset in bytes from the beginning of the file.

@throws IOException
            if an error occurs while getting the file pointer of this
            file."
      end

      operation 259867 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this file in bytes.

@return the file's length in bytes.
@throws IOException
            if this file is closed or some other I/O error occurs."
      end

      operation 259995 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a single byte from the current position in this file and returns it
as an integer in the range from 0 to 255. Returns -1 if the end of the
file has been reached. Blocks until one byte has been read, the end of
the file is detected, or an exception is thrown.

@return the byte read or -1 if the end of the file has been reached.
@throws IOException
            if this file is closed or another I/O error occurs."
      end

      operation 260123 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "buffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from the current position in this file and stores them in the
byte array {@code buffer}. The maximum number of bytes read corresponds
to the size of {@code buffer}. Blocks until at least one byte has been
read, the end of the file is detected, or an exception is thrown.

@param buffer
           the byte array in which to store the bytes read.
@return the number of bytes actually read or -1 if the end of the file
        has been reached.
@throws IOException
            if this file is closed or another I/O error occurs."
      end

      operation 260251 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "byteOffset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads at most {@code byteCount} bytes from the current position in this file
and stores them in the byte array {@code buffer} starting at {@code
byteOffset}. Blocks until at least one byte has been
read, the end of the file is detected, or an exception is thrown.

@return the number of bytes actually read or -1 if the end of the stream
        has been reached.
@throws IndexOutOfBoundsException
            if {@code byteOffset < 0} or {@code byteCount < 0}, or if {@code
            byteOffset + byteCount} is greater than the size of {@code buffer}.
@throws IOException
            if this file is closed or another I/O error occurs."
      end

      operation 260379 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a boolean from the current position in this file. Blocks until one
byte has been read, the end of the file is reached or an exception is
thrown.

@return the next boolean value from this file.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeBoolean(boolean)"
      end

      operation 260507 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an 8-bit byte from the current position in this file. Blocks until
one byte has been read, the end of the file is reached or an exception is
thrown.

@return the next signed 8-bit byte value from this file.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeBoolean(boolean)"
      end

      operation 260635 "readChar"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 16-bit character from the current position in this file. Blocks until
two bytes have been read, the end of the file is reached or an exception is
thrown.

@return the next char value from this file.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeChar(int)"
      end

      operation 260763 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 64-bit double from the current position in this file. Blocks
until eight bytes have been read, the end of the file is reached or an
exception is thrown.

@return the next double value from this file.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeDouble(double)"
      end

      operation 260891 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 32-bit float from the current position in this file. Blocks
until four bytes have been read, the end of the file is reached or an
exception is thrown.

@return the next float value from this file.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeFloat(float)"
      end

      operation 261019 "readFully"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dst" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code readFully(dst, 0, dst.length);}."
      end

      operation 261147 "readFully"
	public explicit_return_type "void"
	nparams 3
	  param inout name "dst" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads {@code byteCount} bytes from this stream and stores them in the byte
array {@code dst} starting at {@code offset}. If {@code byteCount} is zero, then this
method returns without reading any bytes. Otherwise, this method blocks until
{@code byteCount} bytes have been read. If insufficient bytes are available,
{@code EOFException} is thrown. If an I/O error occurs, {@code IOException} is
thrown. When an exception is thrown, some bytes may have been consumed from the stream
and written into the array.

@param dst
           the byte array into which the data is read.
@param offset
           the offset in {@code dst} at which to store the bytes.
@param byteCount
           the number of bytes to read.
@throws EOFException
            if the end of the source stream is reached before enough
            bytes have been read.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code byteCount < 0}, or
            {@code offset + byteCount > dst.length}.
@throws IOException
            if a problem occurs while reading from this stream.
@throws NullPointerException
            if {@code dst} is null."
      end

      operation 261275 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 32-bit integer from the current position in this file. Blocks
until four bytes have been read, the end of the file is reached or an
exception is thrown.

@return the next int value from this file.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeInt(int)"
      end

      operation 261403 "readLine"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a line of text form the current position in this file. A line is
represented by zero or more characters followed by {@code '\\n'}, {@code
'\\r'}, {@code \"\\r\\n\"} or the end of file marker. The string does not
include the line terminating sequence.
<p>
Blocks until a line terminating sequence has been read, the end of the
file is reached or an exception is thrown.

@return the contents of the line or {@code null} if no characters have
        been read before the end of the file has been reached.
@throws IOException
            if this file is closed or another I/O error occurs."
      end

      operation 261531 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 64-bit long from the current position in this file. Blocks until
eight bytes have been read, the end of the file is reached or an
exception is thrown.

@return the next long value from this file.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeLong(long)"
      end

      operation 261659 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a big-endian 16-bit short from the current position in this file. Blocks until
two bytes have been read, the end of the file is reached or an exception
is thrown.

@return the next short value from this file.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeShort(int)"
      end

      operation 261787 "readUnsignedByte"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned 8-bit byte from the current position in this file and
returns it as an integer. Blocks until one byte has been read, the end of
the file is reached or an exception is thrown.

@return the next unsigned byte value from this file as an int.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeByte(int)"
      end

      operation 261915 "readUnsignedShort"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads an unsigned big-endian 16-bit short from the current position in this file and
returns it as an integer. Blocks until two bytes have been read, the end of
the file is reached or an exception is thrown.

@return the next unsigned short value from this file as an int.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #writeShort(int)"
      end

      operation 262043 "readUTF"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a string that is encoded in {@link DataInput modified UTF-8} from
this file. The number of bytes that must be read for the complete string
is determined by the first two bytes read from the file. Blocks until all
required bytes have been read, the end of the file is reached or an
exception is thrown.

@return the next string encoded in {@link DataInput modified UTF-8} from
        this file.
@throws EOFException
            if the end of this file is detected.
@throws IOException
            if this file is closed or another I/O error occurs.
@throws UTFDataFormatException
            if the bytes read cannot be decoded into a character string.
@see #writeUTF(String)"
      end

      operation 262171 "seek"
	public explicit_return_type "void"
	nparams 1
	  param in name "offset" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves this file's file pointer to a new position, from where following
{@code read}, {@code write} or {@code skip} operations are done. The
position may be greater than the current length of the file, but the
file's length will only change if the moving of the pointer is followed
by a {@code write} operation.

@param offset
           the new file pointer position.
@throws IOException
            if this file is closed, {@code pos < 0} or another I/O error
            occurs."
      end

      operation 262299 "setLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "newLength" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the length of this file to {@code newLength}. If the current file is
smaller, it is expanded but the contents from the previous end of the
file to the new end are undefined. The file is truncated if its current
size is bigger than {@code newLength}. If the current file pointer
position is in the truncated part, it is set to the end of the file.

@param newLength
           the new file length in bytes.
@throws IllegalArgumentException
            if {@code newLength < 0}.
@throws IOException
            if this file is closed or another I/O error occurs."
      end

      operation 262427 "skipBytes"
	public explicit_return_type "int"
	nparams 1
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over {@code count} bytes in this file. Less than {@code count}
bytes are skipped if the end of the file is reached or an exception is
thrown during the operation. Nothing is done if {@code count} is
negative.

@param count
           the number of bytes to skip.
@return the number of bytes actually skipped.
@throws IOException
            if this file is closed or another I/O error occurs."
      end

      operation 262555 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the entire contents of the byte array {@code buffer} to this file,
starting at the current file pointer.

@param buffer
           the buffer to write.
@throws IOException
            if an I/O error occurs while writing to this file."
      end

      operation 262683 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "byteOffset" explicit_type "int"
	  param in name "byteCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes {@code byteCount} bytes from the byte array {@code buffer} to this
file, starting at the current file pointer and using {@code byteOffset} as
the first position within {@code buffer} to get bytes.

@throws IndexOutOfBoundsException
            if {@code byteCount < 0}, {@code byteOffset < 0} or {@code byteCount +
            byteOffset} is greater than the size of {@code buffer}.
@throws IOException
            if an I/O error occurs while writing to this file."
      end

      operation 262811 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneByte" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a byte to this file, starting at the current file pointer. Only
the least significant byte of the integer {@code oneByte} is written.

@param oneByte
           the byte to write to this file.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #read()"
      end

      operation 262939 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a boolean to this file as a single byte (1 for true, 0 for false), starting at the
current file pointer.

@param val
           the boolean to write to this file.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #readBoolean()"
      end

      operation 263067 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an 8-bit byte to this file, starting at the current file pointer.
Only the least significant byte of the integer {@code val} is written.

@param val
           the byte to write to this file.
@throws IOException
            if this file is closed or another I/O error occurs.
@see #readByte()
@see #readUnsignedByte()"
      end

      operation 263195 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the low order 8-bit bytes from a string to this file, starting at
the current file pointer.

@param str
           the string containing the bytes to write to this file
@throws IOException
            if an I/O error occurs while writing to this file."
      end

      operation 263323 "writeChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a big-endian 16-bit character to this file, starting at the current file
pointer. Only the two least significant bytes of the integer {@code val}
are written, with the high byte first.

@param val
           the char to write to this file.
@throws IOException
            if an I/O error occurs while writing to this file.
@see #readChar()"
      end

      operation 263451 "writeChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes big-endian 16-bit characters from {@code str} to this file, starting at the
current file pointer.

@param str
           the string to write to this file.
@throws IOException
            if an I/O error occurs while writing to this file.
@see #readChar()"
      end

      operation 263579 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "double"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a big-endian 64-bit double to this file, starting at the current file
pointer. The bytes are those returned by
{@link Double#doubleToLongBits(double)}, meaning a canonical NaN is used.

@param val
           the double to write to this file.
@throws IOException
            if an I/O error occurs while writing to this file.
@see #readDouble()"
      end

      operation 263707 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "float"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a big-endian 32-bit float to this file, starting at the current file pointer.
The bytes are those returned by {@link Float#floatToIntBits(float)}, meaning a canonical NaN
is used.

@param val
           the float to write to this file.
@throws IOException
            if an I/O error occurs while writing to this file.
@see #readFloat()"
      end

      operation 263835 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a big-endian 32-bit integer to this file, starting at the current file
pointer.

@param val
           the int to write to this file.
@throws IOException
            if an I/O error occurs while writing to this file.
@see #readInt()"
      end

      operation 263963 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a big-endian 64-bit long to this file, starting at the current file
pointer.

@param val
           the long to write to this file.
@throws IOException
            if an I/O error occurs while writing to this file.
@see #readLong()"
      end

      operation 264091 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a big-endian 16-bit short to this file, starting at the current file
pointer. Only the two least significant bytes of the integer {@code val}
are written.

@param val
           the short to write to this file.
@throws IOException
            if an I/O error occurs while writing to this file.
@see #readShort()
@see DataInput#readUnsignedShort()"
      end

      operation 264219 "writeUTF"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a string encoded with {@link DataInput modified UTF-8} to this
file, starting at the current file pointer.

@param str
           the string to write in {@link DataInput modified UTF-8}
           format.
@throws IOException
            if an I/O error occurs while writing to this file.
@throws UTFDataFormatException
            if the encoded string is longer than 65535 bytes.
@see #readUTF()"
      end
    end

    class 145819 "SequenceInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Concatenates two or more existing {@link InputStream}s. Reads are taken from
the first stream until it ends, then the next stream is used, until the last
stream returns end of file."
      classrelation 165147 // <generalisation>
	relation 165147 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 165147 // <generalisation>
	  b parent class_ref 131867 // InputStream
      end

      classrelation 165275 // e (<unidirectional association>)
	relation 165275 --->
	  a role_name "e" private
	    comment "
An enumeration which will return types of InputStream.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends InputStream> ${name}${value};
"
	    classrelation_ref 165275 // e (<unidirectional association>)
	  b parent class_ref 145947 // Enumeration
      end

      classrelation 165403 // in (<unidirectional association>)
	relation 165403 --->
	  a role_name "in" private
	    comment "
The current input stream.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 165403 // in (<unidirectional association>)
	  b parent class_ref 131867 // InputStream
      end

      operation 264347 "SequenceInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "s1" type class_ref 131867 // InputStream
	  param inout name "s2" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SequenceInputStream} using the two streams
{@code s1} and {@code s2} as the sequence of streams to read from.

@param s1
           the first stream to get bytes from.
@param s2
           the second stream to get bytes from.
@throws NullPointerException
            if {@code s1} is {@code null}."
      end

      operation 264475 "SequenceInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 145947 // Enumeration
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends InputStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new SequenceInputStream using the elements returned from
Enumeration {@code e} as the stream sequence. The instances returned by
{@code e.nextElement()} must be of type {@link InputStream}.

@param e
           the enumeration of {@code InputStreams} to get bytes from.
@throws NullPointerException
            if any of the elements in {@code e} is {@code null}."
      end

      operation 264603 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 264731 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes all streams in this sequence of input stream.

@throws IOException
            if an error occurs while closing any of the input streams."
      end

      operation 264859 "nextStream"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up the next InputStream or leaves it alone if there are none left.

@throws IOException"
      end

      operation 264987 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single byte from this sequence of input streams and returns it as
an integer in the range from 0 to 255. It tries to read from the current
stream first; if the end of this stream has been reached, it reads from
the next one. Blocks until one byte has been read, the end of the last
input stream in the sequence has been reached, or an exception is thrown.

@return the byte read or -1 if either the end of the last stream in the
        sequence has been reached or this input stream sequence is
        closed.
@throws IOException
            if an error occurs while reading the current source input
            stream."
      end

      operation 265115 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code count} bytes from this sequence of input streams and
stores them in the byte array {@code buffer} starting at {@code offset}.
Blocks only until at least 1 byte has been read, the end of the stream
has been reached, or an exception is thrown.
<p>
This SequenceInputStream shows the same behavior as other InputStreams.
To do this it will read only as many bytes as a call to read on the
current substream returns. If that call does not return as many bytes as
requested by {@code count}, it will not retry to read more on its own
because subsequent reads might block. This would violate the rule that
it will only block until at least one byte has been read.
<p>
If a substream has already reached the end when this call is made, it
will close that substream and start with the next one. If there are no
more substreams it will return -1.

@param buffer
           the array in which to store the bytes read.
@param offset
           the initial position in {@code buffer} to store the bytes read
           from this stream.
@param count
           the maximum number of bytes to store in {@code buffer}.
@return the number of bytes actually read; -1 if this sequence of streams
        is closed or if the end of the last stream in the sequence has
        been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is greater than the size of {@code buffer}.
@throws IOException
            if an I/O error occurs.
@throws NullPointerException
            if {@code buffer} is {@code null}."
      end
    end

    class 146203 "StreamTokenizer"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Parses a stream into a set of defined tokens, one at a time. The different
types of tokens that can be found are numbers, identifiers, quoted strings,
and different comment styles. The class can be used for limited processing
of source code of programming languages like Java, although it is nowhere
near a full parser."
      attribute 155035 "nval"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains a number if the current token is a number ({@code ttype} ==
{@code TT_NUMBER}).
"
      end

      classrelation 166171 // sval (<unidirectional association>)
	relation 166171 --->
	  a role_name "sval" public
	    comment "
Contains a string if the current token is a word ({@code ttype} ==
{@code TT_WORD}).

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166171 // sval (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 155163 "TT_EOF"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant representing the end of the stream.
"
      end

      attribute 155291 "TT_EOL"
	class_attribute const_attribute public explicit_type "int"
	init_value " '\\n'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant representing the end of the line.
"
      end

      attribute 155419 "TT_NUMBER"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant representing a number token.
"
      end

      attribute 155547 "TT_WORD"
	class_attribute const_attribute public explicit_type "int"
	init_value " -3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant representing a word token.
"
      end

      attribute 155675 "TT_UNKNOWN"
	class_attribute const_attribute private explicit_type "int"
	init_value " -4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Internal representation of unknown state.
"
      end

      attribute 155803 "ttype"
	public explicit_type "int"
	init_value " TT_UNKNOWN"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "After calling {@code nextToken()}, {@code ttype} contains the type of
token that has been read. When a single character is read, its value
converted to an integer is stored in {@code ttype}. For a quoted string,
the value is the quoted character. Otherwise, its value is one of the
following:
<ul>
<li> {@code TT_WORD} - the token is a word.</li>
<li> {@code TT_NUMBER} - the token is a number.</li>
<li> {@code TT_EOL} - the end of line has been reached. Depends on
whether {@code eolIsSignificant} is {@code true}.</li>
<li> {@code TT_EOF} - the end of the stream has been reached.</li>
</ul>
"
      end

      attribute 155931 "tokenTypes"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[256]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Internal character meanings, 0 implies TOKEN_ORDINARY
"
      end

      attribute 156059 "TOKEN_COMMENT"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 156187 "TOKEN_QUOTE"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 156315 "TOKEN_WHITE"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 156443 "TOKEN_WORD"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 156571 "TOKEN_DIGIT"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 156699 "lineNumber"
	private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 156827 "forceLowercase"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 156955 "isEOLSignificant"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 157083 "slashStarComments"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 157211 "slashSlashComments"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 157339 "pushBackToken"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 157467 "lastCr"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 166299 // inStream (<unidirectional association>)
	relation 166299 --->
	  a role_name "inStream" private
	    comment " One of these will have the stream 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166299 // inStream (<unidirectional association>)
	  b parent class_ref 131867 // InputStream
      end

      classrelation 166427 // inReader (<unidirectional association>)
	relation 166427 --->
	  a role_name "inReader" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166427 // inReader (<unidirectional association>)
	  b parent class_ref 133019 // Reader
      end

      attribute 157595 "peekChar"
	private explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 267675 "StreamTokenizer"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private constructor to initialize the default values according to the
specification."
      end

      operation 267803 "StreamTokenizer"
	public explicit_return_type ""
	nparams 1
	  param inout name "is" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs a new {@code StreamTokenizer} with {@code is} as source input
stream. This constructor is deprecated; instead, the constructor that
takes a {@code Reader} as an arugment should be used.

@param is
           the source stream from which to parse tokens.
@throws NullPointerException
            if {@code is} is {@code null}.
@deprecated Use {@link #StreamTokenizer(Reader)}"
      end

      operation 267931 "StreamTokenizer"
	public explicit_return_type ""
	nparams 1
	  param inout name "r" type class_ref 133019 // Reader
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code StreamTokenizer} with {@code r} as source reader.
The tokenizer's initial state is as follows:
<ul>
<li>All byte values 'A' through 'Z', 'a' through 'z', and '&#92;u00A0'
through '&#92;u00FF' are considered to be alphabetic.</li>
<li>All byte values '&#92;u0000' through '&#92;u0020' are considered to
be white space. '/' is a comment character.</li>
<li>Single quote '\\'' and double quote '\"' are string quote characters.
</li>
<li>Numbers are parsed.</li>
<li>End of lines are considered to be white space rather than separate
tokens.</li>
<li>C-style and C++-style comments are not recognized.</LI>
</ul>

@param r
           the source reader from which to parse tokens."
      end

      operation 268059 "commentChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the character {@code ch} shall be treated as a comment
character.

@param ch
           the character to be considered a comment character."
      end

      operation 268187 "eolIsSignificant"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether the end of a line is significant and should be returned
as {@code TT_EOF} in {@code ttype} by this tokenizer.

@param flag
           {@code true} if EOL is significant, {@code false} otherwise."
      end

      operation 268315 "lineno"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current line number.

@return this tokenizer's current line number."
      end

      operation 268443 "lowerCaseMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether word tokens should be converted to lower case when they
are stored in {@code sval}.

@param flag
           {@code true} if {@code sval} should be converted to lower
           case, {@code false} otherwise."
      end

      operation 268571 "nextToken"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the next token from this tokenizer's source stream or reader. The
type of the token is stored in the {@code ttype} field, additional
information may be stored in the {@code nval} or {@code sval} fields.

@return the value of {@code ttype}.
@throws IOException
            if an I/O error occurs while parsing the next token."
      end

      operation 268699 "ordinaryChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the character {@code ch} shall be treated as an ordinary
character by this tokenizer. That is, it has no special meaning as a
comment character, word component, white space, string delimiter or
number.

@param ch
           the character to be considered an ordinary character."
      end

      operation 268827 "ordinaryChars"
	public explicit_return_type "void"
	nparams 2
	  param in name "low" explicit_type "int"
	  param in name "hi" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the characters in the range from {@code low} to {@code hi}
shall be treated as an ordinary character by this tokenizer. That is,
they have no special meaning as a comment character, word component,
white space, string delimiter or number.

@param low
           the first character in the range of ordinary characters.
@param hi
           the last character in the range of ordinary characters."
      end

      operation 268955 "parseNumbers"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that this tokenizer shall parse numbers."
      end

      operation 269083 "pushBack"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that the current token should be pushed back and returned again
the next time {@code nextToken()} is called."
      end

      operation 269211 "quoteChar"
	public explicit_return_type "void"
	nparams 1
	  param in name "ch" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the character {@code ch} shall be treated as a quote
character.

@param ch
           the character to be considered a quote character."
      end

      operation 269339 "read"
	private explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 269467 "resetSyntax"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that all characters shall be treated as ordinary characters."
      end

      operation 269595 "slashSlashComments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether \"slash-slash\" (C++-style) comments shall be recognized.
This kind of comment ends at the end of the line.

@param flag
           {@code true} if {@code //} should be recognized as the start
           of a comment, {@code false} otherwise."
      end

      operation 269723 "slashStarComments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether \"slash-star\" (C-style) comments shall be recognized.
Slash-star comments cannot be nested and end when a star-slash
combination is found.

@param flag
           {@code true} if {@code /*} should be recognized as the start
           of a comment, {@code false} otherwise."
      end

      operation 269851 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the state of this tokenizer in a readable format.

@return the current state of this tokenizer."
      end

      operation 269979 "whitespaceChars"
	public explicit_return_type "void"
	nparams 2
	  param in name "low" explicit_type "int"
	  param in name "hi" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the characters in the range from {@code low} to {@code hi}
shall be treated as whitespace characters by this tokenizer.

@param low
           the first character in the range of whitespace characters.
@param hi
           the last character in the range of whitespace characters."
      end

      operation 270107 "wordChars"
	public explicit_return_type "void"
	nparams 2
	  param in name "low" explicit_type "int"
	  param in name "hi" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the characters in the range from {@code low} to {@code hi}
shall be treated as word characters by this tokenizer. A word consists of
a word character followed by zero or more word or number characters.

@param low
           the first character in the range of word characters.
@param hi
           the last character in the range of word characters."
      end
    end

    class 146331 "StringBufferInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link InputStream} that reads bytes from a {@code String} in
a sequential manner.

@deprecated Use {@link StringReader}"
      classrelation 166555 // <generalisation>
	relation 166555 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 166555 // <generalisation>
	  b parent class_ref 131867 // InputStream
      end

      classrelation 166683 // buffer (<unidirectional association>)
	relation 166683 --->
	  a role_name "buffer" protected
	    comment "
The source string containing the data to read.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166683 // buffer (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 157723 "count"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The total number of characters in the source string.
"
      end

      attribute 157851 "pos"
	protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current position within the source string.
"
      end

      operation 270235 "StringBufferInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new {@code StringBufferInputStream} with {@code str} as
source. The size of the stream is set to the {@code length()} of the
string.

@param str
           the source string for this stream.
@throws NullPointerException
            if {@code str} is {@code null}."
      end

      operation 270363 "available"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 270491 "read"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single byte from the source string and returns it as an integer
in the range from 0 to 255. Returns -1 if the end of the source string
has been reached.

@return the byte read or -1 if the end of the source string has been
        reached."
      end

      operation 270619 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buffer" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code length} bytes from the source string and stores them
in the byte array {@code b} starting at {@code offset}.

@param buffer
           the byte array in which to store the bytes read.
@param offset
           the initial position in {@code b} to store the bytes read from
           this stream.
@param length
           the maximum number of bytes to store in {@code b}.
@return the number of bytes actually read or -1 if the end of the source
        string has been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the length of
            {@code b}.
@throws NullPointerException
            if {@code b} is {@code null}."
      end

      operation 270747 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this stream to the beginning of the source string."
      end

      operation 270875 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "charCount" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Skips {@code charCount} characters in the source string. It does nothing and
returns 0 if {@code charCount} is negative. Less than {@code charCount} characters are
skipped if the end of the source string is reached before the operation
completes.

@return the number of characters actually skipped."
      end
    end

    class 146459 "StringReader"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link Reader} that reads characters from a {@code String} in
a sequential manner.

@see StringWriter"
      classrelation 166811 // <generalisation>
	relation 166811 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 166811 // <generalisation>
	  b parent class_ref 133019 // Reader
      end

      classrelation 166939 // str (<unidirectional association>)
	relation 166939 --->
	  a role_name "str" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 166939 // str (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 157979 "markpos"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 158107 "pos"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 158235 "count"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 271003 "StringReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new {@code StringReader} with {@code str} as source. The size
of the reader is set to the {@code length()} of the string and the Object
to synchronize access through is set to {@code str}.

@param str
           the source string for this reader."
      end

      operation 271131 "close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this reader. Once it is closed, read operations on this reader
will throw an {@code IOException}. Only the first invocation of this
method has any effect."
      end

      operation 271259 "isClosed"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a boolean indicating whether this reader is closed.

@return {@code true} if closed, otherwise {@code false}."
      end

      operation 271387 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readLimit" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a mark position in this reader. The parameter {@code readLimit} is
ignored for this class. Calling {@code reset()} will reposition the
reader back to the marked position.

@param readLimit
           ignored for {@code StringReader} instances.
@throws IllegalArgumentException
            if {@code readLimit < 0}.
@throws IOException
            if this reader is closed.
@see #markSupported()
@see #reset()"
      end

      operation 271515 "checkNotClosed"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 271643 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader supports the {@code mark()} and {@code
reset()} methods. This implementation returns {@code true}.

@return always {@code true}."
      end

      operation 271771 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a single character from the source string and returns it as an
integer with the two higher-order bytes set to 0. Returns -1 if the end
of the source string has been reached.

@return the character read or -1 if the end of the source string has been
        reached.
@throws IOException
            if this reader is closed."
      end

      operation 271899 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buf" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads at most {@code len} characters from the source string and stores
them at {@code offset} in the character array {@code buf}. Returns the
number of characters actually read or -1 if the end of the source string
has been reached.

@param buf
           the character array to store the characters read.
@param offset
           the initial position in {@code buffer} to store the characters
           read from this reader.
@param len
           the maximum number of characters to read.
@return the number of characters read or -1 if the end of the reader has
        been reached.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code len < 0}, or if
            {@code offset + len} is greater than the size of {@code buf}.
@throws IOException
            if this reader is closed."
      end

      operation 272027 "ready"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether this reader is ready to be read without blocking. This
implementation always returns {@code true}.

@return always {@code true}.
@throws IOException
            if this reader is closed.
@see #read()
@see #read(char[], int, int)"
      end

      operation 272155 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Resets this reader's position to the last {@code mark()} location.
Invocations of {@code read()} and {@code skip()} will occur from this new
location. If this reader has not been marked, it is reset to the
beginning of the source string.

@throws IOException
            if this reader is closed.
@see #mark(int)
@see #markSupported()"
      end

      operation 272283 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "charCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Moves {@code charCount} characters in the source string. Unlike the {@link
Reader#skip(long) overridden method}, this method may skip negative skip
distances: this rewinds the input so that characters may be read again.
When the end of the source string has been reached, the input cannot be
rewound.

@param charCount
           the maximum number of characters to skip. Positive values skip
           forward; negative values skip backward.
@return the number of characters actually skipped. This is bounded below
           by the number of characters already read and above by the
           number of characters remaining:<br> {@code -(num chars already
           read) <= distance skipped <= num chars remaining}.
@throws IOException
            if this reader is closed.
@see #mark(int)
@see #markSupported()
@see #reset()"
      end
    end

    class 146587 "StringWriter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A specialized {@link Writer} that writes characters to a {@code StringBuffer}
in a sequential manner, appending them in the process. The result can later
be queried using the {@link #StringWriter(int)} or {@link #toString()}
methods.

@see StringReader"
      classrelation 167067 // <generalisation>
	relation 167067 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 167067 // <generalisation>
	  b parent class_ref 133531 // Writer
      end

      classrelation 167195 // buf (<unidirectional association>)
	relation 167195 --->
	  a role_name "buf" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 167195 // buf (<unidirectional association>)
	  b parent class_ref 146715 // StringBuffer
      end

      operation 272411 "StringWriter"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code StringWriter} which has a {@link StringBuffer}
allocated with the default size of 16 characters. The {@code
StringBuffer} is also the {@code lock} used to synchronize access to this
writer."
      end

      operation 272539 "StringWriter"
	public explicit_return_type ""
	nparams 1
	  param in name "initialSize" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code StringWriter} which has a {@link StringBuffer}
allocated with a size of {@code initialSize} characters. The {@code
StringBuffer} is also the {@code lock} used to synchronize access to this
writer.

@param initialSize
           the initial size of the target string buffer."
      end

      operation 272667 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calling this method has no effect. In contrast to most {@code Writer} subclasses,
the other methods in {@code StringWriter} do not throw an {@code IOException} if
{@code close()} has been called.

@throws IOException
            if an error occurs while closing this writer."
      end

      operation 272795 "flush"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calling this method has no effect."
      end

      operation 272923 "getBuffer"
	public return_type class_ref 146715 // StringBuffer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a reference to this writer's internal {@link StringBuffer}. Any
changes made to the returned buffer are reflected in this writer.

@return a reference to this writer's internal {@code StringBuffer}."
      end

      operation 273051 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets a copy of the contents of this writer as a string.

@return this writer's contents as a string."
      end

      operation 273179 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "chars" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters starting at {@code offset} in {@code buf}
to this writer's {@code StringBuffer}.

@param chars
           the non-null character array to write.
@param offset
           the index of the first character in {@code chars} to write.
@param count
           the maximum number of characters to write.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is greater than the size of {@code buf}."
      end

      operation 273307 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "oneChar" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes one character to this writer's {@code StringBuffer}. Only the two
least significant bytes of the integer {@code oneChar} are written.

@param oneChar
           the character to write to this writer's {@code StringBuffer}."
      end

      operation 273435 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "str" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the characters from the specified string to this writer's {@code
StringBuffer}.

@param str
           the non-null string containing the characters to write."
      end

      operation 273563 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "str" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes {@code count} characters from {@code str} starting at {@code
offset} to this writer's {@code StringBuffer}.

@param str
           the non-null string containing the characters to write.
@param offset
           the index of the first character in {@code str} to write.
@param count
           the number of characters from {@code str} to write.
@throws StringIndexOutOfBoundsException
            if {@code offset < 0} or {@code count < 0}, or if {@code
            offset + count} is greater than the length of {@code str}."
      end

      operation 273691 "append"
	public return_type class_ref 146587 // StringWriter
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends the character {@code c} to this writer's {@code StringBuffer}.
This method works the same way as {@link #write(int)}.

@param c
           the character to append to the target stream.
@return this writer."
      end

      operation 273819 "append"
	public return_type class_ref 146587 // StringWriter
	nparams 1
	  param inout name "csq" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends the character sequence {@code csq} to this writer's {@code
StringBuffer}. This method works the same way as {@code
StringWriter.write(csq.toString())}. If {@code csq} is {@code null}, then
the string \"null\" is written to the target stream.

@param csq
           the character sequence appended to the target.
@return this writer."
      end

      operation 273947 "append"
	public return_type class_ref 146587 // StringWriter
	nparams 3
	  param inout name "csq" type class_ref 133787 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends a subsequence of the character sequence {@code csq} to this
writer's {@code StringBuffer}. This method works the same way as {@code
StringWriter.writer(csq.subsequence(start, end).toString())}. If {@code
csq} is {@code null}, then the specified subsequence of the string \"null\"
will be written to the target.

@param csq
           the character sequence appended to the target.
@param start
           the index of the first char in the character sequence appended
           to the target.
@param end
           the index of the character following the last character of the
           subsequence appended to the target.
@return this writer.
@throws IndexOutOfBoundsException
            if {@code start > end}, {@code start < 0}, {@code end < 0} or
            either {@code start} or {@code end} are greater or equal than
            the length of {@code csq}."
      end
    end

    class 146843 "UTFDataFormatException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that an incorrectly encoded UTF-8 string has been encountered, most
likely while reading some {@link DataInputStream}.

@see DataInputStream#readUTF()"
      classrelation 167579 // <generalisation>
	relation 167579 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 167579 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 158619 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 420743449228280612L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 274459 "UTFDataFormatException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UTFDataFormatException} with its stack trace
filled in."
      end

      operation 274587 "UTFDataFormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UTFDataFormatException} with its stack trace and
detail message filled in.

@param detailMessage
           the detail message for this exception."
      end
    end
  end

  deploymentview 128027 "io"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 128027 "Serializable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 128155 // Serializable
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 129947 "Closeable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 131995 // Closeable
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 130075 "InputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import libcore.io.Streams;
${definition}"
      associated_classes
	class_ref 131867 // InputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 130203 "FilterInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 131739 // FilterInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 130331 "BufferedInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 131611 // BufferedInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 130459 "Flushable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 132763 // Flushable
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 130587 "OutputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 132635 // OutputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 130715 "FilterOutputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import libcore.util.SneakyThrow;
${definition}"
      associated_classes
	class_ref 132507 // FilterOutputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 130843 "BufferedOutputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 132379 // BufferedOutputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 131099 "Reader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
${definition}"
      associated_classes
	class_ref 133019 // Reader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 131227 "BufferedReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 132891 // BufferedReader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 131483 "Writer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 133531 // Writer
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 131611 "BufferedWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import libcore.util.SneakyThrow;
${definition}"
      associated_classes
	class_ref 133403 // BufferedWriter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 131739 "ByteArrayInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 133915 // ByteArrayInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 131867 "ByteArrayOutputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 134043 // ByteArrayOutputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 131995 "CharArrayReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 134299 // CharArrayReader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 132123 "CharArrayWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 134427 // CharArrayWriter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 132507 "IOException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 128539 // IOException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 132635 "CharConversionException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 134555 // CharConversionException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 132763 "PrintWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Formatter;
import java.util.IllegalFormatException;
import java.util.Locale;
${definition}"
      associated_classes
	class_ref 135067 // PrintWriter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 132891 "Console"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Formatter;
import libcore.io.ErrnoException;
import libcore.io.Libcore;
${definition}"
      associated_classes
	class_ref 135195 // Console
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 133019 "DataInput"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 135963 // DataInput
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 133147 "DataInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteOrder;
import java.nio.charset.ModifiedUtf8;
import libcore.io.Memory;
import libcore.io.Streams;
import libcore.io.SizeOf;
${definition}"
      associated_classes
	class_ref 136091 // DataInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 133275 "DataOutput"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 136219 // DataOutput
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 133403 "DataOutputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteOrder;
import java.nio.charset.ModifiedUtf8;
import libcore.io.Memory;
import libcore.io.SizeOf;
${definition}"
      associated_classes
	class_ref 136347 // DataOutputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 133531 "EmulatedFields"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 136475 // EmulatedFields
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 133659 "ObjectOutput"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 136987 // ObjectOutput
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 133787 "ObjectStreamConstants"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137115 // ObjectStreamConstants
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 133915 "ObjectOutputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.nio.ByteOrder;
import java.nio.charset.ModifiedUtf8;
import java.util.List;
import libcore.io.Memory;
import libcore.io.SizeOf;
${definition}"
      associated_classes
	class_ref 128411 // ObjectOutputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 134043 "EmulatedFieldsForDumping"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 136731 // EmulatedFieldsForDumping
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 134171 "ObjectInput"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 138139 // ObjectInput
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 134299 "ObjectInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.VMStack;
import java.io.EmulatedFields.ObjectSlot;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import libcore.util.EmptyArray;
${definition}"
      associated_classes
	class_ref 128667 // ObjectInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 134427 "EmulatedFieldsForLoading"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137883 // EmulatedFieldsForLoading
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 134555 "EOFException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 139419 // EOFException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 134683 "Externalizable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 139547 // Externalizable
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 134939 "File"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import libcore.io.ErrnoException;
import libcore.io.IoUtils;
import libcore.io.Libcore;
import libcore.io.StructStat;
import libcore.io.StructStatFs;
import org.apache.harmony.luni.util.DeleteOnExit;
${definition}"
      associated_classes
	class_ref 135579 // File
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 135067 "FileDescriptor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import libcore.io.ErrnoException;
import libcore.io.Libcore;
import static libcore.io.OsConstants.*;
${definition}"
      associated_classes
	class_ref 140699 // FileDescriptor
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 135195 "FileFilter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 140187 // FileFilter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 135323 "FileInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.CloseGuard;
import java.nio.NioUtils;
import java.nio.channels.FileChannel;
import java.util.Arrays;
import libcore.io.ErrnoException;
import libcore.io.IoBridge;
import libcore.io.IoUtils;
import libcore.io.Libcore;
import libcore.io.Streams;
import static libcore.io.OsConstants.*;
${definition}"
      associated_classes
	class_ref 140955 // FileInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 135451 "FilenameFilter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 140059 // FilenameFilter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 135579 "FileNotFoundException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 135707 // FileNotFoundException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 135707 "FileOutputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.CloseGuard;
import java.nio.NioUtils;
import java.nio.channels.FileChannel;
import java.util.Arrays;
import libcore.io.IoBridge;
import libcore.io.IoUtils;
import static libcore.io.OsConstants.*;
${definition}"
      associated_classes
	class_ref 141211 // FileOutputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 136091 "FilePermission"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.Permission;
${definition}"
      associated_classes
	class_ref 141339 // FilePermission
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 136219 "InputStreamReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CoderResult;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.MalformedInputException;
import java.nio.charset.UnmappableCharacterException;
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 142107 // InputStreamReader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 136347 "FileReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 141979 // FileReader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 136475 "OutputStreamWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CoderResult;
import java.nio.charset.CodingErrorAction;
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 142747 // OutputStreamWriter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 136603 "FileWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 142619 // FileWriter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 136731 "FilterReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 143003 // FilterReader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 136859 "FilterWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 143131 // FilterWriter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 136987 "HistoricalCharsetNames"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.util.HashMap;
${definition}"
      associated_classes
	class_ref 143259 // HistoricalCharsetNames
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 137115 "InterruptedIOException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 143387 // InterruptedIOException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 137243 "ObjectStreamException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 139291 // ObjectStreamException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 137371 "InvalidClassException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 139163 // InvalidClassException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 137499 "InvalidObjectException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 129563 // InvalidObjectException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 137755 "IOError"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 143515 // IOError
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 137883 "LineNumberInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import libcore.io.Streams;
${definition}"
      associated_classes
	class_ref 143771 // LineNumberInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 138011 "LineNumberReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 143899 // LineNumberReader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 138139 "NotActiveException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137755 // NotActiveException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 138267 "NotSerializableException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 144027 // NotSerializableException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 138395 "ObjectInputValidation"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 138779 // ObjectInputValidation
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 138523 "ObjectStreamClass"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.SoftReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import java.nio.ByteOrder;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.WeakHashMap;
import libcore.io.Memory;
import libcore.util.EmptyArray;
${definition}"
      associated_classes
	class_ref 137499 // ObjectStreamClass
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 138651 "ObjectStreamField"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.WeakReference;
import java.util.Arrays;
import java.util.Comparator;
${definition}"
      associated_classes
	class_ref 131355 // ObjectStreamField
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 138779 "OptionalDataException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 139035 // OptionalDataException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 138907 "PipedInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import libcore.io.IoUtils;
${definition}"
      associated_classes
	class_ref 144923 // PipedInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 139035 "PipedOutputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 145051 // PipedOutputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 139163 "PipedReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import libcore.io.IoUtils;
${definition}"
      associated_classes
	class_ref 145179 // PipedReader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 139291 "PipedWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 145307 // PipedWriter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 139419 "PrintStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Arrays;
import java.util.Formatter;
import java.util.IllegalFormatException;
import java.util.Locale;
${definition}"
      associated_classes
	class_ref 134939 // PrintStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 139547 "PushbackInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 145435 // PushbackInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 139675 "PushbackReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 145563 // PushbackReader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 139803 "RandomAccessFile"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.CloseGuard;
import java.nio.ByteOrder;
import java.nio.NioUtils;
import java.nio.channels.FileChannel;
import java.nio.charset.ModifiedUtf8;
import java.util.Arrays;
import libcore.io.ErrnoException;
import libcore.io.IoBridge;
import libcore.io.IoUtils;
import libcore.io.Libcore;
import libcore.io.Memory;
import libcore.io.SizeOf;
import static libcore.io.OsConstants.*;
${definition}"
      associated_classes
	class_ref 145691 // RandomAccessFile
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 139931 "SequenceInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Vector;
${definition}"
      associated_classes
	class_ref 145819 // SequenceInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 140187 "SerializablePermission"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.BasicPermission;
import java.security.Permission;
${definition}"
      associated_classes
	class_ref 137243 // SerializablePermission
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 140315 "SerializationHandleMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137371 // SerializationHandleMap
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 140443 "StreamCorruptedException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 137627 // StreamCorruptedException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 140571 "StreamTokenizer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
${definition}"
      associated_classes
	class_ref 146203 // StreamTokenizer
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 140699 "StringBufferInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 146331 // StringBufferInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 140827 "StringReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 146459 // StringReader
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 140955 "StringWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 146587 // StringWriter
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 141083 "SyncFailedException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 140827 // SyncFailedException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 141211 "UnsupportedEncodingException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 134171 // UnsupportedEncodingException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 141339 "UTFDataFormatException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 146843 // UTFDataFormatException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 141467 "WriteAbortedException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 138907 // WriteAbortedException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end
  end
end
