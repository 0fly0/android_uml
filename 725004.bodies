class IntPropertyValuesHolder
!!!2443148.java!!!	IntPropertyValuesHolder(in propertyName : String, inout keyframeSet : IntKeyframeSet)
            super(propertyName);
            mValueType = int.class;
            mKeyframeSet = keyframeSet;
            mIntKeyframeSet = (IntKeyframeSet) mKeyframeSet;
!!!2443276.java!!!	IntPropertyValuesHolder(inout property : Property, inout keyframeSet : IntKeyframeSet)
            super(property);
            mValueType = int.class;
            mKeyframeSet = keyframeSet;
            mIntKeyframeSet = (IntKeyframeSet) mKeyframeSet;
            if (property instanceof  IntProperty) {
                mIntProperty = (IntProperty) mProperty;
            }
!!!2443404.java!!!	IntPropertyValuesHolder(in propertyName : String, inout  : int...values)
            super(propertyName);
            setIntValues(values);
!!!2443532.java!!!	IntPropertyValuesHolder(inout property : Property, inout  : int...values)
            super(property);
            setIntValues(values);
            if (property instanceof  IntProperty) {
                mIntProperty = (IntProperty) mProperty;
            }
!!!2443660.java!!!	setIntValues(inout  : int...values) : void
            super.setIntValues(values);
            mIntKeyframeSet = (IntKeyframeSet) mKeyframeSet;
!!!2443788.java!!!	calculateValue(in fraction : float) : void
            mIntAnimatedValue = mIntKeyframeSet.getIntValue(fraction);
!!!2443916.java!!!	getAnimatedValue() : Object
            return mIntAnimatedValue;
!!!2444044.java!!!	clone() : IntPropertyValuesHolder
            IntPropertyValuesHolder newPVH = (IntPropertyValuesHolder) super.clone();
            newPVH.mIntKeyframeSet = (IntKeyframeSet) newPVH.mKeyframeSet;
            return newPVH;
!!!2444172.java!!!	setAnimatedValue(inout target : Object) : void
            if (mIntProperty != null) {
                mIntProperty.setValue(target, mIntAnimatedValue);
                return;
            }
            if (mProperty != null) {
                mProperty.set(target, mIntAnimatedValue);
                return;
            }
            if (mJniSetter != 0) {
                nCallIntMethod(target, mJniSetter, mIntAnimatedValue);
                return;
            }
            if (mSetter != null) {
                try {
                    mTmpValueArray[0] = mIntAnimatedValue;
                    mSetter.invoke(target, mTmpValueArray);
                } catch (InvocationTargetException e) {
                    Log.e("PropertyValuesHolder", e.toString());
                } catch (IllegalAccessException e) {
                    Log.e("PropertyValuesHolder", e.toString());
                }
            }
!!!2444300.java!!!	setupSetter(inout targetClass : Class) : void
            if (mProperty != null) {
                return;
            }
            // Check new static hashmap<propName, int> for setter method
            try {
                mPropertyMapLock.writeLock().lock();
                HashMap<String, Integer> propertyMap = sJNISetterPropertyMap.get(targetClass);
                if (propertyMap != null) {
                    Integer mJniSetterInteger = propertyMap.get(mPropertyName);
                    if (mJniSetterInteger != null) {
                        mJniSetter = mJniSetterInteger;
                    }
                }
                if (mJniSetter == 0) {
                    String methodName = getMethodName("set", mPropertyName);
                    mJniSetter = nGetIntMethod(targetClass, methodName);
                    if (mJniSetter != 0) {
                        if (propertyMap == null) {
                            propertyMap = new HashMap<String, Integer>();
                            sJNISetterPropertyMap.put(targetClass, propertyMap);
                        }
                        propertyMap.put(mPropertyName, mJniSetter);
                    }
                }
            } catch (NoSuchMethodError e) {
                // Couldn't find it via JNI - try reflection next. Probably means the method
                // doesn't exist, or the type is wrong. An error will be logged later if
                // reflection fails as well.
            } finally {
                mPropertyMapLock.writeLock().unlock();
            }
            if (mJniSetter == 0) {
                // Couldn't find method through fast JNI approach - just use reflection
                super.setupSetter(targetClass);
            }
