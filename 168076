format 74
"resampler_tools" // framework::av::tools::resampler_tools
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/framework/av/tools/resampler_tools/"
  cpp_src_dir "/home/shchen/work/jellybean/framework/av/tools/resampler_tools/"
  deploymentview 155788 "resampler_tools"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 272908 "main"
      stereotype "source"
      cpp_src "int main(int argc, char** argv)
{
    // nc is the number of bits to store the coefficients
    const int nc = 32;

    bool polyphase = false;
    unsigned int polyM = 160;
    unsigned int polyN = 147;
    bool debug = false;
    double Fs = 48000;
    double Fc = 20478;
    double atten = 1;
    int format = 0;


    // in order to keep the errors associated with the linear
    // interpolation of the coefficients below the quantization error
    // we must satisfy:
    //   2^nz >= 2^(nc/2)
    //
    // for 16 bit coefficients that would be 256
    //
    // note that increasing nz only increases memory requirements,
    // but doesn't increase the amount of computation to do.
    //
    //
    // see:
    // Smith, J.O. Digital Audio Resampling Home Page
    // https://ccrma.stanford.edu/~jos/resample/, 2011-03-29
    //
    int nz = 4;

    //         | 0.1102*(A - 8.7)                         A > 50
    //  beta = | 0.5842*(A - 21)^0.4 + 0.07886*(A - 21)   21 <= A <= 50
    //         | 0                                        A < 21
    //   with A is the desired stop-band attenuation in dBFS
    //
    // for eg:
    //
    //    30 dB    2.210
    //    40 dB    3.384
    //    50 dB    4.538
    //    60 dB    5.658
    //    70 dB    6.764
    //    80 dB    7.865
    //    90 dB    8.960
    //   100 dB   10.056
    double beta = 7.865;


    // 2*nzc = (A - 8) / (2.285 * dw)
    //      with dw the transition width = 2*pi*dF/Fs
    //
    int nzc = 8;

    //
    // Example:
    // 44.1 KHz to 48 KHz resampling
    // 100 dB rejection above 28 KHz
    //   (the spectrum will fold around 24 KHz and we want 100 dB rejection
    //    at the point where the folding reaches 20 KHz)
    //  ...___|_____
    //        |     \\|
    //        | ____/|\\____
    //        |/alias|     \\
    //  ------/------+------\\---------> KHz
    //       20     24     28

    // Transition band 8 KHz, or dw = 1.0472
    //
    // beta = 10.056
    // nzc  = 20
    //

    int ch;
    while ((ch = getopt(argc, argv, \":hds:c:n:f:l:b:p:v:\")) != -1) {
        switch (ch) {
            case 'd':
                debug = true;
                break;
            case 'p':
                if (sscanf(optarg, \"%u/%u\", &polyM, &polyN) != 2) {
                    usage(argv[0]);
                }
                polyphase = true;
                break;
            case 's':
                Fs = atof(optarg);
                break;
            case 'c':
                Fc = atof(optarg);
                break;
            case 'n':
                nzc = atoi(optarg);
                break;
            case 'l':
                nz = atoi(optarg);
                break;
            case 'f':
                if (!strcmp(optarg,\"fixed\")) format = 0;
                else if (!strcmp(optarg,\"float\")) format = 1;
                else usage(argv[0]);
                break;
            case 'b':
                beta = atof(optarg);
                break;
            case 'v':
                atten = pow(10, -fabs(atof(optarg))*0.05 );
                break;
            case 'h':
            default:
                usage(argv[0]);
                break;
        }
    }

    // cut off frequency ratio Fc/Fs
    double Fcr = Fc / Fs;


    // total number of coefficients (one side)
    const int M = (1 << nz);
    const int N = M * nzc;

    // generate the right half of the filter
    if (!debug) {
        printf(\"// cmd-line: \");
        for (int i=1 ; i<argc ; i++) {
            printf(\"%s \", argv[i]);
        }
        printf(\"\\n\");
        if (!polyphase) {
            printf(\"const int32_t RESAMPLE_FIR_SIZE           = %d;\\n\", N);
            printf(\"const int32_t RESAMPLE_FIR_LERP_INT_BITS  = %d;\\n\", nz);
            printf(\"const int32_t RESAMPLE_FIR_NUM_COEF       = %d;\\n\", nzc);
        } else {
            printf(\"const int32_t RESAMPLE_FIR_SIZE           = %d;\\n\", 2*nzc*polyN);
            printf(\"const int32_t RESAMPLE_FIR_NUM_COEF       = %d;\\n\", 2*nzc);
        }
        if (!format) {
            printf(\"const int32_t RESAMPLE_FIR_COEF_BITS      = %d;\\n\", nc);
        }
        printf(\"\\n\");
        printf(\"static %s resampleFIR[] = {\", !format ? \"int32_t\" : \"float\");
    }

    if (!polyphase) {
        for (int i=0 ; i<=M ; i++) { // an extra set of coefs for interpolation
            for (int j=0 ; j<nzc ; j++) {
                int ix = j*M + i;
                double x = (2.0 * M_PI * ix * Fcr) / (1 << nz);
                double y = kaiser(ix+N, 2*N, beta) * sinc(x) * 2.0 * Fcr;
                y *= atten;

                if (!debug) {
                    if (j == 0)
                        printf(\"\\n    \");
                }

                if (!format) {
                    int64_t yi = floor(y * ((1ULL<<(nc-1))) + 0.5);
                    if (yi >= (1LL<<(nc-1))) yi = (1LL<<(nc-1))-1;
                    printf(\"0x%08x, \", int32_t(yi));
                } else {
                    printf(\"%.9g%s \", y, debug ? \",\" : \"f,\");
                }
            }
        }
    } else {
        for (int j=0 ; j<polyN ; j++) {
            // calculate the phase
            double p = ((polyM*j) % polyN) / double(polyN);
            if (!debug) printf(\"\\n    \");
            else        printf(\"\\n\");
            // generate a FIR per phase
            for (int i=-nzc ; i<nzc ; i++) {
                double x = 2.0 * M_PI * Fcr * (i + p);
                double y = kaiser(i+N, 2*N, beta) * sinc(x) * 2.0 * Fcr;;
                y *= atten;
                if (!format) {
                    int64_t yi = floor(y * ((1ULL<<(nc-1))) + 0.5);
                    if (yi >= (1LL<<(nc-1))) yi = (1LL<<(nc-1))-1;
                    printf(\"0x%08x\", int32_t(yi));
                } else {
                    printf(\"%.9g%s\", y, debug ? \"\" : \"f\");
                }

                if (debug && (i==nzc-1)) {
                } else {
                    printf(\", \");
                }
            }
        }
    }

    if (!debug) {
        printf(\"\\n};\");
    }
    printf(\"\\n\");
    return 0;
}
"
      associated_classes
      end
    end
  end
end
