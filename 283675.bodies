class FilePreferencesImpl
!!!1743515.java!!!	FilePreferencesImpl(inout userNode : boolean)
        super(null, "");
        this.userNode = userNode;
        path = userNode ? USER_HOME : SYSTEM_HOME;
        initPrefs();
!!!1743643.java!!!	FilePreferencesImpl(inout parent : AbstractPreferences, inout name : String)
        super(parent, name);
        path = ((FilePreferencesImpl) parent).path + File.separator + name;
        initPrefs();
!!!1743771.java!!!	initPrefs() : void
        dir = new File(path);
        newNode = !dir.exists();
        prefsFile = new File(path + File.separator + PREFS_FILE_NAME);
        prefs = XMLParser.readXmlPreferences(prefsFile);
!!!1743899.java!!!	childrenNamesSpi() : String
        String[] names = dir.list(new FilenameFilter() {
            public boolean accept(File parent, String name) {
                return new File(path + File.separator + name).isDirectory();
            }
        });
        if (names == null) {// file is not a directory, exception case
            throw new BackingStoreException("Cannot get child names for " + toString()
                    + " (path is " + path + ")");
        }
        return names;
!!!1744027.java!!!	childSpi(inout name : String) : AbstractPreferences
        FilePreferencesImpl child = new FilePreferencesImpl(this, name);
        return child;
!!!1744155.java!!!	flushSpi() : void
        try {
            //if removed, return
            if(isRemoved()){
                return;
            }
            // reload
            Properties currentPrefs = XMLParser.readXmlPreferences(prefsFile);
            // merge
            Iterator<String> it = removed.iterator();
            while (it.hasNext()) {
                currentPrefs.remove(it.next());
            }
            removed.clear();
            it = updated.iterator();
            while (it.hasNext()) {
                Object key = it.next();
                currentPrefs.put(key, prefs.get(key));
            }
            updated.clear();
            // flush
            prefs = currentPrefs;
            XMLParser.writeXmlPreferences(prefsFile, prefs);
        } catch (Exception e) {
            throw new BackingStoreException(e);
        }
!!!1744283.java!!!	getSpi(inout key : String) : String
        try {
            if (prefs == null) {
                prefs = XMLParser.readXmlPreferences(prefsFile);
            }
            return prefs.getProperty(key);
        } catch (Exception e) {
            // if Exception happened, return null
            return null;
        }
!!!1744411.java!!!	keysSpi() : String
        final Set<Object> ks = prefs.keySet();
        return ks.toArray(new String[ks.size()]);
!!!1744539.java!!!	putSpi(inout name : String, inout value : String) : void
        prefs.setProperty(name, value);
        updated.add(name);
!!!1744667.java!!!	removeNodeSpi() : void
        prefsFile.delete();
        boolean removeSucceed = dir.delete();
        if (!removeSucceed) {
            throw new BackingStoreException("Cannot remove " + toString());
        }
!!!1744795.java!!!	removeSpi(inout key : String) : void
        prefs.remove(key);
        updated.remove(key);
        removed.add(key);
!!!1744923.java!!!	syncSpi() : void
        flushSpi();
