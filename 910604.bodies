class Recognizer
!!!4140044.java!!!	getConfigDir(inout locale : Locale) : String
        if (locale == null) locale = Locale.US;
        String dir = "/system/usr/srec/config/" +
                locale.toString().replace('_', '.').toLowerCase();
        if ((new File(dir)).isDirectory()) return dir;
        return null;
!!!4140172.java!!!	Recognizer(in configFile : String)
        PMemInit();
        SR_SessionCreate(configFile);
        mRecognizer = SR_RecognizerCreate();
        SR_RecognizerSetup(mRecognizer);
        mVocabulary = SR_VocabularyLoad();
!!!4141324.java!!!	start() : void
        // TODO: shouldn't be here?
        SR_RecognizerActivateRule(mRecognizer, mActiveGrammar.mGrammar, "trash", 1);
        SR_RecognizerStart(mRecognizer);
!!!4141452.java!!!	advance() : int
        return SR_RecognizerAdvance(mRecognizer);
!!!4141580.java!!!	putAudio(inout buf : byte, in offset : int, in length : int, inout isLast : boolean) : int
        return SR_RecognizerPutAudio(mRecognizer, buf, offset, length, isLast);
!!!4141708.java!!!	putAudio(inout audio : InputStream) : void
        // make sure the audio buffer is allocated
        if (mPutAudioBuffer == null) mPutAudioBuffer = new byte[512];
        // read some data
        int nbytes = audio.read(mPutAudioBuffer);
        // eof, so signal Recognizer
        if (nbytes == -1) {
            SR_RecognizerPutAudio(mRecognizer, mPutAudioBuffer, 0, 0, true);
        }
        // put it into the Recognizer
        else if (nbytes != SR_RecognizerPutAudio(mRecognizer, mPutAudioBuffer, 0, nbytes, false)) {
            throw new IOException("SR_RecognizerPutAudio failed nbytes=" + nbytes);
        }
!!!4141836.java!!!	getResultCount() : int
        return SR_RecognizerResultGetSize(mRecognizer);
!!!4141964.java!!!	getResultKeys(in index : int) : String
        return SR_RecognizerResultGetKeyList(mRecognizer, index);
!!!4142092.java!!!	getResult(in index : int, in key : String) : String
        return SR_RecognizerResultGetValue(mRecognizer, index, key);
!!!4142220.java!!!	stop() : void
        SR_RecognizerStop(mRecognizer);
        SR_RecognizerDeactivateRule(mRecognizer, mActiveGrammar.mGrammar, "trash");
!!!4142348.java!!!	resetAcousticState() : void
        SR_AcousticStateReset(mRecognizer);
!!!4142476.java!!!	setAcousticState(in state : String) : void
        SR_AcousticStateSet(mRecognizer, state);
!!!4142604.java!!!	getAcousticState() : String
        return SR_AcousticStateGet(mRecognizer);
!!!4142732.java!!!	destroy() : void
        try {
            if (mVocabulary != 0) SR_VocabularyDestroy(mVocabulary);
        } finally {
            mVocabulary = 0;
            try {
                if (mRecognizer != 0) SR_RecognizerUnsetup(mRecognizer);
            } finally {
                try {
                    if (mRecognizer != 0) SR_RecognizerDestroy(mRecognizer);
                } finally {
                    mRecognizer = 0;
                    try {
                        SR_SessionDestroy();
                    } finally {
                        PMemShutdown();
                    }
                }
            }
        }
!!!4142860.java!!!	finalize() : void
        if (mVocabulary != 0 || mRecognizer != 0) {
            destroy();
            throw new IllegalStateException("someone forgot to destroy Recognizer");
        }
!!!4143500.java!!!	eventToString(in event : int) : String
        switch (event) {
            case EVENT_INVALID:
                return "EVENT_INVALID";
            case EVENT_NO_MATCH:
                return "EVENT_NO_MATCH";
            case EVENT_INCOMPLETE:
                return "EVENT_INCOMPLETE";
            case EVENT_STARTED:
                return "EVENT_STARTED";
            case EVENT_STOPPED:
                return "EVENT_STOPPED";
            case EVENT_START_OF_VOICING:
                return "EVENT_START_OF_VOICING";
            case EVENT_END_OF_VOICING:
                return "EVENT_END_OF_VOICING";
            case EVENT_SPOKE_TOO_SOON:
                return "EVENT_SPOKE_TOO_SOON";
            case EVENT_RECOGNITION_RESULT:
                return "EVENT_RECOGNITION_RESULT";
            case EVENT_START_OF_UTTERANCE_TIMEOUT:
                return "EVENT_START_OF_UTTERANCE_TIMEOUT";
            case EVENT_RECOGNITION_TIMEOUT:
                return "EVENT_RECOGNITION_TIMEOUT";
            case EVENT_NEED_MORE_AUDIO:
                return "EVENT_NEED_MORE_AUDIO";
            case EVENT_MAX_SPEECH:
                return "EVENT_MAX_SPEECH";
        }
        return "EVENT_" + event;
