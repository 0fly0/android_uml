class GravitySensor
!!!1717772.cpp!!!	GravitySensor(in list : sensor_t, in count : size_t)
    for (size_t i=0 ; i<count ; i++) {
        if (list[i].type == SENSOR_TYPE_ACCELEROMETER) {
            mAccelerometer = Sensor(list + i);
            break;
        }
    }
!!!1717900.cpp!!!	process(inout outEvent : sensors_event_t, in event : sensors_event_t) : bool
    const static double NS2S = 1.0 / 1000000000.0;
    if (event.type == SENSOR_TYPE_ACCELEROMETER) {
        vec3_t g;
        if (!mSensorFusion.hasEstimate())
            return false;
        const mat33_t R(mSensorFusion.getRotationMatrix());
        // FIXME: we need to estimate the length of gravity because
        // the accelerometer may have a small scaling error. This
        // translates to an offset in the linear-acceleration sensor.
        g = R[2] * GRAVITY_EARTH;

        *outEvent = event;
        outEvent->data[0] = g.x;
        outEvent->data[1] = g.y;
        outEvent->data[2] = g.z;
        outEvent->sensor = '_grv';
        outEvent->type = SENSOR_TYPE_GRAVITY;
        return true;
    }
    return false;
!!!1718028.cpp!!!	activate(inout ident : void, in enabled : bool) : status_t
    return mSensorFusion.activate(this, enabled);
!!!1718156.cpp!!!	setDelay(inout ident : void, in handle : int, in ns : int64_t) : status_t
    return mSensorFusion.setDelay(this, ns);
!!!1718284.cpp!!!	getSensor() : Sensor
    sensor_t hwSensor;
    hwSensor.name       = "Gravity Sensor";
    hwSensor.vendor     = "Google Inc.";
    hwSensor.version    = 3;
    hwSensor.handle     = '_grv';
    hwSensor.type       = SENSOR_TYPE_GRAVITY;
    hwSensor.maxRange   = GRAVITY_EARTH * 2;
    hwSensor.resolution = mAccelerometer.getResolution();
    hwSensor.power      = mSensorFusion.getPowerUsage();
    hwSensor.minDelay   = mSensorFusion.getMinDelay();
    Sensor sensor(&hwSensor);
    return sensor;
