class RotateDrawable
!!!6496140.java!!!	RotateDrawable()
        this(null, null);
!!!6496268.java!!!	RotateDrawable(inout rotateState : RotateState, inout res : Resources)
        mState = new RotateState(rotateState, this, res);
!!!6496396.java!!!	draw(inout canvas : Canvas) : void
        int saveCount = canvas.save();

        Rect bounds = mState.mDrawable.getBounds();

        int w = bounds.right - bounds.left;
        int h = bounds.bottom - bounds.top;

        final RotateState st = mState;
        
        float px = st.mPivotXRel ? (w * st.mPivotX) : st.mPivotX;
        float py = st.mPivotYRel ? (h * st.mPivotY) : st.mPivotY;

        canvas.rotate(st.mCurrentDegrees, px + bounds.left, py + bounds.top);

        st.mDrawable.draw(canvas);

        canvas.restoreToCount(saveCount);
!!!6496524.java!!!	getDrawable() : Drawable
        return mState.mDrawable;
!!!6496652.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations()
                | mState.mChangingConfigurations
                | mState.mDrawable.getChangingConfigurations();
!!!6496780.java!!!	setAlpha(in alpha : int) : void
        mState.mDrawable.setAlpha(alpha);
!!!6496908.java!!!	setColorFilter(inout cf : ColorFilter) : void
        mState.mDrawable.setColorFilter(cf);
!!!6497036.java!!!	getOpacity() : int
        return mState.mDrawable.getOpacity();
!!!6497164.java!!!	invalidateDrawable(inout who : Drawable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.invalidateDrawable(this);
        }
!!!6497292.java!!!	scheduleDrawable(inout who : Drawable, inout what : Runnable, in when : long) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.scheduleDrawable(this, what, when);
        }
!!!6497420.java!!!	unscheduleDrawable(inout who : Drawable, inout what : Runnable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.unscheduleDrawable(this, what);
        }
!!!6497548.java!!!	getPadding(inout padding : Rect) : boolean
        return mState.mDrawable.getPadding(padding);
!!!6497676.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        mState.mDrawable.setVisible(visible, restart);
        return super.setVisible(visible, restart);
!!!6497804.java!!!	isStateful() : boolean
        return mState.mDrawable.isStateful();
!!!6497932.java!!!	onStateChange(inout state : int) : boolean
        boolean changed = mState.mDrawable.setState(state);
        onBoundsChange(getBounds());
        return changed;
!!!6498060.java!!!	onLevelChange(in level : int) : boolean
        mState.mDrawable.setLevel(level);
        onBoundsChange(getBounds());

        mState.mCurrentDegrees = mState.mFromDegrees +
                (mState.mToDegrees - mState.mFromDegrees) *
                        ((float) level / MAX_LEVEL);

        invalidateSelf();
        return true;
!!!6498188.java!!!	onBoundsChange(inout bounds : Rect) : void
        mState.mDrawable.setBounds(bounds.left, bounds.top,
                bounds.right, bounds.bottom);
!!!6498316.java!!!	getIntrinsicWidth() : int
        return mState.mDrawable.getIntrinsicWidth();
!!!6498444.java!!!	getIntrinsicHeight() : int
        return mState.mDrawable.getIntrinsicHeight();
!!!6498572.java!!!	getConstantState() : ConstantState
        if (mState.canConstantState()) {
            mState.mChangingConfigurations = getChangingConfigurations();
            return mState;
        }
        return null;
!!!6498700.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : void

        TypedArray a = r.obtainAttributes(attrs,
                com.android.internal.R.styleable.RotateDrawable);

        super.inflateWithAttributes(r, parser, a,
                com.android.internal.R.styleable.RotateDrawable_visible);
        
        TypedValue tv = a.peekValue(com.android.internal.R.styleable.RotateDrawable_pivotX);
        boolean pivotXRel;
        float pivotX;
        if (tv == null) {
            pivotXRel = true;
            pivotX = 0.5f;
        } else {
            pivotXRel = tv.type == TypedValue.TYPE_FRACTION;
            pivotX = pivotXRel ? tv.getFraction(1.0f, 1.0f) : tv.getFloat();
        }
        
        tv = a.peekValue(com.android.internal.R.styleable.RotateDrawable_pivotY);
        boolean pivotYRel;
        float pivotY;
        if (tv == null) {
            pivotYRel = true;
            pivotY = 0.5f;
        } else {
            pivotYRel = tv.type == TypedValue.TYPE_FRACTION;
            pivotY = pivotYRel ? tv.getFraction(1.0f, 1.0f) : tv.getFloat();
        }

        float fromDegrees = a.getFloat(
                com.android.internal.R.styleable.RotateDrawable_fromDegrees, 0.0f);
        float toDegrees = a.getFloat(
                com.android.internal.R.styleable.RotateDrawable_toDegrees, 360.0f);

        int res = a.getResourceId(
                com.android.internal.R.styleable.RotateDrawable_drawable, 0);
        Drawable drawable = null;
        if (res > 0) {
            drawable = r.getDrawable(res);
        }

        a.recycle();
        
        int outerDepth = parser.getDepth();
        int type;
        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT &&
               (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {

            if (type != XmlPullParser.START_TAG) {
                continue;
            }

            if ((drawable = Drawable.createFromXmlInner(r, parser, attrs)) == null) {
                Log.w("drawable", "Bad element under <rotate>: "
                        + parser .getName());
            }
        }

        if (drawable == null) {
            Log.w("drawable", "No drawable specified for <rotate>");
        }

        mState.mDrawable = drawable;
        mState.mPivotXRel = pivotXRel;
        mState.mPivotX = pivotX;
        mState.mPivotYRel = pivotYRel;
        mState.mPivotY = pivotY;
        mState.mFromDegrees = mState.mCurrentDegrees = fromDegrees;
        mState.mToDegrees = toDegrees;

        if (drawable != null) {
            drawable.setCallback(this);
        }
!!!6498828.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mState.mDrawable.mutate();
            mMutated = true;
        }
        return this;
