class PairingKeyStoreSpi
!!!13340044.java!!!	PairingKeyStoreSpi()
        mResolver = null;
!!!13340172.java!!!	setContentResolver(inout cr : ContentResolver) : void
        mResolver = cr;
!!!13340300.java!!!	checkInitialized() : void
        if (mResolver == null) {
            throw new IllegalStateException("Need to call setContentResolver");
        }
!!!13340428.java!!!	checkAliasDoesNotExist(in alias : String) : void
        if (getTrustedCertificateEntry(alias) != null) {
            throw new KeyStoreException("Trusted certificate with alias " +
                    alias + " already exists.");
        }
        if (getPrivateKeyEntry(alias) != null) {
            throw new KeyStoreException("Private key with alias " +
                    alias + " already exists.");
        }
!!!13340556.java!!!	getPrivateKeyEntryForCursor(inout cursor : Cursor) : PrivateKeyEntry
        String alias = cursor.getString(PrivateKeyColumns.ALIAS_INDEX);
        Date date = new Date(cursor.getLong(PrivateKeyColumns.DATE_INDEX));

        try {
            byte[] encodedKey = cursor.getBlob(PrivateKeyColumns.KEY_INDEX);
            PrivateKey key = decodePrivateKey(encodedKey);
            byte[] encodedChain = cursor.getBlob(PrivateKeyColumns.CERT_CHAIN_INDEX);
            Certificate[] chain = decodeCertificateChain(encodedChain);
            return new PrivateKeyEntry(alias, date, chain, key);
        } catch (GeneralSecurityException e) {
            // TODO(mikey): Do something nicer
            throw new RuntimeException(e);
        }

!!!13340684.java!!!	getCertificateEntryForCursor(inout cursor : Cursor) : TrustedCertificateEntry
        String alias = cursor.getString(TrustedCertificateColumns.ALIAS_INDEX);
        Date date = new Date(cursor.getLong(TrustedCertificateColumns.DATE_INDEX));

        try {
            byte[] encodedCert = cursor.getBlob(TrustedCertificateColumns.CERTIFICATE_INDEX);
            Certificate cert = decodeCertificate(encodedCert);
            return new TrustedCertificateEntry(alias, date, cert);
        } catch (GeneralSecurityException e) {
            return null;
        }
!!!13340812.java!!!	getTrustedCertificateEntry(in alias : String) : TrustedCertificateEntry
        checkInitialized();

        String selection = TrustedCertificateColumns.ALIAS + " = ?";
        String[] selectionArgs = new String[] { alias };

        Cursor cursor = mResolver.query(TrustedCertificateProvider.CONTENT_URI,
                TrustedCertificateColumns.PROJECTION, selection, selectionArgs,
                null);

        if (cursor == null) {
            throw new RuntimeException("No cursor!");
        }

        TrustedCertificateEntry result = null;
        if (cursor.moveToFirst()) {
           result = getCertificateEntryForCursor(cursor);
        }

        cursor.close();
        return result;
!!!13340940.java!!!	getPrivateKeyEntry(in alias : String) : PrivateKeyEntry
        checkInitialized();

        String selection = PrivateKeyColumns.ALIAS + " = ?";
        String[] selectionArgs = new String[] { alias };

        Cursor cursor = mResolver.query(PrivateKeyProvider.CONTENT_URI,
                PrivateKeyColumns.PROJECTION, selection, selectionArgs, null);

        if (cursor == null) {
            throw new RuntimeException("No cursor!");
        }

        PrivateKeyEntry result = null;
        if (cursor.moveToFirst()) {
            result = getPrivateKeyEntryForCursor(cursor);
        }

        cursor.close();
        return result;
!!!13341068.java!!!	setCertificateEntry(inout entry : TrustedCertificateEntry) : boolean
        ContentValues values = new ContentValues();
        values.put(TrustedCertificateColumns.ALIAS, entry.getAlias());
        try{
            values.put(TrustedCertificateColumns.CERTIFICATE,
                    encodeCertificate(entry.getCertificate()));
        } catch (CertificateException e) {
            throw new RuntimeException("Error setting cert", e);
        }
        Uri uri = mResolver.insert(TrustedCertificateProvider.CONTENT_URI,
                values);
        return true;
!!!13341196.java!!!	setKeyEntry(inout entry : PrivateKeyEntry) : boolean
        ContentValues values = new ContentValues();

        values.put(PrivateKeyColumns.ALIAS, entry.getAlias());
        byte[] encodedKey = encodePrivateKey(entry.getKey(null));
        values.put(PrivateKeyColumns.KEY, encodedKey);
        try {
            byte[] encodedCertChain = encodeCertificateChain(entry.getCertificateChain());
            values.put(PrivateKeyColumns.CERT_CHAIN, encodedCertChain);
        } catch (CertificateException e) {
            throw new RuntimeException("Error setting cert_chain", e);
        }

        Uri uri = mResolver.insert(PrivateKeyProvider.CONTENT_URI, values);

        return true;
!!!13341324.java!!!	encodeCertificate(inout cert : Certificate) : byte
        return cert.getEncoded();
!!!13341452.java!!!	decodeCertificate(inout encodedBytes : byte) : Certificate
        ByteArrayInputStream bis = new ByteArrayInputStream(encodedBytes);
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        return cf.generateCertificate(bis);
!!!13341580.java!!!	encodeCertificateChain(inout chain : Certificate) : byte
        ByteArrayOutputStream out = new ByteArrayOutputStream(2048);
        for (int i = 0; i < chain.length; i++) {
            Certificate cert = chain[i];
            byte[] certBytes = encodeCertificate(cert);
            int certLen = certBytes.length;
            try {
                out.write(intToBigEndianIntBytes(certLen));
                out.write(certBytes);
            } catch (IOException e) {
                throw new CertificateException("Error encoding cert.", e);
            }
        }
        return out.toByteArray();
!!!13341708.java!!!	decodeCertificateChain(inout encodedChain : byte) : Certificate
        ArrayList<Certificate> certs = new ArrayList<Certificate>();
        ByteArrayInputStream bytes = new ByteArrayInputStream(encodedChain);

        while (bytes.available() >= 4) {
            byte[] lengthBytes = new byte[4];
            bytes.read(lengthBytes, 0, 4);

            int length = (int)intBigEndianBytesToLong(lengthBytes);

            // On invalid length, abort decode.
            if (length >  bytes.available()) {
                break;
            }
            if (length > (16 * 1024)) {
                break;
            }

            byte[] certBytes = new byte[length];
            bytes.read(certBytes, 0, length);
            if (length > 0) {
                certs.add(decodeCertificate(certBytes));
            }
        }
        Certificate[] result = new Certificate[certs.size()];
        return certs.toArray(result);
!!!13341836.java!!!	encodePrivateKey(inout key : PrivateKey) : byte
        return key.getEncoded();
!!!13341964.java!!!	decodePrivateKey(inout encodedKey : byte) : PrivateKey
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(encodedKey);
        return KeyFactory.getInstance("RSA").generatePrivate(spec);
!!!13342092.java!!!	engineAliasesCollection() : Collection<String>
        checkInitialized();
        HashSet<String> aliases = new HashSet<String>();

        // TODO(mikey): Should use a simpler project (only need alias column)
        Cursor cursor = mResolver.query(PrivateKeyProvider.CONTENT_URI,
                PrivateKeyColumns.PROJECTION, null, null, null);

        if (cursor.moveToFirst()) {
            do {
                String alias = cursor.getString(PrivateKeyColumns.ALIAS_INDEX);
                aliases.add(alias);
            } while (cursor.moveToNext());
        }

        cursor.close();

        // TODO(mikey): Should use a simpler project (only need alias column)
        cursor = mResolver.query(TrustedCertificateProvider.CONTENT_URI,
                TrustedCertificateColumns.PROJECTION, null, null, null);

        if (cursor.moveToFirst()) {
            do {
                String alias = cursor.getString(
                        TrustedCertificateColumns.ALIAS_INDEX);
                aliases.add(alias);
            } while (cursor.moveToNext());
        }

        cursor.close();

        return aliases;
!!!13342220.java!!!	intToBigEndianIntBytes(in intVal : int) : byte
      byte[] outBuf = new byte[4];
      outBuf[0] = (byte)((intVal >> 24) & 0xff);
      outBuf[1] = (byte)((intVal >> 16) & 0xff);
      outBuf[2] = (byte)((intVal >> 8) & 0xff);
      outBuf[3] = (byte)(intVal & 0xff);
      return outBuf;
!!!13342348.java!!!	intBigEndianBytesToLong(inout input : byte) : long
      assert (input.length == 4);
      long ret = (long)(input[0]) & 0xff;
      ret <<= 8;
      ret |= (long)(input[1]) & 0xff;
      ret <<= 8;
      ret |= (long)(input[2]) & 0xff;
      ret <<= 8;
      ret |= (long)(input[3]) & 0xff;
      return ret;
!!!13342476.java!!!	engineAliases() : Enumeration<String>
        Collection<String> aliases = engineAliasesCollection();
        return Collections.enumeration(aliases);
!!!13342604.java!!!	engineContainsAlias(in alias : String) : boolean
        Collection<String> aliases = engineAliasesCollection();
        return aliases.contains(alias);
!!!13342732.java!!!	engineDeleteEntry(in alias : String) : void
        String where = "alias = ?";
        String selectionArgs[] = { alias };

        mResolver.delete(TrustedCertificateProvider.CONTENT_URI,
                where, selectionArgs);
        mResolver.delete(PrivateKeyProvider.CONTENT_URI, where, selectionArgs);
!!!13342860.java!!!	engineGetCertificate(in alias : String) : Certificate
        if (LOCAL_LOGD) {
            Log.d(LOG_TAG, "engineGetCertificate: " + alias);
        }
        Certificate result = null;

        TrustedCertificateEntry certEntry = getTrustedCertificateEntry(alias);
        PrivateKeyEntry identityEntry = getPrivateKeyEntry(alias);

        // TODO(mikey): There should only be one namespace for aliases; neither
        // type should have precedence.
        if (certEntry != null) {
            result = certEntry.getCertificate();
        } else if (identityEntry != null) {
            Certificate chain[] = identityEntry.getCertificateChain();
            if (chain.length > 0) {
                result = chain[0];
            }
        }

        return result;

!!!13342988.java!!!	engineGetCertificateAlias(inout cert : Certificate) : String
        if (LOCAL_LOGD) {
            Log.d(LOG_TAG, "engineGetCertificateAlias: " + cert);
        }

        // TODO(mikey): woefully inefficient
        for (String alias : engineAliasesCollection()) {
            TrustedCertificateEntry entry = getTrustedCertificateEntry(alias);
            if (entry != null && entry.getCertificate() == cert) {
                return alias;
            }
        }
        return null;
!!!13343116.java!!!	engineGetCertificateChain(in alias : String) : Certificate
        if (LOCAL_LOGD) {
            Log.d(LOG_TAG, "engineGetCertificateChain: " + alias);
        }
        PrivateKeyEntry identity = getPrivateKeyEntry(alias);
        if (identity == null) {
            return null;
        }
        return identity.getCertificateChain();
!!!13343244.java!!!	engineGetCreationDate(in alias : String) : Date
        TrustedCertificateEntry entry = getTrustedCertificateEntry(alias);
        if (entry == null) {
            return null;
        }
        return entry.getDate();
!!!13343372.java!!!	engineGetKey(in alias : String, inout password : char) : Key
        if (LOCAL_LOGD) {
            Log.d(LOG_TAG, "engineGetKey: " + alias);
        }
        PrivateKeyEntry identity = getPrivateKeyEntry(alias);
        if (identity == null) {
            return null;
        }
        return identity.getKey(password);
!!!13343500.java!!!	engineIsCertificateEntry(in alias : String) : boolean
        if (LOCAL_LOGD) {
            Log.d(LOG_TAG, "engineIsCertificateEntry: " + alias);
        }
        TrustedCertificateEntry entry = getTrustedCertificateEntry(alias);
        return entry != null;
!!!13343628.java!!!	engineIsKeyEntry(in alias : String) : boolean
        if (LOCAL_LOGD) {
            Log.d(LOG_TAG, "engineIsKeyEntry: " + alias);
        }
        PrivateKeyEntry identity = getPrivateKeyEntry(alias);
        return identity != null;
!!!13343756.java!!!	engineSetCertificateEntry(in alias : String, inout cert : Certificate) : void
        checkAliasDoesNotExist(alias);
        TrustedCertificateEntry entry = new TrustedCertificateEntry(alias, null, cert);
        setCertificateEntry(entry);
!!!13343884.java!!!	engineSetKeyEntry(in alias : String, inout key : Key, inout password : char, inout chain : Certificate) : void
        checkAliasDoesNotExist(alias);
        PrivateKeyEntry identity = new PrivateKeyEntry(alias, null, chain, key);
        setKeyEntry(identity);
!!!13344012.java!!!	engineSetKeyEntry(in alias : String, inout keyBytes : byte, inout chain : Certificate) : void
        PrivateKey key;
        try {
            key = decodePrivateKey(keyBytes);
        } catch (GeneralSecurityException e) {
            throw new KeyStoreException(e);
        }
        engineSetKeyEntry(alias, key, null, chain);
!!!13344140.java!!!	engineSize() : int
        return engineAliasesCollection().size();
!!!13344268.java!!!	engineLoad(inout stream : InputStream, inout password : char) : void
        // Nothing to do
!!!13344396.java!!!	engineStore(inout stream : OutputStream, inout password : char) : void
        throw new RuntimeException("Not implemented.");
