class MediaSource
!!!12699148.java!!!	finalize() : void
 native_release();
!!!12699276.java!!!	MediaSource()
        mMediaTimeUs = 0;
        mIsStarted = false;
        mSourceHandlerLock = new ReentrantLock();
        mSourceHandlerIsReady = mSourceHandlerLock.newCondition();
        native_setup();
!!!12699404.java!!!	getMediaInfo() : MediaInfo
        return mMediaInfo;
!!!12699532.java!!!	getNumberOfTracks() : int
        return mMediaInfo.mTrackMetadata.size();
!!!12699660.java!!!	getNativeSource() : int
        return mNativeSource;
!!!12699788.java!!!	start() : void
        if (mSourceThread == null) {
            mSourceThread = new Thread() {
                public final void run() {
                    Looper.prepare();
                    mSourceLooper = Looper.myLooper();
                    mSourceHandlerLock.lock();
                    mSourceHandler = new SourceHandler(MediaSource.this);
                    mSourceHandlerIsReady.signal();
                    mSourceHandlerLock.unlock();
                    Looper.loop();
                }
            };
            mSourceThread.start();
        }

        while (mSourceHandler == null) {
            mSourceHandlerLock.lock();
            try {
                mSourceHandlerIsReady.await();
            } catch (InterruptedException e) {
                Log.e(TAG, e.toString());
            } finally {
                mSourceHandlerLock.unlock();
            }
        }
        Message msg = mSourceHandler.obtainMessage();
        msg.what = MSG_START;
        mSourceHandler.sendMessage(msg);
!!!12699916.java!!!	end() : void
        Message msg = mSourceHandler.obtainMessage();
        msg.what = MSG_END;
        mSourceHandler.sendMessage(msg);
!!!12700044.java!!!	selectTrack(in trackId : int) : void
        Message msg = mSourceHandler.obtainMessage();
        msg.what = MSG_SELECT_TRACK;
        msg.arg1 = trackId;
        mSourceHandler.sendMessage(msg);
!!!12700172.java!!!	deselectTrack(in trackId : int) : void
        Message msg = mSourceHandler.obtainMessage();
        msg.what = MSG_DESELECT_TRACK;
        msg.arg1 = trackId;
        mSourceHandler.sendMessage(msg);
!!!12700300.java!!!	seekTo(in timeUs : long) : void
        Message msg = mSourceHandler.obtainMessage();
        msg.what = MSG_SEEK_TO;
        msg.obj = new Long(timeUs);
        mSourceHandler.sendMessage(msg);
!!!12700428.java!!!	release() : void
        for (int i = 0; i <= MSG_WHAT_LAST; ++i) {
            mSourceHandler.removeMessages(i);
        }
        mSourceLooper.quit();
        try {
            mSourceThread.join(TIME_TO_WAIT_SOURCE_THREAD);
        } catch (InterruptedException e) {
            Log.i(TAG, e.toString());
        }
        mSourceHandler = null;
        mSourceThread = null;
        onRelease();
        native_release();
!!!12700556.java!!!	dequeueAccessUnit(in trackId : int, in mediaTimeUs : long) : AccessUnit
        AccessUnit ret = null;
        if (mIsSelectedTrack[trackId] == true) {
            mMediaTimeUs = mediaTimeUs;
            ret = dequeueAccessUnit(trackId);
            if (ret.mAuMeta.getInteger(AccessUnitMetadata.STATUS) ==
                    AccessUnitMetadata.STATUS_DISCONTINUITY) {
                Message msg = mSourceHandler.obtainMessage();
                msg.what = MSG_DISCONTINUITY;
                msg.arg1 = trackId;
                mSourceHandler.sendMessage(msg);
            }
        }
        return ret;
