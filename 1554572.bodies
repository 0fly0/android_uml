class ClassLoader2
!!!9613580.java!!!	ClassLoader2()
            super(null);
!!!9613708.java!!!	add(in className : String, inout definition : byte) : ClassLoader2
            mClassDefs.put(className, definition);
            return this;
!!!9613836.java!!!	add(in className : String, inout rewrittenClass : ClassWriter) : ClassLoader2
            mClassDefs.put(className, rewrittenClass.toByteArray());
            return this;
!!!9613964.java!!!	getByteCode() : Set<Entry<String, byte[]>>
            return mClassDefs.entrySet();
!!!9614092.java!!!	findClass(in name : String) : Class<?>
            try {
                return super.findClass(name);
            } catch (ClassNotFoundException e) {

                byte[] def = mClassDefs.get(name);
                if (def != null) {
                    // Load the modified ClassWithNative from its bytes representation.
                    return defineClass(name, def, 0, def.length);
                }

                try {
                    // Load everything else from the original definition into the new class loader.
                    ClassReader cr = new ClassReader(name);
                    ClassWriter cw = new ClassWriter(0);
                    cr.accept(cw, 0);
                    byte[] bytes = cw.toByteArray();
                    return defineClass(name, bytes, 0, bytes.length);

                } catch (IOException ioe) {
                    throw new RuntimeException(ioe);
                }
            }
!!!9614220.java!!!	callGet(inout instance : Object, in a : int, in b : long) : int
            Method m = instance.getClass().getMethod("get",
                    new Class<?>[] { int.class, long.class } );

            Object result = m.invoke(instance, new Object[] { a, b });
            return ((Integer) result).intValue();
!!!9614348.java!!!	callGet_Original(inout instance : Object, in a : int, in b : long) : int
            Method m = instance.getClass().getMethod("get_Original",
                    new Class<?>[] { int.class, long.class } );

            Object result = m.invoke(instance, new Object[] { a, b });
            return ((Integer) result).intValue();
!!!9614476.java!!!	callMethod(inout instance : Object, in methodName : String, inout makePublic : boolean) : T
            Method m = instance.getClass().getDeclaredMethod(methodName, (Class<?>[])null);

            boolean wasAccessible = m.isAccessible();
            if (makePublic && !wasAccessible) {
                m.setAccessible(true);
            }

            Object result = m.invoke(instance, (Object[])null);

            if (makePublic && !wasAccessible) {
                m.setAccessible(false);
            }

            return (T) result;
!!!9614604.java!!!	callAdd(inout instance : Object, in a : int, in b : int) : int
            Method m = instance.getClass().getMethod("add",
                    new Class<?>[] { int.class, int.class });

            Object result = m.invoke(instance, new Object[] { a, b });
            return ((Integer) result).intValue();
!!!9614732.java!!!	callCallNativeInstance(inout instance : Object, in a : int, in d : double, inout o : Object) : int
            Method m = instance.getClass().getMethod("callNativeInstance",
                    new Class<?>[] { int.class, double.class, Object[].class });

            Object result = m.invoke(instance, new Object[] { a, d, o });
            return ((Integer) result).intValue();
