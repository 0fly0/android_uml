class Bean
!!!7573132.java!!!	Bean(inout context : Context, inout as : AttributeSet)
                super(context, as);
!!!7573260.java!!!	toString() : String
                return String.format("<bean (%.1f, %.1f) (%d x %d)>",
                    getX(), getY(), getWidth(), getHeight());
!!!7573388.java!!!	pickBean() : void
                int beanId = pickInt(BEANS);
                if (randfrange(0,1) <= LUCKY) {
                    beanId = R.drawable.jandycane;
                }
                BitmapDrawable bean = (BitmapDrawable) getContext().getResources().getDrawable(beanId);
                Bitmap beanBits = bean.getBitmap();
                h=beanBits.getHeight();
                w=beanBits.getWidth();

                if (DEBUG) {
                    bean.setAlpha(0x80);
                }
                this.setImageDrawable(bean);

                Paint pt = new Paint();
                final int color = pickInt(COLORS);
                ColorMatrix CM = new ColorMatrix();
                float[] M = CM.getArray();
                // we assume the color information is in the red channel
                /* R */ M[0]  = (float)((color & 0x00FF0000) >> 16) / 0xFF;
                /* G */ M[5]  = (float)((color & 0x0000FF00) >> 8)  / 0xFF;
                /* B */ M[10] = (float)((color & 0x000000FF))       / 0xFF;
                pt.setColorFilter(new ColorMatrixColorFilter(M));
                setLayerType(View.LAYER_TYPE_HARDWARE, (beanId == R.drawable.jandycane) ? null : pt);
!!!7573516.java!!!	reset() : void
                pickBean();

                final float scale = lerp(MIN_SCALE,MAX_SCALE,z);
                setScaleX(scale); setScaleY(scale);

                r = 0.3f*Math.max(h,w)*scale;

                a=(randfrange(0,360));
                va = randfrange(-30,30);

                vx = randfrange(-40,40) * z;
                vy = randfrange(-40,40) * z;
                final float boardh = boardHeight;
                final float boardw = boardWidth;
                //android.util.Log.d("BeanBag", "reset: w="+w+" h="+h);
                if (flip()) {
                    x=(vx < 0 ? boardw+2*r : -r*4f);
                    y=(randfrange(0, boardh-3*r)*0.5f + ((vy < 0)?boardh*0.5f:0));
                } else {
                    y=(vy < 0 ? boardh+2*r : -r*4f);
                    x=(randfrange(0, boardw-3*r)*0.5f + ((vx < 0)?boardw*0.5f:0));
                }
!!!7573644.java!!!	update(in dt : float) : void
                if (grabbed) {
//                    final float interval = (SystemClock.uptimeMillis() - grabtime) / 1000f;
                    vx = (vx * 0.75f) + ((grabx - x) / dt) * 0.25f;
                    x = grabx;
                    vy = (vy * 0.75f) + ((graby - y) / dt) * 0.25f;;
                    y = graby;
                } else {
                    x = (x + vx * dt);
                    y = (y + vy * dt);
                    a = (a + va * dt);
                }
!!!7573772.java!!!	overlap(inout other : Bean) : float
                final float dx = (x - other.x);
                final float dy = (y - other.y);
                return mag(dx, dy) - r - other.r;
!!!7573900.java!!!	onTouchEvent(inout e : MotionEvent) : boolean
                switch (e.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        grabbed = true;
                        grabx_offset = e.getRawX() - x;
                        graby_offset = e.getRawY() - y;
                        va = 0;
                        // fall
                    case MotionEvent.ACTION_MOVE:
                        grabx = e.getRawX() - grabx_offset;
                        graby = e.getRawY() - graby_offset;
                        grabtime = e.getEventTime();
                        break;
                    case MotionEvent.ACTION_CANCEL:
                    case MotionEvent.ACTION_UP:
                        grabbed = false;
                        float a = randsign() * clamp(mag(vx, vy) * 0.33f, 0, 1080f);
                        va = randfrange(a*0.5f, a);
                        break;
                }
                return true;
