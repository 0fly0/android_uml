class ChannelSurfingUtils
!!!12327436.java!!!	ChannelSurfingUtils(inout context : Context)
        this.mContext = context;
        mEnabledChannels = Wrapper.getWrapperInstance().getEnabledChannels();
!!!12327564.java!!!	isSurfingMode() : boolean
        return isSurfingMode;
!!!12327692.java!!!	exitSurfingMode(inout bSwitchChannel : boolean) : void
        if (isSurfingMode && bSwitchChannel) {
            switchSurfedChannel();
        }
        isSurfingMode = false;
!!!12327820.java!!!	setAutoTime(in enterTime : int, in exitTime : int) : void
        channelUpDownInterval = enterTime;
        timeOutInterval = exitTime;
!!!12327948.java!!!	doChannelOperation(inout channelUp : boolean) : void
        if (!isSurfingMode) {
            if (!isSurfingReady()) {
                navigateChannel(channelUp);
                prepareSurfing();
            } else {
                Log.d(TAG, "enter channel surfing mode");
                isSurfingMode = true;
                refreshChannelIndex();
                doChannelSurfing(channelUp);
            }
        }
        else {
            doChannelSurfing(channelUp);
        }
!!!12328076.java!!!	getSurfedChannelInfo() : Channel
        if (mEnabledChannels != null && mEnabledChannels.size() > 0
                && currentIndex >= 0)
            return mEnabledChannels.get(currentIndex);
        else
            return null;
!!!12328204.java!!!	registerOnChannelSurfed(inout channelSurfedRunnable : Runnable) : void
        mOnChannelSurfedRunnable = channelSurfedRunnable;
!!!12328332.java!!!	prepareSurfing() : void
        mHandler.sendMessageDelayed(
                mHandler.obtainMessage(CHANNEL_UPDOWN_MESSAGEID),
                channelUpDownInterval);
!!!12328460.java!!!	isSurfingReady() : boolean
        return mHandler.hasMessages(CHANNEL_UPDOWN_MESSAGEID);
!!!12328588.java!!!	startSurfingTimeOut() : void
        Log.d(TAG, "startTimeOut timeOutInterval=" + timeOutInterval);
        mHandler.removeMessages(CHANNEL_SURFING_TIMEOUT_MESSAGEID);
        mHandler.sendMessageDelayed(
                mHandler.obtainMessage(CHANNEL_SURFING_TIMEOUT_MESSAGEID),
                timeOutInterval);
!!!12328716.java!!!	switchSurfedChannel() : void
        final LiveTv mLive = TvFramework.getInstance().getLiveTvInstance();
        ChannelDetails currentChannel = mLive.getCurrentChannelDetail();
        Channel ch = getSurfedChannelInfo();
        if (ch != null) {
            if (!Wrapper.getWrapperInstance().isSameChannel(currentChannel, ch)) {
                Wrapper.getWrapperInstance().pauseCC();
                Log.d(TAG, "switchSurfedChannel major:" + ch.getChannelNumber().getMajor()
                        + " minor:" + ch.getChannelNumber().getMinor());
                ChannelStreamInfo csi = new ChannelStreamInfo(PairingDevice.TUNER_DEVICE_ID,
                        Uri.parse(ch.getUri()));
                mLive.channelChange(true, ch.getChannelNumber().getMajor(),
                        ch.getChannelNumber().getMinor(), csi.getServiceId());
            }
        }
!!!12328844.java!!!	doChannelSurfing(inout channelUp : boolean) : void
        if (channelUp) {
            currentIndex++;
        } else {
            currentIndex--;
        }
        validateCurrentIndex();

        startSurfingTimeOut();

        if (mOnChannelSurfedRunnable != null)
            mHandler.post(mOnChannelSurfedRunnable);
!!!12328972.java!!!	refreshChannelIndex() : void
        ChannelDetails currentChannel = gLive.getCurrentChannelDetail();
        Channel ch = null;
        if (mEnabledChannels != null) {
            for (int i = 0; i < mEnabledChannels.size(); i++) {
                ch = mEnabledChannels.get(i);
                if (Wrapper.getWrapperInstance().isSameChannel(currentChannel, ch)) {
                    currentIndex = i;
                    break;
                }
            }
        }
!!!12329100.java!!!	validateCurrentIndex() : void
        if (mEnabledChannels == null) {
            currentIndex = 0;
            return;
        }
        if (currentIndex < 0) {
            currentIndex = mEnabledChannels.size() - 1;
        }
        if (currentIndex < 0 || currentIndex > mEnabledChannels.size() - 1) {
            currentIndex = 0;
        }
!!!12329228.java!!!	navigateChannel(in channelUp : boolean) : void
        Log.d(TAG, "navigateChannel channelUp=" + channelUp);
        Wrapper.getWrapperInstance().runInNonUiThread(new Runnable() {

            @Override
            public void run() {
                // TODO Auto-generated method stub

                if (Wrapper.getWrapperInstance().isTunerInput()) {
                    /*
                     * If EAS event has not occurred, flag is set to true and
                     * Key handling is normal.If EAS event has occurred, flag is
                     * set to false and none of the keys are handled.
                     */
                    if (!Wrapper.getWrapperInstance().isEASEnabled()) {

                        if (channelUp) {

                            if (Wrapper.getWrapperInstance().allowChannelUpDown()) {
                                Wrapper.getWrapperInstance().pauseCC();
                                Wrapper.getWrapperInstance().doChannelUp(mContext);
                            }
                        } else {
                            if (Wrapper.getWrapperInstance().allowChannelUpDown()) {
                                Wrapper.getWrapperInstance().pauseCC();
                                Wrapper.getWrapperInstance().doChannelDown(mContext);
                            }
                        }
                    }
                }
            }
        }, 0);
