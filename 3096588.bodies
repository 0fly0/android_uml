class KeyboardId
!!!12928140.java!!!	KeyboardId(in elementId : int, inout subtype : InputMethodSubtype, in orientation : int, in width : int, in mode : int, inout editorInfo : EditorInfo, inout clobberSettingsKey : boolean, inout shortcutKeyEnabled : boolean, inout hasShortcutKey : boolean, inout languageSwitchKeyEnabled : boolean)
        mSubtype = subtype;
        mLocale = SubtypeLocale.getSubtypeLocale(subtype);
        mOrientation = orientation;
        mWidth = width;
        mMode = mode;
        mElementId = elementId;
        mEditorInfo = editorInfo;
        mClobberSettingsKey = clobberSettingsKey;
        mShortcutKeyEnabled = shortcutKeyEnabled;
        mHasShortcutKey = hasShortcutKey;
        mLanguageSwitchKeyEnabled = languageSwitchKeyEnabled;
        mCustomActionLabel = (editorInfo.actionLabel != null)
                ? editorInfo.actionLabel.toString() : null;

        mHashCode = computeHashCode(this);
!!!12928268.java!!!	computeHashCode(inout id : KeyboardId) : int
        return Arrays.hashCode(new Object[] {
                id.mOrientation,
                id.mElementId,
                id.mMode,
                id.mWidth,
                id.passwordInput(),
                id.mClobberSettingsKey,
                id.mShortcutKeyEnabled,
                id.mHasShortcutKey,
                id.mLanguageSwitchKeyEnabled,
                id.isMultiLine(),
                id.imeAction(),
                id.mCustomActionLabel,
                id.navigateNext(),
                id.navigatePrevious(),
                id.mSubtype
        });
!!!12928396.java!!!	equals(inout other : KeyboardId) : boolean
        if (other == this)
            return true;
        return other.mOrientation == mOrientation
                && other.mElementId == mElementId
                && other.mMode == mMode
                && other.mWidth == mWidth
                && other.passwordInput() == passwordInput()
                && other.mClobberSettingsKey == mClobberSettingsKey
                && other.mShortcutKeyEnabled == mShortcutKeyEnabled
                && other.mHasShortcutKey == mHasShortcutKey
                && other.mLanguageSwitchKeyEnabled == mLanguageSwitchKeyEnabled
                && other.isMultiLine() == isMultiLine()
                && other.imeAction() == imeAction()
                && TextUtils.equals(other.mCustomActionLabel, mCustomActionLabel)
                && other.navigateNext() == navigateNext()
                && other.navigatePrevious() == navigatePrevious()
                && other.mSubtype.equals(mSubtype);
!!!12928524.java!!!	isAlphabetKeyboard() : boolean
        return mElementId < ELEMENT_SYMBOLS;
!!!12928652.java!!!	navigateNext() : boolean
        return (mEditorInfo.imeOptions & EditorInfo.IME_FLAG_NAVIGATE_NEXT) != 0;
!!!12928780.java!!!	navigatePrevious() : boolean
        return (mEditorInfo.imeOptions & EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS) != 0;
!!!12928908.java!!!	passwordInput() : boolean
        final int inputType = mEditorInfo.inputType;
        return InputTypeUtils.isPasswordInputType(inputType)
                || InputTypeUtils.isVisiblePasswordInputType(inputType);
!!!12929036.java!!!	isMultiLine() : boolean
        return (mEditorInfo.inputType & InputType.TYPE_TEXT_FLAG_MULTI_LINE) != 0;
!!!12929164.java!!!	imeAction() : int
        final int actionId = mEditorInfo.imeOptions & EditorInfo.IME_MASK_ACTION;
        if ((mEditorInfo.imeOptions & EditorInfo.IME_FLAG_NO_ENTER_ACTION) != 0) {
            return EditorInfo.IME_ACTION_NONE;
        } else if (mEditorInfo.actionLabel != null) {
            return IME_ACTION_CUSTOM_LABEL;
        } else {
            return actionId;
        }
!!!12929292.java!!!	imeActionId() : int
        final int actionId = imeAction();
        return actionId == IME_ACTION_CUSTOM_LABEL ? mEditorInfo.actionId : actionId;
!!!12929420.java!!!	equals(inout other : Object) : boolean
        return other instanceof KeyboardId && equals((KeyboardId) other);
!!!12929548.java!!!	hashCode() : int
        return mHashCode;
!!!12929676.java!!!	toString() : String
        return String.format("[%s %s:%s %s%d %s %s %s%s%s%s%s%s%s%s]",
                elementIdToName(mElementId),
                mLocale,
                mSubtype.getExtraValueOf(KEYBOARD_LAYOUT_SET),
                (mOrientation == 1 ? "port" : "land"), mWidth,
                modeName(mMode),
                imeAction(),
                (navigateNext() ? "navigateNext" : ""),
                (navigatePrevious() ? "navigatePrevious" : ""),
                (mClobberSettingsKey ? " clobberSettingsKey" : ""),
                (passwordInput() ? " passwordInput" : ""),
                (mShortcutKeyEnabled ? " shortcutKeyEnabled" : ""),
                (mHasShortcutKey ? " hasShortcutKey" : ""),
                (mLanguageSwitchKeyEnabled ? " languageSwitchKeyEnabled" : ""),
                (isMultiLine() ? "isMultiLine" : "")
        );
!!!12929804.java!!!	equivalentEditorInfoForKeyboard(inout a : EditorInfo, inout b : EditorInfo) : boolean
        if (a == null && b == null) return true;
        if (a == null || b == null) return false;
        return a.inputType == b.inputType
                && a.imeOptions == b.imeOptions
                && TextUtils.equals(a.privateImeOptions, b.privateImeOptions);
!!!12929932.java!!!	elementIdToName(in elementId : int) : String
        switch (elementId) {
        case ELEMENT_ALPHABET: return "alphabet";
        case ELEMENT_ALPHABET_MANUAL_SHIFTED: return "alphabetManualShifted";
        case ELEMENT_ALPHABET_AUTOMATIC_SHIFTED: return "alphabetAutomaticShifted";
        case ELEMENT_ALPHABET_SHIFT_LOCKED: return "alphabetShiftLocked";
        case ELEMENT_ALPHABET_SHIFT_LOCK_SHIFTED: return "alphabetShiftLockShifted";
        case ELEMENT_SYMBOLS: return "symbols";
        case ELEMENT_SYMBOLS_SHIFTED: return "symbolsShifted";
        case ELEMENT_PHONE: return "phone";
        case ELEMENT_PHONE_SYMBOLS: return "phoneSymbols";
        case ELEMENT_NUMBER: return "number";
        default: return null;
        }
!!!12930060.java!!!	modeName(in mode : int) : String
        switch (mode) {
        case MODE_TEXT: return "text";
        case MODE_URL: return "url";
        case MODE_EMAIL: return "email";
        case MODE_IM: return "im";
        case MODE_PHONE: return "phone";
        case MODE_NUMBER: return "number";
        case MODE_DATE: return "date";
        case MODE_TIME: return "time";
        case MODE_DATETIME: return "datetime";
        default: return null;
        }
!!!12930188.java!!!	actionName(in actionId : int) : String
        return (actionId == IME_ACTION_CUSTOM_LABEL) ? "actionCustomLabel"
                : EditorInfoCompatUtils.imeActionName(actionId);
