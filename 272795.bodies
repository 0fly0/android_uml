class ThreadLocalRandom
!!!1624603.java!!!	ThreadLocalRandom()
        super();
        initialized = true;
!!!1624731.java!!!	current() : ThreadLocalRandom
        return localRandom.get();
!!!1624859.java!!!	setSeed(in seed : long) : void
        if (initialized)
            throw new UnsupportedOperationException();
        rnd = (seed ^ multiplier) & mask;
!!!1624987.java!!!	next(in bits : int) : int
        rnd = (rnd * multiplier + addend) & mask;
        return (int) (rnd >>> (48-bits));
!!!1625115.java!!!	nextInt(in least : int, in bound : int) : int
        if (least >= bound)
            throw new IllegalArgumentException();
        return nextInt(bound - least) + least;
!!!1625243.java!!!	nextLong(in n : long) : long
        if (n <= 0)
            throw new IllegalArgumentException("n must be positive");
        // Divide n by two until small enough for nextInt. On each
        // iteration (at most 31 of them but usually much less),
        // randomly choose both whether to include high bit in result
        // (offset) and whether to continue with the lower vs upper
        // half (which makes a difference only if odd).
        long offset = 0;
        while (n >= Integer.MAX_VALUE) {
            int bits = next(2);
            long half = n >>> 1;
            long nextn = ((bits & 2) == 0) ? half : n - half;
            if ((bits & 1) == 0)
                offset += n - nextn;
            n = nextn;
        }
        return offset + nextInt((int) n);
!!!1625371.java!!!	nextLong(in least : long, in bound : long) : long
        if (least >= bound)
            throw new IllegalArgumentException();
        return nextLong(bound - least) + least;
!!!1625499.java!!!	nextDouble(in n : double) : double
        if (n <= 0)
            throw new IllegalArgumentException("n must be positive");
        return nextDouble() * n;
!!!1625627.java!!!	nextDouble(in least : double, in bound : double) : double
        if (least >= bound)
            throw new IllegalArgumentException();
        return nextDouble() * (bound - least) + least;
