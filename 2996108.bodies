class IrBlasterController
!!!12213772.java!!!	IrBlasterController(in context : DeviceControllerContext, in settings : MediaDeviceSettings, in deviceId : String)
        super(context, settings, deviceId);
!!!12213900.java!!!	getCommandSet() : String
        return getStringSetting(OneWayConstants.KEY_IR_COMMAND_SET_ID, null);
!!!12214028.java!!!	destroy() : void
        super.destroy();
!!!12214156.java!!!	performAction(inout event : ActionEvent) : void
        if (DEBUG) {
            Log.d(LOG_TAG, "Sending event " + event + " with command set "
                    + getStringSetting(OneWayConstants.KEY_IR_COMMAND_SET_ID, null)
                    + ", brand name: "
                    + getStringSetting(OneWayConstants.KEY_IR_DEVICE_BRAND_NAME, null));
        }

        /* Get the string of Action */
        String str = event.getAction().toString();

        final boolean isDirecTV = BRAND_STRING_DIRECTV.equalsIgnoreCase(
                getStringSetting(OneWayConstants.KEY_IR_DEVICE_BRAND_NAME, null));

        // GTV back/escape = Dish remote "Cancel" = DirecTV remote "Back".
        // Users can return back to the previous view with this two keys.
        // Since KEYCODE_BACK/KEYCODE_ESCAPE are handled as Action.CANCEL in MediaDeviceView,
        // we translate Action.CANCEL to Action.BACK for DirecTV here.
        // TODO: need complete definition for various brands.
        if (str.equals(Action.CANCEL.toString()) && isDirecTV) {
            str = UEIKey.BACK.toString();
        }

        // For DirectTV, mapping Action.DVR to UEI LIST key.
        // For Dish and other devices, it maps to UEI PVR MENU in default.
        if (str.equals(Action.DVR.toString()) && isDirecTV) {
            str = UEIKey.LIST.toString();
        }

        if (event.getState() != State.UP) {
            Log.d(LOG_TAG, "str = " + str);
            UEIKey sendUEIKey;
            try {
                sendUEIKey = Enum.valueOf(UEIKey.class, str);
            } catch (IllegalArgumentException e) {
                Log.d(LOG_TAG, "No UEI Key named by " + str);
                return;
            }
            Log.d(LOG_TAG, "sendUEIKey = " + sendUEIKey);

            if (str.equals(Action.DELIMITER_PERIOD.toString()) ||
                    str.equals(Action.DELIMITER_DASH.toString()) ||
                    str.equals(Action.SYMBOL_ASTERISK.toString()) ||
                    str.equals(Action.SYMBOL_POUND.toString())) {
                sendUEIKey = UEIKey.DELIMITER;
            }

            String commandSet = getCommandSet();
            if (commandSet != null) {
                IRBCommand.sendKey(commandSet, sendUEIKey);
            }
        }
!!!12214284.java!!!	tuneToChannel(inout channelNumber : ChannelNumber) : void
        int majorNumber = channelNumber.getMajor();
        int minorNumber = channelNumber.getMinor();
        // Implement IR blasting here.
        // If the minor number != 0, add a delimiter character between the numbers.
        // If the minor number == 0, then just send the major number.
        if (DEBUG) {
            StringBuilder channelString = new StringBuilder();
            channelString.append(majorNumber);
            if (minorNumber != 0) {
                channelString.append("-");
                channelString.append(minorNumber);
            }
            Log.d(LOG_TAG, "Sending channel command " + channelString);

            String commandSet = getCommandSet();
            if (commandSet == null) {
                Log.d(LOG_TAG, "commandSet is null");
                return;
            }
            if (0 == minorNumber) {
                sendChannelNumber(commandSet, majorNumber);
            } else {
                sendChannelNumber(commandSet, majorNumber);
                IRBCommand.sendKey(commandSet, UEIKey.DELIMITER);
                sendChannelNumber(commandSet, minorNumber);
            }
            IRBCommand.sendKey(commandSet, UEIKey.SELECT);
        }
!!!12214412.java!!!	sendChannelNumber(in commandSet : String, in number : int) : void
        // Translate channel number to UEIKeys, and send them.
        ArrayList<Integer> digits = new ArrayList<Integer>();
        do {
            digits.add(new Integer(number % 10));
            number /= 10;
        } while(number != 0);

        for (int i = digits.size() - 1; i >= 0; i --) {
            UEIKey sendUEIKey = UEI_NUMBER_KEYS[digits.get(i).intValue()];
            IRBCommand.sendKey(commandSet, sendUEIKey);
        }
