class SensorFusion
!!!1725964.cpp!!!	process(in event : sensors_event_t) : void
    if (event.type == SENSOR_TYPE_GYROSCOPE) {
        if (mGyroTime != 0) {
            const float dT = (event.timestamp - mGyroTime) / 1000000000.0f;
            const float freq = 1 / dT;
            if (freq >= 100 && freq<1000) { // filter values obviously wrong
                const float alpha = 1 / (1 + dT); // 1s time-constant
                mGyroRate = freq + (mGyroRate - freq)*alpha;
            }
        }
        mGyroTime = event.timestamp;
        mFusion.handleGyro(vec3_t(event.data), 1.0f/mGyroRate);
    } else if (event.type == SENSOR_TYPE_MAGNETIC_FIELD) {
        const vec3_t mag(event.data);
        mFusion.handleMag(mag);
    } else if (event.type == SENSOR_TYPE_ACCELEROMETER) {
        const vec3_t acc(event.data);
        mFusion.handleAcc(acc);
        mAttitude = mFusion.getAttitude();
    }
!!!1726860.cpp!!!	activate(inout ident : void, in enabled : bool) : status_t

    ALOGD_IF(DEBUG_CONNECTIONS,
            "SensorFusion::activate(ident=%p, enabled=%d)",
            ident, enabled);

    const ssize_t idx = mClients.indexOf(ident);
    if (enabled) {
        if (idx < 0) {
            mClients.add(ident);
        }
    } else {
        if (idx >= 0) {
            mClients.removeItemsAt(idx);
        }
    }

    mSensorDevice.activate(ident, mAcc.getHandle(), enabled);
    mSensorDevice.activate(ident, mMag.getHandle(), enabled);
    mSensorDevice.activate(ident, mGyro.getHandle(), enabled);

    const bool newState = mClients.size() != 0;
    if (newState != mEnabled) {
        mEnabled = newState;
        if (newState) {
            mFusion.init();
            mGyroTime = 0;
        }
    }
    return NO_ERROR;
!!!1726988.cpp!!!	setDelay(inout ident : void, in ns : int64_t) : status_t
    mSensorDevice.setDelay(ident, mAcc.getHandle(), ns);
    mSensorDevice.setDelay(ident, mMag.getHandle(), ms2ns(20));
    mSensorDevice.setDelay(ident, mGyro.getHandle(), mTargetDelayNs);
    return NO_ERROR;
!!!1727116.cpp!!!	getPowerUsage() : float
    float power =   mAcc.getPowerUsage() +
                    mMag.getPowerUsage() +
                    mGyro.getPowerUsage();
    return power;
!!!1727244.cpp!!!	getMinDelay() : int32_t
    return mAcc.getMinDelay();
!!!1727372.cpp!!!	dump(inout result : String8, inout buffer : char, in SIZE : size_t) : void
    const Fusion& fusion(mFusion);
    snprintf(buffer, SIZE, "9-axis fusion %s (%d clients), gyro-rate=%7.2fHz, "
            "q=< %g, %g, %g, %g > (%g), "
            "b=< %g, %g, %g >\n",
            mEnabled ? "enabled" : "disabled",
            mClients.size(),
            mGyroRate,
            fusion.getAttitude().x,
            fusion.getAttitude().y,
            fusion.getAttitude().z,
            fusion.getAttitude().w,
            length(fusion.getAttitude()),
            fusion.getBias().x,
            fusion.getBias().y,
            fusion.getBias().z);
    result.append(buffer);
