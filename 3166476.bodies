class HomeActivity
!!!13430796.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        if (ENABLE_STRICT_MODE) {
            StrictMode.enableDefaults();
        }
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);

        mAppendFirstLaunchFlag = false;
        mHandler = new MyHandler();
        mEventLogger = new EventLogger(getApplicationContext().getContentResolver());
        mDataProvider = ((LauncherApp) getApplication()).getDataProvider();
        mPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        mPreferences.registerOnSharedPreferenceChangeListener(this);
        onSharedPreferenceChanged(mPreferences, "show_wallpaper_always");
        setupWallpaper();
        setContentView(R.layout.home_main);
        mAppWidgetHost = new AppWidgetHost(this, APPWIDGET_HOST_ID);
        mDockView = (DockView) findViewById(R.id.dock_items);
        mDockLabel = (TextView) findViewById(R.id.dock_label);
        setupDockLabelAnimators();
        mQuickListControlEnterAnimator = AnimatorInflater.loadAnimator(this,
                R.anim.quicklist_control_enter);
        mQuickListControlExitAnimator = AnimatorInflater.loadAnimator(this,
                R.anim.quicklist_control_exit);
        setupWidgetCanvas();
        setupAddWidgetButton();
        setupSystemButton();
        setupDoneButton();
        setupMoreButton();
        setupDockView();
        setupKeys();
        setupLogo();
        resetDockLabel();
!!!13430924.java!!!	onStart() : void
        super.onStart();
        mAppWidgetHost.startListening();
        mSystemButton.activateClock();
        setupDataObserver();
        resetDockLabel();
        mWidgetCanvas.setVisible(false);
        setupHideReceiver();
        if (isStrippedMode()) {
            loadStrippedMode();
            return;
        }
        loadQuickListItems(DEFAULT_QUICKLIST_ID /* only supporting 1 quicklist for now */);
        loadCanvasItems(DEFAULT_CANVAS_ID /* only supporting 1 canvas for now */);
        checkNotifications();
        if (!isShowingMoreItems()) {
            mMoreButton.requestFocus();
        }
!!!13431052.java!!!	onStop() : void
        mAppWidgetHost.stopListening();
        mSystemButton.deactivateClock();
        stopCheckingNotifications();
        teardownDataObserver();
        teardownHideReceiver();
        resetDockLabel();
        mLogoController.reset();
        // If in stripped mode, finish this so that we could load regular mode on next launch if
        // necessary.
        if (isStrippedMode()) {
            finish();
        }
        super.onStop();
!!!13431180.java!!!	onResume() : void
        super.onResume();
        if (!isFinishing()) {
            ((AudioManager) getSystemService(Context.AUDIO_SERVICE)).playSoundEffect(
                    AudioManager.FX_KEY_CLICK);  // TODO(jumong): b/6957380
        }
        if (!launchTutorialIfNecessary()) {
            launchBootIntentIfFirstLaunch();
        }
        closeApplicationOverlays();
        checkNotifications();
        if (!mShowWallpaperAlways && !showWallpaperIfAlone()) {
            mHandler.showWallpaperDelayed();
        }
!!!13431308.java!!!	onPause() : void
        super.onPause();
        if (!mShowWallpaperAlways) {
            showWallpaper(false);
        }
!!!13431436.java!!!	showWallpaperIfAlone() : boolean
        return showWallpaper(isHomeActivityRunningAlone());
!!!13431564.java!!!	showWallpaper() : boolean
        return showWallpaper(true);
!!!13431692.java!!!	showWallpaper(inout show : boolean) : boolean
        getWindow().setFlags(show ? WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER : 0,
                WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER);
        return show;
!!!13431820.java!!!	closeApplicationOverlays() : void
        sendBroadcast(new Intent()
                .setAction(TvIntent.ACTION_CLOSE_APPLICATION_OVERLAYS)
                .addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY)
                .putExtra(TvIntent.EXTRA_REASON, CLOSE_APPLICATION_OVERLAYS_REASON));
!!!13431948.java!!!	finish() : void
        super.finish();
        if (isFinishing()) {
            mWidgetCanvas.setVisible(false);
        }
!!!13432076.java!!!	onDestroy() : void
        destroyStrippedModeController();
        super.onDestroy();
!!!13432204.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        if (requestCode == REQUEST_CREATE_APP_WIDGET && data != null) {
            int appWidgetId = data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,
                    AppWidgetManager.INVALID_APPWIDGET_ID);
            if (resultCode == RESULT_OK) {
                AppWidgetProviderInfo info = AppWidgetManager.getInstance(this).getAppWidgetInfo(
                        appWidgetId);
                addNewWidget(appWidgetId, info);
            } else {
                // Clean up the allocated app widget ID.
                if (appWidgetId != AppWidgetManager.INVALID_APPWIDGET_ID) {
                    mAppWidgetHost.deleteAppWidgetId(appWidgetId);
                }
            }
        } else if (requestCode == REQUEST_TUTORIAL && resultCode == RESULT_OK) {
            mAppendFirstLaunchFlag = true;
        }
!!!13432332.java!!!	onNewIntent(inout intent : Intent) : void
        int flags = intent.getFlags();
        boolean broughtToFront = (flags & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0;
        if (Intent.ACTION_MAIN.equals(intent.getAction())
                && intent.hasCategory(Intent.CATEGORY_HOME)) {
            // User hit home while this was in the foreground or background.
            if (!hideMoreItemsViewIfShowing() && !broughtToFront
                    && !isHomeActivityRunningAlone()) {
                // Only finish if this was in the foreground and apps view wasn't showing.
                finish();
            }
        } else {
            // In other cases, set the intent so that getIntent() works.
            setIntent(intent);
        }
!!!13432460.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        return mKeys.onKeyEvent(event) || super.onKeyDown(keyCode, event);
!!!13432588.java!!!	onBackPressed() : void
        if (!hideMoreItemsViewIfShowing()) {
            if (mEditing) {
                setEditingMode(false);
            } else {
                if (isHomeActivityRunningAlone()) {
                    // no-op
                } else {
                    moveTaskToBack(false);
                }
            }
        } else {
            checkNotifications();
            mMoreButton.requestFocus();
        }
!!!13432716.java!!!	isHomeActivityRunningAlone() : boolean
        ActivityManager actvityManager =
                (ActivityManager) this.getSystemService(ACTIVITY_SERVICE);
        // If the num of running tasks is only one,
        // the running task is this activity.
        return (actvityManager.getRunningTasks(2).size() == 1);
!!!13432844.java!!!	onWindowFocusChanged(inout hasFocus : boolean) : void
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            checkNotifications();
            if (mDockView.hasFocus()) {
                mDockView.resurrectDockLabel();
            }
        }
!!!13432972.java!!!	onSearchRequested() : boolean
        startSearch(null, false, null, true /* global */);
        return true;
!!!13433100.java!!!	onCreateOptionsMenu(inout menu : Menu) : boolean
        if (isStrippedMode()) {
            return false;
        }
        super.onCreateOptionsMenu(menu);
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
!!!13433228.java!!!	onPrepareOptionsMenu(inout menu : Menu) : boolean
        MenuItem editing = menu.findItem(R.id.menu_edit);
        editing.setTitle(mEditing ? R.string.menu_edit_off : R.string.menu_edit_on);
        return super.onPrepareOptionsMenu(menu);
!!!13433356.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        switch (item.getItemId()) {
            case R.id.menu_edit:
                hideMoreItemsViewIfShowing();
                toggleEditingMode();
                return true;
            case R.id.menu_settings:
                startActivitySafely(new Intent(Settings.ACTION_SETTINGS));
                return true;
            case R.id.menu_launcher_settings:
                startActivity(new Intent(this, LauncherSettings.class));
                return true;
            default:
                return false;
        }
!!!13433484.java!!!	onCreateContextMenu(inout menu : ContextMenu, inout v : View, inout menuInfo : ContextMenuInfo) : void
        super.onCreateContextMenu(menu, v, menuInfo);
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.launcher_item_context, menu);
        LauncherItemContextMenuInfo info = (LauncherItemContextMenuInfo) menuInfo;
        LauncherItemInfo itemInfo = info.getInfo();
        if (itemInfo != null) {
            menu.setHeaderIcon(itemInfo.getIcon(this));
            menu.setHeaderTitle(itemInfo.getTitle());
            if (v instanceof QuickListItemView) {
                QuickListItemView view = (QuickListItemView) v;
                if (view.getState() == QuickListItemView.State.MOVING) {
                    MenuItem move = menu.findItem(R.id.menu_move);
                    if (move != null) {
                        move.setEnabled(false);
                    }
                }
            }
        } else {
            menu.clear();
        }
!!!13433612.java!!!	onContextItemSelected(inout item : MenuItem) : boolean
        if (item.getMenuInfo() instanceof LauncherItemContextMenuInfo) {
            LauncherItemContextMenuInfo info = (LauncherItemContextMenuInfo) item.getMenuInfo();
            QuickListItemView quickListView = (QuickListItemView) info.getTargetView();
            int quickListIndex = info.getQuickListIndex();
            switch(item.getItemId()) {
                case R.id.menu_delete:
                    removeQuickListItem(quickListIndex, quickListView);
                    return true;
                case R.id.menu_replace:
                    loadMoreItemsPicker(quickListIndex, quickListView);
                    return true;
                case R.id.menu_move:
                    mDockView.startMoveOperation(quickListView);
                    return true;
            }
        }
        return super.onContextItemSelected(item);
!!!13433740.java!!!	onSharedPreferenceChanged(inout prefs : SharedPreferences, in key : String) : void
        boolean useWallpaper = mPreferences.getBoolean("show_wallpaper_always", false);
        if (useWallpaper != mShowWallpaperAlways) {
            mShowWallpaperAlways = useWallpaper;
            if (mShowWallpaperAlways == true) {
                showWallpaper();
            } else {
                showWallpaperIfAlone();
            }
        }
!!!13433868.java!!!	getIconCache() : IconCache
        return ((LauncherApp) getApplication()).getIconCache();
!!!13434764.java!!!	setupSystemButton() : void
        mSystemButton = (SystemButton) findViewById(R.id.system);
        mSystemButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                expandStatusBar();
            }
        });
!!!13434892.java!!!	expandStatusBar() : void
        mEventLogger.logSystemPanelLaunched();
        StatusBarManager statusBar = (StatusBarManager) getSystemService(STATUS_BAR_SERVICE);
        if (statusBar != null) {
            statusBar.expandNotificationsPanel();
        }
        checkNotifications();
!!!13435020.java!!!	checkNotifications() : void
        mSystemButton.setNotificationCount(SystemProperties.getInt("sys.notification_count", 0));
        mHandler.pollForNotifications();
!!!13435148.java!!!	stopCheckingNotifications() : void
        mHandler.stopPollForNotifications();
!!!13435276.java!!!	setupDoneButton() : void
        mEditDoneButton = (Button) findViewById(R.id.edit_done);
        mEditDoneButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setEditingMode(false);
            }
        });
!!!13435404.java!!!	setupKeys() : void
        KeySequence.Builder builder = KeySequence.builder();
        // Wire up the quicklist views to execute.
        int startKeyCode = KeyEvent.KEYCODE_1;
        int index = 0;
        for (QuickListItemView view : mDockView.getQuickListItemViews()) {
            builder.addShortcut(startKeyCode++).setAction(createQuickListAction(index++));
        }
        // Wire up 9 to launch more items.
        builder.addShortcut(KeyEvent.KEYCODE_9).setAction(new Runnable() {
            @Override
            public void run() {
                showMoreItemsView();
            }
        });
        // Wire up 0 to launch status bar.
        builder.addShortcut(KeyEvent.KEYCODE_0).setAction(new Runnable() {
            @Override
            public void run() {
                expandStatusBar();
            }
        });
        mKeys = builder.build();
!!!13435532.java!!!	createQuickListAction(in index : int) : Runnable
        return new Runnable() {
            @Override
            public void run() {
                QuickListItemView view = mDockView.getQuickListItemView(index);
                if (view != null && view.getItem() != null) {
                    view.requestFocus();
                    mEventLogger.logLaunchFromQuickList();
                    ((AudioManager) getSystemService(Context.AUDIO_SERVICE)).playSoundEffect(
                            AudioManager.FX_KEY_CLICK);
                    startActivitySafely(view.getItem().getIntent());
                }
            }
        };
!!!13435660.java!!!	setupMoreButton() : void
        mMoreButton = (ImageButton) findViewById(R.id.more_items);
        mMoreButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showMoreItemsView();
            }
        });
!!!13435788.java!!!	showMoreItemsView() : void
/* TODO(jumong): b/6957432
        // Do not try to show anything after activity has been saved.
        if (isOnSaveInstanceStateCalled()) {
            return;
        }
*/
        MoreItemsView fragment = new MoreItemsView();
        FragmentTransaction ft = getFragmentManager().beginTransaction();
        ft.setCustomAnimations(R.anim.more_items_enter, R.anim.more_items_exit)
                .replace(R.id.fragment_container, fragment)
                .commit();
!!!13435916.java!!!	hideMoreItemsViewIfShowing() : boolean
        if (isShowingMoreItems()) {
            Fragment moreItems = getFragmentManager().findFragmentById(R.id.fragment_container);
            FragmentTransaction ft = getFragmentManager().beginTransaction();
            ft.setCustomAnimations(R.anim.more_items_enter, R.anim.more_items_exit)
                     .remove(moreItems)
                     .commit();
            return true;
        }
        return false;
!!!13436044.java!!!	loadMoreItemsPicker(in index : int, in view : QuickListItemView) : void
        DataProviderTask task = new DataProviderTask(DataType.MORE_ITEMS) {
            @Override
            public void onPostExecute(List<LauncherItemInfo> result) {
                displayMoreItemsPicker(index, view, result);
            }
        };
        task.execute();
!!!13436172.java!!!	displayMoreItemsPicker(in index : int, in view : QuickListItemView, inout data : List<LauncherItemInfo>) : void
        final ArrayAdapter<LauncherItemInfo> infos = new ArrayAdapter<LauncherItemInfo>(this,
                R.layout.list_item, R.id.label) {
                    @Override
                    public View getView(int position, View convertView, ViewGroup parent) {
                        View view = super.getView(position, convertView, parent);
                        LauncherItemInfo info = getItem(position);
                        ImageView icon = (ImageView) view.findViewById(R.id.icon);
                        Drawable drawable = info.getIcon(getApplicationContext());
                        if (drawable == null) {
                            drawable = ((LauncherApp) getApplication()).getIconCache().
                                    getDefaultIcon();
                        }
                        icon.setImageDrawable(drawable);
                        return view;
                    }
        };
        infos.addAll(data);
        new AlertDialog.Builder(this)
                .setAdapter(infos, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        LauncherItemInfo info = infos.getItem(which);
                        mDataProvider.setQuickListItem(DEFAULT_QUICKLIST_ID, index, info);
                        view.setItem(info);
                        view.requestFocus();
                        setDockLabel(info.getTitle(), view);
                        mDockView.updateQuickListViewProperties();
                    }
                })
                .show();
!!!13436300.java!!!	isShowingMoreItems() : boolean
        Fragment moreItems = getFragmentManager().findFragmentById(R.id.fragment_container);
        return (moreItems != null && moreItems.isAdded());
!!!13436428.java!!!	setupDockView() : void
        mDockView.setListener(new DockView.Listener() {
            @Override
            public void onNewItemRequested(int index, QuickListItemView view) {
                loadMoreItemsPicker(index, view);
            }

            @Override
            public void onMoveFinished(QuickListItemView view, List<LauncherItemInfo> infos) {
                saveQuickListItemOrder(view, infos);
            }

            @Override
            public void onItemLaunchRequested(int index, LauncherItemInfo info) {
                mEventLogger.logLaunchFromQuickList();
                Intent intent = new Intent(info.getIntent());
                intent.putExtra(EXTRA_QUICK_LAUNCH, true);
                startActivitySafely(intent);
            }

            @Override
            public void onDockLabelChanged(CharSequence label, View child) {
                setDockLabel(label, child);
            }
        });
        for (QuickListItemView quickListView : mDockView.getQuickListItemViews()) {
            quickListView.setIconCache(getIconCache());
            registerForContextMenu(quickListView);
        }
        mDockView.setDockLabel(mMoreButton, getString(R.string.more_items_label));
!!!13436556.java!!!	loadQuickListItems(in quickListId : int) : void
        DataProviderTask task = new DataProviderTask(DataType.QUICKLIST) {
            @Override
            protected void onPostExecute(List<LauncherItemInfo> result) {
                super.onPostExecute(result);
                if (result != null) {
                    mDockView.loadQuickListItems(result);
                }
            }
        };
        task.execute(quickListId);
!!!13436684.java!!!	removeQuickListItem(in index : int, in view : QuickListItemView) : void
        List<LauncherItemInfo> infos = mDockView.getQuickListItems();
        infos.remove(index);
        UpdateQuickListTask task = new UpdateQuickListTask(infos) {
            @Override
            protected void onPostExecute(Boolean result) {
                super.onPostExecute(result);
                if (result) {
                    view.setItem(null);
                    mDockView.startClearAnimation(view);
                    setDockLabel(null, view);
                }
            }
        };
        task.execute();
!!!13436812.java!!!	saveQuickListItemOrder(inout view : QuickListItemView, in infos : List<LauncherItemInfo>) : void
        if (view.getMoveDelta() == 0) {
            // Nothing moved.
            // Reset the label properties so that we remove any backgrounds.
            mDockView.updateQuickListViewProperties();
            view.requestFocus();
            // Get the dock label back.
            mDockView.resurrectDockLabel();
            return;
        }
        final int index = view.getQuickListIndex() + view.getMoveDelta();
        UpdateQuickListTask task = new UpdateQuickListTask(infos) {
            @Override
            protected void onPostExecute(Boolean result) {
                super.onPostExecute(result);
                if (result) {
                    mDockView.loadQuickListItems(infos);
                    mDockView.updateQuickListViewProperties();
                    QuickListItemView view = mDockView.getQuickListItemView(index);
                    if (view != null && view.getVisibility() == View.VISIBLE) {
                        view.requestFocus();
                    }
                }
            }
        };
        task.execute();
!!!13437196.java!!!	startActivitySafely(inout intent : Intent) : void
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
        try {
            startActivity(intent);
        } catch (RuntimeException e) {
            showToast(getString(R.string.error_could_not_launch));
        }
!!!13437324.java!!!	setupDockLabelAnimators() : void
        AnimatorListener listener = new AnimatorListener() {

            @Override
            public void onAnimationStart(Animator animation) {
                mDockLabel.setSelected(false);
            }

            @Override
            public void onAnimationEnd(Animator animation) {
                mDockLabel.setSelected(true);
            }

            @Override
            public void onAnimationCancel(Animator animation) {}

            @Override
            public void onAnimationRepeat(Animator animation) {}
        };

        mDockLabelMoveAnimator = ObjectAnimator.ofFloat(null, "x", 0.0f, 0.0f);
        mDockLabelMoveAnimator.setTarget(mDockLabel);
        mDockLabelMoveAnimator.setInterpolator(new DecelerateInterpolator());
        mDockLabelMoveAnimator.setDuration(DOCK_LABEL_MOVE_DURATION_MS);
        mDockLabelMoveAnimator.addListener(listener);

        mDockLabelAlphaAnimator = ObjectAnimator.ofFloat(null, "alpha", 1.0f, 0.0f);
        mDockLabelAlphaAnimator.setTarget(mDockLabel);
        mDockLabelAlphaAnimator.setInterpolator(new DecelerateInterpolator());
        mDockLabelAlphaAnimator.setDuration(DOCK_LABEL_ALPHA_DURATION_MS);
!!!13437452.java!!!	resetDockLabel() : void
        mDockLabelAlphaAnimator.cancel();
        mDockLabel.setX(mMoreButton.getLeft());
        mDockLabel.setText("");
        mDockLabel.setAlpha(0.0f);
        mDockLabel.setSelected(false);
!!!13437580.java!!!	setDockLabel(in label : CharSequence, inout child : View) : void
        float x = child == null ? mDockLabel.getX() : child.getLeft() + (child.getWidth() / 2)
                - (mDockLabel.getWidth() / 2) + mDockView.getLeft();
        boolean alphaChange = TextUtils.isEmpty(label) ^ (TextUtils.isEmpty(mDockLabel.getText()));
        if (mEditing && !alphaChange) {
            mDockLabel.setX(x);
            mDockLabel.setText(label);
            mDockLabel.setSelected(true);
            return;
        }
        if (alphaChange) {
            // Need to fade out or fade in.
            mDockLabelAlphaAnimator.cancel();
            mDockLabelAlphaAnimator.setupStartValues();
            mDockLabelAlphaAnimator.setFloatValues(TextUtils.isEmpty(label) ? 0.0f : 1.0f);
            mDockLabel.setX(x);
            mDockLabel.setText(label);
            mDockLabelAlphaAnimator.start();
        } else if (!TextUtils.isEmpty(mDockLabel.getText())) {
            // Already visible, just need to move it.
            mDockLabelMoveAnimator.cancel();
            mDockLabelMoveAnimator.setupStartValues();
            mDockLabelMoveAnimator.setFloatValues(x);
            mDockLabel.setText(label);
            mDockLabelMoveAnimator.start();
        }
!!!13437708.java!!!	setDockLabelEditing(inout editing : boolean) : void
        mDockLabel.setBackgroundResource(editing ? 0 : R.drawable.more_items_highlight);
        mDockLabel.setTranslationY(editing ? getResources().getDimensionPixelOffset(
                R.dimen.dock_label_shift_edit_mode) : 0);
        // Need to reset padding since the background set call might remove it.
        mDockLabel.setPadding(mDockLabel.getPaddingLeft(),
                mDockLabel.getPaddingTop(),
                mDockLabel.getPaddingRight(),
                getResources().getDimensionPixelSize(R.dimen.dock_label_bottom_padding));
!!!13437836.java!!!	toggleEditingMode() : void
        setEditingMode(!mEditing);
!!!13437964.java!!!	setEditingMode(inout editing : boolean) : void
        if (mEditing != editing) {
            mEditing = editing;
            showEditControls(mEditing);
            setDockLabelEditing(mEditing);
        }
        mWidgetCanvas.setEditing(mEditing);
        mDockView.setEditing(mEditing);
!!!13438092.java!!!	showEditControls(inout editing : boolean) : void
        showControl(mEditDoneButton, editing, true, true);
        showControl(mAddWidgetButton, editing, true, true);
        showControl(mMoreButton, !editing, false, true);
        showControl(mSystemButton, !editing, true, false);
!!!13438220.java!!!	showControl(in view : View, in show : boolean, in remove : boolean, in updateFocusable : boolean) : void
        Animator animator = show ? mQuickListControlEnterAnimator : mQuickListControlExitAnimator;
        animator = animator.clone();
        animator.setTarget(view);
        animator.removeAllListeners();
        animator.addListener(new AnimatorListener() {
            @Override
            public void onAnimationCancel(Animator animation) {}

            @Override
            public void onAnimationEnd(Animator animation) {
                if (!show && remove) {
                    view.setVisibility(View.GONE);
                }
            }

            @Override
            public void onAnimationRepeat(Animator animation) {}

            @Override
            public void onAnimationStart(Animator animation) {
                view.setVisibility(View.VISIBLE);
                if (updateFocusable) {
                    view.setFocusable(show);
                }
            }
        });
        animator.start();
!!!13438348.java!!!	showToast(inout message : CharSequence) : void
        if (mToast != null) {
            mToast.cancel();
            mToast = null;
        }
        mToast = Toast.makeText(this, message, Toast.LENGTH_LONG);
        mToast.show();
!!!13438476.java!!!	setupHideReceiver() : void
        if (mHideReceiver == null) {
            mHideReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    if (!CLOSE_APPLICATION_OVERLAYS_REASON.equals(intent.getStringExtra(
                            TvIntent.EXTRA_REASON))) {
                        finish();
                    }
                }
            };
            IntentFilter filter = new IntentFilter();
            filter.addAction(TvIntent.ACTION_CLOSE_APPLICATION_OVERLAYS);
            registerReceiver(mHideReceiver, filter);
        }
!!!13438604.java!!!	teardownHideReceiver() : void
        if (mHideReceiver != null) {
            unregisterReceiver(mHideReceiver);
            mHideReceiver = null;
        }
!!!13438732.java!!!	setupAddWidgetButton() : void
        mAddWidgetButton = (Button) findViewById(R.id.add_widget);
        mAddWidgetButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                launchWidgetPicker();
            }
        });
!!!13438860.java!!!	setupWidgetCanvas() : void
        mWidgetCanvas = (WidgetCellLayout) getFragmentManager().findFragmentById(
                R.id.canvas_content);
        mWidgetCanvas.setListener(new WidgetCellLayout.Listener() {

            @Override
            public void onBroughtToFront(View view) {
                // TODO(justinkoh): implement me.
            }

            @Override
            public void onDeleting(View view) {
                mWidgetCanvas.remove(view);
                WidgetInfo info = (WidgetInfo) view.getTag();
                removeWidget(info);
            }

            @Override
            public void onMoved(View view, int x, int y) {
                WidgetInfo info = (WidgetInfo) view.getTag();
                info.setCellX(x);
                info.setCellY(y);
                mHandler.queueSaveCanvasItem(info);
            }

            @Override
            public void onSized(View view, int spanX, int spanY) {
                WidgetInfo info = (WidgetInfo) view.getTag();
                info.setSpanX(spanX);
                info.setSpanY(spanY);
                mHandler.queueSaveCanvasItem(info);
            }
        });
!!!13438988.java!!!	loadCanvasItems(in canvasId : int) : void
        new LoadCanvasTask().execute(canvasId);
!!!13439116.java!!!	launchWidgetPicker() : void
/* TODO(jumong): b/6957432
        // Do not try to show anything after activity has been saved.
        if (isOnSaveInstanceStateCalled()) {
            return;
        }
*/
        WidgetPickerFragment widgetPicker = new WidgetPickerFragment();
        widgetPicker.setListener(new WidgetPickerFragment.Listener() {

            @Override
            public void onAppWidgetSelected(AppWidgetProviderInfo info) {
                addWidget(info);
            }
        });
        // Create and show the dialog (also commits the transaction).
        widgetPicker.show(getFragmentManager(), FRAGMENT_TAG_WIDGET_PICKER);
!!!13439244.java!!!	addWidget(inout info : AppWidgetProviderInfo) : void
        try {
            int appWidgetId = mAppWidgetHost.allocateAppWidgetId();
            AppWidgetManager.getInstance(this).bindAppWidgetId(appWidgetId, info.provider);
            if (info.configure != null) {
                // If there is a configuration component, use that.
                Intent intent = new Intent(AppWidgetManager.ACTION_APPWIDGET_CONFIGURE);
                intent.setComponent(info.configure);
                intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
                startActivityForResult(intent, REQUEST_CREATE_APP_WIDGET);
            } else {
                addNewWidget(appWidgetId, info);
            }
        } catch (IllegalArgumentException e) {
            showToast(getString(R.string.error_add_widget));
        }
!!!13439372.java!!!	addNewWidget(in appWidgetId : int, inout providerInfo : AppWidgetProviderInfo) : void
        if (!mWidgetCanvas.canAddWidget(providerInfo.minWidth, providerInfo.minHeight)) {
            mAppWidgetHost.deleteAppWidgetId(appWidgetId);
            showToast(getString(R.string.error_canvas_full));
            return;
        }
        final WidgetInfo info = new WidgetInfo(appWidgetId);
        UpdateCanvasItemTask saveTask = new UpdateCanvasItemTask(false /* not removing */) {
            @Override
            public void onPostExecute(Boolean result) {
                super.onPostExecute(result);
                // Don't add this to the layout until it's done saving, or else the database ID will
                // not be correct for the resizing calls.
                addCanvasItemToLayout(info);
            }
        };
        saveTask.execute(info);
!!!13439500.java!!!	removeWidget(in info : WidgetInfo) : void
        mAppWidgetHost.deleteAppWidgetId(info.getAppWidgetId());
        UpdateCanvasItemTask saveTask = new UpdateCanvasItemTask(true /* removing */);
        saveTask.execute(info);
!!!13439628.java!!!	addCanvasItemToLayout(inout info : CanvasItemInfo) : void
        if (info instanceof WidgetInfo) {
            addWidgetViewToLayout((WidgetInfo) info);
        } else {
            throw new IllegalArgumentException("Only widgets are supported currently");
        }
!!!13439756.java!!!	addWidgetViewToLayout(inout info : WidgetInfo) : void
        AppWidgetManager manager = AppWidgetManager.getInstance(this);
        int appWidgetId = info.getAppWidgetId();
        AppWidgetProviderInfo providerInfo = manager.getAppWidgetInfo(appWidgetId);
        if (providerInfo == null) {
            return;
        }
        AppWidgetHostView view = mAppWidgetHost.createView(this, appWidgetId, providerInfo);
        view.setTag(info);
        view.setAppWidget(appWidgetId, providerInfo);
        view.setIsRootNamespace(false);
        if (info.getCellX() != CanvasItemInfo.NOT_SET) {
            mWidgetCanvas.add(view, info.getCellX(), info.getCellY(), info.getSpanX(),
                    info.getSpanY());
        } else {
            mWidgetCanvas.add(view, providerInfo.minWidth, providerInfo.minHeight);
        }
!!!13439884.java!!!	saveCanvasItem(inout info : CanvasItemInfo) : void
        UpdateCanvasItemTask saveTask = new UpdateCanvasItemTask(false /* not removing */);
        saveTask.execute(info);
!!!13440524.java!!!	setupWallpaper() : void
        // TODO(justinkoh): See if this could be done in the policy instead.
        WallpaperManager manager = WallpaperManager.getInstance(this);
        manager.suggestDesiredDimensions(getResources().getDisplayMetrics().widthPixels,
                getResources().getDisplayMetrics().heightPixels);
!!!13440652.java!!!	setupDataObserver() : void
        if (mDataProviderObserver == null) {
            mDataProviderObserver = new ContentObserver(mHandler) {
                @Override
                public void onChange(boolean selfChange) {
                    super.onChange(selfChange);
                    getIconCache().clearCache();
                    mHandler.queueReloadUi();
                }
            };
            mDataProvider.registerObserver(mDataProviderObserver);
        }
!!!13440780.java!!!	teardownDataObserver() : void
        if (mDataProviderObserver != null) {
            mDataProvider.unregisterObserver(mDataProviderObserver);
            mDataProviderObserver = null;
        }
!!!13441164.java!!!	launchBootIntentIfFirstLaunch() : boolean
        String bootToken = SystemProperties.get(PreferenceUtils.RO_BOOT_TOKEN);
        String prefBootToken = PreferenceUtils.getBootToken(mPreferences);
        if (bootToken != null && !bootToken.equals(prefBootToken)) {
            PreferenceUtils.setBootToken(mPreferences, bootToken);
            Intent bootIntent = PreferenceUtils.getBootIntent(getContentResolver());
            if (bootIntent == null) {
                bootIntent = getDefaultBootIntent();
            }
            if (!bootIntent.hasCategory(Intent.CATEGORY_HOME)) {
                if (mAppendFirstLaunchFlag) {
                    bootIntent.putExtra(EXTRA_FIRST_LAUNCH_FROM_HOME, true);
                    mAppendFirstLaunchFlag = false;
                }
                startActivitySafely(bootIntent);
            }
            return true;
        }
        return false;
!!!13441292.java!!!	getDefaultBootIntent() : Intent
        String intentString = getString(R.string.default_boot_intent_uri);
        if (TextUtils.isEmpty(intentString)) {
            return new Intent(Intent.ACTION_MAIN)
                    .addCategory(Intent.CATEGORY_HOME);
        }
        return new Intent(Intent.ACTION_VIEW, Uri.parse(intentString));
!!!13441420.java!!!	launchTutorialIfNecessary() : boolean
        if (!PreferenceUtils.hasLaunchedTutorial(mPreferences) &&
                !SystemProperties.get("ro.kernel.qemu").equals("1") &&
                !isStrippedMode()) {
            PreferenceUtils.setHasLaunchedTutorial(mPreferences);
            Intent intent = new Intent(Intent.ACTION_SYSTEM_TUTORIAL);
            startActivityForResult(intent, REQUEST_TUTORIAL);
            return true;
        }
        return false;
!!!13441548.java!!!	isStrippedMode() : boolean
        return Settings.Secure.getInt(getContentResolver(),
                TvSettings.Secure.STRIPPED_MODE_ENABLED, 0) != 0;
!!!13441676.java!!!	loadStrippedMode() : void
        setContentView(R.layout.stripped_mode);
        setDefaultKeyMode(DEFAULT_KEYS_DISABLE);
        mStrippedModeController = new StrippedModeController(
                getApplicationContext(), findViewById(R.id.main));
        mStrippedModeController.setListener(
                new StrippedModeController.Listener() {
                    public void onIntentStartRequested(Intent intent) {
                        if (intent != null) {
                            startActivitySafely(intent);
                        } else {
                            showToast(getString(R.string.error_could_not_launch));
                        }
                    }
                });
        findViewById(R.id.action_grid).requestFocus();
!!!13441804.java!!!	destroyStrippedModeController() : void
        if (mStrippedModeController != null) {
            mStrippedModeController.destroy();
            mStrippedModeController = null;
        }
!!!13441932.java!!!	setupLogo() : void
        mLogoController = new LogoController() {

            @Override
            public void onImageLevelUpdate(int level) {
                mMoreButton.setImageLevel(level);
            }

            @Override
            public String onLogoMessageRequested() {
                String[] messages = getResources().getStringArray(R.array.logo_messages);
                int messageIndex = new Random().nextInt(messages.length);
                return messages[messageIndex];
            }
        };

        mMoreButton.setOnKeyListener(new View.OnKeyListener() {

            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                if (event.getAction() == KeyEvent.ACTION_DOWN) {
                    // When view hierarchy losses focus (e.g. when we move from "All apps" to the
                    // notification), we need to remove focus from the "All Apps".
                    if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
                        resetDockLabel();
                    }
                    return mLogoController.onKeyDown(keyCode);
                }
                return false;
            }
        });
