class DataInputStream
!!!173723.java!!!	DataInputStream(inout in : InputStream)
        super(in);
!!!173851.java!!!	read(inout buffer : byte) : int
        return super.read(buffer);
!!!173979.java!!!	read(inout buffer : byte, in offset : int, in length : int) : int
        return in.read(buffer, offset, length);
!!!174107.java!!!	readBoolean() : boolean
        int temp = in.read();
        if (temp < 0) {
            throw new EOFException();
        }
        return temp != 0;
!!!174235.java!!!	readByte() : byte
        int temp = in.read();
        if (temp < 0) {
            throw new EOFException();
        }
        return (byte) temp;
!!!174363.java!!!	readChar() : char
        return (char) readShort();
!!!174491.java!!!	readDouble() : double
        return Double.longBitsToDouble(readLong());
!!!174619.java!!!	readFloat() : float
        return Float.intBitsToFloat(readInt());
!!!174747.java!!!	readFully(inout dst : byte) : void
        readFully(dst, 0, dst.length);
!!!174875.java!!!	readFully(inout dst : byte, in offset : int, in byteCount : int) : void
        Streams.readFully(in, dst, offset, byteCount);
!!!175003.java!!!	readInt() : int
        Streams.readFully(in, scratch, 0, SizeOf.INT);
        return Memory.peekInt(scratch, 0, ByteOrder.BIG_ENDIAN);
!!!175131.java!!!	readLine() : String
        StringBuilder line = new StringBuilder(80); // Typical line length
        boolean foundTerminator = false;
        while (true) {
            int nextByte = in.read();
            switch (nextByte) {
                case -1:
                    if (line.length() == 0 && !foundTerminator) {
                        return null;
                    }
                    return line.toString();
                case (byte) '\r':
                    if (foundTerminator) {
                        ((PushbackInputStream) in).unread(nextByte);
                        return line.toString();
                    }
                    foundTerminator = true;
                    /* Have to be able to peek ahead one byte */
                    if (!(in.getClass() == PushbackInputStream.class)) {
                        in = new PushbackInputStream(in);
                    }
                    break;
                case (byte) '\n':
                    return line.toString();
                default:
                    if (foundTerminator) {
                        ((PushbackInputStream) in).unread(nextByte);
                        return line.toString();
                    }
                    line.append((char) nextByte);
            }
        }
!!!175259.java!!!	readLong() : long
        Streams.readFully(in, scratch, 0, SizeOf.LONG);
        return Memory.peekLong(scratch, 0, ByteOrder.BIG_ENDIAN);
!!!175387.java!!!	readShort() : short
        Streams.readFully(in, scratch, 0, SizeOf.SHORT);
        return Memory.peekShort(scratch, 0, ByteOrder.BIG_ENDIAN);
!!!175515.java!!!	readUnsignedByte() : int
        int temp = in.read();
        if (temp < 0) {
            throw new EOFException();
        }
        return temp;
!!!175643.java!!!	readUnsignedShort() : int
        return ((int) readShort()) & 0xffff;
!!!175771.java!!!	readUTF() : String
        return decodeUTF(readUnsignedShort());
!!!175899.java!!!	decodeUTF(in utfSize : int) : String
        return decodeUTF(utfSize, this);
!!!176027.java!!!	decodeUTF(in utfSize : int, inout in : DataInput) : String
        byte[] buf = new byte[utfSize];
        in.readFully(buf, 0, utfSize);
        return ModifiedUtf8.decode(buf, new char[utfSize], 0, utfSize);
!!!176155.java!!!	readUTF(inout in : DataInput) : String
        return decodeUTF(in.readUnsignedShort(), in);
!!!176283.java!!!	skipBytes(in count : int) : int
        int skipped = 0;
        long skip;
        while (skipped < count && (skip = in.skip(count - skipped)) != 0) {
            skipped += skip;
        }
        return skipped;
