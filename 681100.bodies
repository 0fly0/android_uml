class ContentValues
!!!3079692.java!!!	ContentValues()
        // Choosing a default size of 8 based on analysis of typical
        // consumption by applications.
        mValues = new HashMap<String, Object>(8);
!!!3079820.java!!!	ContentValues(in size : int)
        mValues = new HashMap<String, Object>(size, 1.0f);
!!!3079948.java!!!	ContentValues(inout from : ContentValues)
        mValues = new HashMap<String, Object>(from.mValues);
!!!3080076.java!!!	ContentValues(inout values : HashMap<String, Object>)
        mValues = values;
!!!3080204.java!!!	equals(inout object : Object) : boolean
        if (!(object instanceof ContentValues)) {
            return false;
        }
        return mValues.equals(((ContentValues) object).mValues);
!!!3080332.java!!!	hashCode() : int
        return mValues.hashCode();
!!!3080460.java!!!	put(in key : String, in value : String) : void
        mValues.put(key, value);
!!!3080588.java!!!	putAll(inout other : ContentValues) : void
        mValues.putAll(other.mValues);
!!!3080716.java!!!	put(in key : String, inout value : Byte) : void
        mValues.put(key, value);
!!!3080844.java!!!	put(in key : String, inout value : Short) : void
        mValues.put(key, value);
!!!3080972.java!!!	put(in key : String, inout value : Integer) : void
        mValues.put(key, value);
!!!3081100.java!!!	put(in key : String, inout value : Long) : void
        mValues.put(key, value);
!!!3081228.java!!!	put(in key : String, inout value : Float) : void
        mValues.put(key, value);
!!!3081356.java!!!	put(in key : String, inout value : Double) : void
        mValues.put(key, value);
!!!3081484.java!!!	put(in key : String, inout value : Boolean) : void
        mValues.put(key, value);
!!!3081612.java!!!	put(in key : String, inout value : byte) : void
        mValues.put(key, value);
!!!3081740.java!!!	putNull(in key : String) : void
        mValues.put(key, null);
!!!3081868.java!!!	size() : int
        return mValues.size();
!!!3081996.java!!!	remove(in key : String) : void
        mValues.remove(key);
!!!3082124.java!!!	clear() : void
        mValues.clear();
!!!3082252.java!!!	containsKey(in key : String) : boolean
        return mValues.containsKey(key);
!!!3082380.java!!!	get(in key : String) : Object
        return mValues.get(key);
!!!3082508.java!!!	getAsString(in key : String) : String
        Object value = mValues.get(key);
        return value != null ? value.toString() : null;
!!!3082636.java!!!	getAsLong(in key : String) : Long
        Object value = mValues.get(key);
        try {
            return value != null ? ((Number) value).longValue() : null;
        } catch (ClassCastException e) {
            if (value instanceof CharSequence) {
                try {
                    return Long.valueOf(value.toString());
                } catch (NumberFormatException e2) {
                    Log.e(TAG, "Cannot parse Long value for " + value + " at key " + key);
                    return null;
                }
            } else {
                Log.e(TAG, "Cannot cast value for " + key + " to a Long: " + value, e);
                return null;
            }
        }
!!!3082764.java!!!	getAsInteger(in key : String) : Integer
        Object value = mValues.get(key);
        try {
            return value != null ? ((Number) value).intValue() : null;
        } catch (ClassCastException e) {
            if (value instanceof CharSequence) {
                try {
                    return Integer.valueOf(value.toString());
                } catch (NumberFormatException e2) {
                    Log.e(TAG, "Cannot parse Integer value for " + value + " at key " + key);
                    return null;
                }
            } else {
                Log.e(TAG, "Cannot cast value for " + key + " to a Integer: " + value, e);
                return null;
            }
        }
!!!3082892.java!!!	getAsShort(in key : String) : Short
        Object value = mValues.get(key);
        try {
            return value != null ? ((Number) value).shortValue() : null;
        } catch (ClassCastException e) {
            if (value instanceof CharSequence) {
                try {
                    return Short.valueOf(value.toString());
                } catch (NumberFormatException e2) {
                    Log.e(TAG, "Cannot parse Short value for " + value + " at key " + key);
                    return null;
                }
            } else {
                Log.e(TAG, "Cannot cast value for " + key + " to a Short: " + value, e);
                return null;
            }
        }
!!!3083020.java!!!	getAsByte(in key : String) : Byte
        Object value = mValues.get(key);
        try {
            return value != null ? ((Number) value).byteValue() : null;
        } catch (ClassCastException e) {
            if (value instanceof CharSequence) {
                try {
                    return Byte.valueOf(value.toString());
                } catch (NumberFormatException e2) {
                    Log.e(TAG, "Cannot parse Byte value for " + value + " at key " + key);
                    return null;
                }
            } else {
                Log.e(TAG, "Cannot cast value for " + key + " to a Byte: " + value, e);
                return null;
            }
        }
!!!3083148.java!!!	getAsDouble(in key : String) : Double
        Object value = mValues.get(key);
        try {
            return value != null ? ((Number) value).doubleValue() : null;
        } catch (ClassCastException e) {
            if (value instanceof CharSequence) {
                try {
                    return Double.valueOf(value.toString());
                } catch (NumberFormatException e2) {
                    Log.e(TAG, "Cannot parse Double value for " + value + " at key " + key);
                    return null;
                }
            } else {
                Log.e(TAG, "Cannot cast value for " + key + " to a Double: " + value, e);
                return null;
            }
        }
!!!3083276.java!!!	getAsFloat(in key : String) : Float
        Object value = mValues.get(key);
        try {
            return value != null ? ((Number) value).floatValue() : null;
        } catch (ClassCastException e) {
            if (value instanceof CharSequence) {
                try {
                    return Float.valueOf(value.toString());
                } catch (NumberFormatException e2) {
                    Log.e(TAG, "Cannot parse Float value for " + value + " at key " + key);
                    return null;
                }
            } else {
                Log.e(TAG, "Cannot cast value for " + key + " to a Float: " + value, e);
                return null;
            }
        }
!!!3083404.java!!!	getAsBoolean(in key : String) : Boolean
        Object value = mValues.get(key);
        try {
            return (Boolean) value;
        } catch (ClassCastException e) {
            if (value instanceof CharSequence) {
                return Boolean.valueOf(value.toString());
            } else if (value instanceof Number) {
                return ((Number) value).intValue() != 0;
            } else {
                Log.e(TAG, "Cannot cast value for " + key + " to a Boolean: " + value, e);
                return null;
            }
        }
!!!3083532.java!!!	getAsByteArray(in key : String) : byte
        Object value = mValues.get(key);
        if (value instanceof byte[]) {
            return (byte[]) value;
        } else {
            return null;
        }
!!!3083660.java!!!	valueSet() : Set<Map.Entry<String, Object>>
        return mValues.entrySet();
!!!3083788.java!!!	keySet() : Set<String>
        return mValues.keySet();
!!!3083916.java!!!	describeContents() : int
        return 0;
!!!3084044.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        parcel.writeMap(mValues);
!!!3084172.java!!!	putStringArrayList(in key : String, inout value : ArrayList<String>) : void
        mValues.put(key, value);
!!!3084300.java!!!	getStringArrayList(in key : String) : ArrayList<String>
        return (ArrayList<String>) mValues.get(key);
!!!3084428.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        for (String name : mValues.keySet()) {
            String value = getAsString(name);
            if (sb.length() > 0) sb.append(" ");
            sb.append(name + "=" + value);
        }
        return sb.toString();
