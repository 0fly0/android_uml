class OverlayViewGroup
!!!15827468.java!!!	OverlayViewGroup(inout context : Context, inout hostView : View)
            super(context);
            mHostView = hostView;
            mAttachInfo = mHostView.mAttachInfo;
            mRight = hostView.getWidth();
            mBottom = hostView.getHeight();
!!!15827596.java!!!	add(inout drawable : Drawable) : void
            if (mDrawables == null) {

                mDrawables = new ArrayList<Drawable>();
            }
            if (!mDrawables.contains(drawable)) {
                // Make each drawable unique in the overlay; can't add it more than once
                mDrawables.add(drawable);
                invalidate(drawable.getBounds());
                drawable.setCallback(this);
            }
!!!15827724.java!!!	remove(inout drawable : Drawable) : void
            if (mDrawables != null) {
                mDrawables.remove(drawable);
                invalidate(drawable.getBounds());
                drawable.setCallback(null);
            }
!!!15827852.java!!!	add(inout child : View) : void
            if (child.getParent() instanceof ViewGroup) {
                ViewGroup parent = (ViewGroup) child.getParent();
                if (parent != mHostView && parent.getParent() != null &&
                        parent.mAttachInfo != null) {
                    // Moving to different container; figure out how to position child such that
                    // it is in the same location on the screen
                    int[] parentLocation = new int[2];
                    int[] hostViewLocation = new int[2];
                    parent.getLocationOnScreen(parentLocation);
                    mHostView.getLocationOnScreen(hostViewLocation);
                    child.offsetLeftAndRight(parentLocation[0] - hostViewLocation[0]);
                    child.offsetTopAndBottom(parentLocation[1] - hostViewLocation[1]);
                }
                parent.removeView(child);
            }
            super.addView(child);
!!!15827980.java!!!	remove(inout view : View) : void
            super.removeView(view);
!!!15828108.java!!!	clear() : void
            removeAllViews();
            if (mDrawables != null) {
                mDrawables.clear();
            }
!!!15828236.java!!!	isEmpty() : boolean
            if (getChildCount() == 0 &&
                    (mDrawables == null || mDrawables.size() == 0)) {
                return true;
            }
            return false;
!!!15828364.java!!!	invalidateDrawable(inout drawable : Drawable) : void
            invalidate(drawable.getBounds());
!!!15828492.java!!!	dispatchDraw(inout canvas : Canvas) : void
            super.dispatchDraw(canvas);
            final int numDrawables = (mDrawables == null) ? 0 : mDrawables.size();
            for (int i = 0; i < numDrawables; ++i) {
                mDrawables.get(i).draw(canvas);
            }
!!!15828620.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
            // Noop: children are positioned absolutely
!!!15828748.java!!!	invalidate(inout dirty : Rect) : void
            super.invalidate(dirty);
            if (mHostView != null) {
                mHostView.invalidate(dirty);
            }
!!!15828876.java!!!	invalidate(in l : int, in t : int, in r : int, in b : int) : void
            super.invalidate(l, t, r, b);
            if (mHostView != null) {
                mHostView.invalidate(l, t, r, b);
            }
!!!15829004.java!!!	invalidate() : void
            super.invalidate();
            if (mHostView != null) {
                mHostView.invalidate();
            }
!!!15829132.java!!!	invalidate(inout invalidateCache : boolean) : void
            super.invalidate(invalidateCache);
            if (mHostView != null) {
                mHostView.invalidate(invalidateCache);
            }
!!!15829260.java!!!	invalidateViewProperty(inout invalidateParent : boolean, inout forceRedraw : boolean) : void
            super.invalidateViewProperty(invalidateParent, forceRedraw);
            if (mHostView != null) {
                mHostView.invalidateViewProperty(invalidateParent, forceRedraw);
            }
!!!15829388.java!!!	invalidateParentCaches() : void
            super.invalidateParentCaches();
            if (mHostView != null) {
                mHostView.invalidateParentCaches();
            }
!!!15829516.java!!!	invalidateParentIfNeeded() : void
            super.invalidateParentIfNeeded();
            if (mHostView != null) {
                mHostView.invalidateParentIfNeeded();
            }
!!!15829644.java!!!	invalidateChildFast(inout child : View, in dirty : Rect) : void
            if (mHostView != null) {
                // Note: This is not a "fast" invalidation. Would be nice to instead invalidate
                // using DisplayList properties and a dirty rect instead of causing a real
                // invalidation of the host view
                int left = child.mLeft;
                int top = child.mTop;
                if (!child.getMatrix().isIdentity()) {
                    child.transformRect(dirty);
                }
                dirty.offset(left, top);
                mHostView.invalidate(dirty);
            }
!!!15829772.java!!!	invalidateChildInParent(inout location : int, inout dirty : Rect) : ViewParent
            if (mHostView != null) {
                dirty.offset(location[0], location[1]);
                if (mHostView instanceof ViewGroup) {
                    location[0] = 0;
                    location[1] = 0;
                    super.invalidateChildInParent(location, dirty);
                    return ((ViewGroup) mHostView).invalidateChildInParent(location, dirty);
                } else {
                    invalidate(dirty);
                }
            }
            return null;
