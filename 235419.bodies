class SingletonMap
!!!1216795.java!!!	SingletonMap(inout key : K, inout value : V)
            k = key;
            v = value;
!!!1216923.java!!!	containsKey(inout key : Object) : boolean
            return k == null ? key == null : k.equals(key);
!!!1217051.java!!!	containsValue(inout value : Object) : boolean
            return v == null ? value == null : v.equals(value);
!!!1217179.java!!!	get(inout key : Object) : V
            if (containsKey(key)) {
                return v;
            }
            return null;
!!!1217307.java!!!	size() : int
            return 1;
!!!1217435.java!!!	entrySet() : Set
            return new AbstractSet<Map.Entry<K, V>>() {
                @Override public boolean contains(Object object) {
                    if (object instanceof Map.Entry) {
                        Map.Entry<?, ?> entry = (Map.Entry<?, ?>) object;
                        return containsKey(entry.getKey())
                                && containsValue(entry.getValue());
                    }
                    return false;
                }

                @Override public int size() {
                    return 1;
                }

                @Override public Iterator<Map.Entry<K, V>> iterator() {
                    return new Iterator<Map.Entry<K, V>>() {
                        boolean hasNext = true;

                        @Override public boolean hasNext() {
                            return hasNext;
                        }

                        @Override public Map.Entry<K, V> next() {
                            if (!hasNext) {
                                throw new NoSuchElementException();
                            }

                            hasNext = false;
                            return new MapEntry<K, V>(k, v) {
                                @Override public V setValue(V value) {
                                    throw new UnsupportedOperationException();
                                }
                            };
                        }

                        @Override public void remove() {
                            throw new UnsupportedOperationException();
                        }
                    };
                }
            };
