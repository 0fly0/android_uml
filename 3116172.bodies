class ServerMessageAdapter
!!!13089164.java!!!	ServerMessageAdapter(inout receiver : RequestReceiver, inout wireAdapter : WireAdapter)
    mCommandReceiver = receiver;
    mWireAdapter = wireAdapter;
!!!13089292.java!!!	getWireAdapter() : WireAdapter
    return mWireAdapter;
!!!13089420.java!!!	onMessage(inout message : RemoteMessage) : void
    if (message.hasRequestMessage()) {
      Token token = message.hasSequenceNumber() ? new Token(message.getSequenceNumber())
          : new Token();
      interpretRequest(token, message.getRequestMessage());
    }
!!!13089548.java!!!	interpretRequest(inout token : Token, inout message : RequestMessage) : void
    ResponseMessage.Builder builder = ResponseMessage.newBuilder();
    boolean reply = token.hasSequenceNumber();

    if (message.hasKeyEventMessage()) {
      reply = false;
      onKeyEvent(message.getKeyEventMessage());
    }
    if (message.hasMouseEventMessage()) {
      reply = false;
      onMouseEvent(message.getMouseEventMessage());
    }
    if (message.hasMouseWheelMessage()) {
      reply = false;
      onMouseWheel(message.getMouseWheelMessage());
    }
    if (message.hasDataMessage()) {
      reply = false;
      onData(token, message.getDataMessage());
    }
    if (message.hasBinaryDataMessage()) {
      reply = false;
      onBinaryData(token, message.getBinaryDataMessage());
    }
    if (message.hasConnectMessage()) {
      Connect.Builder connectBuilder = onConnect(message.getConnectMessage());
      reply = connectBuilder != null;
      if (connectBuilder != null) {
        builder.setConnectMessage(connectBuilder);
      }
    }
    if (message.hasFlingMessage()) {
      reply = true;
      builder.setFlingResultMessage(onFling(token, message.getFlingMessage()));
    }
    if (message.hasSensorListMessage()) {
      reply = false;
      onSensorList(message.getSensorListMessage());
    }
    if (message.hasSensorDataMessage()) {
      reply = false;
      onSensorData(message.getSensorDataMessage());
    }
    if (message.hasSoftInputUpdate()) {
      reply = false;
      onSoftInputUpdate(message.getSoftInputUpdate());
    }
    if (message.hasSoftInputRequest()) {
      reply = false;
      onSoftInputRequest(message.getSoftInputRequest());
    }
    if (message.hasQueryRequest()) {
      QueryInformationResponse.Builder queryBuilder =
          onQueryInformationRequest(message.getQueryRequest());
      reply = queryBuilder != null;
      if (reply) {
        builder.setQueryResponse(queryBuilder);
      }
    }
    if (message.hasTouchEventMessage()) {
      reply = false;
      onTouchEvent(message.getTouchEventMessage());
    }

    if (reply) {
      sendResponse(token, builder);
    }
!!!13089676.java!!!	onKeyEvent(inout message : KeyEvent) : void
    Code keycode = message.getKeycode();
    Action action = message.getAction();
    mCommandReceiver.onKeyEvent(keycode, action);
!!!13089804.java!!!	onMouseEvent(inout message : MouseEvent) : void
    int xDelta = message.getXDelta();
    int yDelta = message.getYDelta();
    mCommandReceiver.onMouseEvent(xDelta, yDelta);
!!!13089932.java!!!	onMouseWheel(inout message : MouseWheel) : void
    int xScrollAmt = message.getXScroll();
    int yScrollAmt = message.getYScroll();
    mCommandReceiver.onMouseWheel(xScrollAmt, yScrollAmt);
!!!13090060.java!!!	onData(inout token : Token, inout message : Data) : void
    mCommandReceiver.onData(token, message.getType(), message.getData());
!!!13090188.java!!!	onBinaryData(inout token : Token, inout message : BinaryData) : void
    mCommandReceiver.onData(token, message.getKey(), message.getData().toByteArray());
!!!13090316.java!!!	onSensorList(inout message : SensorList) : void
    List<SensorDescriptor> sensorList = new LinkedList<SensorDescriptor>();

    for (int i = 0; i < message.getSensorCount(); ++i) {
      SensorDevice element = message.getSensor(i);
      SensorDescriptor sensor = new SensorDescriptor(element.getId(), element.getType(),
          element.getRange(), element.getResolution(),
          element.getMinDelay(), element.getDescription());
      sensorList.add(sensor);
    }
    mCommandReceiver.onSensorList(sensorList);
!!!13090444.java!!!	onSensorData(inout message : SensorData) : void
    float[] vector = new float[message.getVectorCount()];
    for (int i = 0; i < vector.length; ++i) {
      vector[i] = message.getVector(i);
    }
    mCommandReceiver.onSensorData(message.getSensorId(), message.getTimestamp(),
        message.getAccuracy().getNumber(), vector);
!!!13090572.java!!!	onSoftInputUpdate(inout message : SoftInputUpdate) : void
    int selectStart = -1;
    int selectEnd = -1;

    if (message.hasUpdateSelection()) {
      selectStart = message.getUpdateSelection().getSelectionStart();
      selectEnd = message.getUpdateSelection().getSelectionEnd();
    }

    if (message.hasUpdateEntireText()) {
      mCommandReceiver.onSoftInputContent(message.getUpdateEntireText().getContent(),
          selectStart, selectEnd);
    } else if (message.hasUpdateChangedText()) {
      SoftInputUpdateChangedText partial = message.getUpdateChangedText();
      mCommandReceiver.onSoftInputUpdate(partial.getContent(),
          partial.getChangePosition(), partial.getChangeReplaced(), partial.getChangeInserted(),
          selectStart, selectEnd);
    } else if ((selectStart != -1) && (selectEnd != -1)) {
      mCommandReceiver.onSoftInputUpdate(null, 0, 0, 0, selectStart, selectEnd);
    }
!!!13090700.java!!!	onSoftInputRequest(inout message : SoftInputClientRequest) : void
    switch (message.getType()) {
      case INPUT_EXECUTE:
        mCommandReceiver.onSoftInputExecute(message.getImeAction());
        break;
    }
!!!13090828.java!!!	onFling(inout token : Token, inout message : Fling) : FlingResult.Builder
    FlingType type = FlingType.FLING_URL;
    boolean success = false;

    if (message.hasType()) {
      type = message.getType();
    }

    switch (type) {
      case FLING_URL:
        success = mCommandReceiver.onURI(message.getText());
        break;

      case FLING_SEARCH_QUERY:
        success = mCommandReceiver.onSearchQuery(message.getText());
        break;
    }

    return FlingResult.newBuilder().setResult(success ? Result.SUCCESS : Result.FAILURE);
!!!13090956.java!!!	onConnect(inout message : Connect) : Connect.Builder
    ConnectInfo connectInfo = mCommandReceiver.onConnect(ConnectInfo.parseFromProto(message));
    if (connectInfo != null) {
      Connect.Builder builder = Connect.newBuilder();
      builder.setDeviceName(connectInfo.getDeviceName());
      if (connectInfo.hasVersionNumber()) {
        builder.setVersion(connectInfo.getVersionNumber());
      }
      return builder;
    }
    return null;
!!!13091084.java!!!	onTouchEvent(inout message : TouchEvent) : void
    List<TouchDescriptor> touchEvent = new LinkedList<TouchDescriptor>();

    for (int i = 0; i < message.getTouchCount(); ++i) {
      TouchPointer element = message.getTouch(i);
      TouchDescriptor touch = new TouchDescriptor(element.getId(),
          element.getAction().getNumber(), element.getX(), element.getY(), element.getPressure());
      touchEvent.add(touch);
    }
    mCommandReceiver.onTouchEvent(touchEvent);
!!!13091212.java!!!	onQueryInformationRequest(inout message : QueryInformationRequest) : QueryInformationResponse.Builder
    QueryInformationResponse.Builder queryBuilder =
        QueryInformationResponse.newBuilder();
    queryBuilder.setType(message.getType());

    switch (message.getType()) {
      case BASIC_INFO:
        {
          QueryResponseBasicInfo.Builder response =
              QueryResponseBasicInfo.newBuilder();

          String name = mCommandReceiver.onQueryBoxName();
          if (name == null || name.length() == 0) {
            name = DEFAULT_BOX_NAME;
          }
          response.setBoxName(name);

          String macAddress = mCommandReceiver.onQueryMacAddress();
          if (macAddress == null || macAddress.length() == 0) {
            macAddress = DEFAULT_MAC_ADDRESS;
          }
          response.setMacAddress(macAddress);

          queryBuilder.setBasicInfo(response);
        }
        break;

      case AVAILABLE_MEDIA_DEVICES:
        {
          QueryResponseMediaDevicesList.Builder response =
              QueryResponseMediaDevicesList.newBuilder();
          String defaultDeviceId = mCommandReceiver.onQueryDefaultMediaDevice();
          List<String> devices = mCommandReceiver.onQueryAvailableMediaDevices();
          if (defaultDeviceId != null) {
            response.setDefaultMediaDeviceId(defaultDeviceId);
          }
          if (devices != null) {
            for (String device : devices) {
              response.addAvailableMediaDevice(device);
            }
          }
          queryBuilder.setConnectedMediaDevices(response);
        }
        break;

      case MEDIA_DEVICE_INFO:
        {
          String sourceId;
          sourceId = message.getMediaDeviceInfo().getMediaDeviceId();
          MediaDeviceInfo sourceInfo =
              mCommandReceiver.onQueryMediaDeviceInfo(sourceId);
          if (sourceInfo == null) {
            sourceInfo = new MediaDeviceInfo(sourceId, null, null);
          }
          queryBuilder.setMediaDeviceInfo(sourceInfo.getProto());
        }
        break;
    }
    return queryBuilder;
!!!13091340.java!!!	sendData(in type : String, in data : String) : void
    sendData(null, type, data);
!!!13091468.java!!!	sendData(in type : String, inout data : byte) : void
    sendData(null, type, data);
!!!13091596.java!!!	sendData(inout token : Token, in type : String, in data : String) : void
    Data.Builder replyMessageBuilder = Data.newBuilder();
    replyMessageBuilder.setType(type);
    replyMessageBuilder.setData(data);
    ResponseMessage.Builder responseBuilder = ResponseMessage.newBuilder();
    responseBuilder.setDataMessage(replyMessageBuilder);
    sendResponse(token, responseBuilder);
!!!13091724.java!!!	sendData(inout token : Token, in type : String, inout data : byte) : void
    BinaryData.Builder replyMessageBuilder = BinaryData.newBuilder();
    replyMessageBuilder.setKey(type);
    replyMessageBuilder.setData(ByteString.copyFrom(data));
    ResponseMessage.Builder responseBuilder = ResponseMessage.newBuilder();
    responseBuilder.setBinaryDataMessage(replyMessageBuilder);
    sendResponse(token, responseBuilder);
!!!13091852.java!!!	sendDataList(inout dataList : DataList) : void
    sendDataList(null, dataList);
!!!13091980.java!!!	sendDataList(inout token : Token, inout dataList : DataList) : void
    ResponseMessage.Builder responseBuilder = ResponseMessage.newBuilder();
    responseBuilder.setDataListMessage(dataList);
    sendResponse(token, responseBuilder);
!!!13092108.java!!!	sendSoftInputRequired(in inputType : int, in imeAction : int, in hint : String) : void
    SoftInputServerRequest.Builder keyboardBuilder = SoftInputServerRequest.newBuilder();
    ResponseMessage.Builder responseBuilder = ResponseMessage.newBuilder();

    keyboardBuilder.setType(SoftInputServerRequestType.INPUT_REQUIRED)
        .setInputType(inputType)
        .setImeAction(imeAction);

    if (hint != null) {
      keyboardBuilder.setHint(hint);
    }

    responseBuilder.setSoftInputRequest(keyboardBuilder);
    sendResponse(null, responseBuilder);
!!!13092236.java!!!	sendSoftInputDismiss() : void
    SoftInputServerRequest.Builder keyboardBuilder = SoftInputServerRequest.newBuilder();
    ResponseMessage.Builder responseBuilder = ResponseMessage.newBuilder();
    keyboardBuilder.setType(SoftInputServerRequestType.INPUT_DISMISS);
    responseBuilder.setSoftInputRequest(keyboardBuilder);
    sendResponse(null, responseBuilder);
!!!13092364.java!!!	sendSoftInputContent(in content : String, in selectStart : int, in selectEnd : int) : void
    if (content == null) {
      throw new NullPointerException("Content string must contain valid string");
    }
    sendSoftInputUpdate(content, 0, -1, content.length(), selectStart, selectEnd);
!!!13092492.java!!!	sendSoftInputUpdate(in content : String, in position : int, in replaced : int, in inserted : int, in selectStart : int, in selectEnd : int) : void
    SoftInputUpdate.Builder inputBuilder = SoftInputUpdate.newBuilder();
    ResponseMessage.Builder responseBuilder = ResponseMessage.newBuilder();
    SoftInputUpdateSelection.Builder selection = SoftInputUpdateSelection.newBuilder();

    selection.setSelectionStart(selectStart);
    selection.setSelectionEnd(selectEnd);

    if (replaced == -1) {
      SoftInputUpdateEntireText.Builder update = SoftInputUpdateEntireText.newBuilder();
      update.setContent(content);
      inputBuilder.setUpdateEntireText(update);
    } else if (inserted != 0 || replaced != 0) {
      SoftInputUpdateChangedText.Builder partial = SoftInputUpdateChangedText.newBuilder();
      partial.setContent(content != null ? content : "");
      partial.setChangePosition(position);
      partial.setChangeReplaced(replaced);
      partial.setChangeInserted(inserted);
      inputBuilder.setUpdateChangedText(partial);
    }

    inputBuilder.setUpdateSelection(selection);
    responseBuilder.setSoftInputUpdate(inputBuilder);
    sendResponse(null, responseBuilder);
!!!13092620.java!!!	sendSensorRegister(in sensorId : int, in rate : int) : void
    SensorRegistration.Builder builder = SensorRegistration.newBuilder();
    builder.setSensorId(sensorId);
    builder.setActivate(true);
    builder.setDelay(SensorDelay.valueOf(rate));

    ResponseMessage.Builder responseBuilder = ResponseMessage.newBuilder();
    responseBuilder.setSensorRegistrationMessage(builder);
    sendResponse(null, responseBuilder);
!!!13092748.java!!!	sendSensorUnregister(in sensorId : int) : void
    SensorRegistration.Builder builder = SensorRegistration.newBuilder();
    builder.setSensorId(sensorId);
    builder.setActivate(false);

    ResponseMessage.Builder responseBuilder = ResponseMessage.newBuilder();
    responseBuilder.setSensorRegistrationMessage(builder);
    sendResponse(null, responseBuilder);
!!!13092876.java!!!	sendResponse(inout token : Token, inout responseMessage : ResponseMessage.Builder) : void
    RemoteMessage.Builder message = RemoteMessage.newBuilder().setResponseMessage(responseMessage);
    if (token != null && token.hasSequenceNumber()) {
      message.setSequenceNumber(token.getSequenceNumber());
    }
    mWireAdapter.sendRemoteMessage(message.build());
