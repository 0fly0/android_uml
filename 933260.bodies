class BulletSpan
!!!4333196.java!!!	BulletSpan()
        mGapWidth = STANDARD_GAP_WIDTH;
        mWantColor = false;
        mColor = 0;
!!!4333324.java!!!	BulletSpan(in gapWidth : int)
        mGapWidth = gapWidth;
        mWantColor = false;
        mColor = 0;
!!!4333452.java!!!	BulletSpan(in gapWidth : int, in color : int)
        mGapWidth = gapWidth;
        mWantColor = true;
        mColor = color;
!!!4333580.java!!!	BulletSpan(inout src : Parcel)
        mGapWidth = src.readInt();
        mWantColor = src.readInt() != 0;
        mColor = src.readInt();
!!!4333708.java!!!	getSpanTypeId() : int
        return TextUtils.BULLET_SPAN;
!!!4333836.java!!!	describeContents() : int
        return 0;
!!!4333964.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mGapWidth);
        dest.writeInt(mWantColor ? 1 : 0);
        dest.writeInt(mColor);
!!!4334092.java!!!	getLeadingMargin(inout first : boolean) : int
        return 2 * BULLET_RADIUS + mGapWidth;
!!!4334220.java!!!	drawLeadingMargin(inout c : Canvas, inout p : Paint, in x : int, in dir : int, in top : int, in baseline : int, in bottom : int, inout text : CharSequence, in start : int, in end : int, inout first : boolean, inout l : Layout) : void
        if (((Spanned) text).getSpanStart(this) == start) {
            Paint.Style style = p.getStyle();
            int oldcolor = 0;

            if (mWantColor) {
                oldcolor = p.getColor();
                p.setColor(mColor);
            }

            p.setStyle(Paint.Style.FILL);

            if (c.isHardwareAccelerated()) {
                if (sBulletPath == null) {
                    sBulletPath = new Path();
                    // Bullet is slightly better to avoid aliasing artifacts on mdpi devices.
                    sBulletPath.addCircle(0.0f, 0.0f, 1.2f * BULLET_RADIUS, Direction.CW);
                }

                c.save();
                c.translate(x + dir * BULLET_RADIUS, (top + bottom) / 2.0f);
                c.drawPath(sBulletPath, p);
                c.restore();
            } else {
                c.drawCircle(x + dir * BULLET_RADIUS, (top + bottom) / 2.0f, BULLET_RADIUS, p);
            }

            if (mWantColor) {
                p.setColor(oldcolor);
            }

            p.setStyle(style);
        }
