class SecCamera
!!!11063308.cpp!!!	SecCamera()
    m_params = (struct sec_cam_parm*)&m_streamparm.parm.raw_data;
    struct v4l2_captureparm capture;
    m_params->capture.timeperframe.numerator = 1;
    m_params->capture.timeperframe.denominator = 0;
    m_params->contrast = -1;
    m_params->effects = -1;
    m_params->brightness = -1;
    m_params->flash_mode = -1;
    m_params->focus_mode = -1;
    m_params->iso = -1;
    m_params->metering = -1;
    m_params->saturation = -1;
    m_params->scene_mode = -1;
    m_params->sharpness = -1;
    m_params->white_balance = -1;

    memset(&m_capture_buf, 0, sizeof(m_capture_buf));

    LOGW("%s :", __func__);
!!!11063436.cpp!!!	~SecCamera()
    LOGW("%s :", __func__);
!!!11063692.cpp!!!	dump(in fd : int) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;
    snprintf(buffer, 255, "dump(%d)\n", fd);
    result.append(buffer);
    ::write(fd, result.string(), result.size());
    return NO_ERROR;
!!!11063820.cpp!!!	getExposureState(inout enable : int, inout default_value : int, inout min_value : int, inout max_value : int, inout step_value : int) : status_t
    *enable = ExposureCtrl.flags & V4L2_CTRL_FLAG_DISABLED;
    *default_value = ExposureCtrl.default_value;
    *min_value     = ExposureCtrl.minimum;
    *max_value     = ExposureCtrl.maximum;
    *step_value    = ExposureCtrl.step;

    return NO_ERROR;
!!!11063948.cpp!!!	getCameraId(in  : void) : int
    return m_camera_id;
!!!11064076.cpp!!!	resetCamera() : void
    LOGW("%s :", __func__);
    DeinitCamera();
    initCamera(m_camera_id);
!!!11064204.cpp!!!	isCameraInit() : int
    return m_flag_init;
!!!11064332.cpp!!!	startPreview(in  : void) : int
    v4l2_streamparm streamparm;
    struct sec_cam_parm *parms;
    parms = (struct sec_cam_parm*)&streamparm.parm.raw_data;
    LOGW("%s :", __func__);

    // aleady started
    if (m_flag_camera_start > 0) {
        LOGE("ERR(%s):Preview was already started\n", __func__);
        return 0;
    }

    if (m_cam_fd <= 0) {
        LOGE("ERR(%s):Camera was closed\n", __func__);
        return -1;
    }

    /* enum_fmt, s_fmt sample */
    int ret = fimc_v4l2_enum_fmt(m_cam_fd, V4L2_PIX_FMT_YUYV);
    CHECK(ret);
    //Fixed format as YUYV422
    ret = setFormatAndAllocBuffer(m_preview_width, m_preview_height, V4L2_PIX_FMT_YUYV);
    CHECK(ret);

    LOGW("%s : m_preview_width: %d m_preview_height: %d m_angle: %d\n",
         __func__, m_preview_width, m_preview_height, m_angle);

    ret = fimc_v4l2_streamon(m_cam_fd);
    CHECK(ret);

    m_flag_camera_start = 1;

    LOGW("%s: got the first frame of the preview\n", __func__);

    return 0;
!!!11064460.cpp!!!	stopPreview(in  : void) : int
    int ret;
    struct stat st;

    LOGW("%s :", __func__);

    if (m_flag_camera_start == 0) {
        LOGW("%s: doing nothing because m_flag_camera_start is zero", __func__);
        return 0;
    }

    if (m_params->flash_mode == FLASH_MODE_TORCH)
        setFlashMode(FLASH_MODE_OFF);

    if (m_cam_fd <= 0) {
        LOGE("ERR(%s):Camera was closed\n", __func__);
        return -1;
    }

    ret = fimc_v4l2_streamoff(m_cam_fd);

    //If camera have lost, also set m_flag_camera_start to 0
    if (-1 == stat (CAMERA_DEV_NAME, &st)) {
        m_flag_camera_start = 0;
    }

    CHECK(ret);

    m_flag_camera_start = 0;

    return ret;
!!!11064588.cpp!!!	startRecord(in  : void) : int
    int ret, i;

    LOGW("%s :", __func__);

    // aleady started
    if (m_flag_record_start > 0) {
        LOGE("ERR(%s):Preview was already started\n", __func__);
        return 0;
    }

// chenhg
#if 0
    /* enum_fmt, s_fmt sample */
    ret = fimc_v4l2_enum_fmt(m_cam_fd, V4L2_PIX_FMT_YUYV);
    CHECK(ret);

    LOGI("%s: m_recording_width = %d, m_recording_height = %d\n",
         __func__, m_recording_width, m_recording_height);

    //ret = fimc_v4l2_s_fmt(m_cam_fd, m_recording_width,m_recording_height, V4L2_PIX_FMT_YUYV, 0);
    ret = setFormatAndAllocBuffer(m_recording_width, m_recording_height, V4L2_PIX_FMT_YUYV);
    CHECK(ret);

    ret = fimc_v4l2_streamon(m_cam_fd);
    CHECK(ret);
#endif
    m_flag_record_start = 1;
    Mutex::Autolock lock(mRecordLock);

    for (int index = 0; index < MAX_VIDEO_BUFFERS; index++) {
        record_frame_status[index] = 0;
    }

    return 0;
!!!11064716.cpp!!!	stopRecord(in  : void) : int
    int ret;

    LOGW("%s :", __func__);

    if (m_flag_record_start == 0) {
        LOGW("%s: doing nothing because m_flag_record_start is zero", __func__);
        return 0;
    }

    m_flag_record_start = 0;
#if 0 //Need Double check
    ret = fimc_v4l2_streamoff(m_cam_fd);
    CHECK(ret);
#endif
    //ret = fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_FRAME_RATE,
    //                        FRAME_RATE_AUTO);
    //CHECK(ret);

    return 0;
!!!11064972.cpp!!!	releaseRecordFrame(in index : int) : int
    if (!m_flag_record_start) {
        /* this can happen when recording frames are returned after
         * the recording is stopped at the driver level.  we don't
         * need to return the buffers in this case and we've seen
         * cases where fimc could crash if we called qbuf and it
         * wasn't expecting it.
         */
        LOGI("%s: recording not in progress, ignoring", __func__);
        return 0;
    }

#if 0
    return fimc_v4l2_qbuf(m_cam_fd, index);
#else
    Mutex::Autolock lock(mRecordLock);
    record_frame_status[index] = 0;
    return 0;
#endif
!!!11065228.cpp!!!	setPreviewSize(in width : int, in height : int, in pixel_format : int) : int
    LOGW("%s(width(%d), height(%d), format(%d))", __func__, width, height, pixel_format);

    int v4lpixelformat = pixel_format;

    if (v4lpixelformat == V4L2_PIX_FMT_YUV420)
        LOGW("PreviewFormat:V4L2_PIX_FMT_YUV420");
    else if (v4lpixelformat == V4L2_PIX_FMT_NV12)
        LOGW("PreviewFormat:V4L2_PIX_FMT_NV12");
    else if (v4lpixelformat == V4L2_PIX_FMT_NV12T)
        LOGW("PreviewFormat:V4L2_PIX_FMT_NV12T");
    else if (v4lpixelformat == V4L2_PIX_FMT_NV21)
        LOGW("PreviewFormat:V4L2_PIX_FMT_NV21");
    else if(v4lpixelformat == V4L2_PIX_FMT_YVU420)
        LOGW("PreviewFormat:V4L2_PIX_FMT_YVU420");
    else if (v4lpixelformat == V4L2_PIX_FMT_YUV422P)
        LOGW("PreviewFormat:V4L2_PIX_FMT_YUV422P");
    else if (v4lpixelformat == V4L2_PIX_FMT_YUYV)
        LOGW("PreviewFormat:V4L2_PIX_FMT_YUYV");
    else if (v4lpixelformat == V4L2_PIX_FMT_RGB565)
        LOGW("PreviewFormat:V4L2_PIX_FMT_RGB565");
    else
        LOGW("PreviewFormat:UnknownFormat");

    m_preview_width  = width;
    m_preview_height = height;
    m_preview_v4lformat = v4lpixelformat;

    return 0;
!!!11065356.cpp!!!	getPreviewSize(inout width : int, inout height : int, inout frame_size : int) : int
    *width  = m_preview_width;
    *height = m_preview_height;
    *frame_size = m_frameSize(m_preview_v4lformat, m_preview_width, m_preview_height);

    return 0;
!!!11065484.cpp!!!	getPreviewMaxSize(inout width : int, inout height : int) : int
    *width  = m_preview_max_width;
    *height = m_preview_max_height;

    return 0;
!!!11065612.cpp!!!	getPreviewPixelFormat(in  : void) : int
    return m_preview_v4lformat;
!!!11065868.cpp!!!	getPreviewBufferNumber() : int
    return m_preview_buf_num;
!!!11065996.cpp!!!	setSnapshotSize(in width : int, in height : int) : int
    LOGW("%s(width(%d), height(%d))", __func__, width, height);

    m_snapshot_width  = width;
    m_snapshot_height = height;

    return 0;
!!!11066124.cpp!!!	getSnapshotSize(inout width : int, inout height : int, inout frame_size : int) : int
    *width  = m_snapshot_width;
    *height = m_snapshot_height;

    int frame = 0;

    frame = m_frameSize(m_snapshot_v4lformat, m_snapshot_width, m_snapshot_height);

    // set it big.
    if (frame == 0)
        frame = m_snapshot_width * m_snapshot_height * BPP;

    *frame_size = frame;

    return 0;
!!!11066252.cpp!!!	getSnapshotMaxSize(inout width : int, inout height : int) : int
    *width  = m_snapshot_max_width;
    *height = m_snapshot_max_height;

    return 0;
!!!11066380.cpp!!!	setSnapshotPixelFormat(in pixel_format : int) : int
    int v4lpixelformat = pixel_format;

    if (m_snapshot_v4lformat != v4lpixelformat) {
        m_snapshot_v4lformat = v4lpixelformat;
    }

#if defined(LOG_NDEBUG) && LOG_NDEBUG == 0

    if (m_snapshot_v4lformat == V4L2_PIX_FMT_YUV420)
        LOGE("%s : SnapshotFormat:V4L2_PIX_FMT_YUV420", __func__);
    else if (m_snapshot_v4lformat == V4L2_PIX_FMT_NV12)
        LOGD("%s : SnapshotFormat:V4L2_PIX_FMT_NV12", __func__);
    else if (m_snapshot_v4lformat == V4L2_PIX_FMT_NV12T)
        LOGD("%s : SnapshotFormat:V4L2_PIX_FMT_NV12T", __func__);
    else if (m_snapshot_v4lformat == V4L2_PIX_FMT_NV21)
        LOGD("%s : SnapshotFormat:V4L2_PIX_FMT_NV21", __func__);
    else if (m_snapshot_v4lformat == V4L2_PIX_FMT_YUV422P)
        LOGD("%s : SnapshotFormat:V4L2_PIX_FMT_YUV422P", __func__);
    else if (m_snapshot_v4lformat == V4L2_PIX_FMT_YUYV)
        LOGD("%s : SnapshotFormat:V4L2_PIX_FMT_YUYV", __func__);
    else if (m_snapshot_v4lformat == V4L2_PIX_FMT_UYVY)
        LOGD("%s : SnapshotFormat:V4L2_PIX_FMT_UYVY", __func__);
    else if (m_snapshot_v4lformat == V4L2_PIX_FMT_RGB565)
        LOGD("%s : SnapshotFormat:V4L2_PIX_FMT_RGB565", __func__);
    else
        LOGD("SnapshotFormat:UnknownFormat");

#endif
    return 0;
!!!11066508.cpp!!!	getSnapshotPixelFormat(in  : void) : int
    return m_snapshot_v4lformat;
!!!11066892.cpp!!!	setJpegThumbnailSize(in width : int, in height : int) : int
    LOGW("%s(width(%d), height(%d))", __func__, width, height);

    m_jpeg_thumbnail_width  = width;
    m_jpeg_thumbnail_height = height;

    return 0;
!!!11067020.cpp!!!	getJpegThumbnailSize(inout width : int, inout height : int) : int
    if (width)
        *width   = m_jpeg_thumbnail_width;

    if (height)
        *height  = m_jpeg_thumbnail_height;

    return 0;
!!!11067148.cpp!!!	setAutofocus(in  : void) : int
    LOGW("%s :", __func__);

    /*if (m_cam_fd <= 0) {
        LOGE("ERR(%s):Camera was closed\n", __func__);
        return -1;
    }

    if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_SET_AUTO_FOCUS, AUTO_FOCUS_ON) < 0) {
            LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_SET_AUTO_FOCUS", __func__);
        return -1;
    }*/

    return 0;
!!!11067276.cpp!!!	zoomIn(in  : void) : int
    LOGW("%s :", __func__);
    return 0;
!!!11067404.cpp!!!	zoomOut(in  : void) : int
    LOGW("%s :", __func__);
    return 0;
!!!11067532.cpp!!!	SetRotate(in angle : int) : int
    LOGE("%s(angle(%d))", __func__, angle);

    /*if (m_angle != angle) {
        switch (angle) {
        case -360:
        case    0:
        case  360:
            m_angle = 0;
            break;

        case -270:
        case   90:
            m_angle = 90;
            break;

        case -180:
        case  180:
            m_angle = 180;
            break;

        case  -90:
        case  270:
            m_angle = 270;
            break;

        default:
            LOGE("ERR(%s):Invalid angle(%d)", __func__, angle);
            return -1;
        }

        if (m_flag_camera_start) {
            if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_ROTATION, angle) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_ROTATION", __func__);
                return -1;
            }
        }
    }*/

    return 0;
!!!11067660.cpp!!!	getRotate(in  : void) : int
    LOGW("%s : angle(%d)", __func__, m_angle);
    return m_angle;
!!!11067788.cpp!!!	setVerticalMirror(in  : void) : int
    LOGW("%s :", __func__);

    if (m_cam_fd <= 0) {
        LOGE("ERR(%s):Camera was closed\n", __func__);
        return -1;
    }

    /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_VFLIP, 0) < 0) {
        LOGE("ERR(%s):Fail on V4L2_CID_VFLIP", __func__);
        return -1;
    }*/

    return 0;
!!!11067916.cpp!!!	setHorizontalMirror(in  : void) : int
    LOGW("%s :", __func__);

    if (m_cam_fd <= 0) {
        LOGE("ERR(%s):Camera was closed\n", __func__);
        return -1;
    }

    /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_HFLIP, 0) < 0) {
        LOGE("ERR(%s):Fail on V4L2_CID_HFLIP", __func__);
        return -1;
    }*/

    return 0;
!!!11068044.cpp!!!	setWhiteBalance() : int
    LOGW("%s(set white_balance)", __func__);

    if (m_params->white_balance != 1) {
        m_params->white_balance = 1;

        if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_AUTO_WHITE_BALANCE, 1) < 0) {
            LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_WHITE_BALANCE", __func__);
            return -1;
        }

        LOGI("Set to auto-white-balance");
    }

    return 0;
!!!11068172.cpp!!!	getWhiteBalance(in  : void) : int
    LOGW("%s : white_balance(%d)", __func__, m_params->white_balance);
    return m_params->white_balance;
!!!11068300.cpp!!!	setBrightness(in brightness : int) : int
    LOGW("%s(brightness(%d))", __func__, brightness);

    m_params->brightness = brightness;

    if (m_flag_camera_start) {
        if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_EXPOSURE, brightness) < 0) {
            LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_BRIGHTNESS", __func__);
            return -1;
        }
    }

    return 0;
!!!11068428.cpp!!!	getBrightness(in  : void) : int
    LOGW("%s : brightness(%d)", __func__, m_params->brightness);
    return m_params->brightness;
!!!11068556.cpp!!!	setImageEffect(in image_effect : int) : int
    LOGW("%s(image_effect(%d))", __func__, image_effect);

    if (image_effect <= IMAGE_EFFECT_BASE || IMAGE_EFFECT_MAX <= image_effect) {
        LOGE("ERR(%s):Invalid image_effect(%d)", __func__, image_effect);
        return -1;
    }

    if (m_params->effects != image_effect) {
        m_params->effects = image_effect;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_EFFECT, image_effect) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_EFFECT", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11068684.cpp!!!	getImageEffect(in  : void) : int
    LOGW("%s : image_effect(%d)", __func__, m_params->effects);
    return m_params->effects;
!!!11068812.cpp!!!	setSceneMode(in scene_mode : int) : int
    LOGW("%s(scene_mode(%d))", __func__, scene_mode);

    if (scene_mode <= SCENE_MODE_BASE || SCENE_MODE_MAX <= scene_mode) {
        LOGE("ERR(%s):Invalid scene_mode (%d)", __func__, scene_mode);
        return -1;
    }

    if (m_params->scene_mode != scene_mode) {
        m_params->scene_mode = scene_mode;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_SCENE_MODE, scene_mode) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_SCENE_MODE", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11068940.cpp!!!	getSceneMode(in  : void) : int
    return m_params->scene_mode;
!!!11069068.cpp!!!	setFlashMode(in flash_mode : int) : int
    LOGW("%s(flash_mode(%d))", __func__, flash_mode);

    /*if (flash_mode <= FLASH_MODE_BASE || FLASH_MODE_MAX <= flash_mode) {
        LOGE("ERR(%s):Invalid flash_mode (%d)", __func__, flash_mode);
        return -1;
    }

    if (m_params->flash_mode != flash_mode) {
        m_params->flash_mode = flash_mode;
        if (m_flag_camera_start) {
            if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_FLASH_MODE, flash_mode) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_FLASH_MODE", __func__);
                return -1;
            }
        }
    }*/

    return 0;
!!!11069196.cpp!!!	getFlashMode(in  : void) : int
    return m_params->flash_mode;
!!!11069324.cpp!!!	setMetering(in metering_value : int) : int
    LOGW("%s(metering (%d))", __func__, metering_value);

    if (metering_value <= METERING_BASE || METERING_MAX <= metering_value) {
        LOGE("ERR(%s):Invalid metering_value (%d)", __func__, metering_value);
        return -1;
    }

    if (m_params->metering != metering_value) {
        m_params->metering = metering_value;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_METERING, metering_value) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_METERING", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11069452.cpp!!!	getMetering(in  : void) : int
    return m_params->metering;
!!!11069580.cpp!!!	setISO(in iso_value : int) : int
    LOGW("%s(iso_value(%d))", __func__, iso_value);

    if (iso_value < ISO_AUTO || ISO_MAX <= iso_value) {
        LOGE("ERR(%s):Invalid iso_value (%d)", __func__, iso_value);
        return -1;
    }

    if (m_params->iso != iso_value) {
        m_params->iso = iso_value;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_ISO, iso_value) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_ISO", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11069708.cpp!!!	getISO(in  : void) : int
    return m_params->iso;
!!!11069836.cpp!!!	setContrast(in contrast_value : int) : int
    LOGW("%s(contrast_value(%d))", __func__, contrast_value);

    if (contrast_value < CONTRAST_MINUS_2 || CONTRAST_MAX <= contrast_value) {
        LOGE("ERR(%s):Invalid contrast_value (%d)", __func__, contrast_value);
        return -1;
    }

    if (m_params->contrast != contrast_value) {
        m_params->contrast = contrast_value;

        if (m_flag_camera_start) {
            if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CONTRAST, contrast_value) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_CONTRAST", __func__);
                return -1;
            }
        }
    }

    return 0;
!!!11069964.cpp!!!	getContrast(in  : void) : int
    return m_params->contrast;
!!!11070092.cpp!!!	setSaturation(in saturation_value : int) : int
    LOGW("%s(saturation_value(%d))", __func__, saturation_value);

    if (saturation_value < SATURATION_MINUS_2 || SATURATION_MAX <= saturation_value) {
        LOGE("ERR(%s):Invalid saturation_value (%d)", __func__, saturation_value);
        return -1;
    }

    if (m_params->saturation != saturation_value) {
        m_params->saturation = saturation_value;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_SATURATION, saturation_value) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_SATURATION", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11070220.cpp!!!	getSaturation(in  : void) : int
    return m_params->saturation;
!!!11070348.cpp!!!	setExposure(in exposure_value : int) : int
    LOGW("%s(exposure_value))", __func__);

    m_params->exposure = exposure_value;

    //only support to auto now.
    if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_EXPOSURE_AUTO, exposure_value) < 0) {
        LOGE("ERR(%s):Fail on V4L2_CID_EXPOSURE_AUTO", __func__);
        return -1;
    } else {
        LOGW("%s %d. Set exposure to %d", __FUNCTION__, __LINE__, exposure_value);
    }

    return 0;
!!!11070476.cpp!!!	getExposure(in  : void) : int
    return m_params->exposure;
!!!11070604.cpp!!!	setSharpness(in sharpness_value : int) : int
    LOGW("%s(sharpness_value(%d))", __func__, sharpness_value);

    if (sharpness_value < SHARPNESS_MINUS_2 || SHARPNESS_MAX <= sharpness_value) {
        LOGE("ERR(%s):Invalid sharpness_value (%d)", __func__, sharpness_value);
        return -1;
    }

    if (m_params->sharpness != sharpness_value) {
        m_params->sharpness = sharpness_value;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_SHARPNESS, sharpness_value) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_SHARPNESS", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11070732.cpp!!!	getSharpness(in  : void) : int
    return m_params->sharpness;
!!!11070860.cpp!!!	setWDR(in wdr_value : int) : int
    LOGW("%s(wdr_value(%d))", __func__, wdr_value);

    if (wdr_value < WDR_OFF || WDR_MAX <= wdr_value) {
        LOGE("ERR(%s):Invalid wdr_value (%d)", __func__, wdr_value);
        return -1;
    }

    if (m_wdr != wdr_value) {
        m_wdr = wdr_value;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_WDR, wdr_value) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_WDR", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11070988.cpp!!!	getWDR(in  : void) : int
    return m_wdr;
!!!11071116.cpp!!!	setAntiShake(in anti_shake : int) : int
    LOGW("%s(anti_shake(%d))", __func__, anti_shake);

    if (anti_shake < ANTI_SHAKE_OFF || ANTI_SHAKE_MAX <= anti_shake) {
        LOGE("ERR(%s):Invalid anti_shake (%d)", __func__, anti_shake);
        return -1;
    }

    if (m_anti_shake != anti_shake) {
        m_anti_shake = anti_shake;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_ANTI_SHAKE, anti_shake) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_ANTI_SHAKE", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11071244.cpp!!!	getAntiShake(in  : void) : int
    return m_anti_shake;
!!!11071372.cpp!!!	setJpegQuality(in jpeg_quality : int) : int
    LOGW("%s(jpeg_quality (%d))", __func__, jpeg_quality);

    if (jpeg_quality < JPEG_QUALITY_ECONOMY || JPEG_QUALITY_MAX <= jpeg_quality) {
        LOGE("ERR(%s):Invalid jpeg_quality (%d)", __func__, jpeg_quality);
        return -1;
    }

    if (m_jpeg_quality != jpeg_quality) {
        m_jpeg_quality = jpeg_quality;
    }

    return 0;
!!!11071500.cpp!!!	getJpegQuality(in  : void) : int
    return m_jpeg_quality;
!!!11071628.cpp!!!	setZoom(in zoom_level : int) : int
    LOGW("%s(zoom_level (%d))", __func__, zoom_level);

    if (zoom_level < ZOOM_LEVEL_0 || ZOOM_LEVEL_MAX <= zoom_level) {
        LOGE("ERR(%s):Invalid zoom_level (%d)", __func__, zoom_level);
        return -1;
    }

    if (m_zoom_level != zoom_level) {
        m_zoom_level = zoom_level;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_ZOOM, zoom_level) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_ZOOM", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11071756.cpp!!!	getZoom(in  : void) : int
    return m_zoom_level;
!!!11071884.cpp!!!	setFocusMode(in focus_mode : int) : int
    LOGW("%s(focus_mode(%d))", __func__, focus_mode);

    if (FOCUS_MODE_MAX <= focus_mode) {
        LOGE("ERR(%s):Invalid focus_mode (%d)", __func__, focus_mode);
        return -1;
    }

    if (m_params->focus_mode != focus_mode) {
        m_params->focus_mode = focus_mode;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_FOCUS_MODE, focus_mode) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_FOCUS_MODE", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11072012.cpp!!!	getFocusMode(in  : void) : int
    return m_params->focus_mode;
!!!11072140.cpp!!!	setGPSLatitude(in gps_latitude : char) : int
    LOGW("%s(gps_latitude(%s))", __func__, gps_latitude);

    if (gps_latitude == NULL)
        m_gps_enabled = false;
    else {
        m_gps_enabled = true;
        m_gps_latitude = lround(strtod(gps_latitude, NULL) * 10000000);
    }

    LOGW("%s(m_gps_latitude(%ld))", __func__, m_gps_latitude);
    return 0;
!!!11072268.cpp!!!	setGPSLongitude(in gps_longitude : char) : int
    LOGW("%s(gps_longitude(%s))", __func__, gps_longitude);

    if (gps_longitude == NULL)
        m_gps_enabled = false;
    else {
        m_gps_enabled = true;
        m_gps_longitude = lround(strtod(gps_longitude, NULL) * 10000000);
    }

    LOGW("%s(m_gps_longitude(%ld))", __func__, m_gps_longitude);
    return 0;
!!!11072396.cpp!!!	setGPSAltitude(in gps_altitude : char) : int
    LOGW("%s(gps_altitude(%s))", __func__, gps_altitude);

    if (gps_altitude == NULL)
        m_gps_altitude = 0;
    else {
        m_gps_altitude = lround(strtod(gps_altitude, NULL) * 100);
    }

    LOGW("%s(m_gps_altitude(%ld))", __func__, m_gps_altitude);
    return 0;
!!!11072524.cpp!!!	setGPSTimeStamp(in gps_timestamp : char) : int
    LOGW("%s(gps_timestamp(%s))", __func__, gps_timestamp);

    if (gps_timestamp == NULL)
        m_gps_timestamp = 0;
    else
        m_gps_timestamp = atol(gps_timestamp);

    LOGW("%s(m_gps_timestamp(%ld))", __func__, m_gps_timestamp);
    return 0;
!!!11072652.cpp!!!	setGPSProcessingMethod(in gps_processing_method : char) : int
    LOGW("%s(gps_processing_method(%s))", __func__, gps_processing_method);
    /*memset(mExifInfo.gps_processing_method, 0, sizeof(mExifInfo.gps_processing_method));
    if (gps_processing_method != NULL) {
        size_t len = strlen(gps_processing_method);
        if (len > sizeof(mExifInfo.gps_processing_method)) {
            len = sizeof(mExifInfo.gps_processing_method);
        }
        memcpy(mExifInfo.gps_processing_method, gps_processing_method, len);
    }*/
    return 0;
!!!11072780.cpp!!!	cancelAutofocus(in  : void) : int
    LOGW("%s :", __func__);

    return 0;
!!!11073036.cpp!!!	getAutoFocusResult(in  : void) : int
    int af_result, count, ret;

    af_result = 1;
    LOGW("%s : AF was successful, returning %d", __func__, af_result);
    return af_result;
!!!11073292.cpp!!!	setRecordingSize(in width : int, in height : int) : int
    LOGW("%s(width(%d), height(%d))", __func__, width, height);

    m_recording_width  = width;
    m_recording_height = height;

    return 0;
!!!11073420.cpp!!!	getRecordingSize(inout width : int, inout height : int) : int
    *width = m_recording_width;
    *height = m_recording_height;

    return 0;
!!!11073548.cpp!!!	setGamma(in gamma : int) : int
    LOGW("%s(gamma(%d))", __func__, gamma);

    if (gamma < GAMMA_OFF || GAMMA_MAX <= gamma) {
        LOGE("ERR(%s):Invalid gamma (%d)", __func__, gamma);
        return -1;
    }

    if (m_video_gamma != gamma) {
        m_video_gamma = gamma;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_SET_GAMMA, gamma) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_SET_GAMMA", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11073676.cpp!!!	setSlowAE(in slow_ae : int) : int
    LOGW("%s(slow_ae(%d))", __func__, slow_ae);

    if (slow_ae < GAMMA_OFF || GAMMA_MAX <= slow_ae) {
        LOGE("ERR(%s):Invalid slow_ae (%d)", __func__, slow_ae);
        return -1;
    }

    if (m_slow_ae != slow_ae) {
        m_slow_ae = slow_ae;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_SET_SLOW_AE, slow_ae) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_SET_SLOW_AE", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11073804.cpp!!!	setExifOrientationInfo(in orientationInfo : int) : int
    LOGW("%s(orientationInfo(%d))", __func__, orientationInfo);

    if (orientationInfo < 0) {
        LOGE("ERR(%s):Invalid orientationInfo (%d)", __func__, orientationInfo);
        return -1;
    }

    m_exif_orientation = orientationInfo;

    return 0;
!!!11073932.cpp!!!	setSnapshotCmd(in  : void) : int
    LOGW("%s :", __func__);

    int ret = 0;

    LOG_TIME_DEFINE(0)
    LOG_TIME_DEFINE(1)

    if (m_flag_camera_start > 0  || m_flag_record_start > 0) {
        LOG_TIME_START(0)
        LOGW("WARN(%s):Camera was in preview or record, should have been stopped\n", __func__);
    }

    if(m_flag_camera_picture_start) {
        LOGW("Alread in pictur mode");
    }

    m_flag_camera_picture_start = 1;

    if (m_cam_fd <= 0) {
        LOGE("ERR(%s):Camera was closed\n", __func__);
        return 0;
    }

    LOG_TIME_START(1) // prepare
    int nframe = 1;

    ret = fimc_v4l2_enum_fmt(m_cam_fd, m_snapshot_v4lformat);
    CHECK(ret);

    //ret = fimc_v4l2_s_fmt(m_cam_fd, m_snapshot_width, m_snapshot_height, 0);
    LOGW("Set take picture size as [%d, %d]", m_snapshot_width, m_snapshot_height);
    ret = setFormatAndAllocBuffer(m_snapshot_width, m_snapshot_height, V4L2_PIX_FMT_YUYV);
    CHECK(ret);

    ret = fimc_v4l2_streamon(m_cam_fd);
    CHECK(ret);
    LOG_TIME_END(1)

    return 0;
!!!11074060.cpp!!!	endSnapshot(in  : void) : int
    int ret;

    LOGI("%s :", __func__);
    /*if (m_capture_buf.start) {
        munmap(m_capture_buf.start, m_capture_buf.length);
        LOGI("munmap():virt. addr %p size = %d\n",
             m_capture_buf.start, m_capture_buf.length);
        m_capture_buf.start = NULL;
        m_capture_buf.length = 0;
    }*/
    return 0;
!!!11074316.cpp!!!	setSensorMode(in sensor_mode : int) : int
    LOGW("%s(sensor_mode (%d))", __func__, sensor_mode);

    if (sensor_mode < SENSOR_MODE_CAMERA || SENSOR_MODE_MOVIE < sensor_mode) {
        LOGE("ERR(%s):Invalid sensor mode (%d)", __func__, sensor_mode);
        return -1;
    }

    if (m_sensor_mode != sensor_mode) {
        m_sensor_mode = sensor_mode;
    }

    return 0;
!!!11074444.cpp!!!	setShotMode(in shot_mode : int) : int
    LOGW("%s(shot_mode (%d))", __func__, shot_mode);

    if (shot_mode < SHOT_MODE_SINGLE || SHOT_MODE_SELF < shot_mode) {
        LOGE("ERR(%s):Invalid shot_mode (%d)", __func__, shot_mode);
        return -1;
    }

    m_shot_mode = shot_mode;

    return 0;
!!!11074572.cpp!!!	setVTmode(in vtmode : int) : int
    LOGW("%s(vtmode (%d))", __func__, vtmode);

    if (vtmode < VT_MODE_OFF || VT_MODE_MAX <= vtmode) {
        LOGE("ERR(%s):Invalid vtmode (%d)", __func__, vtmode);
        return -1;
    }

    if (m_vtmode != vtmode) {
        m_vtmode = vtmode;
    }

    return 0;
!!!11074700.cpp!!!	getVTmode(in  : void) : int
    return m_vtmode;
!!!11074828.cpp!!!	setBlur(in blur_level : int) : int
    LOGW("%s(level (%d))", __func__, blur_level);

    if (blur_level < BLUR_LEVEL_0 || BLUR_LEVEL_MAX <= blur_level) {
        LOGE("ERR(%s):Invalid level (%d)", __func__, blur_level);
        return -1;
    }

    if (m_blur_level != blur_level) {
        m_blur_level = blur_level;

        if (m_flag_camera_start) {
            /*if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_VGA_BLUR, blur_level) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_VGA_BLUR", __func__);
                return -1;
            }*/
        }
    }

    return 0;
!!!11074956.cpp!!!	getBlur(in  : void) : int
    return m_blur_level;
!!!11075084.cpp!!!	setDataLineCheck(in chk_dataline : int) : int
    LOGW("%s(chk_dataline (%d))", __func__, chk_dataline);

    if (chk_dataline < CHK_DATALINE_OFF || CHK_DATALINE_MAX <= chk_dataline) {
        LOGE("ERR(%s):Invalid chk_dataline (%d)", __func__, chk_dataline);
        return -1;
    }

    m_chk_dataline = chk_dataline;

    return 0;
!!!11075212.cpp!!!	getDataLineCheck(in  : void) : int
    return m_chk_dataline;
!!!11075340.cpp!!!	getSupportPreviewSize() : char
    return support_preview_size;
!!!11075468.cpp!!!	getSupportPictureSize() : char
    return default_picture_size;
!!!11075980.cpp!!!	previewPoll(in preview : bool) : int
    int ret = 0;

    /*if (preview) {
        ret = poll(&m_events_c, 1, 1000);
    } else {
        ret = poll(&m_events_c2, 1, 1000);
    }

    if (ret < 0) {
        LOGE("ERR(%s):poll error\n", __func__);
        return ret;
    }

    if (ret == 0) {
        LOGE("ERR(%s):No data in 1 secs.. Camera Device Reset \n", __func__);
        return ret;
    }*/

    return ret;
!!!11076108.cpp!!!	setFrameRate(in frame_rate : int) : int
    LOGW("%s(FrameRate(%d))", __func__, frame_rate);

    /*if (frame_rate < FRAME_RATE_AUTO || FRAME_RATE_MAX < frame_rate )
        LOGE("ERR(%s):Invalid frame_rate(%d)", __func__, frame_rate);

    if (m_params->capture.timeperframe.denominator != (unsigned)frame_rate) {
        m_params->capture.timeperframe.denominator = frame_rate;
        if (m_flag_camera_start) {
            if (fimc_v4l2_s_ctrl(m_cam_fd, V4L2_CID_CAMERA_FRAME_RATE, frame_rate) < 0) {
                LOGE("ERR(%s):Fail on V4L2_CID_CAMERA_FRAME_RATE", __func__);
                return -1;
            }
        }
    }*/

    return 0;
!!!11076236.cpp!!!	getJpeg(inout jpeg_size : int, inout phyaddr : uint) : byte
    LOGW("%s :", __func__);

    int index, ret = 0;
    unsigned char *addr;

    LOG_TIME_DEFINE(2)
    ret = fimc_v4l2_streamon(m_cam_fd);
    // CHECK_PTR(ret);

    if(bNeedDumpTime) {
        LOGI(">>>>>>>>>>>Start dequeue buffer for take picture");
    }

    // capture, use the 2th buffer for encode, we find after change size,
    // some camera's 1th buffer have garbage
    index = fimc_v4l2_dqbuf(m_cam_fd);
    fimc_v4l2_qbuf(m_cam_fd, index);
    index = fimc_v4l2_dqbuf(m_cam_fd);
    /*if (index != 0) {
        LOGE("ERR(%s):wrong index = %d\n", __func__, index);
        return NULL;
    }*/

    if(bNeedDumpTime) {
        LOGI(">>>>>>>>>>>End dequeue buffer for take pictur");
    }

    *phyaddr = (unsigned int)(m_preview_buf[index].start) ;
    *jpeg_size = m_preview_buf[index].length;

    LOG_TIME_START(2) // post
    //ret = fimc_v4l2_streamoff(m_cam_fd);
    CHECK_PTR(ret);
    LOG_TIME_END(2)

    return (unsigned char *)phyaddr;
!!!11076364.cpp!!!	getPostViewOffset(in  : void) : int
    return m_postview_offset;
!!!11076492.cpp!!!	getCameraFd(in  : void) : int
    return m_cam_fd;
!!!11076876.cpp!!!	initCamera(in index : int) : int
    LOGW("%s :", __func__);
    int ret = 0;

    if (!m_flag_init) {
        /* Arun C
         * Reset the lense position only during camera starts; don't do
         * reset between shot to shot
         */
        m_camera_af_flag = -1;

        m_cam_fd = open(CAMERA_DEV_NAME, O_RDWR);

        if (m_cam_fd < 0) {
            LOGE("ERR(%s):Cannot open %s (error : %s)\n",
                 __func__, CAMERA_DEV_NAME, strerror(errno));
            LOGI("(%s): will research camera agian!", __func__);
            find_camera();
            m_cam_fd = open(CAMERA_DEV_NAME, O_RDWR);

            if(m_cam_fd < 0) {
                LOGE("ERR(%s):Cannot open %s (error : %s) after research\n",
                     __func__, CAMERA_DEV_NAME, strerror(errno));
                return -1;
            }
        }

        LOGI("%s: open(%s) --> m_cam_fd %d", __FUNCTION__, CAMERA_DEV_NAME, m_cam_fd);

        ret = fimc_v4l2_querycap(m_cam_fd);
        CHECK(ret);

        m_camera_id = index;

        sprintf(support_preview_size, "");
        sprintf(default_picture_size, "");
        {
            int largestSize[2];
            struct v4l2_fmtdesc fmtdesc;
            fmtdesc.index = 0;
            fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
            largestSize[0] = 0;
            largestSize[1] = 0;

            while(xioctl(m_cam_fd, VIDIOC_ENUM_FMT, &fmtdesc) != -1) {
                fmtdesc.index++;

                v4l2_frmsizeenum frame;
                frame.index = 0;
                frame.pixel_format = fmtdesc.pixelformat;
                frame.type = V4L2_FRMSIZE_TYPE_DISCRETE;

                //Only check YUYV format now, for other format, we will support later
                if(fmtdesc.pixelformat != V4L2_PIX_FMT_YUYV) {
                    continue;
                }

                while(xioctl(m_cam_fd, VIDIOC_ENUM_FRAMESIZES, &frame) != -1) {
                    if(frame.type == V4L2_FRMSIZE_TYPE_DISCRETE) {
                        frame.index++;
                        char temp_size[20];

                        if(frame.discrete.width > largestSize[0]) {
                            largestSize[0] = frame.discrete.width;
                            largestSize[1] = frame.discrete.height;
                        }

                        sprintf(temp_size, "%dx%d", frame.discrete.width, frame.discrete.height);

                        if(!strstr(support_preview_size, temp_size)) {
                            if(!strstr(support_preview_size, "x")) {
                                sprintf(support_preview_size, "%s%dx%d",
                                        support_preview_size,
                                        frame.discrete.width,
                                        frame.discrete.height);
                            } else {
                                sprintf(support_preview_size, "%s,%dx%d",
                                        support_preview_size,
                                        frame.discrete.width,
                                        frame.discrete.height);
                            }
                        }
                    } else if (frame.type == V4L2_FRMSIZE_TYPE_CONTINUOUS) {
                        LOGW("Do not support continuous mode now");
                        break;
                    }
                }
            }

            sprintf(default_picture_size, "%dx%d", largestSize[0], largestSize[1]);

            //Add 640x480 and 320x240 to enable the picture size setting UI in Camera.apk
            if(strstr(support_preview_size, "640x480")
               && !strstr(default_picture_size, "640x480")) {
                sprintf(default_picture_size, "%s,640x480", default_picture_size);
            }

            if(strstr(support_preview_size, "320x240")
               && !strstr(default_picture_size, "320x240")) {
                sprintf(default_picture_size, "%s,320x240", default_picture_size);
            }

            m_preview_max_width  = largestSize[0];
            m_preview_max_height  = largestSize[1];
            m_snapshot_max_width  = largestSize[0];
            m_snapshot_max_height = largestSize[1];
        }

        LOGW("Support preview size is %s, default picture size is %s ",
             support_preview_size, default_picture_size);
        //Get state for Exposure
        {
            struct v4l2_control control;
            memset (&ExposureCtrl, 0, sizeof (ExposureCtrl));
            ExposureCtrl.id = V4L2_CID_EXPOSURE;

            if (-1 == xioctl (m_cam_fd, VIDIOC_QUERYCTRL, &ExposureCtrl)) {
                LOGI("Query Exposure faile: Not supported");
            } else if (ExposureCtrl.flags & V4L2_CTRL_FLAG_DISABLED) {
                LOGI ("Exposure: Not supported");
            } else {
                LOGI("Exposure info:%d, min=%d, max=%d, step=%d",
                     ExposureCtrl.default_value,
                     ExposureCtrl.minimum,
                     ExposureCtrl.maximum,
                     ExposureCtrl.step);
            }
        }
        m_flag_init = 1;
        LOGI("%s : initialized", __FUNCTION__);
    }

    return 0;
!!!11077004.cpp!!!	DeinitCamera() : void
    LOGW("%s :", __func__);

    if (m_flag_init) {

        stopPreview();
        stopRecord();

        /* close m_cam_fd after stopRecord() because stopRecord()
         * uses m_cam_fd to change frame rate
         */
        LOGI("DeinitCamera: m_cam_fd(%d)", m_cam_fd);

        if (m_cam_fd > -1) {
            close(m_cam_fd);
            m_cam_fd = -1;
        }

        m_flag_init = 0;
    } else LOGI("%s : already deinitialized", __FUNCTION__);
!!!11077900.cpp!!!	m_frameSize(in format : int, in width : int, in height : int) : int
    int size = 0;

    switch (format) {
    case V4L2_PIX_FMT_YUV420:
    case V4L2_PIX_FMT_NV12:
    case V4L2_PIX_FMT_NV21:
    case V4L2_PIX_FMT_YVU420:
        size = (width * height * 3 / 2);
        break;

    case V4L2_PIX_FMT_NV12T:
        size = ALIGN_TO_8KB(ALIGN_TO_128B(width) * ALIGN_TO_32B(height)) +
               ALIGN_TO_8KB(ALIGN_TO_128B(width) * ALIGN_TO_32B(height / 2));
        break;

    case V4L2_PIX_FMT_YUV422P:
    case V4L2_PIX_FMT_YUYV:
    case V4L2_PIX_FMT_UYVY:
        size = (width * height * 2);
        break;

    default :
        LOGE("ERR(%s):Invalid V4L2 pixel format(%d)\n", __func__, format);

    case V4L2_PIX_FMT_RGB565:
        size = (width * height * BPP);
        break;
    }

    return size;
!!!11078028.cpp!!!	setFormatAndAllocBuffer(in width : int, in height : int, in fmt : uint) : int
    int ret;

    //Step 1
    if(m_flag_request_buffer) {
        LOGW("!!!!!!!!!%s %d.  Free previous buffers", __FUNCTION__, __LINE__);
        fimc_v4l2_streamoff(m_cam_fd);

        for (int i = 0; i < m_preview_buf_num; i++) {
            ret = fimc_v4l2_qbuf(m_cam_fd, i);
            //CHECK(ret);
        }

        for (int i = 0; i < m_preview_buf_num; i++) {
            ret = fimc_v4l2_munmap_for_Preview(m_cam_fd,
                                               i,
                                               &m_preview_buf[i],
                                               V4L2_BUF_TYPE_VIDEO_CAPTURE);
            //CHECK(ret);
        }

        fimc_v4l2_reqbufs(m_cam_fd, V4L2_BUF_TYPE_VIDEO_CAPTURE, 0);
    }

    fimc_v4l2_s_fmt(m_cam_fd, width, height, fmt, 0);

    //Step 4. To request the buffer.
    m_preview_buf_num = fimc_v4l2_reqbufs(m_cam_fd, V4L2_BUF_TYPE_VIDEO_CAPTURE, MAX_BUFFERS);
    CHECK(m_preview_buf_num);

    for (int i = 0; i < m_preview_buf_num; i++) {
        fimc_v4l2_mmap_for_Preview(m_cam_fd, i, &m_preview_buf[i], V4L2_BUF_TYPE_VIDEO_CAPTURE);
        //CHECK(ret);
    }

    for (int i = 0; i < m_preview_buf_num; i++) {
        ret = fimc_v4l2_qbuf(m_cam_fd, i);
        CHECK(ret);
    }

    m_flag_request_buffer = 1;
    return 0;
