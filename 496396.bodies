class GenericType
!!!1437452.cpp!!!	GenericType(in package : string, in name : string, in args : vector<Type*>)
    m_args = args;

    m_importName = package + '.' + name;

    string gen = "<";
    int N = args.size();
    for (int i=0; i<N; i++) {
        Type* t = args[i];
        gen += t->QualifiedName();
        if (i != N-1) {
            gen += ',';
        }
    }
    gen += '>';
    m_genericArguments = gen;
    SetQualifiedName(m_importName + gen);
!!!1437580.cpp!!!	GenericArgumentTypes() : vector<Type*>
    return m_args;
!!!1437708.cpp!!!	GenericArguments() : string
    return m_genericArguments;
!!!1437836.cpp!!!	ImportType() : string
    return m_importName;
!!!1437964.cpp!!!	WriteToParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, in flags : int) : void
    fprintf(stderr, "implement GenericType::WriteToParcel\n");
!!!1438092.cpp!!!	CreateFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    fprintf(stderr, "implement GenericType::CreateFromParcel\n");
!!!1438220.cpp!!!	ReadFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    fprintf(stderr, "implement GenericType::ReadFromParcel\n");
