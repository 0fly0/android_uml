class WifiP2pManager
!!!9783820.java!!!	WifiP2pManager(inout service : IWifiP2pManager)
        mService = service;
!!!9787020.java!!!	checkChannel(inout c : Channel) : void
        if (c == null) throw new IllegalArgumentException("Channel needs to be initialized");
!!!9787148.java!!!	checkServiceInfo(inout info : WifiP2pServiceInfo) : void
        if (info == null) throw new IllegalArgumentException("service info is null");
!!!9787276.java!!!	checkServiceRequest(inout req : WifiP2pServiceRequest) : void
        if (req == null) throw new IllegalArgumentException("service request is null");
!!!9787404.java!!!	initialize(inout srcContext : Context, inout srcLooper : Looper, inout listener : ChannelListener) : Channel
        Messenger messenger = getMessenger();
        if (messenger == null) return null;

        Channel c = new Channel(srcContext, srcLooper, listener);
        if (c.mAsyncChannel.connectSync(srcContext, c.mHandler, messenger)
                == AsyncChannel.STATUS_SUCCESSFUL) {
            return c;
        } else {
            return null;
        }
!!!9787532.java!!!	discoverPeers(inout c : Channel, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(DISCOVER_PEERS, 0, c.putListener(listener));
!!!9787660.java!!!	stopPeerDiscovery(inout c : Channel, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(STOP_DISCOVERY, 0, c.putListener(listener));
!!!9787788.java!!!	connect(inout c : Channel, inout config : WifiP2pConfig, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(CONNECT, 0, c.putListener(listener), config);
!!!9787916.java!!!	cancelConnect(inout c : Channel, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(CANCEL_CONNECT, 0, c.putListener(listener));
!!!9788044.java!!!	createGroup(inout c : Channel, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(CREATE_GROUP, WifiP2pGroup.PERSISTENT_NET_ID,
                c.putListener(listener));
!!!9788172.java!!!	removeGroup(inout c : Channel, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(REMOVE_GROUP, 0, c.putListener(listener));
!!!9788300.java!!!	addLocalService(inout c : Channel, inout servInfo : WifiP2pServiceInfo, inout listener : ActionListener) : void
        checkChannel(c);
        checkServiceInfo(servInfo);
        c.mAsyncChannel.sendMessage(ADD_LOCAL_SERVICE, 0, c.putListener(listener), servInfo);
!!!9788428.java!!!	removeLocalService(inout c : Channel, inout servInfo : WifiP2pServiceInfo, inout listener : ActionListener) : void
        checkChannel(c);
        checkServiceInfo(servInfo);
        c.mAsyncChannel.sendMessage(REMOVE_LOCAL_SERVICE, 0, c.putListener(listener), servInfo);
!!!9788556.java!!!	clearLocalServices(inout c : Channel, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(CLEAR_LOCAL_SERVICES, 0, c.putListener(listener));
!!!9788684.java!!!	setServiceResponseListener(inout c : Channel, inout listener : ServiceResponseListener) : void
        checkChannel(c);
        c.mServRspListener = listener;
!!!9788812.java!!!	setDnsSdResponseListeners(inout c : Channel, inout servListener : DnsSdServiceResponseListener, inout txtListener : DnsSdTxtRecordListener) : void
        checkChannel(c);
        c.mDnsSdServRspListener = servListener;
        c.mDnsSdTxtListener = txtListener;
!!!9788940.java!!!	setUpnpServiceResponseListener(inout c : Channel, inout listener : UpnpServiceResponseListener) : void
        checkChannel(c);
        c.mUpnpServRspListener = listener;
!!!9789068.java!!!	discoverServices(inout c : Channel, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(DISCOVER_SERVICES, 0, c.putListener(listener));
!!!9789196.java!!!	addServiceRequest(inout c : Channel, inout req : WifiP2pServiceRequest, inout listener : ActionListener) : void
        checkChannel(c);
        checkServiceRequest(req);
        c.mAsyncChannel.sendMessage(ADD_SERVICE_REQUEST, 0,
                c.putListener(listener), req);
!!!9789324.java!!!	removeServiceRequest(inout c : Channel, inout req : WifiP2pServiceRequest, inout listener : ActionListener) : void
        checkChannel(c);
        checkServiceRequest(req);
        c.mAsyncChannel.sendMessage(REMOVE_SERVICE_REQUEST, 0,
                c.putListener(listener), req);
!!!9789452.java!!!	clearServiceRequests(inout c : Channel, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(CLEAR_SERVICE_REQUESTS,
                0, c.putListener(listener));
!!!9789580.java!!!	requestPeers(inout c : Channel, inout listener : PeerListListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(REQUEST_PEERS, 0, c.putListener(listener));
!!!9789708.java!!!	requestConnectionInfo(inout c : Channel, inout listener : ConnectionInfoListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(REQUEST_CONNECTION_INFO, 0, c.putListener(listener));
!!!9789836.java!!!	requestGroupInfo(inout c : Channel, inout listener : GroupInfoListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(REQUEST_GROUP_INFO, 0, c.putListener(listener));
!!!9789964.java!!!	setDeviceName(inout c : Channel, in devName : String, inout listener : ActionListener) : void
        checkChannel(c);
        WifiP2pDevice d = new WifiP2pDevice();
        d.deviceName = devName;
        c.mAsyncChannel.sendMessage(SET_DEVICE_NAME, 0, c.putListener(listener), d);
!!!9790092.java!!!	setWFDInfo(inout c : Channel, inout wfdInfo : WifiP2pWfdInfo, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(SET_WFD_INFO, 0, c.putListener(listener), wfdInfo);
!!!9790220.java!!!	setDialogListener(inout c : Channel, inout listener : DialogListener) : void
        checkChannel(c);
        c.setDialogListener(listener);

        /**
         * mAsyncChannel should always stay private and inaccessible from the app
         * to prevent an app from sending a message with a fake app name to gain
         * control over the dialogs
         */
        Message msg = Message.obtain();
        Bundle bundle = new Bundle();
        bundle.putString(APP_PKG_BUNDLE_KEY, c.mContext.getPackageName());
        bundle.putBoolean(RESET_DIALOG_LISTENER_BUNDLE_KEY, listener == null);
        msg.what = SET_DIALOG_LISTENER;
        msg.setData(bundle);
        c.mAsyncChannel.sendMessage(msg);
!!!9790348.java!!!	deletePersistentGroup(inout c : Channel, in netId : int, inout listener : ActionListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(DELETE_PERSISTENT_GROUP, netId, c.putListener(listener));
!!!9790476.java!!!	requestPersistentGroupInfo(inout c : Channel, inout listener : PersistentGroupInfoListener) : void
        checkChannel(c);
        c.mAsyncChannel.sendMessage(REQUEST_PERSISTENT_GROUP_INFO, 0, c.putListener(listener));
!!!9790604.java!!!	getMessenger() : Messenger
        try {
            return mService.getMessenger();
        } catch (RemoteException e) {
            return null;
        }
