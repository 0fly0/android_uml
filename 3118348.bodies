class MulticastListener
!!!13106828.java!!!	MulticastListener(inout interfaces : Set<NetworkInterface>)
      InetSocketAddress sockAddr =
              new InetSocketAddress(
                  InetAddress.getByName(SsdpRequest.MULTICAST_ADDRESS),
                  SsdpRequest.MULTICAST_PORT);

      this.listening = true;
      this.stopped = false;
      this.socket = new MulticastSocket(SsdpRequest.MULTICAST_PORT);

      // GTV modification) set a receive buffer size to reduce the packet drop rate.
      this.socket.setReceiveBufferSize(RECEIVE_BUFFER_SIZE);

      for (NetworkInterface xface : interfaces) {
          this.socket.joinGroup(sockAddr, xface);
      }
!!!13106956.java!!!	disconnect() : void

      try {
        this.listening = false;
        // receive blocks with synchronization lock so disconnect stalls for
        // ever if nothing is received...
        // this.socket.disconnect();
        for (int retry = 0; retry < 3; retry++) {
          if (this.stopped) {
            System.out.println("stopped");
            break;
          } else {
            try {
              Thread.sleep(100);
            } catch (InterruptedException e) {
            }
          }
        }
      } finally {
          if (this.socket != null) {
              this.socket.close();
              this.socket = null;
          }
      }
!!!13107084.java!!!	run() : void

      byte[] buffer = new byte[1500];
      DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
      while (this.listening) {
        try {
          // The internal |length| value is used as both an input and an output:
          // it is set to the received length on first use, clamping subsequent
          // receives.  Re-set the internal buffer on each iteration to avoid
          // this.  (Could also simply call setLength(), or create a new
          // DatagramPacket)
          packet.setData(buffer, 0, buffer.length);

          // TODO: this API sucks! The method blocks until datagram us received,
          // if nothing is received and the socket is closed, an IO-Exception is
          // thrown.
          this.socket.receive(packet);
          byte[] data = packet.getData();
          ByteArrayInputStream stream = new ByteArrayInputStream(data, 0, packet.getLength());
          SsdpRequest request = new SsdpRequest();
          request.setSocketAddress(packet.getAddress(), packet.getPort());
          HttpParser.parseRequest(stream, request);
          notifyListeners(request);
        } catch (SocketException ex) {
            // socket exceptions can be ignored if we're stopping
            if (listening) {
                // hmmm, unexpected exception.  Show it ...
                ex.printStackTrace();
            }
        } catch (IOException e) {
          // TODO: error handling!!!
          e.printStackTrace();
        } catch (Exception e) {
          // Last-ditch recourse before we crash the system.  In particular, catch
          // illegal HTTP headers in HttpParser#parseRequest, which appear as a
          // java.lang.IllegalStateException
          e.printStackTrace();
        }
      }
      this.stopped = true;
