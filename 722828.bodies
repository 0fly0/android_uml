class DependencyListener
!!!2413452.java!!!	DependencyListener(inout animatorSet : AnimatorSet, inout node : Node, in rule : int)
            this.mAnimatorSet = animatorSet;
            this.mNode = node;
            this.mRule = rule;
!!!2413708.java!!!	onAnimationEnd(inout animation : Animator) : void
            if (mRule == Dependency.AFTER) {
                startIfReady(animation);
            }
!!!2413964.java!!!	onAnimationStart(inout animation : Animator) : void
            if (mRule == Dependency.WITH) {
                startIfReady(animation);
            }
!!!2414092.java!!!	startIfReady(inout dependencyAnimation : Animator) : void
            if (mAnimatorSet.mTerminated) {
                // if the parent AnimatorSet was canceled, then don't start any dependent anims
                return;
            }
            Dependency dependencyToRemove = null;
            int numDependencies = mNode.tmpDependencies.size();
            for (int i = 0; i < numDependencies; ++i) {
                Dependency dependency = mNode.tmpDependencies.get(i);
                if (dependency.rule == mRule &&
                        dependency.node.animation == dependencyAnimation) {
                    // rule fired - remove the dependency and listener and check to
                    // see whether it's time to start the animation
                    dependencyToRemove = dependency;
                    dependencyAnimation.removeListener(this);
                    break;
                }
            }
            mNode.tmpDependencies.remove(dependencyToRemove);
            if (mNode.tmpDependencies.size() == 0) {
                // all dependencies satisfied: start the animation
                mNode.animation.start();
                mAnimatorSet.mPlayingSet.add(mNode.animation);
            }
