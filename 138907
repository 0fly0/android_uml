format 74
"annotation" // _unknown::org::apache::harmony::lang::annotation
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/org/apache/harmony/lang/annotation/"
  java_package "org.apache.harmony.lang.annotation"
  classview 137115 "annotation"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 326171 "AnnotationFactory"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings({\"serial\"})
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The annotation implementation based on dynamically generated proxy instances.
It conforms to all requirements stated in public APIs, see in particular
{@link java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement}
and {@link java.lang.annotation.Annotation java.lang.annotation.Annotation}.
Namely, annotation instances are immutable and serializable; they provide
conforming access to annotation member values and required implementations of
methods declared in Annotation interface.

@see android.lang.annotation.AnnotationMember
@see java.lang.annotation.Annotation

@author Alexey V. Varlamov, Serguei S. Zapreyev
@version $Revision$"
      classrelation 589339 // <realization>
	relation 589339 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 589339 // <realization>
	  b parent class_ref 165147 // InvocationHandler
      end

      classrelation 589467 // <realization>
	relation 589467 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 589467 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      classrelation 589595 // cache (<unidirectional association>)
	relation 589595 --->
	  a role_name "cache" init_value " new WeakHashMap<Class<? extends Annotation>, AnnotationMember[]>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<? extends Annotation>, AnnotationMember[]> ${name}${value};
"
	    classrelation_ref 589595 // cache (<unidirectional association>)
	  b parent class_ref 129819 // Map
      end

      operation 2133531 "getElementsDescription"
	class_operation public return_type class_ref 326299 // AnnotationMember
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reflects specified annotation type and returns an array
of member element definitions with default values."
      end

      operation 2133659 "createAnnotation"
	class_operation public return_type class_ref 149275 // Annotation
	nparams 2
	  param inout name "annotationType" type class_ref 3421708 // Class
	  param inout name "elements" type class_ref 326299 // AnnotationMember
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a new annotation instance.
@param annotationType the annotation type definition
@param elements name-value pairs representing elements of the annotation
@return a new annotation instance"
      end

      classrelation 589723 // klazz (<unidirectional association>)
	relation 589723 --->
	  a role_name "klazz" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends Annotation> ${name}${value};
"
	    classrelation_ref 589723 // klazz (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 589851 // elements (<unidirectional association>)
	relation 589851 --->
	  a role_name "elements" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 589851 // elements (<unidirectional association>)
	  b parent class_ref 326299 // AnnotationMember
      end

      operation 2133787 "AnnotationFactory"
	private explicit_return_type ""
	nparams 2
	  param inout name "klzz" type class_ref 3421708 // Class
	  param inout name "values" type class_ref 326299 // AnnotationMember
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Annotation> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "New instances should not be created directly, use factory method
{@link #createAnnotation(Class, AnnotationMember[]) createAnnotation()}
instead.

@param klzz class defining the annotation type
@param values actual element values"
      end

      operation 2133915 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "os" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the object, obtains actual member definitions for the annotation type,
and merges deserialized values with the new definitions."
      end

      operation 2134043 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified object represents the same annotation instance.
That is, if it implements the same annotation type and
returns the same element values.
<br>Note, actual underlying implementation mechanism does not matter - it may
differ completely from this class.
@return true if the passed object is equivalent annotation instance,
false otherwise.
@see android.lang.annotation.AnnotationMember#equals(Object)"
      end

      operation 2134171 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code composed as a sum of hash codes of member elements,
including elements with default values.
@see android.lang.annotation.AnnotationMember#hashCode()"
      end

      operation 2134299 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides detailed description of this annotation instance,
including all member name-values pairs.
@return string representation of this annotation"
      end

      operation 2134427 "invoke"
	public return_type class_ref 3401484 // Object
	nparams 3
	  param inout name "proxy" type class_ref 3401484 // Object
	  param inout name "method" type class_ref 144155 // Method
	  param inout name "args" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Processes a method invocation request to this annotation instance.
Recognizes the methods declared in the
{@link java.lang.annotation.Annotation java.lang.annotation.Annotation}
interface, and member-defining methods of the implemented annotation type.
@throws IllegalArgumentException If the specified method is none of the above
@return the invocation result"
      end
    end

    class 326299 "AnnotationMember"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings({\"serial\"})
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents member element of an annotation.
It consists of name and value, supplemented with element
definition information (such as declared type of element).
<br>The value may be one of the following types:
<ul>
<li> boxed primitive
<li> Class
<li> enum constant
<li> annotation (nested)
<li> one-dimensional array of the above
<li> Throwable
</ul>
The last type is specific for this implementation; a Throwable value
means that the error occured during parsing or resolution of corresponding
class-data structures and throwing is delayed until the element
is requested for value.

@see android.lang.annotation.AnnotationFactory

@author Alexey V. Varlamov, Serguei S. Zapreyev
@version $Revision$"
      classrelation 589979 // <realization>
	relation 589979 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 589979 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 548763 "ERROR"
	class_attribute const_attribute protected explicit_type "char"
	init_value " '!'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag description of a Throwable value type.
"
      end

      attribute 548891 "ARRAY"
	class_attribute const_attribute protected explicit_type "char"
	init_value " '['"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag description of an array value type.
"
      end

      attribute 549019 "OTHER"
	class_attribute const_attribute protected explicit_type "char"
	init_value " '*'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tag description of all value types except arrays and Throwables.
"
      end

      class 326427 "DefaultValues"
	visibility private stereotype "enum"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 549147 "NO_VALUE"
	  public type class_ref 326427 // DefaultValues
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      classrelation 590107 // NO_VALUE (<unidirectional association>)
	relation 590107 --->
	  a role_name "NO_VALUE" init_value " DefaultValues.NO_VALUE" class_relation const_relation protected
	    comment "
Singleton representing missing element value.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 590107 // NO_VALUE (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 590235 // name (<unidirectional association>)
	relation 590235 --->
	  a role_name "name" const_relation protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 590235 // name (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 590363 // value (<unidirectional association>)
	relation 590363 --->
	  a role_name "value" const_relation protected
	    comment " a primitive value is wrapped to the corresponding wrapper class"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 590363 // value (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      attribute 549275 "tag"
	const_attribute protected explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 590491 // elementType (<unidirectional association>)
	relation 590491 --->
	  a role_name "elementType" protected
	    comment " no sense to serialize definition info as it can be changed arbitrarily
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 590491 // elementType (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 590619 // definingMethod (<unidirectional association>)
	relation 590619 --->
	  a role_name "definingMethod" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 590619 // definingMethod (<unidirectional association>)
	  b parent class_ref 144155 // Method
      end

      operation 2134555 "AnnotationMember"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "val" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new element with specified name and value.
Definition info will be provided later when this
element becomes actual annotation member.
@param name element name, must not be null
@param val element value, should be of addmissible type,
as specified in the description of this class

@see #setDefinition(AnnotationMember)"
      end

      operation 2134683 "AnnotationMember"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "val" type class_ref 3401484 // Object
	  param inout name "type" type class_ref 3421708 // Class
	  param inout name "m" type class_ref 144155 // Method
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the completely defined element.
@param name element name, must not be null
@param value element value, should be of addmissible type,
as specified in the description of this class
@param m element-defining method, reflected on the annotation type
@param type declared type of this element
(return type of the defining method)"
      end

      operation 2134811 "setDefinition"
	protected return_type class_ref 326299 // AnnotationMember
	nparams 1
	  param inout name "copy" type class_ref 326299 // AnnotationMember
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fills in element's definition info and returns this."
      end

      operation 2134939 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns readable description of this annotation value."
      end

      operation 2135067 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified object represents equal element
(equivalent name-value pair).
<br> A special case is the contained Throwable value; it is considered
transcendent so no other element would be equal.
@return true if passed object is equivalent element representation,
false otherwise
@see #equalArrayValue(Object)
@see java.lang.annotation.Annotation#equals(Object)"
      end

      operation 2135195 "equalArrayValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "otherValue" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the contained value and a passed object are equal arrays,
false otherwise. Appropriate overloaded method of Arrays.equals()
is used for equality testing.
@see java.util.Arrays#equals(java.lang.Object[], java.lang.Object[])
@return true if the value is array and is equal to specified object,
false otherwise"
      end

      operation 2135323 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes hash code of this element. The formula is as follows:
<code> (name.hashCode() * 127) ^ value.hashCode() </code>
<br>If value is an array, one of overloaded Arrays.hashCode()
methods is used.
@return the hash code
@see java.util.Arrays#hashCode(java.lang.Object[])
@see java.lang.annotation.Annotation#hashCode()"
      end

      operation 2135451 "rethrowError"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws contained error (if any) with a renewed stack trace."
      end

      operation 2135579 "validateValue"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates contained value against its member definition
and if ok returns the value.
Otherwise, if the value type mismatches definition
or the value itself describes an error,
throws appropriate exception.
<br> Note, this method may return null if this element was constructed
with such value.

@see #rethrowError()
@see #copyValue()
@return actual valid value or null if no value"
      end

      operation 2135707 "copyValue"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides mutation-safe access to contained value. That is, caller is free
to modify the returned value, it will not affect the contained data value.
@return cloned value if it is mutable or the original immutable value"
      end
    end
  end

  deploymentview 136347 "annotation"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 277787 "AnnotationFactory"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.annotation.IncompleteAnnotationException;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import static org.apache.harmony.lang.annotation.AnnotationMember.ARRAY;
import static org.apache.harmony.lang.annotation.AnnotationMember.ERROR;
${definition}"
      associated_classes
	class_ref 326171 // AnnotationFactory
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 277915 "AnnotationMember"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.annotation.AnnotationTypeMismatchException;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 326299 // AnnotationMember
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end
  end
end
