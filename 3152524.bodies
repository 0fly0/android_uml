class PairingKeyStoreSpiTest
!!!13347852.java!!!	setUp() : void
        mContentResolver = new MockContentResolver();

        // Add mock PrivateKeyProvider.
        mKeyProvider = new MockKeyProvider(PrivateKeyProvider.PrivateKeyColumns.PROJECTION);
        mKeyProvider.addBlobColumn(PrivateKeyColumns.KEY_INDEX);
        mKeyProvider.addBlobColumn(PrivateKeyColumns.CERT_CHAIN_INDEX);
        mContentResolver.addProvider(PrivateKeyProvider.AUTHORITY,
                mKeyProvider);

        // Add mock TrustedCertificateProvider.
        mCertProvider = new MockCertProvider(
                TrustedCertificateProvider.TrustedCertificateColumns.PROJECTION);
        mContentResolver.addProvider(TrustedCertificateProvider.AUTHORITY,
                mCertProvider);
!!!13347980.java!!!	testSetup() : void
        testAndroidTestCaseSetupProperly();
        // Expected.
        assertTrue(true);
!!!13348108.java!!!	testKeyStoreSpi() : void
        PairingKeyStoreSpi pairingSpi = new PairingKeyStoreSpi();
        pairingSpi.setContentResolver(mContentResolver);
        KeyStore myKeyStore = new PairingKeyStoreSpi.PairingKeyStore(pairingSpi);
        try {
            myKeyStore.load(null, null);
        } catch (NoSuchAlgorithmException e1) {
            fail("Error loading KeyStore:" + e1);
        } catch (CertificateException e1) {
            fail("Error loading KeyStore:" + e1);
        } catch (IOException e1) {
            fail("Error loading KeyStore:" + e1);
        }

        KeyPair pair = null;
        try {
            pair = SslUtil.generateRsaKeyPair();
        } catch (NoSuchAlgorithmException e) {
            fail("Error generating KeyPair: " + e);
        }

        Certificate cert = null;
        try {
            cert = SslUtil.generateX509V1Certificate(pair, "CN=Test");
        } catch (GeneralSecurityException e) {
            fail("Could not produce a cert");
        }

        Certificate[] chain = { cert };
        try {
            myKeyStore.setKeyEntry("test", pair.getPrivate(), null, chain);
        } catch (KeyStoreException e) {
            e.printStackTrace();
            fail("Problem inserting key:" + e);
        }

        Key newKey;
        try {
            newKey = myKeyStore.getKey("test", null);
        } catch (GeneralSecurityException e) {
            fail("Error recovering key: " + e);
            return;
        }

        assertEquals(newKey, pair.getPrivate());

        Certificate[] newChain;
        try {
            newChain = myKeyStore.getCertificateChain("test");
        } catch (KeyStoreException e) {
            fail("Error getting key chain: " + e);
            return;
        }

        assertEquals(newChain.length, 1);
        assertTrue(newChain[0].equals(cert));

        try {
            assertTrue(myKeyStore.containsAlias("test"));
        } catch (KeyStoreException e) {
            fail("Exception while testing for alias:" + e);
        }
