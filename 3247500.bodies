class HeadsetProfile
!!!13995020.java!!!	isProfileReady() : boolean
        return mIsProfileReady;
!!!13995148.java!!!	HeadsetProfile(inout context : Context, inout adapter : LocalBluetoothAdapter, inout deviceManager : CachedBluetoothDeviceManager, inout profileManager : LocalBluetoothProfileManager)
        mLocalAdapter = adapter;
        mDeviceManager = deviceManager;
        mProfileManager = profileManager;
        mLocalAdapter.getProfileProxy(context, new HeadsetServiceListener(),
                BluetoothProfile.HEADSET);
!!!13995276.java!!!	isConnectable() : boolean
        return true;
!!!13995404.java!!!	isAutoConnectable() : boolean
        return true;
!!!13995532.java!!!	connect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        List<BluetoothDevice> sinks = mService.getConnectedDevices();
        if (sinks != null) {
            for (BluetoothDevice sink : sinks) {
                mService.disconnect(sink);
            }
        }
        return mService.connect(device);
!!!13995660.java!!!	disconnect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        List<BluetoothDevice> deviceList = mService.getConnectedDevices();
        if (!deviceList.isEmpty() && deviceList.get(0).equals(device)) {
            // Downgrade priority as user is disconnecting the headset.
            if (mService.getPriority(device) > BluetoothProfile.PRIORITY_ON) {
                mService.setPriority(device, BluetoothProfile.PRIORITY_ON);
            }
            return mService.disconnect(device);
        } else {
            return false;
        }
!!!13995788.java!!!	getConnectionStatus(inout device : BluetoothDevice) : int
        if (mService == null) return BluetoothProfile.STATE_DISCONNECTED;
        List<BluetoothDevice> deviceList = mService.getConnectedDevices();

        return !deviceList.isEmpty() && deviceList.get(0).equals(device)
                ? mService.getConnectionState(device)
                : BluetoothProfile.STATE_DISCONNECTED;
!!!13995916.java!!!	isPreferred(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        return mService.getPriority(device) > BluetoothProfile.PRIORITY_OFF;
!!!13996044.java!!!	getPreferred(inout device : BluetoothDevice) : int
        if (mService == null) return BluetoothProfile.PRIORITY_OFF;
        return mService.getPriority(device);
!!!13996172.java!!!	setPreferred(inout device : BluetoothDevice, inout preferred : boolean) : void
        if (mService == null) return;
        if (preferred) {
            if (mService.getPriority(device) < BluetoothProfile.PRIORITY_ON) {
                mService.setPriority(device, BluetoothProfile.PRIORITY_ON);
            }
        } else {
            mService.setPriority(device, BluetoothProfile.PRIORITY_OFF);
        }
!!!13996300.java!!!	getConnectedDevices() : BluetoothDevice
        if (mService == null) return new ArrayList<BluetoothDevice>(0);
        return mService.getDevicesMatchingConnectionStates(
              new int[] {BluetoothProfile.STATE_CONNECTED,
                         BluetoothProfile.STATE_CONNECTING,
                         BluetoothProfile.STATE_DISCONNECTING});
!!!13996428.java!!!	toString() : String
        return NAME;
!!!13996556.java!!!	getOrdinal() : int
        return ORDINAL;
!!!13996684.java!!!	getNameResource(inout device : BluetoothDevice) : int
        return R.string.bluetooth_profile_headset;
!!!13996812.java!!!	getSummaryResourceForDevice(inout device : BluetoothDevice) : int
        int state = getConnectionStatus(device);
        switch (state) {
            case BluetoothProfile.STATE_DISCONNECTED:
                return R.string.bluetooth_headset_profile_summary_use_for;

            case BluetoothProfile.STATE_CONNECTED:
                return R.string.bluetooth_headset_profile_summary_connected;

            default:
                return Utils.getConnectionStateSummary(state);
        }
!!!13996940.java!!!	getDrawableResource(inout btClass : BluetoothClass) : int
        return R.drawable.ic_bt_headset_hfp;
!!!13997068.java!!!	finalize() : void
        if (V) Log.d(TAG, "finalize()");
        if (mService != null) {
            try {
                BluetoothAdapter.getDefaultAdapter().closeProfileProxy(BluetoothProfile.HEADSET,
                                                                       mService);
                mService = null;
            }catch (Throwable t) {
                Log.w(TAG, "Error cleaning up HID proxy", t);
            }
        }
