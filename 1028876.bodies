class FilePart
!!!5501708.java!!!	FilePart(in name : String, inout partSource : PartSource, in contentType : String, in charset : String)
        
        super(
            name, 
            contentType == null ? DEFAULT_CONTENT_TYPE : contentType, 
            charset == null ? "ISO-8859-1" : charset, 
            DEFAULT_TRANSFER_ENCODING
        );

        if (partSource == null) {
            throw new IllegalArgumentException("Source may not be null");
        }
        this.source = partSource;
!!!5501836.java!!!	FilePart(in name : String, inout partSource : PartSource)
        this(name, partSource, null, null);
!!!5501964.java!!!	FilePart(in name : String, inout file : File)
        this(name, new FilePartSource(file), null, null);
!!!5502092.java!!!	FilePart(in name : String, inout file : File, in contentType : String, in charset : String)
        this(name, new FilePartSource(file), contentType, charset);
!!!5502220.java!!!	FilePart(in name : String, in fileName : String, inout file : File)
        this(name, new FilePartSource(fileName, file), null, null);
!!!5502348.java!!!	FilePart(in name : String, in fileName : String, inout file : File, in contentType : String, in charset : String)
        this(name, new FilePartSource(fileName, file), contentType, charset);
!!!5502476.java!!!	sendDispositionHeader(inout out : OutputStream) : void
        LOG.trace("enter sendDispositionHeader(OutputStream out)");
        super.sendDispositionHeader(out);
        String filename = this.source.getFileName();
        if (filename != null) {
            out.write(FILE_NAME_BYTES);
            out.write(QUOTE_BYTES);
            out.write(EncodingUtils.getAsciiBytes(filename));
            out.write(QUOTE_BYTES);
        }
!!!5502604.java!!!	sendData(inout out : OutputStream) : void
        LOG.trace("enter sendData(OutputStream out)");
        if (lengthOfData() == 0) {
            
            // this file contains no data, so there is nothing to send.
            // we don't want to create a zero length buffer as this will
            // cause an infinite loop when reading.
            LOG.debug("No data to send.");
            return;
        }
        
        byte[] tmp = new byte[4096];
        InputStream instream = source.createInputStream();
        try {
            int len;
            while ((len = instream.read(tmp)) >= 0) {
                out.write(tmp, 0, len);
            }
        } finally {
            // we're done with the stream, close it
            instream.close();
        }
!!!5502732.java!!!	getSource() : PartSource
        LOG.trace("enter getSource()");
        return this.source;
!!!5502860.java!!!	lengthOfData() : long
        LOG.trace("enter lengthOfData()");
        return source.getLength();
