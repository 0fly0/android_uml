class RSAMultiPrimePrivateCrtKeySpec
!!!956699.java!!!	RSAMultiPrimePrivateCrtKeySpec(inout modulus : BigInteger, inout publicExponent : BigInteger, inout privateExponent : BigInteger, inout primeP : BigInteger, inout primeQ : BigInteger, inout primeExponentP : BigInteger, inout primeExponentQ : BigInteger, inout crtCoefficient : BigInteger, inout otherPrimeInfo : RSAOtherPrimeInfo)

        super(modulus, privateExponent);

        // Perform checks specified
        if (modulus == null) {
            throw new NullPointerException("modulus == null");
        }
        if (privateExponent == null) {
            throw new NullPointerException("privateExponent == null");
        }
        if (publicExponent == null) {
            throw new NullPointerException("publicExponent == null");
        }
        if (primeP == null) {
            throw new NullPointerException("primeP == null");
        }
        if (primeQ == null) {
            throw new NullPointerException("primeQ == null");
        }
        if (primeExponentP == null) {
            throw new NullPointerException("primeExponentP == null");
        }
        if (primeExponentQ == null) {
            throw new NullPointerException("primeExponentQ == null");
        }
        if (crtCoefficient == null) {
            throw new NullPointerException("crtCoefficient == null");
        }

        if (otherPrimeInfo != null) {
            if (otherPrimeInfo.length == 0) {
                throw new IllegalArgumentException("otherPrimeInfo.length == 0");
            }
            // Clone array to prevent subsequent modification
            this.otherPrimeInfo = new RSAOtherPrimeInfo[otherPrimeInfo.length];
            System.arraycopy(otherPrimeInfo, 0,
                    this.otherPrimeInfo, 0, this.otherPrimeInfo.length);
        } else {
            this.otherPrimeInfo = null;
        }
        this.publicExponent = publicExponent;
        this.primeP = primeP;
        this.primeQ = primeQ;
        this.primeExponentP = primeExponentP;
        this.primeExponentQ = primeExponentQ;
        this.crtCoefficient = crtCoefficient;
!!!956827.java!!!	getCrtCoefficient() : BigInteger
        return crtCoefficient;
!!!956955.java!!!	getOtherPrimeInfo() : RSAOtherPrimeInfo
        // Clone array (if not null) to prevent subsequent modification
        if (otherPrimeInfo == null) {
            return null;
        } else {
            RSAOtherPrimeInfo[] ret =
                new RSAOtherPrimeInfo[otherPrimeInfo.length];
            System.arraycopy(otherPrimeInfo, 0, ret, 0, ret.length);
            return ret;
        }
!!!957083.java!!!	getPrimeExponentP() : BigInteger
        return primeExponentP;
!!!957211.java!!!	getPrimeExponentQ() : BigInteger
        return primeExponentQ;
!!!957339.java!!!	getPrimeP() : BigInteger
        return primeP;
!!!957467.java!!!	getPrimeQ() : BigInteger
        return primeQ;
!!!957595.java!!!	getPublicExponent() : BigInteger
        return publicExponent;
