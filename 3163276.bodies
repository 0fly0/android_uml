class PairedRemote
!!!13412236.java!!!	PairedRemote(inout context : Context, in certificateId : String, in name : String)
        if (certificateId == null) {
            throw new IllegalArgumentException(
                    "Device cannot have an empty certificate id.");
        }
        mCertificateId = certificateId;
        mHasName = !TextUtils.isEmpty(name);
        if (mHasName) {
            mName = name;
        } else {
            mName = context.getString(R.string.generic_remote_name);
        }
!!!13412364.java!!!	PairedRemote(in certificateId : String, inout hasName : boolean, in name : String)
        mCertificateId = certificateId;
        mHasName = hasName;
        mName = name;
!!!13412492.java!!!	getCertificateId() : String
        return mCertificateId;
!!!13412620.java!!!	hasName() : boolean
        return mHasName;
!!!13412748.java!!!	getName() : CharSequence
        return mName;
!!!13412876.java!!!	serialize() : String
        JSONArray array = new JSONArray();
        array.put(mCertificateId);
        array.put(mHasName);
        array.put(mName);
        return array.toString();
!!!13413004.java!!!	marshall(in encoded : String) : PairedRemote
        try {
            JSONArray array = new JSONArray(encoded);
            return new PairedRemote(array.getString(0),
                    array.getBoolean(1),
                    array.getString(2));
        } catch (JSONException e) {
            return null;
        }
!!!13413132.java!!!	toString() : String
        return mName;
!!!13413260.java!!!	equals(inout other : Object) : boolean
        if (this == other) {
            return true;
        }
        if (!(other instanceof PairedRemote)) {
            return false;
        }
        return mCertificateId.equals(((PairedRemote) other).mCertificateId);
!!!13413388.java!!!	hashCode() : int
        return mCertificateId.hashCode();
