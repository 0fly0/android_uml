class ByteArrayBuilder
!!!4814732.java!!!	ByteArrayBuilder()
        mChunks = new LinkedList<Chunk>();
!!!4814860.java!!!	append(inout array : byte, in offset : int, in length : int) : void
        while (length > 0) {
            Chunk c = null;
            if (mChunks.isEmpty()) {
                c = obtainChunk(length);
                mChunks.addLast(c);
            } else {
                c = mChunks.getLast();
                if (c.mLength == c.mArray.length) {
                    c = obtainChunk(length);
                    mChunks.addLast(c);
                }
            }
            int amount = Math.min(length, c.mArray.length - c.mLength);
            System.arraycopy(array, offset, c.mArray, c.mLength, amount);
            c.mLength += amount;
            length -= amount;
            offset += amount;
        }
!!!4814988.java!!!	getFirstChunk() : Chunk
        if (mChunks.isEmpty()) return null;
        return mChunks.removeFirst();
!!!4815116.java!!!	isEmpty() : boolean
        return mChunks.isEmpty();
!!!4815244.java!!!	getByteSize() : int
        int total = 0;
        ListIterator<Chunk> it = mChunks.listIterator(0);
        while (it.hasNext()) {
            Chunk c = it.next();
            total += c.mLength;
        }
        return total;
!!!4815372.java!!!	clear() : void
        Chunk c = getFirstChunk();
        while (c != null) {
            c.release();
            c = getFirstChunk();
        }
!!!4815500.java!!!	processPoolLocked() : void
        while (true) {
            SoftReference<Chunk> entry = (SoftReference<Chunk>) sQueue.poll();
            if (entry == null) {
                break;
            }
            sPool.remove(entry);
        }
!!!4815628.java!!!	obtainChunk(in length : int) : Chunk
        // Correct a small length.
        if (length < DEFAULT_CAPACITY) {
            length = DEFAULT_CAPACITY;
        }
        synchronized (sPool) {
            // Process any queued references and remove them from the pool.
            processPoolLocked();
            if (!sPool.isEmpty()) {
                Chunk c = sPool.removeFirst().get();
                // The first item may have been queued after processPoolLocked
                // so check for null.
                if (c != null) {
                    return c;
                }
            }
            return new Chunk(length);
        }
