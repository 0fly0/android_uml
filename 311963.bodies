class CollationKeyICU
!!!1958683.java!!!	CollationKeyICU(inout source : String, inout bytes : byte)
        super(source);
        this.bytes = bytes;
!!!1958811.java!!!	compareTo(inout other : CollationKey) : int
        // Get the bytes from the other collation key.
        final byte[] rhsBytes;
        if (other instanceof CollationKeyICU) {
            rhsBytes = ((CollationKeyICU) other).bytes;
        } else {
            rhsBytes = other.toByteArray();
        }

        if (bytes == null || bytes.length == 0) {
            if (rhsBytes == null || rhsBytes.length == 0) {
                return 0;
            }
            return -1;
        } else {
            if (rhsBytes == null || rhsBytes.length == 0) {
                return 1;
            }
        }

        int count = Math.min(bytes.length, rhsBytes.length);
        for (int i = 0; i < count; ++i) {
            int s = bytes[i] & 0xff;
            int t = rhsBytes[i] & 0xff;
            if (s < t) {
                return -1;
            }
            if (s > t) {
                return 1;
            }
        }
        if (bytes.length < rhsBytes.length) {
            return -1;
        }
        if (bytes.length > rhsBytes.length) {
            return 1;
        }
        return 0;
!!!1958939.java!!!	equals(inout object : Object) : boolean
        if (object == this) {
            return true;
        }
        if (!(object instanceof CollationKey)) {
            return false;
        }
        return compareTo((CollationKey) object) == 0;
!!!1959067.java!!!	hashCode() : int
        if (hashCode == 0) {
            if (bytes != null && bytes.length != 0) {
                int len = bytes.length;
                int inc = ((len - 32) / 32) + 1;
                for (int i = 0; i < len;) {
                    hashCode = (hashCode * 37) + bytes[i];
                    i += inc;
                }
            }
            if (hashCode == 0) {
                hashCode = 1;
            }
        }
        return hashCode;
!!!1959195.java!!!	toByteArray() : byte
        if (bytes == null || bytes.length == 0) {
            return null;
        }
        return bytes.clone();
