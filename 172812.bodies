class Pipe
!!!338060.cpp!!!	~Pipe()
    ALOG_ASSERT(android_atomic_acquire_load(&mReaders) == 0);
    free(mBuffer);
!!!338316.cpp!!!	write(in buffer : void, in count : size_t) : ssize_t
    // count == 0 is unlikely and not worth checking for
    if (CC_UNLIKELY(!mNegotiated)) {
        return NEGOTIATE;
    }
    // write() is not multi-thread safe w.r.t. itself, so no mutex or atomic op needed to read mRear
    size_t rear = mRear & (mMaxFrames - 1);
    size_t written = mMaxFrames - rear;
    if (CC_LIKELY(written > count)) {
        written = count;
    }
    memcpy((char *) mBuffer + (rear << mBitShift), buffer, written << mBitShift);
    if (CC_UNLIKELY(rear + written == mMaxFrames)) {
        if (CC_UNLIKELY((count -= written) > rear)) {
            count = rear;
        }
        if (CC_LIKELY(count > 0)) {
            memcpy(mBuffer, (char *) buffer + (written << mBitShift), count << mBitShift);
            written += count;
        }
    }
    android_atomic_release_store(written + mRear, &mRear);
    mFramesWritten += written;
    return written;
