class OmxJpegImageDecoder
!!!1198732.cpp!!!	OmxJpegImageDecoder()
    status_t err = mClient.connect();
    CHECK_EQ(err, (status_t)OK);
!!!1198860.cpp!!!	~OmxJpegImageDecoder()
    mClient.disconnect();
!!!1199116.cpp!!!	onDecode(inout stream : SkStream, inout bm : SkBitmap, in mode : Mode) : bool
    sp<MediaSource> source = prepareMediaSource(stream);
    sp<MetaData> meta = source->getFormat();
    int width;
    int height;
    meta->findInt32(kKeyWidth, &width);
    meta->findInt32(kKeyHeight, &height);
    configBitmapSize(bm, getPrefConfig(k32Bit_SrcDepth, false), width, height);

    // mode == DecodeBounds
    if (mode == SkImageDecoder::kDecodeBounds_Mode) {
        return true;
    }

    // mode == DecodePixels
    if (!this->allocPixelRef(bm, NULL)) {
        ALOGI("Cannot allocPixelRef()!");
        return false;
    }

    sp<MediaSource> decoder = getDecoder(&mClient, source);
    return decodeSource(decoder, source, bm);
!!!1199244.cpp!!!	prepareMediaSource(inout stream : SkStream) : JPEGSource
    DataSource::RegisterDefaultSniffers();
    sp<DataSource> dataSource = new StreamSource(stream);
    return new JPEGSource(dataSource);
!!!1199372.cpp!!!	getDecoder(inout client : OMXClient, in source : sp<MediaSource>) : sp<MediaSource>
    sp<MetaData> meta = source->getFormat();
    sp<MediaSource> decoder = OMXCodec::Create(
            client->interface(), meta, false /* createEncoder */, source);

    CHECK(decoder != NULL);
    return decoder;
!!!1199500.cpp!!!	decodeSource(in decoder : sp<MediaSource>, in source : sp<MediaSource>, inout bm : SkBitmap) : bool
    status_t rt = decoder->start();
    if (rt != OK) {
        ALOGE("Cannot start OMX Decoder!");
        return false;
    }
    int64_t startTime = getNowUs();
    MediaBuffer *buffer;

    // decode source
    status_t err = decoder->read(&buffer, NULL);
    int64_t duration = getNowUs() - startTime;

    if (err != OK) {
        CHECK(buffer == NULL);
    }
    printf("Duration in decoder->read(): %.1f (msecs). \n",
                duration / 1E3 );

    /* Mark the code for now, since we attend to copy buffer to SkBitmap.
    // Install pixelRef to Bitmap.
    installPixelRef(buffer, decoder, bm);*/

    // Copy pixels from buffer to bm.
    // May need to check buffer->rawBytes() == bm->rawBytes().
    CHECK_EQ(buffer->size(), bm->getSize());
    memcpy(bm->getPixels(), buffer->data(), buffer->size());
    buffer->release();
    decoder->stop();

    return true;
!!!1199628.cpp!!!	installPixelRef(inout buffer : MediaBuffer, in decoder : sp<MediaSource>, inout bm : SkBitmap) : void

    // set bm's pixelref based on the data in buffer.
    SkAutoLockPixels alp(*bm);
    SkPixelRef* pr = new SkOmxPixelRef(NULL, buffer, decoder);
    bm->setPixelRef(pr)->unref();
    bm->lockPixels();
    return;
!!!1199756.cpp!!!	configBitmapSize(inout bm : SkBitmap, in pref : SkBitmap::Config, in width : int, in height : int) : void
    bm->setConfig(getColorSpaceConfig(pref), width, height);
    bm->setIsOpaque(true);
!!!1199884.cpp!!!	getColorSpaceConfig(in pref : SkBitmap::Config) : SkBitmap::Config

    // Set the color space to ARGB_8888 for now
    // because of limitation in hardware support.
    return SkBitmap::kARGB_8888_Config;
