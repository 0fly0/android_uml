class RandomAccessFile
!!!258971.java!!!	RandomAccessFile(inout file : File, inout mode : String)
        int flags;
        if (mode.equals("r")) {
            flags = O_RDONLY;
        } else if (mode.equals("rw") || mode.equals("rws") || mode.equals("rwd")) {
            flags = O_RDWR | O_CREAT;
            if (mode.equals("rws")) {
                // Sync file and metadata with every write
                syncMetadata = true;
            } else if (mode.equals("rwd")) {
                // Sync file, but not necessarily metadata
                flags |= O_SYNC;
            }
        } else {
            throw new IllegalArgumentException("Invalid mode: " + mode);
        }
        this.mode = flags;
        this.fd = IoBridge.open(file.getAbsolutePath(), flags);

        // if we are in "rws" mode, attempt to sync file+metadata
        if (syncMetadata) {
            try {
                fd.sync();
            } catch (IOException e) {
                // Ignored
            }
        }
        guard.open("close");
!!!259099.java!!!	RandomAccessFile(inout fileName : String, inout mode : String)
        this(new File(fileName), mode);
!!!259227.java!!!	close() : void
        guard.close();
        synchronized (this) {
            if (channel != null && channel.isOpen()) {
                channel.close();
                channel = null;
            }
            IoUtils.close(fd);
        }
!!!259355.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
            close();
        } finally {
            super.finalize();
        }
!!!259483.java!!!	getChannel() : FileChannel
        if(channel == null) {
            channel = NioUtils.newFileChannel(this, fd, mode);
        }
        return channel;
!!!259611.java!!!	getFD() : FileDescriptor
        return fd;
!!!259739.java!!!	getFilePointer() : long
        try {
            return Libcore.os.lseek(fd, 0L, SEEK_CUR);
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsIOException();
        }
!!!259867.java!!!	length() : long
        try {
            return Libcore.os.fstat(fd).st_size;
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsIOException();
        }
!!!259995.java!!!	read() : int
        return (read(scratch, 0, 1) != -1) ? scratch[0] & 0xff : -1;
!!!260123.java!!!	read(inout buffer : byte) : int
        return read(buffer, 0, buffer.length);
!!!260251.java!!!	read(inout buffer : byte, in byteOffset : int, in byteCount : int) : int
        return IoBridge.read(fd, buffer, byteOffset, byteCount);
!!!260379.java!!!	readBoolean() : boolean
        int temp = this.read();
        if (temp < 0) {
            throw new EOFException();
        }
        return temp != 0;
!!!260507.java!!!	readByte() : byte
        int temp = this.read();
        if (temp < 0) {
            throw new EOFException();
        }
        return (byte) temp;
!!!260635.java!!!	readChar() : char
        return (char) readShort();
!!!260763.java!!!	readDouble() : double
        return Double.longBitsToDouble(readLong());
!!!260891.java!!!	readFloat() : float
        return Float.intBitsToFloat(readInt());
!!!261019.java!!!	readFully(inout dst : byte) : void
        readFully(dst, 0, dst.length);
!!!261147.java!!!	readFully(inout dst : byte, in offset : int, in byteCount : int) : void
        Arrays.checkOffsetAndCount(dst.length, offset, byteCount);
        while (byteCount > 0) {
            int result = read(dst, offset, byteCount);
            if (result < 0) {
                throw new EOFException();
            }
            offset += result;
            byteCount -= result;
        }
!!!261275.java!!!	readInt() : int
        readFully(scratch, 0, SizeOf.INT);
        return Memory.peekInt(scratch, 0, ByteOrder.BIG_ENDIAN);
!!!261403.java!!!	readLine() : String
        StringBuilder line = new StringBuilder(80); // Typical line length
        boolean foundTerminator = false;
        long unreadPosition = 0;
        while (true) {
            int nextByte = read();
            switch (nextByte) {
                case -1:
                    return line.length() != 0 ? line.toString() : null;
                case (byte) '\r':
                    if (foundTerminator) {
                        seek(unreadPosition);
                        return line.toString();
                    }
                    foundTerminator = true;
                    /* Have to be able to peek ahead one byte */
                    unreadPosition = getFilePointer();
                    break;
                case (byte) '\n':
                    return line.toString();
                default:
                    if (foundTerminator) {
                        seek(unreadPosition);
                        return line.toString();
                    }
                    line.append((char) nextByte);
            }
        }
!!!261531.java!!!	readLong() : long
        readFully(scratch, 0, SizeOf.LONG);
        return Memory.peekLong(scratch, 0, ByteOrder.BIG_ENDIAN);
!!!261659.java!!!	readShort() : short
        readFully(scratch, 0, SizeOf.SHORT);
        return Memory.peekShort(scratch, 0, ByteOrder.BIG_ENDIAN);
!!!261787.java!!!	readUnsignedByte() : int
        int temp = this.read();
        if (temp < 0) {
            throw new EOFException();
        }
        return temp;
!!!261915.java!!!	readUnsignedShort() : int
        return ((int) readShort()) & 0xffff;
!!!262043.java!!!	readUTF() : String
        int utfSize = readUnsignedShort();
        if (utfSize == 0) {
            return "";
        }
        byte[] buf = new byte[utfSize];
        if (read(buf, 0, buf.length) != buf.length) {
            throw new EOFException();
        }
        return ModifiedUtf8.decode(buf, new char[utfSize], 0, utfSize);
!!!262171.java!!!	seek(in offset : long) : void
        if (offset < 0) {
            throw new IOException("offset < 0: " + offset);
        }
        try {
            Libcore.os.lseek(fd, offset, SEEK_SET);
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsIOException();
        }
!!!262299.java!!!	setLength(in newLength : long) : void
        if (newLength < 0) {
            throw new IllegalArgumentException("newLength < 0");
        }
        try {
            Libcore.os.ftruncate(fd, newLength);
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsIOException();
        }

        long filePointer = getFilePointer();
        if (filePointer > newLength) {
            seek(newLength);
        }

        // if we are in "rws" mode, attempt to sync file+metadata
        if (syncMetadata) {
            fd.sync();
        }
!!!262427.java!!!	skipBytes(in count : int) : int
        if (count > 0) {
            long currentPos = getFilePointer(), eof = length();
            int newCount = (int) ((currentPos + count > eof) ? eof - currentPos : count);
            seek(currentPos + newCount);
            return newCount;
        }
        return 0;
!!!262555.java!!!	write(inout buffer : byte) : void
        write(buffer, 0, buffer.length);
!!!262683.java!!!	write(inout buffer : byte, in byteOffset : int, in byteCount : int) : void
        IoBridge.write(fd, buffer, byteOffset, byteCount);
        // if we are in "rws" mode, attempt to sync file+metadata
        if (syncMetadata) {
            fd.sync();
        }
!!!262811.java!!!	write(in oneByte : int) : void
        scratch[0] = (byte) (oneByte & 0xff);
        write(scratch, 0, 1);
!!!262939.java!!!	writeBoolean(inout val : boolean) : void
        write(val ? 1 : 0);
!!!263067.java!!!	writeByte(in val : int) : void
        write(val & 0xFF);
!!!263195.java!!!	writeBytes(inout str : String) : void
        byte[] bytes = new byte[str.length()];
        for (int index = 0; index < str.length(); index++) {
            bytes[index] = (byte) (str.charAt(index) & 0xFF);
        }
        write(bytes);
!!!263323.java!!!	writeChar(in val : int) : void
        writeShort(val);
!!!263451.java!!!	writeChars(inout str : String) : void
        write(str.getBytes("UTF-16BE"));
!!!263579.java!!!	writeDouble(in val : double) : void
        writeLong(Double.doubleToLongBits(val));
!!!263707.java!!!	writeFloat(in val : float) : void
        writeInt(Float.floatToIntBits(val));
!!!263835.java!!!	writeInt(in val : int) : void
        Memory.pokeInt(scratch, 0, val, ByteOrder.BIG_ENDIAN);
        write(scratch, 0, SizeOf.INT);
!!!263963.java!!!	writeLong(in val : long) : void
        Memory.pokeLong(scratch, 0, val, ByteOrder.BIG_ENDIAN);
        write(scratch, 0, SizeOf.LONG);
!!!264091.java!!!	writeShort(in val : int) : void
        Memory.pokeShort(scratch, 0, (short) val, ByteOrder.BIG_ENDIAN);
        write(scratch, 0, SizeOf.SHORT);
!!!264219.java!!!	writeUTF(inout str : String) : void
        write(ModifiedUtf8.encode(str));
