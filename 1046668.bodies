class EditableInputConnection
!!!5670284.java!!!	EditableInputConnection(inout textview : TextView)
        super(textview, true);
        mTextView = textview;
!!!5670412.java!!!	getEditable() : Editable
        TextView tv = mTextView;
        if (tv != null) {
            return tv.getEditableText();
        }
        return null;
!!!5670540.java!!!	beginBatchEdit() : boolean
        synchronized(this) {
            if (mBatchEditNesting >= 0) {
                mTextView.beginBatchEdit();
                mBatchEditNesting++;
                return true;
            }
        }
        return false;
!!!5670668.java!!!	endBatchEdit() : boolean
        synchronized(this) {
            if (mBatchEditNesting > 0) {
                // When the connection is reset by the InputMethodManager and reportFinish
                // is called, some endBatchEdit calls may still be asynchronously received from the
                // IME. Do not take these into account, thus ensuring that this IC's final
                // contribution to mTextView's nested batch edit count is zero.
                mTextView.endBatchEdit();
                mBatchEditNesting--;
                return true;
            }
        }
        return false;
!!!5670796.java!!!	reportFinish() : void
        super.reportFinish();

        synchronized(this) {
            while (mBatchEditNesting > 0) {
                endBatchEdit();
            }
            // Will prevent any further calls to begin or endBatchEdit
            mBatchEditNesting = -1;
        }
!!!5670924.java!!!	clearMetaKeyStates(in states : int) : boolean
        final Editable content = getEditable();
        if (content == null) return false;
        KeyListener kl = mTextView.getKeyListener();
        if (kl != null) {
            try {
                kl.clearMetaKeyState(mTextView, content, states);
            } catch (AbstractMethodError e) {
                // This is an old listener that doesn't implement the
                // new method.
            }
        }
        return true;
!!!5671052.java!!!	commitCompletion(inout text : CompletionInfo) : boolean
        if (DEBUG) Log.v(TAG, "commitCompletion " + text);
        mTextView.beginBatchEdit();
        mTextView.onCommitCompletion(text);
        mTextView.endBatchEdit();
        return true;
!!!5671180.java!!!	commitCorrection(inout correctionInfo : CorrectionInfo) : boolean
        if (DEBUG) Log.v(TAG, "commitCorrection" + correctionInfo);
        mTextView.beginBatchEdit();
        mTextView.onCommitCorrection(correctionInfo);
        mTextView.endBatchEdit();
        return true;
!!!5671308.java!!!	performEditorAction(in actionCode : int) : boolean
        if (DEBUG) Log.v(TAG, "performEditorAction " + actionCode);
        mTextView.onEditorAction(actionCode);
        return true;
!!!5671436.java!!!	performContextMenuAction(in id : int) : boolean
        if (DEBUG) Log.v(TAG, "performContextMenuAction " + id);
        mTextView.beginBatchEdit();
        mTextView.onTextContextMenuItem(id);
        mTextView.endBatchEdit();
        return true;
!!!5671564.java!!!	getExtractedText(inout request : ExtractedTextRequest, in flags : int) : ExtractedText
        if (mTextView != null) {
            ExtractedText et = new ExtractedText();
            if (mTextView.extractText(request, et)) {
                if ((flags&GET_EXTRACTED_TEXT_MONITOR) != 0) {
                    mTextView.setExtracting(request);
                }
                return et;
            }
        }
        return null;
!!!5671692.java!!!	performPrivateCommand(in action : String, inout data : Bundle) : boolean
        mTextView.onPrivateIMECommand(action, data);
        return true;
!!!5671820.java!!!	commitText(inout text : CharSequence, in newCursorPosition : int) : boolean
        if (mTextView == null) {
            return super.commitText(text, newCursorPosition);
        }
        if (text instanceof Spanned) {
            Spanned spanned = ((Spanned) text);
            SuggestionSpan[] spans = spanned.getSpans(0, text.length(), SuggestionSpan.class);
            mIMM.registerSuggestionSpansForNotification(spans);
        }

        mTextView.resetErrorChangedFlag();
        boolean success = super.commitText(text, newCursorPosition);
        mTextView.hideErrorIfUnchanged();

        return success;
