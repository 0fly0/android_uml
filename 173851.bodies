class Manifest
!!!1696923.java!!!	getByteArrayInputStreamField(inout name : String) : Field
        try {
            Field f = ByteArrayInputStream.class.getDeclaredField(name);
            f.setAccessible(true);
            return f;
        } catch (Exception ex) {
            throw new AssertionError(ex);
        }
!!!1697307.java!!!	Manifest(inout is : InputStream)
        read(is);
!!!1697435.java!!!	Manifest(inout man : Manifest)
        mainAttributes = (Attributes) man.mainAttributes.clone();
        entries = (HashMap<String, Attributes>) ((HashMap<String, Attributes>) man
                .getEntries()).clone();
!!!1697563.java!!!	Manifest(inout is : InputStream, inout readChunks : boolean)
        if (readChunks) {
            chunks = new HashMap<String, Chunk>();
        }
        read(is);
!!!1697691.java!!!	clear() : void
        entries.clear();
        mainAttributes.clear();
!!!1697819.java!!!	getAttributes(inout name : String) : Attributes
        return getEntries().get(name);
!!!1697947.java!!!	getEntries() : Map
        return entries;
!!!1698075.java!!!	getMainAttributes() : Attributes
        return mainAttributes;
!!!1698203.java!!!	clone() : Object
        return new Manifest(this);
!!!1698331.java!!!	write(inout os : OutputStream) : void
        write(this, os);
!!!1698459.java!!!	read(inout is : InputStream) : void
        byte[] buf;
        if (is instanceof ByteArrayInputStream) {
            buf = exposeByteArrayInputStreamBytes((ByteArrayInputStream) is);
        } else {
            buf = Streams.readFullyNoClose(is);
        }

        if (buf.length == 0) {
            return;
        }

        // a workaround for HARMONY-5662
        // replace EOF and NUL with another new line
        // which does not trigger an error
        byte b = buf[buf.length - 1];
        if (b == 0 || b == 26) {
            buf[buf.length - 1] = '\n';
        }

        InitManifest im = new InitManifest(buf, mainAttributes);
        mainEnd = im.getPos();
        im.initEntries(entries, chunks);
!!!1698587.java!!!	exposeByteArrayInputStreamBytes(inout bais : ByteArrayInputStream) : byte
        byte[] buffer;
        synchronized (bais) {
            byte[] buf;
            int pos;
            try {
                buf = (byte[]) BAIS_BUF.get(bais);
                pos = BAIS_POS.getInt(bais);
            } catch (IllegalAccessException iae) {
                throw new AssertionError(iae);
            }
            int available = bais.available();
            if (pos == 0 && buf.length == available) {
                buffer = buf;
            } else {
                buffer = new byte[available];
                System.arraycopy(buf, pos, buffer, 0, available);
            }
            bais.skip(available);
        }
        return buffer;
!!!1698715.java!!!	hashCode() : int
        return mainAttributes.hashCode() ^ getEntries().hashCode();
!!!1698843.java!!!	equals(inout o : Object) : boolean
        if (o == null) {
            return false;
        }
        if (o.getClass() != this.getClass()) {
            return false;
        }
        if (!mainAttributes.equals(((Manifest) o).mainAttributes)) {
            return false;
        }
        return getEntries().equals(((Manifest) o).getEntries());
!!!1698971.java!!!	getChunk(inout name : String) : Chunk
        return chunks.get(name);
!!!1699099.java!!!	removeChunks() : void
        chunks = null;
!!!1699227.java!!!	getMainAttributesEnd() : int
        return mainEnd;
!!!1699355.java!!!	write(inout manifest : Manifest, inout out : OutputStream) : void
        CharsetEncoder encoder = Charsets.UTF_8.newEncoder();
        ByteBuffer buffer = ByteBuffer.allocate(LINE_LENGTH_LIMIT);

        Attributes.Name versionName = Attributes.Name.MANIFEST_VERSION;
        String version = manifest.mainAttributes.getValue(versionName);
        if (version == null) {
            versionName = Attributes.Name.SIGNATURE_VERSION;
            version = manifest.mainAttributes.getValue(versionName);
        }
        if (version != null) {
            writeEntry(out, versionName, version, encoder, buffer);
            Iterator<?> entries = manifest.mainAttributes.keySet().iterator();
            while (entries.hasNext()) {
                Attributes.Name name = (Attributes.Name) entries.next();
                if (!name.equals(versionName)) {
                    writeEntry(out, name, manifest.mainAttributes.getValue(name), encoder, buffer);
                }
            }
        }
        out.write(LINE_SEPARATOR);
        Iterator<String> i = manifest.getEntries().keySet().iterator();
        while (i.hasNext()) {
            String key = i.next();
            writeEntry(out, NAME_ATTRIBUTE, key, encoder, buffer);
            Attributes attributes = manifest.entries.get(key);
            Iterator<?> entries = attributes.keySet().iterator();
            while (entries.hasNext()) {
                Attributes.Name name = (Attributes.Name) entries.next();
                writeEntry(out, name, attributes.getValue(name), encoder, buffer);
            }
            out.write(LINE_SEPARATOR);
        }
!!!1699483.java!!!	writeEntry(inout os : OutputStream, inout name : Name, inout value : String, inout encoder : CharsetEncoder, inout bBuf : ByteBuffer) : void
        String nameString = name.getName();
        os.write(nameString.getBytes(Charsets.US_ASCII));
        os.write(VALUE_SEPARATOR);

        encoder.reset();
        bBuf.clear().limit(LINE_LENGTH_LIMIT - nameString.length() - 2);

        CharBuffer cBuf = CharBuffer.wrap(value);

        while (true) {
            CoderResult r = encoder.encode(cBuf, bBuf, true);
            if (CoderResult.UNDERFLOW == r) {
                r = encoder.flush(bBuf);
            }
            os.write(bBuf.array(), bBuf.arrayOffset(), bBuf.position());
            os.write(LINE_SEPARATOR);
            if (CoderResult.UNDERFLOW == r) {
                break;
            }
            os.write(' ');
            bBuf.clear().limit(LINE_LENGTH_LIMIT - 1);
        }
