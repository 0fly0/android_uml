class LayerScreenshot
!!!1761804.cpp!!!	~LayerScreenshot()
    if (mTextureName) {
        mFlinger->deleteTextureAsync(mTextureName);
    }
!!!1761932.cpp!!!	capture() : status_t
    GLfloat u, v;
    status_t result = mFlinger->renderScreenToTexture(0, &mTextureName, &u, &v);
    if (result != NO_ERROR) {
        return result;
    }
    initTexture(u, v);

    // Currently screenshot always comes from the default display
    mIsSecure = mFlinger->getDefaultDisplayDevice()->getSecureLayerVisible();
    
    return NO_ERROR;
!!!1762060.cpp!!!	initStates(in w : uint32_t, in h : uint32_t, in flags : uint32_t) : void
    LayerBaseClient::initStates(w, h, flags);
    if (!(flags & ISurfaceComposerClient::eHidden)) {
        capture();
    }
    if (flags & ISurfaceComposerClient::eSecure) {
        ALOGW("ignoring surface flag eSecure - LayerScreenshot is considered "
                "secure iff it captures the contents of a secure surface.");
    }
!!!1762188.cpp!!!	doTransaction(in flags : uint32_t) : uint32_t
    const LayerBase::State& draw(drawingState());
    const LayerBase::State& curr(currentState());

    if (draw.flags & layer_state_t::eLayerHidden) {
        if (!(curr.flags & layer_state_t::eLayerHidden)) {
            // we're going from hidden to visible
            status_t err = captureLocked(curr.layerStack);
            if (err != NO_ERROR) {
                ALOGW("createScreenshotSurface failed (%s)", strerror(-err));
            }
        }
    } else if (curr.flags & layer_state_t::eLayerHidden) {
        // we're going from visible to hidden
        if (mTextureName) {
            glDeleteTextures(1, &mTextureName);
            mTextureName = 0;
        }
    }
    return LayerBaseClient::doTransaction(flags);
!!!1762316.cpp!!!	onDraw(in hw : sp<const DisplayDevice>, in clip : Region) : void
    const State& s(drawingState());
    if (s.alpha>0) {
        const GLfloat alpha = s.alpha/255.0f;
        const uint32_t fbHeight = hw->getHeight();

        if (s.alpha == 0xFF) {
            glDisable(GL_BLEND);
            glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
        } else {
            glEnable(GL_BLEND);
            glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
            glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
        }

        GLuint texName = mTextureName;
        if (isSecure() && !hw->isSecure()) {
            texName = mFlinger->getProtectedTexName();
        }

        LayerMesh mesh;
        computeGeometry(hw, &mesh);

        glColor4f(alpha, alpha, alpha, alpha);

        glDisable(GL_TEXTURE_EXTERNAL_OES);
        glEnable(GL_TEXTURE_2D);

        glBindTexture(GL_TEXTURE_2D, texName);
        glMatrixMode(GL_TEXTURE);
        glLoadIdentity();
        glMatrixMode(GL_MODELVIEW);

        glEnableClientState(GL_TEXTURE_COORD_ARRAY);
        glTexCoordPointer(2, GL_FLOAT, 0, mTexCoords);
        glVertexPointer(2, GL_FLOAT, 0, mesh.getVertices());
        glDrawArrays(GL_TRIANGLE_FAN, 0, mesh.getVertexCount());

        glDisable(GL_BLEND);
        glDisable(GL_TEXTURE_2D);
        glDisableClientState(GL_TEXTURE_COORD_ARRAY);
    }
!!!1763084.cpp!!!	captureLocked(in layerStack : int32_t) : status_t
    GLfloat u, v;
    status_t result = mFlinger->renderScreenToTextureLocked(layerStack,
            &mTextureName, &u, &v);
    if (result != NO_ERROR) {
        return result;
    }
    initTexture(u, v);

    // Currently screenshot always comes from the default display
    mIsSecure = mFlinger->getDefaultDisplayDevice()->getSecureLayerVisible();

    return NO_ERROR;
!!!1763212.cpp!!!	initTexture(in u : GLfloat, in v : GLfloat) : void
    glBindTexture(GL_TEXTURE_2D, mTextureName);
    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    mTexCoords[0] = 0;         mTexCoords[1] = v;
    mTexCoords[2] = 0;         mTexCoords[3] = 0;
    mTexCoords[4] = u;         mTexCoords[5] = 0;
    mTexCoords[6] = u;         mTexCoords[7] = v;
