class GenerationCache
!!!10286220.cpp!!!	~GenerationCache()
    clear();
!!!10286348.cpp!!!	setOnEntryRemovedListener(inout listener : OnEntryRemoved<K, V>) : void
    mListener = listener;
!!!10286476.cpp!!!	size() : size_t
    return mCache.size();
!!!10286604.cpp!!!	clear() : void
    if (mListener) {
        for (uint32_t i = 0; i < mCache.size(); i++) {
            sp<Entry<K, V> > entry = mCache.valueAt(i);
            if (mListener) {
                (*mListener)(entry->key, entry->value);
            }
        }
    }
    mCache.clear();
    mYoungest.clear();
    mOldest.clear();
!!!10286732.cpp!!!	contains(in key : K) : bool
    return mCache.indexOfKey(key) >= 0;
!!!10286860.cpp!!!	getKeyAt(in index : size_t) : K
    return mCache.keyAt(index);
!!!10286988.cpp!!!	getValueAt(in index : size_t) : V
    return mCache.valueAt(index)->value;
!!!10287116.cpp!!!	get(in key : K) : V
    ssize_t index = mCache.indexOfKey(key);
    if (index >= 0) {
        const sp<Entry<K, V> >& entry = mCache.valueAt(index);
        detachFromCache(entry);
        attachToCache(entry);
        return entry->value;
    }

    return mNullValue;
!!!10287244.cpp!!!	put(in key : K, in value : V) : bool
    if (mMaxCapacity != kUnlimitedCapacity && mCache.size() >= mMaxCapacity) {
        removeOldest();
    }

    ssize_t index = mCache.indexOfKey(key);
    if (index < 0) {
        sp<Entry<K, V> > entry = new Entry<K, V>(key, value);
        mCache.add(key, entry);
        attachToCache(entry);
        return true;
    }

    return false;
!!!10287372.cpp!!!	removeAt(in index : ssize_t) : void
    sp<Entry<K, V> > entry = mCache.valueAt(index);
    if (mListener) {
        (*mListener)(entry->key, entry->value);
    }
    mCache.removeItemsAt(index, 1);
    detachFromCache(entry);
!!!10287500.cpp!!!	remove(in key : K) : bool
    ssize_t index = mCache.indexOfKey(key);
    if (index >= 0) {
        removeAt(index);
        return true;
    }

    return false;
!!!10287628.cpp!!!	removeOldest() : bool
    if (mOldest.get()) {
        ssize_t index = mCache.indexOfKey(mOldest->key);
        if (index >= 0) {
            removeAt(index);
            return true;
        }
        ALOGE("GenerationCache: removeOldest failed to find the item in the cache "
                "with the given key, but we know it must be in there.  "
                "Is the key comparator kaput?");
    }

    return false;
!!!10287756.cpp!!!	attachToCache(in entry : sp<Entry<K, V> >) : void
    if (!mYoungest.get()) {
        mYoungest = mOldest = entry;
    } else {
        entry->parent = mYoungest;
        mYoungest->child = entry;
        mYoungest = entry;
    }
!!!10287884.cpp!!!	detachFromCache(in entry : sp<Entry<K, V> >) : void
    if (entry->parent.get()) {
        entry->parent->child = entry->child;
    } else {
        mOldest = entry->child;
    }

    if (entry->child.get()) {
        entry->child->parent = entry->parent;
    } else {
        mYoungest = entry->parent;
    }

    entry->parent.clear();
    entry->child.clear();
