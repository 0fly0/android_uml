class MoreItemsView
!!!13445004.java!!!	onDestroyView() : void
        mDataProvider.unregisterObserver(mContentObserver);
        if (mTask != null) {
            mTask.cancel(true);
        }
        mPreferences.unregisterOnSharedPreferenceChangeListener(mPreferenceChangeListener);
        super.onDestroyView();
!!!13445132.java!!!	onStart() : void
        super.onStart();
        GridView view = (GridView) getView().findViewById(R.id.grid_more_items);
        AnimatedSelector gridSelector = (AnimatedSelector) view.getSelector();
        if (view != null && view.hasFocus() && !view.isInTouchMode()) {
            // This happens if you launch an app and then come back to this screen.
            gridSelector.ensureViewVisible();
        }
        mPreferences.registerOnSharedPreferenceChangeListener(mPreferenceChangeListener);
!!!13445260.java!!!	onActivityCreated(inout savedInstanceState : Bundle) : void
        super.onActivityCreated(savedInstanceState);
        mDataProvider = ((LauncherApp) getActivity().getApplication()).getDataProvider();
        Handler mHandler = new Handler();
        mContentObserver = new ContentObserver(mHandler) {
            @Override
            public void onChange(boolean selfChange) {
                super.onChange(selfChange);
                loadMoreItems();
            }
        };
        mDataProvider.registerObserver(mContentObserver);
        mEventLogger = new EventLogger(getActivity().getContentResolver());
        mAdapter = new ArrayAdapter<LauncherItemInfo>(getActivity(), R.layout.more_items_item,
                R.id.label) {

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                View view = super.getView(position, convertView, parent);
                ImageView icon = (ImageView) view.findViewById(R.id.icon);
                TextView label = (TextView) view.findViewById(R.id.label);
                LauncherItemInfo info = getItem(position);
                if(getActivity() != null) {
                    Drawable drawable = info.getIcon(getActivity());
                    if (drawable == null) {
                        drawable = ((LauncherApp) getActivity().getApplication()).getIconCache().
                                getDefaultIcon();
                    }
                    icon.setImageDrawable(drawable);
                } else {
                    Log.e(TAG, "getActivity() should not be null here.");
                }
                label.setText(info.getTitle());
                view.setTag(info.getIntent());
                return view;
            }
        };

        View selector = getView().findViewById(R.id.selector);
        final GridView view = (GridView) getView().findViewById(R.id.grid_more_items);
        final AnimatedSelector animatedSelector = new AnimatedSelector(selector,
                view.getSelector());
        view.setSelector(animatedSelector);
        // Disable scrollbar fade because its redraw makes the selector jerky.
        view.setScrollbarFadingEnabled(false);
        view.setAdapter(mAdapter);
        view.setOnItemClickListener(new OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                    int position, long id) {
                Intent intent = (Intent) view.getTag();
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                        | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
                mEventLogger.logLaunchFromAllItems();
                startActivitySafely(intent);
            }
        });
        view.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                if (Keys.shouldTriggerEdit(keyCode, event)
                        && view.getSelectedView() != null) {
                    view.showContextMenuForChild(view.getSelectedView());
                    return true;
                }
                return false;
            }
        });
        view.setOnFocusChangeListener(new View.OnFocusChangeListener() {

            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    animatedSelector.ensureViewVisible();
                } else {
                    animatedSelector.hideView();
                }
            }
        });

        view.setOnItemSelectedListener(new OnItemSelectedListener() {

            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                animatedSelector.ensureViewVisible();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                animatedSelector.hideView();
            }
        });

        view.setOnGenericMotionListener(new View.OnGenericMotionListener() {

            @Override
            public boolean onGenericMotion(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_SCROLL
                        && !view.isInTouchMode()) {
                    float vscroll = event.getAxisValue(MotionEvent.AXIS_VSCROLL);
                    if (vscroll != 0) {
                        animatedSelector.hideView();
                    }
                }
                return false;
            }
        });

        setupBackButton();
        registerForContextMenu(view);
        mPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
        mPreferenceChangeListener = new OnSharedPreferenceChangeListener() {
            @Override
            public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
                if (PreferenceUtils.PREF_KEY_HIDE_APP_LIST.equals(key)) {
                    loadMoreItems();
                }
            }
        };
        view.post(new Runnable() {

            @Override
            public void run() {
                // Run this in UI thread so that there is a chance for layout to happen.
                animatedSelector.setLeftOffset(view.getLeft());
                animatedSelector.setTopOffset(view.getTop());
            }
        });
        loadMoreItems();
!!!13445388.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        View v = inflater.inflate(R.layout.more_items, container, false);
        return v;
!!!13445516.java!!!	onCreateContextMenu(inout menu : ContextMenu, inout v : View, inout menuInfo : ContextMenuInfo) : void
        MenuInflater inflater = getActivity().getMenuInflater();
        inflater.inflate(R.menu.more_items_context, menu);
        AdapterContextMenuInfo adapterInfo = (AdapterContextMenuInfo) menuInfo;
        LauncherItemInfo itemInfo = mAdapter.getItem(adapterInfo.position);
        if (itemInfo != null) {
            menu.setHeaderIcon(itemInfo.getIcon(getActivity()));
            menu.setHeaderTitle(itemInfo.getTitle());
            boolean isApplication = itemInfo instanceof ApplicationInfo;
            MenuItem menuItem = menu.findItem(R.id.menu_info);
            menuItem.setVisible(isApplication);
            boolean canBeHidden = false;
            if (isApplication) {
                menuItem = menu.findItem(R.id.menu_remove);
                ApplicationInfo appInfo = (ApplicationInfo) itemInfo;
                menuItem.setVisible(appInfo.isDownloadedApp());
                menuItem.setTitle(R.string.menu_uninstall);
                canBeHidden = !appInfo.isDownloadedApp();
            }
            menuItem = menu.findItem(R.id.menu_hide);
            menuItem.setVisible(canBeHidden);
        }
!!!13445644.java!!!	onContextItemSelected(inout item : MenuItem) : boolean
        AdapterContextMenuInfo adapterInfo = (AdapterContextMenuInfo) item.getMenuInfo();
        LauncherItemInfo itemInfo = mAdapter.getItem(adapterInfo.position);
        switch (item.getItemId()) {
            case R.id.menu_remove:
                removeItem(itemInfo);
                return true;
            case R.id.menu_info:
                showApplicationInfo((ApplicationInfo) itemInfo);
                return true;
            case R.id.menu_hide:
                hideApplication((ApplicationInfo) itemInfo);
                return true;
            default:
                return super.onContextItemSelected(item);
        }
!!!13445772.java!!!	hideApplication(inout itemInfo : ApplicationInfo) : void
        PreferenceUtils.setAppHidden(mPreferences, itemInfo.getIntent());
        loadMoreItems();
!!!13445900.java!!!	loadMoreItems() : void
        if (mTask != null && mTask.getStatus() != Status.FINISHED) {
            mTask.cancel(true);
        }
        mTask = new MoreItemsTask();
        mTask.execute();
!!!13446028.java!!!	removeItem(inout info : LauncherItemInfo) : void
        if (info instanceof ShortcutInfo) {
            mDataProvider.removeShortcut((ShortcutInfo) info);
        } else if (info instanceof ApplicationInfo) {
            String packageName = info.getIntent().getComponent().getPackageName();
            String className = info.getIntent().getComponent().getClassName();
            Intent intent = new Intent(Intent.ACTION_DELETE,
                    Uri.fromParts(PACKAGE_SCHEME, packageName, className));
            startActivitySafely(intent);
        }
!!!13446156.java!!!	showApplicationInfo(inout itemInfo : ApplicationInfo) : void
        String packageName = itemInfo.getIntent().getComponent().getPackageName();
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                Uri.fromParts(PACKAGE_SCHEME, packageName, null));
        startActivitySafely(intent);
!!!13446284.java!!!	setupBackButton() : void
        View back = getView().findViewById(R.id.button_back);
        back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getActivity().onBackPressed();
            }
        });
!!!13446412.java!!!	startActivitySafely(inout intent : Intent) : void
        ((HomeActivity) getActivity()).startActivitySafely(intent);
