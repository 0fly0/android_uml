class DoubleTest
!!!2703003.java!!!	testDoubleToStringUnsignedDivide() : void
        // http://b/3238333
        assertEquals("0.008", Double.toString(0.008));
        assertEquals("0.008366", Double.toString(0.008366));
        // http://code.google.com/p/android/issues/detail?id=14033
        assertEquals("0.009", Double.toString(0.009));
        // http://code.google.com/p/android/issues/detail?id=14302
        assertEquals("0.008567856012638986", Double.toString(0.008567856012638986));
        assertEquals("0.010206713752229896", Double.toString(0.010206713752229896));
!!!2703131.java!!!	testNamedDoubles() : void
        assertEquals(Double.NaN, Double.parseDouble("NaN"));
        assertEquals(Double.NaN, Double.parseDouble("-NaN"));
        assertEquals(Double.NaN, Double.parseDouble("+NaN"));
        try {
            Double.parseDouble("NNaN");
            fail();
        } catch (NumberFormatException expected) {
        }
        try {
            Double.parseDouble("NaNN");
            fail();
        } catch (NumberFormatException expected) {
        }

        assertEquals(Double.POSITIVE_INFINITY, Double.parseDouble("+Infinity"));
        assertEquals(Double.POSITIVE_INFINITY, Double.parseDouble("Infinity"));
        assertEquals(Double.NEGATIVE_INFINITY, Double.parseDouble("-Infinity"));
        try {
            Double.parseDouble("IInfinity");
            fail();
        } catch (NumberFormatException expected) {
        }
        try {
            Double.parseDouble("Infinityy");
            fail();
        } catch (NumberFormatException expected) {
        }
!!!2703259.java!!!	testSuffixParsing() : void
        String[] badStrings = { "1ff", "1fd", "1df", "1dd" };
        for (String string : badStrings) {
            try {
                Double.parseDouble(string);
                fail(string);
            } catch (NumberFormatException expected) {
            }
        }
        assertEquals(1.0, Double.parseDouble("1f"));
        assertEquals(1.0, Double.parseDouble("1d"));
        assertEquals(1.0, Double.parseDouble("1F"));
        assertEquals(1.0, Double.parseDouble("1D"));
        assertEquals(1.0, Double.parseDouble("1.D"));
        assertEquals(1.0, Double.parseDouble("1.E0D"));
        assertEquals(1.0, Double.parseDouble(".1E1D"));
!!!2703387.java!!!	testExponentParsing() : void
        String[] strings = {
            // Exponents missing integer values.
            "1.0e", "1.0e+", "1.0e-",
            // Exponents with too many explicit signs.
            "1.0e++1", "1.0e+-1", "1.0e-+1", "1.0e--1",
            // http://code.google.com/p/android/issues/detail?id=20728
            "save+", "save-",
        };
        for (String string : strings) {
            try {
                Double.parseDouble(string);
                fail(string);
            } catch (NumberFormatException expected) {
            }
        }

        assertEquals(1.0e-323, Double.parseDouble("1.0e-323"));
        assertEquals(0.0, Double.parseDouble("1.0e-324"));
        assertEquals(-1.0e-323, Double.parseDouble("-1.0e-323"));
        assertEquals(-0.0, Double.parseDouble("-1.0e-324"));

        assertEquals(1.0e+308, Double.parseDouble("1.0e+308"));
        assertEquals(Double.POSITIVE_INFINITY, Double.parseDouble("1.0e+309"));
        assertEquals(-1.0e+308, Double.parseDouble("-1.0e+308"));
        assertEquals(Double.NEGATIVE_INFINITY, Double.parseDouble("-1.0e+309"));

        assertEquals(Double.POSITIVE_INFINITY, Double.parseDouble("1.0e+9999999999"));
        assertEquals(Double.NEGATIVE_INFINITY, Double.parseDouble("-1.0e+9999999999"));
        assertEquals(0.0, Double.parseDouble("1.0e-9999999999"));
        assertEquals(-0.0, Double.parseDouble("-1.0e-9999999999"));

        assertEquals(Double.POSITIVE_INFINITY, Double.parseDouble("320.0e+2147483647"));
        assertEquals(-0.0, Double.parseDouble("-1.4e-2147483314"));
!!!2703515.java!!!	testParseLargestSubnormalDoublePrecision() : void
        assertEquals(2.2250738585072014E-308, Double.parseDouble("2.2250738585072012e-308"));
        assertEquals(2.2250738585072014E-308, Double.parseDouble("0.00022250738585072012e-304"));
        assertEquals(2.2250738585072014E-308, Double.parseDouble("00000002.2250738585072012e-308"));
        assertEquals(2.2250738585072014E-308, Double.parseDouble("2.225073858507201200000e-308"));
        assertEquals(2.2250738585072014E-308, Double.parseDouble("2.2250738585072012e-00308"));
        assertEquals(2.2250738585072014E-308, Double.parseDouble("2.22507385850720129978001e-308"));
        assertEquals(-2.2250738585072014E-308, Double.parseDouble("-2.2250738585072012e-308"));
