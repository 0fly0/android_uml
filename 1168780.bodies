class AnimatedRotateDrawable
!!!6440716.java!!!	AnimatedRotateDrawable()
        this(null, null);
!!!6440844.java!!!	AnimatedRotateDrawable(inout rotateState : AnimatedRotateState, inout res : Resources)
        mState = new AnimatedRotateState(rotateState, this, res);
        init();
!!!6440972.java!!!	init() : void
        final AnimatedRotateState state = mState;
        mIncrement = 360.0f / state.mFramesCount;
        final Drawable drawable = state.mDrawable;
        if (drawable != null) {
            drawable.setFilterBitmap(true);
            if (drawable instanceof BitmapDrawable) {
                ((BitmapDrawable) drawable).setAntiAlias(true);
            }
        }
!!!6441100.java!!!	draw(inout canvas : Canvas) : void
        int saveCount = canvas.save();

        final AnimatedRotateState st = mState;
        final Drawable drawable = st.mDrawable;
        final Rect bounds = drawable.getBounds();

        int w = bounds.right - bounds.left;
        int h = bounds.bottom - bounds.top;

        float px = st.mPivotXRel ? (w * st.mPivotX) : st.mPivotX;
        float py = st.mPivotYRel ? (h * st.mPivotY) : st.mPivotY;

        canvas.rotate(mCurrentDegrees, px + bounds.left, py + bounds.top);

        drawable.draw(canvas);

        canvas.restoreToCount(saveCount);
!!!6441228.java!!!	start() : void
        if (!mRunning) {
            mRunning = true;
            nextFrame();
        }
!!!6441356.java!!!	stop() : void
        mRunning = false;
        unscheduleSelf(this);
!!!6441484.java!!!	isRunning() : boolean
        return mRunning;
!!!6441612.java!!!	nextFrame() : void
        unscheduleSelf(this);
        scheduleSelf(this, SystemClock.uptimeMillis() + mState.mFrameDuration);
!!!6441740.java!!!	run() : void
        // TODO: This should be computed in draw(Canvas), based on the amount
        // of time since the last frame drawn 
        mCurrentDegrees += mIncrement;
        if (mCurrentDegrees > (360.0f - mIncrement)) {
            mCurrentDegrees = 0.0f;
        }
        invalidateSelf();
        nextFrame();
!!!6441868.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        mState.mDrawable.setVisible(visible, restart);
        boolean changed = super.setVisible(visible, restart);
        if (visible) {
            if (changed || restart) {
                mCurrentDegrees = 0.0f;
                nextFrame();
            }
        } else {
            unscheduleSelf(this);
        }
        return changed;
!!!6441996.java!!!	getDrawable() : Drawable
        return mState.mDrawable;
!!!6442124.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations()
                | mState.mChangingConfigurations
                | mState.mDrawable.getChangingConfigurations();
!!!6442252.java!!!	setAlpha(in alpha : int) : void
        mState.mDrawable.setAlpha(alpha);
!!!6442380.java!!!	setColorFilter(inout cf : ColorFilter) : void
        mState.mDrawable.setColorFilter(cf);
!!!6442508.java!!!	getOpacity() : int
        return mState.mDrawable.getOpacity();
!!!6442636.java!!!	invalidateDrawable(inout who : Drawable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.invalidateDrawable(this);
        }
!!!6442764.java!!!	scheduleDrawable(inout who : Drawable, inout what : Runnable, in when : long) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.scheduleDrawable(this, what, when);
        }
!!!6442892.java!!!	unscheduleDrawable(inout who : Drawable, inout what : Runnable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.unscheduleDrawable(this, what);
        }
!!!6443020.java!!!	getPadding(inout padding : Rect) : boolean
        return mState.mDrawable.getPadding(padding);
!!!6443148.java!!!	isStateful() : boolean
        return mState.mDrawable.isStateful();
!!!6443276.java!!!	onBoundsChange(inout bounds : Rect) : void
        mState.mDrawable.setBounds(bounds.left, bounds.top, bounds.right, bounds.bottom);
!!!6443404.java!!!	getIntrinsicWidth() : int
        return mState.mDrawable.getIntrinsicWidth();
!!!6443532.java!!!	getIntrinsicHeight() : int
        return mState.mDrawable.getIntrinsicHeight();
!!!6443660.java!!!	getConstantState() : ConstantState
        if (mState.canConstantState()) {
            mState.mChangingConfigurations = getChangingConfigurations();
            return mState;
        }
        return null;
!!!6443788.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : void

        final TypedArray a = r.obtainAttributes(attrs, R.styleable.AnimatedRotateDrawable);

        super.inflateWithAttributes(r, parser, a, R.styleable.AnimatedRotateDrawable_visible);
        
        TypedValue tv = a.peekValue(R.styleable.AnimatedRotateDrawable_pivotX);
        final boolean pivotXRel = tv.type == TypedValue.TYPE_FRACTION;
        final float pivotX = pivotXRel ? tv.getFraction(1.0f, 1.0f) : tv.getFloat();
        
        tv = a.peekValue(R.styleable.AnimatedRotateDrawable_pivotY);
        final boolean pivotYRel = tv.type == TypedValue.TYPE_FRACTION;
        final float pivotY = pivotYRel ? tv.getFraction(1.0f, 1.0f) : tv.getFloat();

        setFramesCount(a.getInt(R.styleable.AnimatedRotateDrawable_framesCount, 12));
        setFramesDuration(a.getInt(R.styleable.AnimatedRotateDrawable_frameDuration, 150));

        final int res = a.getResourceId(R.styleable.AnimatedRotateDrawable_drawable, 0);
        Drawable drawable = null;
        if (res > 0) {
            drawable = r.getDrawable(res);
        }

        a.recycle();
        
        int outerDepth = parser.getDepth();
        int type;
        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT &&
               (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {

            if (type != XmlPullParser.START_TAG) {
                continue;
            }

            if ((drawable = Drawable.createFromXmlInner(r, parser, attrs)) == null) {
                Log.w("drawable", "Bad element under <animated-rotate>: "
                        + parser .getName());
            }
        }

        if (drawable == null) {
            Log.w("drawable", "No drawable specified for <animated-rotate>");
        }

        final AnimatedRotateState rotateState = mState;
        rotateState.mDrawable = drawable;
        rotateState.mPivotXRel = pivotXRel;
        rotateState.mPivotX = pivotX;
        rotateState.mPivotYRel = pivotYRel;
        rotateState.mPivotY = pivotY;

        init();

        if (drawable != null) {
            drawable.setCallback(this);
        }
!!!6443916.java!!!	setFramesCount(in framesCount : int) : void
        mState.mFramesCount = framesCount;
        mIncrement = 360.0f / mState.mFramesCount;
!!!6444044.java!!!	setFramesDuration(in framesDuration : int) : void
        mState.mFrameDuration = framesDuration;
!!!6444172.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mState.mDrawable.mutate();
            mMutated = true;
        }
        return this;
