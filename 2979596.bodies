class DisplayModeManager
!!!12120204.java!!!	getInstance() : DisplayModeManager
        if (mInstance == null) {
            mInstance = new DisplayModeManager();
        }
        return mInstance;
!!!12120332.java!!!	DisplayModeManager()
        if (DEBUG) Log.d(TAG, "construct");
        mVideoOut = new VideoOutput();
        mListeners = new ArrayList<DisplayModeManager.StateListener>();
        mSupportedModes = new HashMap<String, Map<String, String>>();
        initDeviceCaps();
        updateSupportedDisplayMode();
!!!12120460.java!!!	registerStateListener(inout l : StateListener) : void
        if (DEBUG) Log.d(TAG, "registerStateListener " + l.toString());
        if (mListeners.contains(l)) {
            Log.w(TAG, "duplicate register");
            return;
        }
        mListeners.add(l);
!!!12120588.java!!!	unRegisterStateListener(inout l : StateListener) : void
        if (DEBUG) Log.d(TAG, "unRegisterStateListener" + l.toString());
        if (!mListeners.remove(l)) {
            Log.w(TAG, "listener not found");
            return;
        }
!!!12120716.java!!!	isResolutionSupported(in res : String) : boolean
        if (null == mSupportedModes.get(res)) return false;
        // If no frame rate selected, return full set
        // else return resolution supported by current selected frame rate
        String prefFrameRate = getPreferredDisplayMode(DisplayModeType.FRAMERATE);
        if (null == prefFrameRate) return mSupportedModes.containsKey(res);
        boolean supported = mSupportedModes.get(res).get(prefFrameRate) != null;
        if (DEBUG) Log.d(TAG, res + "@" + prefFrameRate + " supported: " + supported);
        return mSupportedModes.containsKey(res) && supported;
!!!12120844.java!!!	isFrameRatePaired(in frameRate : String) : boolean
        // If no resolution selected, return full set
        // else return frame rate paired with current selected resolution
        String prefRes = getPreferredDisplayMode(DisplayModeType.RESOLUTION);
        if (null == mSupportedModes.get(prefRes)) return false;
        return prefRes == null ?
            true : mSupportedModes.get(prefRes).containsKey(frameRate);
!!!12120972.java!!!	getSupportedResolution() : Set<String>
        return mSupportedModes.keySet();
!!!12121100.java!!!	getPairedFrameRate(in res : String) : Set<String>
        return mSupportedModes.get(res) == null ?
            null : mSupportedModes.get(res).keySet();
!!!12121228.java!!!	getDeviceSupportedResolution() : List<String>
        return mDeviceSupportedModes.get(CATEGORY_NAME_RESOLUTION);
!!!12121356.java!!!	getDeviceSupportedFrameRate() : List<String>
        return mDeviceSupportedModes.get(CATEGORY_NAME_FRAME_RATE);
!!!12121484.java!!!	isTvCapabilityAvailable() : boolean
        return !mSupportedModes.isEmpty();
!!!12121612.java!!!	setAuto(inout isAuto : boolean) : void
        if (DEBUG) Log.d(TAG, "setAuto, " + isAuto);
        if (isAuto) {
            // Native will apply auto rule to choose best mode
            mVideoOut.setPreferredDisplayMode(null);
        } else {
            // Use current displaying mode as preferred when switch from auto
            DisplayMode curMode = mVideoOut.getDisplayMode();
            if (null == curMode) {
                Log.w(TAG, "query cuurent display mode failed");
                return;
            }
            if (DEBUG) Log.d(TAG, "current display mode: " + curMode.toEncodedString());
            setPreferredDisplayMode(curMode);
        }
!!!12121740.java!!!	getPreferredDisplayMode() : DisplayMode
        return mVideoOut.getPreferredDisplayMode();
!!!12121868.java!!!	getPreferredDisplayMode(inout type : DisplayModeType) : String
        DisplayMode prefMode = getPreferredDisplayMode();
        if (prefMode == null) {
            if (DEBUG) Log.d(TAG, "getPreferredDisplayMode, no preferred");
            return null;
        }
        if (DEBUG) Log.d(TAG, "getPreferredDisplayMode, " + prefMode.toEncodedString());
        return parseValue(type, prefMode);
!!!12121996.java!!!	setPreferredDisplayMode(inout mode : DisplayMode) : void
        if (null != mode && mVideoOut.setPreferredDisplayMode(mode)) {
            if (DEBUG) Log.d(TAG, "set preferred display mode to " + mode.toEncodedString());
            notifyPreferredDisplayChanged(DisplayModeType.RESOLUTION);
            notifyPreferredDisplayChanged(DisplayModeType.FRAMERATE);
        } else {
            Log.e(TAG, "set preferred display mode fail");
            return;
        }
!!!12122124.java!!!	setPreferredDisplayMode(inout type : DisplayModeType, in value : String) : void
        if (DEBUG) Log.d(TAG, "setPreferredDisplayMode, type " + type + ", value " + value);
        String targetPrefRes = (type == DisplayModeType.RESOLUTION) ?
            value : getPreferredDisplayMode(DisplayModeType.RESOLUTION);
        String targetPrefFrameRate = (type == DisplayModeType.FRAMERATE) ?
            value : getPreferredDisplayMode(DisplayModeType.FRAMERATE);
        DisplayMode newMode = DisplayMode.fromString(
                getEncodedString(targetPrefRes, targetPrefFrameRate));
        if (null != newMode && mVideoOut.setPreferredDisplayMode(newMode)) {
            if (DEBUG) Log.d(TAG, "set preferred display mode to " + newMode.toEncodedString());
            notifyPreferredDisplayChanged(type);
        } else {
            Log.e(TAG, "set preferred display mode fail");
            return;
        }
!!!12122252.java!!!	hasPreferredDisplayMode() : boolean
        return getPreferredDisplayMode() != null;
!!!12122380.java!!!	getDisplayMode() : DisplayMode
        DisplayMode curMode = mVideoOut.getDisplayMode();
        if (null == curMode) {
            Log.w(TAG, "get current display mode fail");
        } else {
            if (DEBUG) Log.d(TAG, "getDisplayMode, " + curMode.toEncodedString());
        }
        return curMode;
!!!12122508.java!!!	getDisplayMode(inout type : DisplayModeType) : String
        DisplayMode curMode = getDisplayMode();
        return parseValue(type, curMode);
!!!12122636.java!!!	setDisplayMode(inout mode : DisplayMode) : void
        if (null == mode) return;
        if (DEBUG) Log.d(TAG, "setDisplayMode, target: " + mode.toEncodedString());
        if (mVideoOut.setDisplayMode(mode)) {
            if (DEBUG) Log.d(TAG, "set display mode success");
            notifyDisplayModeChanged();
        } else {
            Log.e(TAG, "set display mode fail");
        }
!!!12122764.java!!!	setDisplayMode(inout type : DisplayModeType, in value : String) : void
        if (DEBUG) Log.d(TAG, "setDisplayMode, type " + type + ", value " + value);
        String targetRes = (type == DisplayModeType.RESOLUTION) ?
            value : getDisplayMode(DisplayModeType.RESOLUTION);
        String targetFrameRate = (type == DisplayModeType.FRAMERATE) ?
            value : getDisplayMode(DisplayModeType.FRAMERATE);
        if (targetRes == null || targetFrameRate == null) return;
        DisplayMode newMode = DisplayMode.fromString(
                getEncodedString(targetRes, targetFrameRate));
        setDisplayMode(newMode);
!!!12122892.java!!!	handleTvConnected(inout plugged : boolean) : void
        if (DEBUG) Log.d(TAG, "handleTvConnected, plugged " + plugged);
        // Update TV capability
        // Native code will apply best display mode according to our policy
        updateSupportedDisplayMode();
        notifyTvCapabilityChanged();
        dumpCapability();
!!!12123020.java!!!	getBestResolution() : String
        String bestRes = null;
        if (mPrefBestMode != null) {
            if (DEBUG) Log.d(TAG, "getBestResolution, pref " + mPrefBestMode.toEncodedString());
            bestRes = parseValue(DisplayModeType.RESOLUTION, mPrefBestMode);
        } else {
            // Return max resolution
            bestRes = getSortedResolutionList().get(0).getKey();
        }
        if (DEBUG) Log.d(TAG, "getBestResolution, bestRes: " + bestRes);
        return bestRes;
!!!12123148.java!!!	parseValue(inout type : DisplayModeType, inout mode : DisplayMode) : String
        if (null == mode) return null;
        switch (type) {
            case RESOLUTION:
                return mode.toDisplayString();
            case FRAMERATE:
                return getTranslatedValue(mode.toEncodedString().split("@")[1].substring(0, 5));
            default:
                return null;
        }
!!!12123276.java!!!	parseScanLines(in res : String) : int
        int scanModePos = res.indexOf('p') == -1 ? res.indexOf('i') : res.indexOf('p');
        String scanLines = res.substring(0, scanModePos);
        //if (DEBUG) Log.d(TAG, "parseScanLines: " + res + " -> " + scanLines);
        return Integer.parseInt(scanLines);
!!!12123404.java!!!	parseScanMode(in res : String) : char
        return res.charAt(res.length() - 1);
!!!12123532.java!!!	initDeviceCaps() : void
        if (DEBUG) Log.d(TAG, "initDeviceCaps");
        FileReader reader;
        try {
            reader = new FileReader(AVSETTINGS_CONFIG_FILE);
            XmlPullParser parser = XmlPullParserFactory.newInstance().newPullParser();
            parser.setInput(reader);
            int event = parser.getEventType();
            // Flag to indicate we are parsing 'category' tag
            boolean categoryTagStart = false;
            String categoryName = null;
            String itemText = null;
            while(event != XmlPullParser.END_DOCUMENT) {
                switch (event) {
                    case XmlPullParser.START_DOCUMENT:
                        mDeviceSupportedModes = new HashMap<String, List<String>>();
                        break;

                    case XmlPullParser.START_TAG:
                        if (TAG_CATEGORY.equals(parser.getName())) {
                            categoryName = parser.getAttributeValue("", ATTR_CATEGORY_NAME);
                            mDeviceSupportedModes.put(categoryName, new ArrayList<String>());
                            if (DEBUG) Log.d(TAG, "add category: " + categoryName);
                            categoryTagStart = true;
                        } else if (TAG_PREF_BEST_MODE.equals(parser.getName())) {
                            String prefBestStr = parser.getAttributeValue("", ATTR_ENCODED_STR);
                            if (DEBUG) Log.d(TAG, "perferred best mode: " + prefBestStr);
                            mPrefBestMode = DisplayMode.fromString(prefBestStr);
                        }
                        if (categoryTagStart) {
                            // Parse items
                            if (TAG_ITEM.equals(parser.getName())) {
                                itemText = parser.nextText();
                                if (mDeviceSupportedModes.get(categoryName) != null) {
                                    mDeviceSupportedModes.get(categoryName).add(itemText);
                                    if (DEBUG) Log.d(TAG, categoryName + " add item: " + itemText);
                                } else {
                                    Log.w(TAG, "no category entry created for " + categoryName);
                                }
                            }
                        }
                        break;

                    case XmlPullParser.END_TAG:
                        if (TAG_CATEGORY.equals(parser.getName())) {
                            categoryTagStart = false;
                        }
                        break;

                    default:
                        break;
                }
                event = parser.next();
            }
            reader.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (XmlPullParserException xpre) {
            xpre.printStackTrace();
        }

        // Use default if configuration file not found
        if (mDeviceSupportedModes == null) {
            Log.w(TAG, "fail to parse config file: " + AVSETTINGS_CONFIG_FILE);
            mDeviceSupportedModes = new HashMap<String, List<String>>();
            mDeviceSupportedModes.put(CATEGORY_NAME_RESOLUTION,
                    Arrays.asList("720p", "1080i", "1080p"));
            mDeviceSupportedModes.put(CATEGORY_NAME_FRAME_RATE, Arrays.asList("24", "50", "60"));
            return;
        }
!!!12123660.java!!!	updateSupportedDisplayMode() : void
        if (DEBUG) Log.d(TAG, "updateSupportedDisplayMode");
        mSupportedModes.clear();
        // Update supported mode according to connected tv's capability,
        // combined with our device's capability, which is specified in
        // "/system/etc/avsettings.xml"
        DisplayMode[] tvSupportedModes = mVideoOut.getTvSupportedModes();
        for (DisplayMode mode : tvSupportedModes) {
            String res = parseValue(DisplayModeType.RESOLUTION, mode);
            String translatedFrameRate = parseValue(DisplayModeType.FRAMERATE, mode);
            // Check if it's supported by device capability
            if (!mDeviceSupportedModes.get(CATEGORY_NAME_RESOLUTION).contains(res) ||
                !mDeviceSupportedModes.get(CATEGORY_NAME_FRAME_RATE).contains(translatedFrameRate))
            {
                if (DEBUG) Log.d(TAG, res + "@" + translatedFrameRate + " not supported by device");
                continue;
            }
            if (!mSupportedModes.containsKey(res)) {
                mSupportedModes.put(res, new HashMap<String, String>());
            }
            if (!mSupportedModes.get(res).containsKey(translatedFrameRate)) {
                if (DEBUG) Log.d(TAG, "update current supported: " +
                        res + "@" + translatedFrameRate);
                mSupportedModes.get(res).put(translatedFrameRate, mode.toEncodedString());
            }
        }
        if (mSupportedModes.isEmpty()) {
            // HDMI output cable not connected
            Log.w(TAG, "no supported modes...");
        }
!!!12123788.java!!!	getSortedResolutionList() : List<Entry<String, Map<String, String>>>
        ArrayList<Entry<String, Map<String, String>>> list = new ArrayList<
                Entry<String, Map<String, String>>>(mSupportedModes.entrySet());
        Collections.sort(list, new Comparator<Map.Entry<String,  Map<String, String>>>() {

            @Override
            public int compare(Entry<String, Map<String, String>> lhs,
                    Entry<String, Map<String, String>> rhs) {
                // Order by resolution, descending
                int lScanLines = parseScanLines(lhs.getKey());
                int rScanLines = parseScanLines(rhs.getKey());
                char lScanMode = parseScanMode(lhs.getKey());
                char rScanMode = parseScanMode(rhs.getKey());
                if (lScanLines == rScanLines) {
                    return rScanMode - lScanMode; // 'p' > 'i'
                } else {
                    return rScanLines - lScanLines;
                }
            }
        });
        /*
        if (DEBUG) {
            for (Entry<String, Map<String, String>> entry : list) {
                Log.d(TAG, "|---- " + entry.getKey() + " support <" +
                        entry.getValue().size() + "> frame rate");
            }
        }*/
        return list;
!!!12123916.java!!!	getSortedFrameRateList(in res : String) : List<Entry<String, String>>
        if (null == mSupportedModes.get(res)) return null;
        ArrayList<Entry<String, String>> list = new ArrayList<Entry<String, String>>(
                mSupportedModes.get(res).entrySet());
        Collections.sort(list, new Comparator<Map.Entry<String, String>>() {

            @Override
            public int compare(Entry<String, String> lhs, Entry<String, String> rhs) {
                // Order by frame rate, descending
                return Integer.parseInt(rhs.getKey()) - Integer.parseInt(lhs.getKey());
            }
        });
        /*
        if (DEBUG) {
            for (Entry<String, String> entry : list) {
                Log.d(TAG, "|-- res <" + res + "> support: " +
                        entry.getKey() + "[" + entry.getValue() + "]");
            }
        }*/
        return list;
!!!12124044.java!!!	getTranslatedValue(in framerate : String) : String
        // There's a rule: supported one of 60/59.94 will be considered as support 60
        // Similar for 30/29.97, 24/23.98/23.976
        // Use some offset to calibrate may be a choice
        Double frameRate = Double.parseDouble(framerate);
        if (frameRate > 23 && frameRate < 24) {
            framerate = "24";
        } else if (frameRate > 29 && frameRate < 30) {
            framerate = "30";
        } else if (frameRate > 59 && frameRate < 60) {
            framerate = "60";
        }
        return framerate.substring(0, 2);
!!!12124172.java!!!	getEncodedString(in res : String, in frameRate : String) : String
        if (null == res || null == frameRate) return null;
        if (DEBUG) Log.d(TAG, "getEncodedString, in " + res + "@" + frameRate);
        if (null == mSupportedModes.get(res)) return null;
        if (DEBUG) Log.d(TAG, "getEncodedString, out " +
                mSupportedModes.get(res).get(frameRate));
        return mSupportedModes.get(res).get(frameRate);
!!!12124300.java!!!	notifyPreferredDisplayChanged(inout type : DisplayModeType) : void
        if (DEBUG) Log.d(TAG, "notifyPreferredResolutionChanged, current preferred " +
            type + ": " + getPreferredDisplayMode(type));
        for (StateListener l : mListeners) {
            l.onPreferredDisplayModeChanged(type);
        }
!!!12124428.java!!!	notifyDisplayModeChanged() : void
        if (DEBUG) Log.d(TAG, "notifyDisplayModeChanged");
        for (StateListener l : mListeners) {
            l.onDisplayModeChanged();
        }
!!!12124556.java!!!	notifyTvCapabilityChanged() : void
        if (DEBUG) Log.d(TAG, "notifyTvCapabilityChanged");
        for (StateListener l : mListeners) {
            l.onTvCapalityChanged();
        }
!!!12124684.java!!!	dumpCapability() : void
        Log.d(TAG, "====== Capability ======");
        List<Entry<String, Map<String, String>>> resList = getSortedResolutionList();
        for (Entry<String, Map<String, String>> resEntry: resList) {
            String res = resEntry.getKey();
            Log.d(TAG, "|----" + res);
            List<Entry<String, String>> frameRateList = getSortedFrameRateList(res);
            for (Entry<String, String> frameRateEntry : frameRateList) {
                String frameRate = frameRateEntry.getKey();
                Log.d(TAG, "|--" + frameRate);
            }
        }
        Log.d(TAG, "=========================");
