class BatteryService
!!!1713292.cpp!!!	BatteryService()
    const sp<IServiceManager> sm(defaultServiceManager());
    if (sm != NULL) {
        const String16 name("batteryinfo");
        mBatteryStatService = sm->getService(name);
    }
!!!1713420.cpp!!!	noteStartSensor(in uid : int, in handle : int) : status_t
    Parcel data, reply;
    data.writeInterfaceToken(DESCRIPTOR);
    data.writeInt32(uid);
    data.writeInt32(handle);
    status_t err = mBatteryStatService->transact(
            TRANSACTION_noteStartSensor, data, &reply, 0);
    err = reply.readExceptionCode();
    return err;
!!!1713548.cpp!!!	noteStopSensor(in uid : int, in handle : int) : status_t
    Parcel data, reply;
    data.writeInterfaceToken(DESCRIPTOR);
    data.writeInt32(uid);
    data.writeInt32(handle);
    status_t err = mBatteryStatService->transact(
            TRANSACTION_noteStopSensor, data, &reply, 0);
    err = reply.readExceptionCode();
    return err;
!!!1713676.cpp!!!	enableSensorImpl(in uid : uid_t, in handle : int) : void
    if (mBatteryStatService != 0) {
        if (addSensor(uid, handle)) {
            int64_t identity = IPCThreadState::self()->clearCallingIdentity();
            noteStartSensor(uid, handle);
            IPCThreadState::self()->restoreCallingIdentity(identity);
        }
    }
!!!1713804.cpp!!!	disableSensorImpl(in uid : uid_t, in handle : int) : void
    if (mBatteryStatService != 0) {
        if (removeSensor(uid, handle)) {
            int64_t identity = IPCThreadState::self()->clearCallingIdentity();
            noteStopSensor(uid, handle);
            IPCThreadState::self()->restoreCallingIdentity(identity);
        }
    }
!!!1713932.cpp!!!	cleanupImpl(in uid : uid_t) : void
    if (mBatteryStatService != 0) {
        Mutex::Autolock _l(mActivationsLock);
        int64_t identity = IPCThreadState::self()->clearCallingIdentity();
        for (ssize_t i=0 ; i<mActivations.size() ; i++) {
            const Info& info(mActivations[i]);
            if (info.uid == uid) {
                noteStopSensor(info.uid, info.handle);
                mActivations.removeAt(i);
                i--;
            }
        }
        IPCThreadState::self()->restoreCallingIdentity(identity);
    }
!!!1714444.cpp!!!	addSensor(in uid : uid_t, in handle : int) : bool
    Mutex::Autolock _l(mActivationsLock);
    Info key(uid, handle);
    ssize_t index = mActivations.indexOf(key);
    if (index < 0) {
        index = mActivations.add(key);
    }
    Info& info(mActivations.editItemAt(index));
    info.count++;
    return info.count == 1;
!!!1714572.cpp!!!	removeSensor(in uid : uid_t, in handle : int) : bool
    Mutex::Autolock _l(mActivationsLock);
    ssize_t index = mActivations.indexOf(Info(uid, handle));
    if (index < 0) return false;
    Info& info(mActivations.editItemAt(index));
    info.count--;
    return info.count == 0;
