class InnerNodeImpl
!!!2293019.java!!!	InnerNodeImpl(inout document : DocumentImpl)
        super(document);
!!!2293147.java!!!	appendChild(inout newChild : Node) : Node
        return insertChildAt(newChild, children.size());
!!!2293275.java!!!	getChildNodes() : NodeList
        NodeListImpl list = new NodeListImpl();

        for (NodeImpl node : children) {
            list.add(node);
        }

        return list;
!!!2293403.java!!!	getFirstChild() : Node
        return (!children.isEmpty() ? children.get(0) : null);
!!!2293531.java!!!	getLastChild() : Node
        return (!children.isEmpty() ? children.get(children.size() - 1) : null);
!!!2293659.java!!!	getNextSibling() : Node
        if (parent == null || index + 1 >= parent.children.size()) {
            return null;
        }

        return parent.children.get(index + 1);
!!!2293787.java!!!	hasChildNodes() : boolean
        return children.size() != 0;
!!!2293915.java!!!	insertBefore(inout newChild : Node, inout refChild : Node) : Node
        LeafNodeImpl refChildImpl = (LeafNodeImpl) refChild;

        if (refChildImpl == null) {
            return appendChild(newChild);
        }

        if (refChildImpl.document != document) {
            throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, null);
        }

        if (refChildImpl.parent != this) {
            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, null);
        }

        return insertChildAt(newChild, refChildImpl.index);
!!!2294043.java!!!	insertChildAt(inout newChild : Node, in index : int) : Node
        if (newChild instanceof DocumentFragment) {
            NodeList toAdd = newChild.getChildNodes();
            for (int i = 0; i < toAdd.getLength(); i++) {
                insertChildAt(toAdd.item(i), index + i);
            }
            return newChild;
        }

        LeafNodeImpl toInsert = (LeafNodeImpl) newChild;
        if (toInsert.document != null && document != null && toInsert.document != document) {
            throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, null);
        }
        if (toInsert.isParentOf(this)) {
            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, null);
        }

        if (toInsert.parent != null) {
            int oldIndex = toInsert.index;
            toInsert.parent.children.remove(oldIndex);
            toInsert.parent.refreshIndices(oldIndex);
        }

        children.add(index, toInsert);
        toInsert.parent = this;
        refreshIndices(index);

        return newChild;
!!!2294171.java!!!	isParentOf(inout node : Node) : boolean
        LeafNodeImpl nodeImpl = (LeafNodeImpl) node;

        while (nodeImpl != null) {
            if (nodeImpl == this) {
                return true;
            }

            nodeImpl = nodeImpl.parent;
        }

        return false;
!!!2294299.java!!!	normalize() : void
        Node next;
        for (Node node = getFirstChild(); node != null; node = next) {
            next = node.getNextSibling();
            node.normalize();

            if (node.getNodeType() == Node.TEXT_NODE) {
                ((TextImpl) node).minimize();
            }
        }
!!!2294427.java!!!	refreshIndices(in fromIndex : int) : void
        for (int i = fromIndex; i < children.size(); i++) {
            children.get(i).index = i;
        }
!!!2294555.java!!!	removeChild(inout oldChild : Node) : Node
        LeafNodeImpl oldChildImpl = (LeafNodeImpl) oldChild;

        if (oldChildImpl.document != document) {
            throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, null);
        }
        if (oldChildImpl.parent != this) {
            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, null);
        }

        int index = oldChildImpl.index;
        children.remove(index);
        oldChildImpl.parent = null;
        refreshIndices(index);

        return oldChild;
!!!2294683.java!!!	replaceChild(inout newChild : Node, inout oldChild : Node) : Node
        int index = ((LeafNodeImpl) oldChild).index;
        removeChild(oldChild);
        insertChildAt(newChild, index);
        return oldChild;
!!!2294811.java!!!	getTextContent() : String
        Node child = getFirstChild();
        if (child == null) {
            return "";
        }

        Node next = child.getNextSibling();
        if (next == null) {
            return hasTextContent(child) ? child.getTextContent() : "";
        }

        StringBuilder buf = new StringBuilder();
        getTextContent(buf);
        return buf.toString();
!!!2294939.java!!!	getTextContent(inout buf : StringBuilder) : void
        Node child = getFirstChild();
        while (child != null) {
            if (hasTextContent(child)) {
                ((NodeImpl) child).getTextContent(buf);
            }
            child = child.getNextSibling();
        }
!!!2295067.java!!!	hasTextContent(inout child : Node) : boolean
        // TODO: skip text nodes with ignorable whitespace?
        return child.getNodeType() != Node.COMMENT_NODE
                && child.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE;
!!!2295195.java!!!	getElementsByTagName(inout out : NodeListImpl, inout name : String) : void
        for (NodeImpl node : children) {
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                ElementImpl element = (ElementImpl) node;
                if (matchesNameOrWildcard(name, element.getNodeName())) {
                    out.add(element);
                }
                element.getElementsByTagName(out, name);
            }
        }
!!!2295323.java!!!	getElementsByTagNameNS(inout out : NodeListImpl, inout namespaceURI : String, inout localName : String) : void
        for (NodeImpl node : children) {
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                ElementImpl element = (ElementImpl) node;
                if (matchesNameOrWildcard(namespaceURI, element.getNamespaceURI())
                        && matchesNameOrWildcard(localName, element.getLocalName())) {
                    out.add(element);
                }
                element.getElementsByTagNameNS(out, namespaceURI, localName);
            }
        }
!!!2295451.java!!!	matchesNameOrWildcard(inout pattern : String, inout s : String) : boolean
        return "*".equals(pattern) || Objects.equal(pattern, s);
