class NameConstraints
!!!2236443.java!!!	NameConstraints(inout permittedSubtrees : GeneralSubtrees, inout excludedSubtrees : GeneralSubtrees)
        if (permittedSubtrees != null) {
            List<GeneralSubtree> ps = permittedSubtrees.getSubtrees();
            if (ps == null || ps.isEmpty()) {
                throw new IllegalArgumentException("permittedSubtrees are empty");
            }
        }
        if (excludedSubtrees != null) {
            List<GeneralSubtree> es = excludedSubtrees.getSubtrees();
            if (es == null || es.isEmpty()) {
                throw new IllegalArgumentException("excludedSubtrees are empty");
            }
        }
        this.permittedSubtrees = permittedSubtrees;
        this.excludedSubtrees = excludedSubtrees;
!!!2236571.java!!!	NameConstraints(inout permittedSubtrees : GeneralSubtrees, inout excludedSubtrees : GeneralSubtrees, inout encoding : byte)
        this(permittedSubtrees, excludedSubtrees);
        this.encoding = encoding;
!!!2236699.java!!!	decode(inout encoding : byte) : NameConstraints
        return (NameConstraints) ASN1.decode(encoding);
!!!2236827.java!!!	getEncoded() : byte
        if (encoding == null) {
            encoding = ASN1.encode(this);
        }
        return encoding;
!!!2236955.java!!!	prepareNames() : void
        // array of lists with permitted General Names divided by type
        permitted_names = new ArrayList[9];
        if (permittedSubtrees != null) {
            for (GeneralSubtree generalSubtree : permittedSubtrees.getSubtrees()) {
                GeneralName name = generalSubtree.getBase();
                int tag = name.getTag();
                if (permitted_names[tag] == null) {
                    permitted_names[tag] = new ArrayList<GeneralName>();
                }
                permitted_names[tag].add(name);
            }
        }
        // array of lists with excluded General Names divided by type
        excluded_names = new ArrayList[9];
        if (excludedSubtrees != null) {
            for (GeneralSubtree generalSubtree : excludedSubtrees.getSubtrees()) {
                GeneralName name = generalSubtree.getBase();
                int tag = name.getTag();
                if (excluded_names[tag] == null) {
                    excluded_names[tag] = new ArrayList<GeneralName>();
                }
                excluded_names[tag].add(name);
            }
        }
!!!2237083.java!!!	getExtensionValue(inout cert : X509Certificate, inout OID : String) : byte
        try {
            byte[] bytes = cert.getExtensionValue(OID);
            if (bytes == null) {
                return null;
            }
            return (byte[]) ASN1OctetString.getInstance().decode(bytes);
        } catch (IOException e) {
            return null;
        }
!!!2237211.java!!!	isAcceptable(inout cert : X509Certificate) : boolean
        if (permitted_names == null) {
            prepareNames();
        }

        byte[] bytes = getExtensionValue(cert, "2.5.29.17");
        List<GeneralName> names;
        try {
            names = (bytes == null)
                ? new ArrayList<GeneralName>(1) // will check the subject field only
                : ((GeneralNames) GeneralNames.ASN1.decode(bytes)).getNames();
        } catch (IOException e) {
            // the certificate is broken;
            e.printStackTrace();
            return false;
        }
        if ((excluded_names[4] != null) || (permitted_names[4] != null)) {
            try {
                names.add(new GeneralName(4,
                        cert.getSubjectX500Principal().getName()));
            } catch (IOException e) {
                // should never be happened
            }
        }
        return isAcceptable(names);
!!!2237339.java!!!	isAcceptable(inout names : List) : boolean
        if (permitted_names == null) {
            prepareNames();
        }

        // check map: shows which types of permitted alternative names are
        // presented in the certificate
        boolean[] types_presented = new boolean[9];
        // check map: shows if permitted name of presented type is found
        // among the certificate's alternative names
        boolean[] permitted_found = new boolean[9];
        for (GeneralName name : names) {
            int type = name.getTag();
            // search the name in excluded names
            if (excluded_names[type] != null) {
                for (int i = 0; i < excluded_names[type].size(); i++) {
                    if (excluded_names[type].get(i).isAcceptable(name)) {
                        return false;
                    }
                }
            }
            // Search the name in permitted names
            // (if we already found the name of such type between the alt
            // names - we do not need to check others)
            if ((permitted_names[type] != null) && (!permitted_found[type])) {
                types_presented[type] = true;
                for (int i = 0; i < permitted_names[type].size(); i++) {
                    if (permitted_names[type].get(i).isAcceptable(name)) {
                        // found one permitted name of such type
                        permitted_found[type] = true;
                    }
                }
            }
        }
        for (int type = 0; type < 9; type++) {
            if (types_presented[type] && !permitted_found[type]) {
                return false;
            }
        }
        return true;
!!!2237467.java!!!	dumpValue(inout sb : StringBuilder, inout prefix : String) : void
        sb.append(prefix).append("Name Constraints: [\n");
        if (permittedSubtrees != null) {
            sb.append(prefix).append("  Permitted: [\n");
            for (GeneralSubtree generalSubtree : permittedSubtrees.getSubtrees()) {
                generalSubtree.dumpValue(sb, prefix + "    ");
            }
            sb.append(prefix).append("  ]\n");
        }
        if (excludedSubtrees != null) {
            sb.append(prefix).append("  Excluded: [\n");
            for (GeneralSubtree generalSubtree : excludedSubtrees.getSubtrees()) {
                generalSubtree.dumpValue(sb, prefix + "    ");
            }
            sb.append(prefix).append("  ]\n");
        }
        sb.append('\n').append(prefix).append("]\n");
