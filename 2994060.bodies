class ActionEvent
!!!13209740.java!!!	ActionEvent(inout action : Action, inout state : State)
        this(action, state, NOT_SET, NOT_SET, NOT_SET);
!!!13209868.java!!!	ActionEvent(inout action : Action, inout state : State, in extra : int)
        this(action, state, extra, NOT_SET, NOT_SET);
!!!13209996.java!!!	ActionEvent(inout action : Action, inout state : State, in extra : int, in pointerX : float, in pointerY : float)
        mAction = action;
        mState = state;
        mExtra = extra;
        mPointerX = pointerX;
        mPointerY = pointerY;
!!!13210124.java!!!	fromKeyEvent(inout event : KeyEvent, inout action : Action) : ActionEvent
        int keyAction = event.getAction();
        int extra = (action == Action.GENERIC) ? event.getScanCode() : NOT_SET;
        State state = null;
        if (keyAction == KeyEvent.ACTION_DOWN) {
            state = State.DOWN;
        } else if (keyAction == KeyEvent.ACTION_MULTIPLE) {
            // Multiple is useless without a repeat count.
            state = State.DOWN;
        } else if (keyAction == KeyEvent.ACTION_UP) {
            state = State.UP;
        } else {
            throw new IllegalArgumentException(
                    "Key Event action is not a supported state: " + keyAction);
        }
        return new ActionEvent(action, state, extra);
!!!13210252.java!!!	forAction(inout action : Action) : ActionEvent
        return new ActionEvent(action, State.DOWN);
!!!13210380.java!!!	fromTouchEvent(inout event : MotionEvent) : ActionEvent
        int motionAction = event.getAction();
        State state;
        if (motionAction == MotionEvent.ACTION_DOWN) {
            state = State.DOWN;
        } else if (motionAction == MotionEvent.ACTION_UP) {
            state = State.UP;
        } else {
            // Not a valid touch event, so return null.
            return null;
        }
        ActionEvent actionEvent = new ActionEvent(Action.POINTER, state,
                NOT_SET, event.getX(), event.getY());
        return actionEvent;
!!!13210508.java!!!	fromGenericMotionEvent(inout event : MotionEvent) : ActionEvent
        int motionAction = event.getAction();
        State state;
        if (motionAction == MotionEvent.ACTION_SCROLL) {
            state = State.SCROLL;
        } else {
            // Not a valid motion event, so return null.
            return null;
        }
        ActionEvent actionEvent = new ActionEvent(
                Action.POINTER, state, NOT_SET,
                (int)event.getAxisValue(MotionEvent.AXIS_HSCROLL),
                (int)event.getAxisValue(MotionEvent.AXIS_VSCROLL));
        return actionEvent;
!!!13210636.java!!!	getAction() : Action
        return mAction;
!!!13210764.java!!!	getState() : State
        return mState;
!!!13210892.java!!!	getExtra() : int
        return mExtra;
!!!13211020.java!!!	getPointerX() : float
        return mPointerX;
!!!13211148.java!!!	getPointerY() : float
        return mPointerY;
!!!13211276.java!!!	toString() : String
        return "ActionEvent(" + mAction + "/" + mState + "/" + mExtra + "/"
                + mPointerX + "/" + mPointerY +")";
!!!13211404.java!!!	describeContents() : int
        return 0;
!!!13211532.java!!!	readFromParcel(inout parcel : Parcel) : ActionEvent
        Action action = Action.values()[parcel.readInt()];
        State state = State.values()[parcel.readInt()];
        int extra = parcel.readInt();
        float pointerX = parcel.readFloat();
        float pointerY = parcel.readFloat();
        return new ActionEvent(action, state, extra, pointerX, pointerY);
!!!13211660.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mAction.ordinal());
        dest.writeInt(mState.ordinal());
        dest.writeInt(mExtra);
        dest.writeFloat(mPointerX);
        dest.writeFloat(mPointerY);
