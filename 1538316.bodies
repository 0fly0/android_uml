class FontLoader
!!!9537036.java!!!	create(in fontOsLocation : String) : FontLoader
        try {
            SAXParserFactory parserFactory = SAXParserFactory.newInstance();
                parserFactory.setNamespaceAware(true);

            // parse the system fonts
            FontHandler handler = parseFontFile(parserFactory, fontOsLocation, FONTS_SYSTEM);
            List<FontInfo> systemFonts = handler.getFontList();


            // parse the fallback fonts
            handler = parseFontFile(parserFactory, fontOsLocation, FONTS_FALLBACK);
            List<FontInfo> fallbackFonts = handler.getFontList();

            return new FontLoader(fontOsLocation, systemFonts, fallbackFonts);
        } catch (ParserConfigurationException e) {
            // return null below
        } catch (SAXException e) {
            // return null below
        } catch (FileNotFoundException e) {
            // return null below
        } catch (IOException e) {
            // return null below
        }

        return null;
!!!9537164.java!!!	parseFontFile(inout parserFactory : SAXParserFactory, in fontOsLocation : String, in fontFileName : String) : FontHandler

        SAXParser parser = parserFactory.newSAXParser();
        File f = new File(fontOsLocation, fontFileName);

        FontHandler definitionParser = new FontHandler(
                fontOsLocation + File.separator);
        parser.parse(new FileInputStream(f), definitionParser);
        return definitionParser;
!!!9537292.java!!!	FontLoader(in fontOsLocation : String, inout fontList : List<FontInfo>, inout fallBackList : List<FontInfo>)
        mOsFontsLocation = fontOsLocation;
        mMainFonts.addAll(fontList);
        mFallbackFonts.addAll(fallBackList);
!!!9537420.java!!!	getOsFontsLocation() : String
        return mOsFontsLocation;
!!!9537548.java!!!	getFont(in family : String, in style : int) : List<Font>
        List<Font> result = new ArrayList<Font>();

        if (family == null) {
            return result;
        }


        // get the font objects from the main list based on family.
        for (FontInfo info : mMainFonts) {
            if (info.families.contains(family)) {
                result.add(info.font[style]);
                break;
            }
        }

        // add all the fallback fonts for the given style
        for (FontInfo info : mFallbackFonts) {
            result.add(info.font[style]);
        }

        return result;
!!!9537676.java!!!	getFallbackFonts(in style : int) : List<Font>
        List<Font> result = new ArrayList<Font>();
        // add all the fallback fonts
        for (FontInfo info : mFallbackFonts) {
            result.add(info.font[style]);
        }
        return result;
