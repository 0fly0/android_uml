class ChannelBannerDetails
!!!12251916.java!!!	ChannelBannerDetails(in appContext : Context)
        liveTv = TvFramework.getInstance().getLiveTvInstance();
        eventInstance = TvFramework.getInstance().getEventInstance();
        ccSettings = TvFramework.getInstance().getCaptionInstance();
        audoSettings = TvFramework.getInstance().getAudioInstance();
        tuner = TvFramework.getInstance().getTunerInstance();
        picture = TvFramework.getInstance().getPictureInstance();

        mRes = appContext.getResources();
        mContext = appContext;

        progress = 0;
        steps = CHANNEL_INFO_STEPS.values();
!!!12252044.java!!!	loadChannelInfos() : boolean
        final CHANNEL_INFO_STEPS newStep = steps[progress + 1];
        Log.d(TAG, "loadChannelInfos step=" + newStep);
        if (newStep.ordinal() < CHANNEL_INFO_STEPS.CI_STEP_MAX.ordinal()) {
            loadChannelInfo(newStep);
            progress++;
            return true;
        } else {
            return false;
        }
!!!12252172.java!!!	getCurrentStep() : CHANNEL_INFO_STEPS
        return steps[progress];
!!!12252300.java!!!	loadChannelInfo(inout step : CHANNEL_INFO_STEPS) : boolean
        boolean ret = true;
        switch (step) {
            case CI_STEP_INPUT:
                mInputSource = liveTv.getCurrentSource();
                break;
            case CI_STEP_CHANNEL:
                currentChannel = liveTv.getCurrentService();
                if (currentChannel != null) {
                    mMajorNumber = currentChannel.getMajorNo();
                    mMinorNumber = currentChannel.getMinorNo();
                    mChannelName = currentChannel.getServiceName();
                    mChannelType = currentChannel.getServiceType();

                    final int serviceFlag = currentChannel.getServiceFlag();
                    Log.d(TAG, "*********************   service flag = " + serviceFlag);
                    mEncryptedChannel = (serviceFlag == ServiceModificationFlags.Scramble_Flag);
                }
                mTunerMode = tuner.getTunerMode(mContext);
                break;
            case CI_STEP_PID:
                if (currentChannel != null) {
                    mPidDetails = liveTv.getPIDDetailsForCurrentService();
                }
                break;
            case CI_STEP_EVENT:
                if (currentChannel != null) {
                    if (mChannelType == ChannelType.ANALOG_TELEVISION.ordinal()) {
                        // fetching CURRENT Event details for now
                        eventData = eventInstance.getAnalogEventDetails(currentChannel, true);
                    } else if (mChannelType == ChannelType.DIGITAL_TELEVISION.ordinal()) {
                        eventData = eventInstance.getCurrentEventDetails(currentChannel
                                .getServiceId());
                    }
                    if (eventData != null) {
                        mProgramTitle = eventData.geteventTitle();
                        Log.d(TAG, "program name:" + mProgramTitle);

                        mRating = eventData.getrating();
                        mDuration = (eventData.getduration() / 60);
                        mProgramDescription = eventInstance.getEventDescription(eventData);
                        Log.d(TAG, "program description:" + mProgramDescription);
                    } else {
                        Log.d(TAG, "******************************* eventData is null");
                    }
                }
                break;
            case CI_STEP_AUDIO:
                if (currentChannel != null) {
                    if (mChannelType == ChannelType.ANALOG_TELEVISION.ordinal()) {
                        mIsSapAvailable = audoSettings.isAnalogSapAvailable();
                        mMTS = audoSettings.GetAnalogMTSMode().ordinal();
                    } else if (mChannelType == ChannelType.DIGITAL_TELEVISION.ordinal()) {
                        mMultipleAudioStreams = audoSettings.getAudioLanguageNumber() > 1;
                    }
                }
                boolean isDigitalChannel = (mChannelType
                        == ChannelType.DIGITAL_TELEVISION.ordinal());
                mAudioChannel = Wrapper.getWrapperInstance().getAudioChannelNum(true,
                        isDigitalChannel);
                mSubwooferChannel = Wrapper.getWrapperInstance().getSubwooferChannelNum(true,
                        isDigitalChannel);
                mDualMono = Wrapper.getWrapperInstance().getDualMono(true, isDigitalChannel);
                break;
            case CI_STEP_VIDEO:
                mResolution = picture.getVideoInputResolution();
                break;
            case CI_STEP_PROGRAM_TIME:
                if (eventData != null) {
                    final int startTime = eventData.getstartTime();
                    mProgramTime = displayStartTime(startTime);
                }
                break;
            case CI_STEP_CC:
                if (currentChannel != null) {
                    boolean ccAvailable = false;
                    final List<USDTVCaptionExtInfo> lCaptionExtInfo = ccSettings.getCCAvailability(
                            true, null,
                            currentChannel);
                    if (lCaptionExtInfo != null) {
                        if (lCaptionExtInfo.size() > 0) {
                            ccAvailable = true;
                        }
                    }
                    mCC = ccAvailable;
                    Log.d(TAG, "*****************************   checking cc availability = "
                            + ccAvailable);
                }
                break;
            case CI_STEP_SIGNAL_STRENGTH:
                final USDTVSignalStrength usdtvSignalStrength = tuner.getSignalStrength();
                if (usdtvSignalStrength != null) {
                    mSignalStrength = usdtvSignalStrength.getSignalStrength();
                }
                break;
            case CI_STEP_PARENTAL_LOCK:
                int status = liveTv.playCurrentSource(true);
                mParentalLock = (status == ErrorCodes.USDTV_CHANNEL_LOCKED);
                break;
            case CI_STEP_CURRENT_TIME:
                final USDTVCurrentTime currentTime = TvFramework.getInstance().getSystemInstance()
                        .getCurrentTime();
                if (currentTime != null) {
                    Current_Date_Time = getDateMonthFormat(currentTime.getDate()) + "-"
                            + getMonthAsString(currentTime.getMonth()) + "-"
                            + getDateMonthFormat(currentTime.getYear()) + "  "
                            + getDateMonthFormat(currentTime.getHrs()) + " : "
                            + getDateMonthFormat(currentTime.getMins());
                } else {
                    Log.d(TAG, "******************************* unable to get current time");
                }
                break;
            default:
                ret = false;
                break;
        }

        return ret;
!!!12252428.java!!!	displayStartTime(in startTime : int) : String

        USDTVTimeSettings timeSettings = null;
        long sTime = 0;
        String timeZone = null;
        final DateFormat gmtFormat = new SimpleDateFormat("yyyy MM dd HH:mm:ss z");

        timeSettings = TvFramework.getInstance().getSystemInstance().getCurrentTimeSettings();
        if (timeSettings != null) {

            timeZone = TimeZones.values()[timeSettings.getTimeZone()].name();
            final Calendar calObj = Calendar.getInstance(TimeZone.getTimeZone(timeZone));
            calObj.set(mRes.getInteger(R.integer.adk_year), mRes.getInteger(R.integer.adk_month),
                    mRes
                            .getInteger(R.integer.adk_date), mRes.getInteger(R.integer.adk_hrs),
                    mRes
                            .getInteger(R.integer.adk_mins), mRes.getInteger(R.integer.adk_secs));
            final long now = calObj.getTimeInMillis();
            sTime = ((startTime * 1000L) + now);
            gmtFormat.setTimeZone(TimeZone.getTimeZone(timeZone));
        }
        return gmtFormat.format(sTime);
!!!12252556.java!!!	getDateMonthFormat(in input : int) : String
        String dateString = String.valueOf(input);
        if (dateString.length() == 1) {
            dateString = "0" + dateString;
        }
        return dateString;
!!!12252684.java!!!	getMonthAsString(in month : int) : String
        switch (month) {
            case 1:
                return "JAN";
            case 2:
                return "FEB";
            case 3:
                return "MAR";
            case 4:
                return "APR";
            case 5:
                return "MAY";
            case 6:
                return "JUN";
            case 7:
                return "JUL";
            case 8:
                return "AUG";
            case 9:
                return "SEP";
            case 10:
                return "OCT";
            case 11:
                return "NOV";
            case 12:
                return "DEC";
            default:
                break;
        }
        return null;
!!!12252812.java!!!	isDurationValid(in duration : int) : boolean

        return duration < MAX_DURATION;
