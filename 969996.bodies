class JWebCoreJavaBridge
!!!4909708.java!!!	JWebCoreJavaBridge()
        nativeConstructor();

!!!4909836.java!!!	finalize() : void
        nativeFinalize();
!!!4909964.java!!!	setActiveWebView(inout webview : WebViewClassic) : void
        if (sCurrentMainWebView.get() != null) {
            // it is possible if there is a sub-WebView. Do nothing.
            return;
        }
        sCurrentMainWebView = new WeakReference<WebViewClassic>(webview);
!!!4910092.java!!!	removeActiveWebView(inout webview : WebViewClassic) : void
        if (sCurrentMainWebView.get() != webview) {
            // it is possible if there is a sub-WebView. Do nothing.
            return;
        }
        sCurrentMainWebView.clear();
!!!4910220.java!!!	fireSharedTimer() : void
 
        // clear the flag so that sharedTimerFired() can set a new timer
        mHasInstantTimer = false;
        sharedTimerFired();
!!!4910348.java!!!	handleMessage(inout msg : Message) : void
        switch (msg.what) {
            case TIMER_MESSAGE: {
                if (mTimerPaused) {
                    mHasDeferredTimers = true;
                } else {
                    fireSharedTimer();
                }
                break;
            }
            case FUNCPTR_MESSAGE:
                nativeServiceFuncPtrQueue();
                break;
            case REFRESH_PLUGINS:
                nativeUpdatePluginDirectories(PluginManager.getInstance(null)
                        .getPluginDirectories(), ((Boolean) msg.obj)
                        .booleanValue());
                break;
        }
!!!4910476.java!!!	signalServiceFuncPtrQueue() : void
        Message msg = obtainMessage(FUNCPTR_MESSAGE);
        sendMessage(msg);
!!!4910732.java!!!	pause() : void
        if (!mTimerPaused) {
            mTimerPaused = true;
            mHasDeferredTimers = false;
        }
!!!4910860.java!!!	resume() : void
        if (mTimerPaused) {
           mTimerPaused = false;
           if (mHasDeferredTimers) {
               mHasDeferredTimers = false;
               fireSharedTimer();
           }
        }
!!!4911116.java!!!	setCookies(in url : String, in value : String) : void
        if (value.contains("\r") || value.contains("\n")) {
            // for security reason, filter out '\r' and '\n' from the cookie
            int size = value.length();
            StringBuilder buffer = new StringBuilder(size);
            int i = 0;
            while (i != -1 && i < size) {
                int ir = value.indexOf('\r', i);
                int in = value.indexOf('\n', i);
                int newi = (ir == -1) ? in : (in == -1 ? ir : (ir < in ? ir
                        : in));
                if (newi > i) {
                    buffer.append(value.subSequence(i, newi));
                } else if (newi == -1) {
                    buffer.append(value.subSequence(i, size));
                    break;
                }
                i = newi + 1;
            }
            value = buffer.toString();
        }
        CookieManager.getInstance().setCookie(url, value);
!!!4911244.java!!!	cookies(in url : String) : String
        return CookieManager.getInstance().getCookie(url);
!!!4911372.java!!!	cookiesEnabled() : boolean
        return CookieManager.getInstance().acceptCookie();
!!!4911500.java!!!	getPluginDirectories() : String
        return PluginManager.getInstance(null).getPluginDirectories();
!!!4911628.java!!!	getPluginSharedDataDirectory() : String
        return PluginManager.getInstance(null).getPluginSharedDataDirectory();
!!!4911756.java!!!	setSharedTimer(in timemillis : long) : void
        if (DebugFlags.J_WEB_CORE_JAVA_BRIDGE) Log.v(LOGTAG, "setSharedTimer " + timemillis);

        if (timemillis <= 0) {
            // we don't accumulate the sharedTimer unless it is a delayed
            // request. This way we won't flood the message queue with
            // WebKit messages. This should improve the browser's
            // responsiveness to key events.
            if (mHasInstantTimer) {
                return;
            } else {
                mHasInstantTimer = true;
                Message msg = obtainMessage(TIMER_MESSAGE);
                sendMessageDelayed(msg, timemillis);
            }
        } else {
            Message msg = obtainMessage(TIMER_MESSAGE);
            sendMessageDelayed(msg, timemillis);
        }
!!!4911884.java!!!	stopSharedTimer() : void
        if (DebugFlags.J_WEB_CORE_JAVA_BRIDGE) {
            Log.v(LOGTAG, "stopSharedTimer removing all timers");
        }
        removeMessages(TIMER_MESSAGE);
        mHasInstantTimer = false;
        mHasDeferredTimers = false;
!!!4912012.java!!!	getKeyStrengthList() : String
        return CertTool.getKeyStrengthList();
!!!4912140.java!!!	getSignedPublicKey(in index : int, in challenge : String, in url : String) : String
        WebViewClassic current = sCurrentMainWebView.get();
        if (current != null) {
            // generateKeyPair expects organizations which we don't have. Ignore
            // url.
            return CertTool.getSignedPublicKey(
                    current.getContext(), index, challenge);
        } else {
            Log.e(LOGTAG, "There is no active WebView for getSignedPublicKey");
            return "";
        }
!!!4912268.java!!!	resolveFilePathForContentUri(in uri : String) : String
        if (mContentUriToFilePathMap != null) {
            String fileName = mContentUriToFilePathMap.get(uri);
            if (fileName != null) {
                return fileName;
            }
        }

        // Failsafe fallback to just use the last path segment.
        // (See OpenableColumns documentation in the SDK)
        Uri jUri = Uri.parse(uri);
        return jUri.getLastPathSegment();
!!!4912396.java!!!	storeFilePathForContentUri(in path : String, in contentUri : String) : void
        if (mContentUriToFilePathMap == null) {
            mContentUriToFilePathMap = new HashMap<String, String>();
        }
        mContentUriToFilePathMap.put(contentUri, path);
!!!4912524.java!!!	updateProxy(inout proxyProperties : ProxyProperties) : void
        if (proxyProperties == null) {
            nativeUpdateProxy("", "");
            return;
        }

        String host = proxyProperties.getHost();
        int port = proxyProperties.getPort();
        if (port != 0)
            host += ":" + port;

        nativeUpdateProxy(host, proxyProperties.getExclusionList());
