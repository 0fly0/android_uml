class PowerManager
!!!3900812.java!!!	PowerManager(inout context : Context, inout service : IPowerManager, inout handler : Handler)
        mContext = context;
        mService = service;
        mHandler = handler;
!!!3900940.java!!!	getMinimumScreenBrightnessSetting() : int
        return mContext.getResources().getInteger(
                com.android.internal.R.integer.config_screenBrightnessSettingMinimum);
!!!3901068.java!!!	getMaximumScreenBrightnessSetting() : int
        return mContext.getResources().getInteger(
                com.android.internal.R.integer.config_screenBrightnessSettingMaximum);
!!!3901196.java!!!	getDefaultScreenBrightnessSetting() : int
        return mContext.getResources().getInteger(
                com.android.internal.R.integer.config_screenBrightnessSettingDefault);
!!!3901324.java!!!	useScreenAutoBrightnessAdjustmentFeature() : boolean
        return SystemProperties.getBoolean("persist.power.useautobrightadj", false);
!!!3901452.java!!!	useTwilightAdjustmentFeature() : boolean
        return SystemProperties.getBoolean("persist.power.usetwilightadj", false);
!!!3901580.java!!!	newWakeLock(in levelAndFlags : int, in tag : String) : WakeLock
        validateWakeLockParameters(levelAndFlags, tag);
        return new WakeLock(levelAndFlags, tag);
!!!3901708.java!!!	validateWakeLockParameters(in levelAndFlags : int, in tag : String) : void
        switch (levelAndFlags & WAKE_LOCK_LEVEL_MASK) {
            case PARTIAL_WAKE_LOCK:
            case SCREEN_DIM_WAKE_LOCK:
            case SCREEN_BRIGHT_WAKE_LOCK:
            case FULL_WAKE_LOCK:
            case PROXIMITY_SCREEN_OFF_WAKE_LOCK:
                break;
            default:
                throw new IllegalArgumentException("Must specify a valid wake lock level.");
        }
        if (tag == null) {
            throw new IllegalArgumentException("The tag must not be null.");
        }
!!!3901836.java!!!	userActivity(in when : long, inout noChangeLights : boolean) : void
        try {
            mService.userActivity(when, USER_ACTIVITY_EVENT_OTHER,
                    noChangeLights ? USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS : 0);
        } catch (RemoteException e) {
        }
!!!3901964.java!!!	goToSleep(in time : long) : void
        try {
            mService.goToSleep(time, GO_TO_SLEEP_REASON_USER);
        } catch (RemoteException e) {
        }
!!!3902092.java!!!	wakeUp(in time : long) : void
        try {
            mService.wakeUp(time);
        } catch (RemoteException e) {
        }
!!!3902220.java!!!	nap(in time : long) : void
        try {
            mService.nap(time);
        } catch (RemoteException e) {
        }
!!!3902348.java!!!	setBacklightBrightness(in brightness : int) : void
        try {
            mService.setTemporaryScreenBrightnessSettingOverride(brightness);
        } catch (RemoteException e) {
        }
!!!3902476.java!!!	isWakeLockLevelSupported(in level : int) : boolean
        try {
            return mService.isWakeLockLevelSupported(level);
        } catch (RemoteException e) {
            return false;
        }
!!!3902604.java!!!	isScreenOn() : boolean
        try {
            return mService.isScreenOn();
        } catch (RemoteException e) {
            return false;
        }
!!!3902732.java!!!	reboot(in reason : String) : void
        try {
            mService.reboot(false, reason, true);
        } catch (RemoteException e) {
        }
