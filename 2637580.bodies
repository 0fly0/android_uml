class OmxAmpAacPort
!!!11097484.cpp!!!	OmxAmpAacPort(in dir : OMX_DIRTYPE)
  mDefinition.eDir = dir;
  mDefinition.eDomain = OMX_PortDomainAudio;
  if (dir == OMX_DirInput) {
    mDefinition.nBufferCountMin = kNumInputBuffers;
    mDefinition.nBufferSize = 8192;
    mDefinition.nBufferAlignment = 1;
    mDefinition.format.audio.eEncoding = OMX_AUDIO_CodingAAC;
    // mDefinition.format.audio.cMIMEType = const_cast<char *>("audio/aac");
  } else if (dir == OMX_DirOutput) {
    mDefinition.nBufferCountMin = kNumOutputBuffers;
    mDefinition.nBufferSize = 4096 * kMaxOutPutChannels;
    mDefinition.nBufferAlignment = 2;
    mDefinition.format.audio.eEncoding = OMX_AUDIO_CodingPCM;
    // mDefinition.format.audio.cMIMEType = const_cast<char *>("audio/raw");
  } else {
    OMX_LOGE("Error dir %d\n", dir);
  }
  mDefinition.nBufferCountActual = mDefinition.nBufferCountMin;
  updateDomainParameter();
  InitOmxHeader(&mCodecParam.aac);
  mCodecParam.aac.nPortIndex = mDefinition.nPortIndex;
  mFormatHeadSize = 0;
  mPushedOffset = 0;
  mPushedBytes = 0;
  mIsADTS = OMX_TRUE;
  mAACHeader = NULL;
!!!11097612.cpp!!!	OmxAmpAacPort(in index : OMX_U32, in dir : OMX_DIRTYPE)
  mDefinition.nPortIndex = index;
  mDefinition.eDir = dir;
  mDefinition.eDomain = OMX_PortDomainAudio;
  if (dir == OMX_DirInput) {
    mDefinition.nBufferCountMin = kNumInputBuffers;
    mDefinition.nBufferSize = 8192;
    mDefinition.nBufferAlignment = 1;
    mDefinition.format.audio.eEncoding = OMX_AUDIO_CodingAAC;
    // mDefinition.format.audio.cMIMEType = const_cast<char *>("audio/aac");
  } else if (dir == OMX_DirOutput) {
    mDefinition.nBufferCountMin = kNumOutputBuffers;
    mDefinition.nBufferSize = 4096 * kMaxOutPutChannels;
    mDefinition.nBufferAlignment = 2;
    mDefinition.format.audio.eEncoding = OMX_AUDIO_CodingPCM;
    // mDefinition.format.audio.cMIMEType = const_cast<char *>("audio/raw");
  } else {
    OMX_LOGE("Error dir %d\n", dir);
  }
  mDefinition.nBufferCountActual = mDefinition.nBufferCountMin;
  updateDomainParameter();
  InitOmxHeader(&mCodecParam.aac);
  mCodecParam.aac.nPortIndex = mDefinition.nPortIndex;
  mFormatHeadSize = 0;
  mPushedOffset = 0;
  mPushedBytes = 0;
  mIsADTS = OMX_TRUE;
  mAACHeader = NULL;
!!!11097740.cpp!!!	~OmxAmpAacPort()
  if (NULL != mAACHeader) {
    kdFree(mAACHeader);
    mAACHeader = NULL;
  }
!!!11097996.cpp!!!	setCodecParam(inout codec_param : OMX_AUDIO_PARAM_AACPROFILETYPE, inout esds : OMX_U8 = NULL) : void
  OMX_LOGD("setCodecParam codec_param %p mIsADTS %d esds %p\n",
      codec_param, mIsADTS, esds);
  if (codec_param != NULL) {
    mCodecParam.aac = *codec_param;
    OMX_LOGD("eAACStreamFormat %d\n", codec_param->eAACStreamFormat);
    if (codec_param->eAACStreamFormat == OMX_AUDIO_AACStreamFormatMP4ADTS) {
      mIsADTS = OMX_TRUE;
      // adts dont need to add header
      return;
    } else {
      mIsADTS = OMX_FALSE;
    }
  }
  if (mIsADTS == OMX_TRUE || esds == NULL) {
    return;
  }
  mFormatHeadSize = kADTSHeaderSize;
  mAACHeader = static_cast<OMX_U8 *>(kdMalloc(mFormatHeadSize));
  kdMemset(mAACHeader, 0x0, mFormatHeadSize);
  // add adts header from vendor/tv/frameworks/av/libs/mooplayer/ADTSHeaderWriter.cpp
  OMX_LOGD("esds[0] is %d esds[1] is %d\n", esds[0], esds[1]);
  OMX_U32 profileIndex = (esds[0] >> 3) - 1;
  OMX_U32 samplingFreqIndex = ((esds[0] << 1) | (esds[1] >> 7)) & 0xF;
  OMX_U32 channelCfgIndex = (esds[1] >> 3);
  OMX_LOGD("profileIndex %d samplingFreqIndex %d channelCfgIndex %d\n",
      profileIndex, samplingFreqIndex, channelCfgIndex);
  // Syncword 0xFFF;
  mAACHeader[0] = 0xFF;
  // MPEG-4; Layer = 0; Protection absent = 1;
  mAACHeader[1] = 0xF1;
  // Profile index; Sampling frequency index; private stream = 0;
  // Channel configuration index;
  mAACHeader[2] = ((profileIndex << 6) |
                       (samplingFreqIndex << 2) |
                       ((channelCfgIndex >> 2) & 0x1)) & 0xFF;
  // originality = 0; home = 0; copyrighted stream = 0;
  // copyrighted stream start = 0; Frame size = 0 (for template);
  mAACHeader[3] = (channelCfgIndex << 6) & 0xFF;
  mAACHeader[4] = 0;
  // Buffer fullness = 0x7FF (lie);
  mAACHeader[5] = 0x1F;
  // # of AAC frames - 1 = 0;
  mAACHeader[6] = 0xFC;
!!!11098124.cpp!!!	formatAudEsData(inout header : OMX_BUFFERHEADERTYPE) : OMX_U8
  if (mFormatHeadSize == 0 || header->nFilledLen == 0)
    return 0;
  OMX_U8 *src = header->pBuffer + header->nOffset;
  OMX_LOGD("filled old %ld, new %ld header %u",
      header->nFilledLen, header->nFilledLen + mFormatHeadSize, mFormatHeadSize);
  kdMemmove(src + mFormatHeadSize, src, header->nFilledLen);
  header->nFilledLen += mFormatHeadSize;
  kdMemcpy(src, mAACHeader, mFormatHeadSize);
  src[3] |= ((header->nFilledLen >> 11) & 3) & 0xFF;
  src[4] |= (header->nFilledLen >> 3) & 0xFF;
  src[5] |= (header->nFilledLen << 5) & 0xFF;

  return mFormatHeadSize;
