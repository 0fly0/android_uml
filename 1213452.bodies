class RingtoneManager
!!!6854540.java!!!	RingtoneManager(inout activity : Activity)
        mContext = mActivity = activity;
        setType(mType);
!!!6854668.java!!!	RingtoneManager(inout context : Context)
        mContext = context;
        setType(mType);
!!!6854796.java!!!	setType(in type : int) : void

        if (mCursor != null) {
            throw new IllegalStateException(
                    "Setting filter columns should be done before querying for ringtones.");
        }
        
        mType = type;
        setFilterColumnsList(type);
!!!6854924.java!!!	inferStreamType() : int
        switch (mType) {
            
            case TYPE_ALARM:
                return AudioManager.STREAM_ALARM;
                
            case TYPE_NOTIFICATION:
                return AudioManager.STREAM_NOTIFICATION;
                
            default:
                return AudioManager.STREAM_RING;
        }
!!!6855052.java!!!	setStopPreviousRingtone(inout stopPreviousRingtone : boolean) : void
        mStopPreviousRingtone = stopPreviousRingtone;
!!!6855180.java!!!	getStopPreviousRingtone() : boolean
        return mStopPreviousRingtone;
!!!6855308.java!!!	stopPreviousRingtone() : void
        if (mPreviousRingtone != null) {
            mPreviousRingtone.stop();
        }
!!!6855436.java!!!	getIncludeDrm() : boolean
        return mIncludeDrm;
!!!6855564.java!!!	setIncludeDrm(inout includeDrm : boolean) : void
        mIncludeDrm = includeDrm;
!!!6855692.java!!!	getCursor() : Cursor
        if (mCursor != null && mCursor.requery()) {
            return mCursor;
        }
        
        final Cursor internalCursor = getInternalRingtones();
        final Cursor drmCursor = mIncludeDrm ? getDrmRingtones() : null;
        final Cursor mediaCursor = getMediaRingtones();
             
        return mCursor = new SortCursor(new Cursor[] { internalCursor, drmCursor, mediaCursor },
                MediaStore.Audio.Media.DEFAULT_SORT_ORDER);
!!!6855820.java!!!	getRingtone(in position : int) : Ringtone
        if (mStopPreviousRingtone && mPreviousRingtone != null) {
            mPreviousRingtone.stop();
        }
        
        mPreviousRingtone = getRingtone(mContext, getRingtoneUri(position), inferStreamType());
        return mPreviousRingtone;
!!!6855948.java!!!	getRingtoneUri(in position : int) : Uri
        // use cursor directly instead of requerying it, which could easily
        // cause position to shuffle.
        if (mCursor == null || !mCursor.moveToPosition(position)) {
            return null;
        }
        
        return getUriFromCursor(mCursor);
!!!6856076.java!!!	getUriFromCursor(inout cursor : Cursor) : Uri
        return ContentUris.withAppendedId(Uri.parse(cursor.getString(URI_COLUMN_INDEX)), cursor
                .getLong(ID_COLUMN_INDEX));
!!!6856204.java!!!	getRingtonePosition(inout ringtoneUri : Uri) : int
        
        if (ringtoneUri == null) return -1;
        
        final Cursor cursor = getCursor();
        final int cursorCount = cursor.getCount();
        
        if (!cursor.moveToFirst()) {
            return -1;
        }
        
        // Only create Uri objects when the actual URI changes
        Uri currentUri = null;
        String previousUriString = null;
        for (int i = 0; i < cursorCount; i++) {
            String uriString = cursor.getString(URI_COLUMN_INDEX);
            if (currentUri == null || !uriString.equals(previousUriString)) {
                currentUri = Uri.parse(uriString);
            }
            
            if (ringtoneUri.equals(ContentUris.withAppendedId(currentUri, cursor
                    .getLong(ID_COLUMN_INDEX)))) {
                return i;
            }
            
            cursor.move(1);
            
            previousUriString = uriString;
        }
        
        return -1;
!!!6856332.java!!!	getValidRingtoneUri(inout context : Context) : Uri
        final RingtoneManager rm = new RingtoneManager(context);
        
        Uri uri = getValidRingtoneUriFromCursorAndClose(context, rm.getInternalRingtones());

        if (uri == null) {
            uri = getValidRingtoneUriFromCursorAndClose(context, rm.getMediaRingtones());
        }
        
        if (uri == null) {
            uri = getValidRingtoneUriFromCursorAndClose(context, rm.getDrmRingtones());
        }
        
        return uri;
!!!6856460.java!!!	getValidRingtoneUriFromCursorAndClose(inout context : Context, inout cursor : Cursor) : Uri
        if (cursor != null) {
            Uri uri = null;
            
            if (cursor.moveToFirst()) {
                uri = getUriFromCursor(cursor);
            }
            cursor.close();
            
            return uri;
        } else {
            return null;
        }
!!!6856588.java!!!	getInternalRingtones() : Cursor
        return query(
                MediaStore.Audio.Media.INTERNAL_CONTENT_URI, INTERNAL_COLUMNS,
                constructBooleanTrueWhereClause(mFilterColumns, mIncludeDrm),
                null, MediaStore.Audio.Media.DEFAULT_SORT_ORDER);
!!!6856716.java!!!	getDrmRingtones() : Cursor
        // DRM store does not have any columns to use for filtering 
        return query(
                DrmStore.Audio.CONTENT_URI, DRM_COLUMNS,
                null, null, DrmStore.Audio.TITLE);
!!!6856844.java!!!	getMediaRingtones() : Cursor
         // Get the external media cursor. First check to see if it is mounted.
        final String status = Environment.getExternalStorageState();
        
        return (status.equals(Environment.MEDIA_MOUNTED) ||
                    status.equals(Environment.MEDIA_MOUNTED_READ_ONLY))
                ? query(
                    MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, MEDIA_COLUMNS,
                    constructBooleanTrueWhereClause(mFilterColumns, mIncludeDrm), null,
                    MediaStore.Audio.Media.DEFAULT_SORT_ORDER)
                : null;
!!!6856972.java!!!	setFilterColumnsList(in type : int) : void
        List<String> columns = mFilterColumns;
        columns.clear();
        
        if ((type & TYPE_RINGTONE) != 0) {
            columns.add(MediaStore.Audio.AudioColumns.IS_RINGTONE);
        }
        
        if ((type & TYPE_NOTIFICATION) != 0) {
            columns.add(MediaStore.Audio.AudioColumns.IS_NOTIFICATION);
        }
        
        if ((type & TYPE_ALARM) != 0) {
            columns.add(MediaStore.Audio.AudioColumns.IS_ALARM);
        }
!!!6857100.java!!!	constructBooleanTrueWhereClause(inout columns : List<String>, inout includeDrm : boolean) : String
        
        if (columns == null) return null;
        
        StringBuilder sb = new StringBuilder();
        sb.append("(");

        for (int i = columns.size() - 1; i >= 0; i--) {
            sb.append(columns.get(i)).append("=1 or ");
        }
        
        if (columns.size() > 0) {
            // Remove last ' or '
            sb.setLength(sb.length() - 4);
        }

        sb.append(")");

        if (!includeDrm) {
            // If not DRM files should be shown, the where clause
            // will be something like "(is_notification=1) and is_drm=0"
            sb.append(" and ");
            sb.append(MediaStore.MediaColumns.IS_DRM);
            sb.append("=0");
        }


        return sb.toString();
!!!6857228.java!!!	query(inout uri : Uri, inout projection : String, in selection : String, inout selectionArgs : String, in sortOrder : String) : Cursor
        if (mActivity != null) {
            return mActivity.managedQuery(uri, projection, selection, selectionArgs, sortOrder);
        } else {
            return mContext.getContentResolver().query(uri, projection, selection, selectionArgs,
                    sortOrder);
        }
!!!6857356.java!!!	getRingtone(in context : Context, inout ringtoneUri : Uri) : Ringtone
        // Don't set the stream type
        return getRingtone(context, ringtoneUri, -1);
!!!6857484.java!!!	getRingtone(in context : Context, inout ringtoneUri : Uri, in streamType : int) : Ringtone
        try {
            final Ringtone r = new Ringtone(context, true);
            if (streamType >= 0) {
                r.setStreamType(streamType);
            }
            r.setUri(ringtoneUri);
            return r;
        } catch (Exception ex) {
            Log.e(TAG, "Failed to open ringtone " + ringtoneUri + ": " + ex);
        }

        return null;
!!!6857612.java!!!	getActualDefaultRingtoneUri(inout context : Context, in type : int) : Uri
        String setting = getSettingForType(type);
        if (setting == null) return null;
        final String uriString = Settings.System.getString(context.getContentResolver(), setting);
        return uriString != null ? Uri.parse(uriString) : null;
!!!6857740.java!!!	setActualDefaultRingtoneUri(inout context : Context, in type : int, inout ringtoneUri : Uri) : void
        String setting = getSettingForType(type);
        if (setting == null) return;
        Settings.System.putString(context.getContentResolver(), setting,
                ringtoneUri != null ? ringtoneUri.toString() : null);
!!!6857868.java!!!	getSettingForType(in type : int) : String
        if ((type & TYPE_RINGTONE) != 0) {
            return Settings.System.RINGTONE;
        } else if ((type & TYPE_NOTIFICATION) != 0) {
            return Settings.System.NOTIFICATION_SOUND;
        } else if ((type & TYPE_ALARM) != 0) {
            return Settings.System.ALARM_ALERT;
        } else {
            return null;
        }
!!!6857996.java!!!	isDefault(inout ringtoneUri : Uri) : boolean
        return getDefaultType(ringtoneUri) != -1;
!!!6858124.java!!!	getDefaultType(inout defaultRingtoneUri : Uri) : int
        if (defaultRingtoneUri == null) {
            return -1;
        } else if (defaultRingtoneUri.equals(Settings.System.DEFAULT_RINGTONE_URI)) {
            return TYPE_RINGTONE;
        } else if (defaultRingtoneUri.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
            return TYPE_NOTIFICATION;
        } else if (defaultRingtoneUri.equals(Settings.System.DEFAULT_ALARM_ALERT_URI)) {
            return TYPE_ALARM;
        } else {
            return -1;
        }
!!!6858252.java!!!	getDefaultUri(in type : int) : Uri
        if ((type & TYPE_RINGTONE) != 0) {
            return Settings.System.DEFAULT_RINGTONE_URI;
        } else if ((type & TYPE_NOTIFICATION) != 0) {
            return Settings.System.DEFAULT_NOTIFICATION_URI;
        } else if ((type & TYPE_ALARM) != 0) {
            return Settings.System.DEFAULT_ALARM_ALERT_URI;
        } else {
            return null;
        }
