class Socket
!!!607899.java!!!	Socket()
        this.impl = factory != null ? factory.createSocketImpl() : new PlainSocketImpl();
        this.proxy = null;
!!!608027.java!!!	Socket(inout proxy : Proxy)
        if (proxy == null || proxy.type() == Proxy.Type.HTTP) {
            throw new IllegalArgumentException("Invalid proxy: " + proxy);
        }
        this.proxy = proxy;
        this.impl = factory != null ? factory.createSocketImpl() : new PlainSocketImpl(proxy);
!!!608155.java!!!	tryAllAddresses(inout dstName : String, in dstPort : int, inout localAddress : InetAddress, in localPort : int, inout streaming : boolean) : void
        InetAddress[] dstAddresses = InetAddress.getAllByName(dstName);
        // Loop through all the destination addresses except the last, trying to
        // connect to each one and ignoring errors. There must be at least one
        // address, or getAllByName would have thrown UnknownHostException.
        InetAddress dstAddress;
        for (int i = 0; i < dstAddresses.length - 1; i++) {
            dstAddress = dstAddresses[i];
            try {
                checkDestination(dstAddress, dstPort);
                startupSocket(dstAddress, dstPort, localAddress, localPort, streaming);
                return;
            } catch (IOException ex) {
            }
        }

        // Now try to connect to the last address in the array, handing back to
        // the caller any exceptions that are thrown.
        dstAddress = dstAddresses[dstAddresses.length - 1];
        checkDestination(dstAddress, dstPort);
        startupSocket(dstAddress, dstPort, localAddress, localPort, streaming);
!!!608283.java!!!	Socket(inout dstName : String, in dstPort : int)
        this(dstName, dstPort, null, 0);
!!!608411.java!!!	Socket(inout dstName : String, in dstPort : int, inout localAddress : InetAddress, in localPort : int)
        this();
        tryAllAddresses(dstName, dstPort, localAddress, localPort, true);
!!!608539.java!!!	Socket(inout hostName : String, in port : int, inout streaming : boolean)
        this();
        tryAllAddresses(hostName, port, null, 0, streaming);
!!!608667.java!!!	Socket(inout dstAddress : InetAddress, in dstPort : int)
        this();
        checkDestination(dstAddress, dstPort);
        startupSocket(dstAddress, dstPort, null, 0, true);
!!!608795.java!!!	Socket(inout dstAddress : InetAddress, in dstPort : int, inout localAddress : InetAddress, in localPort : int)
        this();
        checkDestination(dstAddress, dstPort);
        startupSocket(dstAddress, dstPort, localAddress, localPort, true);
!!!608923.java!!!	Socket(inout addr : InetAddress, in port : int, inout streaming : boolean)
        this();
        checkDestination(addr, port);
        startupSocket(addr, port, null, 0, streaming);
!!!609051.java!!!	Socket(inout impl : SocketImpl)
        this.impl = impl;
        this.proxy = null;
!!!609179.java!!!	checkDestination(inout destAddr : InetAddress, in dstPort : int) : void
        if (dstPort < 0 || dstPort > 65535) {
            throw new IllegalArgumentException("Port out of range: " + dstPort);
        }
!!!609307.java!!!	close() : void
        isClosed = true;
        // RI compatibility: the RI returns the any address (but the original local port) after close.
        localAddress = Inet4Address.ANY;
        impl.close();
!!!609435.java!!!	getInetAddress() : InetAddress
        if (!isConnected()) {
            return null;
        }
        return impl.getInetAddress();
!!!609563.java!!!	getInputStream() : InputStream
        checkOpenAndCreate(false);
        if (isInputShutdown()) {
            throw new SocketException("Socket input is shutdown");
        }
        return impl.getInputStream();
!!!609691.java!!!	getKeepAlive() : boolean
        checkOpenAndCreate(true);
        return (Boolean) impl.getOption(SocketOptions.SO_KEEPALIVE);
!!!609819.java!!!	getLocalAddress() : InetAddress
        return localAddress;
!!!609947.java!!!	getLocalPort() : int
        if (!isBound()) {
            return -1;
        }
        return impl.getLocalPort();
!!!610075.java!!!	getOutputStream() : OutputStream
        checkOpenAndCreate(false);
        if (isOutputShutdown()) {
            throw new SocketException("Socket output is shutdown");
        }
        return impl.getOutputStream();
!!!610203.java!!!	getPort() : int
        if (!isConnected()) {
            return 0;
        }
        return impl.getPort();
!!!610331.java!!!	getSoLinger() : int
        checkOpenAndCreate(true);
        // The RI explicitly guarantees this idiocy in the SocketOptions.setOption documentation.
        Object value = impl.getOption(SocketOptions.SO_LINGER);
        if (value instanceof Integer) {
            return (Integer) value;
        } else {
            return -1;
        }
!!!610459.java!!!	getReceiveBufferSize() : int
        checkOpenAndCreate(true);
        return (Integer) impl.getOption(SocketOptions.SO_RCVBUF);
!!!610587.java!!!	getSendBufferSize() : int
        checkOpenAndCreate(true);
        return (Integer) impl.getOption(SocketOptions.SO_SNDBUF);
!!!610715.java!!!	getSoTimeout() : int
        checkOpenAndCreate(true);
        return (Integer) impl.getOption(SocketOptions.SO_TIMEOUT);
!!!610843.java!!!	getTcpNoDelay() : boolean
        checkOpenAndCreate(true);
        return (Boolean) impl.getOption(SocketOptions.TCP_NODELAY);
!!!610971.java!!!	setKeepAlive(inout keepAlive : boolean) : void
        if (impl != null) {
            checkOpenAndCreate(true);
            impl.setOption(SocketOptions.SO_KEEPALIVE, Boolean.valueOf(keepAlive));
        }
!!!611099.java!!!	setSocketImplFactory(inout fac : SocketImplFactory) : void
        if (factory != null) {
            throw new SocketException("Factory already set");
        }
        factory = fac;
!!!611227.java!!!	setSendBufferSize(in size : int) : void
        checkOpenAndCreate(true);
        if (size < 1) {
            throw new IllegalArgumentException("size < 1");
        }
        impl.setOption(SocketOptions.SO_SNDBUF, Integer.valueOf(size));
!!!611355.java!!!	setReceiveBufferSize(in size : int) : void
        checkOpenAndCreate(true);
        if (size < 1) {
            throw new IllegalArgumentException("size < 1");
        }
        impl.setOption(SocketOptions.SO_RCVBUF, Integer.valueOf(size));
!!!611483.java!!!	setSoLinger(inout on : boolean, in timeout : int) : void
        checkOpenAndCreate(true);
        // The RI explicitly guarantees this idiocy in the SocketOptions.setOption documentation.
        if (on && timeout < 0) {
            throw new IllegalArgumentException("timeout < 0");
        }
        if (on) {
            impl.setOption(SocketOptions.SO_LINGER, Integer.valueOf(timeout));
        } else {
            impl.setOption(SocketOptions.SO_LINGER, Boolean.FALSE);
        }
!!!611611.java!!!	setSoTimeout(in timeout : int) : void
        checkOpenAndCreate(true);
        if (timeout < 0) {
            throw new IllegalArgumentException("timeout < 0");
        }
        impl.setOption(SocketOptions.SO_TIMEOUT, Integer.valueOf(timeout));
!!!611739.java!!!	setTcpNoDelay(inout on : boolean) : void
        checkOpenAndCreate(true);
        impl.setOption(SocketOptions.TCP_NODELAY, Boolean.valueOf(on));
!!!611867.java!!!	startupSocket(inout dstAddress : InetAddress, in dstPort : int, inout localAddress : InetAddress, in localPort : int, inout streaming : boolean) : void

        if (localPort < 0 || localPort > 65535) {
            throw new IllegalArgumentException("Local port out of range: " + localPort);
        }

        InetAddress addr = localAddress == null ? Inet4Address.ANY : localAddress;
        synchronized (this) {
            impl.create(streaming);
            isCreated = true;
            try {
                if (!streaming || !usingSocks()) {
                    impl.bind(addr, localPort);
                }
                isBound = true;
                impl.connect(dstAddress, dstPort);
                isConnected = true;
                cacheLocalAddress();
            } catch (IOException e) {
                impl.close();
                throw e;
            }
        }
!!!611995.java!!!	usingSocks() : boolean
        return proxy != null && proxy.type() == Proxy.Type.SOCKS;
!!!612123.java!!!	toString() : String
        if (!isConnected()) {
            return "Socket[unconnected]";
        }
        return impl.toString();
!!!612251.java!!!	shutdownInput() : void
        if (isInputShutdown()) {
            throw new SocketException("Socket input is shutdown");
        }
        checkOpenAndCreate(false);
        impl.shutdownInput();
        isInputShutdown = true;
!!!612379.java!!!	shutdownOutput() : void
        if (isOutputShutdown()) {
            throw new SocketException("Socket output is shutdown");
        }
        checkOpenAndCreate(false);
        impl.shutdownOutput();
        isOutputShutdown = true;
!!!612507.java!!!	checkOpenAndCreate(inout create : boolean) : void
        if (isClosed()) {
            throw new SocketException("Socket is closed");
        }
        if (!create) {
            if (!isConnected()) {
                throw new SocketException("Socket is not connected");
                // a connected socket must be created
            }

            /*
             * return directly to fix a possible bug, if !create, should return
             * here
             */
            return;
        }
        if (isCreated) {
            return;
        }
        synchronized (this) {
            if (isCreated) {
                return;
            }
            try {
                impl.create(true);
            } catch (SocketException e) {
                throw e;
            } catch (IOException e) {
                throw new SocketException(e.toString());
            }
            isCreated = true;
        }
!!!612635.java!!!	getLocalSocketAddress() : SocketAddress
        if (!isBound()) {
            return null;
        }
        return new InetSocketAddress(getLocalAddress(), getLocalPort());
!!!612763.java!!!	getRemoteSocketAddress() : SocketAddress
        if (!isConnected()) {
            return null;
        }
        return new InetSocketAddress(getInetAddress(), getPort());
!!!612891.java!!!	isBound() : boolean
        return isBound;
!!!613019.java!!!	isConnected() : boolean
        return isConnected;
!!!613147.java!!!	isClosed() : boolean
        return isClosed;
!!!613275.java!!!	bind(inout localAddr : SocketAddress) : void
        checkOpenAndCreate(true);
        if (isBound()) {
            throw new BindException("Socket is already bound");
        }

        int port = 0;
        InetAddress addr = Inet4Address.ANY;
        if (localAddr != null) {
            if (!(localAddr instanceof InetSocketAddress)) {
                throw new IllegalArgumentException("Local address not an InetSocketAddress: " +
                        localAddr.getClass());
            }
            InetSocketAddress inetAddr = (InetSocketAddress) localAddr;
            if ((addr = inetAddr.getAddress()) == null) {
                throw new UnknownHostException("Host is unresolved: " + inetAddr.getHostName());
            }
            port = inetAddr.getPort();
        }

        synchronized (this) {
            try {
                impl.bind(addr, port);
                isBound = true;
                cacheLocalAddress();
            } catch (IOException e) {
                impl.close();
                throw e;
            }
        }
!!!613403.java!!!	connect(inout remoteAddr : SocketAddress) : void
        connect(remoteAddr, 0);
!!!613531.java!!!	connect(inout remoteAddr : SocketAddress, in timeout : int) : void
        checkOpenAndCreate(true);
        if (timeout < 0) {
            throw new IllegalArgumentException("timeout < 0");
        }
        if (isConnected()) {
            throw new SocketException("Already connected");
        }
        if (remoteAddr == null) {
            throw new IllegalArgumentException("remoteAddr == null");
        }

        if (!(remoteAddr instanceof InetSocketAddress)) {
            throw new IllegalArgumentException("Remote address not an InetSocketAddress: " +
                    remoteAddr.getClass());
        }
        InetSocketAddress inetAddr = (InetSocketAddress) remoteAddr;
        InetAddress addr;
        if ((addr = inetAddr.getAddress()) == null) {
            throw new UnknownHostException("Host is unresolved: " + inetAddr.getHostName());
        }
        int port = inetAddr.getPort();

        checkDestination(addr, port);
        synchronized (connectLock) {
            try {
                if (!isBound()) {
                    // socket already created at this point by earlier call or
                    // checkOpenAndCreate this caused us to lose socket
                    // options on create
                    // impl.create(true);
                    if (!usingSocks()) {
                        impl.bind(Inet4Address.ANY, 0);
                    }
                    isBound = true;
                }
                impl.connect(remoteAddr, timeout);
                isConnected = true;
                cacheLocalAddress();
            } catch (IOException e) {
                impl.close();
                throw e;
            }
        }
!!!613659.java!!!	isInputShutdown() : boolean
        return isInputShutdown;
!!!613787.java!!!	isOutputShutdown() : boolean
        return isOutputShutdown;
!!!613915.java!!!	setReuseAddress(inout reuse : boolean) : void
        checkOpenAndCreate(true);
        impl.setOption(SocketOptions.SO_REUSEADDR, Boolean.valueOf(reuse));
!!!614043.java!!!	getReuseAddress() : boolean
        checkOpenAndCreate(true);
        return (Boolean) impl.getOption(SocketOptions.SO_REUSEADDR);
!!!614171.java!!!	setOOBInline(inout oobinline : boolean) : void
        checkOpenAndCreate(true);
        impl.setOption(SocketOptions.SO_OOBINLINE, Boolean.valueOf(oobinline));
!!!614299.java!!!	getOOBInline() : boolean
        checkOpenAndCreate(true);
        return (Boolean) impl.getOption(SocketOptions.SO_OOBINLINE);
!!!614427.java!!!	setTrafficClass(in value : int) : void
        checkOpenAndCreate(true);
        if (value < 0 || value > 255) {
            throw new IllegalArgumentException("Value doesn't fit in an unsigned byte: " + value);
        }
        impl.setOption(SocketOptions.IP_TOS, Integer.valueOf(value));
!!!614555.java!!!	getTrafficClass() : int
        checkOpenAndCreate(true);
        return (Integer) impl.getOption(SocketOptions.IP_TOS);
!!!614683.java!!!	sendUrgentData(in value : int) : void
        impl.sendUrgentData(value);
!!!614811.java!!!	accepted() : void
        isCreated = isBound = isConnected = true;
        cacheLocalAddress();
!!!614939.java!!!	cacheLocalAddress() : void
        this.localAddress = IoBridge.getSocketLocalAddress(impl.fd);
!!!615067.java!!!	getChannel() : SocketChannel
        return null;
!!!615195.java!!!	getFileDescriptor$() : FileDescriptor
        return impl.fd;
!!!615323.java!!!	setPerformancePreferences(in connectionTime : int, in latency : int, in bandwidth : int) : void
        // Our socket implementation only provide one protocol: TCP/IP, so
        // we do nothing for this method
