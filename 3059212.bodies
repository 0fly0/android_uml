class TtmlTimedTextView
!!!13324684.java!!!	TtmlTimedTextView(inout context : Context)
        super(context);
        GtvResources gtvResources = new GtvResources(context);
        LayoutInflater inflater = gtvResources.getLayoutInflater();
        mRoot = inflater.inflate(R.layout.ttml_timed_text_view, null);
        this.addView(mRoot);
        mOriginX = findViewById(R.id.origin_x);
        mOriginY = findViewById(R.id.origin_y);
        mExtentX = findViewById(R.id.extent_x);
        mExtentY = findViewById(R.id.extent_y);
        mTextView = (TextView) mExtentY;
!!!13324812.java!!!	onTimedText(inout gmp : GtvMediaPlayer, inout timedText : GtvTimedText) : void
        if (timedText != null) {
            String ttml = timedText.getTtmlFragment();
            if (ttml != null) {
                try {
                    setTtml(ttml);
                    return;
                } catch (XmlPullParserException e) {
                    // This case will be handled in the end of this method.
                } catch (IOException e) {
                    // This case will be handled in the end of this method.
                }
            } else {
                mTextView.setText(timedText.getText());
                return;
            }
        }
        mTextView.setText("");
!!!13324940.java!!!	setTtml(in ttml : String) : void
        // TODO: need to reset the attributes of the views.
        // TODO: we may need to do the parsing work in background.
        TtmlFragmentParser parser = new TtmlFragmentParser();
        parser.setTtmlFragment(ttml);
        List<StyledText> result = parser.getResult();

        if (result.isEmpty()) {
            return;
        }
        // TODO: use different layout for each text segment.
        // Each text segment may have different layout, but we assume that
        // they are using the same one for now.
        setLayout(result.get(0).style);

        StringBuilder html = new StringBuilder();
        for (StyledText styledText : result) {
            convertStyledTextToHtml(styledText, html);
        }
        Log.v(TAG, html.toString());
        mTextView.setText(Html.fromHtml(html.toString()));
!!!13325068.java!!!	setLayout(inout layout : Style) : void
        if (layout.origin != null) {
            setOrigin(layout.origin);
        }
        if (layout.extent != null) {
            setExtent(layout.extent);
        }
        if (layout.fontSize != null) {
            setFontSize(layout.fontSize);
        }
        setAlign(layout.textAlign, layout.displayAlign);
        // TODO: support the background color property.
!!!13325196.java!!!	setOrigin(in origin : String) : void
        Matcher matcher = sOriginPattern.matcher(origin);
        if (!matcher.find() || matcher.groupCount() != 2) {
            Log.w(TAG, "Unsupported origin format : " + origin);
            return;
        }
        String x = matcher.group(1);
        LinearLayout.LayoutParams params =
            (LayoutParams) mOriginX.getLayoutParams();
        params.weight = Float.parseFloat(x);
        mOriginX.setLayoutParams(params);

        String y = matcher.group(2);
        params = (LayoutParams) mOriginY.getLayoutParams();
        params.weight = Float.parseFloat(y);
        mOriginY.setLayoutParams(params);
!!!13325324.java!!!	setExtent(in extent : String) : void
        Matcher matcher = sExtentPattern.matcher(extent);
        if (!matcher.find() || matcher.groupCount() != 2) {
            Log.w(TAG, "Unsupported extent format : " + extent);
            return;
        }
        String x = matcher.group(1);
        LinearLayout.LayoutParams params =
                (LayoutParams) mExtentX.getLayoutParams();
        params.weight = Float.parseFloat(x);
        mExtentX.setLayoutParams(params);

        String y = matcher.group(2);
        params = (LayoutParams) mExtentY.getLayoutParams();
        params.weight = Float.parseFloat(y);
        mExtentY.setLayoutParams(params);
!!!13325452.java!!!	setAlign(in textAlign : String, in displayAlign : String) : void
        int gravity = 0;
        if (textAlign != null) {
            if (textAlign.equalsIgnoreCase("left")) {
                gravity |= Gravity.LEFT;
            } else if (textAlign.equalsIgnoreCase("center")) {
                gravity |= Gravity.CENTER_HORIZONTAL;
            } else if (textAlign.equalsIgnoreCase("right")) {
                gravity |= Gravity.RIGHT;
            } else {
                Log.w(TAG, "Unsupported text align value : " + textAlign);
            }
        }
        if (displayAlign != null) {
            if (textAlign.equalsIgnoreCase("before")) {
                gravity |= Gravity.TOP;
            } else if (displayAlign.equalsIgnoreCase("center")) {
                gravity |= Gravity.CENTER_VERTICAL;
            } else if (displayAlign.equalsIgnoreCase("after")) {
                gravity |= Gravity.BOTTOM;
            } else {
                Log.w(TAG, "Unsupported display align value : " + displayAlign);
            }
        }
        if (textAlign != null || displayAlign != null) {
            mTextView.setGravity(gravity);
        }
!!!13325580.java!!!	setFontSize(in fontSize : String) : void
        Matcher matcher = sFontSizePattern.matcher(fontSize);
        if (!matcher.find() || matcher.groupCount() != 1) {
            Log.w(TAG, "Unsupported font size format : " + fontSize);
            return;
        }
        String size = matcher.group(1);
        mTextView.setTextSize(
                TypedValue.COMPLEX_UNIT_DIP, Float.parseFloat(size));
!!!13325708.java!!!	convertStyledTextToHtml(inout styledText : StyledText, inout html : StringBuilder) : void
        if (styledText.text == null || styledText.text.isEmpty()) {
            return;
        }

        Style style = styledText.style;
        boolean isItalic = (style.fontStyle != null
                && (style.fontStyle.equalsIgnoreCase("italic")
                        || style.fontStyle.equalsIgnoreCase("oblique")));
        boolean isBold = (style.fontWeight != null
                && style.fontWeight.equalsIgnoreCase("bold"));


        html.append("<font");
        // TODO: support the background color and font size property.
        if (style.color != null) {
            // TODO: Android TextView understand formats like "red" or
            //       "#ff0000", but doesn't work for the format like
            //       "rgb(255,0,0)". Needs a conversion.
            html.append(" color=").append(style.color);
        }
        if (style.fontFamily != null) {
            html.append(" face=").append(style.fontFamily);
        }
        html.append(">");
        if (isItalic) {
            html.append("<i>");
        }
        if (isBold) {
            html.append("<b>");
        }
        html.append(styledText.text);
        if (isBold) {
            html.append("</b>");
        }
        if (isItalic) {
            html.append("</i>");
        }
        html.append("</font>");
