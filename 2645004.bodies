class OmxAmpMsMpeg4Port
!!!11129868.cpp!!!	OmxAmpMsMpeg4Port(in index : OMX_U32, in dir : OMX_DIRTYPE)
  mDefinition.nPortIndex = index;
  mDefinition.eDir = dir;
  mDefinition.eDomain = OMX_PortDomainVideo;
  getVideoDefinition().eCompressionFormat =
      static_cast<OMX_VIDEO_CODINGTYPE>(OMX_VIDEO_CodingMSMPEG4);
  getVideoDefinition().eColorFormat = OMX_COLOR_FormatUnused;
  getVideoDefinition().nFrameWidth = 176;
  getVideoDefinition().nFrameHeight = 144;
  getVideoDefinition().nBitrate = 64000;
  getVideoDefinition().xFramerate = 15<<16;
  updateDomainParameter();
  mFormatHeadSize = sizeof(MRVL_DIVX_SEQUENCE_Hdr) + sizeof(MRVL_DIVX_FRAME_Hdr);
  pMsmpeg4Hdr = reinterpret_cast<OMX_U8 *>(kdMalloc(mFormatHeadSize));
  pSeqHeader = reinterpret_cast<MRVL_DIVX_SEQUENCE_Hdr *>(pMsmpeg4Hdr);
  pSeqHeader->start_code = 0x010000;
  pSeqHeader->packet_type = 0xB0;
  pSeqHeader->reserved = 0x00;
  pSeqHeader->marker_byte_0 = 0x88;
  pSeqHeader->marker_byte_1 = 0x88;
  pSeqHeader->marker_byte_2 = 0x88;
  pSeqHeader->marker_byte_3 = 0x88;
  pSeqHeader->packet_payload_len_msb = 0x00;
  pSeqHeader->packet_payload_len_lsb = static_cast<uint16_t> (4 << 8);
  pSeqHeader->packet_padding_len = 0;
  pSeqHeader->pic_dis_width = 0;
  pSeqHeader->pic_dis_height = 0;
  pFrameHdr = reinterpret_cast<MRVL_DIVX_FRAME_Hdr *>(pMsmpeg4Hdr +
      sizeof(MRVL_DIVX_SEQUENCE_Hdr));
  pFrameHdr->start_code = 0x010000;
  pFrameHdr->packet_type = 0xB6;
  pFrameHdr->reserved = 0x00;
  pFrameHdr->marker_byte_0 = 0x88;
  pFrameHdr->marker_byte_1 = 0x88;
  pFrameHdr->marker_byte_2 = 0x88;
  pFrameHdr->marker_byte_3 = 0x88;
  pFrameHdr->packet_payload_len_msb = 0;
  pFrameHdr->packet_payload_len_lsb = 0;
  pFrameHdr->packet_padding_len = 0;
!!!11129996.cpp!!!	~OmxAmpMsMpeg4Port()
  if (NULL != pMsmpeg4Hdr) {
    kdFree(pMsmpeg4Hdr);
    pMsmpeg4Hdr = NULL;
  }
!!!11130124.cpp!!!	formatEsData(inout header : OMX_BUFFERHEADERTYPE, in isPadding : OMX_BOOL) : void
  OMX_U8 *buf = header->pBuffer + header->nOffset;
  OMX_U32 len = header->nFilledLen - mCodecDataSize;
  OMX_U32 copy_size;
  OMX_U8 *copy_header;
  if (mCodecDataSize || mIsFirstFrame) {
    copy_size = mFormatHeadSize;
    kdMemmove(buf + copy_size, buf + mCodecDataSize, len);
    pSeqHeader->pic_dis_width = SWAPSHORT(getVideoDefinition().nFrameWidth & 0xffff);
    pSeqHeader->pic_dis_height = SWAPSHORT(getVideoDefinition().nFrameHeight & 0xffff);
    copy_header = reinterpret_cast<OMX_U8 *>(pSeqHeader);
    mCodecDataSize = 0;
    mIsFirstFrame = OMX_FALSE;
    OMX_LOGD("msmpeg4 add sequence header, height = %d  width = %d.",
        pSeqHeader->pic_dis_height, pSeqHeader->pic_dis_width);
  } else {
    copy_size = sizeof(MRVL_DIVX_FRAME_Hdr);
    kdMemmove(buf + copy_size, buf, len);
    copy_header = reinterpret_cast<OMX_U8 *>(pFrameHdr);
  }
  if (isPadding) {
    header->nFilledLen = (len + copy_size + kDivx3PaddingLen -1) & (~(kDivx3PaddingLen -1));
  } else {
    header->nFilledLen = len + copy_size;
  }
  pFrameHdr->packet_payload_len_msb = SWAPSHORT(len >> 16);
  pFrameHdr->packet_payload_len_lsb = SWAPSHORT(len & 0xffff);
  OMX_U32 padding_size = header->nFilledLen - len - copy_size;
  pFrameHdr->packet_padding_len = SWAPSHORT(padding_size & 0xffff);
  kdMemcpy(buf, copy_header, copy_size);
  if (0 != padding_size) {
    kdMemset(buf + copy_size + len, 0x88, padding_size);
  }
