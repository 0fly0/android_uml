class FormatToken
!!!1279515.java!!!	isDefault() : boolean
            return !flagComma && !flagMinus && !flagParenthesis && !flagPlus && !flagSharp &&
                    !flagSpace && !flagZero && width == UNSET && precision == UNSET;
!!!1279643.java!!!	isPrecisionSet() : boolean
            return precision != UNSET;
!!!1279771.java!!!	getArgIndex() : int
            return argIndex;
!!!1279899.java!!!	setArgIndex(in index : int) : void
            argIndex = index;
!!!1280027.java!!!	getWidth() : int
            return width;
!!!1280155.java!!!	setWidth(in width : int) : void
            this.width = width;
!!!1280283.java!!!	getPrecision() : int
            return precision;
!!!1280411.java!!!	setPrecision(in precise : int) : void
            this.precision = precise;
!!!1280539.java!!!	getStrFlags() : String
            return (strFlags != null) ? strFlags.toString() : "";
!!!1280667.java!!!	setFlag(in ch : int) : boolean
            boolean dupe = false;
            switch (ch) {
            case ',':
                dupe = flagComma;
                flagComma = true;
                break;
            case '-':
                dupe = flagMinus;
                flagMinus = true;
                break;
            case '(':
                dupe = flagParenthesis;
                flagParenthesis = true;
                break;
            case '+':
                dupe = flagPlus;
                flagPlus = true;
                break;
            case '#':
                dupe = flagSharp;
                flagSharp = true;
                break;
            case ' ':
                dupe = flagSpace;
                flagSpace = true;
                break;
            case '0':
                dupe = flagZero;
                flagZero = true;
                break;
            default:
                return false;
            }
            if (dupe) {
                // The RI documentation implies we're supposed to report all the flags, not just
                // the first duplicate, but the RI behaves the same as we do.
                throw new DuplicateFormatFlagsException(String.valueOf(ch));
            }
            if (strFlags == null) {
                strFlags = new StringBuilder(7); // There are seven possible flags.
            }
            strFlags.append((char) ch);
            return true;
!!!1280795.java!!!	getConversionType() : char
            return conversionType;
!!!1280923.java!!!	setConversionType(in c : char) : void
            conversionType = c;
!!!1281051.java!!!	getDateSuffix() : char
            return dateSuffix;
!!!1281179.java!!!	setDateSuffix(in c : char) : void
            dateSuffix = c;
!!!1281307.java!!!	requireArgument() : boolean
            return conversionType != '%' && conversionType != 'n';
!!!1281435.java!!!	checkFlags(inout arg : Object) : void
            // Work out which flags are allowed.
            boolean allowComma = false;
            boolean allowMinus = true;
            boolean allowParenthesis = false;
            boolean allowPlus = false;
            boolean allowSharp = false;
            boolean allowSpace = false;
            boolean allowZero = false;
            // Precision and width?
            boolean allowPrecision = true;
            boolean allowWidth = true;
            // Argument?
            boolean allowArgument = true;
            switch (conversionType) {
            // Character and date/time.
            case 'c': case 'C': case 't': case 'T':
                // Only '-' is allowed.
                allowPrecision = false;
                break;

            // String.
            case 's': case 'S':
                if (arg instanceof Formattable) {
                    allowSharp = true;
                }
                break;

            // Floating point.
            case 'g': case 'G':
                allowComma = allowParenthesis = allowPlus = allowSpace = allowZero = true;
                break;
            case 'f':
                allowComma = allowParenthesis = allowPlus = allowSharp = allowSpace = allowZero = true;
                break;
            case 'e': case 'E':
                allowParenthesis = allowPlus = allowSharp = allowSpace = allowZero = true;
                break;
            case 'a': case 'A':
                allowPlus = allowSharp = allowSpace = allowZero = true;
                break;

            // Integral.
            case 'd':
                allowComma = allowParenthesis = allowPlus = allowSpace = allowZero = true;
                allowPrecision = false;
                break;
            case 'o': case 'x': case 'X':
                allowSharp = allowZero = true;
                if (arg == null || arg instanceof BigInteger) {
                    allowParenthesis = allowPlus = allowSpace = true;
                }
                allowPrecision = false;
                break;

            // Special.
            case 'n':
                // Nothing is allowed.
                allowMinus = false;
                allowArgument = allowPrecision = allowWidth = false;
                break;
            case '%':
                // The only flag allowed is '-', and no argument or precision is allowed.
                allowArgument = false;
                allowPrecision = false;
                break;

            // Booleans and hash codes.
            case 'b': case 'B': case 'h': case 'H':
                break;

            default:
                throw unknownFormatConversionException();
            }

            // Check for disallowed flags.
            String mismatch = null;
            if (!allowComma && flagComma) {
                mismatch = ",";
            } else if (!allowMinus && flagMinus) {
                mismatch = "-";
            } else if (!allowParenthesis && flagParenthesis) {
                mismatch = "(";
            } else if (!allowPlus && flagPlus) {
                mismatch = "+";
            } else if (!allowSharp && flagSharp) {
                mismatch = "#";
            } else if (!allowSpace && flagSpace) {
                mismatch = " ";
            } else if (!allowZero && flagZero) {
                mismatch = "0";
            }
            if (mismatch != null) {
                if (conversionType == 'n') {
                    // For no good reason, %n is a special case...
                    throw new IllegalFormatFlagsException(mismatch);
                } else {
                    throw new FormatFlagsConversionMismatchException(mismatch, conversionType);
                }
            }

            // Check for a missing width with flags that require a width.
            if ((flagMinus || flagZero) && width == UNSET) {
                throw new MissingFormatWidthException("-" + conversionType);
            }

            // Check that no-argument conversion types don't have an argument.
            // Note: the RI doesn't enforce this.
            if (!allowArgument && argIndex != UNSET) {
                throw new IllegalFormatFlagsException("%" + conversionType +
                        " doesn't take an argument");
            }

            // Check that we don't have a precision or width where they're not allowed.
            if (!allowPrecision && precision != UNSET) {
                throw new IllegalFormatPrecisionException(precision);
            }
            if (!allowWidth && width != UNSET) {
                throw new IllegalFormatWidthException(width);
            }

            // Some combinations make no sense...
            if (flagPlus && flagSpace) {
                throw new IllegalFormatFlagsException("the '+' and ' ' flags are incompatible");
            }
            if (flagMinus && flagZero) {
                throw new IllegalFormatFlagsException("the '-' and '0' flags are incompatible");
            }
!!!1281563.java!!!	unknownFormatConversionException() : UnknownFormatConversionException
            if (conversionType == 't' || conversionType == 'T') {
                throw new UnknownFormatConversionException(String.format("%c%c",
                        conversionType, dateSuffix));
            }
            throw new UnknownFormatConversionException(String.valueOf(conversionType));
