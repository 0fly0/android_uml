class Paint
!!!4220556.java!!!	Paint()
        this(0);
!!!4220684.java!!!	Paint(in flags : int)
        mNativePaint = native_init();
        setFlags(flags | DEFAULT_PAINT_FLAGS);
        // TODO: Turning off hinting has undesirable side effects, we need to
        //       revisit hinting once we add support for subpixel positioning
        // setHinting(DisplayMetrics.DENSITY_DEVICE >= DisplayMetrics.DENSITY_TV
        //        ? HINTING_OFF : HINTING_ON);
        mCompatScaling = mInvCompatScaling = 1;
        setTextLocale(Locale.getDefault());
!!!4220812.java!!!	Paint(inout paint : Paint)
        mNativePaint = native_initWithPaint(paint.mNativePaint);
        setClassVariablesFrom(paint);
!!!4220940.java!!!	reset() : void
        native_reset(mNativePaint);
        setFlags(DEFAULT_PAINT_FLAGS);

        // TODO: Turning off hinting has undesirable side effects, we need to
        //       revisit hinting once we add support for subpixel positioning
        // setHinting(DisplayMetrics.DENSITY_DEVICE >= DisplayMetrics.DENSITY_TV
        //        ? HINTING_OFF : HINTING_ON);

        mColorFilter = null;
        mMaskFilter = null;
        mPathEffect = null;
        mRasterizer = null;
        mShader = null;
        mTypeface = null;
        mXfermode = null;

        mHasCompatScaling = false;
        mCompatScaling = 1;
        mInvCompatScaling = 1;

        hasShadow = false;
        shadowDx = 0;
        shadowDy = 0;
        shadowRadius = 0;
        shadowColor = 0;

        mBidiFlags = BIDI_DEFAULT_LTR;
        setTextLocale(Locale.getDefault());
!!!4221068.java!!!	set(inout src : Paint) : void
        if (this != src) {
            // copy over the native settings
            native_set(mNativePaint, src.mNativePaint);
            setClassVariablesFrom(src);
        }
!!!4221196.java!!!	setClassVariablesFrom(inout paint : Paint) : void
        mColorFilter = paint.mColorFilter;
        mMaskFilter = paint.mMaskFilter;
        mPathEffect = paint.mPathEffect;
        mRasterizer = paint.mRasterizer;
        mShader = paint.mShader;
        mTypeface = paint.mTypeface;
        mXfermode = paint.mXfermode;

        mHasCompatScaling = paint.mHasCompatScaling;
        mCompatScaling = paint.mCompatScaling;
        mInvCompatScaling = paint.mInvCompatScaling;

        hasShadow = paint.hasShadow;
        shadowDx = paint.shadowDx;
        shadowDy = paint.shadowDy;
        shadowRadius = paint.shadowRadius;
        shadowColor = paint.shadowColor;

        mBidiFlags = paint.mBidiFlags;
        mLocale = paint.mLocale;
!!!4221324.java!!!	setCompatibilityScaling(in factor : float) : void
        if (factor == 1.0) {
            mHasCompatScaling = false;
            mCompatScaling = mInvCompatScaling = 1.0f;
        } else {
            mHasCompatScaling = true;
            mCompatScaling = factor;
            mInvCompatScaling = 1.0f/factor;
        }
!!!4221452.java!!!	getBidiFlags() : int
        return mBidiFlags;
!!!4221580.java!!!	setBidiFlags(in flags : int) : void
        // only flag value is the 3-bit BIDI control setting
        flags &= BIDI_FLAG_MASK;
        if (flags > BIDI_MAX_FLAG_VALUE) {
            throw new IllegalArgumentException("unknown bidi flag: " + flags);
        }
        mBidiFlags = flags;
!!!4222220.java!!!	isAntiAlias() : boolean
        return (getFlags() & ANTI_ALIAS_FLAG) != 0;
!!!4222476.java!!!	isDither() : boolean
        return (getFlags() & DITHER_FLAG) != 0;
!!!4222732.java!!!	isLinearText() : boolean
        return (getFlags() & LINEAR_TEXT_FLAG) != 0;
!!!4222988.java!!!	isSubpixelText() : boolean
        return (getFlags() & SUBPIXEL_TEXT_FLAG) != 0;
!!!4223244.java!!!	isUnderlineText() : boolean
        return (getFlags() & UNDERLINE_TEXT_FLAG) != 0;
!!!4223500.java!!!	isStrikeThruText() : boolean
        return (getFlags() & STRIKE_THRU_TEXT_FLAG) != 0;
!!!4223756.java!!!	isFakeBoldText() : boolean
        return (getFlags() & FAKE_BOLD_TEXT_FLAG) != 0;
!!!4224012.java!!!	isFilterBitmap() : boolean
        return (getFlags() & FILTER_BITMAP_FLAG) != 0;
!!!4224268.java!!!	getStyle() : Style
        return sStyleArray[native_getStyle(mNativePaint)];
!!!4224396.java!!!	setStyle(inout style : Style) : void
        native_setStyle(mNativePaint, style.nativeInt);
!!!4225036.java!!!	setARGB(in a : int, in r : int, in g : int, in b : int) : void
        setColor((a << 24) | (r << 16) | (g << 8) | b);
!!!4225676.java!!!	getStrokeCap() : Cap
        return sCapArray[native_getStrokeCap(mNativePaint)];
!!!4225804.java!!!	setStrokeCap(inout cap : Cap) : void
        native_setStrokeCap(mNativePaint, cap.nativeInt);
!!!4225932.java!!!	getStrokeJoin() : Join
        return sJoinArray[native_getStrokeJoin(mNativePaint)];
!!!4226060.java!!!	setStrokeJoin(inout join : Join) : void
        native_setStrokeJoin(mNativePaint, join.nativeInt);
!!!4226188.java!!!	getFillPath(inout src : Path, inout dst : Path) : boolean
        return native_getFillPath(mNativePaint, src.ni(), dst.ni());
!!!4226316.java!!!	getShader() : Shader
        return mShader;
!!!4226444.java!!!	setShader(inout shader : Shader) : Shader
        int shaderNative = 0;
        if (shader != null)
            shaderNative = shader.native_instance;
        native_setShader(mNativePaint, shaderNative);
        mShader = shader;
        return shader;
!!!4226572.java!!!	getColorFilter() : ColorFilter
        return mColorFilter;
!!!4226700.java!!!	setColorFilter(inout filter : ColorFilter) : ColorFilter
        int filterNative = 0;
        if (filter != null)
            filterNative = filter.native_instance;
        native_setColorFilter(mNativePaint, filterNative);
        mColorFilter = filter;
        return filter;
!!!4226828.java!!!	getXfermode() : Xfermode
        return mXfermode;
!!!4226956.java!!!	setXfermode(inout xfermode : Xfermode) : Xfermode
        int xfermodeNative = 0;
        if (xfermode != null)
            xfermodeNative = xfermode.native_instance;
        native_setXfermode(mNativePaint, xfermodeNative);
        mXfermode = xfermode;
        return xfermode;
!!!4227084.java!!!	getPathEffect() : PathEffect
        return mPathEffect;
!!!4227212.java!!!	setPathEffect(inout effect : PathEffect) : PathEffect
        int effectNative = 0;
        if (effect != null) {
            effectNative = effect.native_instance;
        }
        native_setPathEffect(mNativePaint, effectNative);
        mPathEffect = effect;
        return effect;
!!!4227340.java!!!	getMaskFilter() : MaskFilter
        return mMaskFilter;
!!!4227468.java!!!	setMaskFilter(inout maskfilter : MaskFilter) : MaskFilter
        int maskfilterNative = 0;
        if (maskfilter != null) {
            maskfilterNative = maskfilter.native_instance;
        }
        native_setMaskFilter(mNativePaint, maskfilterNative);
        mMaskFilter = maskfilter;
        return maskfilter;
!!!4227596.java!!!	getTypeface() : Typeface
        return mTypeface;
!!!4227724.java!!!	setTypeface(inout typeface : Typeface) : Typeface
        int typefaceNative = 0;
        if (typeface != null) {
            typefaceNative = typeface.native_instance;
        }
        native_setTypeface(mNativePaint, typefaceNative);
        mTypeface = typeface;
        return typeface;
!!!4227852.java!!!	getRasterizer() : Rasterizer
        return mRasterizer;
!!!4227980.java!!!	setRasterizer(inout rasterizer : Rasterizer) : Rasterizer
        int rasterizerNative = 0;
        if (rasterizer != null) {
            rasterizerNative = rasterizer.native_instance;
        }
        native_setRasterizer(mNativePaint, rasterizerNative);
        mRasterizer = rasterizer;
        return rasterizer;
!!!4228108.java!!!	setShadowLayer(in radius : float, in dx : float, in dy : float, in color : int) : void
        hasShadow = radius > 0.0f;
        shadowRadius = radius;
        shadowDx = dx;
        shadowDy = dy;
        shadowColor = color;
        nSetShadowLayer(radius, dx, dy, color);
!!!4228364.java!!!	clearShadowLayer() : void
        hasShadow = false;
        nSetShadowLayer(0, 0, 0, 0);
!!!4228492.java!!!	getTextAlign() : Align
        return sAlignArray[native_getTextAlign(mNativePaint)];
!!!4228620.java!!!	setTextAlign(inout align : Align) : void
        native_setTextAlign(mNativePaint, align.nativeInt);
!!!4228748.java!!!	getTextLocale() : Locale
        return mLocale;
!!!4228876.java!!!	setTextLocale(inout locale : Locale) : void
        if (locale == null) {
            throw new IllegalArgumentException("locale cannot be null");
        }
        if (locale.equals(mLocale)) return;
        mLocale = locale;
        native_setTextLocale(mNativePaint, locale.toString());
!!!4230156.java!!!	getFontMetrics() : FontMetrics
        FontMetrics fm = new FontMetrics();
        getFontMetrics(fm);
        return fm;
!!!4230540.java!!!	getFontMetricsInt() : FontMetricsInt
        FontMetricsInt fm = new FontMetricsInt();
        getFontMetricsInt(fm);
        return fm;
!!!4230668.java!!!	getFontSpacing() : float
        return getFontMetrics(null);
!!!4230796.java!!!	measureText(inout text : char, in index : int, in count : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((index | count) < 0 || index + count > text.length) {
            throw new ArrayIndexOutOfBoundsException();
        }

        if (text.length == 0 || count == 0) {
            return 0f;
        }
        if (!mHasCompatScaling) {
            return native_measureText(text, index, count);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize*mCompatScaling);
        float w = native_measureText(text, index, count);
        setTextSize(oldSize);
        return w*mInvCompatScaling;
!!!4231052.java!!!	measureText(in text : String, in start : int, in end : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0f;
        }
        if (!mHasCompatScaling) {
            return native_measureText(text, start, end);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize*mCompatScaling);
        float w = native_measureText(text, start, end);
        setTextSize(oldSize);
        return w*mInvCompatScaling;
!!!4231308.java!!!	measureText(in text : String) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }

        if (text.length() == 0) {
            return 0f;
        }

        if (!mHasCompatScaling) return native_measureText(text);
        final float oldSize = getTextSize();
        setTextSize(oldSize*mCompatScaling);
        float w = native_measureText(text);
        setTextSize(oldSize);
        return w*mInvCompatScaling;
!!!4231564.java!!!	measureText(inout text : CharSequence, in start : int, in end : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0f;
        }
        if (text instanceof String) {
            return measureText((String)text, start, end);
        }
        if (text instanceof SpannedString ||
            text instanceof SpannableString) {
            return measureText(text.toString(), start, end);
        }
        if (text instanceof GraphicsOperations) {
            return ((GraphicsOperations)text).measureText(start, end, this);
        }

        char[] buf = TemporaryBuffer.obtain(end - start);
        TextUtils.getChars(text, start, end, buf, 0);
        float result = measureText(buf, 0, end - start);
        TemporaryBuffer.recycle(buf);
        return result;
!!!4231692.java!!!	breakText(inout text : char, in index : int, in count : int, in maxWidth : float, inout measuredWidth : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if (index < 0 || text.length - index < Math.abs(count)) {
            throw new ArrayIndexOutOfBoundsException();
        }

        if (text.length == 0 || count == 0) {
            return 0;
        }
        if (!mHasCompatScaling) {
            return native_breakText(text, index, count, maxWidth, measuredWidth);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize*mCompatScaling);
        int res = native_breakText(text, index, count, maxWidth*mCompatScaling,
                measuredWidth);
        setTextSize(oldSize);
        if (measuredWidth != null) measuredWidth[0] *= mInvCompatScaling;
        return res;
!!!4231948.java!!!	breakText(inout text : CharSequence, in start : int, in end : int, inout measureForwards : boolean, in maxWidth : float, inout measuredWidth : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0;
        }
        if (start == 0 && text instanceof String && end == text.length()) {
            return breakText((String) text, measureForwards, maxWidth,
                             measuredWidth);
        }

        char[] buf = TemporaryBuffer.obtain(end - start);
        int result;

        TextUtils.getChars(text, start, end, buf, 0);

        if (measureForwards) {
            result = breakText(buf, 0, end - start, maxWidth, measuredWidth);
        } else {
            result = breakText(buf, 0, -(end - start), maxWidth, measuredWidth);
        }

        TemporaryBuffer.recycle(buf);
        return result;
!!!4232076.java!!!	breakText(in text : String, inout measureForwards : boolean, in maxWidth : float, inout measuredWidth : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }

        if (text.length() == 0) {
            return 0;
        }
        if (!mHasCompatScaling) {
            return native_breakText(text, measureForwards, maxWidth, measuredWidth);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize*mCompatScaling);
        int res = native_breakText(text, measureForwards, maxWidth*mCompatScaling,
                measuredWidth);
        setTextSize(oldSize);
        if (measuredWidth != null) measuredWidth[0] *= mInvCompatScaling;
        return res;
!!!4232332.java!!!	getTextWidths(inout text : char, in index : int, in count : int, inout widths : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((index | count) < 0 || index + count > text.length
                || count > widths.length) {
            throw new ArrayIndexOutOfBoundsException();
        }

        if (text.length == 0 || count == 0) {
            return 0;
        }
        if (!mHasCompatScaling) {
            return native_getTextWidths(mNativePaint, text, index, count, widths);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize*mCompatScaling);
        int res = native_getTextWidths(mNativePaint, text, index, count, widths);
        setTextSize(oldSize);
        for (int i=0; i<res; i++) {
            widths[i] *= mInvCompatScaling;
        }
        return res;
!!!4232460.java!!!	getTextWidths(inout text : CharSequence, in start : int, in end : int, inout widths : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (end - start > widths.length) {
            throw new ArrayIndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0;
        }
        if (text instanceof String) {
            return getTextWidths((String) text, start, end, widths);
        }
        if (text instanceof SpannedString ||
            text instanceof SpannableString) {
            return getTextWidths(text.toString(), start, end, widths);
        }
        if (text instanceof GraphicsOperations) {
            return ((GraphicsOperations) text).getTextWidths(start, end,
                                                                 widths, this);
        }

        char[] buf = TemporaryBuffer.obtain(end - start);
        TextUtils.getChars(text, start, end, buf, 0);
        int result = getTextWidths(buf, 0, end - start, widths);
        TemporaryBuffer.recycle(buf);
        return result;
!!!4232588.java!!!	getTextWidths(in text : String, in start : int, in end : int, inout widths : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (end - start > widths.length) {
            throw new ArrayIndexOutOfBoundsException();
        }
        
        if (text.length() == 0 || start == end) {
            return 0;
        }
        if (!mHasCompatScaling) {
            return native_getTextWidths(mNativePaint, text, start, end, widths);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize*mCompatScaling);
        int res = native_getTextWidths(mNativePaint, text, start, end, widths);
        setTextSize(oldSize);
        for (int i=0; i<res; i++) {
            widths[i] *= mInvCompatScaling;
        }
        return res;
!!!4232716.java!!!	getTextWidths(in text : String, inout widths : float) : int
        return getTextWidths(text, 0, text.length(), widths);
!!!4232844.java!!!	getTextGlyphs(in text : String, in start : int, in end : int, in contextStart : int, in contextEnd : int, in flags : int, inout glyphs : char) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if (flags != DIRECTION_LTR && flags != DIRECTION_RTL) {
            throw new IllegalArgumentException("unknown flags value: " + flags);
        }
        if ((start | end | contextStart | contextEnd | (end - start)
                | (start - contextStart) | (contextEnd - end) | (text.length() - end)
                | (text.length() - contextEnd)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (end - start > glyphs.length) {
            throw new ArrayIndexOutOfBoundsException();
        }
        return native_getTextGlyphs(mNativePaint, text, start, end, contextStart, contextEnd,
                flags, glyphs);
!!!4232972.java!!!	getTextRunAdvances(inout chars : char, in index : int, in count : int, in contextIndex : int, in contextCount : int, in flags : int, inout advances : float, in advancesIndex : int) : float
        return getTextRunAdvances(chars, index, count, contextIndex, contextCount, flags,
                advances, advancesIndex, 0 /* use Harfbuzz*/);
!!!4233100.java!!!	getTextRunAdvances(inout chars : char, in index : int, in count : int, in contextIndex : int, in contextCount : int, in flags : int, inout advances : float, in advancesIndex : int, in reserved : int) : float

        if (chars == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if (flags != DIRECTION_LTR && flags != DIRECTION_RTL) {
            throw new IllegalArgumentException("unknown flags value: " + flags);
        }
        if ((index | count | contextIndex | contextCount | advancesIndex
                | (index - contextIndex) | (contextCount - count)
                | ((contextIndex + contextCount) - (index + count))
                | (chars.length - (contextIndex + contextCount))
                | (advances == null ? 0 :
                    (advances.length - (advancesIndex + count)))) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (chars.length == 0 || count == 0){
            return 0f;
        }
        if (!mHasCompatScaling) {
            return native_getTextRunAdvances(mNativePaint, chars, index, count,
                    contextIndex, contextCount, flags, advances, advancesIndex, reserved);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize * mCompatScaling);
        float res = native_getTextRunAdvances(mNativePaint, chars, index, count,
                contextIndex, contextCount, flags, advances, advancesIndex, reserved);
        setTextSize(oldSize);

        if (advances != null) {
            for (int i = advancesIndex, e = i + count; i < e; i++) {
                advances[i] *= mInvCompatScaling;
            }
        }
        return res * mInvCompatScaling; // assume errors are not significant
!!!4233228.java!!!	getTextRunAdvances(inout text : CharSequence, in start : int, in end : int, in contextStart : int, in contextEnd : int, in flags : int, inout advances : float, in advancesIndex : int) : float
        return getTextRunAdvances(text, start, end, contextStart, contextEnd, flags,
                advances, advancesIndex, 0 /* use Harfbuzz */);
!!!4233356.java!!!	getTextRunAdvances(inout text : CharSequence, in start : int, in end : int, in contextStart : int, in contextEnd : int, in flags : int, inout advances : float, in advancesIndex : int, in reserved : int) : float

        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | contextStart | contextEnd | advancesIndex | (end - start)
                | (start - contextStart) | (contextEnd - end)
                | (text.length() - contextEnd)
                | (advances == null ? 0 :
                    (advances.length - advancesIndex - (end - start)))) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text instanceof String) {
            return getTextRunAdvances((String) text, start, end,
                    contextStart, contextEnd, flags, advances, advancesIndex, reserved);
        }
        if (text instanceof SpannedString ||
            text instanceof SpannableString) {
            return getTextRunAdvances(text.toString(), start, end,
                    contextStart, contextEnd, flags, advances, advancesIndex, reserved);
        }
        if (text instanceof GraphicsOperations) {
            return ((GraphicsOperations) text).getTextRunAdvances(start, end,
                    contextStart, contextEnd, flags, advances, advancesIndex, this);
        }
        if (text.length() == 0 || end == start) {
            return 0f;
        }

        int contextLen = contextEnd - contextStart;
        int len = end - start;
        char[] buf = TemporaryBuffer.obtain(contextLen);
        TextUtils.getChars(text, contextStart, contextEnd, buf, 0);
        float result = getTextRunAdvances(buf, start - contextStart, len,
                0, contextLen, flags, advances, advancesIndex, reserved);
        TemporaryBuffer.recycle(buf);
        return result;
!!!4233484.java!!!	getTextRunAdvances(in text : String, in start : int, in end : int, in contextStart : int, in contextEnd : int, in flags : int, inout advances : float, in advancesIndex : int) : float
        return getTextRunAdvances(text, start, end, contextStart, contextEnd, flags,
                advances, advancesIndex, 0 /* use Harfbuzz*/);
!!!4233612.java!!!	getTextRunAdvances(in text : String, in start : int, in end : int, in contextStart : int, in contextEnd : int, in flags : int, inout advances : float, in advancesIndex : int, in reserved : int) : float

        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if (flags != DIRECTION_LTR && flags != DIRECTION_RTL) {
            throw new IllegalArgumentException("unknown flags value: " + flags);
        }
        if ((start | end | contextStart | contextEnd | advancesIndex | (end - start)
                | (start - contextStart) | (contextEnd - end)
                | (text.length() - contextEnd)
                | (advances == null ? 0 :
                    (advances.length - advancesIndex - (end - start)))) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0f;
        }

        if (!mHasCompatScaling) {
            return native_getTextRunAdvances(mNativePaint, text, start, end,
                    contextStart, contextEnd, flags, advances, advancesIndex, reserved);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize * mCompatScaling);
        float totalAdvance = native_getTextRunAdvances(mNativePaint, text, start, end,
                contextStart, contextEnd, flags, advances, advancesIndex, reserved);
        setTextSize(oldSize);

        if (advances != null) {
            for (int i = advancesIndex, e = i + (end - start); i < e; i++) {
                advances[i] *= mInvCompatScaling;
            }
        }
        return totalAdvance * mInvCompatScaling; // assume errors are insignificant
!!!4233740.java!!!	getTextRunCursor(inout text : char, in contextStart : int, in contextLength : int, in flags : int, in offset : int, in cursorOpt : int) : int
        int contextEnd = contextStart + contextLength;
        if (((contextStart | contextEnd | offset | (contextEnd - contextStart)
                | (offset - contextStart) | (contextEnd - offset)
                | (text.length - contextEnd) | cursorOpt) < 0)
                || cursorOpt > CURSOR_OPT_MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }

        return native_getTextRunCursor(mNativePaint, text,
                contextStart, contextLength, flags, offset, cursorOpt);
!!!4233868.java!!!	getTextRunCursor(inout text : CharSequence, in contextStart : int, in contextEnd : int, in flags : int, in offset : int, in cursorOpt : int) : int

        if (text instanceof String || text instanceof SpannedString ||
                text instanceof SpannableString) {
            return getTextRunCursor(text.toString(), contextStart, contextEnd,
                    flags, offset, cursorOpt);
        }
        if (text instanceof GraphicsOperations) {
            return ((GraphicsOperations) text).getTextRunCursor(
                    contextStart, contextEnd, flags, offset, cursorOpt, this);
        }

        int contextLen = contextEnd - contextStart;
        char[] buf = TemporaryBuffer.obtain(contextLen);
        TextUtils.getChars(text, contextStart, contextEnd, buf, 0);
        int result = getTextRunCursor(buf, 0, contextLen, flags, offset - contextStart, cursorOpt);
        TemporaryBuffer.recycle(buf);
        return result;
!!!4233996.java!!!	getTextRunCursor(in text : String, in contextStart : int, in contextEnd : int, in flags : int, in offset : int, in cursorOpt : int) : int
        if (((contextStart | contextEnd | offset | (contextEnd - contextStart)
                | (offset - contextStart) | (contextEnd - offset)
                | (text.length() - contextEnd) | cursorOpt) < 0)
                || cursorOpt > CURSOR_OPT_MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }

        return native_getTextRunCursor(mNativePaint, text,
                contextStart, contextEnd, flags, offset, cursorOpt);
!!!4234124.java!!!	getTextPath(inout text : char, in index : int, in count : int, in x : float, in y : float, inout path : Path) : void
        if ((index | count) < 0 || index + count > text.length) {
            throw new ArrayIndexOutOfBoundsException();
        }
        native_getTextPath(mNativePaint, mBidiFlags, text, index, count, x, y, 
                path.ni());
!!!4234252.java!!!	getTextPath(in text : String, in start : int, in end : int, in x : float, in y : float, inout path : Path) : void
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        native_getTextPath(mNativePaint, mBidiFlags, text, start, end, x, y, 
                path.ni());
!!!4234380.java!!!	getTextBounds(in text : String, in start : int, in end : int, inout bounds : Rect) : void
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (bounds == null) {
            throw new NullPointerException("need bounds Rect");
        }
        nativeGetStringBounds(mNativePaint, text, start, end, bounds);
!!!4234508.java!!!	getTextBounds(inout text : char, in index : int, in count : int, inout bounds : Rect) : void
        if ((index | count) < 0 || index + count > text.length) {
            throw new ArrayIndexOutOfBoundsException();
        }
        if (bounds == null) {
            throw new NullPointerException("need bounds Rect");
        }
        nativeGetCharArrayBounds(mNativePaint, text, index, count, bounds);
!!!4234636.java!!!	finalize() : void
        try {
            finalizer(mNativePaint);
        } finally {
            super.finalize();
        }
