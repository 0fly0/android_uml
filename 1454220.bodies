class TestShellActivity
!!!9036684.java!!!	requestWebKitData() : void
        setDumpTimeout(DUMP_TIMEOUT_MS);
        Message callback = mHandler.obtainMessage(MSG_WEBKIT_DATA);

        if (mRequestedWebKitData)
            throw new AssertionError("Requested webkit data twice: " + mWebView.getUrl());

        mRequestedWebKitData = true;
        Log.v(LOGTAG, "message sent to WebView to dump text.");
        switch (mDumpDataType) {
            case DUMP_AS_TEXT:
                callback.arg1 = mDumpTopFrameAsText ? 1 : 0;
                callback.arg2 = mDumpChildFramesAsText ? 1 : 0;
                mWebViewClassic.documentAsText(callback);
                break;
            case EXT_REPR:
                mWebViewClassic.externalRepresentation(callback);
                break;
            default:
                finished();
                break;
        }
!!!9036812.java!!!	setDumpTimeout(in timeout : long) : void
        Log.v(LOGTAG, "setting dump timeout at " + timeout);
        Message msg = mHandler.obtainMessage(MSG_DUMP_TIMEOUT);
        mHandler.sendMessageDelayed(msg, timeout);
!!!9036940.java!!!	clearCache() : void
      mWebView.freeMemory();
!!!9037068.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);
        requestWindowFeature(Window.FEATURE_PROGRESS);

        LinearLayout contentView = new LinearLayout(this);
        contentView.setOrientation(LinearLayout.VERTICAL);
        setContentView(contentView);

        CookieManager.setAcceptFileSchemeCookies(true);
        mWebView = new WebView(this);
        mWebViewClassic = WebViewClassic.fromWebView(mWebView);
        mEventSender = new WebViewEventSender(mWebView);
        mCallbackProxy = new CallbackProxy(mEventSender, this);

        mWebView.addJavascriptInterface(mCallbackProxy, "layoutTestController");
        mWebView.addJavascriptInterface(mCallbackProxy, "eventSender");
        setupWebViewForLayoutTests(mWebView, mCallbackProxy);

        contentView.addView(mWebView, new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT, 0.0f));

        mWebView.getSettings().setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);

        // Expose window.gc function to JavaScript. JSC build exposes
        // this function by default, but V8 requires the flag to turn it on.
        // WebView::setJsFlags is noop in JSC build.
        mWebViewClassic.setJsFlags("--expose_gc");

        mHandler = new AsyncHandler();

        Intent intent = getIntent();
        if (intent != null) {
            executeIntent(intent);
        }

        // This is asynchronous, but it gets processed by WebCore before it starts loading pages.
        mWebViewClassic.setUseMockDeviceOrientation();
!!!9037196.java!!!	onNewIntent(inout intent : Intent) : void
        super.onNewIntent(intent);
        executeIntent(intent);
!!!9037324.java!!!	executeIntent(inout intent : Intent) : void
        resetTestStatus();
        if (!Intent.ACTION_VIEW.equals(intent.getAction())) {
            return;
        }

        mTotalTestCount = intent.getIntExtra(TOTAL_TEST_COUNT, mTotalTestCount);
        mCurrentTestNumber = intent.getIntExtra(CURRENT_TEST_NUMBER, mCurrentTestNumber);

        mTestUrl = intent.getStringExtra(TEST_URL);
        if (mTestUrl == null) {
            mUiAutoTestPath = intent.getStringExtra(UI_AUTO_TEST);
            if(mUiAutoTestPath != null) {
                beginUiAutoTest();
            }
            return;
        }

        mResultFile = intent.getStringExtra(RESULT_FILE);
        mTimeoutInMillis = intent.getIntExtra(TIMEOUT_IN_MILLIS, 0);
        mStopOnRefError = intent.getBooleanExtra(STOP_ON_REF_ERROR, false);
        setTitle("Test " + mCurrentTestNumber + " of " + mTotalTestCount);
        float ratio = (float)mCurrentTestNumber / mTotalTestCount;
        int progress = (int)(ratio * Window.PROGRESS_END);
        getWindow().setFeatureInt(Window.FEATURE_PROGRESS, progress);

        Log.v(LOGTAG, "  Loading " + mTestUrl);

        if (mTestUrl.contains("/dumpAsText/")) {
            dumpAsText(false);
        }

        mWebView.loadUrl(mTestUrl);

        if (mTimeoutInMillis > 0) {
            // Create a timeout timer
            Message m = mHandler.obtainMessage(MSG_TIMEOUT);
            mHandler.sendMessageDelayed(m, mTimeoutInMillis);
        }
!!!9037452.java!!!	beginUiAutoTest() : void
        try {
            mTestListReader = new BufferedReader(
                    new FileReader(mUiAutoTestPath));
        } catch (IOException ioe) {
            Log.e(LOGTAG, "Failed to open test list for read.", ioe);
            finishUiAutoTest();
            return;
        }
        moveToNextTest();
!!!9037580.java!!!	finishUiAutoTest() : void
        try {
            if(mTestListReader != null)
                mTestListReader.close();
        } catch (IOException ioe) {
            Log.w(LOGTAG, "Failed to close test list file.", ioe);
        }
        ForwardService.getForwardService().stopForwardService();
        finished();
!!!9037708.java!!!	moveToNextTest() : void
        String url = null;
        try {
            url = mTestListReader.readLine();
        } catch (IOException ioe) {
            Log.e(LOGTAG, "Failed to read next test.", ioe);
            finishUiAutoTest();
            return;
        }
        if (url == null) {
            mUiAutoTestPath = null;
            finishUiAutoTest();
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setMessage("All tests finished. Exit?")
                   .setCancelable(false)
                   .setPositiveButton("Yes", new OnClickListener(){
                       @Override
                    public void onClick(DialogInterface dialog, int which) {
                           TestShellActivity.this.finish();
                       }
                   })
                   .setNegativeButton("No", new OnClickListener(){
                       @Override
                    public void onClick(DialogInterface dialog, int which) {
                           dialog.cancel();
                       }
                   });
            builder.create().show();
            return;
        }
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
        intent.putExtra(TestShellActivity.TEST_URL, FsUtils.getTestUrl(url));
        intent.putExtra(TestShellActivity.CURRENT_TEST_NUMBER, ++mCurrentTestNumber);
        intent.putExtra(TIMEOUT_IN_MILLIS, 10000);
        executeIntent(intent);
!!!9037836.java!!!	onStop() : void
        super.onStop();
        mWebView.stopLoading();
!!!9037964.java!!!	onDestroy() : void
        super.onDestroy();
        mWebView.destroy();
        mWebView = null;
        mWebViewClassic = null;
!!!9038092.java!!!	onLowMemory() : void
        super.onLowMemory();
        Log.e(LOGTAG, "Low memory, clearing caches");
        mWebView.freeMemory();
!!!9038220.java!!!	dump(inout timeout : boolean, in webkitData : String) : void
        mDumpWebKitData = true;
        if (mResultFile == null || mResultFile.length() == 0) {
            finished();
            return;
        }

        if (mCallback != null) {
            mCallback.dumpResult(webkitData);
        }

        try {
            File parentDir = new File(mResultFile).getParentFile();
            if (!parentDir.exists()) {
                parentDir.mkdirs();
            }

            FileOutputStream os = new FileOutputStream(mResultFile);
            if (timeout) {
                Log.w("Layout test: Timeout", mResultFile);
                os.write(TIMEOUT_STR.getBytes());
                os.write('\n');
            }
            if (mDumpTitleChanges)
                os.write(mTitleChanges.toString().getBytes());
            if (mDialogStrings != null)
                os.write(mDialogStrings.toString().getBytes());
            mDialogStrings = null;
            if (mDatabaseCallbackStrings != null)
                os.write(mDatabaseCallbackStrings.toString().getBytes());
            mDatabaseCallbackStrings = null;
            if (mConsoleMessages != null)
                os.write(mConsoleMessages.toString().getBytes());
            mConsoleMessages = null;
            if (webkitData != null)
                os.write(webkitData.getBytes());
            os.flush();
            os.close();
        } catch (IOException ex) {
            Log.e(LOGTAG, "Cannot write to " + mResultFile + ", " + ex.getMessage());
        }

        finished();
!!!9038348.java!!!	setCallback(inout callback : TestShellCallback) : void
        mCallback = callback;
!!!9038476.java!!!	finished() : boolean
        if (canMoveToNextTest()) {
            mHandler.removeMessages(MSG_TIMEOUT);
            if (mUiAutoTestPath != null) {
                //don't really finish here
                moveToNextTest();
            } else {
                if (mCallback != null) {
                    mCallback.finished();
                }
            }
            return true;
        }
        return false;
!!!9038604.java!!!	setDefaultDumpDataType(inout defaultDumpDataType : DumpDataType) : void
        mDefaultDumpDataType = defaultDumpDataType;
!!!9038732.java!!!	dumpAsText(inout enablePixelTests : boolean) : void
        // Added after webkit update to r63859. See trac.webkit.org/changeset/63730.
        if (enablePixelTests) {
            Log.v(LOGTAG, "dumpAsText(enablePixelTests == true) not implemented on Android!");
        }

        mDumpDataType = DumpDataType.DUMP_AS_TEXT;
        mDumpTopFrameAsText = true;
        if (mWebView != null) {
            String url = mWebView.getUrl();
            Log.v(LOGTAG, "dumpAsText called: "+url);
        }
!!!9038860.java!!!	dumpChildFramesAsText() : void
        mDumpDataType = DumpDataType.DUMP_AS_TEXT;
        mDumpChildFramesAsText = true;
        if (mWebView != null) {
            String url = mWebView.getUrl();
            Log.v(LOGTAG, "dumpChildFramesAsText called: "+url);
        }
!!!9038988.java!!!	waitUntilDone() : void
        mWaitUntilDone = true;
        String url = mWebView.getUrl();
        Log.v(LOGTAG, "waitUntilDone called: " + url);
!!!9039116.java!!!	notifyDone() : void
        String url = mWebView.getUrl();
        Log.v(LOGTAG, "notifyDone called: " + url);
        if (mWaitUntilDone) {
            mWaitUntilDone = false;
            if (!mRequestedWebKitData && !mTimedOut && !finished()) {
                requestWebKitData();
            }
        }
!!!9039244.java!!!	display() : void
        mWebView.invalidate();
!!!9039372.java!!!	clearBackForwardList() : void
        mWebView.clearHistory();

!!!9039500.java!!!	dumpBackForwardList() : void
        //printf("\n============== Back Forward List ==============\n");
        // mWebHistory
        //printf("===============================================\n");

!!!9039628.java!!!	dumpChildFrameScrollPositions() : void
        // TODO Auto-generated method stub

!!!9039756.java!!!	dumpEditingCallbacks() : void
        // TODO Auto-generated method stub

!!!9039884.java!!!	dumpSelectionRect() : void
        // TODO Auto-generated method stub

!!!9040012.java!!!	dumpTitleChanges() : void
        if (!mDumpTitleChanges) {
            mTitleChanges = new StringBuffer();
        }
        mDumpTitleChanges = true;
!!!9040140.java!!!	keepWebHistory() : void
        if (!mKeepWebHistory) {
            mWebHistory = new Vector();
        }
        mKeepWebHistory = true;
!!!9040268.java!!!	queueBackNavigation(in howfar : int) : void
        // TODO Auto-generated method stub

!!!9040396.java!!!	queueForwardNavigation(in howfar : int) : void
        // TODO Auto-generated method stub

!!!9040524.java!!!	queueLoad(in Url : String, in frameTarget : String) : void
        // TODO Auto-generated method stub

!!!9040652.java!!!	queueReload() : void
        mWebView.reload();
!!!9040780.java!!!	queueScript(in scriptToRunInCurrentContext : String) : void
        mWebView.loadUrl("javascript:"+scriptToRunInCurrentContext);
!!!9040908.java!!!	repaintSweepHorizontally() : void
        // TODO Auto-generated method stub

!!!9041036.java!!!	setAcceptsEditing(inout b : boolean) : void
        // TODO Auto-generated method stub

!!!9041164.java!!!	setMainFrameIsFirstResponder(inout b : boolean) : void
        // TODO Auto-generated method stub

!!!9041292.java!!!	setWindowIsKey(inout b : boolean) : void
        // This is meant to show/hide the window. The best I can find
        // is setEnabled()
        mWebView.setEnabled(b);
!!!9041420.java!!!	testRepaint() : void
        mWebView.invalidate();
!!!9041548.java!!!	dumpDatabaseCallbacks() : void
        Log.v(LOGTAG, "dumpDatabaseCallbacks called.");
        mDumpDatabaseCallbacks = true;
!!!9041676.java!!!	setCanOpenWindows() : void
        Log.v(LOGTAG, "setCanOpenWindows called.");
        mCanOpenWindows = true;
!!!9041804.java!!!	setMockGeolocationPosition(in latitude : double, in longitude : double, in accuracy : double) : void
        WebViewClassic.fromWebView(mWebView).setMockGeolocationPosition(latitude, longitude,
                accuracy);
!!!9041932.java!!!	setMockGeolocationError(in code : int, in message : String) : void
        WebViewClassic.fromWebView(mWebView).setMockGeolocationError(code, message);
!!!9042060.java!!!	setGeolocationPermission(inout allow : boolean) : void
        Log.v(LOGTAG, "setGeolocationPermission() allow=" + allow);
        WebViewClassic.fromWebView(mWebView).setMockGeolocationPermission(allow);
!!!9042188.java!!!	setMockDeviceOrientation(inout canProvideAlpha : boolean, in alpha : double, inout canProvideBeta : boolean, in beta : double, inout canProvideGamma : boolean, in gamma : double) : void
        WebViewClassic.fromWebView(mWebView).setMockDeviceOrientation(canProvideAlpha, alpha,
                canProvideBeta, beta, canProvideGamma, gamma);
!!!9042316.java!!!	overridePreference(in key : String, inout value : boolean) : void
        // TODO: We should look up the correct WebView for the frame which
        // called the layoutTestController method. Currently, we just use the
        // WebView for the main frame. EventSender suffers from the same
        // problem.
        if (WEBKIT_OFFLINE_WEB_APPLICATION_CACHE_ENABLED.equals(key)) {
            mWebViewClassic.getSettings().setAppCacheEnabled(value);
        } else if (WEBKIT_USES_PAGE_CACHE_PREFERENCE_KEY.equals(key)) {
            // Cache the maximum possible number of pages.
            mWebViewClassic.getSettings().setPageCacheCapacity(Integer.MAX_VALUE);
        } else {
            Log.w(LOGTAG, "LayoutTestController.overridePreference(): " +
                  "Unsupported preference '" + key + "'");
        }
!!!9042444.java!!!	setXSSAuditorEnabled(inout flag : boolean) : void
        mWebViewClassic.getSettings().setXSSAuditorEnabled(flag);
!!!9042700.java!!!	resetTestStatus() : void
        mWaitUntilDone = false;
        mDumpDataType = mDefaultDumpDataType;
        mDumpTopFrameAsText = false;
        mDumpChildFramesAsText = false;
        mTimedOut = false;
        mDumpTitleChanges = false;
        mRequestedWebKitData = false;
        mDumpDatabaseCallbacks = false;
        mCanOpenWindows = false;
        mEventSender.resetMouse();
        mEventSender.clearTouchPoints();
        mEventSender.clearTouchMetaState();
        mPageFinished = false;
        mDumpWebKitData = false;
        setDefaultWebSettings(mWebView);
        CookieManager.getInstance().removeAllCookie();
        mWebViewClassic.setUseMockGeolocation();
!!!9042828.java!!!	canMoveToNextTest() : boolean
        return (mDumpWebKitData && mPageFinished && !mWaitUntilDone) || mTimedOut;
!!!9042956.java!!!	setupWebViewForLayoutTests(inout webview : WebView, inout callbackProxy : CallbackProxy) : void
        if (webview == null) {
            return;
        }

        setDefaultWebSettings(webview);

        webview.setWebChromeClient(mChromeClient);
        webview.setWebViewClient(mViewClient);
        // Setting a touch interval of -1 effectively disables the optimisation in WebView
        // that stops repeated touch events flooding WebCore. The Event Sender only sends a
        // single event rather than a stream of events (like what would generally happen in
        // a real use of touch events in a WebView)  and so if the WebView drops the event,
        // the test will fail as the test expects one callback for every touch it synthesizes.
        WebViewClassic.fromWebView(webview).setTouchInterval(-1);
!!!9043084.java!!!	setDefaultWebSettings(inout webview : WebView) : void
        WebSettingsClassic settings = WebViewClassic.fromWebView(webview).getSettings();
        settings.setAppCacheEnabled(true);
        settings.setAppCachePath(getApplicationContext().getCacheDir().getPath());
        settings.setAppCacheMaxSize(Long.MAX_VALUE);
        settings.setJavaScriptEnabled(true);
        settings.setJavaScriptCanOpenWindowsAutomatically(true);
        settings.setSupportMultipleWindows(true);
        settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);
        settings.setDatabaseEnabled(true);
        settings.setDatabasePath(getDir("databases",0).getAbsolutePath());
        settings.setDomStorageEnabled(true);
        settings.setWorkersEnabled(false);
        settings.setXSSAuditorEnabled(false);
        settings.setPageCacheCapacity(0);
        settings.setProperty("use_minimal_memory", "false");
        settings.setAllowUniversalAccessFromFileURLs(true);
        settings.setAllowFileAccessFromFileURLs(true);
