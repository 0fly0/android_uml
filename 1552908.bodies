class RenameClassAdapter
!!!9601164.java!!!	RenameClassAdapter(inout cv : ClassWriter, in oldName : String, in newName : String)
        super(Opcodes.ASM4, cv);
        mOldBase = mOldName = oldName;
        mNewBase = mNewName = newName;

        int pos = mOldName.indexOf('$');
        if (pos > 0) {
            mOldBase = mOldName.substring(0, pos);
        }
        pos = mNewName.indexOf('$');
        if (pos > 0) {
            mNewBase = mNewName.substring(0, pos);
        }

        assert (mOldBase == null && mNewBase == null) || (mOldBase != null && mNewBase != null);
!!!9601292.java!!!	renameTypeDesc(in desc : String) : String
        if (desc == null) {
            return null;
        }

        return renameType(Type.getType(desc));
!!!9601420.java!!!	renameType(inout type : Type) : String
        if (type == null) {
            return null;
        }

        if (type.getSort() == Type.OBJECT) {
            String in = type.getInternalName();
            return "L" + renameInternalType(in) + ";";
        } else if (type.getSort() == Type.ARRAY) {
            StringBuilder sb = new StringBuilder();
            for (int n = type.getDimensions(); n > 0; n--) {
                sb.append('[');
            }
            sb.append(renameType(type.getElementType()));
            return sb.toString();
        }
        return type.getDescriptor();
!!!9601548.java!!!	renameTypeAsType(inout type : Type) : Type
        if (type == null) {
            return null;
        }

        if (type.getSort() == Type.OBJECT) {
            String in = type.getInternalName();
            String newIn = renameInternalType(in);
            if (newIn != in) {
                return Type.getType("L" + newIn + ";");
            }
        } else if (type.getSort() == Type.ARRAY) {
            StringBuilder sb = new StringBuilder();
            for (int n = type.getDimensions(); n > 0; n--) {
                sb.append('[');
            }
            sb.append(renameType(type.getElementType()));
            return Type.getType(sb.toString());
        }
        return type;
!!!9601676.java!!!	renameInternalType(in type : String) : String
        if (type == null) {
            return null;
        }

        if (type.equals(mOldName)) {
            return mNewName;
        }

        if (mOldBase != mOldName && type.equals(mOldBase)) {
            return mNewBase;
        }

        int pos = type.indexOf('$');
        if (pos == mOldBase.length() && type.startsWith(mOldBase)) {
            return mNewBase + type.substring(pos);
        }

        // The internal type of some of the MethodVisitor turns out to be a type
        // descriptor sometimes. This is the case with visitTypeInsn(type) and
        // visitMethodInsn(owner). We try to detect it and adjust it here.
        if (type.indexOf(';') > 0) {
            type = renameTypeDesc(type);
        }

        return type;
!!!9601804.java!!!	renameMethodDesc(in desc : String) : String
        if (desc == null) {
            return null;
        }

        Type[] args = Type.getArgumentTypes(desc);

        StringBuilder sb = new StringBuilder("(");
        for (Type arg : args) {
            String name = renameType(arg);
            sb.append(name);
        }
        sb.append(')');

        Type ret = Type.getReturnType(desc);
        String name = renameType(ret);
        sb.append(name);

        return sb.toString();
!!!9601932.java!!!	renameTypeSignature(in sig : String) : String
        if (sig == null) {
            return null;
        }
        SignatureReader reader = new SignatureReader(sig);
        SignatureWriter writer = new SignatureWriter();
        reader.accept(new RenameSignatureAdapter(writer));
        sig = writer.toString();
        return sig;
!!!9602060.java!!!	renameFieldSignature(in sig : String) : String
        if (sig == null) {
            return null;
        }
        SignatureReader reader = new SignatureReader(sig);
        SignatureWriter writer = new SignatureWriter();
        reader.acceptType(new RenameSignatureAdapter(writer));
        sig = writer.toString();
        return sig;
!!!9602188.java!!!	visit(in version : int, in access : int, in name : String, in signature : String, in superName : String, inout interfaces : String) : void
        name = renameInternalType(name);
        superName = renameInternalType(superName);
        signature = renameTypeSignature(signature);

        super.visit(version, access, name, signature, superName, interfaces);
!!!9602316.java!!!	visitInnerClass(in name : String, in outerName : String, in innerName : String, in access : int) : void
        assert outerName.equals(mOldName);
        outerName = renameInternalType(outerName);
        name = outerName + "$" + innerName;
        super.visitInnerClass(name, outerName, innerName, access);
!!!9602444.java!!!	visitMethod(in access : int, in name : String, in desc : String, in signature : String, inout exceptions : String) : MethodVisitor
        desc = renameMethodDesc(desc);
        signature = renameTypeSignature(signature);
        MethodVisitor mw = super.visitMethod(access, name, desc, signature, exceptions);
        return new RenameMethodAdapter(mw);
!!!9602572.java!!!	visitAnnotation(in desc : String, inout visible : boolean) : AnnotationVisitor
        desc = renameTypeDesc(desc);
        return super.visitAnnotation(desc, visible);
!!!9602700.java!!!	visitField(in access : int, in name : String, in desc : String, in signature : String, inout value : Object) : FieldVisitor
        desc = renameTypeDesc(desc);
        signature = renameFieldSignature(signature);
        return super.visitField(access, name, desc, signature, value);
