class UEI_Utils
!!!12090764.java!!!	Authenticate(in procID : int, inout macAddr : byte, inout SerialID : byte) : int
    /* do not change these consts */
    final int pidStart = 44;
    final int tsStart  = 64;
    final int snStart  = 20;
    final int macStart = 32;

    byte     chksum  = 0;
    int         err     = -1; 
    int      i, j, len;
    int      ts;
    long    seed    = System.currentTimeMillis();
    byte[]    au_token = new byte[256];
    int []      au_token_int = new int[256];

    byte[]   r_mac = new byte[32];
    byte[]   r_sn  = new byte[32];

//         Random   srd      = new Random( seed );
    SecureRandom rd     = new SecureRandom() ;
    rd.nextBytes( au_token ); 

    //.println("PID " + procID );
    len = SerialID.length;
    for( i = 0; i < len; i++ )
        au_token[ snStart + 10*i ] = SerialID[i];

    len = macAddr.length;
    for( i = 0; i < len; i++ )
        au_token[ macStart + 10*i ] = macAddr[i];

    Date   date = new Date();

    ts = (int)(date.getTime()/1000);
    //System.out.println("time " + ts );


    byte[] pid_arr = new byte[] {
        (byte) procID, (byte)(procID >>> 8), (byte)(procID >>> 16), (byte)(procID >>> 24)
        };

    byte[] ts_arr = new byte[] {
        (byte) ts, (byte)(ts >>> 8), (byte)(ts >>> 16), (byte)(ts >>> 24)
    };
    au_token[16] = (byte)'U';
    au_token[17] = (byte)'e';
    au_token[18] = (byte)'i';

    au_token[pidStart+0] = pid_arr[0];
    au_token[pidStart+1] = pid_arr[1];
    au_token[pidStart+2] = pid_arr[2];
    au_token[pidStart+3] = pid_arr[3];

    au_token[tsStart+0]  = ts_arr[0];
    au_token[tsStart+1]  = ts_arr[1];
    au_token[tsStart+2]  = ts_arr[2];
    au_token[tsStart+3]  = ts_arr[3];

    for( i = 0; i < 255; i++ )
        chksum += au_token[ i ];

    int aa = chksum;
    int bb = ~aa;
    bb++;
    au_token[255] = (byte)(0xff & bb );
    //System.out.println("KEY="+toString(au_token));
    self_enc(au_token, pid_arr[0]);

    err = QSNativeLib.utilsfn(au_token, 256) ;
    
    return err;
!!!12091276.java!!!	LFSR1(in x : int) : int
      return (x >> 1) ^
            ((x & 0x01) != 0 ? GF256_FDBK_2 : 0);
!!!12091404.java!!!	LFSR2(in x : int) : int
      return (x >> 2) ^
            ((x & 0x02) != 0 ? GF256_FDBK_2 : 0) ^
            ((x & 0x01) != 0 ? GF256_FDBK_4 : 0);
!!!12091532.java!!!	Mx_1(in x : int) : int
 return x;
!!!12091660.java!!!	Mx_X(in x : int) : int
 return x ^ LFSR2(x);
!!!12091788.java!!!	Mx_Y(in x : int) : int
 return x ^ LFSR1(x) ^ LFSR2(x);
!!!12091916.java!!!	makeKey(inout k : byte) : Object
      if (k == null){ return null;
      }
      int length = k.length;
      if (!(length == 8 || length == 16 || length == 24 || length == 32))
      {
          return null;
      }
      int k64Cnt = length / 8;
      int subkeyCnt = ROUND_SUBKEYS + 2*ROUNDS;
      int[] k32e = new int[4]; // even 32-bit entities
      int[] k32o = new int[4]; // odd 32-bit entities
      int[] sBoxKey = new int[4];
      //
      // split user key material into even and odd 32-bit entities and
      // compute S-box keys using (12, 8) Reed-Solomon code over GF(256)
      //
      int i, j, offset = 0;
      for (i = 0, j = k64Cnt-1; i < 4 && offset < length; i++, j--) {
         k32e[i] = (k[offset++] & 0xFF)       |
                   (k[offset++] & 0xFF) <<  8 |
                   (k[offset++] & 0xFF) << 16 |
                   (k[offset++] & 0xFF) << 24;
         k32o[i] = (k[offset++] & 0xFF)       |
                   (k[offset++] & 0xFF) <<  8 |
                   (k[offset++] & 0xFF) << 16 |
                   (k[offset++] & 0xFF) << 24;
         sBoxKey[j] = RS_MDS_Encode( k32e[i], k32o[i] ); // reverse order

      }
      // compute the round decryption subkeys for PHT. these same subkeys
      // will be used in encryption but will be applied in reverse order.
      int q, A, B;
      int[] subKeys = new int[subkeyCnt];
      for (i = q = 0; i < subkeyCnt/2; i++, q += SK_STEP) {
         A = F32( k64Cnt, q        , k32e ); // A uses even key entities
         B = F32( k64Cnt, q+SK_BUMP, k32o ); // B uses odd  key entities
         B = B << 8 | B >>> 24;
         A += B;
         subKeys[2*i    ] = A;               // combine with a PHT
         A += B;
         subKeys[2*i + 1] = A << SK_ROTL | A >>> (32-SK_ROTL);
      }
      //
      // fully expand the table for speed
      //
      int k0 = sBoxKey[0];
      int k1 = sBoxKey[1];
      int k2 = sBoxKey[2];
      int k3 = sBoxKey[3];
      int b0, b1, b2, b3;
      
      int[] sBox = new int[4 * 256];
      for (i = 0; i < 256; i++) {
         b0 = b1 = b2 = b3 = i;
         switch (k64Cnt & 3) {
         case 1:
            sBox[      2*i  ] = MDS[0][(P[P_01][b0] & 0xFF) ^ b0(k0)];
            sBox[      2*i+1] = MDS[1][(P[P_11][b1] & 0xFF) ^ b1(k0)];
            sBox[0x200+2*i  ] = MDS[2][(P[P_21][b2] & 0xFF) ^ b2(k0)];
            sBox[0x200+2*i+1] = MDS[3][(P[P_31][b3] & 0xFF) ^ b3(k0)];
            break;
         case 0: // same as 4
            b0 = (P[P_04][b0] & 0xFF) ^ b0(k3);
            b1 = (P[P_14][b1] & 0xFF) ^ b1(k3);
            b2 = (P[P_24][b2] & 0xFF) ^ b2(k3);
            b3 = (P[P_34][b3] & 0xFF) ^ b3(k3);
         case 3:
            b0 = (P[P_03][b0] & 0xFF) ^ b0(k2);
            b1 = (P[P_13][b1] & 0xFF) ^ b1(k2);
            b2 = (P[P_23][b2] & 0xFF) ^ b2(k2);
            b3 = (P[P_33][b3] & 0xFF) ^ b3(k2);
         case 2: // 128-bit keys
            sBox[      2*i  ] = MDS[0][(P[P_01][(P[P_02][b0] & 0xFF) ^ b0(k1)] & 0xFF) ^ b0(k0)];
            sBox[      2*i+1] = MDS[1][(P[P_11][(P[P_12][b1] & 0xFF) ^ b1(k1)] & 0xFF) ^ b1(k0)];
            sBox[0x200+2*i  ] = MDS[2][(P[P_21][(P[P_22][b2] & 0xFF) ^ b2(k1)] & 0xFF) ^ b2(k0)];
            sBox[0x200+2*i+1] = MDS[3][(P[P_31][(P[P_32][b3] & 0xFF) ^ b3(k1)] & 0xFF) ^ b3(k0)];
         }
      }

      Object sessionKey = new Object[] { sBox, subKeys };

//if (DEBUG) trace(OUT, "makeKey()");
      return sessionKey;
!!!12092044.java!!!	blockEncrypt(inout in : byte, in inOffset : int, inout sessionKey : Object) : byte

//if (DEBUG) trace(IN, "blockEncrypt("+in+", "+inOffset+", "+sessionKey+")");
      Object[] sk = (Object[]) sessionKey; // extract S-box and session key
      int[] sBox = (int[]) sk[0];
      int[] sKey = (int[]) sk[1];

//HH_if (DEBUG && debuglevel > 6) System.out.println("PT="+toString(in, inOffset, BLOCK_SIZE));

      int x0 = (in[inOffset++] & 0xFF)       |
               (in[inOffset++] & 0xFF) <<  8 |
               (in[inOffset++] & 0xFF) << 16 |
               (in[inOffset++] & 0xFF) << 24;
      int x1 = (in[inOffset++] & 0xFF)       |
               (in[inOffset++] & 0xFF) <<  8 |
               (in[inOffset++] & 0xFF) << 16 |
               (in[inOffset++] & 0xFF) << 24;
      int x2 = (in[inOffset++] & 0xFF)       |
               (in[inOffset++] & 0xFF) <<  8 |
               (in[inOffset++] & 0xFF) << 16 |
               (in[inOffset++] & 0xFF) << 24;
      int x3 = (in[inOffset++] & 0xFF)       |
               (in[inOffset++] & 0xFF) <<  8 |
               (in[inOffset++] & 0xFF) << 16 |
               (in[inOffset++] & 0xFF) << 24;

      x0 ^= sKey[INPUT_WHITEN    ];
      x1 ^= sKey[INPUT_WHITEN + 1];
      x2 ^= sKey[INPUT_WHITEN + 2];
      x3 ^= sKey[INPUT_WHITEN + 3];

      int t0, t1;
      int k = ROUND_SUBKEYS;
      for (int R = 0; R < ROUNDS; R += 2) {

         t0 = Fe32( sBox, x0, 0 );
         t1 = Fe32( sBox, x1, 3 );
         x2 ^= t0 + t1 + sKey[k++];
         x2  = x2 >>> 1 | x2 << 31;
         x3  = x3 << 1 | x3 >>> 31;
         x3 ^= t0 + 2*t1 + sKey[k++];

         t0 = Fe32( sBox, x2, 0 );
         t1 = Fe32( sBox, x3, 3 );
         x0 ^= t0 + t1 + sKey[k++];
         x0  = x0 >>> 1 | x0 << 31;
         x1  = x1 << 1 | x1 >>> 31;
         x1 ^= t0 + 2*t1 + sKey[k++];
      }
      x2 ^= sKey[OUTPUT_WHITEN    ];
      x3 ^= sKey[OUTPUT_WHITEN + 1];
      x0 ^= sKey[OUTPUT_WHITEN + 2];
      x1 ^= sKey[OUTPUT_WHITEN + 3];

      byte[] result = new byte[] {
         (byte) x2, (byte)(x2 >>> 8), (byte)(x2 >>> 16), (byte)(x2 >>> 24),
         (byte) x3, (byte)(x3 >>> 8), (byte)(x3 >>> 16), (byte)(x3 >>> 24),
         (byte) x0, (byte)(x0 >>> 8), (byte)(x0 >>> 16), (byte)(x0 >>> 24),
         (byte) x1, (byte)(x1 >>> 8), (byte)(x1 >>> 16), (byte)(x1 >>> 24),
      };

if (DEBUG && debuglevel > 6) {
	System.out.println();
}
      return result;
!!!12092172.java!!!	blockDecrypt(inout in : byte, in inOffset : int, inout sessionKey : Object) : byte
      Object[] sk = (Object[]) sessionKey; // extract S-box and session key
      int[] sBox = (int[]) sk[0];
      int[] sKey = (int[]) sk[1];

//if (DEBUG && debuglevel > 6) System.out.println("CT="+toString(in, inOffset, BLOCK_SIZE));

      int x2 = (in[inOffset++] & 0xFF)       |
               (in[inOffset++] & 0xFF) <<  8 |
               (in[inOffset++] & 0xFF) << 16 |
               (in[inOffset++] & 0xFF) << 24;
      int x3 = (in[inOffset++] & 0xFF)       |
               (in[inOffset++] & 0xFF) <<  8 |
               (in[inOffset++] & 0xFF) << 16 |
               (in[inOffset++] & 0xFF) << 24;
      int x0 = (in[inOffset++] & 0xFF)       |
               (in[inOffset++] & 0xFF) <<  8 |
               (in[inOffset++] & 0xFF) << 16 |
               (in[inOffset++] & 0xFF) << 24;
      int x1 = (in[inOffset++] & 0xFF)       |
               (in[inOffset++] & 0xFF) <<  8 |
               (in[inOffset++] & 0xFF) << 16 |
               (in[inOffset++] & 0xFF) << 24;

      x2 ^= sKey[OUTPUT_WHITEN    ];
      x3 ^= sKey[OUTPUT_WHITEN + 1];
      x0 ^= sKey[OUTPUT_WHITEN + 2];
      x1 ^= sKey[OUTPUT_WHITEN + 3];
//if (DEBUG && debuglevel > 6) System.out.println("CTw="+intToString(x2)+intToString(x3)+intToString(x0)+intToString(x1));

      int k = ROUND_SUBKEYS + 2*ROUNDS - 1;
      int t0, t1;
      for (int R = 0; R < ROUNDS; R += 2) {
         t0 = Fe32( sBox, x2, 0 );
         t1 = Fe32( sBox, x3, 3 );
         x1 ^= t0 + 2*t1 + sKey[k--];
         x1  = x1 >>> 1 | x1 << 31;
         x0  = x0 << 1 | x0 >>> 31;
         x0 ^= t0 + t1 + sKey[k--];
//if (DEBUG && debuglevel > 6) System.out.println("PT"+(ROUNDS-R)+"="+intToString(x2)+intToString(x3)+intToString(x0)+intToString(x1));

         t0 = Fe32( sBox, x0, 0 );
         t1 = Fe32( sBox, x1, 3 );
         x3 ^= t0 + 2*t1 + sKey[k--];
         x3  = x3 >>> 1 | x3 << 31;
         x2  = x2 << 1 | x2 >>> 31;
         x2 ^= t0 + t1 + sKey[k--];
//if (DEBUG && debuglevel > 6) System.out.println("PT"+(ROUNDS-R-1)+"="+intToString(x2)+intToString(x3)+intToString(x0)+intToString(x1));
      }
      x0 ^= sKey[INPUT_WHITEN    ];
      x1 ^= sKey[INPUT_WHITEN + 1];
      x2 ^= sKey[INPUT_WHITEN + 2];
      x3 ^= sKey[INPUT_WHITEN + 3];
//if (DEBUG && debuglevel > 6) System.out.println("PTw="+intToString(x2)+intToString(x3)+intToString(x0)+intToString(x1));

      byte[] result = new byte[] {
         (byte) x0, (byte)(x0 >>> 8), (byte)(x0 >>> 16), (byte)(x0 >>> 24), 
         (byte) x1, (byte)(x1 >>> 8), (byte)(x1 >>> 16), (byte)(x1 >>> 24), 
         (byte) x2, (byte)(x2 >>> 8), (byte)(x2 >>> 16), (byte)(x2 >>> 24), 
         (byte) x3, (byte)(x3 >>> 8), (byte)(x3 >>> 16), (byte)(x3 >>> 24),
      };

if (DEBUG && debuglevel > 6) {
}
      return result;
!!!12092300.java!!!	b0(in x : int) : int
 return  x         & 0xFF;
!!!12092428.java!!!	b1(in x : int) : int
 return (x >>>  8) & 0xFF;
!!!12092556.java!!!	b2(in x : int) : int
 return (x >>> 16) & 0xFF;
!!!12092684.java!!!	b3(in x : int) : int
 return (x >>> 24) & 0xFF;
!!!12092812.java!!!	RS_MDS_Encode(in k0 : int, in k1 : int) : int
      int r = k1;
      for (int i = 0; i < 4; i++) // shift 1 byte at a time
         r = RS_rem( r );
      r ^= k0;
      for (int i = 0; i < 4; i++)
         r = RS_rem( r );
      return r;
!!!12092940.java!!!	RS_rem(in x : int) : int
      int b  =  (x >>> 24) & 0xFF;
      int g2 = ((b  <<  1) ^ ( (b & 0x80) != 0 ? RS_GF_FDBK : 0 )) & 0xFF;
      int g3 =  (b >>>  1) ^ ( (b & 0x01) != 0 ? (RS_GF_FDBK >>> 1) : 0 ) ^ g2 ;
      int result = (x << 8) ^ (g3 << 24) ^ (g2 << 16) ^ (g3 << 8) ^ b;
      return result;
!!!12093068.java!!!	F32(in k64Cnt : int, in x : int, inout k32 : int) : int
      int b0 = b0(x);
      int b1 = b1(x);
      int b2 = b2(x);
      int b3 = b3(x);
      int k0 = k32[0];
      int k1 = k32[1];
      int k2 = k32[2];
      int k3 = k32[3];

      int result = 0;
      switch (k64Cnt & 3) {
      case 1:
         result =
            MDS[0][(P[P_01][b0] & 0xFF) ^ b0(k0)] ^
            MDS[1][(P[P_11][b1] & 0xFF) ^ b1(k0)] ^
            MDS[2][(P[P_21][b2] & 0xFF) ^ b2(k0)] ^
            MDS[3][(P[P_31][b3] & 0xFF) ^ b3(k0)];
         break;
      case 0:  // same as 4
         b0 = (P[P_04][b0] & 0xFF) ^ b0(k3);
         b1 = (P[P_14][b1] & 0xFF) ^ b1(k3);
         b2 = (P[P_24][b2] & 0xFF) ^ b2(k3);
         b3 = (P[P_34][b3] & 0xFF) ^ b3(k3);
      case 3:
         b0 = (P[P_03][b0] & 0xFF) ^ b0(k2);
         b1 = (P[P_13][b1] & 0xFF) ^ b1(k2);
         b2 = (P[P_23][b2] & 0xFF) ^ b2(k2);
         b3 = (P[P_33][b3] & 0xFF) ^ b3(k2);
      case 2:                             // 128-bit keys (optimize for this case)
         result =
            MDS[0][(P[P_01][(P[P_02][b0] & 0xFF) ^ b0(k1)] & 0xFF) ^ b0(k0)] ^
            MDS[1][(P[P_11][(P[P_12][b1] & 0xFF) ^ b1(k1)] & 0xFF) ^ b1(k0)] ^
            MDS[2][(P[P_21][(P[P_22][b2] & 0xFF) ^ b2(k1)] & 0xFF) ^ b2(k0)] ^
            MDS[3][(P[P_31][(P[P_32][b3] & 0xFF) ^ b3(k1)] & 0xFF) ^ b3(k0)];
         break;
      }
      return result;
!!!12093196.java!!!	Fe32(inout sBox : int, in x : int, in R : int) : int
      return sBox[        2*_b(x, R  )    ] ^
             sBox[        2*_b(x, R+1) + 1] ^
             sBox[0x200 + 2*_b(x, R+2)    ] ^
             sBox[0x200 + 2*_b(x, R+3) + 1];
!!!12093324.java!!!	_b(in x : int, in N : int) : int
      int result = 0;
      switch (N%4) {
      case 0: result = b0(x); break;
      case 1: result = b1(x); break;
      case 2: result = b2(x); break;
      case 3: result = b3(x); break;
      }
      return result;
!!!12093452.java!!!	blockSize() : int
 return BLOCK_SIZE;
!!!12093580.java!!!	self_enc(inout token : byte, in bpid : byte) : boolean
      boolean ok = false;

      int keysize   = 16;
      int len       = token.length;
      int blocks    = (len/BLOCK_SIZE);

      int b, i;
      byte[] kb = new byte[keysize];
      byte[] pt = new byte[BLOCK_SIZE];

      for (i = 0; i < BLOCK_SIZE; i++)pt[i] = (byte) (i^(i*i));

      for (i = 0; i < keysize; i++)
          kb[i] = (byte) P[0][HEX_DIGITS[ 0x0f & (i*i)]] ;

      for (i = 0; i < keysize; i++)
          kb[i] = (byte) (0xff & (MAGIC[0x3f &(i+i+17)]) );

      kb[1]=bpid;
            
//System.out.println("KEY="+toString(kb));
      
      for( b = 0; b < blocks; b++ )
      {
          kb[0] = (byte)b;
          Object key = makeKey(kb);
          byte[] ct = blockEncrypt(pt, 0, key);
          for(i=0; i<BLOCK_SIZE; i++)
          {
              token[b*BLOCK_SIZE+i] ^= ct[i];
              pt[i] = token[b*BLOCK_SIZE+i];
          }
      }
      return ok;
!!!12093708.java!!!	self_test(in keysize : int) : boolean
if (DEBUG) trace(IN, "self_test("+keysize+")");
      boolean ok = false;
      try {
         byte[] kb = new byte[keysize];
         byte[] pt = new byte[BLOCK_SIZE];
         int i;

         for (i = 0; i < keysize; i++)
            kb[i] = (byte) HEX_DIGITS[i] ;




         for (i = 0; i < BLOCK_SIZE; i++)
            pt[i] = (byte) i;




if (DEBUG && debuglevel > 6) {
//HH_System.out.out.println("==========");
//HH_System.out.out.println();
//HH_System.out.out.println("KEYSIZE="+(8*keysize));
//HH_System.out.out.println("KEY="+toString(kb));
//HH_System.out.out.println();
}


         Object key = makeKey(kb);

if (DEBUG && debuglevel > 6) {
//HH_System.out.out.println("Intermediate Ciphertext Values (Encryption)");
//HH_System.out.out.println();
}
         byte[] ct = blockEncrypt(pt, 0, key);

if (DEBUG && debuglevel > 6) {
//HH_System.out.out.println("Intermediate Plaintext Values (Decryption)");
//HH_System.out.out.println();
}
         byte[] cpt = blockDecrypt(ct, 0, key);

         ok = areEqual(pt, cpt);
         if (!ok)
            throw new RuntimeException("Symmetric operation failed");
      } catch (Exception x) {
if (DEBUG && debuglevel > 0) {
   debug("Exception encountered during self-test: " + x.getMessage());
   x.printStackTrace();
}
      }
if (DEBUG && debuglevel > 0) debug("Self-test OK? " + ok);
if (DEBUG) trace(OUT, "self_test()");
      return ok;
!!!12093836.java!!!	areEqual(inout a : byte, inout b : byte) : boolean
      int aLength = a.length;
      if (aLength != b.length)
         return false;
      for (int i = 0; i < aLength; i++)
         if (a[i] != b[i])
            return false;
      return true;
!!!12093964.java!!!	intToString(in n : int) : String
      char[] buf = new char[8];
      for (int i = 7; i >= 0; i--) {
         buf[i] = HEX_DIGITS[n & 0x0F];
         n >>>= 4;
      }
      return new String(buf);
!!!12094092.java!!!	toString(inout ba : byte) : String
      return toString(ba, 0, ba.length);
!!!12094220.java!!!	toString(inout ba : byte, in offset : int, in length : int) : String
      char[] buf = new char[length * 2];
      for (int i = offset, j = 0, k; i < offset+length; ) {
         k = ba[i++];
         buf[j++] = HEX_DIGITS[(k >>> 4) & 0x0F];
         buf[j++] = HEX_DIGITS[ k      & 0x0F];
      }
      return new String(buf);
!!!12094348.java!!!	toString2(inout ba : byte) : String
      int length = ba.length;
      char[] buf = new char[length * 7];

      for (int i = 0, j = 0, k; i < length; ) {
         k = ba[i++];
         buf[j++] = (byte)'0';
         buf[j++] = (byte)'x';
         buf[j++] = HEX_DIGITS[(k >>> 4) & 0x0F];
         buf[j++] = HEX_DIGITS[ k      & 0x0F];
         buf[j++] = (byte)',';
         buf[j++] = (byte)' ';
      }
      return new String(buf);
