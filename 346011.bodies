class TextImpl
!!!2290459.java!!!	TextImpl(inout document : DocumentImpl, inout data : String)
        super(document, data);
!!!2290587.java!!!	getNodeName() : String
        return "#text";
!!!2290715.java!!!	getNodeType() : short
        return Node.TEXT_NODE;
!!!2290843.java!!!	splitText(in offset : int) : Text
        Text newText = document.createTextNode(
                substringData(offset, getLength() - offset));
        deleteData(0, offset);

        Node refNode = getNextSibling();
        if (refNode == null) {
            getParentNode().appendChild(newText);
        } else {
            getParentNode().insertBefore(newText, refNode);
        }

        return this;
!!!2290971.java!!!	isElementContentWhitespace() : boolean
        // Undefined because we don't validate. Whether whitespace characters
        // constitute "element content whitespace" is defined by the containing
        // element's declaration (DTD) and we don't parse that.
        // TODO: wire this up when we support document validation
        return false;
!!!2291099.java!!!	getWholeText() : String
        // TODO: support entity references. This code should expand through
        // the child elements of entity references.
        //     http://code.google.com/p/android/issues/detail?id=6807

        StringBuilder result = new StringBuilder();
        for (TextImpl n = firstTextNodeInCurrentRun(); n != null; n = n.nextTextNode()) {
            n.appendDataTo(result);
        }
        return result.toString();
!!!2291227.java!!!	replaceWholeText(inout content : String) : Text
        // TODO: support entity references. This code should expand and replace
        // the child elements of entity references.
        //     http://code.google.com/p/android/issues/detail?id=6807

        Node parent = getParentNode();
        Text result = null;

        // delete all nodes in the current run of text...
        for (TextImpl n = firstTextNodeInCurrentRun(); n != null; ) {

            // ...except the current node if we have content for it
            if (n == this && content != null && content.length() > 0) {
                setData(content);
                result = this;
                n = n.nextTextNode();

            } else {
                Node toRemove = n; // because removeChild() detaches siblings
                n = n.nextTextNode();
                parent.removeChild(toRemove);
            }
        }

        return result;
!!!2291355.java!!!	firstTextNodeInCurrentRun() : TextImpl
        TextImpl firstTextInCurrentRun = this;
        for (Node p = getPreviousSibling(); p != null; p = p.getPreviousSibling()) {
            short nodeType = p.getNodeType();
            if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {
                firstTextInCurrentRun = (TextImpl) p;
            } else {
                break;
            }
        }
        return firstTextInCurrentRun;
!!!2291483.java!!!	nextTextNode() : TextImpl
        Node nextSibling = getNextSibling();
        if (nextSibling == null) {
            return null;
        }

        short nodeType = nextSibling.getNodeType();
        return nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE
                ? (TextImpl) nextSibling
                : null;
!!!2291611.java!!!	minimize() : TextImpl
        if (getLength() == 0) {
            parent.removeChild(this);
            return null;
        }

        Node previous = getPreviousSibling();
        if (previous == null || previous.getNodeType() != Node.TEXT_NODE) {
            return this;
        }

        TextImpl previousText = (TextImpl) previous;
        previousText.buffer.append(buffer);
        parent.removeChild(this);
        return previousText;
