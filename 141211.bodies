class FileOutputStream
!!!220315.java!!!	FileOutputStream(inout file : File)
        this(file, false);
!!!220443.java!!!	FileOutputStream(inout file : File, inout append : boolean)
        if (file == null) {
            throw new NullPointerException("file == null");
        }
        this.mode = O_WRONLY | O_CREAT | (append ? O_APPEND : O_TRUNC);
        this.fd = IoBridge.open(file.getAbsolutePath(), mode);
        this.shouldClose = true;
        this.guard.open("close");
!!!220571.java!!!	FileOutputStream(inout fd : FileDescriptor)
        if (fd == null) {
            throw new NullPointerException("fd == null");
        }
        this.fd = fd;
        this.shouldClose = false;
        this.mode = O_WRONLY;
        this.channel = NioUtils.newFileChannel(this, fd, mode);
        // Note that we do not call guard.open here because the
        // FileDescriptor is not owned by the stream.
!!!220699.java!!!	FileOutputStream(inout path : String)
        this(path, false);
!!!220827.java!!!	FileOutputStream(inout path : String, inout append : boolean)
        this(new File(path), append);
!!!220955.java!!!	close() : void
        guard.close();
        synchronized (this) {
            if (channel != null) {
                channel.close();
            }
            if (shouldClose) {
                IoUtils.close(fd);
            } else {
                // An owned fd has been invalidated by IoUtils.close, but
                // we need to explicitly stop using an unowned fd (http://b/4361076).
                fd = new FileDescriptor();
            }
        }
!!!221083.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
            close();
        } finally {
            try {
                super.finalize();
            } catch (Throwable t) {
                // for consistency with the RI, we must override Object.finalize() to
                // remove the 'throws Throwable' clause.
                throw new AssertionError(t);
            }
        }
!!!221211.java!!!	getChannel() : FileChannel
        synchronized (this) {
            if (channel == null) {
                channel = NioUtils.newFileChannel(this, fd, mode);
            }
            return channel;
        }
!!!221339.java!!!	getFD() : FileDescriptor
        return fd;
!!!221467.java!!!	write(inout buffer : byte, in byteOffset : int, in byteCount : int) : void
        IoBridge.write(fd, buffer, byteOffset, byteCount);
!!!221595.java!!!	write(in oneByte : int) : void
        write(new byte[] { (byte) oneByte }, 0, 1);
