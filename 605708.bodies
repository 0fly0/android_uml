class VideoEditorAudioDecoderSource
!!!1804684.cpp!!!	Create(in format : sp<MetaData>, inout decoderShellContext : void) : sp<VideoEditorAudioDecoderSource>

    sp<VideoEditorAudioDecoderSource> aSource =
        new VideoEditorAudioDecoderSource(format, decoderShellContext);

    return aSource;
!!!1804812.cpp!!!	start(inout meta : MetaData = NULL) : status_t
    status_t err = OK;

    if( CREATED != mState ) {
        ALOGV("VideoEditorAudioDecoderSource::start: invalid state %d", mState);
        return UNKNOWN_ERROR;
    }

    mState = STARTED;

cleanUp:
    ALOGV("VideoEditorAudioDecoderSource::start END (0x%x)", err);
    return err;
!!!1804940.cpp!!!	stop() : status_t
    Mutex::Autolock autolock(mLock);
    status_t err = OK;

    ALOGV("VideoEditorAudioDecoderSource::stop begin");

    if( STARTED != mState ) {
        ALOGV("VideoEditorAudioDecoderSource::stop: invalid state %d", mState);
        return UNKNOWN_ERROR;
    }

    if (!mBuffers.empty()) {
        int n = mBuffers.size();
        for (int i = 0; i < n; i++) {
            mBuffers.itemAt(i)->release();
        }
        ALOGW("VideoEditorAudioDecoderSource::stop : %d buffer remained", n);
        mBuffers.clear();
    }

    mState = CREATED;

    ALOGV("VideoEditorAudioDecoderSource::stop END (0x%x)", err);
    return err;
!!!1805068.cpp!!!	getFormat() : sp<MetaData>

    ALOGV("VideoEditorAudioDecoderSource::getFormat");
    return mFormat;
!!!1805196.cpp!!!	read(inout buffer : MediaBuffer, in options : ReadOptions = NULL) : status_t
    Mutex::Autolock autolock(mLock);
    MediaSource::ReadOptions readOptions;

    VideoEditorAudioDecoder_Context* pDecContext =
     (VideoEditorAudioDecoder_Context *)mDecShellContext;

    if ( STARTED != mState ) {
        ALOGV("VideoEditorAudioDecoderSource::read invalid state %d", mState);
        return UNKNOWN_ERROR;
    }

    // Get a buffer from the reader if we don't have any
    if(mBuffers.empty()) {
        MediaBuffer* newBuffer = readBufferFromReader(pDecContext);
        if (!newBuffer) {
            *buffer = NULL;
            pDecContext->readerErrCode = M4WAR_NO_MORE_AU;
            return ERROR_END_OF_STREAM;
        }
        mBuffers.push(newBuffer);
    }
    *buffer = mBuffers.itemAt(0);
    mBuffers.removeAt(0);

    return OK;
!!!1805324.cpp!!!	storeBuffer(inout buffer : MediaBuffer) : void
    Mutex::Autolock autolock(mLock);
    VideoEditorAudioDecoder_Context* pDecContext =
     (VideoEditorAudioDecoder_Context *)mDecShellContext;

    ALOGV("VideoEditorAudioDecoderSource::storeBuffer begin");

    // If the user didn't give us a buffer, get it from the reader.
    if(buffer == NULL) {
        MediaBuffer* newBuffer = readBufferFromReader(pDecContext);
        if (!newBuffer) {
            pDecContext->readerErrCode = M4WAR_NO_MORE_AU;
            return;
        }
        buffer = newBuffer;
    }

    mBuffers.push(buffer);
    ALOGV("VideoEditorAudioDecoderSource::storeBuffer END");
!!!1805452.cpp!!!	~VideoEditorAudioDecoderSource()

    if( STARTED == mState ) {
        stop();
    }
