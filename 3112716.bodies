class AndroidNdt
!!!13061644.java!!!	onCreate(inout savedInstanceState : Bundle) : void
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    checkServerListValid();
    // Set the default server
    serverNumber = Constants.DEFAULT_SERVER;
    ndtLocation = new NdtLocation(this);
    ndtLocation.startListen();
    powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);
    ConnectivityManager connectivityManager =
        (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
    networkInfo = connectivityManager.getActiveNetworkInfo();
    wakeLock = powerManager.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, "Network Testing");
    serverName = Constants.SERVER_NAME[serverNumber];
    serverHost = Constants.SERVER_HOST[serverNumber];
    uiHandler = new UiHandler(Looper.myLooper());
    uiServices = new AndroidUiServices(this, uiHandler);
    textViewMain = (TextView) findViewById(R.id.TextViewMain);
    textViewMain.setMovementMethod(ScrollingMovementMethod.getInstance());
    textViewMain.setClickable(false);
    textViewMain.setLongClickable(false);
    textViewMain.append("\n" + getString(R.string.version_indicator, NdtTests.VERSION));
    textViewMain.append("\n" + getString(R.string.default_server_indicator, serverName));
    textViewMain.append("\n");
    mobileInfo = getMobileProperty();
    textViewMain.append(mobileInfo);
    textViewMain.append("\n");
    initComponents();
!!!13061772.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
    if (resultCode == RESULT_OK || requestCode == Constants.ACTIVITY_OPTION) {
      if (data != null) {
        serverNumber = data.getExtras().getInt(Constants.INTENT_SERVER_NO);
        textViewMain.append("\n"
            + getString(R.string.changed_server, Constants.SERVER_NAME[serverNumber]) + "\n");
        serverName = Constants.SERVER_NAME[serverNumber];
        serverHost = Constants.SERVER_HOST[serverNumber];
      }
    }
!!!13061900.java!!!	onDestroy() : void
    Log.v(Constants.LOG_TAG, "onDestory");
    if (wakeLock != null && wakeLock.isHeld()) {
      wakeLock.release();
      Log.v(Constants.LOG_TAG, "Release Wake Lock onDestroy");
    }
    super.onDestroy();
!!!13062028.java!!!	onStart() : void
    Log.v(Constants.LOG_TAG, "onStart");
    ndtLocation.startListen();
    super.onStart();
!!!13062156.java!!!	onStop() : void
    Log.v(Constants.LOG_TAG, "onStop");
    ndtLocation.stopListen();
    super.onStop();
!!!13062284.java!!!	checkServerListValid() : void
    if ((Constants.SERVER_NAME.length != Constants.SERVER_HOST.length)
        || (Constants.NUMBER_OF_SERVERS == 0)) {
      Log.v(Constants.LOG_TAG, "Server list corrupted.");
      Toast toast =
          Toast.makeText(getApplicationContext(), R.string.serverlist_corrupted_tip,
              Toast.LENGTH_SHORT);
      toast.show();
      finish();
    }
!!!13062412.java!!!	getSystemProperty() : String
    String osName, osArch, osVer, javaVer, javaVendor;
    osName = System.getProperty("os.name");
    osArch = System.getProperty("os.arch");
    osVer = System.getProperty("os.version");
    javaVer = System.getProperty("java.version");
    javaVendor = System.getProperty("java.vendor");
    StringBuilder sb = new StringBuilder()
        .append("\n")
        .append(getString(R.string.os_line, osName, osArch, osVer))
        .append("\n")
        .append(getString(R.string.java_line, javaVer, javaVendor));
    return sb.toString();
!!!13062540.java!!!	getMobileProperty() : String
    StringBuilder sb = new StringBuilder();
    if (ndtLocation.location != null) {
      Log.v(Constants.LOG_TAG, ndtLocation.location.toString());
      sb.append(getString(R.string.latitude_result, ndtLocation.location.getLatitude()))
          .append("\n")
          .append(getString(R.string.longitude_result, ndtLocation.location.getLongitude()));
    }
    if (networkInfo != null) {
      Log.v(Constants.LOG_TAG, networkInfo.toString());
      sb.append("\n")
          .append(getString(R.string.network_type_indicator, networkInfo.getTypeName()));
    }
    return sb.toString();
!!!13062668.java!!!	initComponents() : void
    buttonStart = (Button) findViewById(R.id.ButtonStart);
    buttonStart.setOnClickListener(new StartButtonListener());
    buttonAbout = (Button) findViewById(R.id.ButtonAbout);
    buttonAbout.setOnClickListener(new AboutButtonListener(this));
    buttonOption = (Button) findViewById(R.id.ButtonOption);
    buttonOption.setOnClickListener(new OptionButtonListener());
    buttonStatistics = (Button) findViewById(R.id.ButtonStatistics);
    buttonStatistics.setOnClickListener(new StatisticsButtonListener());
    buttonStatistics.setEnabled(false);
    progressBar = (ProgressBar) findViewById(R.id.ProgressBar);
    progressBar.setVisibility(View.INVISIBLE);
    progressBar.setIndeterminate(false);
!!!13062796.java!!!	getNetworkType() : String
    if (networkInfo != null) {
      int networkType = networkInfo.getType();
      switch (networkType) {
        case ConnectivityManager.TYPE_MOBILE:
          return NdtTests.NETWORK_MOBILE;
        case ConnectivityManager.TYPE_WIFI:
          return NdtTests.NETWORK_WIFI;
        default:
          return NdtTests.NETWORK_UNKNOWN;
      }
    } else {
      return NdtTests.NETWORK_UNKNOWN;
    }
