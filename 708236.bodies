class Window
!!!2315660.java!!!	Window(inout context : Context)
        mContext = context;
!!!2315788.java!!!	getContext() : Context
        return mContext;
!!!2315916.java!!!	getWindowStyle() : TypedArray
        synchronized (this) {
            if (mWindowStyle == null) {
                mWindowStyle = mContext.obtainStyledAttributes(
                        com.android.internal.R.styleable.Window);
            }
            return mWindowStyle;
        }
!!!2316044.java!!!	setContainer(inout container : Window) : void
        mContainer = container;
        if (container != null) {
            // Embedded screens never have a title.
            mFeatures |= 1<<FEATURE_NO_TITLE;
            mLocalFeatures |= 1<<FEATURE_NO_TITLE;
            container.mHasChildren = true;
        }
!!!2316172.java!!!	getContainer() : Window
        return mContainer;
!!!2316300.java!!!	hasChildren() : boolean
        return mHasChildren;
!!!2316428.java!!!	destroy() : void
        mDestroyed = true;
!!!2316556.java!!!	isDestroyed() : boolean
        return mDestroyed;
!!!2316684.java!!!	setWindowManager(inout wm : WindowManager, inout appToken : IBinder, in appName : String) : void
        setWindowManager(wm, appToken, appName, false);
!!!2316812.java!!!	setWindowManager(inout wm : WindowManager, inout appToken : IBinder, in appName : String, inout hardwareAccelerated : boolean) : void
        mAppToken = appToken;
        mAppName = appName;
        mHardwareAccelerated = hardwareAccelerated
                || SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, false);
        if (wm == null) {
            wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);
        }
        mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(this);
!!!2316940.java!!!	adjustLayoutParamsForSubWindow(inout wp : LayoutParams) : void
        CharSequence curTitle = wp.getTitle();
        if (wp.type >= WindowManager.LayoutParams.FIRST_SUB_WINDOW &&
            wp.type <= WindowManager.LayoutParams.LAST_SUB_WINDOW) {
            if (wp.token == null) {
                View decor = peekDecorView();
                if (decor != null) {
                    wp.token = decor.getWindowToken();
                }
            }
            if (curTitle == null || curTitle.length() == 0) {
                String title;
                if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA) {
                    title="Media";
                } else if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA_OVERLAY) {
                    title="MediaOvr";
                } else if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
                    title="Panel";
                } else if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL) {
                    title="SubPanel";
                } else if (wp.type == WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG) {
                    title="AtchDlg";
                } else {
                    title=Integer.toString(wp.type);
                }
                if (mAppName != null) {
                    title += ":" + mAppName;
                }
                wp.setTitle(title);
            }
        } else {
            if (wp.token == null) {
                wp.token = mContainer == null ? mAppToken : mContainer.mAppToken;
            }
            if ((curTitle == null || curTitle.length() == 0)
                    && mAppName != null) {
                wp.setTitle(mAppName);
            }
        }
        if (wp.packageName == null) {
            wp.packageName = mContext.getPackageName();
        }
        if (mHardwareAccelerated) {
            wp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
        }
!!!2317068.java!!!	getWindowManager() : WindowManager
        return mWindowManager;
!!!2317196.java!!!	setCallback(inout callback : Callback) : void
        mCallback = callback;
!!!2317324.java!!!	getCallback() : Callback
        return mCallback;
!!!2317836.java!!!	setLayout(in width : int, in height : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.width = width;
        attrs.height = height;
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(attrs);
        }
!!!2317964.java!!!	setGravity(in gravity : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.gravity = gravity;
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(attrs);
        }
!!!2318092.java!!!	setType(in type : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.type = type;
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(attrs);
        }
!!!2318220.java!!!	setFormat(in format : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        if (format != PixelFormat.UNKNOWN) {
            attrs.format = format;
            mHaveWindowFormat = true;
        } else {
            attrs.format = mDefaultWindowFormat;
            mHaveWindowFormat = false;
        }
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(attrs);
        }
!!!2318348.java!!!	setWindowAnimations(in resId : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.windowAnimations = resId;
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(attrs);
        }
!!!2318476.java!!!	setSoftInputMode(in mode : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        if (mode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) {
            attrs.softInputMode = mode;
            mHasSoftInputMode = true;
        } else {
            mHasSoftInputMode = false;
        }
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(attrs);
        }
!!!2318604.java!!!	addFlags(in flags : int) : void
        setFlags(flags, flags);
!!!2318732.java!!!	clearFlags(in flags : int) : void
        setFlags(0, flags);
!!!2318860.java!!!	setFlags(in flags : int, in mask : int) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.flags = (attrs.flags&~mask) | (flags&mask);
        if ((mask&WindowManager.LayoutParams.FLAG_NEEDS_MENU_KEY) != 0) {
            attrs.privateFlags |= WindowManager.LayoutParams.PRIVATE_FLAG_SET_NEEDS_MENU_KEY;
        }
        mForcedWindowFlags |= mask;
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(attrs);
        }
!!!2318988.java!!!	setDimAmount(in amount : float) : void
        final WindowManager.LayoutParams attrs = getAttributes();
        attrs.dimAmount = amount;
        mHaveDimAmount = true;
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(attrs);
        }
!!!2319116.java!!!	setAttributes(inout a : LayoutParams) : void
        mWindowAttributes.copyFrom(a);
        if (mCallback != null) {
            mCallback.onWindowAttributesChanged(mWindowAttributes);
        }
!!!2319244.java!!!	getAttributes() : LayoutParams
        return mWindowAttributes;
!!!2319372.java!!!	getForcedWindowFlags() : int
        return mForcedWindowFlags;
!!!2319500.java!!!	hasSoftInputMode() : boolean
        return mHasSoftInputMode;
!!!2319628.java!!!	setCloseOnTouchOutside(inout close : boolean) : void
        mCloseOnTouchOutside = close;
        mSetCloseOnTouchOutside = true;
!!!2319756.java!!!	setCloseOnTouchOutsideIfNotSet(inout close : boolean) : void
        if (!mSetCloseOnTouchOutside) {
            mCloseOnTouchOutside = close;
            mSetCloseOnTouchOutside = true;
        }
!!!2320012.java!!!	shouldCloseOnTouch(inout context : Context, inout event : MotionEvent) : boolean
        if (mCloseOnTouchOutside && event.getAction() == MotionEvent.ACTION_DOWN
                && isOutOfBounds(context, event) && peekDecorView() != null) {
            return true;
        }
        return false;
!!!2320140.java!!!	isOutOfBounds(inout context : Context, inout event : MotionEvent) : boolean
        final int x = (int) event.getX();
        final int y = (int) event.getY();
        final int slop = ViewConfiguration.get(context).getScaledWindowTouchSlop();
        final View decorView = getDecorView();
        return (x < -slop) || (y < -slop)
                || (x > (decorView.getWidth()+slop))
                || (y > (decorView.getHeight()+slop));
!!!2320268.java!!!	requestFeature(in featureId : int) : boolean
        final int flag = 1<<featureId;
        mFeatures |= flag;
        mLocalFeatures |= mContainer != null ? (flag&~mContainer.mFeatures) : flag;
        return (mFeatures&flag) != 0;
!!!2320396.java!!!	removeFeature(in featureId : int) : void
        final int flag = 1<<featureId;
        mFeatures &= ~flag;
        mLocalFeatures &= ~(mContainer != null ? (flag&~mContainer.mFeatures) : flag);
!!!2320524.java!!!	makeActive() : void
        if (mContainer != null) {
            if (mContainer.mActiveChild != null) {
                mContainer.mActiveChild.mIsActive = false;
            }
            mContainer.mActiveChild = this;
        }
        mIsActive = true;
        onActive();
!!!2320652.java!!!	isActive() : boolean
        return mIsActive;
!!!2320780.java!!!	findViewById(in id : int) : View
        return getDecorView().findViewById(id);
!!!2323084.java!!!	setBackgroundDrawableResource(in resid : int) : void
        setBackgroundDrawable(mContext.getResources().getDrawable(resid));
!!!2325388.java!!!	getFeatures() : int
        return mFeatures;
!!!2325516.java!!!	hasFeature(in feature : int) : boolean
        return (getFeatures() & (1 << feature)) != 0;
!!!2325644.java!!!	getLocalFeatures() : int
        return mLocalFeatures;
!!!2325772.java!!!	setDefaultWindowFormat(in format : int) : void
        mDefaultWindowFormat = format;
        if (!mHaveWindowFormat) {
            final WindowManager.LayoutParams attrs = getAttributes();
            attrs.format = format;
            if (mCallback != null) {
                mCallback.onWindowAttributesChanged(attrs);
            }
        }
!!!2325900.java!!!	haveDimAmount() : boolean
        return mHaveDimAmount;
