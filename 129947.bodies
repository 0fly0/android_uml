class Float
!!!333723.java!!!	Float(in value : float)
        this.value = value;
!!!333851.java!!!	Float(in value : double)
        this.value = (float) value;
!!!333979.java!!!	Float(inout string : String)
        this(parseFloat(string));
!!!334107.java!!!	compareTo(inout object : Float) : int
        return compare(value, object.value);
!!!334235.java!!!	byteValue() : byte
        return (byte) value;
!!!334363.java!!!	doubleValue() : double
        return value;
!!!334491.java!!!	equals(inout object : Object) : boolean
        return (object instanceof Float) &&
                (floatToIntBits(this.value) == floatToIntBits(((Float) object).value));
!!!334875.java!!!	floatValue() : float
        return value;
!!!335003.java!!!	hashCode() : int
        return floatToIntBits(value);
!!!335259.java!!!	intValue() : int
        return (int) value;
!!!335387.java!!!	isInfinite() : boolean
        return isInfinite(value);
!!!335515.java!!!	isInfinite(in f : float) : boolean
        return (f == POSITIVE_INFINITY) || (f == NEGATIVE_INFINITY);
!!!335643.java!!!	isNaN() : boolean
        return isNaN(value);
!!!335771.java!!!	isNaN(in f : float) : boolean
        return f != f;
!!!335899.java!!!	longValue() : long
        return (long) value;
!!!336027.java!!!	parseFloat(inout string : String) : float
        return StringToReal.parseFloat(string);
!!!336155.java!!!	shortValue() : short
        return (short) value;
!!!336283.java!!!	toString() : String
        return Float.toString(value);
!!!336411.java!!!	toString(in f : float) : String
        return RealToString.getInstance().floatToString(f);
!!!336539.java!!!	valueOf(inout string : String) : Float
        return parseFloat(string);
!!!336667.java!!!	compare(in float1 : float, in float2 : float) : int
        // Non-zero, non-NaN checking.
        if (float1 > float2) {
            return 1;
        }
        if (float2 > float1) {
            return -1;
        }
        if (float1 == float2 && 0.0f != float1) {
            return 0;
        }

        // NaNs are equal to other NaNs and larger than any other float
        if (isNaN(float1)) {
            if (isNaN(float2)) {
                return 0;
            }
            return 1;
        } else if (isNaN(float2)) {
            return -1;
        }

        // Deal with +0.0 and -0.0
        int f1 = floatToRawIntBits(float1);
        int f2 = floatToRawIntBits(float2);
        // The below expression is equivalent to:
        // (f1 == f2) ? 0 : (f1 < f2) ? -1 : 1
        // because f1 and f2 are either 0 or Integer.MIN_VALUE
        return (f1 >> 31) - (f2 >> 31);
!!!336795.java!!!	valueOf(in f : float) : Float
        return new Float(f);
!!!336923.java!!!	toHexString(in f : float) : String
        /*
         * Reference: http://en.wikipedia.org/wiki/IEEE_754-1985
         */
        if (f != f) {
            return "NaN";
        }
        if (f == POSITIVE_INFINITY) {
            return "Infinity";
        }
        if (f == NEGATIVE_INFINITY) {
            return "-Infinity";
        }

        int bitValue = floatToIntBits(f);

        boolean negative = (bitValue & 0x80000000) != 0;
        // mask exponent bits and shift down
        int exponent = (bitValue & 0x7f800000) >>> 23;
        // mask significand bits and shift up
        // significand is 23-bits, so we shift to treat it like 24-bits
        int significand = (bitValue & 0x007FFFFF) << 1;

        if (exponent == 0 && significand == 0) {
            return (negative ? "-0x0.0p0" : "0x0.0p0");
        }

        StringBuilder hexString = new StringBuilder(10);
        if (negative) {
            hexString.append("-0x");
        } else {
            hexString.append("0x");
        }

        if (exponent == 0) { // denormal (subnormal) value
            hexString.append("0.");
            // significand is 23-bits, so there can be 6 hex digits
            int fractionDigits = 6;
            // remove trailing hex zeros, so Integer.toHexString() won't print
            // them
            while ((significand != 0) && ((significand & 0xF) == 0)) {
                significand >>>= 4;
                fractionDigits--;
            }
            // this assumes Integer.toHexString() returns lowercase characters
            String hexSignificand = Integer.toHexString(significand);

            // if there are digits left, then insert some '0' chars first
            if (significand != 0 && fractionDigits > hexSignificand.length()) {
                int digitDiff = fractionDigits - hexSignificand.length();
                while (digitDiff-- != 0) {
                    hexString.append('0');
                }
            }
            hexString.append(hexSignificand);
            hexString.append("p-126");
        } else { // normal value
            hexString.append("1.");
            // significand is 23-bits, so there can be 6 hex digits
            int fractionDigits = 6;
            // remove trailing hex zeros, so Integer.toHexString() won't print
            // them
            while ((significand != 0) && ((significand & 0xF) == 0)) {
                significand >>>= 4;
                fractionDigits--;
            }
            // this assumes Integer.toHexString() returns lowercase characters
            String hexSignificand = Integer.toHexString(significand);

            // if there are digits left, then insert some '0' chars first
            if (significand != 0 && fractionDigits > hexSignificand.length()) {
                int digitDiff = fractionDigits - hexSignificand.length();
                while (digitDiff-- != 0) {
                    hexString.append('0');
                }
            }
            hexString.append(hexSignificand);
            hexString.append('p');
            // remove exponent's 'bias' and convert to a string
            hexString.append(exponent - 127);
        }
        return hexString.toString();
