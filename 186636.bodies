class YUVCanvas
!!!421260.cpp!!!	FillYUV(in yValue : uint8_t, in uValue : uint8_t, in vValue : uint8_t) : void
    for (int32_t y = 0; y < mYUVImage.height(); ++y) {
        for (int32_t x = 0; x < mYUVImage.width(); ++x) {
            mYUVImage.setPixelValue(x, y, yValue, uValue, vValue);
        }
    }
!!!421388.cpp!!!	FillYUVRectangle(in rect : Rect, in yValue : uint8_t, in uValue : uint8_t, in vValue : uint8_t) : void
    for (int32_t y = rect.top; y < rect.bottom; ++y) {
        for (int32_t x = rect.left; x < rect.right; ++x) {
            mYUVImage.setPixelValue(x, y, yValue, uValue, vValue);
        }
    }
!!!421516.cpp!!!	CopyImageRect(in srcRect : Rect, in destStartX : int32_t, in destStartY : int32_t, in srcImage : YUVImage) : void

    // Try fast copy first
    if (YUVImage::fastCopyRectangle(
                srcRect,
                destStartX, destStartY,
                srcImage, mYUVImage)) {
        return;
    }

    int32_t srcStartX = srcRect.left;
    int32_t srcStartY = srcRect.top;
    for (int32_t offsetY = 0; offsetY < srcRect.height(); ++offsetY) {
        for (int32_t offsetX = 0; offsetX < srcRect.width(); ++offsetX) {
            int32_t srcX = srcStartX + offsetX;
            int32_t srcY = srcStartY + offsetY;

            int32_t destX = destStartX + offsetX;
            int32_t destY = destStartY + offsetY;

            uint8_t yValue;
            uint8_t uValue;
            uint8_t vValue;

            srcImage.getPixelValue(srcX, srcY, &yValue, &uValue, &vValue);
            mYUVImage.setPixelValue(destX, destY, yValue, uValue, vValue);
        }
    }
!!!421644.cpp!!!	downsample(in srcOffsetX : int32_t, in srcOffsetY : int32_t, in skipX : int32_t, in skipY : int32_t, in srcImage : YUVImage) : void
    // TODO: Add a low pass filter for downsampling.

    // Check that srcImage is big enough to fill mYUVImage.
    CHECK((srcOffsetX + (mYUVImage.width() - 1) * skipX) < srcImage.width());
    CHECK((srcOffsetY + (mYUVImage.height() - 1) * skipY) < srcImage.height());

    uint8_t yValue;
    uint8_t uValue;
    uint8_t vValue;

    int32_t srcY = srcOffsetY;
    for (int32_t y = 0; y < mYUVImage.height(); ++y) {
        int32_t srcX = srcOffsetX;
        for (int32_t x = 0; x < mYUVImage.width(); ++x) {
            srcImage.getPixelValue(srcX, srcY, &yValue, &uValue, &vValue);
            mYUVImage.setPixelValue(x, y, yValue, uValue, vValue);

            srcX += skipX;
        }
        srcY += skipY;
    }
