class GeneralName
!!!2228763.java!!!	GeneralName(in tag : int, inout name : String)
        if (name == null) {
            throw new IOException("name == null");
        }
        this.tag = tag;
        switch (tag) {
            case OTHER_NAME :
            case X400_ADDR :
            case EDIP_NAME :
                throw new IOException("Unknown string representation for type [" + tag + "]");
            case DNS_NAME :
                // according to RFC 3280 p.34 the DNS name should be
                // checked against the
                // RFC 1034 p.10 (3.5. Preferred name syntax):
                checkDNS(name);
                this.name = name;
                break;
            case UR_ID :
                // check the uniformResourceIdentifier for correctness
                // according to RFC 3280 p.34
                checkURI(name);
                this.name = name;
                break;
            case RFC822_NAME :
                this.name = name;
                break;
            case REG_ID:
                this.name = oidStrToInts(name);
                break;
            case DIR_NAME :
                this.name = new Name(name);
                break;
            case IP_ADDR :
                this.name = ipStrToBytes(name);
                break;
            default:
                throw new IOException("Unknown type: [" + tag + "]");
        }
!!!2228891.java!!!	GeneralName(inout name : OtherName)
        this.tag = OTHER_NAME;
        this.name = name;
!!!2229019.java!!!	GeneralName(inout name : ORAddress)
        this.tag = X400_ADDR;
        this.name = name;
!!!2229147.java!!!	GeneralName(inout name : Name)
        this.tag = DIR_NAME;
        this.name = name;
!!!2229275.java!!!	GeneralName(inout name : EDIPartyName)
        this.tag = EDIP_NAME;
        this.name = name;
!!!2229403.java!!!	GeneralName(inout name : byte)
        this.tag = IP_ADDR;
        this.name = new byte[name.length];
        System.arraycopy(name, 0, this.name, 0, name.length);
!!!2229531.java!!!	GeneralName(in tag : int, inout name : byte)
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        if ((tag < 0) || (tag > 8)) {
            throw new IOException("GeneralName: unknown tag: " + tag);
        }
        this.tag = tag;
        this.name_encoding = new byte[name.length];
        System.arraycopy(name, 0, this.name_encoding, 0, name.length);
        this.name = nameASN1[tag].decode(this.name_encoding);
!!!2229659.java!!!	getTag() : int
        return tag;
!!!2229787.java!!!	getName() : Object
        return name;
!!!2229915.java!!!	equals(inout other : Object) : boolean
        if (!(other instanceof GeneralName)) {
            return false;
        }
        GeneralName gname = (GeneralName) other;
        if (this.tag != gname.tag) {
            return false;
        }
        switch(tag) {
            case RFC822_NAME:
            case DNS_NAME:
            case UR_ID:
                return ((String) name).equalsIgnoreCase(
                        (String) gname.getName());
            case REG_ID:
                return Arrays.equals((int[]) name, (int[]) gname.name);
            case IP_ADDR:
                // iPAddress [7], check by using ranges.
                return Arrays.equals((byte[]) name, (byte[]) gname.name);
            case DIR_NAME:
            case X400_ADDR:
            case OTHER_NAME:
            case EDIP_NAME:
                return Arrays.equals(getEncoded(), gname.getEncoded());
            default:
                // should never happen
        }
        return false;
!!!2230043.java!!!	hashCode() : int
        switch (tag) {
        case RFC822_NAME:
        case DNS_NAME:
        case UR_ID:
        case REG_ID:
        case IP_ADDR:
            return name.hashCode();
        case DIR_NAME:
        case X400_ADDR:
        case OTHER_NAME:
        case EDIP_NAME:
            return Arrays.hashCode(getEncoded());
        default:
            return super.hashCode();
        }
!!!2230171.java!!!	isAcceptable(inout gname : GeneralName) : boolean
        if (this.tag != gname.getTag()) {
            return false;
        }
        switch (this.tag) {
            case RFC822_NAME:
                // Mail address [1]:
                // a@b.c - particular address is acceptable by the same address,
                // or by b.c - host name.
                return ((String) gname.getName()).toLowerCase(Locale.US)
                    .endsWith(((String) name).toLowerCase(Locale.US));
            case DNS_NAME:
                // DNS name [2] that can be constructed by simply adding
                // to the left hand side of the name satisfies the name
                // constraint: aaa.aa.aa satisfies to aaa.aa.aa, aa.aa, ..
                String dns = (String) name;
                String _dns = (String) gname.getName();
                if (dns.equalsIgnoreCase(_dns)) {
                    return true;
                } else {
                    return _dns.toLowerCase(Locale.US).endsWith("." + dns.toLowerCase(Locale.US));
                }
            case UR_ID:
                // For URIs the constraint ".xyz.com" is satisfied by both
                // abc.xyz.com and abc.def.xyz.com.  However, the constraint
                // ".xyz.com" is not satisfied by "xyz.com".
                // When the constraint does not begin with a period, it
                // specifies a host.
                // Extract the host from URI:
                String uri = (String) name;
                int begin = uri.indexOf("://")+3;
                int end = uri.indexOf('/', begin);
                String host = (end == -1)
                                ? uri.substring(begin)
                                : uri.substring(begin, end);
                uri = (String) gname.getName();
                begin = uri.indexOf("://")+3;
                end = uri.indexOf('/', begin);
                String _host = (end == -1)
                                ? uri.substring(begin)
                                : uri.substring(begin, end);
                if (host.startsWith(".")) {
                    return _host.toLowerCase(Locale.US).endsWith(host.toLowerCase(Locale.US));
                } else {
                    return host.equalsIgnoreCase(_host);
                }
            case IP_ADDR:
                // iPAddress [7], check by using ranges.
                byte[] address = (byte[]) name;
                byte[] _address = (byte[]) gname.getName();
                int length = address.length;

                /*
                 * For IP v4, as specified in RFC 791, the address must contain
                 * exactly 4 byte component. For IP v6, as specified in RFC
                 * 1883, the address must contain exactly 16 byte component. If
                 * GeneralName structure is used as a part of Name Constraints
                 * extension, to represent an address range the number of
                 * address component is doubled (to 8 and 32 bytes
                 * respectively).
                 */
                if (length != 4 && length != 8 && length != 16 && length != 32) {
                    return false;
                }

                int _length = _address.length;
                if (length == _length) {
                    return Arrays.equals(address, _address);
                } else if (length == 2*_length) {
                    for (int i = 0; i < _address.length; i++) {
                        // TODO: should the 2nd IP address be treated as a range or as a mask?
                        int octet = _address[i] & 0xff;
                        int min = address[i] & 0xff;
                        int max = address[i + _length] & 0xff;
                        if ((octet < min) || (octet > max)) {
                            return false;
                        }
                    }
                    return true;
                } else {
                    return false;
                }
            case DIR_NAME:
                // FIXME: false:
                // directoryName according to 4.1.2.4
                // comparing the encoded forms of the names
                //TODO:
                //Legacy implementations exist where an RFC 822 name
                //is embedded in the subject distinguished name in an
                //attribute of type EmailAddress
            case X400_ADDR:
            case OTHER_NAME:
            case EDIP_NAME:
            case REG_ID:
                return Arrays.equals(getEncoded(), gname.getEncoded());
            default:
                // should never happen
        }
        return true;
!!!2230299.java!!!	getAsList() : List
        ArrayList<Object> result = new ArrayList<Object>();
        result.add(tag);
        switch (tag) {
            case OTHER_NAME:
                result.add(((OtherName) name).getEncoded());
                break;
            case RFC822_NAME:
            case DNS_NAME:
            case UR_ID:
                result.add(name); // String
                break;
            case REG_ID:
                result.add(ObjectIdentifier.toString((int[]) name));
                break;
            case X400_ADDR:
                result.add(((ORAddress) name).getEncoded());
                break;
            case DIR_NAME: // directoryName is returned as a String
                result.add(((Name) name).getName(X500Principal.RFC2253));
                break;
            case EDIP_NAME:
                result.add(((EDIPartyName) name).getEncoded());
                break;
            case IP_ADDR: //iPAddress is returned as a String, not as a byte array
                result.add(ipBytesToStr((byte[]) name));
                break;
            default:
                // should never happen
        }
        return Collections.unmodifiableList(result);
!!!2230427.java!!!	toString() : String
        String result = "";
        switch (tag) {
            case OTHER_NAME:
                result = "otherName[0]: "
                         + Array.getBytesAsString(getEncoded());
                break;
            case RFC822_NAME:
                result = "rfc822Name[1]: " + name;
                break;
            case DNS_NAME:
                result = "dNSName[2]: " + name;
                break;
            case UR_ID:
                result = "uniformResourceIdentifier[6]: " + name;
                break;
            case REG_ID:
                result = "registeredID[8]: " + ObjectIdentifier.toString((int[]) name);
                break;
            case X400_ADDR:
                result = "x400Address[3]: "
                         + Array.getBytesAsString(getEncoded());
                break;
            case DIR_NAME:
                result = "directoryName[4]: "
                         + ((Name) name).getName(X500Principal.RFC2253);
                break;
            case EDIP_NAME:
                result = "ediPartyName[5]: "
                         + Array.getBytesAsString(getEncoded());
                break;
            case IP_ADDR:
                result = "iPAddress[7]: " + ipBytesToStr((byte[]) name);
                break;
            default:
                // should never happen
        }
        return result;
!!!2230555.java!!!	getEncoded() : byte
        if (encoding == null) {
            encoding = ASN1.encode(this);
        }
        return encoding;
!!!2230683.java!!!	getEncodedName() : byte
        if (name_encoding == null) {
            name_encoding = nameASN1[tag].encode(name);
        }
        return name_encoding;
!!!2230811.java!!!	checkDNS(inout dns : String) : void
        String string = dns.toLowerCase(Locale.US);
        int length = string.length();
        // indicates if it is a first letter of the label
        boolean first_letter = true;
        for (int i = 0; i < length; i++) {
            char ch = string.charAt(i);
            if (first_letter) {
                if ((ch > 'z' || ch < 'a') && (ch < '0' || ch > '9') && (ch != '*')) {
                    throw new IOException("DNS name must start with a letter: " + dns);
                }
                first_letter = false;
                continue;
            }
            if (!((ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')
                    || (ch == '-') || (ch == '.') || (ch == '*'))) {
                throw new IOException("Incorrect DNS name: " + dns);
            }
            if (ch == '.') {
                // check the end of the previous label, it should not
                // be '-' sign
                if (string.charAt(i-1) == '-') {
                    throw new IOException("Incorrect DNS name: label ends with '-': " + dns);
                }
                first_letter = true;
            }
        }
!!!2230939.java!!!	checkURI(inout uri : String) : void
        try {
            URI ur = new URI(uri);
            if (ur.getScheme() == null || ur.getRawSchemeSpecificPart().isEmpty()) {
                throw new IOException("No scheme or scheme-specific-part in uniformResourceIdentifier: " + uri);
            }
            if (!ur.isAbsolute()) {
                throw new IOException("Relative uniformResourceIdentifier: " + uri);
            }
        } catch (URISyntaxException e) {
            throw (IOException) new IOException("Bad representation of uniformResourceIdentifier: " + uri).initCause(e);

        }
!!!2231067.java!!!	oidStrToInts(inout oid : String) : int
        int length = oid.length();
        if (oid.charAt(length-1) == '.') {
            throw new IOException("Bad OID: " + oid);
        }
        int[] result = new int[length/2+1]; // best case: a.b.c.d.e
        int number = 0; // the number of OID's components
        for (int i = 0; i < length; i++) {
            int value = 0;
            int pos = i;
            for (; i < length; i++) {
                char ch = oid.charAt(i);
                if ((ch < '0') || (ch > '9')) {
                    break;
                }
                value = 10 * value + (ch - '0');
            }
            if (i == pos) {
                // the number was not read
                throw new IOException("Bad OID: " + oid);
            }
            result[number++] = value;
            if (i == length) {
                break;
            }
            char ch = oid.charAt(i);
            if (ch != '.') {
                throw new IOException("Bad OID: " + oid);
            }
        }
        if (number < 2) {
            throw new IOException("OID should consist of no less than 2 components: " + oid);
        }
        return Arrays.copyOfRange(result, 0, number);
!!!2231195.java!!!	ipStrToBytes(inout ip : String) : byte
        if (!InetAddress.isNumeric(ip)) {
            throw new IOException("Not an IP address: " + ip);
        }
        return InetAddress.getByName(ip).getAddress();
!!!2231323.java!!!	ipBytesToStr(inout ip : byte) : String
        try {
            return InetAddress.getByAddress(null, ip).getHostAddress();
        } catch (UnknownHostException e) {
            throw new IllegalArgumentException("Unexpected IP address: " + Arrays.toString(ip));
        }
