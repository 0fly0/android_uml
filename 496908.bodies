class Namespace
!!!1440012.cpp!!!	~Namespace()
    int N = m_types.size();
    for (int i=0; i<N; i++) {
        delete m_types[i];
    }
!!!1440140.cpp!!!	Add(inout type : Type) : void
    Type* t = Find(type->QualifiedName());
    if (t == NULL) {
        m_types.push_back(type);
    }
!!!1440268.cpp!!!	AddGenericType(in package : string, in name : string, in args : int) : void
    Generic g;
        g.package = package;
        g.name = name;
        g.qualified = package + '.' + name;
        g.args = args;
    m_generics.push_back(g);
!!!1440396.cpp!!!	Find(in name : string) : Type
    int N = m_types.size();
    for (int i=0; i<N; i++) {
        if (m_types[i]->QualifiedName() == name) {
            return m_types[i];
        }
    }
    return NULL;
!!!1440524.cpp!!!	Find(in package : char, in name : char) : Type
    string s;
    if (package != NULL) {
        s += package;
        s += '.';
    }
    s += name;
    return Find(s);
!!!1440652.cpp!!!	Search(in name : string) : Type
    // an exact match wins
    Type* result = Find(name);
    if (result != NULL) {
        return result;
    }

    // try the class names
    // our language doesn't allow you to not specify outer classes
    // when referencing an inner class.  that could be changed, and this
    // would be the place to do it, but I don't think the complexity in
    // scoping rules is worth it.
    int N = m_types.size();
    for (int i=0; i<N; i++) {
        if (m_types[i]->Name() == name) {
            return m_types[i];
        }
    }

    // we got to here and it's not a generic, give up
    if (name.find('<') == name.npos) {
        return NULL;
    }

    // remove any whitespace
    string normalized = normalize_generic(name);

    // find the part before the '<', find a generic for it
    ssize_t baseIndex = normalized.find('<');
    string base(normalized.c_str(), baseIndex);
    const Generic* g = search_generic(base);
    if (g == NULL) {
        return NULL;
    }

    // For each of the args, do a recursive search on it.  We don't allow
    // generics within generics like Java does, because we're really limiting
    // them to just built-in container classes, at least for now.  Our syntax
    // ensures this right now as well.
    vector<Type*> args;
    size_t start = baseIndex + 1;
    size_t end = start;
    while (normalized[start] != '\0') {
        end = normalized.find(',', start);
        if (end == normalized.npos) {
            end = normalized.find('>', start);
        }
        string s(normalized.c_str()+start, end-start);
        Type* t = this->Search(s);
        if (t == NULL) {
            // maybe we should print a warning here?
            return NULL;
        }
        args.push_back(t);
        start = end+1;
    }

    // construct a GenericType, add it to our name set so they always get
    // the same object, and return it.
    result = make_generic_type(g->package, g->name, args);
    if (result == NULL) {
        return NULL;
    }

    this->Add(result);
    return this->Find(result->QualifiedName());
!!!1440780.cpp!!!	Dump() : void
    int n = m_types.size();
    for (int i=0; i<n; i++) {
        Type* t = m_types[i];
        printf("type: package=%s name=%s qualifiedName=%s\n",
                t->Package().c_str(), t->Name().c_str(),
                t->QualifiedName().c_str());
    }
!!!1440908.cpp!!!	search_generic(in name : string) : Generic
    int N = m_generics.size();

    // first exact match
    for (int i=0; i<N; i++) {
        const Generic& g = m_generics[i];
        if (g.qualified == name) {
            return &g;
        }
    }

    // then name match
    for (int i=0; i<N; i++) {
        const Generic& g = m_generics[i];
        if (g.name == name) {
            return &g;
        }
    }

    return NULL;
