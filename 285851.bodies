class DeflaterInputStream
!!!1770267.java!!!	DeflaterInputStream(inout in : InputStream)
        this(in, new Deflater(), DEFAULT_BUFFER_SIZE);
!!!1770395.java!!!	DeflaterInputStream(inout in : InputStream, inout deflater : Deflater)
        this(in, deflater, DEFAULT_BUFFER_SIZE);
!!!1770523.java!!!	DeflaterInputStream(inout in : InputStream, inout deflater : Deflater, in bufferSize : int)
        super(in);
        if (in == null) {
            throw new NullPointerException("in == null");
        } else if (deflater == null) {
            throw new NullPointerException("deflater == null");
        }
        if (bufferSize <= 0) {
            throw new IllegalArgumentException("bufferSize <= 0: " + bufferSize);
        }
        this.def = deflater;
        this.buf = new byte[bufferSize];
!!!1770651.java!!!	close() : void
        closed = true;
        def.end();
        in.close();
!!!1770779.java!!!	read() : int
        return Streams.readSingleByte(this);
!!!1770907.java!!!	read(inout buffer : byte, in offset : int, in byteCount : int) : int
        checkClosed();
        Arrays.checkOffsetAndCount(buffer.length, offset, byteCount);
        if (byteCount == 0) {
            return 0;
        }

        if (!available) {
            return -1;
        }

        int count = 0;
        while (count < byteCount && !def.finished()) {
            if (def.needsInput()) {
                // read data from input stream
                int bytesRead = in.read(buf);
                if (bytesRead == -1) {
                    def.finish();
                } else {
                    def.setInput(buf, 0, bytesRead);
                }
            }
            int bytesDeflated = def.deflate(buf, 0, Math.min(buf.length, byteCount - count));
            if (bytesDeflated == -1) {
                break;
            }
            System.arraycopy(buf, 0, buffer, offset + count, bytesDeflated);
            count += bytesDeflated;
        }
        if (count == 0) {
            count = -1;
            available = false;
        }
        return count;
!!!1771035.java!!!	skip(in byteCount : long) : long
        byteCount = Math.min(Integer.MAX_VALUE, byteCount);
        return Streams.skipByReading(this, byteCount);
!!!1771163.java!!!	available() : int
        checkClosed();
        return available ? 1 : 0;
!!!1771291.java!!!	markSupported() : boolean
        return false;
!!!1771547.java!!!	reset() : void
        throw new IOException();
!!!1771675.java!!!	checkClosed() : void
        if (closed) {
            throw new IOException("Stream is closed");
        }
