class TvWorkspace
!!!13740556.java!!!	TvWorkspace(inout context : Context)
        this(context, null);
!!!13740684.java!!!	TvWorkspace(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!13740812.java!!!	TvWorkspace(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
        mLauncher = (Launcher) context;
        mAppIconSize = getResources().getDimensionPixelSize(R.dimen.app_icon_size);
!!!13740940.java!!!	setup(inout dragController : DragController) : void
        super.setup(dragController);
        mDragLayer = mLauncher.getDragLayer();
!!!13741068.java!!!	addInScreen(inout child : View, in container : long, in screen : int, in x : int, in y : int, in spanX : int, in spanY : int, inout insert : boolean) : void
        super.addInScreen(child, container, screen, x, y, spanX, spanY, insert);

        if (container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
            child.setOnKeyListener(new EnterKeyEventListener());
        } else {
            child.setOnKeyListener(new TvIconKeyEventListener());
        }
!!!13741196.java!!!	setDragMode(in dragMode : int) : void
        super.setDragMode(dragMode);
        mDragMode = dragMode;
!!!13741324.java!!!	onDragStart(inout source : DragSource, inout info : Object, in dragAction : int) : void
        super.onDragStart(source, info, dragAction);
        mSkipFolder = false;
        mLastKeyCode = KeyEvent.KEYCODE_UNKNOWN;
!!!13741452.java!!!	postFakeTouchEvent(in action : int, in x : int, in y : int, inout event : KeyEvent) : void
        if (action == MotionEvent.ACTION_DOWN) {
            mLastDownTime = event.getDownTime();
        }

        int[] loc = mTempLoc;
        getNextLocation(x, y, event.getKeyCode(), loc);

        final MotionEvent touchEvent = MotionEvent.obtain(mLastDownTime,
                event.getEventTime(), action, loc[0], loc[1], event.getMetaState());

        // Set source to avoid set of tainted flag.
        touchEvent.setSource(InputDevice.SOURCE_CLASS_POINTER);

        post(new Runnable() {
            public void run() {
                mDragLayer.dispatchTouchEvent(touchEvent);
            }
        });
!!!13741580.java!!!	getNextLocation(in x : int, in y : int, in keyCode : int, inout loc : int) : void
        if (DEBUG) {
            Log.d(TAG, "getNextLocation(x=" + x + ", y=" + y + ", keyCode="
                + KeyEvent.keyCodeToString(keyCode) + ")");
        }

        if (keyCode == KeyEvent.KEYCODE_ENTER || keyCode == KeyEvent.KEYCODE_DPAD_CENTER
                || isPageMoving()) {
            if (DEBUG) Log.d(TAG, "keep current location");
            loc[0] = x;
            loc[1] = y;
            return;
        }

        View[] dropTargets = {
            null,
            mLauncher.getSearchBar().findViewById(R.id.info_target_text),
            mLauncher.getSearchBar().findViewById(R.id.delete_target_text),
            mLauncher.getHotseat().getLayout(),
            getCurrentDropLayout(),
        };
        Folder folder = getOpenFolder();
        if (folder != null) {
            dropTargets[0] = folder.findViewById(R.id.folder_content);
        }

        // Find out where (x,y) belongs to.
        View currentDropTarget = null;
        for (View dropTarget : dropTargets) {
            if (dropTarget == null || !dropTarget.isShown()) {
                continue;
            }

            Rect rect = mTempRect;
            mDragLayer.getDescendantRectRelativeToSelf(dropTarget, rect);
            if (rect.contains(x, y)) {
                currentDropTarget = dropTarget;
                break;
            }
        }
        if (DEBUG) Log.d(TAG, "current drop target = " + currentDropTarget);

        // If (x,y) is in CellLayout and "next" cell exists, choose that cell.
        if (currentDropTarget instanceof CellLayout
                && getNextCellLocation(x, y, (CellLayout) currentDropTarget, keyCode, loc)) {
            return;
        }

        // Find other drop target that is closest or has closest cell (for CellLayout).
        Rect curRect = mTempCurRect;
        if (folder != null) {
            mDragLayer.getDescendantRectRelativeToSelf(folder, curRect);
        } else {
            mDragLayer.getDescendantRectRelativeToSelf(currentDropTarget, curRect);
        }
        if (DEBUG) Log.d(TAG, "current drop target rect = " + curRect);

        double minDistance = Double.MAX_VALUE;
        int minX = -1;
        int minY = -1;
        for (View dropTarget : dropTargets) {
            if (dropTarget == null || dropTarget == currentDropTarget || !dropTarget.isShown()) {
                continue;
            }

            if (dropTarget instanceof CellLayout) {
                if (!getNextCellLocationInOtherLayout(x, y, (CellLayout) dropTarget, keyCode,
                            curRect, loc)) {
                    continue;
                }
            } else {
                Rect rect = mTempRect;
                mDragLayer.getDescendantRectRelativeToSelf(dropTarget, rect);
                loc[0] = rect.centerX();
                loc[1] = rect.centerY();
            }
            if (DEBUG) Log.d(TAG, "candidate: " + dropTarget + " (" + loc[0] + "," + loc[1] + ")");

            switch (keyCode) {
                case KeyEvent.KEYCODE_DPAD_LEFT:    if (loc[0] >= x) continue; break;
                case KeyEvent.KEYCODE_DPAD_RIGHT:   if (loc[0] <= x) continue; break;
                case KeyEvent.KEYCODE_DPAD_UP:      if (loc[1] >= y) continue; break;
                case KeyEvent.KEYCODE_DPAD_DOWN:    if (loc[1] <= y) continue; break;
            }

            double distance = Math.hypot(x - loc[0], y - loc[1]);
            if (distance < minDistance) {
                minDistance = distance;
                minX = loc[0];
                minY = loc[1];
            }
        }

        if (minDistance != Double.MAX_VALUE) {
            loc[0] = minX;
            loc[1] = minY;
            return;
        }

        // If none found, try previous or next page.
        if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT && mCurrentPage > 0) {
            snapToPage(mCurrentPage - 1);
            if (currentDropTarget.getParent() == this) {
                CellLayout layout = (CellLayout) currentDropTarget;
                int[] cell = mTempCell;
                getClosestCell(x, y, layout, cell);
                getCellLocation(layout, layout.getCountX() - 1, cell[1], loc);
                return;
            }
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT && mCurrentPage < getChildCount() - 1) {
            snapToPage(mCurrentPage + 1);
            if (currentDropTarget.getParent() == this) {
                CellLayout layout = (CellLayout) currentDropTarget;
                int[] cell = mTempCell;
                getClosestCell(x, y, layout, cell);
                getCellLocation(layout, 0, cell[1], loc);
                return;
            }
        }

        // Keep current location
        loc[0] = x;
        loc[1] = y;
!!!13741708.java!!!	getNextCellLocation(in x : int, in y : int, inout layout : CellLayout, in keyCode : int, inout loc : int) : boolean
        int[] cell = mTempCell;
        getClosestCell(x, y, layout, cell);

        if (keyCode == mLastKeyCode
                && (mDragMode == DRAG_MODE_CREATE_FOLDER || mDragMode == DRAG_MODE_ADD_TO_FOLDER)
                && layout.existsEmptyCell()) {
            // TODO: This works for most cases, but might need to be changed
            // because cell might not be re-ordered even if empty cell exists.
            mSkipFolder = true;
            mLastKeyCode = KeyEvent.KEYCODE_UNKNOWN;
        } else {
            mSkipFolder = false;
            mLastKeyCode = keyCode;
            if (!getNextCell(layout, keyCode, cell)) {
                return false;
            }
        }

        getCellLocation(layout, cell[0], cell[1], loc);
        return true;
!!!13741836.java!!!	getNextCellLocationInOtherLayout(in x : int, in y : int, inout layout : CellLayout, in keyCode : int, inout curRect : Rect, inout loc : int) : boolean
        int[] cell = mTempCell;
        getClosestCell(x, y, layout, cell);

        do {
            getCellLocation(layout, cell[0], cell[1], loc);
            if (DEBUG) {
                Log.d(TAG, "cell (" + cell[0] + "," + cell[1] + ") = (" + loc[0] + ","
                        + loc[1] + ")");
            }
            if (!curRect.contains(loc[0], loc[1])) {
                return true;
            }
        } while (getNextCell(layout, keyCode, cell));

        return false;
!!!13741964.java!!!	getNextCell(inout layout : CellLayout, in keyCode : int, inout cell : int) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_DPAD_LEFT:    cell[0]--; break;
            case KeyEvent.KEYCODE_DPAD_RIGHT:   cell[0]++; break;
            case KeyEvent.KEYCODE_DPAD_UP:      cell[1]--; break;
            case KeyEvent.KEYCODE_DPAD_DOWN:    cell[1]++; break;
        }

        int maxX = layout.getCountX() - 1;
        int maxY = layout.getCountY() - 1;
        int minX = mLauncher.isHotseatLayout(layout) ? 1 : 0;
        return cell[0] >= minX && cell[0] <= maxX && cell[1] >= 0 && cell[1] <= maxY;
!!!13742092.java!!!	getClosestCell(in x : int, in y : int, inout layout : CellLayout, inout cell : int) : void
        int[] offset = mTempOffset;
        float scale = mDragLayer.getLocationInDragLayer(layout, offset);

        int layoutX = Math.round((x - offset[0]) / scale);
        int layoutY = Math.round((y - offset[1]) / scale);
        layout.pointToCellExact(layoutX, layoutY, cell);

        // Assume that hotseat_all_apps_index is always 0 for TV.
        if (mLauncher.isHotseatLayout(layout) && cell[0] == 0) {
            cell[0]++;
        }

        if (DEBUG) {
            Log.d(TAG, "drag layer (" + x + "," + y + ") -> cell layout (" + layoutX + ","
                    + layoutY + ") -> cell (" + cell[0] + "," + cell[1] + ")");
        }
!!!13742220.java!!!	getCellLocation(inout layout : CellLayout, in cellX : int, in cellY : int, inout loc : int) : void
        layout.cellToCenterPoint(cellX, cellY, loc);
        int layoutX = loc[0];
        int layoutY = loc[1];
        mDragLayer.getDescendantCoordRelativeToSelf(layout, loc);

        if (DEBUG) {
            Log.d(TAG, "cell (" + cellX + "," + cellY + ") -> cell layout (" + layoutX + ","
                    + layoutY + ") -> drag layer (" + loc[0] + "," + loc[1] + ")");
        }
!!!13742348.java!!!	willCreateUserFolder(inout info : ItemInfo, inout target : CellLayout, inout targetCell : int, in distance : float, inout considerTimeout : boolean) : boolean
        if (mSkipFolder) return false;
        return super.willCreateUserFolder(info, target, targetCell, distance, considerTimeout);
!!!13742476.java!!!	willAddToExistingUserFolder(inout dragInfo : Object, inout target : CellLayout, inout targetCell : int, in distance : float) : boolean
        if (mSkipFolder) return false;
        return super.willAddToExistingUserFolder(dragInfo, target, targetCell, distance);
