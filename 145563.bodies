class PushbackReader
!!!257179.java!!!	PushbackReader(inout in : Reader)
        super(in);
        buf = new char[1];
        pos = 1;
!!!257307.java!!!	PushbackReader(inout in : Reader, in size : int)
        super(in);
        if (size <= 0) {
            throw new IllegalArgumentException("size <= 0");
        }
        buf = new char[size];
        pos = size;
!!!257435.java!!!	close() : void
        synchronized (lock) {
            buf = null;
            in.close();
        }
!!!257563.java!!!	mark(in readAheadLimit : int) : void
        throw new IOException("mark/reset not supported");
!!!257691.java!!!	markSupported() : boolean
        return false;
!!!257819.java!!!	read() : int
        synchronized (lock) {
            checkNotClosed();
            /* Is there a pushback character available? */
            if (pos < buf.length) {
                return buf[pos++];
            }
            /**
             * Assume read() in the InputStream will return 2 lowest-order bytes
             * or -1 if end of stream.
             */
            return in.read();
        }
!!!257947.java!!!	checkNotClosed() : void
        if (buf == null) {
            throw new IOException("PushbackReader is closed");
        }
!!!258075.java!!!	read(inout buffer : char, in offset : int, in count : int) : int
        synchronized (lock) {
            checkNotClosed();
            Arrays.checkOffsetAndCount(buffer.length, offset, count);

            int copiedChars = 0;
            int copyLength = 0;
            int newOffset = offset;
            /* Are there pushback chars available? */
            if (pos < buf.length) {
                copyLength = (buf.length - pos >= count) ? count : buf.length
                        - pos;
                System.arraycopy(buf, pos, buffer, newOffset, copyLength);
                newOffset += copyLength;
                copiedChars += copyLength;
                /* Use up the chars in the local buffer */
                pos += copyLength;
            }
            /* Have we copied enough? */
            if (copyLength == count) {
                return count;
            }
            int inCopied = in.read(buffer, newOffset, count - copiedChars);
            if (inCopied > 0) {
                return inCopied + copiedChars;
            }
            if (copiedChars == 0) {
                return inCopied;
            }
            return copiedChars;
        }
!!!258203.java!!!	ready() : boolean
        synchronized (lock) {
            if (buf == null) {
                throw new IOException("Reader is closed");
            }
            return (buf.length - pos > 0 || in.ready());
        }
!!!258331.java!!!	reset() : void
        throw new IOException("mark/reset not supported");
!!!258459.java!!!	unread(inout buffer : char) : void
        unread(buffer, 0, buffer.length);
!!!258587.java!!!	unread(inout buffer : char, in offset : int, in length : int) : void
        synchronized (lock) {
            checkNotClosed();
            if (length > pos) {
                throw new IOException("Pushback buffer full");
            }
            Arrays.checkOffsetAndCount(buffer.length, offset, length);
            for (int i = offset + length - 1; i >= offset; i--) {
                unread(buffer[i]);
            }
        }
!!!258715.java!!!	unread(in oneChar : int) : void
        synchronized (lock) {
            checkNotClosed();
            if (pos == 0) {
                throw new IOException("Pushback buffer full");
            }
            buf[--pos] = (char) oneChar;
        }
!!!258843.java!!!	skip(in charCount : long) : long
        if (charCount < 0) {
            throw new IllegalArgumentException("charCount < 0: " + charCount);
        }
        synchronized (lock) {
            checkNotClosed();
            if (charCount == 0) {
                return 0;
            }
            long inSkipped;
            int availableFromBuffer = buf.length - pos;
            if (availableFromBuffer > 0) {
                long requiredFromIn = charCount - availableFromBuffer;
                if (requiredFromIn <= 0) {
                    pos += charCount;
                    return charCount;
                }
                pos += availableFromBuffer;
                inSkipped = in.skip(requiredFromIn);
            } else {
                inSkipped = in.skip(charCount);
            }
            return inSkipped + availableFromBuffer;
        }
