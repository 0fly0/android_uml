class Proxy
!!!600859.java!!!	Proxy(inout type : Type, inout sa : SocketAddress)
        /*
         * Don't use DIRECT type to construct a proxy instance directly.
         * SocketAddress must NOT be null.
         */
        if (type == Type.DIRECT || sa == null) {
            throw new IllegalArgumentException("Illegal Proxy.Type or SocketAddress argument");
        }
        this.type = type;
        address = sa;
!!!600987.java!!!	Proxy()
        type = Type.DIRECT;
        address = null;
!!!601115.java!!!	type() : Type
        return type;
!!!601243.java!!!	address() : SocketAddress
        return address;
!!!601371.java!!!	toString() : String
        StringBuilder builder = new StringBuilder();
        if (type != null) {
            builder.append(type.toString());
        }
        builder.append("@");
        if (type != Proxy.Type.DIRECT && address != null) {
            builder.append(address.toString());
        }
        return builder.toString();
!!!601499.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Proxy)) {
            return false;
        }
        Proxy another = (Proxy) obj;
        // address is null when and only when it's NO_PROXY.
        return (type == another.type) && address.equals(another.address);
!!!601627.java!!!	hashCode() : int
        int ret = 0;
        ret += type.hashCode();
        if (address != null) {
            ret += address.hashCode();
        }
        return ret;
