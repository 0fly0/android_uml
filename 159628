format 74
"android" // framework::base::tools::aapt::android
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/framework/base/tools/aapt/"
  cpp_src_dir "/home/shchen/work/jellybean/framework/base/tools/aapt/"
  cpp_namespace "android"
  classview 149516 "aapt"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 482572 "ResourceIdCache"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1368460 "lookup"
	class_operation preserve_cpp_body_indent public explicit_return_type "uint32_t"
	nparams 4
	  param in name "package" type class_ref 142988 // String16
	  param in name "type" type class_ref 142988 // String16
	  param in name "name" type class_ref 142988 // String16
	  param in name "onlyPublic" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1368588 "store"
	class_operation preserve_cpp_body_indent public explicit_return_type "uint32_t"
	nparams 5
	  param in name "package" type class_ref 142988 // String16
	  param in name "type" type class_ref 142988 // String16
	  param in name "name" type class_ref 142988 // String16
	  param in name "onlyPublic" explicit_type "bool"
	  param in name "resId" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// returns the resource ID being stored, for callsite convenience

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1368716 "dump"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 485644 "ZipEntry"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * ZipEntry objects represent a single entry in a Zip archive.
 *
 * You can use one of these to get or set information about an entry, but
 * there are no functions here for accessing the data itself.  (We could
 * tuck a pointer to the ZipFile in here for convenience, but that raises
 * the likelihood of using ZipEntry objects after discarding the ZipFile.)
 *
 * File information is stored in two places: next to the file data (the Local
 * File Header, and possibly a Data Descriptor), and at the end of the file
 * (the Central Directory Entry).  The two must be kept in sync."
      classrelation 994444 // <dependency>
	relation 994444 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 994444 // <dependency>
	  b parent class_ref 485772 // ZipFile
      end

      operation 1396364 "ZipEntry"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : mDeleted(false), mMarked(false)
        {};
"
	
	
	
	
      end

      operation 1396492 "~ZipEntry"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1396620 "isCompressed"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return mCDE.mCompressionMethod != kCompressStored;
    };
"
	
	
	
	
	comment "     * Returns \"true\" if the data is compressed."
      end

      operation 1396748 "getCompressionMethod"
	const cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mCDE.mCompressionMethod; };
"
	
	
	
	
      end

      operation 1396876 "getUncompressedLen"
	const cpp_inline public explicit_return_type "off_t"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mCDE.mUncompressedSize; };
"
	
	
	
	
	comment "     * Return the uncompressed length."
      end

      operation 1397004 "getCompressedLen"
	const cpp_inline public explicit_return_type "off_t"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mCDE.mCompressedSize; };
"
	
	
	
	
	comment "     * Return the compressed length.  For uncompressed data, this returns
     * the same thing as getUncompresesdLen()."
      end

      operation 1397132 "getLFHOffset"
	const cpp_inline public explicit_return_type "off_t"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mCDE.mLocalHeaderRelOffset; };
"
	
	
	
	
	comment "     * Return the offset of the local file header."
      end

      operation 1397260 "getFileOffset"
	const cpp_inline public explicit_return_type "off_t"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return mCDE.mLocalHeaderRelOffset +
                LocalFileHeader::kLFHLen +
                mLFH.mFileNameLength +
                mLFH.mExtraFieldLength;
    };
"
	
	
	
	
	comment "     * Return the absolute file offset of the start of the compressed or
     * uncompressed data."
      end

      operation 1397388 "getCRC32"
	const cpp_inline public explicit_return_type "ulong"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mCDE.mCRC32; };
"
	
	
	
	
	comment "     * Return the data CRC."
      end

      operation 1397516 "getModWhen"
	preserve_cpp_body_indent const public explicit_return_type "time_t"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Convert the DOS date/time stamp into a UNIX time stamp.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Return file modification time in UNIX seconds-since-epoch."
      end

      operation 1397644 "getFileName"
	const cpp_inline public explicit_return_type "char"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return (const char*) mCDE.mFileName; };
"
	
	
	
	
	comment "     * Return the archived file name."
      end

      operation 1397772 "getMarked"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mMarked; };
"
	
	
	
	
	comment "     * Application-defined \"mark\".  Can be useful when synchronizing the
     * contents of an archive with contents on disk."
      end

      operation 1397900 "setMarked"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mMarked = val; };
"
	
	
	
	
      end

      operation 1398028 "getShortLE"
	class_operation cpp_inline public explicit_return_type "ushort"
	nparams 1
	  param in name "buf" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return buf[0] | (buf[1] << 8);
    };
"
	
	
	
	
	comment "     * Some basic functions for raw data manipulation.  \"LE\" means
     * Little Endian."
      end

      operation 1398156 "getLongLE"
	class_operation cpp_inline public explicit_return_type "ulong"
	nparams 1
	  param in name "buf" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return buf[0] | (buf[1] << 8) | (buf[2] << 16) | (buf[3] << 24);
    };
"
	
	
	
	
      end

      operation 1398284 "putShortLE"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "buf" explicit_type "byte"
	  param in name "val" explicit_type "short"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        buf[0] = (unsigned char) val;
        buf[1] = (unsigned char) (val >> 8);
    };
"
	
	
	
	
      end

      operation 1398412 "putLongLE"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "buf" explicit_type "byte"
	  param in name "val" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        buf[0] = (unsigned char) val;
        buf[1] = (unsigned char) (val >> 8);
        buf[2] = (unsigned char) (val >> 16);
        buf[3] = (unsigned char) (val >> 24);
    };
"
	
	
	
	
      end

      class 485900 "anonymous222"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1189132 "kCompressStored"
	  public type class_ref 485900 // anonymous222
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1189260 "kCompressDeflated"
	  public type class_ref 485900 // anonymous222
	  init_value " 8"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1398540 "getDeleted"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mDeleted; };
"
	
	
	
	
	comment "     * Deletion flag.  If set, the entry will be removed on the next
     * call to \"flush\"."
      end

      operation 1398668 "initFromCDE"
	preserve_cpp_body_indent protected return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "fp" explicit_type "FILE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Initialize a new ZipEntry structure from a FILE* positioned at a
// * CentralDirectoryEntry.
// *
// * On exit, the file pointer will be at the start of the next CDE or
// * at the EOCD.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Initialize the structure from the file, which is pointing at
     * our Central Directory entry."
      end

      operation 1398796 "initNew"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 2
	  param in name "fileName" explicit_type "char"
	  param in name "comment" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Initialize a new entry.  Pass in the file name and an optional comment.
// *
// * Initializes the CDE and the LFH.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Initialize the structure for a new file.  We need the filename
     * and comment so that we can properly size the LFH area.  The
     * filename is mandatory, the comment is optional."
      end

      operation 1398924 "initFromExternal"
	preserve_cpp_body_indent protected return_type class_ref 128268 // status_t
	nparams 2
	  param in name "pZipFile" type class_ref 485772 // ZipFile
	  param in name "pEntry" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Initialize a new entry, starting with the ZipEntry from a different
// * archive.
// *
// * Initializes the CDE and the LFH.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Initialize the structure with the contents of a ZipEntry from
     * another file."
      end

      operation 1399052 "addPadding"
	preserve_cpp_body_indent protected return_type class_ref 128268 // status_t
	nparams 1
	  param in name "padding" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Insert pad bytes in the LFH by tweaking the \"extra\" field.  This will
// * potentially confuse something that put \"extra\" data in here earlier,
// * but I can't find an actual problem.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Add some pad bytes to the LFH.  We do this by adding or resizing
     * the \"extra\" field."
      end

      operation 1399180 "setDataInfo"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 4
	  param in name "uncompLen" explicit_type "long"
	  param in name "compLen" explicit_type "long"
	  param in name "crc32" explicit_type "ulong"
	  param in name "compressionMethod" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Set some information about a file after we add it.

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Set information about the data for this entry."
      end

      operation 1399308 "setModWhen"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 1
	  param in name "when" explicit_type "time_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Set the CDE/LFH timestamp from UNIX time.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Set the modification date."
      end

      operation 1399436 "setLFHOffset"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "offset" explicit_type "off_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mCDE.mLocalHeaderRelOffset = (long) offset;
    };
"
	
	
	
	
	comment "     * Set the offset of the local file header, relative to the start of
     * the current file."
      end

      operation 1399564 "setDeleted"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mDeleted = true; };
"
	
	
	
	
	comment " mark for deletion; used by ZipFile::remove() "
      end

      operation 1399692 "ZipEntry"
	private explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " these are private and not defined "
      end

      operation 1399820 "operator ="
	private return_type class_ref 485644 // ZipEntry
	nparams 1
	  param in name "src" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1399948 "compareHeaders"
	preserve_cpp_body_indent const private explicit_return_type "bool"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * See if the data in mCDE and mLFH match up.  This is mostly useful for
// * debugging these classes, but it can be used to identify damaged
// * archives.
// *
// * Returns \"false\" if they differ.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " returns \"true\" if the CDE and the LFH agree "
      end

      operation 1400076 "copyCDEtoLFH"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Set the fields in the LFH equal to the corresponding fields in the CDE.
// *
// * This does not touch the LFH \"extra\" field.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1189388 "mDeleted"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " set if entry is pending deletion"
      end

      attribute 1189516 "mMarked"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " app-defined marker"
      end

      class 486028 "LocalFileHeader"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1400204 "LocalFileHeader"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "" explicit_type "void"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} :
            mVersionToExtract(0),
            mGPBitFlag(0),
            mCompressionMethod(0),
            mLastModFileTime(0),
            mLastModFileDate(0),
            mCRC32(0),
            mCompressedSize(0),
            mUncompressedSize(0),
            mFileNameLength(0),
            mExtraFieldLength(0),
            mFileName(NULL),
            mExtraField(NULL)
        {};
"
	  
	  
	  
	  
	end

	operation 1400332 "~LocalFileHeader"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "" explicit_type "void"
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} {
            delete[] mFileName;
            delete[] mExtraField;
        };
"
	  
	  
	  
	  
	end

	operation 1400460 "read"
	  preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	  nparams 1
	    param inout name "fp" explicit_type "FILE"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// * ===========================================================================
// *      ZipEntry::LocalFileHeader
// * ===========================================================================
// 
//
// * Read a local file header.
// *
// * On entry, \"fp\" points to the signature at the start of the header.
// * On exit, \"fp\" points to the start of data.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1400588 "write"
	  preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	  nparams 1
	    param inout name "fp" explicit_type "FILE"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// * Write a local file header.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	attribute 1189644 "mVersionToExtract"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1189772 "mGPBitFlag"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1189900 "mCompressionMethod"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1190028 "mLastModFileTime"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1190156 "mLastModFileDate"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1190284 "mCRC32"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1190412 "mCompressedSize"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1190540 "mUncompressedSize"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1190668 "mFileNameLength"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1190796 "mExtraFieldLength"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1190924 "mFileName"
	  public explicit_type "byte"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1191052 "mExtraField"
	  public explicit_type "byte"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	class 486156 "anonymous223"
	  visibility package stereotype "enum"
	  cpp_decl "${comment}enum  {
${items}
};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 1191180 "kSignature"
	    public type class_ref 486156 // anonymous223
	    init_value " 0x04034b50"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 1191308 "kLFHLen"
	    public type class_ref 486156 // anonymous223
	    init_value " 30"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end

	operation 1400716 "dump"
	  preserve_cpp_body_indent const public explicit_return_type "void"
	  nparams 1
	    param in name "" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// * Dump the contents of a LocalFileHeader object.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end
      end

      class 486284 "CentralDirEntry"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1400844 "CentralDirEntry"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "" explicit_type "void"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} :
            mVersionMadeBy(0),
            mVersionToExtract(0),
            mGPBitFlag(0),
            mCompressionMethod(0),
            mLastModFileTime(0),
            mLastModFileDate(0),
            mCRC32(0),
            mCompressedSize(0),
            mUncompressedSize(0),
            mFileNameLength(0),
            mExtraFieldLength(0),
            mFileCommentLength(0),
            mDiskNumberStart(0),
            mInternalAttrs(0),
            mExternalAttrs(0),
            mLocalHeaderRelOffset(0),
            mFileName(NULL),
            mExtraField(NULL),
            mFileComment(NULL)
        {};
"
	  
	  
	  
	  
	end

	operation 1400972 "~CentralDirEntry"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "" explicit_type "void"
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} {
            delete[] mFileName;
            delete[] mExtraField;
            delete[] mFileComment;
        };
"
	  
	  
	  
	  
	end

	operation 1401100 "read"
	  preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	  nparams 1
	    param inout name "fp" explicit_type "FILE"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// * ===========================================================================
// *      ZipEntry::CentralDirEntry
// * ===========================================================================
// 
//
// * Read the central dir entry that appears next in the file.
// *
// * On entry, \"fp\" should be positioned on the signature bytes for the
// * entry.  On exit, \"fp\" will point at the signature word for the next
// * entry or for the EOCD.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1401228 "write"
	  preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	  nparams 1
	    param inout name "fp" explicit_type "FILE"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// * Write a central dir entry.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	attribute 1191436 "mVersionMadeBy"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1191564 "mVersionToExtract"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1191692 "mGPBitFlag"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1191820 "mCompressionMethod"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1191948 "mLastModFileTime"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1192076 "mLastModFileDate"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1192204 "mCRC32"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1192332 "mCompressedSize"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1192460 "mUncompressedSize"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1192588 "mFileNameLength"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1192716 "mExtraFieldLength"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1192844 "mFileCommentLength"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1192972 "mDiskNumberStart"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1193100 "mInternalAttrs"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1193228 "mExternalAttrs"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1193356 "mLocalHeaderRelOffset"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1193484 "mFileName"
	  public explicit_type "byte"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1193612 "mExtraField"
	  public explicit_type "byte"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1193740 "mFileComment"
	  public explicit_type "byte"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1401356 "dump"
	  preserve_cpp_body_indent const public explicit_return_type "void"
	  nparams 1
	    param in name "" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// * Dump the contents of a CentralDirEntry object.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	class 486412 "anonymous224"
	  visibility package stereotype "enum"
	  cpp_decl "${comment}enum  {
${items}
};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 1193868 "kSignature"
	    public type class_ref 486412 // anonymous224
	    init_value " 0x02014b50"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 1193996 "kCDELen"
	    public type class_ref 486412 // anonymous224
	    init_value " 46"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end
      end

      class 486540 "anonymous225"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1194124 "kDataDescriptorLen"
	  public type class_ref 486540 // anonymous225
	  init_value " 16"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1194252 "kDefaultVersion"
	  public type class_ref 486540 // anonymous225
	  init_value " 20"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1194380 "kDefaultMadeBy"
	  public type class_ref 486540 // anonymous225
	  init_value " 0x0317"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1194508 "kUsesDataDescr"
	  public type class_ref 486540 // anonymous225
	  init_value " 0x0008"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      classrelation 994572 // mLFH (<directional composition>)
	relation 994572 *-->
	  a role_name "mLFH" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 994572 // mLFH (<directional composition>)
	  b parent class_ref 486028 // LocalFileHeader
      end

      classrelation 994700 // mCDE (<directional composition>)
	relation 994700 *-->
	  a role_name "mCDE" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 994700 // mCDE (<directional composition>)
	  b parent class_ref 486284 // CentralDirEntry
      end
    end

    class 485772 "ZipFile"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Manipulate a Zip archive.
 *
 * Some changes will not be visible in the until until \"flush\" is called.
 *
 * The correct way to update a file archive is to make all changes to a
 * copy of the archive in a temporary file, and then unlink/rename over
 * the original after everything completes.  Because we're only interested
 * in using this for packaging, we don't worry about such things.  Crashing
 * after making changes and before flush() completes could leave us with
 * an unusable Zip archive."
      operation 1401484 "ZipFile"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : mZipFp(NULL), mReadOnly(false), mNeedCDRewrite(false)
      {};
"
	
	
	
	
      end

      operation 1401612 "~ZipFile"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} {
        if (!mReadOnly)
            flush();
        if (mZipFp != NULL)
            fclose(mZipFp);
        discardEntries();
    };
"
	
	
	
	
      end

      class 486668 "anonymous226"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1194636 "kOpenReadOnly"
	  public type class_ref 486668 // anonymous226
	  init_value " 0x01"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1194764 "kOpenReadWrite"
	  public type class_ref 486668 // anonymous226
	  init_value " 0x02"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1194892 "kOpenCreate"
	  public type class_ref 486668 // anonymous226
	  init_value " 0x04"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1195020 "kOpenTruncate"
	  public type class_ref 486668 // anonymous226
	  init_value " 0x08"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1401740 "open"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "zipFileName" explicit_type "char"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Open a file and parse its guts.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1401868 "add"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "fileName" explicit_type "char"
	  param in name "compressionMethod" explicit_type "int"
	  param inout name "ppEntry" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return add(fileName, fileName, compressionMethod, ppEntry);
    };
"
	
	
	
	
	comment "     * Add a file to the end of the archive.  Specify whether you want the
     * library to try to store it compressed.
     *
     * If \"storageName\" is specified, the archive will use that instead
     * of \"fileName\".
     *
     * If there is already an entry with the same name, the call fails.
     * Existing entries with the same name must be removed first.
     *
     * If \"ppEntry\" is non-NULL, a pointer to the new entry will be returned."
      end

      operation 1401996 "add"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "fileName" explicit_type "char"
	  param in name "storageName" explicit_type "char"
	  param in name "compressionMethod" explicit_type "int"
	  param inout name "ppEntry" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return addCommon(fileName, NULL, 0, storageName,
                         ZipEntry::kCompressStored,
                         compressionMethod, ppEntry);
    };
"
	
	
	
	
      end

      operation 1402124 "addGzip"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "fileName" explicit_type "char"
	  param in name "storageName" explicit_type "char"
	  param inout name "ppEntry" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} * * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return addCommon(fileName, NULL, 0, storageName,
                         ZipEntry::kCompressDeflated,
                         ZipEntry::kCompressDeflated, ppEntry);
    };
"
	
	
	
	
	comment "     * Add a file that is already compressed with gzip.
     *
     * If \"ppEntry\" is non-NULL, a pointer to the new entry will be returned."
      end

      operation 1402252 "add"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 5
	  param in name "data" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param in name "storageName" explicit_type "char"
	  param in name "compressionMethod" explicit_type "int"
	  param inout name "ppEntry" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        return addCommon(NULL, data, size, storageName,
                         ZipEntry::kCompressStored,
                         compressionMethod, ppEntry);
    };
"
	
	
	
	
	comment "     * Add a file from an in-memory data buffer.
     *
     * If \"ppEntry\" is non-NULL, a pointer to the new entry will be returned."
      end

      operation 1402380 "add"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "pSourceZip" type class_ref 485772 // ZipFile
	  param in name "pSourceEntry" type class_ref 485644 // ZipEntry
	  param in name "padding" explicit_type "int"
	  param inout name "ppEntry" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Add an entry by copying it from another zip file.  If \"padding\" is
// * nonzero, the specified number of bytes will be added to the \"extra\"
// * field in the header.
// *
// * If \"ppEntry\" is non-NULL, a pointer to the new entry will be returned.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} * * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Add an entry by copying it from another zip file.  If \"padding\" is
     * nonzero, the specified number of bytes will be added to the \"extra\"
     * field in the header.
     *
     * If \"ppEntry\" is non-NULL, a pointer to the new entry will be returned."
      end

      operation 1402508 "remove"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "pEntry" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Mark an entry as deleted.
// *
// * We will eventually need to crunch the file down, but if several files
// * are being removed (perhaps as part of an \"update\" process) we can make
// * things considerably faster by deferring the removal to \"flush\" time.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Mark an entry as having been removed.  It is not actually deleted
     * from the archive or our internal data structures until flush() is
     * called."
      end

      operation 1402636 "flush"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Flush any pending writes.
// *
// * In particular, this will crunch out deleted entries, and write the
// * Central Directory and EOCD if we have stomped on them.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Flush changes.  If mNeedCDRewrite is set, this writes the central dir."
      end

      operation 1402764 "uncompress"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "entry" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// free the memory when you're done

${inline}${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Expand the data into the buffer provided.  The buffer must hold
     * at least <uncompressed len> bytes.  Variation expands directly
     * to a file.
     *
     * Returns \"false\" if an error was encountered in the compressed data.
     
bool uncompress(const ZipEntry* pEntry, void* buf) const;
bool uncompress(const ZipEntry* pEntry, FILE* fp) const;"
      end

      operation 1402892 "getEntryByName"
	preserve_cpp_body_indent const public return_type class_ref 485644 // ZipEntry
	nparams 1
	  param in name "fileName" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Find an entry by name.

${inline}${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Get an entry, by name.  Returns NULL if not found.
     *
     * Does not return entries pending deletion."
      end

      operation 1403020 "getNumEntries"
	const cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mEntries.size(); };
"
	
	
	
	
	comment "     * Get the Nth entry in the archive.
     *
     * This will return an entry that is pending deletion."
      end

      operation 1403148 "getEntryByIndex"
	preserve_cpp_body_indent const public return_type class_ref 485644 // ZipEntry
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Return the Nth entry in the archive.

${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1403276 "ZipFile"
	private explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 485772 // ZipFile
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " these are private and not defined "
      end

      operation 1403404 "operator ="
	private return_type class_ref 485772 // ZipFile
	nparams 1
	  param in name "src" type class_ref 485772 // ZipFile
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 486796 "EndOfCentralDir"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1403532 "EndOfCentralDir"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "" explicit_type "void"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} :
            mDiskNumber(0),
            mDiskWithCentralDir(0),
            mNumEntries(0),
            mTotalNumEntries(0),
            mCentralDirSize(0),
            mCentralDirOffset(0),
            mCommentLen(0),
            mComment(NULL)
            {};
"
	  
	  
	  
	  
	end

	operation 1403660 "~EndOfCentralDir"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "" explicit_type "void"
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} {
            delete[] mComment;
        };
"
	  
	  
	  
	  
	end

	operation 1403788 "readBuf"
	  preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	  nparams 2
	    param in name "buf" explicit_type "byte"
	    param in name "len" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// * ===========================================================================
// *      ZipFile::EndOfCentralDir
// * ===========================================================================
// 
//
// * Read the end-of-central-dir fields.
// *
// * \"buf\" should be positioned at the EOCD signature, and should contain
// * the entire EOCD area including the comment.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1403916 "write"
	  preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	  nparams 1
	    param inout name "fp" explicit_type "FILE"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// * Write an end-of-central-directory section.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	attribute 1195148 "mDiskNumber"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1195276 "mDiskWithCentralDir"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1195404 "mNumEntries"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1195532 "mTotalNumEntries"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1195660 "mCentralDirSize"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1195788 "mCentralDirOffset"
	  public explicit_type "ulong"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " offset from first disk"
	end

	attribute 1195916 "mCommentLen"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1196044 "mComment"
	  public explicit_type "byte"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	class 486924 "anonymous227"
	  visibility package stereotype "enum"
	  cpp_decl "${comment}enum  {
${items}
};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 1196172 "kSignature"
	    public type class_ref 486924 // anonymous227
	    init_value " 0x06054b50"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 1196300 "kEOCDLen"
	    public type class_ref 486924 // anonymous227
	    init_value " 22"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 1196428 "kMaxCommentLen"
	    public type class_ref 486924 // anonymous227
	    init_value " 65535"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 1196556 "kMaxEOCDSearch"
	    public type class_ref 486924 // anonymous227
	    init_value " kMaxCommentLen + EndOfCentralDir::kEOCDLen"
	    cpp_decl "  ${name}${value},${comment}"
	    java_decl ""
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end

	operation 1404044 "dump"
	  preserve_cpp_body_indent const public explicit_return_type "void"
	  nparams 1
	    param in name "" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "// * Dump the contents of an EndOfCentralDir object.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end
      end

      operation 1404172 "readCentralDir"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Find the central directory and read the contents.
// *
// * The fun thing about ZIP archives is that they may or may not be
// * readable from start to end.  In some cases, notably for archives
// * that were written to stdout, the only length information is in the
// * central directory at the end of the file.
// *
// * Of course, the central directory can be followed by a variable-length
// * comment field, so we have to scan through it backwards.  The comment
// * is at most 64K, plus we have 18 bytes for the end-of-central-dir stuff
// * itself, plus apparently sometimes people throw random junk on the end
// * just for the fun of it.
// *
// * This is all a little wobbly.  If the wrong value ends up in the EOCD
// * area, we're hosed.  This appears to be the way that everbody handles
// * it though, so we're in pretty good company if this fails.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " read all entries in the central dir "
      end

      operation 1404300 "crunchArchive"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Crunch deleted files out of an archive by shifting the later files down.
// *
// * Because we're not using a temp file, we do the operation inside the
// * current file.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " crunch deleted entries out "
      end

      operation 1404428 "discardEntries"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Empty the mEntries vector.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " clean up mEntries "
      end

      operation 1404556 "addCommon"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 7
	  param in name "fileName" explicit_type "char"
	  param in name "data" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param in name "storageName" explicit_type "char"
	  param in name "sourceType" explicit_type "int"
	  param in name "compressionMethod" explicit_type "int"
	  param inout name "ppEntry" type class_ref 485644 // ZipEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * * ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Add a new file to the archive.
// *
// * This requires creating and populating a ZipEntry structure, and copying
// * the data into the file at the appropriate position.  The \"appropriate
// * position\" is the current location of the central directory, which we
// * casually overwrite (we can put it back later).
// *
// * If we were concerned about safety, we would want to make all changes
// * in a temp file and then overwrite the original after everything was
// * safely written.  Not really a concern for us.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, const ${t3} * ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} * * ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " common handler for all \"add\" functions "
      end

      operation 1404684 "copyFpToFp"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 3
	  param inout name "dstFp" explicit_type "FILE"
	  param inout name "srcFp" explicit_type "FILE"
	  param inout name "pCRC32" explicit_type "ulong"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Copy all of the bytes in \"src\" to \"dst\".
// *
// * On exit, \"srcFp\" will be seeked to the end of the file, and \"dstFp\"
// * will be seeked immediately past the data.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " copy all of \"srcFp\" into \"dstFp\" "
      end

      operation 1404812 "copyDataToFp"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 4
	  param inout name "dstFp" explicit_type "FILE"
	  param in name "data" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param inout name "pCRC32" explicit_type "ulong"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Copy all of the bytes in \"src\" to \"dst\".
// *
// * On exit, \"dstFp\" will be seeked immediately past the data.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " copy all of \"data\" into \"dstFp\" "
      end

      operation 1404940 "copyPartialFpToFp"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 4
	  param inout name "dstFp" explicit_type "FILE"
	  param inout name "srcFp" explicit_type "FILE"
	  param in name "length" explicit_type "long"
	  param inout name "pCRC32" explicit_type "ulong"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Copy some of the bytes in \"src\" to \"dst\".
// *
// * If \"pCRC32\" is NULL, the CRC will not be computed.
// *
// * On exit, \"srcFp\" will be seeked to the end of the file, and \"dstFp\"
// * will be seeked immediately past the data just written.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " copy some of \"srcFp\" into \"dstFp\" "
      end

      operation 1405068 "filemove"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 4
	  param inout name "fp" explicit_type "FILE"
	  param in name "dst" explicit_type "off_t"
	  param in name "src" explicit_type "off_t"
	  param in name "n" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Works like memmove(), but on pieces of a file.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " like memmove(), but on parts of a single file "
      end

      operation 1405196 "compressFpToFp"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 5
	  param inout name "dstFp" explicit_type "FILE"
	  param inout name "srcFp" explicit_type "FILE"
	  param in name "data" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param inout name "pCRC32" explicit_type "ulong"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Compress all of the data in \"srcFp\" and write it to \"dstFp\".
// *
// * On exit, \"srcFp\" will be seeked to the end of the file, and \"dstFp\"
// * will be seeked immediately past the compressed data.

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " compress all of \"srcFp\" into \"dstFp\", using Deflate "
      end

      operation 1405324 "getModTime"
	preserve_cpp_body_indent private explicit_return_type "time_t"
	nparams 1
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Get the modification time from a file descriptor.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " get modification date from a file descriptor "
      end

      attribute 1196684 "mZipFp"
	private explicit_type "FILE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Zip file pointer"
      end

      classrelation 994828 // mEOCD (<directional composition>)
	relation 994828 *-->
	  a role_name "mEOCD" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 994828 // mEOCD (<directional composition>)
	  b parent class_ref 486796 // EndOfCentralDir
      end

      attribute 1196812 "mReadOnly"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1196940 "mNeedCDRewrite"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 994956 // mEntries (<unidirectional association>)
	relation 994956 --->
	  stereotype "Vector"
	  a role_name "mEntries" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 994956 // mEntries (<unidirectional association>)
	  b parent class_ref 485644 // ZipEntry
      end
    end
  end

  deploymentview 147468 "android"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 215820 "ResourceIdCache"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 482572 // ResourceIdCache
      end
    end

    artifact 216460 "ZipEntry"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 485644 // ZipEntry
      end
    end

    artifact 216588 "ZipFile"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 485772 // ZipFile
      end
    end
  end
end
