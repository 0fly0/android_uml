class CommonClockService
!!!1204108.cpp!!!	instantiate(inout timeServer : CommonTimeServer) : sp<CommonClockService>
    sp<CommonClockService> tcc = new CommonClockService(timeServer);
    if (tcc == NULL)
        return NULL;

    defaultServiceManager()->addService(ICommonClock::kServiceName, tcc);
    return tcc;
!!!1204236.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    Mutex::Autolock lock(mRegistrationLock);
    return mTimeServer.dumpClockInterface(fd, args, mListeners.size());
!!!1204364.cpp!!!	isCommonTimeValid(inout valid : bool, inout timelineID : uint32_t) : status_t
    return mTimeServer.isCommonTimeValid(valid, timelineID);
!!!1204492.cpp!!!	commonTimeToLocalTime(in commonTime : int64_t, inout localTime : int64_t) : status_t
    return mTimeServer.getCommonClock().commonToLocal(commonTime, localTime);
!!!1204620.cpp!!!	localTimeToCommonTime(in localTime : int64_t, inout commonTime : int64_t) : status_t
    return mTimeServer.getCommonClock().localToCommon(localTime, commonTime);
!!!1204748.cpp!!!	getCommonTime(inout commonTime : int64_t) : status_t
    return localTimeToCommonTime(mTimeServer.getLocalClock().getLocalTime(), commonTime);
!!!1204876.cpp!!!	getCommonFreq(inout freq : uint64_t) : status_t
    *freq = mTimeServer.getCommonClock().getCommonFreq();
    return OK;
!!!1205004.cpp!!!	getLocalTime(inout localTime : int64_t) : status_t
    *localTime = mTimeServer.getLocalClock().getLocalTime();
    return OK;
!!!1205132.cpp!!!	getLocalFreq(inout freq : uint64_t) : status_t
    *freq = mTimeServer.getLocalClock().getLocalFreq();
    return OK;
!!!1205260.cpp!!!	getEstimatedError(inout estimate : int32_t) : status_t
    *estimate = mTimeServer.getEstimatedError();
    return OK;
!!!1205388.cpp!!!	getTimelineID(inout id : uint64_t) : status_t
    *id = mTimeServer.getTimelineID();
    return OK;
!!!1205516.cpp!!!	getState(inout state : State) : status_t
    *state = mTimeServer.getState();
    return OK;
!!!1205644.cpp!!!	getMasterAddr(inout addr : sockaddr_storage) : status_t
    return mTimeServer.getMasterAddr(addr);
!!!1205772.cpp!!!	registerListener(in listener : sp<ICommonClockListener>) : status_t
    Mutex::Autolock lock(mRegistrationLock);

    {   // scoping for autolock pattern
        Mutex::Autolock lock(mCallbackLock);
        // check whether this is a duplicate
        for (size_t i = 0; i < mListeners.size(); i++) {
            if (mListeners[i]->asBinder() == listener->asBinder())
                return ALREADY_EXISTS;
        }
    }

    mListeners.add(listener);
    mTimeServer.reevaluateAutoDisableState(0 != mListeners.size());
    return listener->asBinder()->linkToDeath(this);
!!!1205900.cpp!!!	unregisterListener(in listener : sp<ICommonClockListener>) : status_t
    Mutex::Autolock lock(mRegistrationLock);
    status_t ret_val = NAME_NOT_FOUND;

    {   // scoping for autolock pattern
        Mutex::Autolock lock(mCallbackLock);
        for (size_t i = 0; i < mListeners.size(); i++) {
            if (mListeners[i]->asBinder() == listener->asBinder()) {
                mListeners[i]->asBinder()->unlinkToDeath(this);
                mListeners.removeAt(i);
                ret_val = OK;
                break;
            }
        }
    }

    mTimeServer.reevaluateAutoDisableState(0 != mListeners.size());
    return ret_val;
!!!1206028.cpp!!!	notifyOnTimelineChanged(in timelineID : uint64_t) : void
    Mutex::Autolock lock(mCallbackLock);

    for (size_t i = 0; i < mListeners.size(); i++) {
        mListeners[i]->onTimelineChanged(timelineID);
    }
!!!1206284.cpp!!!	binderDied(in who : wp<IBinder>) : void
    Mutex::Autolock lock(mRegistrationLock);

    {   // scoping for autolock pattern
        Mutex::Autolock lock(mCallbackLock);
        for (size_t i = 0; i < mListeners.size(); i++) {
            if (mListeners[i]->asBinder() == who) {
                mListeners.removeAt(i);
                break;
            }
        }
    }

    mTimeServer.reevaluateAutoDisableState(0 != mListeners.size());
