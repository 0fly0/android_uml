class SystemScope
!!!2145691.java!!!	SystemScope(inout name : String)
        super(name);
!!!2145819.java!!!	SystemScope(inout name : String, inout scope : IdentityScope)
        super(name, scope);
!!!2145947.java!!!	size() : int
        return names.size();
!!!2146075.java!!!	getIdentity(inout name : String) : Identity
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        return (Identity) names.get(name);
!!!2146203.java!!!	getIdentity(inout key : PublicKey) : Identity
        if (key == null) {
            return null;
        }
        return (Identity) keys.get(key);
!!!2146331.java!!!	addIdentity(inout identity : Identity) : void
        if (identity == null) {
            throw new NullPointerException("identity == null");
        }

        String name = identity.getName();
        if (names.containsKey(name)) {
            throw new KeyManagementException("name '" + name + "' is already used");
        }

        PublicKey key = identity.getPublicKey();
        if (key != null && keys.containsKey(key)) {
            throw new KeyManagementException("key '" + key + "' is already used");
        }

        names.put(name, identity);
        if (key != null) {
            keys.put(key, identity);
        }
!!!2146459.java!!!	removeIdentity(inout identity : Identity) : void

        //Exception caught = null;
        if (identity == null) {
            throw new NullPointerException("identity == null");
        }

        String name = identity.getName();
        if (name == null) {
            throw new NullPointerException("name == null");
        }

        boolean contains = names.containsKey(name);
        names.remove(name);

        PublicKey key = identity.getPublicKey();

        if (key != null) {
            contains = contains || keys.containsKey(key);
            keys.remove(key);
        }

        if (!contains) {
            throw new KeyManagementException("identity not found");
        }
!!!2146587.java!!!	identities() : Enumeration
        return names.elements();
