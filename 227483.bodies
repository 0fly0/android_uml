class NumberFormat
!!!1105051.java!!!	clone() : Object
        return super.clone();
!!!1105179.java!!!	equals(inout object : Object) : boolean
        if (object == this) {
            return true;
        }
        if (!(object instanceof NumberFormat)) {
            return false;
        }
        NumberFormat obj = (NumberFormat) object;
        return groupingUsed == obj.groupingUsed
                && parseIntegerOnly == obj.parseIntegerOnly
                && maximumFractionDigits == obj.maximumFractionDigits
                && maximumIntegerDigits == obj.maximumIntegerDigits
                && minimumFractionDigits == obj.minimumFractionDigits
                && minimumIntegerDigits == obj.minimumIntegerDigits;
!!!1105307.java!!!	format(in value : double) : String
        return format(value, new StringBuffer(), new FieldPosition(0))
                .toString();
!!!1105563.java!!!	format(in value : long) : String
        return format(value, new StringBuffer(), new FieldPosition(0))
                .toString();
!!!1105819.java!!!	format(inout object : Object, inout buffer : StringBuffer, inout field : FieldPosition) : StringBuffer
        if (object instanceof Byte || object instanceof Short || object instanceof Integer ||
                object instanceof Long ||
                (object instanceof BigInteger && ((BigInteger) object).bitLength() < 64)) {
            long lv = ((Number) object).longValue();
            return format(lv, buffer, field);
        } else if (object instanceof Number) {
            double dv = ((Number) object).doubleValue();
            return format(dv, buffer, field);
        }
        throw new IllegalArgumentException("Bad class: " + object.getClass());
!!!1105947.java!!!	getAvailableLocales() : Locale
        return ICU.getAvailableNumberFormatLocales();
!!!1106075.java!!!	getCurrency() : Currency
        throw new UnsupportedOperationException();
!!!1106203.java!!!	getCurrencyInstance() : NumberFormat
        return getCurrencyInstance(Locale.getDefault());
!!!1106331.java!!!	getCurrencyInstance(inout locale : Locale) : NumberFormat
        return getInstance(LocaleData.get(locale).currencyPattern, locale);
!!!1106459.java!!!	getIntegerInstance() : NumberFormat
        return getIntegerInstance(Locale.getDefault());
!!!1106587.java!!!	getIntegerInstance(inout locale : Locale) : NumberFormat
        NumberFormat result = getInstance(LocaleData.get(locale).integerPattern, locale);
        result.setParseIntegerOnly(true);
        return result;
!!!1106715.java!!!	getInstance() : NumberFormat
        return getNumberInstance();
!!!1106843.java!!!	getInstance(inout locale : Locale) : NumberFormat
        return getNumberInstance(locale);
!!!1106971.java!!!	getInstance(inout pattern : String, inout locale : Locale) : NumberFormat
        return new DecimalFormat(pattern, locale);
!!!1107099.java!!!	getMaximumFractionDigits() : int
        return maximumFractionDigits;
!!!1107227.java!!!	getMaximumIntegerDigits() : int
        return maximumIntegerDigits;
!!!1107355.java!!!	getMinimumFractionDigits() : int
        return minimumFractionDigits;
!!!1107483.java!!!	getMinimumIntegerDigits() : int
        return minimumIntegerDigits;
!!!1107611.java!!!	getNumberInstance() : NumberFormat
        return getNumberInstance(Locale.getDefault());
!!!1107739.java!!!	getNumberInstance(inout locale : Locale) : NumberFormat
        return getInstance(LocaleData.get(locale).numberPattern, locale);
!!!1107867.java!!!	getPercentInstance() : NumberFormat
        return getPercentInstance(Locale.getDefault());
!!!1107995.java!!!	getPercentInstance(inout locale : Locale) : NumberFormat
        return getInstance(LocaleData.get(locale).percentPattern, locale);
!!!1108123.java!!!	hashCode() : int
        return (groupingUsed ? 1231 : 1237) + (parseIntegerOnly ? 1231 : 1237)
                + maximumFractionDigits + maximumIntegerDigits
                + minimumFractionDigits + minimumIntegerDigits;
!!!1108251.java!!!	isGroupingUsed() : boolean
        return groupingUsed;
!!!1108379.java!!!	isParseIntegerOnly() : boolean
        return parseIntegerOnly;
!!!1108507.java!!!	parse(inout string : String) : Number
        ParsePosition pos = new ParsePosition(0);
        Number number = parse(string, pos);
        if (pos.getIndex() == 0) {
            throw new ParseException("Unparseable number: \"" + string + "\"", pos.getErrorIndex());
        }
        return number;
!!!1108763.java!!!	parseObject(inout string : String, inout position : ParsePosition) : Object
        if (position == null) {
            throw new NullPointerException("position == null");
        }
        try {
            return parse(string, position);
        } catch (Exception e) {
            return null;
        }
!!!1108891.java!!!	setCurrency(inout currency : Currency) : void
        throw new UnsupportedOperationException();
!!!1109019.java!!!	setGroupingUsed(inout value : boolean) : void
        groupingUsed = value;
!!!1109147.java!!!	setMaximumFractionDigits(in value : int) : void
        maximumFractionDigits = value < 0 ? 0 : value;
        if (maximumFractionDigits < minimumFractionDigits) {
            minimumFractionDigits = maximumFractionDigits;
        }
!!!1109275.java!!!	setMaximumIntegerDigits(in value : int) : void
        maximumIntegerDigits = value < 0 ? 0 : value;
        if (maximumIntegerDigits < minimumIntegerDigits) {
            minimumIntegerDigits = maximumIntegerDigits;
        }
!!!1109403.java!!!	setMinimumFractionDigits(in value : int) : void
        minimumFractionDigits = value < 0 ? 0 : value;
        if (maximumFractionDigits < minimumFractionDigits) {
            maximumFractionDigits = minimumFractionDigits;
        }
!!!1109531.java!!!	setMinimumIntegerDigits(in value : int) : void
        minimumIntegerDigits = value < 0 ? 0 : value;
        if (maximumIntegerDigits < minimumIntegerDigits) {
            maximumIntegerDigits = minimumIntegerDigits;
        }
!!!1109659.java!!!	setParseIntegerOnly(inout value : boolean) : void
        parseIntegerOnly = value;
!!!1109787.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        ObjectOutputStream.PutField fields = stream.putFields();
        fields.put("groupingUsed", groupingUsed);
        fields.put("maxFractionDigits",
                        maximumFractionDigits < Byte.MAX_VALUE ? (byte) maximumFractionDigits
                                : Byte.MAX_VALUE);
        fields.put("maximumFractionDigits", maximumFractionDigits);
        fields.put("maximumIntegerDigits", maximumIntegerDigits);
        fields.put("maxIntegerDigits",
                        maximumIntegerDigits < Byte.MAX_VALUE ? (byte) maximumIntegerDigits
                                : Byte.MAX_VALUE);
        fields.put("minFractionDigits",
                        minimumFractionDigits < Byte.MAX_VALUE ? (byte) minimumFractionDigits
                                : Byte.MAX_VALUE);
        fields.put("minimumFractionDigits", minimumFractionDigits);
        fields.put("minimumIntegerDigits", minimumIntegerDigits);
        fields.put("minIntegerDigits",
                minimumIntegerDigits < Byte.MAX_VALUE ? (byte) minimumIntegerDigits : Byte.MAX_VALUE);
        fields.put("parseIntegerOnly", parseIntegerOnly);
        fields.put("serialVersionOnStream", 1);
        stream.writeFields();
!!!1109915.java!!!	readObject(inout stream : ObjectInputStream) : void
        ObjectInputStream.GetField fields = stream.readFields();
        groupingUsed = fields.get("groupingUsed", true);
        parseIntegerOnly = fields.get("parseIntegerOnly", false);
        if (fields.get("serialVersionOnStream", 0) == 0) {
            maximumFractionDigits = fields.get("maxFractionDigits", (byte) 3);
            maximumIntegerDigits = fields.get("maxIntegerDigits", (byte) 40);
            minimumFractionDigits = fields.get("minFractionDigits", (byte) 0);
            minimumIntegerDigits = fields.get("minIntegerDigits", (byte) 1);
        } else {
            maximumFractionDigits = fields.get("maximumFractionDigits", 3);
            maximumIntegerDigits = fields.get("maximumIntegerDigits", 40);
            minimumFractionDigits = fields.get("minimumFractionDigits", 0);
            minimumIntegerDigits = fields.get("minimumIntegerDigits", 1);
        }
        if (minimumIntegerDigits > maximumIntegerDigits
                || minimumFractionDigits > maximumFractionDigits) {
            throw new InvalidObjectException("min digits greater than max digits");
        }
        if (minimumIntegerDigits < 0 || maximumIntegerDigits < 0
                || minimumFractionDigits < 0 || maximumFractionDigits < 0) {
            throw new InvalidObjectException("min or max digits negative");
        }
