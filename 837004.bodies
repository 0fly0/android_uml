class EthernetDataTracker
!!!3597580.java!!!	EthernetDataTracker()
        mNetworkInfo = new NetworkInfo(ConnectivityManager.TYPE_ETHERNET, 0, NETWORKTYPE, "");
        mLinkProperties = new LinkProperties();
        mLinkCapabilities = new LinkCapabilities();
!!!3597708.java!!!	interfaceAdded(in iface : String) : void
        if (!iface.matches(sIfaceMatch))
            return;

        Log.d(TAG, "Adding " + iface);

        synchronized(this) {
            if(!mIface.isEmpty())
                return;
            mIface = iface;
        }

        // we don't get link status indications unless the iface is up - bring it up
        try {
            mNMService.setInterfaceUp(iface);
        } catch (Exception e) {
            Log.e(TAG, "Error upping interface " + iface + ": " + e);
        }

        mNetworkInfo.setIsAvailable(true);
        Message msg = mCsHandler.obtainMessage(EVENT_CONFIGURATION_CHANGED, mNetworkInfo);
        msg.sendToTarget();
!!!3597836.java!!!	disconnect() : void

        NetworkUtils.stopDhcp(mIface);

        mLinkProperties.clear();
        mNetworkInfo.setIsAvailable(false);
        mNetworkInfo.setDetailedState(DetailedState.DISCONNECTED, null, mHwAddr);

        Message msg = mCsHandler.obtainMessage(EVENT_CONFIGURATION_CHANGED, mNetworkInfo);
        msg.sendToTarget();

        msg = mCsHandler.obtainMessage(EVENT_STATE_CHANGED, mNetworkInfo);
        msg.sendToTarget();

        IBinder b = ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
        INetworkManagementService service = INetworkManagementService.Stub.asInterface(b);
        try {
            service.clearInterfaceAddresses(mIface);
        } catch (Exception e) {
            Log.e(TAG, "Failed to clear addresses or disable ipv6" + e);
        }
!!!3597964.java!!!	interfaceRemoved(in iface : String) : void
        if (!iface.equals(mIface))
            return;

        Log.d(TAG, "Removing " + iface);
        disconnect();
        mIface = "";
!!!3598092.java!!!	runDhcp() : void
        Thread dhcpThread = new Thread(new Runnable() {
            public void run() {
                DhcpInfoInternal dhcpInfoInternal = new DhcpInfoInternal();
                if (!NetworkUtils.runDhcp(mIface, dhcpInfoInternal)) {
                    Log.e(TAG, "DHCP request error:" + NetworkUtils.getDhcpError());
                    return;
                }
                mLinkProperties = dhcpInfoInternal.makeLinkProperties();
                mLinkProperties.setInterfaceName(mIface);

                mNetworkInfo.setDetailedState(DetailedState.CONNECTED, null, mHwAddr);
                Message msg = mCsHandler.obtainMessage(EVENT_STATE_CHANGED, mNetworkInfo);
                msg.sendToTarget();
            }
        });
        dhcpThread.start();
!!!3598220.java!!!	getInstance() : EthernetDataTracker
        if (sInstance == null) sInstance = new EthernetDataTracker();
        return sInstance;
!!!3598348.java!!!	Clone() : Object
        throw new CloneNotSupportedException();
!!!3598476.java!!!	setTeardownRequested(inout isRequested : boolean) : void
        mTeardownRequested.set(isRequested);
!!!3598604.java!!!	isTeardownRequested() : boolean
        return mTeardownRequested.get();
!!!3598732.java!!!	startMonitoring(inout context : Context, inout target : Handler) : void
        mContext = context;
        mCsHandler = target;

        // register for notifications from NetworkManagement Service
        IBinder b = ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
        mNMService = INetworkManagementService.Stub.asInterface(b);

        mInterfaceObserver = new InterfaceObserver(this);

        // enable and try to connect to an ethernet interface that
        // already exists
        sIfaceMatch = context.getResources().getString(
            com.android.internal.R.string.config_ethernet_iface_regex);
        try {
            final String[] ifaces = mNMService.listInterfaces();
            for (String iface : ifaces) {
                if (iface.matches(sIfaceMatch)) {
                    mIface = iface;
                    mNMService.setInterfaceUp(iface);
                    InterfaceConfiguration config = mNMService.getInterfaceConfig(iface);
                    mLinkUp = config.hasFlag("up");
                    if (config != null && mHwAddr == null) {
                        mHwAddr = config.getHardwareAddress();
                        if (mHwAddr != null) {
                            mNetworkInfo.setExtraInfo(mHwAddr);
                        }
                    }

                    // if a DHCP client had previously been started for this interface, then stop it
                    NetworkUtils.stopDhcp(mIface);

                    reconnect();
                    break;
                }
            }
        } catch (RemoteException e) {
            Log.e(TAG, "Could not get list of interfaces " + e);
        }

        try {
            mNMService.registerObserver(mInterfaceObserver);
        } catch (RemoteException e) {
            Log.e(TAG, "Could not register InterfaceObserver " + e);
        }
!!!3598860.java!!!	teardown() : boolean
        mTeardownRequested.set(true);
        NetworkUtils.stopDhcp(mIface);
        return true;
!!!3598988.java!!!	reconnect() : boolean
        if (mLinkUp) {
            mTeardownRequested.set(false);
            runDhcp();
        }
        return mLinkUp;
!!!3599116.java!!!	captivePortalCheckComplete() : void
        // not implemented
!!!3599244.java!!!	setRadio(inout turnOn : boolean) : boolean
        return true;
!!!3599372.java!!!	isAvailable() : boolean
        return mNetworkInfo.isAvailable();
!!!3599500.java!!!	startUsingNetworkFeature(in feature : String, in callingPid : int, in callingUid : int) : int
        return -1;
!!!3599628.java!!!	stopUsingNetworkFeature(in feature : String, in callingPid : int, in callingUid : int) : int
        return -1;
!!!3599756.java!!!	setUserDataEnable(inout enabled : boolean) : void
        Log.w(TAG, "ignoring setUserDataEnable(" + enabled + ")");
!!!3599884.java!!!	setPolicyDataEnable(inout enabled : boolean) : void
        Log.w(TAG, "ignoring setPolicyDataEnable(" + enabled + ")");
!!!3600012.java!!!	isPrivateDnsRouteSet() : boolean
        return mPrivateDnsRouteSet.get();
!!!3600140.java!!!	privateDnsRouteSet(inout enabled : boolean) : void
        mPrivateDnsRouteSet.set(enabled);
!!!3600268.java!!!	getNetworkInfo() : NetworkInfo
        return mNetworkInfo;
!!!3600396.java!!!	getLinkProperties() : LinkProperties
        return new LinkProperties(mLinkProperties);
!!!3600524.java!!!	getLinkCapabilities() : LinkCapabilities
        return new LinkCapabilities(mLinkCapabilities);
!!!3600652.java!!!	getDefaultGatewayAddr() : int
        return mDefaultGatewayAddr.get();
!!!3600780.java!!!	isDefaultRouteSet() : boolean
        return mDefaultRouteSet.get();
!!!3600908.java!!!	defaultRouteSet(inout enabled : boolean) : void
        mDefaultRouteSet.set(enabled);
!!!3601036.java!!!	getTcpBufferSizesPropName() : String
        return "net.tcp.buffersize.wifi";
!!!3601164.java!!!	setDependencyMet(inout met : boolean) : void
        // not supported on this network
