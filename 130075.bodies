class Integer
!!!344987.java!!!	Integer(in value : int)
        this.value = value;
!!!345115.java!!!	Integer(inout string : String)
        this(parseInt(string));
!!!345243.java!!!	byteValue() : byte
        return (byte) value;
!!!345371.java!!!	compareTo(inout object : Integer) : int
        return compare(value, object.value);
!!!345499.java!!!	compare(in lhs : int, in rhs : int) : int
        return lhs < rhs ? -1 : (lhs == rhs ? 0 : 1);
!!!345627.java!!!	invalidInt(inout s : String) : NumberFormatException
        throw new NumberFormatException("Invalid int: \"" + s + "\"");
!!!345755.java!!!	decode(inout string : String) : Integer
        int length = string.length(), i = 0;
        if (length == 0) {
            throw invalidInt(string);
        }
        char firstDigit = string.charAt(i);
        boolean negative = firstDigit == '-';
        if (negative) {
            if (length == 1) {
                throw invalidInt(string);
            }
            firstDigit = string.charAt(++i);
        }

        int base = 10;
        if (firstDigit == '0') {
            if (++i == length) {
                return valueOf(0);
            }
            if ((firstDigit = string.charAt(i)) == 'x' || firstDigit == 'X') {
                if (++i == length) {
                    throw invalidInt(string);
                }
                base = 16;
            } else {
                base = 8;
            }
        } else if (firstDigit == '#') {
            if (++i == length) {
                throw invalidInt(string);
            }
            base = 16;
        }

        int result = parse(string, i, base, negative);
        return valueOf(result);
!!!345883.java!!!	doubleValue() : double
        return value;
!!!346011.java!!!	equals(inout o : Object) : boolean
        return (o instanceof Integer) && (((Integer) o).value == value);
!!!346139.java!!!	floatValue() : float
        return value;
!!!346267.java!!!	getInteger(inout string : String) : Integer
        if (string == null || string.length() == 0) {
            return null;
        }
        String prop = System.getProperty(string);
        if (prop == null) {
            return null;
        }
        try {
            return decode(prop);
        } catch (NumberFormatException ex) {
            return null;
        }
!!!346395.java!!!	getInteger(inout string : String, in defaultValue : int) : Integer
        if (string == null || string.length() == 0) {
            return valueOf(defaultValue);
        }
        String prop = System.getProperty(string);
        if (prop == null) {
            return valueOf(defaultValue);
        }
        try {
            return decode(prop);
        } catch (NumberFormatException ex) {
            return valueOf(defaultValue);
        }
!!!346523.java!!!	getInteger(inout string : String, inout defaultValue : Integer) : Integer
        if (string == null || string.length() == 0) {
            return defaultValue;
        }
        String prop = System.getProperty(string);
        if (prop == null) {
            return defaultValue;
        }
        try {
            return decode(prop);
        } catch (NumberFormatException ex) {
            return defaultValue;
        }
!!!346651.java!!!	hashCode() : int
        return value;
!!!346779.java!!!	intValue() : int
        return value;
!!!346907.java!!!	longValue() : long
        return value;
!!!347035.java!!!	parseInt(inout string : String) : int
        return parseInt(string, 10);
!!!347163.java!!!	parseInt(inout string : String, in radix : int) : int
        if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {
            throw new NumberFormatException("Invalid radix: " + radix);
        }
        if (string == null) {
            throw invalidInt(string);
        }
        int length = string.length(), i = 0;
        if (length == 0) {
            throw invalidInt(string);
        }
        boolean negative = string.charAt(i) == '-';
        if (negative && ++i == length) {
            throw invalidInt(string);
        }

        return parse(string, i, radix, negative);
!!!347291.java!!!	parse(inout string : String, in offset : int, in radix : int, inout negative : boolean) : int
        int max = Integer.MIN_VALUE / radix;
        int result = 0, length = string.length();
        while (offset < length) {
            int digit = Character.digit(string.charAt(offset++), radix);
            if (digit == -1) {
                throw invalidInt(string);
            }
            if (max > result) {
                throw invalidInt(string);
            }
            int next = result * radix - digit;
            if (next > result) {
                throw invalidInt(string);
            }
            result = next;
        }
        if (!negative) {
            result = -result;
            if (result < 0) {
                throw invalidInt(string);
            }
        }
        return result;
!!!347419.java!!!	shortValue() : short
        return (short) value;
!!!347547.java!!!	toBinaryString(in i : int) : String
        return IntegralToString.intToBinaryString(i);
!!!347675.java!!!	toHexString(in i : int) : String
        return IntegralToString.intToHexString(i, false, 0);
!!!347803.java!!!	toOctalString(in i : int) : String
        return IntegralToString.intToOctalString(i);
!!!347931.java!!!	toString() : String
        return Integer.toString(value);
!!!348059.java!!!	toString(in i : int) : String
        return IntegralToString.intToString(i);
!!!348187.java!!!	toString(in i : int, in radix : int) : String
        return IntegralToString.intToString(i, radix);
!!!348315.java!!!	valueOf(inout string : String) : Integer
        return valueOf(parseInt(string));
!!!348443.java!!!	valueOf(inout string : String, in radix : int) : Integer
        return valueOf(parseInt(string, radix));
!!!348571.java!!!	highestOneBit(in i : int) : int
        // Hacker's Delight, Figure 3-1
        i |= (i >> 1);
        i |= (i >> 2);
        i |= (i >> 4);
        i |= (i >> 8);
        i |= (i >> 16);
        return i - (i >>> 1);
!!!348699.java!!!	lowestOneBit(in i : int) : int
        return i & -i;
!!!348827.java!!!	numberOfLeadingZeros(in i : int) : int
        // Hacker's Delight, Figure 5-6
        if (i <= 0) {
            return (~i >> 26) & 32;
        }
        int n = 1;
        if (i >> 16 == 0) {
            n +=  16;
            i <<= 16;
        }
        if (i >> 24 == 0) {
            n +=  8;
            i <<= 8;
        }
        if (i >> 28 == 0) {
            n +=  4;
            i <<= 4;
        }
        if (i >> 30 == 0) {
            n +=  2;
            i <<= 2;
        }
        return n - (i >>> 31);
!!!348955.java!!!	numberOfTrailingZeros(in i : int) : int
        return NTZ_TABLE[((i & -i) * 0x0450FBAF) >>> 26];
!!!349083.java!!!	bitCount(in i : int) : int
        // Hacker's Delight, Figure 5-2
        i -= (i >> 1) & 0x55555555;
        i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
        i = ((i >> 4) + i) & 0x0F0F0F0F;
        i += i >> 8;
        i += i >> 16;
        return i & 0x0000003F;
!!!349211.java!!!	rotateLeft(in i : int, in distance : int) : int
        // Shift distances are mod 32 (JLS3 15.19), so we needn't mask -distance
        return (i << distance) | (i >>> -distance);
!!!349339.java!!!	rotateRight(in i : int, in distance : int) : int
        // Shift distances are mod 32 (JLS3 15.19), so we needn't mask -distance
        return (i >>> distance) | (i << -distance);
!!!349467.java!!!	reverseBytes(in i : int) : int
        // Hacker's Delight 7-1, with minor tweak from Veldmeijer
        // http://graphics.stanford.edu/~seander/bithacks.html
        i =    ((i >>>  8) & 0x00FF00FF) | ((i & 0x00FF00FF) <<  8);
        return ( i >>> 16              ) | ( i               << 16);
!!!349595.java!!!	reverse(in i : int) : int
        // Hacker's Delight 7-1, with minor tweak from Veldmeijer
        // http://graphics.stanford.edu/~seander/bithacks.html
        i =    ((i >>>  1) & 0x55555555) | ((i & 0x55555555) <<  1);
        i =    ((i >>>  2) & 0x33333333) | ((i & 0x33333333) <<  2);
        i =    ((i >>>  4) & 0x0F0F0F0F) | ((i & 0x0F0F0F0F) <<  4);
        i =    ((i >>>  8) & 0x00FF00FF) | ((i & 0x00FF00FF) <<  8);
        return ((i >>> 16)             ) | ((i             ) << 16);
!!!349723.java!!!	signum(in i : int) : int
        return (i >> 31) | (-i >>> 31); // Hacker's delight 2-7
!!!349851.java!!!	valueOf(in i : int) : Integer
        return  i >= 128 || i < -128 ? new Integer(i) : SMALL_VALUES[i + 128];
