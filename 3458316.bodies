class PlainInsn
!!!15112972.java!!!	PlainInsn(inout opcode : Rop, inout position : SourcePosition, inout result : RegisterSpec, inout sources : RegisterSpecList)
        super(opcode, position, result, sources);

        switch (opcode.getBranchingness()) {
            case Rop.BRANCH_SWITCH:
            case Rop.BRANCH_THROW: {
                throw new IllegalArgumentException("bogus branchingness");
            }
        }

        if (result != null && opcode.getBranchingness() != Rop.BRANCH_NONE) {
            // move-result-pseudo is required here
            throw new IllegalArgumentException
                    ("can't mix branchingness with result");
        }
!!!15113100.java!!!	PlainInsn(inout opcode : Rop, inout position : SourcePosition, inout result : RegisterSpec, inout source : RegisterSpec)
        this(opcode, position, result, RegisterSpecList.make(source));
!!!15113228.java!!!	getCatches() : TypeList
        return StdTypeList.EMPTY;
!!!15113356.java!!!	accept(inout visitor : Visitor) : void
        visitor.visitPlainInsn(this);
!!!15113484.java!!!	withAddedCatch(inout type : Type) : Insn
        throw new UnsupportedOperationException("unsupported");
!!!15113612.java!!!	withRegisterOffset(in delta : int) : Insn
        return new PlainInsn(getOpcode(), getPosition(),
                             getResult().withOffset(delta),
                             getSources().withOffset(delta));
!!!15113740.java!!!	withSourceLiteral() : Insn
        RegisterSpecList sources = getSources();
        int szSources = sources.size();

        if (szSources == 0) {
            return this;
        }

        TypeBearer lastType = sources.get(szSources - 1).getTypeBearer();

        if (!lastType.isConstant()) {
            // Check for reverse subtraction, where first source is constant
            TypeBearer firstType = sources.get(0).getTypeBearer();
            if (szSources == 2 && firstType.isConstant()) {
                Constant cst = (Constant) firstType;
                RegisterSpecList newSources = sources.withoutFirst();
                Rop newRop = Rops.ropFor(getOpcode().getOpcode(), getResult(),
                                             newSources, cst);
                return new PlainCstInsn(newRop, getPosition(), getResult(),
                                            newSources, cst);
            }
            return this;
        } else {

            Constant cst = (Constant) lastType;

            RegisterSpecList newSources = sources.withoutLast();

            Rop newRop;
            try {
                // Check for constant subtraction and flip it to be addition
                int opcode = getOpcode().getOpcode();
                if (opcode == RegOps.SUB && cst instanceof CstInteger) {
                    opcode = RegOps.ADD;
                    cst = CstInteger.make(-((CstInteger)cst).getValue());
                }
                newRop = Rops.ropFor(opcode, getResult(), newSources, cst);
            } catch (IllegalArgumentException ex) {
                // There's no rop for this case
                return this;
            }

            return new PlainCstInsn(newRop, getPosition(),
                    getResult(), newSources, cst);
        }
!!!15113868.java!!!	withNewRegisters(inout result : RegisterSpec, inout sources : RegisterSpecList) : Insn

        return new PlainInsn(getOpcode(), getPosition(),
                             result,
                             sources);

