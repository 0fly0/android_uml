class IrBlasterSetupActivity
!!!12235788.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        if (savedInstanceState != null) {
            if (DEBUG) {
                Log.d(LOG_TAG, "onCreate(): " + savedInstanceState.toString());
            }
            savedInstanceState = null;
        } else {
            if (DEBUG) {
                Log.d(LOG_TAG, "onCreate(): savedInstanceState is null");
            }
        }
        super.onCreate(savedInstanceState);

        setExplainButtonVisible(false);
        mCommandSetUtil = new CommandSetUtil(this);
        Uri videoUri = MediaDevicesIntents.getVideoUri(getIntent());
        Log.d(LOG_TAG, "videoUri from MediaDevicesIntents is " + videoUri);
        if (videoUri != null) {
            setProperty(VideoSetupDisplayFragment.VIDEO_URI_PROPERTY, videoUri);
        }
        Device device = MediaDevicesIntents.getDevice(getIntent());
        if (device != null) {
            // Called from Video Input
            if (device.hasCapability(Capability.USES_CHANNEL_LINEUP)) {
                mExtra = DEVICE_CAPABILITY_LINEUP;
            } else {
                mExtra = DEVICE_CAPABILITY_NOLINEUP;
            }
        } else {
            // Called from TV&AVR
            mExtra = getIntent().getStringExtra("device_type");
        }
        Log.d(LOG_TAG, "mExtra: " + mExtra);
        setProperty(DEVICE_SELECTION, mExtra);
        mDeviceId = MediaDevicesIntents.getDeviceId(getIntent());
        Log.d(LOG_TAG, "device id " + mDeviceId);
!!!12235916.java!!!	onResume() : void
        super.onResume();
        startService(new Intent(MediaDevicesConstants.ACTION_RELEASE_CLIENTS));
!!!12236044.java!!!	onDestroy() : void
        super.onDestroy();
!!!12236172.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            String step = getCurrentStep();
            if (DEBUG) {
                Log.d(LOG_TAG, "onKeyDown(); current step = " + step);
            }
            if (TAG_IR_TEST.equals(step)) {
                // Jump to set manufacturer and model number.
                getFragmentManager().popBackStack(
                    IrBlasterSetupActivity.TAG_DATABASE_ACCESS, 0);
                if (mTryingCmdset != null) {
                    // Delete this codeset, because UEI FDRA size is limited.
                    mCommandSetUtil.deleteCommandSetIfNecessary(mTryingCmdset.getName());
                    mTryingCmdset = null;
                }
                return true;
            }
        }
        return processKeyEvent(keyCode, event) || super.onKeyDown(keyCode, event);
!!!12236300.java!!!	processKeyEvent(in keyCode : int, inout event : KeyEvent) : boolean
        if (mTryingCmdset != null && TAG_IR_TEST.equals(getCurrentStep())) {
            UEIKey sendKey = null;
            switch (keyCode) {
                case KeyEvent.KEYCODE_CHANNEL_DOWN:
                    sendKey = UEIKey.CHANNEL_DOWN;
                    break;
                case KeyEvent.KEYCODE_CHANNEL_UP:
                    sendKey = UEIKey.CHANNEL_UP;
                    break;
                default:
                    sendKey = null;
            }
            if (sendKey != null) {
                IRBCommand.sendKey(mTryingCmdset.getName(), sendKey);
                return true;
            }
        }
        return false;
!!!12236428.java!!!	setPaired(inout paired : boolean) : void
        String deviceId = getService().getSettings().generateUniqueDeviceId(
            OneWayConstants.IR_BLASTER_TAG);

        IrDeviceType device_type = (IrDeviceType) getProperty(
                DeviceTypesFragment.SELECTED_DEVICE_TYPE);
        IrDeviceManufacturer manufacturer = (IrDeviceManufacturer) getProperty(
                IrBlasterDatabaseAccessFragment.SELECTED_MANUFACTURER);
        IrDeviceModel model = (IrDeviceModel) getProperty(
                IrBlasterDatabaseAccessFragment.SELECTED_MODEL_NUMBER);

        getService().getSettings().setString(deviceId,
                OneWayConstants.KEY_IR_COMMAND_SET_ID, mTryingCmdset.getName());
        getService().getSettings().setString(deviceId,
                OneWayConstants.KEY_IR_DEVICE_BRAND_NAME, manufacturer.getName());
        // No need Pair TV and AVR?
        if (mExtra == null || (mExtra != null && (mExtra.equals(DEVICE_CAPABILITY_LINEUP) ||
            mExtra.equals(DEVICE_CAPABILITY_NOLINEUP)))) {
            getService().getSettings().setDevicePaired(deviceId, paired);
        } else if (mExtra.equals(DEVICE_TYPE_AVR)) {
            // RemoveMe: Should return to the calling activity.
            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
                    getApplicationContext());
            // Delete old commandSet if have.
            mCommandSetUtil.deleteAVRCommandSetIfNecessary(mTryingCmdset.getName());
            prefs.edit().putString("avr_manufacturer", manufacturer.getName())
                        .putString("avr_model_number", model.getName())
                        .putString("avr_code", mTryingCmdset.getName())
                        .putString("avr_device_type", device_type.getName()).commit();
            setResult(RESULT_OK, null);
            return;

        } else if (mExtra.equals(DEVICE_TYPE_TV)) {
            // RemoveMe: Should return to the calling activity.
            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
                    getApplicationContext());
            // Delete old commandSet if have.
            mCommandSetUtil.deleteTVCommandSetIfNecessary(mTryingCmdset.getName());
            prefs.edit().putString("tv_manufacturer", manufacturer.getName())
                        .putString("tv_model_number", model.getName())
                        .putString("tv_code", mTryingCmdset.getName()).commit();
            setResult(RESULT_OK, null);
            return;
        }
        // OEM NOTE: the device label can be set here in order to customize how this device
        // appears to the user. For this sample, we just use the name of the command set.
        String deviceLabel = mTryingCmdset.getName();
        Uri videoUri = MediaDevicesIntents.getVideoUri(getIntent());
        // Create a new instance of this new device and attach it to the result.
        // Need to make sure the capabilities here match the ones that were advertised by the
        // service.
        // New capabilities can also be added here depending on the device which was paired.
        Device device = new Device.Builder(getPackageName(), deviceId)
                .setType(DeviceType.IR_BLASTER)
                .setLabel(manufacturer.getName() + " (" + model.getName() + ")")
                .setUserLabel(manufacturer.getName() + " (" + model.getName() + ")")
                .setManufacturer(manufacturer.getName())
                .setModel(model.getName())
                .setCapability(Capability.IS_INTERNAL, true)
                .setCapability(Capability.PROVIDES_CHANNEL_LINEUP, false)
                .setCapability(Capability.SUPPORTS_SOFT_KEYS, SoftKeys.ALL_SOFT_KEYS)
                .build();

        Intent resultIntent = MediaDevicesIntents.createPairingResultIntent(device, videoUri,
                null, paired);
        setResult(paired ? RESULT_OK : RESULT_CANCELED, resultIntent);
        getService().addDevicesInService();
!!!12236556.java!!!	exitWithCancel() : void
        setResult(RESULT_CANCELED);
        finish();
!!!12236684.java!!!	onBack() : boolean
        String step = getCurrentStep();
        if (DEBUG) {
            Log.d(LOG_TAG, "onBack(); current step = " + step);
        }

        if (TAG_IR_TEST.equals(step)) {
            if (mTryingCmdset != null) {
                // Delete this codeset, because UEI FDRA size is limited.
                mCommandSetUtil.deleteCommandSetIfNecessary(mTryingCmdset.getName());
                mTryingCmdset = null;
            }
            // Prepare for Next try.
            mTryIndex += 1;
            if (!prepareIrTest()) {
                doRetry();
            }
            return false;
        } else if (TAG_IR_RETRY.equals(step)) {
            // Start over Retry.
            mTryIndex = 0;
            if (!prepareIrTest()) {
                Log.e(LOG_TAG, "onBack(); No valid commandset! ");
            }
        } else if (TAG_DEVICETYPE_SETUP.equals(step)) {
            exitWithCancel();
        } else if (TAG_DATABASE_ACCESS.equals(step)) {
            if ((mExtra != null) && mExtra.equals(DEVICE_TYPE_TV)) {
                exitWithCancel();
            }
        }
        return true;
!!!12236812.java!!!	onNext() : void
        String step = getCurrentStep();
        if (DEBUG) {
            Log.d(LOG_TAG, "onNext(); current step = " + step);
        }
        if (step == null) {
            if ((mExtra != null) && mExtra.equals(DEVICE_TYPE_TV)) {
                // FIXME: hard code to TV.
                IrDeviceType device_type = new IrDeviceType("0", "TV");
                setProperty(DeviceTypesFragment.SELECTED_DEVICE_TYPE, device_type);
                Log.d(LOG_TAG, "onNext(); goto TV setup");
                doDatabaseAccess();
            } else {
                Log.d(LOG_TAG, "onNext(); goto Input Device setup");
                doDeviceTypeSetup();
            }
        } else if (TAG_DEVICETYPE_SETUP.equals(step)){
            doDatabaseAccess();
        } else if (TAG_DATABASE_ACCESS.equals(step)) {
            mTryIndex = 0;
            if (prepareIrTest()) {
                doIrTest();
            } else {
                Log.e(LOG_TAG, "onNext(); No valid commandset! ");
            }
        } else if (TAG_IR_TEST.equals(step)) {
            Boolean codeSetDownloaded = (Boolean) getProperty(CODESET_DOWNLOADED);
            if (codeSetDownloaded.booleanValue()) {
                setPaired(true);
                finish();
            } else {
                exitWithCancel();
            }
        } else if (TAG_IR_RETRY.equals(step)) {
            exitWithCancel();
        }
!!!12236940.java!!!	onExplain() : void
        String explanation = getString(R.string.input_explanation, getGoogleTvDeviceName());
        showHelpDialog(explanation);
!!!12237068.java!!!	onSkip() : void
        // Show a confirmation dialog.
        new AlertDialog.Builder(this)
                .setMessage(getString(R.string.input_skip_warning, getGoogleTvDeviceName()))
                .setPositiveButton(getString(R.string.button_skip),
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                setResult(MediaDevicesConstants.RESULT_SKIPPED, null);
                                finish();
                            }
                        })
                .setNegativeButton(getString(R.string.button_cancel), null)
                .show();
!!!12237196.java!!!	doDeviceTypeSetup() : void
        if (DEBUG) Log.d(LOG_TAG, "doDeviceTypeSetup");
        if ((mExtra != null) &&
            (mExtra.equals(DEVICE_TYPE_TV) || mExtra.equals(DEVICE_TYPE_AVR))) {
            setCurrentStep(TAG_DEVICETYPE_SETUP, DeviceTypesFragment.class,
                    HelpFragment.class);
        } else {
            setCurrentStep(TAG_DEVICETYPE_SETUP, DeviceTypesFragment.class,
                    VideoPreviewFragment.class);
        }
!!!12237324.java!!!	doDatabaseAccess() : void
        if (DEBUG) Log.d(LOG_TAG, "doDatabaseAccess");
        if ((mExtra != null) &&
            (mExtra.equals(DEVICE_TYPE_TV) || mExtra.equals(DEVICE_TYPE_AVR))) {
            setCurrentStep(TAG_DATABASE_ACCESS, IrBlasterDatabaseAccessFragment.class,
                    HelpFragment.class);
        } else {
            setCurrentStep(TAG_DATABASE_ACCESS, IrBlasterDatabaseAccessFragment.class,
                    VideoPreviewFragment.class);
        }
!!!12237452.java!!!	prepareIrTest() : boolean
        List<IrCommandSet> cmdset_list = (List<IrCommandSet>)
            getProperty(IrBlasterDatabaseAccessFragment.SELECTED_COMMANDSET_LIST);
        IrDeviceManufacturer manu = (IrDeviceManufacturer)
            getProperty(IrBlasterDatabaseAccessFragment.SELECTED_MANUFACTURER);
        int size = cmdset_list.size();
        if (DEBUG) Log.d(LOG_TAG, "mTryIndex: " + mTryIndex + ", size: " + size);
        if (mTryIndex < size) {
            // Use property to pass index for testing.
            setProperty(SELECTED_COMMANDSET_INDEX, Integer.valueOf(mTryIndex));
            mTryingCmdset = cmdset_list.get(mTryIndex);
            setProperty(SELECTED_COMMANDSET, mTryingCmdset);
            getService().getSettings().setString(mDeviceId,
                    OneWayConstants.KEY_IR_COMMAND_SET_ID, mTryingCmdset.getName());
            getService().getSettings().setString(mDeviceId,
                    OneWayConstants.KEY_IR_DEVICE_BRAND_NAME, manu.getName());
            return true;
        }
        return false;
!!!12237580.java!!!	doIrTest() : void
        if (DEBUG) Log.d(LOG_TAG, "doIrTest");
        if ((mExtra != null) &&
            (mExtra.equals(DEVICE_TYPE_TV) || mExtra.equals(DEVICE_TYPE_AVR))) {
            setCurrentStep(TAG_IR_TEST, IrBlasterTestOutputFragment.class, HelpFragment.class);
        } else {
            setCurrentStep(TAG_IR_TEST, IrBlasterTestInputFragment.class,
                          TestIrbVideoPreviewFragment.class);
        }
!!!12237708.java!!!	doRetry() : void
        if (DEBUG) Log.d(LOG_TAG, "doRetry");
        setCurrentStep(TAG_IR_RETRY, IrRetryFragment.class, HelpFragment.class);
