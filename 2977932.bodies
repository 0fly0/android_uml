class OverscanCalibrator
!!!12112396.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        mCurrentMode = Mode.INTRO;
        mBoxRect = new Rect();
        setContentView(R.layout.overscan_calibrator_activity);
        mInstructionsText = (TextView) findViewById(R.id.instructions_text);
        mTitleText = (TextView) findViewById(R.id.title_text);

        setupButtons();
        updateViews();
        mKeyWidget = new KeyWidget((RelativeLayout) findViewById(
                R.id.arrow_layout), new KeyWidget.OnKeyWidgetClickedListener() {
            public void onDownArrowPressed(boolean isAltPressed) {
                onDownKeyPressed(isAltPressed ? LARGE_STEP_SIZE :
                        SMALL_STEP_SIZE);
            }

            public void onLeftArrowPressed(boolean isAltPressed) {
                onLeftKeyPressed(isAltPressed ? LARGE_STEP_SIZE :
                        SMALL_STEP_SIZE);
            }

            public void onRightArrowPressed(boolean isAltPressed) {
                onRightKeyPressed(isAltPressed ? LARGE_STEP_SIZE :
                        SMALL_STEP_SIZE);
            }

            public void onUpArrowPressed(boolean isAltPressed) {
                onUpKeyPressed(isAltPressed ? LARGE_STEP_SIZE :
                        SMALL_STEP_SIZE);
            }
        });

        Overscan.initialize();
        mOutputWidth = Overscan.getOutputWidth();
        mOutputHeight = Overscan.getOutputHeight();
        int minBoxWidth = (int) (mOutputWidth * getDefaultBoxMultiplier());
        int minBoxHeight = (int) (mOutputHeight * getDefaultBoxMultiplier());
        mDefaultWidthMargin = (mOutputWidth - minBoxWidth) / 2;
        mDefaultHeightMargin = (mOutputHeight - minBoxHeight) / 2;
        updateUiForMode();

        if (!isInSetup()) {
            loadInitialBox();
            // Ask to keep the initial box or not.
            storeStartValues();
            promptToLoadSettings();
        } else {
            setupInitialBox();
            mStartingBox = new Rect();
        }
!!!12112524.java!!!	getDefaultBoxMultiplier() : double
        return getResources().getInteger(
                R.integer.overscan_default_multiplier) / 100.0;
!!!12112652.java!!!	setupButtons() : void
        mNextButton = (Button) findViewById(R.id.next_button);
        mNextButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                nextMode();
                updateViews();
            }
        });

        mDoneButton = (Button) findViewById(R.id.done_button);
        if (isInSetup()) {
            mDoneButton.setText(R.string.next_button_label);
        }
        mDoneButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                mDoneButton.setEnabled(false);
                persistCalibrationRect();
            }
        });
        mDoneButton.setVisibility(View.GONE);

        mRetryButton = (Button) findViewById(R.id.retry_button);
        mRetryButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                mCurrentMode = Mode.TOP;
                updateUiForMode();
                updateViews();
            }
        });
        mRetryButton.setVisibility(View.GONE);
!!!12112780.java!!!	onStart() : void
        super.onStart();
        Overscan.setRectColor(BORDER_COLOR);
        boundAndUpdateRect();
!!!12112908.java!!!	onRestart() : void
        Overscan.initialize();
        super.onRestart();
!!!12113036.java!!!	onStop() : void
        internalCleanup();
        super.onStop();
!!!12113164.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        if (handledTvHotKeys(keyCode)) {
            return true;
        }

        mKeyWidget.updateFromKey(event);
        if (event.getAction() == KeyEvent.ACTION_DOWN) {
            if (mCurrentMode == Mode.CONFIRM) {
                return super.onKeyDown(keyCode, event);
            } else {
                int stepSize = event.isAltPressed() || event.isCtrlPressed() ?
                        LARGE_STEP_SIZE : SMALL_STEP_SIZE;
                switch (event.getKeyCode()) {
                    case KeyEvent.KEYCODE_DPAD_UP:
                        onUpKeyPressed(stepSize);
                        break;
                    case KeyEvent.KEYCODE_DPAD_DOWN:
                        onDownKeyPressed(stepSize);
                        break;
                    case KeyEvent.KEYCODE_DPAD_LEFT:
                        onLeftKeyPressed(stepSize);
                        break;
                    case KeyEvent.KEYCODE_DPAD_RIGHT:
                        onRightKeyPressed(stepSize);
                        break;
                    default:
                        return super.onKeyDown(keyCode, event);
                }
                return true;
            }
        }
        return super.onKeyDown(keyCode, event);
!!!12113292.java!!!	promptToLoadSettings() : void
        new AlertDialog.Builder(this, AlertDialog.THEME_HOLO_DARK)
                .setTitle(R.string.load_title)
                .setMessage(R.string.load_message)
                .setPositiveButton(R.string.load_button_yes,
                        new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        // Do nothing, initial box was loaded already.
                    }
                })
                .setNegativeButton(R.string.load_button_no,
                        new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        setupInitialBox();
                        boundAndUpdateRect();
                    }
                })
                .setOnCancelListener(new DialogInterface.OnCancelListener() {
                    @Override
                    public void onCancel(DialogInterface dialog) {
                        finish();
                    }
                })
                .show();
!!!12113420.java!!!	onUpKeyPressed(in stepSize : int) : void
        if (mCurrentMode == Mode.TOP) {
            mBoxRect.top -= stepSize;
        } else if (mCurrentMode == Mode.BOTTOM) {
            mBoxRect.bottom -= stepSize;
        }
        boundAndUpdateRect();
!!!12113548.java!!!	onDownKeyPressed(in stepSize : int) : void
        if (mCurrentMode == Mode.TOP) {
            mBoxRect.top += stepSize;
        } else if (mCurrentMode == Mode.BOTTOM) {
            mBoxRect.bottom += stepSize;
        }
        boundAndUpdateRect();
!!!12113676.java!!!	onLeftKeyPressed(in stepSize : int) : void
        if (mCurrentMode == Mode.LEFT) {
            mBoxRect.left -= stepSize;
        } else if (mCurrentMode == Mode.RIGHT) {
            mBoxRect.right -= stepSize;
        }
        boundAndUpdateRect();
!!!12113804.java!!!	onRightKeyPressed(in stepSize : int) : void
        if (mCurrentMode == Mode.LEFT) {
            mBoxRect.left += stepSize;
        } else if (mCurrentMode == Mode.RIGHT){
            mBoxRect.right += stepSize;
        }
        boundAndUpdateRect();
!!!12113932.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
        mKeyWidget.updateFromKey(event);
        return super.onKeyUp(keyCode, event);
!!!12114060.java!!!	onSearchRequested() : boolean
        return false;
!!!12114188.java!!!	onBackPressed() : void
        previousMode();
        updateViews();
!!!12114316.java!!!	handledTvHotKeys(in keyCode : int) : boolean
        // TODO(jefflu): add isTvHotKey in WindowManager based on policy
        // once WindowManager is done instead of listing each of these.
        switch(keyCode) {
            case KeyEvent.KEYCODE_TV:
            case KeyEvent.KEYCODE_GUIDE:
            case KeyEvent.KEYCODE_DVR:
            case KeyEvent.KEYCODE_SETTINGS:
                return true;
            default:
                return false;
        }
!!!12114444.java!!!	nextMode() : void
        int index = mOrderedModes.indexOf(mCurrentMode);
        if (++index < mOrderedModes.size()) {
            mCurrentMode = mOrderedModes.get(index);
            updateUiForMode();
        } else {
            persistCalibrationRect();
        }
!!!12114572.java!!!	previousMode() : void
        int index = mOrderedModes.indexOf(mCurrentMode);
        if (--index >= 0) {
            mCurrentMode = mOrderedModes.get(index);
            updateUiForMode();
        } else {
            super.onBackPressed();
        }
!!!12114700.java!!!	isInSetup() : boolean
        int stepIndex = getIntent().getIntExtra(EXTRA_STEP_INDEX, -1);
        return stepIndex >= 0;
!!!12114828.java!!!	updateUiForMode() : void
        if (mCurrentMode == Mode.CONFIRM) {
            mKeyWidget.setDisplayMode(KeyWidget.DisplayMode.CONFIRM);
            mDoneButton.setVisibility(View.VISIBLE);
            mDoneButton.requestFocus();
            mRetryButton.setVisibility(View.VISIBLE);
        } else {
            mDoneButton.setVisibility(View.GONE);
            mRetryButton.setVisibility(View.GONE);
            if (mCurrentMode == Mode.INTRO) {
                mKeyWidget.setDisplayMode(KeyWidget.DisplayMode.CONFIRM);
            } else if (mCurrentMode == Mode.TOP) {
                mKeyWidget.setDisplayMode(KeyWidget.DisplayMode.UP);
            } else if (mCurrentMode == Mode.BOTTOM) {
                mKeyWidget.setDisplayMode(KeyWidget.DisplayMode.DOWN);
            } else if (mCurrentMode == Mode.LEFT) {
                mKeyWidget.setDisplayMode(KeyWidget.DisplayMode.LEFT);
            } else {
                mKeyWidget.setDisplayMode(KeyWidget.DisplayMode.RIGHT);
            }
        }
!!!12114956.java!!!	updateViews() : void
        int instructionsTextResId;
        int titleTextResId;

        if (mCurrentMode == Mode.INTRO) {
            instructionsTextResId = R.string.instructions_intro;
            titleTextResId = R.string.screen_calibration_title;
            mNextButton.setVisibility(View.VISIBLE);
            mNextButton.requestFocus();
        } else if (mCurrentMode == Mode.TOP) {
            instructionsTextResId = R.string.instructions_top;
            titleTextResId = R.string.up_title;
            mNextButton.setVisibility(View.VISIBLE);
            mNextButton.requestFocus();
        } else if (mCurrentMode == Mode.BOTTOM) {
            titleTextResId = R.string.down_title;
            instructionsTextResId = R.string.instructions_bottom;
            mNextButton.setVisibility(View.VISIBLE);
            mNextButton.requestFocus();
        } else if (mCurrentMode == Mode.LEFT) {
            titleTextResId = R.string.left_title;
            instructionsTextResId = R.string.instructions_left;
            mNextButton.setVisibility(View.VISIBLE);
            mNextButton.requestFocus();
        } else if (mCurrentMode == Mode.RIGHT) {
            titleTextResId = R.string.right_title;
            instructionsTextResId = R.string.instructions_right;
            mNextButton.setVisibility(View.VISIBLE);
            mNextButton.requestFocus();
        } else {
            if (isInSetup()) {
                instructionsTextResId = R.string.instructions_confirm_setup;
            } else {
                if (calibrationIsDirty()) {
                    instructionsTextResId = R.string.instructions_confirm;
                    mDoneButton.setText(R.string.button_done_label);
                } else {
                    instructionsTextResId =
                            R.string.instructions_confirm_no_change;
                    mDoneButton.setText(R.string.button_no_change_label);
                }
            }
            titleTextResId = R.string.screen_calibration_title;
            mNextButton.setVisibility(View.GONE);
        }
        mTitleText.setText(titleTextResId);
        mInstructionsText.setText(getText(instructionsTextResId));
!!!12115084.java!!!	setupInitialBox() : void
        Overscan.getOverscanRectangle(mBoxRect);
        mBoxRect.left = mDefaultWidthMargin;
        mBoxRect.top = mDefaultHeightMargin;
        int width =  mOutputWidth - (2 * mDefaultWidthMargin);
        mBoxRect.right = mBoxRect.left + width;
        int height = mOutputHeight - (2 * mDefaultHeightMargin);
        mBoxRect.bottom = mBoxRect.top + height;

        sanityCheckSettings();
!!!12115212.java!!!	loadInitialBox() : void
        Overscan.getOverscanRectangle(mBoxRect);
        Log.d(TAG, "loadInitialBox: " + mBoxRect.left + " " + mBoxRect.top + " " +
             mBoxRect.width() + " " + mBoxRect.height());
        sanityCheckSettings();
!!!12115340.java!!!	sanityCheckSettings() : void
        // Sanity check of the settings.  If they appear to be bogus, just use
        // defaults for everything.
        if ((mBoxRect.width()  < (mOutputWidth  / 2)) ||
            (mBoxRect.height() < (mOutputHeight / 2)) ||
            (mBoxRect.left   > (mOutputWidth  / 2)) ||
            (mBoxRect.top  > (mOutputHeight / 2))) {
            mBoxRect.left = mDefaultWidthMargin;
            mBoxRect.top = mDefaultHeightMargin;
            mBoxRect.right = mOutputWidth - mDefaultWidthMargin;
            mBoxRect.bottom = mOutputHeight - mDefaultHeightMargin;
        }
!!!12115468.java!!!	boundAndUpdateRect() : void
        Log.d(TAG, "before: " + mBoxRect.left + " " + mBoxRect.top + " " +
                mBoxRect.width() + " " + mBoxRect.height());

        if (mBoxRect.left < 0) {
            mBoxRect.left = 0;
        }

        if (mBoxRect.top < 0) {
            mBoxRect.top = 0;
        }

        if ((mBoxRect.left + mBoxRect.width()) > mOutputWidth) {
            mBoxRect.right = mOutputWidth;
        }

        if ((mBoxRect.top + mBoxRect.height()) > mOutputHeight) {
            mBoxRect.bottom = mOutputHeight;
        }

        if (mBoxRect.left > mDefaultWidthMargin) {
            mBoxRect.left = mDefaultWidthMargin;
        }

        if (mBoxRect.top > mDefaultHeightMargin) {
            mBoxRect.top = mDefaultHeightMargin;
        }

        if (mBoxRect.right < mOutputWidth - mDefaultWidthMargin) {
            mBoxRect.right = mOutputWidth - mDefaultWidthMargin;
        }

        if (mBoxRect.bottom < mOutputHeight - mDefaultHeightMargin) {
            mBoxRect.bottom = mOutputHeight - mDefaultHeightMargin;
        }

        Log.d(TAG, "drawing rect: " + mBoxRect.left + " " + mBoxRect.top + " " +
             mBoxRect.width() + " " + mBoxRect.height());
        Overscan.drawCalibrationRect(mBoxRect.left, mBoxRect.top,
                                    mBoxRect.width(), mBoxRect.height());
!!!12115596.java!!!	internalCleanup() : void
        Overscan.cleanup();
!!!12115724.java!!!	persistCalibrationRect() : void
        if (!calibrationIsDirty()) {
            setResult(RESULT_OK);
            finish();
            return;
        }

        Overscan.setOverscanRectangle(mBoxRect);
        setResult(RESULT_OK);
        finish();
        return;
!!!12115852.java!!!	calibrationIsDirty() : boolean
        return !mStartingBox.equals(mBoxRect);
!!!12115980.java!!!	storeStartValues() : void
        mStartingBox = new Rect(mBoxRect);
