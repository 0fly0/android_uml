class GtvSpecific
!!!12438028.java!!!	getCurrentChannelUrl(inout context : Context, in deviceId : String) : String
        final USDTVServiceData currentChannel = TvFramework.getInstance().getLiveTvInstance()
                .getCurrentService();
        if (currentChannel != null) {
            int majorNo = currentChannel.getMajorNo();
            int minorNo = currentChannel.getMinorNo();
            int tunerMode = TvFramework.getInstance().getTunerInstance().getTunerMode(context)
                    .ordinal();
            final String channelName = currentChannel.getServiceName();

            Log.d(TAG, "getCurrentChannelUrl major No = " + majorNo + " minor No = " + minorNo
                    + " channel Name = " + channelName);
            ChannelStreamInfo csi = getChannelStreamInfo(deviceId, majorNo, minorNo, channelName,
                    currentChannel.getServiceFlag(), currentChannel.getServiceId(), tunerMode);

            return csi.getTvUrl();
        } else
            return null;
!!!12438156.java!!!	getChannelUrl(inout context : Context, in deviceId : String, inout chDetails : ChannelDetails, in tunerMode : int) : String
        if (chDetails != null) {
            int majorNo = chDetails.getMajorNo();
            int minorNo = chDetails.getMinorNo();
            final String channelName = chDetails.getChannelName();

            Log.d(TAG, "getChannelUrl major No = " + majorNo + " minor No = " + minorNo
                    + " channel Name = " + channelName);
            ChannelStreamInfo csi = getChannelStreamInfo(deviceId, majorNo, minorNo, channelName,
                    chDetails.getServiceFlag(), chDetails.getServiceId(), tunerMode);

            return csi.getTvUrl();
        } else
            return null;
!!!12438284.java!!!	getChannelStreamInfo(in deviceId : String, in majorNo : int, in minorNo : int, in channelName : String, in serviceFlag : int, inout serviceId : USDTVServiceId, in tunerMode : int) : ChannelStreamInfo
        if (majorNo == ChannelDetails.INVALID_MAJOR_NUMBER) {
            majorNo = minorNo;
            minorNo = 0;
        }

        String channelNum = String.valueOf(majorNo);
        if (minorNo != 0)
            channelNum += delimiter + minorNo;

        int disabled = ((serviceFlag & ServiceModificationFlags.Skip_Flag)
                == ServiceModificationFlags.Skip_Flag) ? 1 : 0;

        ChannelStreamInfo csi = new ChannelStreamInfo(deviceId,
                channelNum,
                channelName,
                serviceId,
                tunerMode,
                disabled);
        return csi;
!!!12438412.java!!!	getLineupIdForDevice(inout context : Context, in deviceId : String) : String
        String lineupId = null;
        final String[] DEVICE_LINEUP_PROJECTION = new String[] {
                DevicesColumns.LINEUP_ID
        };

        if (context == null)
            return null;

        Cursor cursor = context.getContentResolver().query(Devices.getDeviceUri(deviceId),
                DEVICE_LINEUP_PROJECTION, null, null, null);
        if (cursor.moveToNext()) {
            lineupId = cursor.getString(0);
        }
        cursor.close();
        return lineupId;
!!!12438540.java!!!	updateQSB(inout context : Context, in deviceId : String) : void
        Log.i(TAG, "********************* updateQSB called ***********************");

        // If lineup is selected in OOBE/Settings, GTV framework can write lineup,
        // otherwise we have to write by ourselves
        if (getLineupIdForDevice(context, deviceId) != null) {
            // the device capability should be same as buildInternalTunerDevice
            // in WillowTvController
            try {
                context.startService(MediaDevicesIntents.createWriteLineupIntent(
                        context,
                        new Device.Builder("com.marvell.willowtv.controller", deviceId)
                                .setType(DeviceType.OTA_TUNER)
                                .setCapability(Capability.IS_INTERNAL, true)
                                .setCapability(Capability.IS_BOUND_TO_PORT, "hdmi://tuner?port=8")
                                .setCapability(Capability.CAN_DISCONNECT, false)
                                .setCapability(Capability.CAN_BE_DEFAULT, true)
                                .setCapability(Capability.USES_CHANNEL_LINEUP, true)
                                .setCapability(Capability.PROVIDES_CHANNEL_LINEUP, true)
                                .setCapability(Capability.WRITES_CHANNEL_LIST, true)
                                .setLabel("TUNER")
                                .build(),
                        null));
            } catch (NullPointerException e) {
                Log.d(TAG, "exception " + e);
                e.printStackTrace();
            }
        } else {
            final List<USDTVServiceData> serviceData =
                    TvFramework.getInstance().getLiveTvInstance()
                            .getServiceList();
            if (serviceData == null) {
                Log.d(TAG, "service data list is null from getServiceList");
                return;
            }

            Log.i(TAG, "*********************getServiceList returned size = "
                    + serviceData.size());

            final ArrayList<ChannelStreamInfo> streams = new
                    ArrayList<ChannelStreamInfo>();
            int tunerMode =
                    TvFramework.getInstance().getTunerInstance().getTunerMode(context)
                            .ordinal();
            for (USDTVServiceData usdtvServiceData : serviceData) {
                if (usdtvServiceData != null) {
                    int majorNo = usdtvServiceData.getMajorNo();
                    int minorNo = usdtvServiceData.getMinorNo();
                    String channelName = usdtvServiceData.getServiceName();

                    // only for debug
                    // if (majorNo == 2 && minorNo == 2)
                    // channelName = "KTVUDT2";

                    // Log.d(TAG, "major No = " + majorNo + " minor No = " +
                    // minorNo
                    // + " channel Name = " + channelName );
                    ChannelStreamInfo csi = TvFramework
                            .getInstance()
                            .getGtvSpecificInstance()
                            .getChannelStreamInfo(deviceId, majorNo, minorNo, channelName,
                                    usdtvServiceData.getServiceFlag(),
                                    usdtvServiceData.getServiceId(),
                                    tunerMode);

                    Log.d(TAG, "tv url =" + csi.getTvUrl()
                            + " serviceflag=" + usdtvServiceData.getServiceFlag());
                    streams.add(csi);
                }
            }

            // Update channel list even if it is empty channel list
            // if (serviceData.size() > 0) {
            StreamUtils.processListResults(context.getContentResolver(),
                    deviceId,
                    Streams.STREAM_TYPE_CHANNEL, streams);
            // }

            // test code
            //replaceChannels(context.getContentResolver(), deviceId, streams);
            //updateChannels(context.getContentResolver(), deviceId, streams);
        }
!!!12438668.java!!!	replaceChannels(inout resolver : ContentResolver, in deviceId : String, in streams : List<? extends IStream>) : void

        // Delete all old channels.
        final String selection = StreamsColumns.DEVICE_ID + " = ? AND "
                + StreamsColumns.STREAM_TYPE + " = ?";
        final String[] selectionArgs = new String[] {
                deviceId, String.valueOf(Streams.STREAM_TYPE_CHANNEL) };

        resolver.delete(Streams.STREAMS_URI, selection, selectionArgs);

        // Bulk insert new channels in batches (too many inserts can crash
        // SQLite).
        ArrayList<ContentValues> contentValues =
                new ArrayList<ContentValues>(DEFAULT_CHANNEL_INSERT_SIZE);
        for (IStream stream : streams) {
            contentValues.add(stream.asContentValues());
            if ((contentValues.size() == DEFAULT_CHANNEL_INSERT_SIZE)) {
                resolver.bulkInsert(Streams.STREAMS_URI,
                        contentValues.toArray(new ContentValues[] {}));
                contentValues = new ArrayList<ContentValues>(
                        DEFAULT_CHANNEL_INSERT_SIZE);
            }
        }
        if (contentValues.size() > 0) {
            resolver.bulkInsert(Streams.STREAMS_URI,
                    contentValues.toArray(new ContentValues[] {}));
        }
!!!12438796.java!!!	updateChannels(inout resolver : ContentResolver, in deviceId : String, in streams : List<? extends IStream>) : void

        final ArrayList<ContentValues> newValues = new ArrayList<ContentValues>();
        final HashSet<String> oldUris = StreamUtils.getCurrentStreamUrls(resolver,
                deviceId, Streams.STREAM_TYPE_CHANNEL);
        final HashSet<String> newUris = new HashSet<String>();

        // Loop through the new list looking for inserts and updates.
        final String selection = new StringBuilder(StreamsColumns.URI).append(" = ? AND ")
                .append(StreamsColumns.STREAM_TYPE).append(" = ?").toString();
        String[] selectionArgs = new String[] {
                null, String.valueOf(Streams.STREAM_TYPE_CHANNEL)
        };

        for (IStream stream : streams) {
            final ContentValues channelValues = stream.asContentValues();
            final String uriString = channelValues.getAsString(StreamsColumns.URI);
            Log.d(TAG, "new uri=" + uriString);
            newUris.add(uriString);
            final Uri tvUri = Uri.parse(uriString);
            Cursor c = null;
            try {
                c = StreamUtils.getStreamByUrl(resolver, tvUri);
                if (c.moveToNext()) {
                    Log.d(TAG, "existing channel, change=" + hasMetaDataChanges(channelValues, c));
                    // There is an existing channel. Check if there are changes
                    // and if so, take the current enabled status, update the
                    // values, then update the database.
                    if (hasMetaDataChanges(channelValues, c)) {
                        channelValues.put(StreamsColumns.IS_DISABLED,
                                c.getInt(Streams.IS_DISABLED_INDEX));
                        selectionArgs[0] = uriString;
                        resolver.update(Streams.STREAMS_URI, channelValues, selection,
                                selectionArgs);
                    }
                } else {
                    Log.d(TAG, "new channel");
                    // Check what tier this is in.
                    //channelValues.put(StreamsColumns.IS_DISABLED,
                    //        isDefaultEnabledTier(channel.getTier()) ? 0 : 1);
                    newValues.add(channelValues);
                }
            } finally {
                if (c != null) {
                    c.close();
                }
            }
        }

        // Insert new values.
        resolver.bulkInsert(Streams.STREAMS_URI,
                newValues.toArray(new ContentValues[] {}));

        // Delete old values.
        for (String oldUri : oldUris) {
            Log.d(TAG, "old channel uri=" + oldUri + " delete=" + !newUris.contains(oldUri));
            if (!newUris.contains(oldUri)) {
                selectionArgs[0] = oldUri;
                resolver.delete(Streams.STREAMS_URI, selection, selectionArgs);
            }
        }
!!!12438924.java!!!	hasMetaDataChanges(in channelValues : ContentValues, in c : Cursor) : boolean
        return !(channelValues.getAsString(StreamsColumns.NAME)
                    .equals(c.getString(Streams.NAME_INDEX))
                && channelValues.getAsString(StreamsColumns.SUB_NAME)
                    .equals(c.getString(Streams.SUB_NAME_INDEX)));
!!!12439052.java!!!	deleteExistingChannels(inout context : Context, in deviceId : String) : void
        final String selection =
                StreamsColumns.DEVICE_ID + " = ? AND " + StreamsColumns.STREAM_TYPE + " = ?";
        final String[] selectionArgs =
                new String[] {
                        deviceId, String.valueOf(Streams.STREAM_TYPE_CHANNEL)
                };
        final int deletedChannels =
                context.getContentResolver().delete(Streams.STREAMS_URI, selection, selectionArgs);
        Log.i(TAG, "Deleted " + deletedChannels + " channels.");
!!!12439180.java!!!	deleteFavoiteChannels(inout context : Context) : void
        long pageId = asyncGetFirstPageId(context);
        Log.i(TAG, "pageId" + pageId);
        if (pageId != -1)
            asyncClearPage(context, pageId);
!!!12439308.java!!!	getTunerModeFromDb(inout context : Context, in deviceId : String) : int
        int tunerMode = 0;
        final String selection =
                StreamsColumns.DEVICE_ID + " = ? AND " + StreamsColumns.STREAM_TYPE + " = ?";
        final String[] selectionArgs =
                new String[] {
                        deviceId, String.valueOf(Streams.STREAM_TYPE_CHANNEL)
                };
        Cursor c = StreamUtils.getMatchingStreams(context.getContentResolver(),
                null, selection, selectionArgs, null);

        if (c != null && c.getCount() > 0) {
            try {
                c.moveToFirst();
                int index = c.getColumnIndexOrThrow(StreamsColumns.URI);
                String url = c.getString(index);
                Uri uri = Uri.parse(url);
                tunerMode = uri.getQueryParameter(ChannelStreamInfo.TUNER_MODE_QUERY_PARAMETER)
                        != null ? Integer.parseInt(uri
                                .getQueryParameter(ChannelStreamInfo.TUNER_MODE_QUERY_PARAMETER))
                                : 0;
            } catch (Exception e) {
                Log.d(TAG, "Access Database error");
            }
        }
        Log.d(TAG, "getTunerModeFromDb=" + tunerMode);
        return tunerMode;
!!!12439436.java!!!	asyncGetFirstPageId(inout context : Context) : long
        Cursor cursor = context.getContentResolver().query(
                FavoritesPages.CONTENT_URI, new String[] {
                    FavoritesPagesColumns._ID
                },
                FavoritesPagesColumns.PAGE_NUMBER + " = 0", null, null);
        long pageId = -1;

        if (cursor != null) {
            cursor.moveToFirst();

            if (!cursor.isAfterLast()) {
                pageId = cursor.getInt(0);
            }
            cursor.close();
        }

        return pageId;
!!!12439564.java!!!	asyncClearPage(inout context : Context, in pageId : long) : void
        context.getContentResolver().delete(Favorites.getDirUri(pageId),
                null, null);
