class JsonMessageBuilder
!!!13179148.java!!!	outerJsonToPoloMessage(inout outerMessage : JSONObject) : PoloMessage
    JSONObject payload;
    int status;
    PoloMessageType messageType;

    try {
      status = outerMessage.getInt(OUTER_FIELD_STATUS);
      if (status != STATUS_OK) {
        throw new ProtocolErrorException("Peer reported an error.");
      }
      payload = outerMessage.getJSONObject(OUTER_FIELD_PAYLOAD);
      int msgIntVal = outerMessage.getInt(OUTER_FIELD_TYPE);
      messageType = PoloMessageType.fromIntVal(msgIntVal);
    } catch (JSONException e) {
      throw new PoloException("Bad outer message.", e);
    }

    switch (messageType) {
      case PAIRING_REQUEST:
        return getPairingRequest(payload);
      case PAIRING_REQUEST_ACK:
        return getPairingRequestAck(payload);
      case OPTIONS:
        return getOptionsMessage(payload);
      case CONFIGURATION:
        return getConfigMessage(payload);
      case CONFIGURATION_ACK:
        return getConfigAckMessage(payload);
      case SECRET:
        return getSecretMessage(payload);
      case SECRET_ACK:
        return getSecretAckMessage(payload);
      default:
        return null;
    }
!!!13179276.java!!!	getPairingRequest(inout body : JSONObject) : PairingRequestMessage
    try {
      String serviceName = body.getString(PAIRING_REQUEST_FIELD_SERVICE_NAME);
      String clientName = null;
      if (body.has(PAIRING_REQUEST_FIELD_CLIENT_NAME)) {
        clientName = body.getString(PAIRING_REQUEST_FIELD_CLIENT_NAME);
      }
      return new PairingRequestMessage(serviceName, clientName);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }
!!!13179404.java!!!	getPairingRequestAck(inout body : JSONObject) : PairingRequestAckMessage
    try {
      String serverName = null;
      if (body.has(PAIRING_REQUEST_ACK_FIELD_SERVER_NAME)) {
        serverName = body.getString(PAIRING_REQUEST_ACK_FIELD_SERVER_NAME);
      }
      return new PairingRequestAckMessage(serverName);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }
!!!13179532.java!!!	getOptionsMessage(inout body : JSONObject) : OptionsMessage
    OptionsMessage options = new OptionsMessage();
    try {
      // Input encodings
      JSONArray inEncodings = new JSONArray();
      try {
        if (body.has(OPTIONS_FIELD_INPUT_ENCODINGS)) {
          inEncodings = body.getJSONArray(OPTIONS_FIELD_INPUT_ENCODINGS);
        }
      } catch (JSONException e) {
        throw new PoloException("Bad input encodings", e);
      }

      for (int i = 0; i < inEncodings.length(); i++) {
        JSONObject enc = inEncodings.getJSONObject(i);
        options.addInputEncoding(getEncodingOption(enc));
      }

      // Output encodings
      JSONArray outEncodings = new JSONArray();
      try {
        if (body.has(OPTIONS_FIELD_OUTPUT_ENCODINGS)) {
          outEncodings = body.getJSONArray(OPTIONS_FIELD_OUTPUT_ENCODINGS);
        }
      } catch (JSONException e) {
        throw new PoloException("Bad output encodings", e);
      }

      for (int i = 0; i < outEncodings.length(); i++) {
        JSONObject enc = outEncodings.getJSONObject(i);
        options.addOutputEncoding(getEncodingOption(enc));
      }

      // Role
      ProtocolRole role = ProtocolRole.fromIntVal(
          body.getInt(OPTIONS_FIELD_PREFERRED_ROLE));
      options.setProtocolRolePreference(role);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }

    return options;
!!!13179660.java!!!	getConfigMessage(inout body : JSONObject) : ConfigurationMessage
    try {
      EncodingOption encoding = getEncodingOption(
          body.getJSONObject(CONFIG_FIELD_ENCODING));
      ProtocolRole role = ProtocolRole.fromIntVal(
          body.getInt(CONFIG_FIELD_CLIENT_ROLE));
      return new ConfigurationMessage(encoding, role);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }
!!!13179788.java!!!	getConfigAckMessage(inout body : JSONObject) : ConfigurationAckMessage
    return new ConfigurationAckMessage();
!!!13179916.java!!!	getSecretMessage(inout body : JSONObject) : SecretMessage
    try {
      byte[] secretBytes = Base64.decode(
          body.getString(SECRET_FIELD_SECRET).getBytes());
      return new SecretMessage(secretBytes);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }
!!!13180044.java!!!	getSecretAckMessage(inout body : JSONObject) : SecretAckMessage
    try {
      byte[] secretBytes = Base64.decode(
          body.getString(SECRET_ACK_FIELD_SECRET).getBytes());
      return new SecretAckMessage(secretBytes);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }
!!!13180172.java!!!	getEncodingOption(inout option : JSONObject) : EncodingOption
    int length = option.getInt(ENCODING_FIELD_SYMBOL_LENGTH);
    int intType = option.getInt(ENCODING_FIELD_TYPE);
    EncodingType type = EncodingType.fromIntVal(intType);
    return new EncodingOption(type, length);
!!!13180300.java!!!	poloMessageToJson(inout message : PoloMessage) : JSONObject
    try {
      if (message instanceof PairingRequestMessage) {
        return toJson((PairingRequestMessage) message);
      } else if (message instanceof PairingRequestAckMessage) {
        return toJson((PairingRequestAckMessage) message);
      } else if (message instanceof OptionsMessage) {
        return toJson((OptionsMessage) message);
      } else if (message instanceof ConfigurationMessage) {
        return toJson((ConfigurationMessage) message);
      } else if (message instanceof ConfigurationAckMessage) {
        return toJson((ConfigurationAckMessage) message);
      } else if (message instanceof SecretMessage) {
        return toJson((SecretMessage) message);
      } else if (message instanceof SecretAckMessage) {
        return toJson((SecretAckMessage) message);
      }
    } catch (JSONException e) {
      throw new PoloException("Error generating message.", e);
    }
    throw new PoloException("Unknown PoloMessage type.");
!!!13180428.java!!!	getOuterJson(inout message : PoloMessage) : JSONObject
    JSONObject out = new JSONObject();
    int msgType = message.getType().getAsInt();
    JSONObject innerJson = poloMessageToJson(message);

    try {
      out.put(OUTER_FIELD_PROTOCOL_VERSION, PROTOCOL_VERSION);
      out.put(OUTER_FIELD_STATUS, STATUS_OK);
      out.put(OUTER_FIELD_TYPE, msgType);
      out.put(OUTER_FIELD_PAYLOAD, innerJson);
    } catch (JSONException e) {
      throw new PoloException("Error serializing outer message", e);
    }
    return out;
!!!13180556.java!!!	getErrorJson(inout exception : Exception) : JSONObject
    JSONObject out = new JSONObject();

    int errorStatus = STATUS_ERROR;

    if (exception instanceof NoConfigurationException) {
      errorStatus = STATUS_BAD_CONFIGURATION;
    } else if (exception instanceof BadSecretException) {
      errorStatus = STATUS_BAD_SECRET;
    }

    try {
      out.put(OUTER_FIELD_PROTOCOL_VERSION, PROTOCOL_VERSION);
      out.put(OUTER_FIELD_STATUS, errorStatus);
    } catch (JSONException e) {
      throw new PoloException("Error serializing outer message", e);
    }
    return out;

!!!13180684.java!!!	toJson(inout message : PairingRequestMessage) : JSONObject
    JSONObject jsonObj = new JSONObject();
    jsonObj.put(PAIRING_REQUEST_FIELD_SERVICE_NAME, message.getServiceName());
    if (message.hasClientName()) {
      jsonObj.put(PAIRING_REQUEST_FIELD_CLIENT_NAME, message.getClientName());
    }
    return jsonObj;
!!!13180812.java!!!	toJson(inout message : PairingRequestAckMessage) : JSONObject
    JSONObject jsonObj = new JSONObject();
    if (message.hasServerName()) {
      jsonObj.put(PAIRING_REQUEST_ACK_FIELD_SERVER_NAME,
          message.getServerName());
    }
    return jsonObj;
!!!13180940.java!!!	toJson(inout message : OptionsMessage) : JSONObject
    JSONObject jsonObj = new JSONObject();

    JSONArray inEncsArray = new JSONArray();
    for (EncodingOption encoding : message.getInputEncodingSet()) {
      inEncsArray.put(toJson(encoding));
    }
    jsonObj.put(OPTIONS_FIELD_INPUT_ENCODINGS, inEncsArray);

    JSONArray outEncsArray = new JSONArray();
    for (EncodingOption encoding : message.getOutputEncodingSet()) {
      outEncsArray.put(toJson(encoding));
    }
    jsonObj.put(OPTIONS_FIELD_OUTPUT_ENCODINGS, outEncsArray);

    int intRole = message.getProtocolRolePreference().getAsInt();
    jsonObj.put(OPTIONS_FIELD_PREFERRED_ROLE, intRole);
    return jsonObj;
!!!13181068.java!!!	toJson(inout message : ConfigurationMessage) : JSONObject
    JSONObject jsonObj = new JSONObject();
    JSONObject encoding = toJson(message.getEncoding());
    jsonObj.put(CONFIG_FIELD_ENCODING, encoding);
    int intRole = message.getClientRole().getAsInt();
    jsonObj.put(CONFIG_FIELD_CLIENT_ROLE, intRole);
    return jsonObj;
!!!13181196.java!!!	toJson(inout message : ConfigurationAckMessage) : JSONObject
    return new JSONObject();
!!!13181324.java!!!	toJson(inout message : SecretMessage) : JSONObject
    JSONObject jsonObj = new JSONObject();
    String bytesStr;
    String charsetName = Charset.defaultCharset().name();
    try {
      bytesStr = new String(Base64.encode(message.getSecret(), charsetName));
    } catch (UnsupportedEncodingException e) {
      // Should never happen.
      bytesStr = "";
    }
    jsonObj.put(SECRET_FIELD_SECRET, bytesStr);
    return jsonObj;
!!!13181452.java!!!	toJson(inout message : SecretAckMessage) : JSONObject
    JSONObject jsonObj = new JSONObject();
    String bytesStr;
    String charsetName = Charset.defaultCharset().name();
    try {
      bytesStr = new String(Base64.encode(message.getSecret(), charsetName));
    } catch (UnsupportedEncodingException e) {
      // Should never happen.
      bytesStr = "";
    }
    jsonObj.put(SECRET_ACK_FIELD_SECRET, bytesStr);
    return jsonObj;
!!!13181580.java!!!	toJson(inout encoding : EncodingOption) : JSONObject
    JSONObject result = new JSONObject();
    int intType = encoding.getType().getAsInt();
    result.put(ENCODING_FIELD_TYPE, intType);
    result.put(ENCODING_FIELD_SYMBOL_LENGTH, encoding.getSymbolLength());
    return result;
