class PinActivity
!!!12586380.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);

        setContentView(R.layout.pin_screen_enter_old);
        setTimeOut(Utils.ONE_MINUTE * 2);

        // mEditArray[0] = (EditText) findViewById(R.id.editText_pin1);
        // mEditArray[0].setOnKeyListener(this);
        // mEditArray[1] = (EditText) findViewById(R.id.editText_pin2);
        // mEditArray[1].setOnKeyListener(this);
        // mEditArray[3] = (EditText) findViewById(R.id.editText_pin3);
        // mEditArray[0].setOnKeyListener(this);
        // mEditArray[0] = (EditText) findViewById(R.id.editText_pin4);
        // mEditArray[0].setOnKeyListener(this);
        for (int i = 0; i < mEditId.length; i++) {
            mEditArray[i] = (EditText) findViewById(mEditId[i]);
            mEditArray[i].setOnKeyListener(this);
        }

        mScreenHeader = (TextView) findViewById(R.id.screen_header);
        if (getIntent() != null) {
            Bundle bundle = getIntent().getExtras();
            if (bundle != null) {
                String title = bundle.getString(PinActivity.PIN_TITLE);
                if (title != null) {
                    mScreenHeader.setText(title);
                }
                if (mScreenHeader != null) {
                    title = mScreenHeader.getText().toString();
                }

                // if value of pin is 0(default), does not display this
                // activity.
                // if (mPCSettings.getParentalPin() == 0
                // &&
                // title.equals(getResources().getString(R.string.EnterOldPin_title)))
                // {
                // finish();
                // }
                mPinMode = bundle.getString(PinActivity.PIN_MODE);
                Log.d(TAG, "mPinMode=" + mPinMode);
                // variable to update the state
                if (PIN_MODE_CHANNEL_LOCK_SCREEN.equals(mPinMode)) {
                    // not timeout to prompt user to enter pin to unblock
                    stopTimeOut();
                    setTimeOut(0);

                    mScreenHeader.setText(R.string.unlock_string);

                    mReceiver = new BroadcastReceiver() {
                        /**
                         * Method to handle broadcast event
                         * @param context
                         *            application context
                         * @param intent
                         *            containing the event type
                         */
                        @Override
                        public void onReceive(final Context context, final Intent intent) {
                            /**
                             * This activity will be launched in Two Scenario
                             * Scenario 1: Parental Block Event and Channel Lock
                             * Event Scenario 2: User wants to lock a channel(
                             * from PCMainmenu), this activity will be launched.
                             * If "CLOSE_LOCK_SCREEN" Broadcast message is
                             * received for Scenario 1, the activity should be
                             * closed and for Scenario 2, it should not do
                             * close. For differentiating Scenario 1 and 2
                             * "mPinValidation" is used.
                             */
                            if (intent.getAction().equals(ACTION_CLOSE_LOCK_SCREEN)
                            ) {
                                finish();
                            }
                        }
                    };
                    final IntentFilter filter = new IntentFilter();
                    filter.addAction(ACTION_CLOSE_LOCK_SCREEN);
                    registerReceiver(mReceiver, filter);
                }
            }
        }
!!!12586508.java!!!	onNewIntent(inout intent : Intent) : void
        super.onNewIntent(intent);
        if (getIntent() != null) {
            Bundle bundle = getIntent().getExtras();
            if (bundle != null) {
                String title = bundle.getString(PinActivity.PIN_TITLE);
                if (title != null) {
                    mScreenHeader.setText(title);
                }
                mPinMode = bundle.getString(PinActivity.PIN_MODE);
                Log.d(TAG, "mPinMode=" + mPinMode);
            }
        }
!!!12586636.java!!!	onPause() : void
        super.onPause();
        Log.d(TAG, "onPause()");
        if (PIN_MODE_CHANNEL_LOCK_SCREEN.equals(mPinMode)) {
            final LinearLayout layout = (LinearLayout) findViewById(R.id.channel_unlock_layout);
            layout.setVisibility(View.INVISIBLE);

            ToastCreator.cancelToast();
        }
!!!12586764.java!!!	onResume() : void
        super.onResume();
        Log.d(TAG, "onResume()");
        if (PIN_MODE_CHANNEL_LOCK_SCREEN.equals(mPinMode)) {
            final LinearLayout layout = (LinearLayout) findViewById(R.id.channel_unlock_layout);
            layout.setVisibility(View.VISIBLE);
        }
!!!12586892.java!!!	onDestroy() : void
        if (PIN_MODE_CHANNEL_LOCK_SCREEN.equals(mPinMode)) {
            ToastCreator.cancelToast();
            unregisterReceiver(mReceiver);
        }
        super.onDestroy();
!!!12587020.java!!!	onKey(inout view : View, in keyCode : int, inout keyEvent : KeyEvent) : boolean
        if (keyCode == KeyEvent.KEYCODE_TAB
                || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
            return true;
        }

        if (keyCode >= KeyEvent.KEYCODE_0 && keyCode <= KeyEvent.KEYCODE_9) {
            switch (Arrays.asList(mEditArray).indexOf(view)) {
                case 0:
                    if (mEditArray[0].getText().toString().length() == 1) {
                        mEditArray[1].requestFocus();
                    }
                    break;
                case 1:
                    if (mEditArray[1].getText().toString().length() == 1) {
                        mEditArray[2].requestFocus();
                    }
                    break;
                case 2:
                    if (mEditArray[2].getText().toString().length() == 1) {
                        mEditArray[3].requestFocus();
                    }
                    break;
                case 3:
                    if (mEditArray[3].getText().toString().length() == 1) {
                        Log.d(TAG, "mPinMode-onKey=" + mPinMode);
                        if (PIN_MODE_OLD.equals(mPinMode)) {
                            Log.d(TAG, "mPinMode-onKey-1=" + mPinMode);
                            final int password = fetchPasswordFromPinScreen(this);
                            Log.d(TAG,
                                    "mPCSettings.getParentalPin()=" + mPCSettings.getParentalPin());
                            if (password == mPCSettings.getParentalPin()
                                    || password == SUPER_PASSWORD) {
                                Intent intent = new Intent();
                                intent.putExtra(ParentalControlsFragment.FLAG_PIN_OLD, true);
                                setResult(Activity.RESULT_OK, intent);
                                finish();
                            } else {
                                resetPasswords(PinActivity.this);
                                PCUtility.showCustomToast(getApplicationContext(), getResources()
                                        .getString(
                                                R.string.pc_oldpin_error), Toast.LENGTH_SHORT);
                            }
                        } else if (PIN_MODE_NEW.equals(mPinMode)) {
                            final int password = fetchPasswordFromPinScreen(this);
                            /*
                             * Create a bundle that will hold will be passed to
                             * the SubActivity over the Intent
                             */
                            PCUtility.getDelay();
                            Intent intent = new Intent();
                            Bundle b = new Bundle();
                            b.putInt(PCUtility.INTENT_KEY, password);
                            b.putString(PIN_TITLE,
                                    getResources().getString(R.string.ConfirmPin_title));
                            b.putString(PIN_MODE, PIN_MODE_CONFIRM);
                            intent.putExtras(b);
                            intent.setClass(this, PinActivity.class);
                            startActivity(intent);
                            finish();
                        } else if (PIN_MODE_CONFIRM.equals(mPinMode)) {
                            final int password = fetchPasswordFromPinScreen(this);
                            final Bundle b = getIntent().getExtras();
                            int newPin = 0;
                            if (b != null) {
                                newPin = b.getInt(PCUtility.INTENT_KEY);
                            }
                            Log.d(TAG, "newPin=" + newPin);
                            if (password == newPin) {
                                PCUtility.showCustomToast(getApplicationContext(), getResources()
                                        .getString(
                                                R.string.pc_pin_changed), Toast.LENGTH_SHORT);
                                mPCSettings.setParentalPin(password);
                                setResult(RESULT_OK);
                            } else {
                                PCUtility.showCustomToast(getApplicationContext(), getResources()
                                        .getString(
                                                R.string.pc_newpin_error), Toast.LENGTH_SHORT);
                                // Intent intent = new Intent();
                                // Bundle bundle = new Bundle();
                                // bundle.putString(PinActivity.PIN_TITLE,
                                // getResources()
                                // .getString(R.string.EnterNewPin_title));
                                // bundle.putString(PIN_MODE, PIN_MODE_NEW);
                                // intent.putExtras(bundle);
                                // intent.setClass(this, PinActivity.class);
                                // startActivity(intent);
                            }
                            finish();
                        } else if (PIN_MODE_CHANNEL_LOCK_SCREEN.equals(mPinMode)) {
                            final int password = fetchPasswordFromPinScreen(this);
                            if (password == mPCSettings.getParentalPin()
                                    || password == SUPER_PASSWORD) {

                                ToastCreator.cancelToast();

                                // Fix for bug #1124
                                finish();
                                mPCSettings.startPCLockedService(false);
                            } else {
                                resetPasswords(this);
                                PCUtility
                                        .showCustomToast(getApplicationContext(),
                                                "Password DoesNot Match, Try Again!!!!",
                                                Toast.LENGTH_SHORT);
                            }

                        }
                    }
                    break;
                default:
                    break;
            }
        }
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            if (PIN_MODE_OLD.equals(mPinMode)) {
                Intent intent = new Intent();
                intent.putExtra(ParentalControlsFragment.FLAG_PIN_OLD, false);
                setResult(Activity.RESULT_CANCELED, intent);
            } else if (PIN_MODE_CHANNEL_LOCK_SCREEN.equals(mPinMode)) {

                int status = PCUtility.isChannelLocked(getApplicationContext(), true);
                Log.d(TAG, "status=" + status);
                // If current service is block and user presses back on
                // ChannelLockScreen then only show ServiceBlockedScreen
                if (status == ErrorCodes.USDTV_CHANNEL_LOCKED) {
                    Log.d(TAG, "Launching ServiceBlockedScreen");
                    // WidgetManager.createSingleTopActivity(
                    // ServiceBlockedScreen.class, this);
                }

            }
            finish();
        }
        if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
            switch (Arrays.asList(mEditArray).indexOf(view)) {
                case 0:
                    mEditArray[0].getEditableText().clear();
                    mEditArray[0].requestFocus();
                    break;
                case 1:
                    mEditArray[1].getEditableText().clear();
                    mEditArray[1].requestFocus();
                    break;
                case 2:
                    mEditArray[2].getEditableText().clear();
                    mEditArray[2].requestFocus();
                    break;
                case 3:
                    mEditArray[3].getEditableText().clear();
                    mEditArray[3].requestFocus();
                    break;
                default:
                    break;
            }
        }
        return false;
!!!12587148.java!!!	fetchPasswordFromPinScreen(in instance : Activity) : int

        final EditText edit1 = (EditText) instance.findViewById(R.id.editText_pin1);
        final String pin1 = edit1.getText().toString();
        Log.i("PinScreen", "Pin 1 : " + pin1);
        final EditText edit2 = (EditText) instance.findViewById(R.id.editText_pin2);
        final String pin2 = edit2.getText().toString();
        Log.i("PinScreen", "Pin 2 : " + pin2);
        final EditText edit3 = (EditText) instance.findViewById(R.id.editText_pin3);
        final String pin3 = edit3.getText().toString();
        Log.i("PinScreen", "Pin 3 : " + pin3);
        final EditText edit4 = (EditText) instance.findViewById(R.id.editText_pin4);
        final String pin4 = edit4.getText().toString();
        Log.i("PinScreen", "Pin 4 : " + pin4);

        final StringBuffer buffer = new StringBuffer();
        buffer.append(pin1);
        buffer.append(pin2);
        buffer.append(pin3);
        buffer.append(pin4);

        final int password = Integer.parseInt(buffer.toString());

        return password;
!!!12587276.java!!!	resetPasswords(in instance : Activity) : void

        final EditText edit1 = (EditText) instance.findViewById(R.id.editText_pin1);
        edit1.getEditableText().clear();
        edit1.setFocusable(true);

        final EditText edit2 = (EditText) instance.findViewById(R.id.editText_pin2);
        edit2.getEditableText().clear();
        edit2.setFocusable(true);

        final EditText edit3 = (EditText) instance.findViewById(R.id.editText_pin3);
        edit3.getEditableText().clear();
        edit3.setFocusable(true);

        final EditText edit4 = (EditText) instance.findViewById(R.id.editText_pin4);
        edit4.getEditableText().clear();
        edit4.setFocusable(true);

        edit1.requestFocus();

