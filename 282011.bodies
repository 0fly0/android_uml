class AbstractPreferences
!!!1733915.java!!!	AbstractPreferences(inout parent : AbstractPreferences, inout name : String)
        if ((parent == null ^ name.length() == 0) || name.indexOf("/") >= 0) {
            throw new IllegalArgumentException();
        }
        root = (parent == null) ? this : parent.root;
        nodeChangeListeners = new LinkedList<EventListener>();
        preferenceChangeListeners = new LinkedList<EventListener>();
        isRemoved = false;
        cachedNode = new HashMap<String, AbstractPreferences>();
        nodeName = name;
        parentPref = parent;
        lock = new Object();
        userNode = root.userNode;
!!!1734043.java!!!	cachedChildren() : AbstractPreferences
        return cachedNode.values().toArray(new AbstractPreferences[cachedNode.size()]);
!!!1734171.java!!!	getChild(inout name : String) : AbstractPreferences
        synchronized (lock) {
            checkState();
            AbstractPreferences result = null;
            String[] childrenNames = childrenNames();
            for (String childrenName : childrenNames) {
                if (childrenName.equals(name)) {
                    result = childSpi(name);
                    break;
                }
            }
            return result;
        }

!!!1734299.java!!!	isRemoved() : boolean
        synchronized (lock) {
            return isRemoved;
        }
!!!1735579.java!!!	absolutePath() : String
        if (parentPref == null) {
            return "/";
        } else if (parentPref == root) {
            return "/" + nodeName;
        }
        return parentPref.absolutePath() + "/" + nodeName;
!!!1735707.java!!!	childrenNames() : String
        synchronized (lock) {
            checkState();
            TreeSet<String> result = new TreeSet<String>(cachedNode.keySet());
            String[] names = childrenNamesSpi();
            for (int i = 0; i < names.length; i++) {
                result.add(names[i]);
            }
            return result.toArray(new String[result.size()]);
        }
!!!1735835.java!!!	clear() : void
        synchronized (lock) {
            for (String key : keys()) {
                remove(key);
            }
        }
!!!1735963.java!!!	exportNode(inout ostream : OutputStream) : void
        if (ostream == null) {
            throw new NullPointerException("ostream == null");
        }
        checkState();
        XMLParser.exportPrefs(this, ostream, false);
!!!1736091.java!!!	exportSubtree(inout ostream : OutputStream) : void
        if (ostream == null) {
            throw new NullPointerException("ostream == null");
        }
        checkState();
        XMLParser.exportPrefs(this, ostream, true);
!!!1736219.java!!!	flush() : void
        synchronized (lock) {
            flushSpi();
        }
        AbstractPreferences[] cc = cachedChildren();
        int i;
        for (i = 0; i < cc.length; i++) {
            cc[i].flush();
        }
!!!1736347.java!!!	get(inout key : String, inout deflt : String) : String
        if (key == null) {
            throw new NullPointerException("key == null");
        }
        String result = null;
        synchronized (lock) {
            checkState();
            try {
                result = getSpi(key);
            } catch (Exception e) {
                // ignored
            }
        }
        return (result == null ? deflt : result);
!!!1736475.java!!!	getBoolean(inout key : String, inout deflt : boolean) : boolean
        String result = get(key, null);
        if (result == null) {
            return deflt;
        }
        if ("true".equalsIgnoreCase(result)) {
            return true;
        } else if ("false".equalsIgnoreCase(result)) {
            return false;
        } else {
            return deflt;
        }
!!!1736603.java!!!	getByteArray(inout key : String, inout deflt : byte) : byte
        String svalue = get(key, null);
        if (svalue == null) {
            return deflt;
        }
        if (svalue.length() == 0) {
            return EmptyArray.BYTE;
        }
        try {
            byte[] bavalue = svalue.getBytes(Charsets.US_ASCII);
            if (bavalue.length % 4 != 0) {
                return deflt;
            }
            return Base64.decode(bavalue);
        } catch (Exception e) {
            return deflt;
        }
!!!1736731.java!!!	getDouble(inout key : String, in deflt : double) : double
        String result = get(key, null);
        if (result == null) {
            return deflt;
        }
        try {
            return Double.parseDouble(result);
        } catch (NumberFormatException e) {
            return deflt;
        }
!!!1736859.java!!!	getFloat(inout key : String, in deflt : float) : float
        String result = get(key, null);
        if (result == null) {
            return deflt;
        }
        try {
            return Float.parseFloat(result);
        } catch (NumberFormatException e) {
            return deflt;
        }
!!!1736987.java!!!	getInt(inout key : String, in deflt : int) : int
        String result = get(key, null);
        if (result == null) {
            return deflt;
        }
        try {
            return Integer.parseInt(result);
        } catch (NumberFormatException e) {
            return deflt;
        }
!!!1737115.java!!!	getLong(inout key : String, in deflt : long) : long
        String result = get(key, null);
        if (result == null) {
            return deflt;
        }
        try {
            return Long.parseLong(result);
        } catch (NumberFormatException e) {
            return deflt;
        }
!!!1737243.java!!!	isUserNode() : boolean
        return root == Preferences.userRoot();
!!!1737371.java!!!	keys() : String
        synchronized (lock) {
            checkState();
            return keysSpi();
        }
!!!1737499.java!!!	name() : String
        return nodeName;
!!!1737627.java!!!	node(inout name : String) : Preferences
        AbstractPreferences startNode = null;
        synchronized (lock) {
            checkState();
            validateName(name);
            if (name.isEmpty()) {
                return this;
            } else if ("/".equals(name)) {
                return root;
            }
            if (name.startsWith("/")) {
                startNode = root;
                name = name.substring(1);
            } else {
                startNode = this;
            }
        }
        try {
            return startNode.nodeImpl(name, true);
        } catch (BackingStoreException e) {
            // should not happen
            return null;
        }
!!!1737755.java!!!	validateName(inout name : String) : void
        if (name.endsWith("/") && name.length() > 1) {
            throw new IllegalArgumentException("Name cannot end with '/'");
        }
        if (name.indexOf("//") >= 0) {
            throw new IllegalArgumentException("Name cannot contain consecutive '/' characters");
        }
!!!1737883.java!!!	nodeImpl(inout path : String, inout createNew : boolean) : AbstractPreferences
        String[] names = path.split("/");
        AbstractPreferences currentNode = this;
        AbstractPreferences temp;
        for (String name : names) {
            synchronized (currentNode.lock) {
                temp = currentNode.cachedNode.get(name);
                if (temp == null) {
                    temp = getNodeFromBackend(createNew, currentNode, name);
                }
            }
            currentNode = temp;
            if (currentNode == null) {
                break;
            }
        }
        return currentNode;
!!!1738011.java!!!	getNodeFromBackend(inout createNew : boolean, inout currentNode : AbstractPreferences, inout name : String) : AbstractPreferences
        if (name.length() > MAX_NAME_LENGTH) {
            throw new IllegalArgumentException("Name '" + name + "' too long");
        }
        AbstractPreferences temp;
        if (createNew) {
            temp = currentNode.childSpi(name);
            currentNode.cachedNode.put(name, temp);
            if (temp.newNode && currentNode.nodeChangeListeners.size() > 0) {
                currentNode.notifyChildAdded(temp);
            }
        } else {
            temp = currentNode.getChild(name);
        }
        return temp;
!!!1738139.java!!!	nodeExists(inout name : String) : boolean
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        AbstractPreferences startNode = null;
        synchronized (lock) {
            if (isRemoved()) {
                if (name.isEmpty()) {
                    return false;
                }
                throw new IllegalStateException("This node has been removed");
            }
            validateName(name);
            if (name.isEmpty() || "/".equals(name)) {
                return true;
            }
            if (name.startsWith("/")) {
                startNode = root;
                name = name.substring(1);
            } else {
                startNode = this;
            }
        }
        try {
            Preferences result = startNode.nodeImpl(name, false);
            return (result != null);
        } catch(IllegalArgumentException e) {
            return false;
        }
!!!1738267.java!!!	parent() : Preferences
        checkState();
        return parentPref;
!!!1738395.java!!!	checkState() : void
        if (isRemoved()) {
            throw new IllegalStateException("This node has been removed");
        }
!!!1738523.java!!!	put(inout key : String, inout value : String) : void
        if (key == null) {
            throw new NullPointerException("key == null");
        } else if (value == null) {
            throw new NullPointerException("value == null");
        }
        if (key.length() > MAX_KEY_LENGTH || value.length() > MAX_VALUE_LENGTH) {
            throw new IllegalArgumentException();
        }
        synchronized (lock) {
            checkState();
            putSpi(key, value);
        }
        notifyPreferenceChange(key, value);
!!!1738651.java!!!	putBoolean(inout key : String, inout value : boolean) : void
        put(key, String.valueOf(value));
!!!1738779.java!!!	putByteArray(inout key : String, inout value : byte) : void
        put(key, Base64.encode(value));
!!!1738907.java!!!	putDouble(inout key : String, in value : double) : void
        put(key, Double.toString(value));
!!!1739035.java!!!	putFloat(inout key : String, in value : float) : void
        put(key, Float.toString(value));
!!!1739163.java!!!	putInt(inout key : String, in value : int) : void
        put(key, Integer.toString(value));
!!!1739291.java!!!	putLong(inout key : String, in value : long) : void
        put(key, Long.toString(value));
!!!1739419.java!!!	remove(inout key : String) : void
        synchronized (lock) {
            checkState();
            removeSpi(key);
        }
        notifyPreferenceChange(key, null);
!!!1739547.java!!!	removeNode() : void
        if (root == this) {
            throw new UnsupportedOperationException("Cannot remove root node");
        }
        synchronized (parentPref.lock) {
            removeNodeImpl();
        }
!!!1739675.java!!!	removeNodeImpl() : void
        synchronized (lock) {
            checkState();
            String[] childrenNames = childrenNamesSpi();
            for (String childrenName : childrenNames) {
                if (cachedNode.get(childrenName) == null) {
                    AbstractPreferences child = childSpi(childrenName);
                    cachedNode.put(childrenName, child);
                }
            }

            final Collection<AbstractPreferences> values = cachedNode.values();
            final AbstractPreferences[] children = values.toArray(new AbstractPreferences[values.size()]);
            for (AbstractPreferences child : children) {
                child.removeNodeImpl();
            }
            removeNodeSpi();
            isRemoved = true;
            parentPref.cachedNode.remove(nodeName);
        }
        if (parentPref.nodeChangeListeners.size() > 0) {
            parentPref.notifyChildRemoved(this);
        }
!!!1739803.java!!!	addNodeChangeListener(inout ncl : NodeChangeListener) : void
        if (ncl == null) {
            throw new NullPointerException("ncl == null");
        }
        checkState();
        synchronized (nodeChangeListeners) {
            nodeChangeListeners.add(ncl);
        }
!!!1739931.java!!!	addPreferenceChangeListener(inout pcl : PreferenceChangeListener) : void
        if (pcl == null) {
            throw new NullPointerException("pcl == null");
        }
        checkState();
        synchronized (preferenceChangeListeners) {
            preferenceChangeListeners.add(pcl);
        }
!!!1740059.java!!!	removeNodeChangeListener(inout ncl : NodeChangeListener) : void
        checkState();
        synchronized (nodeChangeListeners) {
            int pos;
            if ((pos = nodeChangeListeners.indexOf(ncl)) == -1) {
                throw new IllegalArgumentException();
            }
            nodeChangeListeners.remove(pos);
        }
!!!1740187.java!!!	removePreferenceChangeListener(inout pcl : PreferenceChangeListener) : void
        checkState();
        synchronized (preferenceChangeListeners) {
            int pos;
            if ((pos = preferenceChangeListeners.indexOf(pcl)) == -1) {
                throw new IllegalArgumentException();
            }
            preferenceChangeListeners.remove(pos);
        }
!!!1740315.java!!!	sync() : void
        synchronized (lock) {
            checkState();
            syncSpi();
        }
        for (AbstractPreferences child : cachedChildren()) {
            child.sync();
        }
!!!1740443.java!!!	toString() : String
        return (isUserNode() ? "User" : "System") + " Preference Node: " + absolutePath();
!!!1740571.java!!!	notifyChildAdded(inout child : Preferences) : void
        NodeChangeEvent nce = new NodeAddEvent(this, child);
        synchronized (events) {
            events.add(nce);
            events.notifyAll();
        }
!!!1740699.java!!!	notifyChildRemoved(inout child : Preferences) : void
        NodeChangeEvent nce = new NodeRemoveEvent(this, child);
        synchronized (events) {
            events.add(nce);
            events.notifyAll();
        }
!!!1740827.java!!!	notifyPreferenceChange(inout key : String, inout newValue : String) : void
        PreferenceChangeEvent pce = new PreferenceChangeEvent(this, key, newValue);
        synchronized (events) {
            events.add(pce);
            events.notifyAll();
        }
