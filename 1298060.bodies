class BluetoothController
!!!7694732.java!!!	BluetoothController(inout context : Context)
        mContext = context;

        IntentFilter filter = new IntentFilter();
        filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
        filter.addAction(BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED);
        filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
        context.registerReceiver(this, filter);

        final BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        if (adapter != null) {
            handleAdapterStateChange(adapter.getState());
            handleConnectionStateChange(adapter.getConnectionState());
        }
        refreshViews();
        updateBondedBluetoothDevices();
!!!7694860.java!!!	addIconView(inout v : ImageView) : void
        mIconViews.add(v);
!!!7694988.java!!!	addStateChangedCallback(inout cb : BluetoothStateChangeCallback) : void
        mChangeCallbacks.add(cb);
!!!7695116.java!!!	getBondedBluetoothDevices() : BluetoothDevice
        return mBondedDevices;
!!!7695244.java!!!	onReceive(inout context : Context, inout intent : Intent) : void
        final String action = intent.getAction();

        if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
            handleAdapterStateChange(
                    intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR));
        } else if (action.equals(BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED)) {
            handleConnectionStateChange(
                    intent.getIntExtra(BluetoothAdapter.EXTRA_CONNECTION_STATE,
                        BluetoothAdapter.STATE_DISCONNECTED));
        } else if (action.equals(BluetoothDevice.ACTION_BOND_STATE_CHANGED)) {
            // Fall through and update bonded devices and refresh view
        }
        refreshViews();
        updateBondedBluetoothDevices();
!!!7695372.java!!!	updateBondedBluetoothDevices() : void
        mBondedDevices.clear();

        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        if (adapter != null) {
            Set<BluetoothDevice> devices = adapter.getBondedDevices();
            if (devices != null) {
                for (BluetoothDevice device : devices) {
                    if (device.getBondState() != BluetoothDevice.BOND_NONE) {
                        mBondedDevices.add(device);
                    }
                }
            }
        }
!!!7695500.java!!!	handleAdapterStateChange(in adapterState : int) : void
        mEnabled = (adapterState == BluetoothAdapter.STATE_ON);
!!!7695628.java!!!	handleConnectionStateChange(in connectionState : int) : void
        final boolean connected = (connectionState == BluetoothAdapter.STATE_CONNECTED);
        if (connected) {
            mIconId = R.drawable.stat_sys_data_bluetooth_connected;
            mContentDescriptionId = R.string.accessibility_bluetooth_connected;
        } else {
            mIconId = R.drawable.stat_sys_data_bluetooth;
            mContentDescriptionId = R.string.accessibility_bluetooth_disconnected;
        }
!!!7695756.java!!!	refreshViews() : void
        int N = mIconViews.size();
        for (int i=0; i<N; i++) {
            ImageView v = mIconViews.get(i);
            v.setImageResource(mIconId);
            v.setVisibility(mEnabled ? View.VISIBLE : View.GONE);
            v.setContentDescription((mContentDescriptionId == 0)
                    ? null
                    : mContext.getString(mContentDescriptionId));
        }
        for (BluetoothStateChangeCallback cb : mChangeCallbacks) {
            cb.onBluetoothStateChange(mEnabled);
        }
