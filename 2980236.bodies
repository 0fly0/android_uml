class ResolutionPreference
!!!12128396.java!!!	ResolutionPreference(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        if (DEBUG) Log.d(TAG, "construct");
        registerStateListener();
        mResetResolutionDlg = ResetResolutionDialogFragment.newInstance(
                R.string.reset_resolution_title,
                DisplayModeSettings.isFixedUiRes() ?
                R.string.reset_resolution_message_fixed_ui : R.string.reset_resolution_message);
        mResetResolutionDlg.setHandler(new MyHandler());
!!!12128524.java!!!	onActivityDestroy() : void
        if (DEBUG) Log.d(TAG, "onActivityDestroy");
        unRegisterStateListener();
!!!12128652.java!!!	updateItems() : void
        if (DEBUG) Log.d(TAG, "updateItems");
        List<String> deviceSupportedResolutions =
                DisplayModeManager.getInstance().getDeviceSupportedResolution();
        mItems.clear();
        for (int i = 0; i < deviceSupportedResolutions.size(); i++) {
            DisplayModeItem resolutionItem = new DisplayModeItem(
                    deviceSupportedResolutions.get(i));
            resolutionItem.setSupported(DisplayModeManager.getInstance().isResolutionSupported(
                    deviceSupportedResolutions.get(i)));
            if (DEBUG) Log.d(TAG, "checking resolution item: " + resolutionItem.toString());
            mItems.add(resolutionItem);
        }
        mAdapter.notifyDataSetChanged();
!!!12128780.java!!!	handleItemSelected(in value : String) : void
        if (DEBUG) Log.d(TAG, "handleItemSelected, " + value);
        // When user change resolution:
        // 1. if target same as ui resolution
        //    a) save preferred value
        //    b) if target differ from current, set current to target
        // 2. else, we need to pop up 'reboot|keep|cancel' dialog to alert user (may scale ui)
        //    a) keep: save preferred value, and apply target if differ from current
        //    b) reboot: save preferred value, reboot device
        //    c) cancel: choose last selected
        if (DisplayModeSettings.matchUiResolution(value)) {
            if (DEBUG) Log.d(TAG, "handleItemSelected, same as ui resolution");
            applyTargetValue(value);
            getDialog().dismiss();
        } else {
            if (DEBUG) Log.d(TAG, "differ from ui resolution, target res: " + value);
            mTargetResolution = value;
            int bestScanLine = -1;
            String bestRes = DisplayModeManager.getInstance().getBestResolution();
            if (null != bestRes) {
                bestScanLine = DisplayModeManager.getInstance().parseScanLines(bestRes);
            } else {
                Log.e(TAG, "handleItemSelected, fail to get best resolution");
                return;
            }
            // Show reset dialog for no fixed UI resolution
            // Or target resolution scanLine is not the best (for fixed UI case)
            // Because picture may be scaled in that case
            if (!DisplayModeSettings.isFixedUiRes() ||
                    !mTargetResolution.startsWith(String.valueOf(bestScanLine))) {
                showResetDialog();
            }
        }
!!!12128908.java!!!	setValue(in value : String) : void
        if (DEBUG) Log.d(TAG, "setValue, " + value);
        DisplayModeManager.getInstance().setPreferredDisplayMode(
                DisplayModeType.RESOLUTION, value);
!!!12129036.java!!!	getValue() : String
        String res = DisplayModeManager.getInstance().getPreferredDisplayMode(
                DisplayModeType.RESOLUTION);
        if (DEBUG) Log.d(TAG, "getValue, return " + res);
        return res;
!!!12129164.java!!!	applyTargetValue(in target : String) : void
        // Save target as preferred and apply it if differ from current
        setValue(target);
        String current = DisplayModeManager.getInstance().getDisplayMode(
            DisplayModeType.RESOLUTION);
        if (!current.equals(target)) {
            DisplayModeManager.getInstance().setDisplayMode(
                DisplayModeType.RESOLUTION, target);
        } else {
            if (DEBUG) Log.d(TAG, "target resolution same as current");
        }
!!!12129292.java!!!	showResetDialog() : void
        if (DEBUG) Log.d(TAG, "showResetDialog");
        mResetResolutionDlg.show(
                ((Activity)mContext).getFragmentManager(), RESET_RESOLUTION_FRAGMENT_TAG);
!!!12129676.java!!!	handleKeep() : void
        if (DEBUG) Log.d(TAG, "handleKeep, target: " + mTargetResolution);
        setValue(mTargetResolution);
        applyTargetValue(mTargetResolution);
!!!12129804.java!!!	handleReboot() : void
        if (DEBUG) Log.d(TAG, "handleReboot, target: " + mTargetResolution);
        setValue(mTargetResolution);
        Utils.reboot(mContext);
!!!12129932.java!!!	handleCancel() : void
        if (DEBUG) Log.d(TAG, "handleCancel");
        // Next dialog show will auto-apply previous value since target was not stored
!!!12130444.java!!!	registerStateListener() : void
        mStateListener = new StateListener() {

            @Override
            public void onPreferredDisplayModeChanged(DisplayModeType type) {
                if (DEBUG) Log.d(TAG, "onPreferredDisplayModeChanged, type: " + type);
                if (type == DisplayModeType.RESOLUTION) return;
                // Update resolution support state if preferred frame rate changed
                for (DisplayModeItem item : mItems) {
                    item.setSupported(
                            DisplayModeManager.getInstance().isResolutionSupported(item.getDesc()));
                }
                mAdapter.notifyDataSetChanged();
            }

            @Override
            public void onDisplayModeChanged() {
                // No handler
            }

            @Override
            public void onTvCapalityChanged() {
                // No handler
            }
        };
        DisplayModeManager.getInstance().registerStateListener(mStateListener);
!!!12130572.java!!!	unRegisterStateListener() : void
        DisplayModeManager.getInstance().unRegisterStateListener(mStateListener);
