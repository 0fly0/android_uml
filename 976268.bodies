class LocationManager
!!!6705036.java!!!	LocationManager(inout context : Context, inout service : ILocationManager)
        mService = service;
        mContext = context;
!!!6705164.java!!!	createProvider(in name : String, inout properties : ProviderProperties) : LocationProvider
        return new LocationProvider(name, properties);
!!!6705292.java!!!	getAllProviders() : List<String>
        try {
            return mService.getAllProviders();
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
        return null;
!!!6705420.java!!!	getProviders(inout enabledOnly : boolean) : List<String>
        try {
            return mService.getProviders(null, enabledOnly);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
        return null;
!!!6705548.java!!!	getProvider(in name : String) : LocationProvider
        checkProvider(name);
        try {
            ProviderProperties properties = mService.getProviderProperties(name);
            if (properties == null) {
                return null;
            }
            return createProvider(name, properties);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
        return null;
!!!6705676.java!!!	getProviders(inout criteria : Criteria, inout enabledOnly : boolean) : List<String>
        checkCriteria(criteria);
        try {
            return mService.getProviders(criteria, enabledOnly);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
        return null;
!!!6705804.java!!!	getBestProvider(inout criteria : Criteria, inout enabledOnly : boolean) : String
        checkCriteria(criteria);
        try {
            return mService.getBestProvider(criteria, enabledOnly);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
        return null;
!!!6705932.java!!!	requestLocationUpdates(in provider : String, in minTime : long, in minDistance : float, inout listener : LocationListener) : void
        checkProvider(provider);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, minTime, minDistance, false);
        requestLocationUpdates(request, listener, null, null);
!!!6706060.java!!!	requestLocationUpdates(in provider : String, in minTime : long, in minDistance : float, inout listener : LocationListener, inout looper : Looper) : void
        checkProvider(provider);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, minTime, minDistance, false);
        requestLocationUpdates(request, listener, looper, null);
!!!6706188.java!!!	requestLocationUpdates(in minTime : long, in minDistance : float, inout criteria : Criteria, inout listener : LocationListener, inout looper : Looper) : void
        checkCriteria(criteria);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedCriteria(
                criteria, minTime, minDistance, false);
        requestLocationUpdates(request, listener, looper, null);
!!!6706316.java!!!	requestLocationUpdates(in provider : String, in minTime : long, in minDistance : float, inout intent : PendingIntent) : void
        checkProvider(provider);
        checkPendingIntent(intent);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, minTime, minDistance, false);
        requestLocationUpdates(request, null, null, intent);
!!!6706444.java!!!	requestLocationUpdates(in minTime : long, in minDistance : float, inout criteria : Criteria, inout intent : PendingIntent) : void
        checkCriteria(criteria);
        checkPendingIntent(intent);

        LocationRequest request = LocationRequest.createFromDeprecatedCriteria(
                criteria, minTime, minDistance, false);
        requestLocationUpdates(request, null, null, intent);
!!!6706572.java!!!	requestSingleUpdate(in provider : String, inout listener : LocationListener, inout looper : Looper) : void
        checkProvider(provider);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, 0, 0, true);
        requestLocationUpdates(request, listener, looper, null);
!!!6706700.java!!!	requestSingleUpdate(inout criteria : Criteria, inout listener : LocationListener, inout looper : Looper) : void
        checkCriteria(criteria);
        checkListener(listener);

        LocationRequest request = LocationRequest.createFromDeprecatedCriteria(
                criteria, 0, 0, true);
        requestLocationUpdates(request, listener, looper, null);
!!!6706828.java!!!	requestSingleUpdate(in provider : String, inout intent : PendingIntent) : void
        checkProvider(provider);
        checkPendingIntent(intent);

        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, 0, 0, true);
        requestLocationUpdates(request, null, null, intent);
!!!6706956.java!!!	requestSingleUpdate(inout criteria : Criteria, inout intent : PendingIntent) : void
        checkCriteria(criteria);
        checkPendingIntent(intent);

        LocationRequest request = LocationRequest.createFromDeprecatedCriteria(
                criteria, 0, 0, true);
        requestLocationUpdates(request, null, null, intent);
!!!6707084.java!!!	requestLocationUpdates(inout request : LocationRequest, inout listener : LocationListener, inout looper : Looper) : void
        checkListener(listener);
        requestLocationUpdates(request, listener, looper, null);
!!!6707212.java!!!	requestLocationUpdates(inout request : LocationRequest, inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        requestLocationUpdates(request, null, null, intent);
!!!6707340.java!!!	wrapListener(inout listener : LocationListener, inout looper : Looper) : ListenerTransport
        if (listener == null) return null;
        synchronized (mListeners) {
            ListenerTransport transport = mListeners.get(listener);
            if (transport == null) {
                transport = new ListenerTransport(listener, looper);
            }
            mListeners.put(listener, transport);
            return transport;
        }
!!!6707468.java!!!	requestLocationUpdates(inout request : LocationRequest, inout listener : LocationListener, inout looper : Looper, inout intent : PendingIntent) : void

        String packageName = mContext.getPackageName();

        // wrap the listener class
        ListenerTransport transport = wrapListener(listener, looper);

        try {
            mService.requestLocationUpdates(request, transport, intent, packageName);
       } catch (RemoteException e) {
           Log.e(TAG, "RemoteException", e);
       }
!!!6707596.java!!!	removeUpdates(inout listener : LocationListener) : void
        checkListener(listener);
        String packageName = mContext.getPackageName();

        ListenerTransport transport;
        synchronized (mListeners) {
            transport = mListeners.remove(listener);
        }
        if (transport == null) return;

        try {
            mService.removeUpdates(transport, null, packageName);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6707724.java!!!	removeUpdates(inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        String packageName = mContext.getPackageName();

        try {
            mService.removeUpdates(null, intent, packageName);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6707852.java!!!	addProximityAlert(in latitude : double, in longitude : double, in radius : float, in expiration : long, inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        if (expiration < 0) expiration = Long.MAX_VALUE;

        Geofence fence = Geofence.createCircle(latitude, longitude, radius);
        LocationRequest request = new LocationRequest().setExpireIn(expiration);
        try {
            mService.requestGeofence(request, fence, intent, mContext.getPackageName());
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6707980.java!!!	addGeofence(inout request : LocationRequest, inout fence : Geofence, inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        checkGeofence(fence);

        try {
            mService.requestGeofence(request, fence, intent, mContext.getPackageName());
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6708108.java!!!	removeProximityAlert(inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        String packageName = mContext.getPackageName();

        try {
            mService.removeGeofence(null, intent, packageName);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6708236.java!!!	removeGeofence(inout fence : Geofence, inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        checkGeofence(fence);
        String packageName = mContext.getPackageName();

        try {
            mService.removeGeofence(fence, intent, packageName);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6708364.java!!!	removeAllGeofences(inout intent : PendingIntent) : void
        checkPendingIntent(intent);
        String packageName = mContext.getPackageName();

        try {
            mService.removeGeofence(null, intent, packageName);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6708492.java!!!	isProviderEnabled(in provider : String) : boolean
        checkProvider(provider);

        try {
            return mService.isProviderEnabled(provider);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
            return false;
        }
!!!6708620.java!!!	getLastLocation() : Location
        String packageName = mContext.getPackageName();

        try {
            return mService.getLastLocation(null, packageName);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
            return null;
        }
!!!6708748.java!!!	getLastKnownLocation(in provider : String) : Location
        checkProvider(provider);
        String packageName = mContext.getPackageName();
        LocationRequest request = LocationRequest.createFromDeprecatedProvider(
                provider, 0, 0, true);

        try {
            return mService.getLastLocation(request, packageName);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
            return null;
        }
!!!6708876.java!!!	addTestProvider(in name : String, inout requiresNetwork : boolean, inout requiresSatellite : boolean, inout requiresCell : boolean, inout hasMonetaryCost : boolean, inout supportsAltitude : boolean, inout supportsSpeed : boolean, inout supportsBearing : boolean, in powerRequirement : int, in accuracy : int) : void
        ProviderProperties properties = new ProviderProperties(requiresNetwork,
                requiresSatellite, requiresCell, hasMonetaryCost, supportsAltitude, supportsSpeed,
                supportsBearing, powerRequirement, accuracy);
        if (name.matches(LocationProvider.BAD_CHARS_REGEX)) {
            throw new IllegalArgumentException("provider name contains illegal character: " + name);
        }

        try {
            mService.addTestProvider(name, properties);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6709004.java!!!	removeTestProvider(in provider : String) : void
        try {
            mService.removeTestProvider(provider);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6709132.java!!!	setTestProviderLocation(in provider : String, inout loc : Location) : void
        if (!loc.isComplete()) {
            IllegalArgumentException e = new IllegalArgumentException(
                    "Incomplete location object, missing timestamp or accuracy? " + loc);
            if (mContext.getApplicationInfo().targetSdkVersion <= Build.VERSION_CODES.JELLY_BEAN) {
                // just log on old platform (for backwards compatibility)
                Log.w(TAG, e);
                loc.makeComplete();
            } else {
                // really throw it!
                throw e;
            }
        }

        try {
            mService.setTestProviderLocation(provider, loc);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6709260.java!!!	clearTestProviderLocation(in provider : String) : void
        try {
            mService.clearTestProviderLocation(provider);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6709388.java!!!	setTestProviderEnabled(in provider : String, inout enabled : boolean) : void
        try {
            mService.setTestProviderEnabled(provider, enabled);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6709516.java!!!	clearTestProviderEnabled(in provider : String) : void
        try {
            mService.clearTestProviderEnabled(provider);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6709644.java!!!	setTestProviderStatus(in provider : String, in status : int, inout extras : Bundle, in updateTime : long) : void
        try {
            mService.setTestProviderStatus(provider, status, extras, updateTime);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6709772.java!!!	clearTestProviderStatus(in provider : String) : void
        try {
            mService.clearTestProviderStatus(provider);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException", e);
        }
!!!6710924.java!!!	addGpsStatusListener(inout listener : Listener) : boolean
        boolean result;

        if (mGpsStatusListeners.get(listener) != null) {
            // listener is already registered
            return true;
        }
        try {
            GpsStatusListenerTransport transport = new GpsStatusListenerTransport(listener);
            result = mService.addGpsStatusListener(transport);
            if (result) {
                mGpsStatusListeners.put(listener, transport);
            }
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException in registerGpsStatusListener: ", e);
            result = false;
        }

        return result;
!!!6711052.java!!!	removeGpsStatusListener(inout listener : Listener) : void
        try {
            GpsStatusListenerTransport transport = mGpsStatusListeners.remove(listener);
            if (transport != null) {
                mService.removeGpsStatusListener(transport);
            }
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException in unregisterGpsStatusListener: ", e);
        }
!!!6711180.java!!!	addNmeaListener(inout listener : NmeaListener) : boolean
        boolean result;

        if (mNmeaListeners.get(listener) != null) {
            // listener is already registered
            return true;
        }
        try {
            GpsStatusListenerTransport transport = new GpsStatusListenerTransport(listener);
            result = mService.addGpsStatusListener(transport);
            if (result) {
                mNmeaListeners.put(listener, transport);
            }
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException in registerGpsStatusListener: ", e);
            result = false;
        }

        return result;
!!!6711308.java!!!	removeNmeaListener(inout listener : NmeaListener) : void
        try {
            GpsStatusListenerTransport transport = mNmeaListeners.remove(listener);
            if (transport != null) {
                mService.removeGpsStatusListener(transport);
            }
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException in unregisterGpsStatusListener: ", e);
        }
!!!6711436.java!!!	getGpsStatus(inout status : GpsStatus) : GpsStatus
        if (status == null) {
            status = new GpsStatus();
       }
       status.setStatus(mGpsStatus);
       return status;
!!!6711564.java!!!	sendExtraCommand(in provider : String, in command : String, inout extras : Bundle) : boolean
        try {
            return mService.sendExtraCommand(provider, command, extras);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException in sendExtraCommand: ", e);
            return false;
        }
!!!6711692.java!!!	sendNiResponse(in notifId : int, in userResponse : int) : boolean
    	try {
            return mService.sendNiResponse(notifId, userResponse);
        } catch (RemoteException e) {
            Log.e(TAG, "RemoteException in sendNiResponse: ", e);
            return false;
        }
!!!6711820.java!!!	checkProvider(in provider : String) : void
        if (provider == null) {
            throw new IllegalArgumentException("invalid provider: " + provider);
        }
!!!6711948.java!!!	checkCriteria(inout criteria : Criteria) : void
        if (criteria == null) {
            throw new IllegalArgumentException("invalid criteria: " + criteria);
        }
!!!6712076.java!!!	checkListener(inout listener : LocationListener) : void
        if (listener == null) {
            throw new IllegalArgumentException("invalid listener: " + listener);
        }
!!!6712204.java!!!	checkPendingIntent(inout intent : PendingIntent) : void
        if (intent == null) {
            throw new IllegalArgumentException("invalid pending intent: " + intent);
        }
        if (!intent.isTargetedToPackage()) {
            IllegalArgumentException e = new IllegalArgumentException(
                    "pending intent msut be targeted to package");
            if (mContext.getApplicationInfo().targetSdkVersion > Build.VERSION_CODES.JELLY_BEAN) {
                throw e;
            } else {
                Log.w(TAG, e);
            }
        }
!!!6712332.java!!!	checkGeofence(inout fence : Geofence) : void
        if (fence == null) {
            throw new IllegalArgumentException("invalid geofence: " + fence);
        }
