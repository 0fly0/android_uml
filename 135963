format 74
"sql" // framework::base::opengl::java::javax::sql
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/javax/sql/"
  java_package "javax.sql"
  classview 134555 "sql"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 299675 "CommonDataSource"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface that defines the methods which are common between DataSource,
XADataSource and ConnectionPoolDataSource.

@since 1.6"
      operation 1868315 "getLoginTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "While attempting to connect to a database, this method get the maximum
time in seconds that this data source can wait.

@return An integer value to indicate the maximum time.
@throws SQLException
            An exception threw when a data base access error occurs."
      end

      operation 1868443 "getLogWriter"
	public return_type class_ref 135067 // PrintWriter
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a log writer which is a character output stream to which all
logging and tracing messages for this data source will be printed.

@return The PrintWriter object for this DataSource.
@throws SQLException
            An exception threw when a data base access error occurs."
      end

      operation 1868571 "setLoginTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "While attempting to connect to a database, this method set the maximum
time in seconds that this data source can wait.

@param seconds
           An integer value to indicate the maximum time.
@throws SQLException
            An exception threw when a data base access error occurs."
      end

      operation 1868699 "setLogWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 135067 // PrintWriter
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a log writer which is a character output stream to which all logging
and tracing messages for this data source will be printed.

@param out
           The PrintWriter object for this DataSource.
@throws SQLException"
      end
    end

    class 299803 "ConnectionEvent"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Sent when specific events happen on a {@link PooledConnection} object. These
events are a facility to report when an application closes the pooled
connection or when an error occurs in the pooled connection."
      classrelation 534299 // <generalisation>
	relation 534299 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 534299 // <generalisation>
	  b parent class_ref 130587 // EventObject
      end

      classrelation 534427 // <realization>
	relation 534427 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 534427 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 449307 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4843217645290030002L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 534555 // ex (<unidirectional association>)
	relation 534555 --->
	  a role_name "ex" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 534555 // ex (<unidirectional association>)
	  b parent class_ref 220059 // SQLException
      end

      operation 1868827 "ConnectionEvent"
	public explicit_return_type ""
	nparams 1
	  param inout name "theConnection" type class_ref 299931 // PooledConnection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a connection event initialized with the supplied {@code
PooledConnection} reporting that the application has closed the
connection.

@param theConnection
           the connection for which this event is created."
      end

      operation 1868955 "ConnectionEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "theConnection" type class_ref 299931 // PooledConnection
	  param inout name "theException" type class_ref 220059 // SQLException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ConnectionEvent} initialized with the supplied {@code
PooledConnection} and with the supplied {@code SQLException} indicating
that an error has occurred within the {@code PooledConnection}.

@param theConnection
           the connection for which this event is created.
@param theException
           information about the state of error that has occurred on the
           application side."
      end

      operation 1869083 "getSQLException"
	public return_type class_ref 220059 // SQLException
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code SQLException} which holds information about the error
which occurred in the {@code PooledConnection}.

@return a {@code SQLException} containing information about the error.
        May be {@code null} if no error has occurred."
      end
    end

    class 299931 "PooledConnection"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface which provides facilities for handling connections to a database
which are pooled.
<p>
Typically, a {@code PooledConnection} is recycled when it is no longer
required by an application, rather than being closed and discarded. The
reason for treating connections in this way is that it can be an expensive
process both to establish a connection to a database and to destroy the
connection. Reusing connections through a pool is a way of improving system
performance and reducing overhead.
<p>
It is not intended that an application uses the {@code PooledConnection}
interface directly. The {@code PooledConnection} interface is intended for
use by a component called a connection pool manager, typically part of the
infrastructure that supports use of the database by applications.
<p>
Applications obtain connections to the database by calling the
{@link DataSource#getConnection} method. Behind the scenes, the connection
pool manager will get a {@code PooledConnection} object from its connection
pool and passes back a connection object that wraps or references the {@code
PooledConnection} object. A new {@code PooledConnection} object will only be
created if the pool is empty.
<p>
When the application is finished using a {@code PooledConnection}, the
application calls the {@link Connection#close} method. The connection pool
manager is notified via a {@link ConnectionEvent} from the connection that
this has happened (the pool manager registers itself with the connection
before the connection is given to the application). The pool manager removes
the underlying {@code PooledConnection} object from the connection and
returns it to the pool for reuse - the {@code PooledConnection} is thus
recycled rather than being destroyed.
<p>
The connection to the database represented by the {@code PooledConnection} is
kept open until the {@code PooledConnection} object itself is deactivated by
the connection pool manager, which calls {@code PooledConnection.close()}.
This is typically done if there are too many inactive connections in the
pool, if the {@code PooledConnection} encounters a problem that makes it
unusable or if the whole system is being shut down."
      operation 1869979 "addConnectionEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theListener" type class_ref 300059 // ConnectionEventListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the supplied {@code ConnectionEventListener} with this {@code
PooledConnection}. Once registered, the {@code ConnectionEventListener}
will receive {@link ConnectionEvent} events when they occur in the
{@code PooledConnection}.

@param theListener
           an object which implements the {@code ConnectionEventListener}
           interface."
      end

      operation 1870107 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the connection to the database held by this {@code
PooledConnection}. This method should not be called directly by
application code - it is intended only for the connection pool manager
component.

@throws SQLException
            if there is a problem accessing the database."
      end

      operation 1870235 "getConnection"
	public return_type class_ref 221211 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a connection to the database. This method is typically called by
the connection pool manager when an application invokes the method
{@code DataSource.getConnection()} and there are no {@code
PooledConnection} objects available in the connection pool.

@return a {@code Connection} object.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 1870363 "removeConnectionEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theListener" type class_ref 300059 // ConnectionEventListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unregisters the supplied {@code ConnectionEventListener} from this {@code
PooledConnection}. Once unregistered, the {@code ConnectionEventListener}
will no longer receive events occurring in the {@code PooledConnection}.

@param theListener
           an object which implements the {@code ConnectionEventListener}
           interface. This object should have previously been registered
           with the {@code PooledConnection} using the {@code
           addConnectionEventListener} method."
      end

      operation 1870491 "addStatementEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 300443 // StatementEventListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a StatementEventListener to this PooledConnection object.

@param listener
           A StatementEventListener object which is to be added with this
           PooledConnection object
@since 1.6"
      end

      operation 1870619 "removeStatementEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 300443 // StatementEventListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a StatementEventListener from this PooledConnection object.

@param listener
           A StatementEventListener object which is to be removed form
           this PooledConnection object
@since 1.6"
      end
    end

    class 300059 "ConnectionEventListener"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface used to receive events generated by a {@link PooledConnection}.
<p>
This interface would typically be implemented by a component which manages a
connection pool (a connection pool manager). A connection triggers an event
to a {@code ConnectionEventListener} either when the application closes a
connection it has been using or when a significant error occurs while the
connection is being used.
<p>
The connection pool manager can return closed connections to the pool for
later reuse. Connections experiencing an error should be discarded."
      classrelation 534683 // <generalisation>
	relation 534683 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 534683 // <generalisation>
	  b parent class_ref 130843 // EventListener
      end

      operation 1869211 "connectionClosed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theEvent" type class_ref 299803 // ConnectionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the {@code ConnectionEventListener} that an application has
called the {@code close} method on a pooled connection.

@param theEvent
           a {@code ConnectionEvent} containing details about the source
           of the event."
      end

      operation 1869339 "connectionErrorOccurred"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theEvent" type class_ref 299803 // ConnectionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the {@code ConnectionEventListener} that an error has occurred
on a {@code PooledConnection}. This notification is triggered <i>before</i> the
{@code SQLException}, which is available through the event argument, is
thrown.

@param theEvent
           a {@code ConnectionEvent} containing details about the source
           of the event and the {@code SQLException} that has occurred."
      end
    end

    class 300187 "ConnectionPoolDataSource"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface for the creation of {@code ConnectionPoolDataSource} objects.
Used internally within the package.
<p>
A class which implements the {@code ConnectionPoolDataSource} interface is
typically registered with a JNDI naming service directory and is retrieved
from there by name."
      classrelation 534811 // <generalisation>
	relation 534811 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 534811 // <generalisation>
	  b parent class_ref 299675 // CommonDataSource
      end

      operation 1869467 "getPooledConnection"
	public return_type class_ref 299931 // PooledConnection
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a connection to a database which can then be used as a pooled
connection.

@return a {@code PooledConnection} which represents the connection to the
        database.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 1869595 "getPooledConnection"
	public return_type class_ref 299931 // PooledConnection
	nparams 2
	  param inout name "theUser" type class_ref 3399692 // String
	  param inout name "thePassword" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a connection to a database, using the supplied user name and
password, which can then be used as a pooled connection.

@param theUser
           the a user name for the database login.
@param thePassword
           the password associated with the user identified by {@code
           theUser}.
@return a {@code PooledConnection} object which represents the connection
        to the database.
@throws SQLException
            if there is a problem accessing the database."
      end
    end

    class 300315 "DataSource"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface for the creation of {@code Connection} objects which represent a
connection to a database. This interface is an alternative to the {@code
java.sql.DriverManager}.
<p>
A class which implements the {@code DataSource} interface is typically
registered with a JNDI naming service directory and is retrieved from there
by name.
<p>
The {@code DataSource} interface is typically implemented by the writer of a
JDBC driver. There are three variants of the {@code DataSource} interface,
which produce connections with different characteristics:
<ol>
<li><i>Standard {@code DataSource}</i>: produces standard {@code Connection}
objects with no special features.</li>
<li><i>Connection Pool {@code DataSource}</i>: produces {@code
PooledConnection} objects which require a connection pool manager as an
intermediary component.</li>
<li><i>Distributed transaction {@code DataSource} (\"XADataSource\")</i>:
produces {@code XAConnection} objects which can be used to handle distributed
transactions which typically require an intermediary transaction manager
component. {@code XAConnection} objects also provide connection pooling
capabilities as well as distributed transaction capabilities.</li>
</ol>
<p>
Note that a JDBC driver which is accessed via the {@code DataSource}
interface is loaded via a JNDI lookup process. A driver loaded in this way
does not register itself with the {@code DriverManager}."
      classrelation 534939 // <generalisation>
	relation 534939 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 534939 // <generalisation>
	  b parent class_ref 299675 // CommonDataSource
      end

      classrelation 535067 // <generalisation>
	relation 535067 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 535067 // <generalisation>
	  b parent class_ref 221083 // Wrapper
      end

      operation 1869723 "getConnection"
	public return_type class_ref 221211 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a connection to the database represented by this {@code
DataSource}.

@return a {@code Connection} object which is a connection to the
        database.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 1869851 "getConnection"
	public return_type class_ref 221211 // Connection
	nparams 2
	  param inout name "theUsername" type class_ref 3399692 // String
	  param inout name "thePassword" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a connection to the database represented by this {@code
DataSource}, using the supplied user name and password.

@param theUsername
           the a user name for the database login.
@param thePassword
           the password associated with the user identified by {@code
           theUsername}.
@return the {@code Connection} object which is the connection to the
        database.
@throws SQLException
            if there is a problem accessing the database."
      end
    end

    class 300443 "StatementEventListener"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that registers to be notified of events that occur on
PreparedStatements that are in the Statement pool."
      classrelation 536219 // <generalisation>
	relation 536219 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 536219 // <generalisation>
	  b parent class_ref 130843 // EventListener
      end

      operation 1889563 "statementClosed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 301467 // StatementEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The driver calls this method on all StatementEventListeners registered on
the connection when it detects that a PreparedStatement is closed.

@param event
           an StatementEvent object describing the event of statement
           closed"
      end

      operation 1889691 "statementErrorOccurred"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 301467 // StatementEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The driver calls this method on all StatementEventListeners registered on
the connection when it detects that a PreparedStatement is invalid,
before a SQLException is thrown

@param event
           an StatementEvent object describing the event of statement
           error occurred"
      end
    end

    class 300571 "RowSet"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface which provides means to access data which
persists on a database. It extends the functionality of
{@link java.sql.ResultSet ResultSet} into a form that it can be used as a
JavaBean component, suited for a visual programming environment.
<p>
{@code RowSet} provides getters and setters for properties relating to the
general database environment together with the getters and setters for
distinct data values which constitute the row set. The {@code RowSet} class
supports JavaBean events so that other components in an application can be
informed when changes happen such as changes in data values.
<p>
{@code RowSet} is a facility implemented on top of the remainder of the JDBC
API. It may be <i>connected</i>, maintaining a connection to the database
throughout its lifecycle. The changes made on a <i>disconnected</i> {@code
RowSet} on the other hand can be persisted only establishing a new connection
with the database each time.
<p>
Disconnected {@code RowSets} make use of {@code RowSetReaders} to populate
the {@code RowSet} with data, possibly from a non-relational database source.
They may also use {@code RowSetWriters} to send data back to the underlying
data store. There is considerable freedom in the way that {@code
RowSetReaders} and {@code RowSetWriters} may be implemented to retrieve and
store data.

@see RowSetReader
@see RowSetWriter"
      classrelation 535195 // <generalisation>
	relation 535195 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 535195 // <generalisation>
	  b parent class_ref 220187 // ResultSet
      end

      operation 1870747 "addRowSetListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theListener" type class_ref 300699 // RowSetListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the supplied {@link RowSetListener} with this {@code RowSet}.
Once registered, the {@link RowSetListener} is notified of events
generated by the {@code RowSet}.

@param theListener
           an object which implements the {@code rowSetListener}
           interface."
      end

      operation 1870875 "clearParameters"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the parameters previously set for this {@code RowSet}.
<p>
The {@code RowSet} object retains its value until either a new value for
a parameter is set or its value is actively reset. {@code
clearParameters} provides a facility to clear the values for all
parameters with one method call.

@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1871003 "execute"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fetches data for this {@code RowSet} from the database. If successful,
any existing data for the {@code RowSet} is discarded and its metadata is
overwritten.
<p>
Data is retrieved connecting to the database and executing an
according SQL statement. This requires some or all of the following
properties to be set: URL, database name, user name, password,
transaction isolation, type map; plus some or all of the properties:
command, read only, maximum field size, maximum rows, escape processing,
and query timeout.
<p>
The {@code RowSet} may use a {@code RowSetReader} to access the database
it will then invoke the {@link RowSetReader#readData} method on the
reader to fetch the data. When the new data is fetched all the listeners
are notified to take appropriate measures.

@throws SQLException
            if a problem occurs accessing the database or if the
            properties needed to access the database have not been set.
@see RowSetMetaData
@see RowSetReader"
      end

      operation 1871131 "getCommand"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code RowSet}'s command property.

@return a string containing the {@code RowSet}'s command property. A
        command is a SQL statement which is executed to fetch required
        data into the {@code RowSet}."
      end

      operation 1871259 "getDataSourceName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the ODBC Data Source Name property associated with this {@code
RowSet}. The database name can be used to find a {@link DataSource}
which has been registered with a naming service - the {@link DataSource}
can then be used to create a connection to the database.

@return the name of the database."
      end

      operation 1871387 "getEscapeProcessing"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports if escape processing is enabled for this {@code RowSet}. If
escape processing is on, the driver performs a substitution of the escape
syntax with the applicable code before sending an SQL command to the
database. The default value for escape processing is {@code true}.

@return {@code true} if escape processing is enabled, {@code
        false} otherwise.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1871515 "getMaxFieldSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum number of bytes that can be returned for column values
which are of type {@code BINARY}, {@code VARBINARY}, {@code
LONGVARBINARYBINARY}, {@code CHAR}, {@code VARCHAR}, or {@code
LONGVARCHAR}. Excess data is silently discarded if the number is
exceeded.

@return the current maximum size in bytes. 0 implies no size limit.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1871643 "getMaxRows"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum number of rows for this {@code RowSet}. Excess rows are
discarded silently if the limit is exceeded.

@return the previous maximum number of rows. 0 implies no row limit.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1871771 "getPassword"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the password property for this {@code RowSet}. This
property is used when a connection to the database is established.
Therefore it should be set prior to invoking the {@link #execute} method.

@return the value of the password property."
      end

      operation 1871899 "getQueryTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the timeout for the driver when a query operation is executed. If a
query takes longer than the timeout then a {@code SQLException} is
thrown.

@return the timeout value in seconds.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1872027 "getTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the transaction isolation level property set for this
{@code RowSet}. The transaction isolation level defines the
policy implemented on the database for maintaining the data
values consistent.

@return the current transaction isolation level. Must be one of:
        <ul>
        <li>{@code Connection.TRANSACTION_READ_UNCOMMITTED}</li>
        <li>{@code Connection.TRANSACTION_READ_COMMITTED}</li>
        <li>{@code Connection.TRANSACTION_REPEATABLE_READ}</li>
        <li>{@code Connection.TRANSACTION_SERIALIZABLE}</li>
        </ul>
@see java.sql.Connection"
      end

      operation 1872155 "getTypeMap"
	public return_type class_ref 129819 // Map
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, Class<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the custom mapping of SQL User-Defined Types (UDTs) and Java classes
for this {@code RowSet}, if applicable.

@return the custom mappings of SQL types to Java classes.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1872283 "getUrl"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the URL property value for this {@code RowSet}. If there is no
{@code DataSource} object specified, the {@code RowSet} uses the URL to
establish a connection to the database. The default value for the URL is
{@code null}.

@return a String holding the value of the URL property.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1872411 "getUsername"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the {@code username} property for this {@code RowSet}.
The {@code username} is used when establishing a connection to the
database and should be set before the {@code execute} method is invoked.

@return a {@code String} holding the value of the {@code username}
        property."
      end

      operation 1872539 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if this {@code RowSet} is read-only.

@return {@code true} if this {@code RowSet} is read-only, {@code false}
        if it is updatable."
      end

      operation 1872667 "removeRowSetListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theListener" type class_ref 300699 // RowSetListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a specified {@link RowSetListener} object from the set of
listeners which will be notified of events by this {@code RowSet}.

@param theListener
           the {@link RowSetListener} to remove from the set of listeners
           for this {@code RowSet}."
      end

      operation 1872795 "setArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theArray" type class_ref 219931 // Array
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the specified {@code ARRAY} parameter in the {@code RowSet} command
with the supplied {@code java.sql.Array} value.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theArray
           the {@code Array} data value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1872923 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
with the ASCII data in the supplied {@code java.io.InputStream} value.
Data is read from the {@code InputStream} until end-of-file is reached.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theInputStream
           the ASCII data value to which the parameter is set.
@param length
           the length of the data in bytes.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1873051 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
ASCII data in the supplied java.io.InputStream value. Data is read from
the InputStream until end-of-file is reached.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theInputStream
           an InputStream containing the ASCII data to set into the
           parameter value
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1873179 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
ASCII data in the supplied java.io.InputStream value. Data is read from
the InputStream until end-of-file is reached.

@param parameterName
           the name for parameter
@param theInputStream
           an InputStream containing the ASCII data to set into the
           parameter value
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1873307 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
ASCII data in the supplied java.io.InputStream value. Data is read from
the InputStream until end-of-file is reached.

@param parameterName
           the name for parameter
@param theInputStream
           an InputStream containing the ASCII data to set into the
           parameter value
@param length
           the length of the data in bytes
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1873435 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theBigDecimal" type class_ref 166171 // BigDecimal
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified SQL {@code NUMERIC} parameter in the
{@code RowSet} command with the data in the supplied {@code
java.math.BigDecimal} value.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theBigDecimal
           the big decimal value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1873563 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theBigDecimal" type class_ref 166171 // BigDecimal
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified SQL NUMERIC parameter in the RowSet
command with the data in the supplied java.math.BigDecimal value.

@param parameterName
           the name for parameter
@param theBigDecimal
           the BigDecimal containing the value
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1873691 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to the binary data in the supplied input stream. Data is read from the
input stream until end-of-file is reached.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theInputStream
           the binary data stream to which the parameter is set.
@param length
           the length of the data in bytes.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1873819 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
binary data in the supplied java.io.InputStream value. Data is read from
the InputStream until end-of-file is reached.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theInputStream
           an InputStream containing the binary data to set into the
           parameter value
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1873947 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
binary data in the supplied java.io.InputStream value. Data is read from
the InputStream until end-of-file is reached.

@param parameterName
           the name for parameter
@param theInputStream
           an InputStream containing the binary data to set into the
           parameter value
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1874075 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
binary data in the supplied java.io.InputStream value. Data is read from
the InputStream until end-of-file is reached.

@param parameterName
           the name for parameter
@param theInputStream
           an InputStream containing the binary data to set into the
           parameter value
@param length
           the length of the data in bytes
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1874203 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theBlob" type class_ref 220571 // Blob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to the supplied {@code Blob} value.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theBlob
           the {@code Blob} value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1874331 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.InputStream. Data is read from the
InputStream until end-of-file is reached.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theInputStream
           an InputStream containing the binary data to set into the
           parameter value
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1874459 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.InputStream. Data is read from the
InputStream until end-of-file is reached.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theInputStream
           an InputStream containing the binary data to set into the
           parameter value
@param length
           the length of the data in bytes
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1874587 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.InputStream. Data is read from the
InputStream until end-of-file is reached.

@param parameterName
           the name for parameter
@param theInputStream
           an InputStream containing the binary data to set into the
           parameter value
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1874715 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.InputStream. Data is read from the
InputStream until end-of-file is reached.

@param parameterName
           the name for parameter
@param theInputStream
           an InputStream containing the binary data to set into the
           parameter value
@param length
           the length of the data in bytes
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1874843 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theBlob" type class_ref 220571 // Blob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.sql.Blob.

@param parameterName
           the name for parameter
@param theBlob
           the Blob value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1874971 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theBoolean" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to the supplied boolean.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theBoolean
           the {@code boolean} value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1875099 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theBoolean" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
supplied boolean.

@param parameterName
           name for parameter
@param theBoolean
           the boolean value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1875227 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theByte" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to the supplied byte value.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theByte
           the {@code byte} value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1875355 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theByte" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
supplied byte value.

@param parameterName
           name for parameter
@param theByte
           the byte value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1875483 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theByteArray" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to the supplied byte array value.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theByteArray
           the {@code Array} of {@code bytes} to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1875611 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theByteArray" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
supplied byte array value.

@param parameterName
           name for parameter
@param theByteArray
           the array of bytes to set into the parameter.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1875739 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theReader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to the sequence of Unicode characters carried by the supplied {@code
java.io.Reader}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theReader
           the {@code Reader} which contains the Unicode data to set the
           parameter.
@param length
           the length of the data in the {@code Reader} in characters.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1875867 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theReader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
sequence of Unicode characters carried by the supplied java.io.Reader.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1875995 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theReader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
sequence of Unicode characters carried by the supplied java.io.Reader.

@param parameterName
           name for parameter
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1876123 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theReader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
sequence of Unicode characters carried by the supplied java.io.Reader.

@param parameterName
           name for parameter
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@param length
           the length of the data in the Reader in characters
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1876251 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theClob" type class_ref 221723 // Clob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
with the value of a supplied {@code java.sql.Clob}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theClob
           the {@code Clob} value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1876379 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theReader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1876507 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theReader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@param length
           the length of the data in the Reader in characters
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1876635 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theClob" type class_ref 221723 // Clob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.sql.Clob.

@param parameterName
           name for parameter
@param theClob
           the specific Clob object
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1876763 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theReader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterName
           name for parameter
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1876891 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theReader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterName
           name for parameter
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@param length
           the length of the data in the Reader in characters
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1877019 "setCommand"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cmd" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the Command property for this {@code RowSet} - the command is an SQL
query which runs when the {@code execute} method is invoked. This
property is optional for databases that do not support commands.

@param cmd
           the SQL query. Can be {@code null}.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1877147 "setConcurrency"
	public explicit_return_type "void"
	nparams 1
	  param in name "concurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the concurrency property of this {@code RowSet}. The default value
is {@code ResultSet.CONCUR_READ_ONLY}.

@param concurrency
           the concurrency value. One of:
           <ul>
           <li>{@code ResultSet.CONCUR_READ_ONLY}</li>
           <li>{@code ResultSet.CONCUR_UPDATABLE}</li>
           </ul>
@throws SQLException
            if an error occurs accessing the database.
@see java.sql.ResultSet"
      end

      operation 1877275 "setDataSourceName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the database name property for the {@code RowSet}.
<p>
The database name can be used to find a {@link DataSource} which has been
registered with a naming service - the {@link DataSource} can then be
used to create a connection to the database.

@param name
           the database name.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1877403 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theDate" type class_ref 221851 // Date
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
with the value of a supplied {@code java.sql.Date}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theDate
           the date value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1877531 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theDate" type class_ref 221851 // Date
	  param inout name "theCalendar" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
with the value of a supplied {@code java.sql.Date}, where the conversion
of the date to an SQL {@code DATE} value is calculated using a supplied
{@code Calendar}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theDate
           the date to which the parameter is set.
@param theCalendar
           the {@code Calendar} to use in converting the Date to an SQL
           {@code DATE} value.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1877659 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theDate" type class_ref 221851 // Date
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.sql.Date, where the conversion of the Date to an
SQL DATE value is calculated using a supplied Calendar.

@param parameterName
           name for parameter
@param theDate
           the Date to use
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1877787 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theDate" type class_ref 221851 // Date
	  param inout name "theCalendar" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.sql.Date, where the conversion of the Date to an
SQL DATE value is calculated using a supplied Calendar.

@param parameterName
           name for parameter
@param theDate
           the Date to use
@param theCalendar
           the Calendar to use in converting the Date to an SQL DATE
           value
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1877915 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theDouble" explicit_type "double"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
with the supplied {@code double}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theDouble
           the {@code double} value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1878043 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theDouble" explicit_type "double"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
supplied double.

@param parameterName
           name for parameter
@param theDouble
           the double value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1878171 "setEscapeProcessing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the escape processing status for this {@code RowSet}. If escape
processing is on, the driver performs a substitution of the escape syntax
with the applicable code before sending an SQL command to the database.
The default value for escape processing is {@code true}.

@param enable
           {@code true} to enable escape processing, {@code false} to
           turn it off.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1878299 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theFloat" explicit_type "float"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
with the supplied {@code float}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theFloat
           the {@code float} value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1878427 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theFloat" explicit_type "float"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
supplied float.

@param parameterName
           name for parameter
@param theFloat
           the float value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1878555 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theInteger" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
with the supplied {@code integer}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theInteger
           the {@code integer} value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1878683 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theInteger" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
supplied integer.

@param parameterName
           name for parameter
@param theInteger
           the integer value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1878811 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theLong" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
with the supplied {@code long}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theLong
           the {@code long} value value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1878939 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theLong" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
supplied long.

@param parameterName
           name for parameter
@param theLong
           the long value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1879067 "setMaxFieldSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of bytes which can be returned for a column value
where the column type is one of {@code BINARY}, {@code VARBINARY},
{@code LONGVARBINARYBINARY}, {@code CHAR}, {@code VARCHAR}, or {@code
LONGVARCHAR}. Data which exceeds this limit is silently discarded. For
portability, a value greater than 256 is recommended.

@param max
           the maximum size of the returned column value in bytes. 0
           implies no size limit.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1879195 "setMaxRows"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of rows which can be held by the {@code RowSet}.
Any additional rows are silently discarded.

@param max
           the maximum number of rows which can be held in the {@code
           RowSet}. 0 means no limit.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1879323 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theReader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1879451 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theReader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@param length
           the length of the data in the Reader in characters
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1879579 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theReader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterName
           name for parameter
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1879707 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theReader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterName
           name for parameter
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@param length
           the length of the data in the Reader in characters
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1879835 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theNClob" type class_ref 222619 // NClob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.sql.NClob.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theNClob
           the NClob value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1879963 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theReader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1880091 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theReader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@param length
           the length of the data in the Reader in characters
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1880219 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theNClob" type class_ref 222619 // NClob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.sql.NClob.

@param parameterName
           name for parameter
@param theNClob
           the NClob value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1880347 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theReader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterName
           name for parameter
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1880475 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theReader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command with the
value of a supplied java.io.Reader.

@param parameterName
           name for parameter
@param theReader
           the Reader which contains the Unicode data to set into the
           parameter
@param length
           the length of the data in the Reader in characters
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1880603 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theNString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
supplied NString

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theNString
           the NString value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1880731 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theNString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
supplied NString.

@param parameterName
           name for parameter
@param theNString
           the NString value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1880859 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to SQL {@code NULL}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param sqlType
           the type of the parameter, as defined by {@code
           java.sql.Types}.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1880987 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to SQL {@code NULL}. This form of the {@code setNull} method should be
used for User Defined Types and {@code REF} parameters.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param sqlType
           the type of the parameter, as defined by {@code
           java.sql.Types}.
@param typeName
           the fully qualified name of an SQL user defined type or the
           name of the SQL structured type referenced by a {@code REF}
           type. Ignored if the sqlType is not a UDT or REF type.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1881115 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to SQL
NULL. This form of the <code>setNull</code> method should be used for
User Defined Types and REF parameters.

@param parameterName
           name for parameter
@param sqlType
           the type of the parameter, as defined by java.sql.Types.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1881243 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to SQL
NULL. This form of the <code>setNull</code> method should be used for
User Defined Types and REF parameters.

@param parameterName
           name for parameter
@param sqlType
           the type of the parameter, as defined by java.sql.Types.
@param typeName
           the fully qualified name of an SQL User Defined Type or the
           name of the SQL structured type referenced by a REF type.
           Ignored if the sqlType is not a UDT or REF type.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1881371 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theObject" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied Java object.
<p>
The JDBC specification provides a standard mapping for Java objects to
SQL data types. Database specific types can be mapped by JDBC driver
specific Java types.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theObject
           the Java object containing the data value to which the
           parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1881499 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theObject" type class_ref 3401484 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied Java object.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theObject
           the Java object containing the data value.
@param targetSqlType
           the SQL type to send to the database, as defined in {@code
           java.sql.Types}.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1881627 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theObject" type class_ref 3401484 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied Java object.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theObject
           the Java object containing the data value.
@param targetSqlType
           the SQL type to send to the database, as defined in {@code
           java.sql.Types}.
@param scale
           the number of digits after the decimal point, for {@code
           java.sql.Types.DECIMAL} and {@code java.sql.Types.NUMERIC}
           types. Ignored for all other types.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1881755 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theObject" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to a
supplied Java object.

@param parameterName
           name for parameter
@param theObject
           the Java object containing the data value.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1881883 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theObject" type class_ref 3401484 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to a
supplied Java object.

@param parameterName
           name for parameter
@param theObject
           the Java object containing the data value.
@param targetSqlType
           the SQL type to send to the database, as defined in
           java.sql.Types.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1882011 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theObject" type class_ref 3401484 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to a
supplied Java object.

@param parameterName
           name for parameter
@param theObject
           the Java object containing the data value.
@param targetSqlType
           the SQL type to send to the database, as defined in
           java.sql.Types.
@param scale
           the number of digits after the decimal point, for
           java.sql.Types.DECIMAL and java.sql.Types.NUMERIC types.
           Ignored for all other types.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1882139 "setPassword"
	public explicit_return_type "void"
	nparams 1
	  param inout name "password" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the database Password for this {@code RowSet}. This property is used
when a connection to the database is established. Therefore it should be
set prior to invoking the {@link #execute} method.

@param password
           a {@code String} holding the password.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1882267 "setQueryTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the timeout for the driver when a query operation is executed. If a
query takes longer than the timeout, a {@code SQLException} is thrown.

@param seconds
           the number of seconds for the timeout.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1882395 "setReadOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "readOnly" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the {@code RowSet} is read-only or updatable.

@param readOnly
           {@code true} to set the {@code RowSet} to read-only state,
           {@code false} to allow updates.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1882523 "setRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theRef" type class_ref 222107 // Ref
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied {@code java.sql.Ref}. This is sent to the database as an
SQL {@code REF} value.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theRef
           the value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database.
@see java.sql.Ref"
      end

      operation 1882651 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theShort" explicit_type "short"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied {@code short integer}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theShort
           the value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1882779 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theShort" explicit_type "short"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to a
supplied short integer.

@param parameterName
           name for parameter
@param theShort
           the short value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1882907 "setString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied {@code String}. The string is placed into the database as a
{@code VARCHAR} or {@code LONGVARCHAR} SQL value, depending on the
database limits for the length of {@code VARCHAR} values.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theString
           the value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1883035 "setString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to a
supplied String. The String is placed into the database as a VARCHAR or
LONGVARCHAR SQL value, depending on the database limits for the length of
VARCHAR values.

@param parameterName
           name for parameter
@param theString
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1883163 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theRowId" type class_ref 222491 // RowId
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
supplied RowId

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theRowId
           the RowId value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1883291 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theRowId" type class_ref 222491 // RowId
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
supplied RowId.

@param parameterName
           name for parameter
@param theRowId
           the RowId value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1883419 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theSQLXML" type class_ref 222747 // SQLXML
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
supplied SQLXML

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theSQLXML
           the SQLXML value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1883547 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theSQLXML" type class_ref 222747 // SQLXML
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to the
supplied SQLXML.

@param parameterName
           name for parameter
@param theSQLXML
           the SQLXML value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1883675 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theTime" type class_ref 222235 // Time
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied {@code java.sql.Time}, converting it to an SQL {@code TIME}
value using the system default {@code Calendar}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theTime
           the value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database.
@see java.util.Calendar
@see java.sql.Time"
      end

      operation 1883803 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theTime" type class_ref 222235 // Time
	  param inout name "theCalendar" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied {@code java.sql.Time}, converting it to an SQL {@code TIME}
value using a supplied {@code Calendar}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theTime
           the value to which the parameter is set.
@param theCalendar
           the {@code Calendar} to use in the conversion operation.
@throws SQLException
            if an error occurs accessing the database.
@see java.util.Calendar
@see java.sql.Time"
      end

      operation 1883931 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theTime" type class_ref 222235 // Time
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to a
supplied java.sql.Time, converting to an SQL TIME value using a supplied
Calendar.

@param parameterName
           name for parameter
@param theTime
           the Time value to set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1884059 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theTime" type class_ref 222235 // Time
	  param inout name "theCalendar" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to a
supplied java.sql.Time, converting to an SQL TIME value using a supplied
Calendar.

@param parameterName
           name for parameter
@param theTime
           the Time value to set
@param theCalendar
           the Calendar to use in the conversion operation
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1884187 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied {@code java.sql.Timestamp}, converting it to an SQL {@code
TIMESTAMP} value using the system default {@code Calendar}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theTimestamp
           the value to which the parameter is set.
@throws SQLException
            if an error occurs accessing the database.
@see java.util.Calendar
@see java.sql.Timestamp"
      end

      operation 1884315 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	  param inout name "theCalendar" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the {@code RowSet} command
to a supplied {@code java.sql.Timestamp}, converting it to an SQL {@code
TIMESTAMP} value using a supplied {@code Calendar}.

@param parameterIndex
           the index of the parameter to set; the first parameter's index
           is 1.
@param theTimestamp
           the value to which the parameter is set.
@param theCalendar
           the {@code Calendar} to use in the conversion operation
@throws SQLException
            if an error occurs accessing the database.
@see java.util.Calendar
@see java.sql.Timestamp"
      end

      operation 1884443 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to a
supplied java.sql.Timestamp converting to an SQL TIMESTAMP value
using the system default {@code Calendar}.

@param parameterName
           name for parameter
@param theTimestamp
           the value to which the parameter is set
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1884571 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	  param inout name "theCalendar" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter in the RowSet command to a
supplied java.sql.Timestamp converting to an SQL TIMESTAMP value using a
supplied Calendar.

@param parameterName
           name for parameter
@param theTimestamp
           the value to which the parameter is set
@param theCalendar
           the Calendar to use in the conversion operation
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1884699 "setTransactionIsolation"
	public explicit_return_type "void"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the target instance's transaction isolation level to one of a
discrete set of possible values. The transaction isolation level defines
the policy implemented on the database for maintaining the data values
consistent.
<p>
Keep in mind that setting a transaction isolation level has no effect
unless your driver and DBMS support it.

@param level
           the transaction isolation level. One of:
           <ul>
           <li>{@code Connection.TRANSACTION_READ_UNCOMMITTED}</li>
           <li>{@code Connection.TRANSACTION_READ_COMMITTED}</li>
           <li>{@code Connection.TRANSACTION_REPEATABLE_READ}</li>
           <li>{@code Connection.TRANSACTION_SERIALIZABLE}</li>
           </ul>
@throws SQLException
            if an error occurs accessing the database.
@see java.sql.Connection"
      end

      operation 1884827 "setType"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the type of this {@code RowSet}. By default, the type is
non-scrollable.

@param type
           the type for the {@code RowSet}. One of:
           <ul>
           <li>{@code ResultSet.TYPE_FORWARD_ONLY}</li>
           <li>{@code ResultSet.TYPE_SCROLL_INSENSITIVE}</li>
           <li>{@code ResultSet.TYPE_SCROLL_SENSITIVE}</li>
           </ul>
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1884955 "setTypeMap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theTypeMap" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the mapping of SQL User Defined Types (UDTs) to Java classes. The
Java classes must all implement the {@link java.sql.SQLData SQLData}
interface.

@param theTypeMap
           the names of SQL UDTs and the Java classes to which they are
           mapped.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1885083 "setUrl"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theURL" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the URL used by this {@code RowSet} to access the database via a
{@code DriverManager}. The URL is optional - an alternative is to use a
database name to create a connection.

@param theURL
           the URL for the database. Can be {@code null}.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1885211 "setURL"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theURL" type class_ref 140443 // URL
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the URL used by this RowSet to access the database via a
<code>DriverManager</code>. The URL is optional - an alternative is to
use a Data Source Name to create a connection.

@param parameterIndex
           index of the parameter to set, where the first parameter has
           index = 1.
@param theURL
           a java.net.URL containing the URL for the database.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 1885339 "setUsername"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theUsername" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code Username} property for the {@code RowSet}, used to
authenticate a connection to the database.

@param theUsername
           the new user name for this row set.
@throws SQLException
            if an error occurs accessing the database."
      end
    end

    class 300699 "RowSetListener"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface used to send notification of events occurring in the context of
a {@link RowSet}. To receive the notification events, an object must
implement the {@code RowSetListener} interface and then register itself with
the {@code RowSet} of interest using the
{@link RowSet#addRowSetListener(RowSetListener)} method."
      classrelation 535579 // <generalisation>
	relation 535579 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 535579 // <generalisation>
	  b parent class_ref 130843 // EventListener
      end

      operation 1886235 "cursorMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theEvent" type class_ref 300827 // RowSetEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the listener that the {@code RowSet}'s cursor in {@code
theEvent.getSource} has moved.

@param theEvent
           a {@code RowSetEvent} that contains information about the
           {@code RowSet} involved. This information can be used to
           retrieve information about the change, such as the updated
           data values."
      end

      operation 1886363 "rowChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theEvent" type class_ref 300827 // RowSetEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the listener that one of the {@code RowSet}'s rows in {@code
theEvent.getSource} has changed.

@param theEvent
           a {@code RowSetEvent} that contains information about the
           {@code RowSet} involved. This information can be used to
           retrieve information about the change, such as the new cursor
           position."
      end

      operation 1886491 "rowSetChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theEvent" type class_ref 300827 // RowSetEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the listener that the {@code RowSet}'s entire contents in
{@code theEvent.getSource} have been updated (an example is the execution
of a command which retrieves new data from the database).

@param theEvent
           a {@code RowSetEvent} that contains information about the
           {@code RowSet} involved. This information can be used to
           retrieve information about the change, such as the updated
           rows of data."
      end
    end

    class 300827 "RowSetEvent"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An event which is sent when specific events happen to a {@link RowSet}
object. The events are sent to inform registered listeners that changes have
occurred to the {@code RowSet}. The events covered are:
<ol>
<li>A single row in the {@code RowSet} changes.</li>
<li>The whole set of data in the {@code RowSet} changes.</li>
<li>The {@code RowSet} cursor position changes.</li>
</ol>
<p>
The event contains a reference to the {@code RowSet} object which generated
the message so that the listeners can extract whatever information they need
from that reference."
      classrelation 535323 // <generalisation>
	relation 535323 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 535323 // <generalisation>
	  b parent class_ref 130587 // EventObject
      end

      classrelation 535451 // <realization>
	relation 535451 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 535451 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 449435 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1875450876546332005L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1885467 "RowSetEvent"
	public explicit_return_type ""
	nparams 1
	  param inout name "theSource" type class_ref 300571 // RowSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code RowSetEvent} object containing a reference to the
{@link RowSet} object that generated the event. Information about the
changes that have occurred to the {@code RowSet} can be extracted from
the {@code RowSet} using one or more of the query methods available on
the {@code RowSet}.

@param theSource
           the {@code RowSet} which generated the event."
      end
    end

    class 300955 "RowSetInternal"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface provided by a {@code RowSet} object to let either a {@code
RowSetReader} or a {@code RowSetWriter} access its internal state, thereby
providing facilities to read and update the state of the {@code RowSet}."
      operation 1885595 "getConnection"
	public return_type class_ref 221211 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the connection associated with this {@code RowSet} object.

@return the connection or {@code null}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 1885723 "getOriginal"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code ResultSet} that was the original (unmodified) content of
the {@code RowSet}.
<p>
The {@code ResultSet}'s cursor is positioned before the first row of
data.

@return the {@code ResultSet} that contained the original data value of
        the {@code RowSet}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 1885851 "getOriginalRow"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the original value of the current row only. If the current row did
not have an original value, then an empty value is returned.

@return a {@code ResultSet} containing the value of the current row only.
@throws SQLException
            if there is a problem accessing the database, or if the
            cursor is not on a valid row (before the first row, after the
            last one or pointing to the insert row)."
      end

      operation 1885979 "getParams"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the parameter values that have been set for this {@code RowSet}'s
command.

@return the values of parameters that have been set.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 1886107 "setMetaData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theMetaData" type class_ref 301083 // RowSetMetaData
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets {@code RowSetMetaData} for this {@code RowSet}. The {@code
RowSetMetaData} is used by a {@code RowSetReader} to set values giving
information about the {@code RowSet}'s columns.

@param theMetaData
           holds the metadata about the {@code RowSet}'s columns.
@throws SQLException
            if there is a problem accessing the database."
      end
    end

    class 301083 "RowSetMetaData"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface which provides facilities for getting information about the
columns in a {@code RowSet}.
<p>
{@code RowSetMetaData} extends {@link java.sql.ResultSetMetaData}, adding new
operations for carrying out value sets.
<p>
Application code would not normally call this interface directly. It would be
called internally when {@code RowSet.execute} is called.

@see RowSetInternal#setMetaData(RowSetMetaData)"
      classrelation 535707 // <generalisation>
	relation 535707 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 535707 // <generalisation>
	  b parent class_ref 221467 // ResultSetMetaData
      end

      operation 1886619 "setAutoIncrement"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "autoIncrement" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets automatic numbering for a specified column in the {@code RowSet}. If
automatic numbering is on, the column is read-only. The default value for
the auto increment parameter is {@code false}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param autoIncrement
           {@code true} to set automatic numbering on, {@code false} to
           turn it off (default).
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1886747 "setCaseSensitive"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "caseSensitive" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the case sensitive property for a specified column in the {@code
RowSet}. The default is that the column is not case sensitive.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param caseSensitive
           {@code true} to make the column case sensitive, {@code false}
           to make it case insensitive (default).
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1886875 "setCatalogName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "catalogName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the catalog name for a specified column in the {@code RowSet}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param catalogName
           the new catalog's name.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1887003 "setColumnCount"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the number of columns contained in the row set.

@param columnCount
           the number of columns contained in the {@code RowSet}.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1887131 "setColumnDisplaySize"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "displaySize" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the normal maximum width in characters for a specified column in the
{@code RowSet}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param displaySize
           the normal maximum column width in characters.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1887259 "setColumnLabel"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "theLabel" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the suggested name as label for the column contained in the {@code
RowSet}. The label is an alias for printing and displaying purposes.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param theLabel
           the alias name for the column.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1887387 "setColumnName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "theColumnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the column name for a specified column in the {@code RowSet}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param theColumnName
           the column's label.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1887515 "setColumnType"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "theSQLType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the SQL type for a specified column in the {@code RowSet}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param theSQLType
           the SQL Type, as defined by {@code java.sql.Types}.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1887643 "setColumnTypeName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "theTypeName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the type name for a specified column in the {@code RowSet}, where
the data type is specific to the data source.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param theTypeName
           the SQL type name for the column.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1887771 "setCurrency"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "isCurrency" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether a specified column is a currency value. The default value is
{@code false}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param isCurrency
           {@code true} if the column should be treated as a currency
           value, {@code false} if it should not be treated as a currency
           value (default).
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1887899 "setNullable"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "nullability" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether a specified column can contain SQL {@code NULL} values.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param nullability
           an integer which is one of the following values:
           <ul>
           <li>{@code ResultSetMetaData.columnNoNulls}</li>
           <li>{@code ResultSetMetaData.columnNullable}</li>
           <li>{@code ResultSetMetaData.columnNullableUnknown}</li>
           </ul>
           <p>
           The default value is {@code
           ResultSetMetaData.columnNullableUnknown}.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1888027 "setPrecision"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "thePrecision" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the number of decimal digits for a specified column in the {@code
RowSet}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param thePrecision
           the number of decimal digits.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1888155 "setScale"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "theScale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Declares how many decimal digits there should be after a decimal point
for the column specified by {@code columnIndex}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param theScale
           the number of digits after the decimal point.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1888283 "setSchemaName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "theSchemaName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the schema name for a specified column in the {@code RowSet}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param theSchemaName
           a {@code String} containing the schema name.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1888411 "setSearchable"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "isSearchable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether a specified column can be used in a search involving a
{@code WHERE} clause. The default value is {@code false}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param isSearchable
           {@code true} of the column can be used in a {@code WHERE}
           clause search, {@code false} otherwise.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1888539 "setSigned"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "isSigned" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets if a specified column can contain signed numbers.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param isSigned
           {@code true} if the column can contain signed numbers, {@code
           false} otherwise.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 1888667 "setTableName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "theTableName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the table name for a specified column in the {@code RowSet}.

@param columnIndex
           the index number for the column; the first column's index is
           1.
@param theTableName
           the table name for the column.
@throws SQLException
            if a problem occurs accessing the database."
      end
    end

    class 301211 "RowSetReader"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface which provides functionality for a disconnected {@code RowSet}
to get data from a database into its rows. The {@code RowSet} calls the
{@code RowSetReader} interface when the {@code RowSet}'s execute method is
invoked - a {@code RowSetReader} must first be registered with the {@code
RowSet} for this to work.

@see RowSet"
      operation 1888795 "readData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theCaller" type class_ref 300955 // RowSetInternal
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads new data into the {@code RowSet}. The calling {@code RowSet} object
must itself implement the {@code RowSetInternal} interface and the
{@code RowSetReader} must be registered as a reader on the
{@code RowSet}.
<p>
This method adds rows into the calling {@code RowSet}. The reader may
invoke any of the {@code RowSet}'s methods except for the {@code execute}
method (calling {@code execute} will cause an {@code SQLException} to be
thrown). However, when the reader calls the {@code RowSet}'s methods, no
events are sent to listeners - any listeners are informed by the calling
{@code RowSet}'s {@code execute} method once the reader returns from the
{@code readData} method.

@param theCaller
           must be the calling {@code RowSet} object, which must have
           implemented the {@code RowSetInternal} interface.
@throws SQLException
            if a problem occurs accessing the database or if the reader
            calls the {@link RowSet#execute()} method.
@see RowSetInternal"
      end
    end

    class 301339 "RowSetWriter"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface which provides functionality for a disconnected {@code RowSet}
to put data updates back to the data source from which the {@code RowSet} was
originally populated. An object implementing this interface is called a
writer.
<p>
The writer must establish a connection to the {@code RowSet}'s database
before writing the data. The {@code RowSet} calling this interface must
implement the {@code RowSetInternal} interface.
<p>
The writer may encounter a situation where the updated data needs to be
written back to the database, but has already been updated there in the mean
time. How a conflict of this kind is handled is determined by the
implementation of this writer.

@see RowSetInternal"
      operation 1888923 "writeData"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "theRowSet" type class_ref 300955 // RowSetInternal
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes changes made in the {@code RowSet}, which is associated with this
{@code RowSetWriter}, back to the database.

@param theRowSet
           a row set that fulfills the following criteria:
           <ul>
           <li>it must implement the {@code RowSetInternal} interface,</li>
           <li>have this {@code RowSetWriter} registered with it,</li>
           <li>must call this method internally.</li>
           </ul>
@return {@code true} if the modified data was written, {@code false}
        otherwise (which typically implies some form of conflict).
@throws SQLException
            if a problem occurs accessing the database."
      end
    end

    class 301467 "StatementEvent"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A statement event that a PreparedStatement is closed

@since 1.6"
      classrelation 535835 // <generalisation>
	relation 535835 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 535835 // <generalisation>
	  b parent class_ref 130587 // EventObject
      end

      attribute 449563 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8089573731826608315L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 535963 // exception (<unidirectional association>)
	relation 535963 --->
	  a role_name "exception" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 535963 // exception (<unidirectional association>)
	  b parent class_ref 220059 // SQLException
      end

      classrelation 536091 // statement (<unidirectional association>)
	relation 536091 --->
	  a role_name "statement" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 536091 // statement (<unidirectional association>)
	  b parent class_ref 220827 // PreparedStatement
      end

      operation 1889051 "StatementEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "con" type class_ref 299931 // PooledConnection
	  param inout name "statement" type class_ref 220827 // PreparedStatement
	  param inout name "exception" type class_ref 220059 // SQLException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "the constructor

@param con
           the statment related connection
@param statement
           the statement to be closed
@param exception
           the exception to throw"
      end

      operation 1889179 "StatementEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "con" type class_ref 299931 // PooledConnection
	  param inout name "statement" type class_ref 220827 // PreparedStatement
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "the constructor with null exception

@param con
           the statment related connection
@param statement
           the statement to be closed"
      end

      operation 1889307 "getStatement"
	public return_type class_ref 220827 // PreparedStatement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the statement of this event"
      end

      operation 1889435 "getSQLException"
	public return_type class_ref 220059 // SQLException
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception to be thrown

@return the exception of this event"
      end
    end
  end

  deploymentview 133659 "sql"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 255259 "CommonDataSource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.PrintWriter;
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 299675 // CommonDataSource
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 255387 "ConnectionEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.sql.SQLException;
import java.util.EventObject;
${definition}"
      associated_classes
	class_ref 299803 // ConnectionEvent
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 255515 "ConnectionEventListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_classes
	class_ref 300059 // ConnectionEventListener
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 255643 "ConnectionPoolDataSource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 300187 // ConnectionPoolDataSource
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 255771 "DataSource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Wrapper;
${definition}"
      associated_classes
	class_ref 300315 // DataSource
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 255899 "PooledConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.sql.Connection;
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 299931 // PooledConnection
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 256027 "RowSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 300571 // RowSet
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 256155 "RowSetEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.EventObject;
${definition}"
      associated_classes
	class_ref 300827 // RowSetEvent
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 256283 "RowSetInternal"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 300955 // RowSetInternal
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 256411 "RowSetListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_classes
	class_ref 300699 // RowSetListener
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 256539 "RowSetMetaData"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 301083 // RowSetMetaData
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 256667 "RowSetReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 301211 // RowSetReader
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 256795 "RowSetWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 301339 // RowSetWriter
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 256923 "StatementEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.EventObject;
${definition}"
      associated_classes
	class_ref 301467 // StatementEvent
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 257051 "StatementEventListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_classes
	class_ref 300443 // StatementEventListener
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
