class ShortcutMenuFragment
!!!12595340.java!!!	getDataXmlId() : int
        return R.xml.shortcut_menu;
!!!12595468.java!!!	getResourceId() : int
        return R.layout.shortcut_sub_menu;
!!!12595596.java!!!	getItemResourceId() : int
        return R.layout.list_item_shortcut;
!!!12595724.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        isPrototyping = TvFramework.getInstance().isPrototyping();
        isTuner = (Wrapper.getWrapperInstance().isTunerInput());
        if (isTuner) {
            isDigitalCh = Wrapper.getWrapperInstance().isDigitalChannel();
        }
        return super.onCreateView(inflater, container, savedInstanceState);
!!!12595852.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        mHandler = new Handler();
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(Utils.TVSERVICE_BOUND);
        mBroadcastReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        Log.d(TAG, "TVSERVICE_BOUND received");
                        boolean oldAllowCC = allowPC_CC;
                        if (Wrapper.getWrapperInstance().allowRatingOrCaption()
                                || TvFramework.getInstance().isPrototyping()) {
                            allowPC_CC = true;
                        }
                        if (allowPC_CC != oldAllowCC) {
                            notifyDataSetChange();
                        }
                    }
                });
            }
        };
        getActivity().registerReceiver(mBroadcastReceiver, intentFilter);
!!!12595980.java!!!	onDestroy() : void
        super.onDestroy();
        getActivity().unregisterReceiver(mBroadcastReceiver);
!!!12596108.java!!!	onResume() : void
        super.onResume();
        if (Wrapper.getWrapperInstance().allowRatingOrCaption()
                || TvFramework.getInstance().isPrototyping())
            allowPC_CC = true;

        refreshMenuData(getData());
        notifyDataSetChange();
!!!12596236.java!!!	setTextViewLayout(inout tv : TextView, in width : int) : void
        int width_1 = width;
        if (width_1 == (int) getResources().getDimension(R.dimen.desc_text_width)) {
            width_1 = (int) getResources().getDimension(R.dimen.shortcut_desc_text_width);
        }
        super.setTextViewLayout(tv, width_1);
!!!12596364.java!!!	setListItemValue(inout view : View, in position : int) : void
        super.setListItemValue(view, position);

        Map<String, Object> map = getData().get(position);
        String titleString = map.get(KEY_TITLE).toString();

        if (titleString.equals(getActivity().getString(R.string.sleep_timer))) {
            Log.d(TAG, "curr_value=" + map.get(KEY_CURR_VALUE));
            startRefreshingSleepTimer(view, (Integer) map.get(KEY_CURR_VALUE) != 0);
        } else if (titleString.equals(getActivity().getString(R.string.audio_track))) {
            enableListItem(view, audioTrackAvailable);
        } else if (titleString.equals(getActivity().getString(R.string.closed_captions))) {
            enableListItem(view, allowPC_CC);
        }
!!!12596492.java!!!	updateValidData(inout map : Map<String, Object>) : boolean
        Object dynamicObject = map.get(KEY_DYNAMIC);
        if (dynamicObject != null && dynamicObject.equals(true)) {
            String title = (String) map.get(KEY_TITLE);
            if (title.equals(getActivity()
                    .getString(R.string.favorite_channel_list))) {
                if (!isPrototyping && !isTuner)
                    return false;
            } else if (title.equals(getActivity()
                    .getString(R.string.closed_captions))) {
                int srcType = Wrapper.getWrapperInstance().getCurrentSourceType();
                if (srcType == TvSourceType.TV_SOURCE_TypeAtv.value()
                        || srcType == TvSourceType.TV_SOURCE_TypeDtv.value()
                        || srcType == TvSourceType.TV_SOURCE_TypeCvbs.value()
                        || srcType == TvSourceType.TV_SOURCE_TypeComponent.value()) {
                    return true;
                } else {
                    return false;
                }
            } else if (title.equals(getActivity().getString(R.string.audio_track))) {
                if (!isPrototyping && (!isTuner || !isDigitalCh))
                    return false;

                Audio audioSettings = TvFramework.getInstance().getAudioInstance();
                int num = audioSettings.getAudioLanguageNumber();
                audioTrackAvailable = (num > 1 && num < 16); // audio track can
                                                             // be changed when
                                                             // num >=2
                String[] nameArray = null;
                int[] valueArray = null;
                if (num > 0 && num < 16) {
                    nameArray = new String[num];
                    valueArray = new int[num];
                    for (int i = 0; i < num; i++) {
                        String nameString;
                        nameString = audioSettings.getAudioLanguageDescription(i);
                        if (nameString == null || nameString.isEmpty()) {
                            nameString = getResources().getString(R.string.track) + " "
                                    + String.valueOf(i + 1);
                        } else {
                            nameString = String.valueOf(i + 1) + ". " + nameString;
                        }
                        nameArray[i] = nameString;
                        valueArray[i] = i;
                    }
                } else {
                    num = 1;
                    nameArray = new String[num];
                    valueArray = new int[num];
                    nameArray[0] = getResources().getString(R.string.none);
                    valueArray[0] = 0;
                }
                putToMap(map, KEY_LIST_COUNT, num);
                putToMap(map, KEY_LIST_NAMES, nameArray);
                putToMap(map, KEY_LIST_VALUES, valueArray);

            } else if (title.equals(
                    getActivity().getString(R.string.curr_audio_mts))) {
                if (!isTuner || isDigitalCh)
                    return false;

            } else if (title.equals(getActivity().getString(R.string.screen_mode))) {
                boolean isTuner = Wrapper.getWrapperInstance().isTunerInput();
                if (!isTuner) {
                    CharSequence[] listNames = getActivity().getResources().getTextArray(
                            R.array.screen_mode_nonTuner);
                    int[] listValues = getActivity().getResources().getIntArray(
                            R.array.ScreenModeValueList_nonTuner);
                    map.put(KEY_LIST_COUNT, listNames.length);
                    map.put(KEY_LIST_NAMES, listNames);
                    map.put(KEY_LIST_VALUES, listValues);
                }
            }
        }
        return super.updateValidData(map);
!!!12596620.java!!!	startRefreshingSleepTimer(inout sleepView : View, inout start : boolean) : void
        if (refreshSleepTimer == start) {
            return;
        }

        Log.v(TAG, "startRefreshingSleepTimer start=" + start);
        refreshSleepTimer = start;
        if (refreshSleepTimer) {
            final TextView tv = ((TextView) sleepView.findViewById(R.id.SelectionText));
            final String mMinuteStr = getActivity().getResources().getString(R.string.minutes);
            final String mHourStr = getActivity().getResources().getString(R.string.hour);
            final String mHoursStr = getActivity().getResources().getString(R.string.hours);
            final Handler handler = new Handler() {
                @Override
                public void handleMessage(Message msg) {
                    super.handleMessage(msg);
                    int remainMin = Utils.getSleepTimerRemainingMinutes();
                    if (remainMin == 60) {
                        tv.setText("1 " + mHourStr);
                    } else if (remainMin == 0) {
                        tv.setText(R.string.expired);
                    } else if (remainMin % 60 == 0) {
                        tv.setText(remainMin / 60 + " " + mHoursStr);
                    } else {
                        tv.setText(remainMin + " " + mMinuteStr);
                    }
                }
            };

            TimerTask timerTask = new TimerTask() {
                @Override
                public void run() {
                    handler.sendEmptyMessage(0);
                }
            };

            mTimer = new Timer();
            mTimer.schedule(timerTask, 0, Utils.ONE_MINUTE);
        } else if (mTimer != null) {
            mTimer.cancel();
            mTimer.purge();
        }
