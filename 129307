format 74
"reflect" // _unknown::java::lang::reflect
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/lang/reflect/"
  java_package "java.lang.reflect"
  classview 129307 "reflect"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 144155 "Method"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents a method. Information about the method can be accessed,
and the method can be invoked dynamically."
      classrelation 217627 // <generalisation>
	relation 217627 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 217627 // <generalisation>
	  b parent class_ref 164251 // AccessibleObject
      end

      classrelation 217755 // <realization>
	relation 217755 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 217755 // <realization>
	  b parent class_ref 149403 // GenericDeclaration
      end

      classrelation 217883 // <realization>
	relation 217883 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 217883 // <realization>
	  b parent class_ref 149915 // Member
      end

      classrelation 218011 // ORDER_BY_SIGNATURE (<unidirectional association>)
	relation 218011 --->
	  a role_name "ORDER_BY_SIGNATURE" init_value " new Comparator<Method>() {
        public int compare(Method a, Method b) {
            int comparison = a.name.compareTo(b.name);
            if (comparison != 0) {
                return comparison;
            }

            Class<?>[] aParameters = a.parameterTypes;
            Class<?>[] bParameters = b.parameterTypes;
            int length = Math.min(aParameters.length, bParameters.length);
            for (int i = 0; i < length; i++) {
                comparison = aParameters[i].getName().compareTo(bParameters[i].getName());
                if (comparison != 0) {
                    return comparison;
                }
            }

            if (aParameters.length != bParameters.length) {
                return aParameters.length - bParameters.length;
            }

            // this is necessary for methods that have covariant return types.
            return a.getReturnType().getName().compareTo(b.getReturnType().getName());
        }
    }" class_relation const_relation public
	    comment "
Orders methods by their name, parameters and return type.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Method> ${name}${value};
"
	    classrelation_ref 218011 // ORDER_BY_SIGNATURE (<unidirectional association>)
	  b parent class_ref 3094156 // Comparator
      end

      attribute 199323 "slot"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 218139 // declaringClass (<unidirectional association>)
	relation 218139 --->
	  a role_name "declaringClass" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 218139 // declaringClass (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 218267 // name (<unidirectional association>)
	relation 218267 --->
	  a role_name "name" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 218267 // name (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 218395 // parameterTypes (<unidirectional association>)
	relation 218395 --->
	  a role_name "parameterTypes" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 218395 // parameterTypes (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 218523 // exceptionTypes (<unidirectional association>)
	relation 218523 --->
	  a role_name "exceptionTypes" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 218523 // exceptionTypes (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 218651 // returnType (<unidirectional association>)
	relation 218651 --->
	  a role_name "returnType" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 218651 // returnType (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 218779 // genericExceptionTypes (<unidirectional association>)
	relation 218779 --->
	  a role_name "genericExceptionTypes" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 218779 // genericExceptionTypes (<unidirectional association>)
	  b parent class_ref 164635 // ListOfTypes
      end

      classrelation 218907 // genericParameterTypes (<unidirectional association>)
	relation 218907 --->
	  a role_name "genericParameterTypes" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 218907 // genericParameterTypes (<unidirectional association>)
	  b parent class_ref 164635 // ListOfTypes
      end

      classrelation 219035 // genericReturnType (<unidirectional association>)
	relation 219035 --->
	  a role_name "genericReturnType" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 219035 // genericReturnType (<unidirectional association>)
	  b parent class_ref 149659 // Type
      end

      classrelation 219163 // formalTypeParameters (<unidirectional association>)
	relation 219163 --->
	  a role_name "formalTypeParameters" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Method>${multiplicity} ${name}${value};
"
	    classrelation_ref 219163 // formalTypeParameters (<unidirectional association>)
	  b parent class_ref 149531 // TypeVariable
      end

      attribute 199451 "genericTypesAreInitialized"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 479515 "initGenericTypes"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 479643 "Method"
	package explicit_return_type ""
	nparams 1
	  param inout name "orig" type class_ref 144155 // Method
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a clone of the given instance.

@param orig non-null; the original instance to clone

package"
      end

      operation 479771 "Method"
	private explicit_return_type ""
	nparams 6
	  param inout name "declaring" type class_ref 3421708 // Class
	  param inout name "paramTypes" type class_ref 3421708 // Class
	  param inout name "exceptTypes" type class_ref 3421708 // Class
	  param inout name "returnType" type class_ref 3421708 // Class
	  param inout name "name" type class_ref 3399692 // String
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}<?>[] ${p1}, ${t2}<?>[] ${p2}, ${t3}<?> ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 479899 "getTypeParameters"
	public return_type class_ref 149531 // TypeVariable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 480027 "getSignatureAttribute"
	package return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " {@inheritDoc} 
package"
      end

      operation 480155 "getSignatureAnnotation"
	class_operation package return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Returns the Signature annotation for this method. Returns {@code null} if
not found."
      end

      operation 480283 "toGenericString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the method's declaration, including
the type parameters.

@return the string representation of this method"
      end

      operation 480411 "getGenericParameterTypes"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameter types as an array of {@code Type} instances, in
declaration order. If this method has no parameters, an empty array is
returned.

@return the parameter types

@throws GenericSignatureFormatError
            if the generic method signature is invalid
@throws TypeNotPresentException
            if any parameter type points to a missing type
@throws MalformedParameterizedTypeException
            if any parameter type points to a type that cannot be
            instantiated for some reason"
      end

      operation 480539 "getGenericExceptionTypes"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception types as an array of {@code Type} instances. If
this method has no declared exceptions, an empty array will be returned.

@return an array of generic exception types

@throws GenericSignatureFormatError
            if the generic method signature is invalid
@throws TypeNotPresentException
            if any exception type points to a missing type
@throws MalformedParameterizedTypeException
            if any exception type points to a type that cannot be
            instantiated for some reason"
      end

      operation 480667 "getGenericReturnType"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the return type of this method as a {@code Type} instance.

@return the return type of this method

@throws GenericSignatureFormatError
            if the generic method signature is invalid
@throws TypeNotPresentException
            if the return type points to a missing type
@throws MalformedParameterizedTypeException
            if the return type points to a type that cannot be
            instantiated for some reason"
      end

      operation 480795 "getDeclaredAnnotations"
	public return_type class_ref 149275 // Annotation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 480923 "getDeclaredAnnotations"
	class_operation package return_type class_ref 149275 // Annotation
	nparams 2
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 481051 "getAnnotation"
	public explicit_return_type "A"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends Annotation> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 481179 "getAnnotation"
	class_operation package explicit_return_type "A"
	nparams 3
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native <A extends Annotation> ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<A> ${p2}${)}${throws};
"
	
	
	
      end

      operation 481307 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 481435 "isAnnotationPresent"
	class_operation package explicit_return_type "boolean"
	nparams 3
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<? extends Annotation> ${p2}${)}${throws};
"
	
	
	
      end

      classrelation 219291 // NO_ANNOTATIONS (<unidirectional association>)
	relation 219291 --->
	  a role_name "NO_ANNOTATIONS" multiplicity "[]" init_value " new Annotation[0]" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 219291 // NO_ANNOTATIONS (<unidirectional association>)
	  b parent class_ref 149275 // Annotation
      end

      operation 481563 "noAnnotations"
	class_operation package return_type class_ref 149275 // Annotation
	nparams 1
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an array of empty Annotation arrays.

package"
      end

      operation 481691 "getParameterAnnotations"
	public return_type class_ref 149275 // Annotation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of arrays that represent the annotations of the formal
parameters of this method. If there are no parameters on this method,
then an empty array is returned. If there are no annotations set, then
and array of empty arrays is returned.

@return an array of arrays of {@code Annotation} instances"
      end

      operation 481819 "getParameterAnnotations"
	class_operation package return_type class_ref 149275 // Annotation
	nparams 2
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[][] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 481947 "isVarArgs"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this method takes a variable number argument.

@return {@code true} if a vararg is declared, {@code false} otherwise"
      end

      operation 482075 "isBridge"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this method is a bridge.

@return {@code true} if this method is a bridge, {@code false} otherwise"
      end

      operation 482203 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this method is synthetic.

@return {@code true} if this method is synthetic, {@code false} otherwise"
      end

      operation 482331 "getDefaultValue"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value for the annotation member represented by this
method.

@return the default value, or {@code null} if none

@throws TypeNotPresentException
            if this annotation member is of type {@code Class} and no
            definition can be found"
      end

      operation 482459 "getDefaultValue"
	private return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 482587 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether or not the specified {@code object} is equal to this
method. To be equal, the specified object must be an instance
of {@code Method} with the same declaring class and parameter types
as this method.

@param object
           the object to compare

@return {@code true} if the specified object is equal to this
        method, {@code false} otherwise

@see #hashCode"
      end

      operation 482715 "getDeclaringClass"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class that declares this method.

@return the declaring class"
      end

      operation 482843 "getExceptionTypes"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception types as an array of {@code Class} instances. If
this method has no declared exceptions, an empty array is returned.

@return the declared exception classes"
      end

      operation 482971 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the modifiers for this method. The {@link Modifier} class should
be used to decode the result.

@return the modifiers for this method

@see Modifier"
      end

      operation 483099 "getMethodModifiers"
	class_operation package explicit_return_type "int"
	nparams 2
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 483227 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the method represented by this {@code Method}
instance.

@return the name of this method"
      end

      operation 483355 "getParameterTypes"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Class} objects associated with the parameter
types of this method. If the method was declared with no parameters, an
empty array will be returned.

@return the parameter types"
      end

      operation 483483 "getReturnType"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Class} associated with the return type of this
method.

@return the return type"
      end

      operation 483611 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an integer hash code for this method. Objects which are equal
return the same value for this method. The hash code for this Method is
the hash code of the name of this method.

@return hash code for this method

@see #equals"
      end

      operation 483739 "invoke"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "receiver" type class_ref 3401484 // Object
	  param inout name "" explicit_type "Object...args"
	nexceptions 3
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 164763 // InvocationTargetException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of dynamically invoking this method. Equivalent to
{@code receiver.methodName(arg1, arg2, ... , argN)}.

<p>If the method is static, the receiver argument is ignored (and may be null).

<p>If the method takes no arguments, you can pass {@code (Object[]) null} instead of
allocating an empty array.

<p>If you're calling a varargs method, you need to pass an {@code Object[]} for the
varargs parameter: that conversion is usually done in {@code javac}, not the VM, and
the reflection machinery does not do this for you. (It couldn't, because it would be
ambiguous.)

<p>Reflective method invocation follows the usual process for method lookup.

<p>If an exception is thrown during the invocation it is caught and
wrapped in an InvocationTargetException. This exception is then thrown.

<p>If the invocation completes normally, the return value itself is
returned. If the method is declared to return a primitive type, the
return value is boxed. If the return type is void, null is returned.

@param receiver
           the object on which to call this method (or null for static methods)
@param args
           the arguments to the method
@return the result

@throws NullPointerException
            if {@code receiver == null} for a non-static method
@throws IllegalAccessException
            if this method is not accessible (see {@link AccessibleObject})
@throws IllegalArgumentException
            if the number of arguments doesn't match the number of parameters, the receiver
            is incompatible with the declaring class, or an argument could not be unboxed
            or converted by a widening conversion to the corresponding parameter type
@throws InvocationTargetException
            if an exception was thrown by the invoked method"
      end

      operation 483867 "invokeNative"
	private return_type class_ref 3401484 // Object
	nparams 7
	  param inout name "obj" type class_ref 3401484 // Object
	  param inout name "args" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "parameterTypes" type class_ref 3421708 // Class
	  param inout name "returnType" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 164763 // InvocationTargetException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}<?> ${p2}, ${t3}<?>[] ${p3}, ${t4}<?> ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws};
"
	
	
	
      end

      operation 483995 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string containing a concise, human-readable description of this
method. The format of the string is:

<ol>
  <li>modifiers (if any)
  <li>return type or 'void'
  <li>declaring class name
  <li>'('
  <li>parameter types, separated by ',' (if any)
  <li>')'
  <li>'throws' plus exception types, separated by ',' (if any)
</ol>

For example: {@code public native Object
java.lang.Method.invoke(Object,Object) throws
IllegalAccessException,IllegalArgumentException
,InvocationTargetException}

@return a printable representation for this method"
      end

      operation 484123 "getSignature"
	private return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unused\")
"
	
	
	
	comment "Returns the constructor's signature in non-printable form. This is called
(only) from IO native code and needed for deriving the serialVersionUID
of the class

@return The constructor's signature."
      end
    end

    class 144283 "Field"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents a field. Information about the field can be accessed,
and the field's value can be accessed dynamically."
      classrelation 216091 // <generalisation>
	relation 216091 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 216091 // <generalisation>
	  b parent class_ref 164251 // AccessibleObject
      end

      classrelation 216219 // <realization>
	relation 216219 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 216219 // <realization>
	  b parent class_ref 149915 // Member
      end

      classrelation 216347 // ORDER_BY_NAME_AND_DECLARING_CLASS (<unidirectional association>)
	relation 216347 --->
	  a role_name "ORDER_BY_NAME_AND_DECLARING_CLASS" init_value " new Comparator<Field>() {
        @Override public int compare(Field a, Field b) {
            int comparison = a.name.compareTo(b.name);
            if (comparison != 0) {
                return comparison;
            }

            return a.getDeclaringClass().getName().compareTo(b.getDeclaringClass().getName());
        }
    }" class_relation const_relation public
	    comment "
Orders fields by their name and declaring class.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Field> ${name}${value};
"
	    classrelation_ref 216347 // ORDER_BY_NAME_AND_DECLARING_CLASS (<unidirectional association>)
	  b parent class_ref 3094156 // Comparator
      end

      classrelation 216475 // declaringClass (<unidirectional association>)
	relation 216475 --->
	  a role_name "declaringClass" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 216475 // declaringClass (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 216603 // type (<unidirectional association>)
	relation 216603 --->
	  a role_name "type" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 216603 // type (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 216731 // genericType (<unidirectional association>)
	relation 216731 --->
	  a role_name "genericType" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 216731 // genericType (<unidirectional association>)
	  b parent class_ref 149659 // Type
      end

      attribute 197659 "genericTypesAreInitialized"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 216859 // name (<unidirectional association>)
	relation 216859 --->
	  a role_name "name" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 216859 // name (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 197787 "slot"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 197915 "TYPE_BOOLEAN"
	class_attribute const_attribute private explicit_type "char"
	init_value " 'Z'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198043 "TYPE_BYTE"
	class_attribute const_attribute private explicit_type "char"
	init_value " 'B'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198171 "TYPE_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " 'C'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198299 "TYPE_SHORT"
	class_attribute const_attribute private explicit_type "char"
	init_value " 'S'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198427 "TYPE_INTEGER"
	class_attribute const_attribute private explicit_type "char"
	init_value " 'I'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198555 "TYPE_FLOAT"
	class_attribute const_attribute private explicit_type "char"
	init_value " 'F'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198683 "TYPE_LONG"
	class_attribute const_attribute private explicit_type "char"
	init_value " 'J'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 198811 "TYPE_DOUBLE"
	class_attribute const_attribute private explicit_type "char"
	init_value " 'D'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 470683 "Field"
	package explicit_return_type ""
	nparams 1
	  param inout name "orig" type class_ref 144283 // Field
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a clone of the given instance.

@param orig non-null; the original instance to clone

package"
      end

      operation 470811 "Field"
	private explicit_return_type ""
	nparams 4
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param inout name "name" type class_ref 3399692 // String
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 470939 "initGenericType"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 471067 "getSignatureAttribute"
	package return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " {@inheritDoc} 
 package "
      end

      operation 471195 "getSignatureAnnotation"
	private return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Get the Signature annotation for this field. Returns null if not found."
      end

      operation 471323 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this field is synthetic.

@return {@code true} if this field is synthetic, {@code false} otherwise"
      end

      operation 471451 "toGenericString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of this field, including the field's
generic type.

@return the string representation of this field"
      end

      operation 471579 "isEnumConstant"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this field is an enumeration constant.

@return {@code true} if this field is an enumeration constant, {@code
        false} otherwise"
      end

      operation 471707 "getGenericType"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the generic type of this field.

@return the generic type
@throws GenericSignatureFormatError
            if the generic field signature is invalid
@throws TypeNotPresentException
            if the generic type points to a missing type
@throws MalformedParameterizedTypeException
            if the generic type points to a type that cannot be
            instantiated for some reason"
      end

      operation 471835 "getDeclaredAnnotations"
	public return_type class_ref 149275 // Annotation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 471963 "getDeclaredAnnotations"
	class_operation private return_type class_ref 149275 // Annotation
	nparams 2
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 472091 "getAnnotation"
	public explicit_return_type "A"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends Annotation> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 472219 "getAnnotation"
	class_operation private explicit_return_type "A"
	nparams 3
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native <A extends Annotation> ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<A> ${p2}${)}${throws};
"
	
	
	
      end

      operation 472347 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 472475 "isAnnotationPresent"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<? extends Annotation> ${p2}${)}${throws};
"
	
	
	
      end

      operation 472603 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether or not the specified {@code object} is equal to this
field. To be equal, the specified object must be an instance of
{@code Field} with the same declaring class, type and name as this field.

@param object
           the object to compare
@return {@code true} if the specified object is equal to this method,
        {@code false} otherwise
@see #hashCode"
      end

      operation 472731 "get"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field in the specified object. This reproduces
the effect of {@code object.fieldName}

<p>If the type of this field is a primitive type, the field value is
automatically boxed.

<p>If this field is static, the object argument is ignored.
Otherwise, if the object is null, a NullPointerException is thrown. If
the object is not an instance of the declaring class of the method, an
IllegalArgumentException is thrown.

<p>If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

@param object
           the object to access
@return the field value, possibly boxed
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 472859 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field in the specified object as a {@code
boolean}. This reproduces the effect of {@code object.fieldName}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

@param object
           the object to access
@return the field value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 472987 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field in the specified object as a {@code byte}.
This reproduces the effect of {@code object.fieldName}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

@param object
           the object to access
@return the field value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 473115 "getChar"
	public explicit_return_type "char"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field in the specified object as a {@code char}.
This reproduces the effect of {@code object.fieldName}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

@param object
           the object to access
@return the field value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 473243 "getDeclaringClass"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class that declares this field.

@return the declaring class"
      end

      operation 473371 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field in the specified object as a {@code
double}. This reproduces the effect of {@code object.fieldName}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

@param object
           the object to access
@return the field value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 473499 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field in the specified object as a {@code float}
. This reproduces the effect of {@code object.fieldName}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

@param object
           the object to access
@return the field value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 473627 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field in the specified object as an {@code int}.
This reproduces the effect of {@code object.fieldName}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

@param object
           the object to access
@return the field value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 473755 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field in the specified object as a {@code long}.
This reproduces the effect of {@code object.fieldName}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

@param object
           the object to access
@return the field value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 473883 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the modifiers for this field. The {@link Modifier} class should
be used to decode the result.

@return the modifiers for this field
@see Modifier"
      end

      operation 474011 "getFieldModifiers"
	private explicit_return_type "int"
	nparams 2
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 474139 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this field.

@return the name of this field"
      end

      operation 474267 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the field in the specified object as a {@code short}
. This reproduces the effect of {@code object.fieldName}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

@param object
           the object to access
@return the field value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 474395 "getSignature"
	private return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unused\")
"
	
	
	
	comment "Returns the constructor's signature in non-printable form. This is called
(only) from IO native code and needed for deriving the serialVersionUID
of the class

@return the constructor's signature."
      end

      operation 474523 "getType"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the {@link Class} associated with the type of this field.

@return the type of this field"
      end

      operation 474651 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an integer hash code for this field. Objects which are equal
return the same value for this method.
<p>
The hash code for a Field is the exclusive-or combination of the hash
code of the field's name and the hash code of the name of its declaring
class.

@return the hash code for this field
@see #equals"
      end

      operation 474779 "set"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "value" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the field in the specified object to the value. This
reproduces the effect of {@code object.fieldName = value}

<p>If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.

<p>If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.

<p>If the field type is a primitive type, the value is automatically
unboxed. If the unboxing fails, an IllegalArgumentException is thrown. If
the value cannot be converted to the field type via a widening
conversion, an IllegalArgumentException is thrown.

@param object
           the object to access
@param value
           the new value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 474907 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "value" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the field in the specified object to the {@code
boolean} value. This reproduces the effect of {@code object.fieldName =
value}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.
<p>
If the value cannot be converted to the field type via a widening
conversion, an IllegalArgumentException is thrown.

@param object
           the object to access
@param value
           the new value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 475035 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param in name "value" explicit_type "byte"
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the field in the specified object to the {@code byte}
value. This reproduces the effect of {@code object.fieldName = value}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.
<p>
If the value cannot be converted to the field type via a widening
conversion, an IllegalArgumentException is thrown.

@param object
           the object to access
@param value
           the new value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 475163 "setChar"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param in name "value" explicit_type "char"
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the field in the specified object to the {@code char}
value. This reproduces the effect of {@code object.fieldName = value}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.
<p>
If the value cannot be converted to the field type via a widening
conversion, an IllegalArgumentException is thrown.

@param object
           the object to access
@param value
           the new value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 475291 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param in name "value" explicit_type "double"
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the field in the specified object to the {@code double}
value. This reproduces the effect of {@code object.fieldName = value}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.
<p>
If the value cannot be converted to the field type via a widening
conversion, an IllegalArgumentException is thrown.

@param object
           the object to access
@param value
           the new value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 475419 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param in name "value" explicit_type "float"
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the field in the specified object to the {@code float}
value. This reproduces the effect of {@code object.fieldName = value}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.
<p>
If the value cannot be converted to the field type via a widening
conversion, an IllegalArgumentException is thrown.

@param object
           the object to access
@param value
           the new value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 475547 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param in name "value" explicit_type "int"
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the value of the field in the specified object to the {@code int}
value. This reproduces the effect of {@code object.fieldName = value}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.
<p>
If the value cannot be converted to the field type via a widening
conversion, an IllegalArgumentException is thrown.

@param object
           the object to access
@param value
           the new value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 475675 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param in name "value" explicit_type "long"
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the field in the specified object to the {@code long}
value. This reproduces the effect of {@code object.fieldName = value}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.
<p>
If the value cannot be converted to the field type via a widening
conversion, an IllegalArgumentException is thrown.

@param object
           the object to access
@param value
           the new value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 475803 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 3401484 // Object
	  param in name "value" explicit_type "short"
	nexceptions 2
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the field in the specified object to the {@code short}
value. This reproduces the effect of {@code object.fieldName = value}
<p>
If this field is static, the object argument is ignored.
Otherwise, if the object is {@code null}, a NullPointerException is
thrown. If the object is not an instance of the declaring class of the
method, an IllegalArgumentException is thrown.
<p>
If this Field object is enforcing access control (see AccessibleObject)
and this field is not accessible from the current context, an
IllegalAccessException is thrown.
<p>
If the value cannot be converted to the field type via a widening
conversion, an IllegalArgumentException is thrown.

@param object
           the object to access
@param value
           the new value
@throws NullPointerException
            if the object is {@code null} and the field is non-static
@throws IllegalArgumentException
            if the object is not compatible with the declaring class
@throws IllegalAccessException
            if this field is not accessible"
      end

      operation 475931 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string containing a concise, human-readable description of this
field.
<p>
The format of the string is:
<ol>
  <li>modifiers (if any)
  <li>type
  <li>declaring class name
  <li>'.'
  <li>field name
</ol>
<p>
For example: {@code public static java.io.InputStream
java.lang.System.in}

@return a printable representation for this field"
      end

      operation 476059 "getField"
	private return_type class_ref 3401484 // Object
	nparams 5
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws};
"
	
	
	
      end

      operation 476187 "getDField"
	private explicit_return_type "double"
	nparams 6
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 476315 "getIField"
	private explicit_return_type "int"
	nparams 6
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 476443 "getJField"
	private explicit_return_type "long"
	nparams 6
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 476571 "getZField"
	private explicit_return_type "boolean"
	nparams 6
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 476699 "getFField"
	private explicit_return_type "float"
	nparams 6
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 476827 "getCField"
	private explicit_return_type "char"
	nparams 6
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 476955 "getSField"
	private explicit_return_type "short"
	nparams 6
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 477083 "getBField"
	private explicit_return_type "byte"
	nparams 6
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 477211 "setField"
	private explicit_return_type "void"
	nparams 6
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param inout name "value" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws};
"
	
	
	
      end

      operation 477339 "setDField"
	private explicit_return_type "void"
	nparams 7
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	  param in name "v" explicit_type "double"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws};
"
	
	
	
      end

      operation 477467 "setIField"
	private explicit_return_type "void"
	nparams 7
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	  param in name "i" explicit_type "int"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws};
"
	
	
	
      end

      operation 477595 "setJField"
	private explicit_return_type "void"
	nparams 7
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	  param in name "j" explicit_type "long"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws};
"
	
	
	
      end

      operation 477723 "setZField"
	private explicit_return_type "void"
	nparams 7
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	  param inout name "z" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws};
"
	
	
	
      end

      operation 477851 "setFField"
	private explicit_return_type "void"
	nparams 7
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	  param in name "f" explicit_type "float"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws};
"
	
	
	
      end

      operation 477979 "setCField"
	private explicit_return_type "void"
	nparams 7
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	  param in name "c" explicit_type "char"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws};
"
	
	
	
      end

      operation 478107 "setSField"
	private explicit_return_type "void"
	nparams 7
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	  param in name "s" explicit_type "short"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws};
"
	
	
	
      end

      operation 478235 "setBField"
	private explicit_return_type "void"
	nparams 7
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "type" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	  param in name "descriptor" explicit_type "char"
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 150427 // IllegalAccessException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws};
"
	
	
	
      end
    end

    class 144411 "Constructor"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents a constructor. Information about the constructor can be
accessed, and the constructor can be invoked dynamically.

@param <T> the class that declares this constructor"
      classrelation 214939 // <generalisation>
	relation 214939 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 214939 // <generalisation>
	  b parent class_ref 164251 // AccessibleObject
      end

      classrelation 215067 // <realization>
	relation 215067 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 215067 // <realization>
	  b parent class_ref 149403 // GenericDeclaration
      end

      classrelation 215195 // <realization>
	relation 215195 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 215195 // <realization>
	  b parent class_ref 149915 // Member
      end

      classrelation 215323 // declaringClass (<unidirectional association>)
	relation 215323 --->
	  a role_name "declaringClass" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 215323 // declaringClass (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 215451 // parameterTypes (<unidirectional association>)
	relation 215451 --->
	  a role_name "parameterTypes" multiplicity "[]" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 215451 // parameterTypes (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 215579 // exceptionTypes (<unidirectional association>)
	relation 215579 --->
	  a role_name "exceptionTypes" multiplicity "[]" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 215579 // exceptionTypes (<unidirectional association>)
	  b parent class_ref 3421708 // Class
      end

      classrelation 215707 // genericExceptionTypes (<unidirectional association>)
	relation 215707 --->
	  a role_name "genericExceptionTypes" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 215707 // genericExceptionTypes (<unidirectional association>)
	  b parent class_ref 164635 // ListOfTypes
      end

      classrelation 215835 // genericParameterTypes (<unidirectional association>)
	relation 215835 --->
	  a role_name "genericParameterTypes" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 215835 // genericParameterTypes (<unidirectional association>)
	  b parent class_ref 164635 // ListOfTypes
      end

      classrelation 215963 // formalTypeParameters (<unidirectional association>)
	relation 215963 --->
	  a role_name "formalTypeParameters" multiplicity "[]" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Constructor<T>>${multiplicity} ${name}${value};
"
	    classrelation_ref 215963 // formalTypeParameters (<unidirectional association>)
	  b parent class_ref 149531 // TypeVariable
      end

      attribute 197403 "genericTypesAreInitialized"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 467483 "initGenericTypes"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 197531 "slot"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 467611 "Constructor"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prevent this class from being instantiated."
      end

      operation 467739 "Constructor"
	private explicit_return_type ""
	nparams 4
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "ptypes" type class_ref 3421708 // Class
	  param inout name "extypes" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<?>[] ${p1}, ${t2}<?>[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of the class. Only called from native code, thus
private.

@param declaringClass
           the class this constructor object belongs to
@param ptypes
           the parameter types of the constructor
@param extypes
           the exception types of the constructor
@param slot
           the slot of the constructor inside the VM class structure"
      end

      operation 467867 "getSignatureAttribute"
	package return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "package"
      end

      operation 467995 "getTypeParameters"
	public return_type class_ref 149531 // TypeVariable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Constructor<T>>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 468123 "toGenericString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the constructor's declaration,
including the type parameters.

@return the string representation of the constructor's declaration"
      end

      operation 468251 "getGenericParameterTypes"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the generic parameter types as an array of {@code Type}
instances, in declaration order. If this constructor has no generic
parameters, an empty array is returned.

@return the parameter types

@throws GenericSignatureFormatError
            if the generic constructor signature is invalid
@throws TypeNotPresentException
            if any parameter type points to a missing type
@throws MalformedParameterizedTypeException
            if any parameter type points to a type that cannot be
            instantiated for some reason"
      end

      operation 468379 "getGenericExceptionTypes"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception types as an array of {@code Type} instances. If
this constructor has no declared exceptions, an empty array will be
returned.

@return an array of generic exception types

@throws GenericSignatureFormatError
            if the generic constructor signature is invalid
@throws TypeNotPresentException
            if any exception type points to a missing type
@throws MalformedParameterizedTypeException
            if any exception type points to a type that cannot be
            instantiated for some reason"
      end

      operation 468507 "getDeclaredAnnotations"
	public return_type class_ref 149275 // Annotation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 468635 "getAnnotation"
	public explicit_return_type "A"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends Annotation> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 468763 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 468891 "getParameterAnnotations"
	public return_type class_ref 149275 // Annotation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of arrays that represent the annotations of the formal
parameters of this constructor. If there are no parameters on this
constructor, then an empty array is returned. If there are no annotations
set, then an array of empty arrays is returned.

@return an array of arrays of {@code Annotation} instances"
      end

      operation 469019 "isVarArgs"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this constructor takes a variable number of
arguments.

@return {@code true} if a vararg is declare, otherwise
        {@code false}"
      end

      operation 469147 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this constructor is synthetic (artificially
introduced by the compiler).

@return {@code true} if this constructor is synthetic, {@code false}
        otherwise"
      end

      operation 469275 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether or not the specified {@code object} is equal to this
constructor. To be equal, the specified object must be an instance
of {@code Constructor} with the same declaring class and parameter types
as this constructor.

@param object
           the object to compare

@return {@code true} if the specified object is equal to this
        constructor, {@code false} otherwise

@see #hashCode"
      end

      operation 469403 "getDeclaringClass"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class that declares this constructor.

@return the declaring class"
      end

      operation 469531 "getExceptionTypes"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception types as an array of {@code Class} instances. If
this constructor has no declared exceptions, an empty array will be
returned.

@return the declared exception classes"
      end

      operation 469659 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the modifiers for this constructor. The {@link Modifier} class
should be used to decode the result.

@return the modifiers for this constructor

@see Modifier"
      end

      operation 469787 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this constructor.

@return the name of this constructor"
      end

      operation 469915 "getParameterTypes"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of the {@code Class} objects associated with the
parameter types of this constructor. If the constructor was declared with
no parameters, an empty array will be returned.

@return the parameter types"
      end

      operation 470043 "getSignature"
	private return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unused\")
"
	
	
	
	comment "Returns the constructor's signature in non-printable form. This is called
(only) from IO native code and needed for deriving the serialVersionUID
of the class

@return the constructor's signature"
      end

      operation 470171 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an integer hash code for this constructor. Constructors which are
equal return the same value for this method. The hash code for a
Constructor is the hash code of the name of the declaring class.

@return the hash code

@see #equals"
      end

      operation 470299 "newInstance"
	public explicit_return_type "T"
	nparams 1
	  param inout name "" explicit_type "Object...args"
	nexceptions 4
	  exception class_ref 150299 // InstantiationException
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 164763 // InvocationTargetException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of the declaring class, initialized by dynamically
invoking the constructor represented by this {@code Constructor} object.
This reproduces the effect of {@code new declaringClass(arg1, arg2, ... ,
argN)} This method performs the following:
<ul>
<li>A new instance of the declaring class is created. If the declaring
class cannot be instantiated (i.e. abstract class, an interface, an array
type, or a primitive type) then an InstantiationException is thrown.</li>
<li>If this Constructor object is enforcing access control (see
{@link AccessibleObject}) and this constructor is not accessible from the
current context, an IllegalAccessException is thrown.</li>
<li>If the number of arguments passed and the number of parameters do not
match, an IllegalArgumentException is thrown.</li>
<li>For each argument passed:
<ul>
<li>If the corresponding parameter type is a primitive type, the argument
is unboxed. If the unboxing fails, an IllegalArgumentException is
thrown.</li>
<li>If the resulting argument cannot be converted to the parameter type
via a widening conversion, an IllegalArgumentException is thrown.</li>
</ul>
<li>The constructor represented by this {@code Constructor} object is
then invoked. If an exception is thrown during the invocation, it is
caught and wrapped in an InvocationTargetException. This exception is
then thrown. If the invocation completes normally, the newly initialized
object is returned.
</ul>

@param args
           the arguments to the constructor

@return the new, initialized, object

@exception InstantiationException
               if the class cannot be instantiated
@exception IllegalAccessException
               if this constructor is not accessible
@exception IllegalArgumentException
               if an incorrect number of arguments are passed, or an
               argument could not be converted by a widening conversion
@exception InvocationTargetException
               if an exception was thrown by the invoked constructor

@see AccessibleObject"
      end

      operation 470427 "constructNative"
	private explicit_return_type "T"
	nparams 5
	  param inout name "args" type class_ref 3401484 // Object
	  param inout name "declaringClass" type class_ref 3421708 // Class
	  param inout name "parameterTypes" type class_ref 3421708 // Class
	  param in name "slot" explicit_type "int"
	  param inout name "noAccessCheck" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 150299 // InstantiationException
	  exception class_ref 150427 // IllegalAccessException
	  exception class_ref 164763 // InvocationTargetException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1}<T> ${p1}, ${t2}<?>[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws};
"
	
	
	
      end

      operation 470555 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string containing a concise, human-readable description of this
constructor. The format of the string is:

<ol>
  <li>modifiers (if any)
  <li>declaring class name
  <li>'('
  <li>parameter types, separated by ',' (if any)
  <li>')'
  <li>'throws' plus exception types, separated by ',' (if any)
</ol>

For example:
{@code public String(byte[],String) throws UnsupportedEncodingException}

@return a printable representation for this constructor"
      end
    end

    class 149147 "AnnotatedElement"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface provides reflective access to annotation information.

@since 1.5"
      operation 306075 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns, for this element, the annotation with the specified type, or
{@code null} if no annotation with the specified type is present
(including inherited annotations).

@param annotationType
           the type of the annotation to search for
@return the annotation with the specified type or {@code null}
@throws NullPointerException
            if {@code annotationType} is {@code null}"
      end

      operation 306203 "getAnnotations"
	public return_type class_ref 149275 // Annotation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns, for this element, an array containing all annotations (including
inherited annotations). If there are no annotations present, this method
returns a zero length array.

@return an array of all annotations for this element"
      end

      operation 306331 "getDeclaredAnnotations"
	public return_type class_ref 149275 // Annotation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns, for this element, all annotations that are explicitly declared
(not inherited). If there are no declared annotations present, this
method returns a zero length array.

@return an array of annotations declared for this element"
      end

      operation 306459 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this element has an annotation with the
specified annotation type (including inherited annotations).

@param annotationType
           the type of the annotation to search for
@return {@code true} if the annotation exists, {@code false} otherwise
@throws NullPointerException
            if {@code annotationType} is {@code null}"
      end
    end

    class 149403 "GenericDeclaration"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Common interface for language constructs that declare type parameters.

@since 1.5"
      operation 306587 "getTypeParameters"
	public return_type class_ref 149531 // TypeVariable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the declared type parameters in declaration order. If there are
no type parameters, this method returns a zero length array.

@return the declared type parameters in declaration order
@throws GenericSignatureFormatError
            if the signature is malformed"
      end
    end

    class 149531 "TypeVariable"
      visibility public stereotype "interface"
      nformals 1
      formal name "D" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface represents a type variables such as {@code 'T'} in {@code
'public interface Comparable<T>'}, the bounded {@code 'T'} in {@code
'public interface A<T extends Number>'} or the multiple bounded {@code
'T'} in {@code 'public interface B<T extends Number & Cloneable>'}.

@param <D>
           the generic declaration that declares this type variable
@since 1.5"
      classrelation 220187 // <generalisation>
	relation 220187 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 220187 // <generalisation>
	  b parent class_ref 149659 // Type
      end

      operation 488603 "getBounds"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the upper bounds of this type variable. {@code Object} is the
implicit upper bound if no other bounds are declared.

@return the upper bounds of this type variable

@throws TypeNotPresentException
            if any of the bounds points to a missing type
@throws MalformedParameterizedTypeException
            if any of the bounds points to a type that cannot be
            instantiated for some reason"
      end

      operation 488731 "getGenericDeclaration"
	public explicit_return_type "D"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the language construct that declares this type variable.

@return the generic declaration"
      end

      operation 488859 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this type variable as it is specified in source
code.

@return the name of this type variable"
      end
    end

    class 149659 "Type"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Common interface implemented by all Java types.

@since 1.5"
    end

    class 149915 "Member"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Common interface providing access to reflective information on class members.

@see Field
@see Constructor
@see Method"
      attribute 197147 "PUBLIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Designates all public members of a class or interface (including
inherited members).
"
      end

      attribute 197275 "DECLARED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Designates all declared members of a class or interface (without
inherited members).
"
      end

      operation 466971 "getDeclaringClass"
	public return_type class_ref 3421708 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns the class that declares this member.

@return the declaring class"
      end

      operation 467099 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the modifiers for this member. The {@link Modifier} class should
be used to decode the result.

@return the modifiers for this member

@see Modifier"
      end

      operation 467227 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this member.

@return the name of this member"
      end

      operation 467355 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not this member is synthetic (artificially
introduced by the compiler).

@return {@code true} if this member is synthetic, {@code false} otherwise"
      end
    end

    class 164251 "AccessibleObject"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "{@code AccessibleObject} is the superclass of all member reflection classes
(Field, Constructor, Method). AccessibleObject provides the ability to toggle
a flag controlling access checks for these objects. By default, accessing a
member (for example, setting a field or invoking a method) checks the
validity of the access (for example, invoking a private method from outside
the defining class is prohibited) and throws IllegalAccessException if the
operation is not permitted. If the accessible flag is set to true, these
checks are omitted. This allows privileged code, such as Java object
serialization, object inspectors, and debuggers to have complete access to
objects.

@see Field
@see Constructor
@see Method"
      classrelation 214683 // <realization>
	relation 214683 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 214683 // <realization>
	  b parent class_ref 149147 // AnnotatedElement
      end

      attribute 197019 "flag"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " If true, object is accessible, bypassing normal access checks"
      end

      classrelation 214811 // trans (<unidirectional association>)
	relation 214811 --->
	  a role_name "trans" class_relation package
	    comment " Holds a mapping from Java type names to native type codes.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 214811 // trans (<unidirectional association>)
	  b parent class_ref 164379 // Hashtable
      end

      extra_member 129563 "initialization"
	
	cpp "" ""
	java "  static {
        trans = new Hashtable<String, String>(9);
        trans.put(\"byte\", \"B\");
        trans.put(\"char\", \"C\");
        trans.put(\"short\", \"S\");
        trans.put(\"int\", \"I\");
        trans.put(\"long\", \"J\");
        trans.put(\"float\", \"F\");
        trans.put(\"double\", \"D\");
        trans.put(\"void\", \"V\");
        trans.put(\"boolean\", \"Z\");
    }"
	php ""
	python ""
	idl ""
      end

      operation 461467 "setAccessible"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "objects" type class_ref 164251 // AccessibleObject
	  param inout name "flag" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to set the value of the accessible flag for all the objects in
the array provided. Setting this
flag to {@code false} will enable access checks, setting to {@code true}
will disable them.

@param objects
           the accessible objects
@param flag
           the new value for the accessible flag

@see #setAccessible(boolean)"
      end

      operation 461595 "AccessibleObject"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code AccessibleObject} instance. {@code
AccessibleObject} instances can only be constructed by the virtual
machine."
      end

      operation 461723 "isAccessible"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this object is accessible without access checks being
performed. Returns the accessible flag.

@return {@code true} if this object is accessible without access
        checks, {@code false} otherwise"
      end

      operation 461851 "setAccessible"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to set the value of the accessible flag. Setting this flag to
{@code false} will enable access checks, setting to {@code true} will
disable them.

@param flag
           the new value for the accessible flag"
      end

      operation 461979 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 462107 "getDeclaredAnnotations"
	public return_type class_ref 149275 // Annotation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 462235 "getAnnotations"
	public return_type class_ref 149275 // Annotation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 462363 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationType" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 462491 "getSignature"
	package return_type class_ref 3399692 // String
	nparams 1
	  param inout name "clazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signature for a class. This is the kind of signature used
internally by the JVM, with one-character codes representing the basic
types. It is not suitable for printing.

@param clazz
           the class for which a signature is required

@return The signature as a string"
      end

      operation 462619 "toString"
	package return_type class_ref 3399692 // String
	nparams 1
	  param inout name "types" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?>[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a printable String consisting of the canonical names of the
classes contained in an array. The form is that used in parameter and
exception lists, that is, the class or type names are separated by
commas.

@param types
           the array of classes

@return The String of names"
      end

      operation 462747 "getSignatureAttribute"
	package return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Signature attribute for this instance. Returns {@code null}
if not found.

package"
      end

      operation 462875 "getClassSignatureAttribute"
	class_operation package return_type class_ref 3399692 // String
	nparams 1
	  param inout name "clazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the signature attribute from an arbitrary class.  This is
the same as Class.getSignatureAttribute(), but it can be used from
the java.lang.reflect package.

package"
      end

      operation 463003 "getClassSignatureAnnotation"
	class_operation private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "clazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Retrieve the signature annotation from an arbitrary class.  This is
the same as Class.getSignatureAttribute(), but it can be used from
the java.lang.reflect package."
      end

      operation 463131 "appendTypeName"
	package explicit_return_type "void"
	nparams 2
	  param inout name "out" type class_ref 155163 // StringBuilder
	  param inout name "c" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the best {@link #toString} name for {@code c} to {@code out}.
This works around the fact that {@link Class#getName} is lousy for
primitive arrays (it writes \"[C\" instead of \"char[]\") and {@link
Class#getCanonicalName()} is lousy for nested classes (it uses a \".\"
separator rather than a \"$\" separator)."
      end

      operation 463259 "appendArrayGenericType"
	package explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 155163 // StringBuilder
	  param inout name "types" type class_ref 149659 // Type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends names of the specified array classes to the buffer. The array
elements may represent a simple type, a reference type or an array type.
Output format: java.lang.Object[], java.io.File, void

@param types array of classes to print the names
@throws NullPointerException if any of the arguments is null"
      end

      operation 463387 "appendGenericType"
	package explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 155163 // StringBuilder
	  param inout name "obj" type class_ref 149659 // Type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the generic type representation to the buffer.

@param sb buffer
@param obj the generic type which representation should be appended to the buffer

@throws NullPointerException if any of the arguments is null"
      end
    end

    class 164507 "Array"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides static methods to create and access arrays dynamically."
      operation 463515 "Array"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 463643 "notAnArray"
	class_operation private return_type class_ref 128283 // IllegalArgumentException
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 463771 "incompatibleType"
	class_operation private return_type class_ref 128283 // IllegalArgumentException
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 463899 "badArray"
	class_operation private return_type class_ref 806284 // RuntimeException
	nparams 1
	  param inout name "array" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 464027 "get"
	class_operation public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the element of the array at the specified index. Equivalent to {@code array[index]}.
If the array component is a primitive type, the result is automatically boxed.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end

      operation 464155 "getBoolean"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the boolean at the given index in the given boolean array.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array or the element at the
            index position can not be converted to the return type
@throws ArrayIndexOutOfBoundsException
            if {@code index < 0 || index >= array.length}"
      end

      operation 464283 "getByte"
	class_operation public explicit_return_type "byte"
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the byte at the given index in the given byte array.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array or the element at the
            index position can not be converted to the return type
@throws ArrayIndexOutOfBoundsException
            if {@code index < 0 || index >= array.length}"
      end

      operation 464411 "getChar"
	class_operation public explicit_return_type "char"
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the char at the given index in the given char array.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array or the element at the
            index position can not be converted to the return type
@throws ArrayIndexOutOfBoundsException
            if {@code index < 0 || index >= array.length}"
      end

      operation 464539 "getDouble"
	class_operation public explicit_return_type "double"
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the double at the given index in the given array.
Applies to byte, char, float, double, int, long, and short arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array or the element at the
            index position can not be converted to the return type
@throws ArrayIndexOutOfBoundsException
            if {@code index < 0 || index >= array.length}"
      end

      operation 464667 "getFloat"
	class_operation public explicit_return_type "float"
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the float at the given index in the given array.
Applies to byte, char, float, int, long, and short arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array or the element at the
            index position can not be converted to the return type
@throws ArrayIndexOutOfBoundsException
            if {@code index < 0 || index >= array.length}"
      end

      operation 464795 "getInt"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the int at the given index in the given array.
Applies to byte, char, int, and short arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array or the element at the
            index position can not be converted to the return type
@throws ArrayIndexOutOfBoundsException
            if {@code index < 0 || index >= array.length}"
      end

      operation 464923 "getLength"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "array" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array. Equivalent to {@code array.length}.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array"
      end

      operation 465051 "getLong"
	class_operation public explicit_return_type "long"
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the long at the given index in the given array.
Applies to byte, char, int, long, and short arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array or the element at the
            index position can not be converted to the return type
@throws ArrayIndexOutOfBoundsException
            if {@code index < 0 || index >= array.length}"
      end

      operation 465179 "getShort"
	class_operation public explicit_return_type "short"
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the short at the given index in the given array.
Applies to byte and short arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array or the element at the
            index position can not be converted to the return type
@throws ArrayIndexOutOfBoundsException
            if {@code index < 0 || index >= array.length}"
      end

      operation 465307 "newInstance"
	class_operation public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "componentType" type class_ref 3421708 // Class
	  param inout name "" explicit_type "int...dimensions"
	nexceptions 2
	  exception class_ref 156187 // NegativeArraySizeException
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new multidimensional array of the specified component type and
dimensions. Equivalent to {@code new componentType[d0][d1]...[dn]} for a
dimensions array of { d0, d1, ... , dn }.

@throws NullPointerException if {@code array == null}
@throws NegativeArraySizeException
            if any of the dimensions are negative
@throws IllegalArgumentException
            if the array of dimensions is of size zero, or exceeds the
            limit of the number of dimension for an array (currently 255)"
      end

      operation 465435 "createMultiArray"
	class_operation private return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "componentType" type class_ref 3421708 // Class
	  param inout name "dimensions" explicit_type "int"
	nexceptions 1
	  exception class_ref 156187 // NegativeArraySizeException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws};
"
	
	
	
	comment "Create a multi-dimensional array of objects with the specified type."
      end

      operation 465563 "newInstance"
	class_operation public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "componentType" type class_ref 3421708 // Class
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 156187 // NegativeArraySizeException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new array of the specified component type and length.
Equivalent to {@code new componentType[size]}.

@throws NullPointerException
            if the component type is null
@throws NegativeArraySizeException
            if {@code size < 0}"
      end

      operation 465691 "createObjectArray"
	class_operation private return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "componentType" type class_ref 3421708 // Class
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 156187 // NegativeArraySizeException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Create a one-dimensional array of objects with the specified type."
      end

      operation 465819 "set"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	  param inout name "value" type class_ref 3401484 // Object
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element of the array at the specified index to the value.
Equivalent to {@code array[index] = value}. If the array
component is a primitive type, the value is automatically unboxed.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if {@code array} is not an array or the value cannot be
            converted to the array type by a widening conversion
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end

      operation 465947 "setBoolean"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets {@code array[index] = value}. Applies to boolean arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if the {@code array} is not an array or the value cannot be
            converted to the array type by a widening conversion
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end

      operation 466075 "setByte"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "byte"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets {@code array[index] = value}. Applies to byte, double, float, int, long, and short arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if the {@code array} is not an array or the value cannot be
            converted to the array type by a widening conversion
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end

      operation 466203 "setChar"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "char"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets {@code array[index] = value}. Applies to char, double, float, int, and long arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if the {@code array} is not an array or the value cannot be
            converted to the array type by a widening conversion
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end

      operation 466331 "setDouble"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "double"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets {@code array[index] = value}. Applies to double arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if the {@code array} is not an array or the value cannot be
            converted to the array type by a widening conversion
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end

      operation 466459 "setFloat"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "float"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets {@code array[index] = value}. Applies to double and float arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if the {@code array} is not an array or the value cannot be
            converted to the array type by a widening conversion
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end

      operation 466587 "setInt"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "int"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets {@code array[index] = value}. Applies to double, float, int, and long arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if the {@code array} is not an array or the value cannot be
            converted to the array type by a widening conversion
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end

      operation 466715 "setLong"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "long"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets {@code array[index] = value}. Applies to double, float, and long arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if the {@code array} is not an array or the value cannot be
            converted to the array type by a widening conversion
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end

      operation 466843 "setShort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "short"
	nexceptions 2
	  exception class_ref 128283 // IllegalArgumentException
	  exception class_ref 147739 // ArrayIndexOutOfBoundsException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets {@code array[index] = value}. Applies to double, float, int, long, and short arrays.

@throws NullPointerException if {@code array == null}
@throws IllegalArgumentException
            if the {@code array} is not an array or the value cannot be
            converted to the array type by a widening conversion
@throws ArrayIndexOutOfBoundsException
            if {@code  index < 0 || index >= array.length}"
      end
    end

    class 164763 "InvocationTargetException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides a wrapper for an exception thrown by a {@code Method} or
{@code Constructor} invocation.

@see Method#invoke
@see Constructor#newInstance"
      classrelation 217243 // <generalisation>
	relation 217243 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 217243 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      attribute 199067 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4085088731926701167L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 217371 // target (<unidirectional association>)
	relation 217371 --->
	  a role_name "target" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 217371 // target (<unidirectional association>)
	  b parent class_ref 134683 // Throwable
      end

      operation 478747 "InvocationTargetException"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code InvocationTargetException} instance with a
{@code null} cause / target exception."
      end

      operation 478875 "InvocationTargetException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exception" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code InvocationTargetException} instance with its
cause / target exception filled in.

@param exception
           the exception which occurred while running the Method or
           Constructor"
      end

      operation 479003 "InvocationTargetException"
	public explicit_return_type ""
	nparams 2
	  param inout name "exception" type class_ref 134683 // Throwable
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code InvocationTargetException} instance with its
cause / target exception and message filled in.

@param detailMessage
           the detail message for the exception
@param exception
           the exception which occurred while running the Method or
           Constructor"
      end

      operation 479131 "getTargetException"
	public return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the target exception, which may be {@code null}.

@return the target exception"
      end

      operation 479259 "getCause"
	public return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the cause of this exception, which may be {@code null}.

@return the cause of this exception"
      end
    end

    class 164891 "GenericArrayType"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface represents an array type with a component type that is either
a parameterized type or a type variable.

@since 1.5"
      classrelation 216987 // <generalisation>
	relation 216987 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 216987 // <generalisation>
	  b parent class_ref 149659 // Type
      end

      operation 478363 "getGenericComponentType"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the component type of this array.

@return the component type of this array

@throws TypeNotPresentException
            if the component type points to a missing type
@throws MalformedParameterizedTypeException
            if the component type points to a type that cannot be
            instantiated for some reason"
      end
    end

    class 165019 "GenericSignatureFormatError"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Indicates that a malformed signature has been encountered via a reflective
method.

@since 1.5"
      classrelation 217115 // <generalisation>
	relation 217115 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 217115 // <generalisation>
	  b parent class_ref 150939 // ClassFormatError
      end

      attribute 198939 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6709919147137911034L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 478491 "GenericSignatureFormatError"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code GenericSignatureFormatError} instance."
      end
    end

    class 165147 "InvocationHandler"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Implementors of this interface dispatch methods invoked on proxy instances.

@see Proxy"
      operation 478619 "invoke"
	public return_type class_ref 3401484 // Object
	nparams 3
	  param inout name "proxy" type class_ref 3401484 // Object
	  param inout name "method" type class_ref 144155 // Method
	  param inout name "args" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles the method which was originally invoked on the proxy instance. A
typical usage pattern follows below:

<pre>
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
    //do some processing before the method invocation

    //invoke the method
    Object result = method.invoke(proxy, args);

    //do some processing after the method invocation
    return result;
}</pre>

@param proxy
           the proxy instance on which the method was invoked
@param method
           the method invoked on the proxy instance
@param args
           an array of objects containing the parameters passed to the
           method, or {@code null} if no arguments are expected.
           Primitive types are boxed.

@return the result of executing the method. Primitive types are boxed.

@throws Throwable
            the exception to throw from the invoked method on the proxy.
            The exception must match one of the declared exception types
            of the invoked method or any unchecked exception type. If not
            then an {@code UndeclaredThrowableException} is thrown"
      end
    end

    class 165275 "MalformedParameterizedTypeException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Indicates that a malformed parameterized type has been encountered by a
reflective method.

@since 1.5"
      classrelation 217499 // <generalisation>
	relation 217499 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 217499 // <generalisation>
	  b parent class_ref 806284 // RuntimeException
      end

      attribute 199195 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5696557788586220964L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 479387 "MalformedParameterizedTypeException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code MalformedParameterizedTypeException} instance."
      end
    end

    class 165403 "Modifier"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides static methods to decode class and member modifiers.

@see Class#getModifiers()
@see Member#getModifiers()"
      attribute 199579 "PUBLIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code public}
modifier.
"
      end

      attribute 199707 "PRIVATE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code private}
modifier.
"
      end

      attribute 199835 "PROTECTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code protected}
modifier.
"
      end

      attribute 199963 "STATIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code static} modifier.
"
      end

      attribute 200091 "FINAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code final} modifier.
"
      end

      attribute 200219 "SYNCHRONIZED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code synchronized}
modifier.
"
      end

      attribute 200347 "VOLATILE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x40"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code volatile}
modifier.
"
      end

      attribute 200475 "TRANSIENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x80"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code transient}
modifier.
"
      end

      attribute 200603 "NATIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code native} modifier.
"
      end

      attribute 200731 "INTERFACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x200"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code interface}
modifier.
"
      end

      attribute 200859 "ABSTRACT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x400"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code abstract}
modifier.
"
      end

      attribute 200987 "STRICT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x800"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code int} value representing the {@code strict} modifier.
"
      end

      attribute 201115 "BRIDGE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x40"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Non-public types required by Java 5 update to class file format"
      end

      attribute 201243 "VARARGS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x80"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 201371 "SYNTHETIC"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x1000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 201499 "ANNOTATION"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x2000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 201627 "ENUM"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x4000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 484251 "Modifier"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Modifier} instance."
      end

      operation 484379 "classModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a mask of all the modifiers that may be applied to classes.
@since 1.7
@hide 1.7"
      end

      operation 484507 "constructorModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a mask of all the modifiers that may be applied to constructors.
@since 1.7
@hide 1.7"
      end

      operation 484635 "fieldModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a mask of all the modifiers that may be applied to fields.
@since 1.7
@hide 1.7"
      end

      operation 484763 "interfaceModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a mask of all the modifiers that may be applied to interfaces.
@since 1.7
@hide 1.7"
      end

      operation 484891 "methodModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a mask of all the modifiers that may be applied to methods.
@since 1.7
@hide 1.7"
      end

      operation 485019 "isAbstract"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
abstract} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        abstract} modifier, {@code false} otherwise"
      end

      operation 485147 "isFinal"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
final} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        final} modifier, {@code false} otherwise"
      end

      operation 485275 "isInterface"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
interface} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        interface} modifier, {@code false} otherwise"
      end

      operation 485403 "isNative"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
native} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        native} modifier, {@code false} otherwise"
      end

      operation 485531 "isPrivate"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
private} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        private} modifier, {@code false} otherwise"
      end

      operation 485659 "isProtected"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
protected} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        protected} modifier, {@code false} otherwise"
      end

      operation 485787 "isPublic"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
public} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        public} modifier, {@code false} otherwise"
      end

      operation 485915 "isStatic"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
static} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        static} modifier, {@code false} otherwise"
      end

      operation 486043 "isStrict"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
strict} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        strict} modifier, {@code false} otherwise"
      end

      operation 486171 "isSynchronized"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
synchronized} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        synchronized} modifier, {@code false} otherwise"
      end

      operation 486299 "isTransient"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
transient} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        transient} modifier, {@code false} otherwise"
      end

      operation 486427 "isVolatile"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified modifiers contain the {@code
volatile} modifier.

@param modifiers
           the modifiers to test
@return {@code true} if the specified modifiers contain the {@code
        volatile} modifier, {@code false} otherwise"
      end

      operation 486555 "toString"
	class_operation public return_type class_ref 3399692 // String
	nparams 1
	  param in name "modifiers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string containing the string representation of all modifiers
present in the specified modifiers. Modifiers appear in the order
specified by the Java Language Specification:

{@code public private protected abstract static final transient volatile native synchronized interface strict}

@param modifiers
           the modifiers to print
@return a printable representation of the modifiers"
      end
    end

    class 165531 "ParameterizedType"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface represents a parameterized type such as {@code
'Set&lt;String&gt;'}.

@since 1.5"
      classrelation 219419 // <generalisation>
	relation 219419 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 219419 // <generalisation>
	  b parent class_ref 149659 // Type
      end

      operation 486683 "getActualTypeArguments"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of the actual type arguments for this type.
<p>
If this type models a non parameterized type nested within a
parameterized type, this method returns a zero length array. The generic
type of the following {@code field} declaration is an example for a
parameterized type without type arguments.

<pre>
A&lt;String&gt;.B field;

class A&lt;T&gt; {
    class B {
    }
}</pre>


@return the actual type arguments

@throws TypeNotPresentException
            if one of the type arguments cannot be found
@throws MalformedParameterizedTypeException
            if one of the type arguments cannot be instantiated for some
            reason"
      end

      operation 486811 "getOwnerType"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent / owner type, if this type is an inner type, otherwise
{@code null} is returned if this is a top-level type.

@return the owner type or {@code null} if this is a top-level type

@throws TypeNotPresentException
            if one of the type arguments cannot be found
@throws MalformedParameterizedTypeException
            if the owner type cannot be instantiated for some reason"
      end

      operation 486939 "getRawType"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the declaring type of this parameterized type.
<p>
The raw type of {@code Set<String> field;} is {@code Set}.

@return the raw type of this parameterized type"
      end
    end

    class 165659 "Proxy"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "{@code Proxy} defines methods for creating dynamic proxy classes and instances.
A proxy class implements a declared set of interfaces and delegates method
invocations to an {@code InvocationHandler}.

@see InvocationHandler
@since 1.3"
      classrelation 219547 // <realization>
	relation 219547 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 219547 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 201755 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2222568056686623797L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 219675 // loaderCache (<unidirectional association>)
	relation 219675 --->
	  a role_name "loaderCache" init_value " new WeakHashMap<ClassLoader, Map<String, WeakReference<Class<?>>>>()" class_relation const_relation private
	    comment " maps class loaders to created classes by interface names
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ClassLoader, Map<String, WeakReference<Class<?>>>> ${name}${value};
"
	    classrelation_ref 219675 // loaderCache (<unidirectional association>)
	  b parent class_ref 129819 // Map
      end

      classrelation 219803 // proxyCache (<unidirectional association>)
	relation 219803 --->
	  a role_name "proxyCache" init_value " new WeakHashMap<Class<?>, String>()" class_relation const_relation private
	    comment " to find previously created types
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>, String> ${name}${value};
"
	    classrelation_ref 219803 // proxyCache (<unidirectional association>)
	  b parent class_ref 129819 // Map
      end

      attribute 201883 "NextClassNameIndex"
	class_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 219931 // h (<unidirectional association>)
	relation 219931 --->
	  a role_name "h" protected
	    comment "
The invocation handler on which the method calls are dispatched.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 219931 // h (<unidirectional association>)
	  b parent class_ref 165147 // InvocationHandler
      end

      operation 487067 "Proxy"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unused\")
"
	
	
	
      end

      operation 487195 "Proxy"
	protected explicit_return_type ""
	nparams 1
	  param inout name "h" type class_ref 165147 // InvocationHandler
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Proxy} instance with the specified invocation
handler.

@param h
           the invocation handler for the newly created proxy"
      end

      operation 487323 "getProxyClass"
	class_operation public return_type class_ref 3421708 // Class
	nparams 2
	  param inout name "loader" type class_ref 138523 // ClassLoader
	  param inout name "interfaces" explicit_type "Class<?>..."
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the dynamically built {@code Class} for the specified interfaces.
Creates a new {@code Class} when necessary. The order of the interfaces
is relevant. Invocations of this method with the same interfaces but
different order result in different generated classes. The interfaces
must be visible from the supplied class loader; no duplicates are
permitted. All non-public interfaces must be defined in the same package.

@param loader
           the class loader that will define the proxy class
@param interfaces
           an array of {@code Class} objects, each one identifying an
           interface that will be implemented by the returned proxy
           class
@return a proxy class that implements all of the interfaces referred to
        in the contents of {@code interfaces}
@throws IllegalArgumentException
               if any of the interface restrictions are violated
@throws NullPointerException
               if either {@code interfaces} or any of its elements are
               {@code null}"
      end

      operation 487451 "newProxyInstance"
	class_operation public return_type class_ref 3401484 // Object
	nparams 3
	  param inout name "loader" type class_ref 138523 // ClassLoader
	  param inout name "interfaces" type class_ref 3421708 // Class
	  param inout name "h" type class_ref 165147 // InvocationHandler
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?>[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an instance of the dynamically built class for the specified
interfaces. Method invocations on the returned instance are forwarded to
the specified invocation handler. The interfaces must be visible from the
supplied class loader; no duplicates are permitted. All non-public
interfaces must be defined in the same package.

@param loader
           the class loader that will define the proxy class
@param interfaces
           an array of {@code Class} objects, each one identifying an
           interface that will be implemented by the returned proxy
           object
@param h
           the invocation handler that handles the dispatched method
           invocations
@return a new proxy object that delegates to the handler {@code h}
@throws IllegalArgumentException
               if any of the interface restrictions are violated
@throws NullPointerException
               if the interfaces or any of its elements are null"
      end

      operation 487579 "isProxyClass"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether or not the specified class is a dynamically generated
proxy class.

@param cl
           the class
@return {@code true} if the class is a proxy class, {@code false}
        otherwise
@throws NullPointerException
               if the class is {@code null}"
      end

      operation 487707 "getInvocationHandler"
	class_operation public return_type class_ref 165147 // InvocationHandler
	nparams 1
	  param inout name "proxy" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the invocation handler of the specified proxy instance.

@param proxy
           the proxy instance
@return the invocation handler of the specified proxy instance
@throws IllegalArgumentException
               if the supplied {@code proxy} is not a proxy object"
      end

      operation 487835 "generateProxy"
	class_operation private return_type class_ref 3421708 // Class
	nparams 3
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "interfaces" type class_ref 3421708 // Class
	  param inout name "loader" type class_ref 138523 // ClassLoader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
      end

      operation 487963 "constructorPrototype"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "h" type class_ref 165147 // InvocationHandler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "The VM clones this method's descriptor when generating a proxy class.
There is no implementation."
      end
    end

    class 165787 "ReflectPermission"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Legacy security code; do not use."
      classrelation 220059 // <generalisation>
	relation 220059 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 220059 // <generalisation>
	  b parent class_ref 146075 // BasicPermission
      end

      operation 488091 "ReflectPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 488219 "ReflectPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "actions" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 488347 "getActions"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 488475 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 141467 // Permission
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 165915 "UndeclaredThrowableException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides a wrapper for an undeclared, checked exception thrown by
an InvocationHandler.

@see java.lang.reflect.InvocationHandler#invoke"
      classrelation 220315 // <generalisation>
	relation 220315 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 220315 // <generalisation>
	  b parent class_ref 806284 // RuntimeException
      end

      attribute 202011 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 330127114055056639L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 220443 // undeclaredThrowable (<unidirectional association>)
	relation 220443 --->
	  a role_name "undeclaredThrowable" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 220443 // undeclaredThrowable (<unidirectional association>)
	  b parent class_ref 134683 // Throwable
      end

      operation 488987 "UndeclaredThrowableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exception" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UndeclaredThrowableException} instance with the
undeclared, checked exception that occurred.

@param exception
           the undeclared, checked exception that occurred"
      end

      operation 489115 "UndeclaredThrowableException"
	public explicit_return_type ""
	nparams 2
	  param inout name "exception" type class_ref 134683 // Throwable
	  param inout name "detailMessage" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UndeclaredThrowableException} instance with the
undeclared, checked exception that occurred and a message.

@param detailMessage
           the detail message for the exception
@param exception
           the undeclared, checked exception that occurred"
      end

      operation 489243 "getUndeclaredThrowable"
	public return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the undeclared, checked exception that occurred, which may be
{@code null}.

@return the undeclared, checked exception that occurred"
      end

      operation 489371 "getCause"
	public return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the undeclared, checked exception that occurred, which may be
{@code null}.

@return the undeclared, checked exception that occurred"
      end
    end

    class 166043 "WildcardType"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A pattern type, such as the upper bounded wildcard {@code
? extends Closeable} or the lower bounded wildcard {@code ? super String}.

<p>Although this interface permits an arbitrary number of upper and lower
bounds, all wildcard types of Java language programs are in one of two forms:
<ol>
<li><strong>No lower bound and one upper bound.</strong> Such types are
    written like {@code ? extends java.lang.Number}. When the upper bound is
    {@code java.lang.Object}, the {@code extends java.lang.Object} suffix is
    optional: {@code Set<?>} is shorthand for {@code
    Set<? extends java.lang.Object>}.
<li><strong>One lower bound and an upper bound of {@code
    java.lang.Object}.</strong> Such types are written like {@code
    ? super java.lang.String}.
</ol>"
      classrelation 220571 // <generalisation>
	relation 220571 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 220571 // <generalisation>
	  b parent class_ref 149659 // Type
      end

      operation 489499 "getUpperBounds"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of types that represent the upper bounds of this type.
The default upper bound is {@code Object}.

@return an array containing the upper bounds types

@throws TypeNotPresentException
            if any of the bounds points to a missing type
@throws MalformedParameterizedTypeException
            if any bound points to a type that cannot be instantiated for
            some reason"
      end

      operation 489627 "getLowerBounds"
	public return_type class_ref 149659 // Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of types that represent the lower bounds of this type.
The default lower bound is {@code null}, in which case an empty array is
returned. Since only one lower bound is allowed, the returned array's
length will never exceed one.

@return an array containing the lower bounds types

@throws TypeNotPresentException
            if any of the bounds points to a missing type
@throws MalformedParameterizedTypeException
            if any of the bounds points to a type that cannot be
            instantiated for some reason"
      end
    end
  end

  deploymentview 128795 "reflect"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 143643 "AnnotatedElement"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
${definition}"
      associated_classes
	class_ref 149147 // AnnotatedElement
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 143771 "GenericDeclaration"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149403 // GenericDeclaration
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 143899 "Type"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149659 // Type
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 156443 "AccessibleObject"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
import java.util.Hashtable;
import org.apache.harmony.kernel.vm.StringUtils;
${definition}"
      associated_classes
	class_ref 164251 // AccessibleObject
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 156571 "Array"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 164507 // Array
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 156699 "Member"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149915 // Member
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 156827 "Constructor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
import libcore.util.EmptyArray;
import org.apache.harmony.kernel.vm.StringUtils;
import org.apache.harmony.luni.lang.reflect.GenericSignatureParser;
import org.apache.harmony.luni.lang.reflect.ListOfTypes;
import org.apache.harmony.luni.lang.reflect.Types;
${definition}"
      associated_classes
	class_ref 144411 // Constructor
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 156955 "Field"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
import java.util.Comparator;
import org.apache.harmony.kernel.vm.StringUtils;
import org.apache.harmony.luni.lang.reflect.GenericSignatureParser;
import org.apache.harmony.luni.lang.reflect.Types;
${definition}"
      associated_classes
	class_ref 144283 // Field
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 157083 "GenericArrayType"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 164891 // GenericArrayType
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 157211 "GenericSignatureFormatError"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 165019 // GenericSignatureFormatError
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 157339 "InvocationHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 165147 // InvocationHandler
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 157467 "InvocationTargetException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 164763 // InvocationTargetException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 157595 "MalformedParameterizedTypeException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 165275 // MalformedParameterizedTypeException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 157723 "Method"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
import java.util.Arrays;
import java.util.Comparator;
import libcore.util.EmptyArray;
import org.apache.harmony.kernel.vm.StringUtils;
import org.apache.harmony.luni.lang.reflect.GenericSignatureParser;
import org.apache.harmony.luni.lang.reflect.ListOfTypes;
import org.apache.harmony.luni.lang.reflect.Types;
${definition}"
      associated_classes
	class_ref 144155 // Method
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 157851 "Modifier"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 165403 // Modifier
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 157979 "ParameterizedType"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 165531 // ParameterizedType
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 158107 "Proxy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
${definition}"
      associated_classes
	class_ref 165659 // Proxy
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 158235 "ReflectPermission"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.BasicPermission;
import java.security.Permission;
${definition}"
      associated_classes
	class_ref 165787 // ReflectPermission
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 158363 "TypeVariable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 149531 // TypeVariable
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 158491 "UndeclaredThrowableException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 165915 // UndeclaredThrowableException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 158619 "WildcardType"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 166043 // WildcardType
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end
  end
end
