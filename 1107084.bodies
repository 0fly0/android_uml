class JsonReaderTest
!!!6088460.java!!!	testReadArray() : void
        JsonReader reader = new JsonReader(new StringReader("[true, true]"));
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());
        assertEquals(true, reader.nextBoolean());
        reader.endArray();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6088588.java!!!	testReadEmptyArray() : void
        JsonReader reader = new JsonReader(new StringReader("[]"));
        reader.beginArray();
        assertFalse(reader.hasNext());
        reader.endArray();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6088716.java!!!	testReadObject() : void
        JsonReader reader = new JsonReader(new StringReader(
                "{\"a\": \"android\", \"b\": \"banana\"}"));
        reader.beginObject();
        assertEquals("a", reader.nextName());
        assertEquals("android", reader.nextString());
        assertEquals("b", reader.nextName());
        assertEquals("banana", reader.nextString());
        reader.endObject();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6088844.java!!!	testReadEmptyObject() : void
        JsonReader reader = new JsonReader(new StringReader("{}"));
        reader.beginObject();
        assertFalse(reader.hasNext());
        reader.endObject();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6088972.java!!!	testSkipObject() : void
        JsonReader reader = new JsonReader(new StringReader(
                "{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}"));
        reader.beginObject();
        assertEquals("a", reader.nextName());
        reader.skipValue();
        assertEquals("b", reader.nextName());
        reader.skipValue();
        reader.endObject();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6089100.java!!!	testHelloWorld() : void
        String json = "{\n" +
                "   \"hello\": true,\n" +
                "   \"foo\": [\"world\"]\n" +
                "}";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginObject();
        assertEquals("hello", reader.nextName());
        assertEquals(true, reader.nextBoolean());
        assertEquals("foo", reader.nextName());
        reader.beginArray();
        assertEquals("world", reader.nextString());
        reader.endArray();
        reader.endObject();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6089228.java!!!	testNulls() : void
        try {
            new JsonReader(null);
            fail();
        } catch (NullPointerException expected) {
        }
!!!6089356.java!!!	testEmptyString() : void
        try {
            new JsonReader(new StringReader("")).beginArray();
        } catch (IOException expected) {
        }
        try {
            new JsonReader(new StringReader("")).beginObject();
        } catch (IOException expected) {
        }
!!!6089484.java!!!	testNoTopLevelObject() : void
        try {
            new JsonReader(new StringReader("true")).nextBoolean();
        } catch (IOException expected) {
        }
!!!6089612.java!!!	testCharacterUnescaping() : void
        String json = "[\"a\","
                + "\"a\\\"\","
                + "\"\\\"\","
                + "\":\","
                + "\",\","
                + "\"\\b\","
                + "\"\\f\","
                + "\"\\n\","
                + "\"\\r\","
                + "\"\\t\","
                + "\" \","
                + "\"\\\\\","
                + "\"{\","
                + "\"}\","
                + "\"[\","
                + "\"]\","
                + "\"\\u0000\","
                + "\"\\u0019\","
                + "\"\\u20AC\""
                + "]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        assertEquals("a", reader.nextString());
        assertEquals("a\"", reader.nextString());
        assertEquals("\"", reader.nextString());
        assertEquals(":", reader.nextString());
        assertEquals(",", reader.nextString());
        assertEquals("\b", reader.nextString());
        assertEquals("\f", reader.nextString());
        assertEquals("\n", reader.nextString());
        assertEquals("\r", reader.nextString());
        assertEquals("\t", reader.nextString());
        assertEquals(" ", reader.nextString());
        assertEquals("\\", reader.nextString());
        assertEquals("{", reader.nextString());
        assertEquals("}", reader.nextString());
        assertEquals("[", reader.nextString());
        assertEquals("]", reader.nextString());
        assertEquals("\0", reader.nextString());
        assertEquals("\u0019", reader.nextString());
        assertEquals("\u20AC", reader.nextString());
        reader.endArray();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6089740.java!!!	testIntegersWithFractionalPartSpecified() : void
        JsonReader reader = new JsonReader(new StringReader("[1.0,1.0,1.0]"));
        reader.beginArray();
        assertEquals(1.0, reader.nextDouble());
        assertEquals(1, reader.nextInt());
        assertEquals(1L, reader.nextLong());
!!!6089868.java!!!	testDoubles() : void
        String json = "[-0.0,"
                + "1.0,"
                + "1.7976931348623157E308,"
                + "4.9E-324,"
                + "0.0,"
                + "-0.5,"
                + "2.2250738585072014E-308,"
                + "3.141592653589793,"
                + "2.718281828459045,"
                + "\"1.0\","
                + "\"011.0\","
                + "\"NaN\","
                + "\"Infinity\","
                + "\"-Infinity\""
                + "]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        assertEquals(-0.0, reader.nextDouble());
        assertEquals(1.0, reader.nextDouble());
        assertEquals(1.7976931348623157E308, reader.nextDouble());
        assertEquals(4.9E-324, reader.nextDouble());
        assertEquals(0.0, reader.nextDouble());
        assertEquals(-0.5, reader.nextDouble());
        assertEquals(2.2250738585072014E-308, reader.nextDouble());
        assertEquals(3.141592653589793, reader.nextDouble());
        assertEquals(2.718281828459045, reader.nextDouble());
        assertEquals(1,0, reader.nextDouble());
        assertEquals(11.0, reader.nextDouble());
        assertTrue(Double.isNaN(reader.nextDouble()));
        assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());
        assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());
        reader.endArray();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6089996.java!!!	testLenientDoubles() : void
        String json = "["
                + "011.0,"
                + "NaN,"
                + "NAN,"
                + "Infinity,"
                + "INFINITY,"
                + "-Infinity"
                + "]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals(11.0, reader.nextDouble());
        assertTrue(Double.isNaN(reader.nextDouble()));
        try {
            reader.nextDouble();
            fail();
        } catch (NumberFormatException expected) {
        }
        assertEquals("NAN", reader.nextString());
        assertEquals(Double.POSITIVE_INFINITY, reader.nextDouble());
        try {
            reader.nextDouble();
            fail();
        } catch (NumberFormatException expected) {
        }
        assertEquals("INFINITY", reader.nextString());
        assertEquals(Double.NEGATIVE_INFINITY, reader.nextDouble());
        reader.endArray();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6090124.java!!!	testBufferBoundary() : void
        char[] pad = new char[READER_BUFFER_SIZE - 8];
        Arrays.fill(pad, '5');
        String json = "[\"" + new String(pad) + "\",33333]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        assertEquals(JsonToken.STRING, reader.peek());
        assertEquals(new String(pad), reader.nextString());
        assertEquals(JsonToken.NUMBER, reader.peek());
        assertEquals(33333, reader.nextInt());
!!!6090252.java!!!	testTruncatedBufferBoundary() : void
        char[] pad = new char[READER_BUFFER_SIZE - 8];
        Arrays.fill(pad, '5');
        String json = "[\"" + new String(pad) + "\",33333";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals(JsonToken.STRING, reader.peek());
        assertEquals(new String(pad), reader.nextString());
        assertEquals(JsonToken.NUMBER, reader.peek());
        assertEquals(33333, reader.nextInt());
        try {
            reader.endArray();
            fail();
        } catch (IOException e) {
        }
!!!6090380.java!!!	testLongestSupportedNumericLiterals() : void
        testLongNumericLiterals(READER_BUFFER_SIZE - 1, JsonToken.NUMBER);
!!!6090508.java!!!	testLongerNumericLiterals() : void
        testLongNumericLiterals(READER_BUFFER_SIZE, JsonToken.STRING);
!!!6090636.java!!!	testLongNumericLiterals(in length : int, inout expectedToken : JsonToken) : void
        char[] longNumber = new char[length];
        Arrays.fill(longNumber, '9');
        longNumber[0] = '1';
        longNumber[1] = '.';

        String json = "[" + new String(longNumber) + "]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals(expectedToken, reader.peek());
        assertEquals(2.0d, reader.nextDouble());
        reader.endArray();
!!!6090764.java!!!	testLongs() : void
        String json = "[0,0,0,"
                + "1,1,1,"
                + "-1,-1,-1,"
                + "-9223372036854775808,"
                + "9223372036854775807,"
                + "5.0,"
                + "1.0e2,"
                + "\"011\","
                + "\"5.0\","
                + "\"1.0e2\""
                + "]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        assertEquals(0L, reader.nextLong());
        assertEquals(0, reader.nextInt());
        assertEquals(0.0, reader.nextDouble());
        assertEquals(1L, reader.nextLong());
        assertEquals(1, reader.nextInt());
        assertEquals(1.0, reader.nextDouble());
        assertEquals(-1L, reader.nextLong());
        assertEquals(-1, reader.nextInt());
        assertEquals(-1.0, reader.nextDouble());
        try {
            reader.nextInt();
            fail();
        } catch (NumberFormatException expected) {
        }
        assertEquals(Long.MIN_VALUE, reader.nextLong());
        try {
            reader.nextInt();
            fail();
        } catch (NumberFormatException expected) {
        }
        assertEquals(Long.MAX_VALUE, reader.nextLong());
        assertEquals(5, reader.nextLong());
        assertEquals(100, reader.nextLong());
        assertEquals(11, reader.nextLong());
        assertEquals(5, reader.nextLong());
        assertEquals(100, reader.nextLong());
        reader.endArray();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6090892.java!!!	testHighPrecisionLong() : void
        String json = "[9223372036854775806.000]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        assertEquals(9223372036854775806L, reader.nextLong());
        reader.endArray();
!!!6091020.java!!!	testMatchingValidNumbers() : void
        String json = "[-1,99,-0,0,0e1,0e+1,0e-1,0E1,0E+1,0E-1,0.0,1.0,-1.0,1.0e0,1.0e+1,1.0e-1]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        for (int i = 0; i < 16; i++) {
            assertEquals(JsonToken.NUMBER, reader.peek());
            reader.nextDouble();
        }
        reader.endArray();
!!!6091148.java!!!	testRecognizingInvalidNumbers() : void
        String json = "[-00,00,001,+1,1f,0x,0xf,0x0,0f1,0ee1,1..0,1e0.1,1.-01,1.+1,1.0x,1.0+]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.setLenient(true);
        reader.beginArray();
        for (int i = 0; i < 16; i++) {
            assertEquals(JsonToken.STRING, reader.peek());
            reader.nextString();
        }
        reader.endArray();
!!!6091276.java!!!	testNonFiniteDouble() : void
        String json = "[NaN]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        try {
            reader.nextDouble();
            fail();
        } catch (IOException expected) {
        }
!!!6091404.java!!!	testNumberWithHexPrefix() : void
        String json = "[0x11]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        try {
            reader.nextLong();
            fail();
        } catch (IOException expected) {
        }
!!!6091532.java!!!	testNumberWithOctalPrefix() : void
        String json = "[01]";
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        try {
            reader.nextInt();
            fail();
        } catch (IOException expected) {
        }
!!!6091660.java!!!	testBooleans() : void
        JsonReader reader = new JsonReader(new StringReader("[true,false]"));
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());
        assertEquals(false, reader.nextBoolean());
        reader.endArray();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6091788.java!!!	testMixedCaseLiterals() : void
        JsonReader reader = new JsonReader(new StringReader("[True,TruE,False,FALSE,NULL,nulL]"));
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());
        assertEquals(true, reader.nextBoolean());
        assertEquals(false, reader.nextBoolean());
        assertEquals(false, reader.nextBoolean());
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6091916.java!!!	testMissingValue() : void
        JsonReader reader = new JsonReader(new StringReader("{\"a\":}"));
        reader.beginObject();
        assertEquals("a", reader.nextName());
        try {
            reader.nextString();
            fail();
        } catch (IOException expected) {
        }
!!!6092044.java!!!	testPrematureEndOfInput() : void
        JsonReader reader = new JsonReader(new StringReader("{\"a\":true,"));
        reader.beginObject();
        assertEquals("a", reader.nextName());
        assertEquals(true, reader.nextBoolean());
        try {
            reader.nextName();
            fail();
        } catch (IOException expected) {
        }
!!!6092172.java!!!	testPrematurelyClosed() : void
        try {
            JsonReader reader = new JsonReader(new StringReader("{\"a\":[]}"));
            reader.beginObject();
            reader.close();
            reader.nextName();
            fail();
        } catch (IllegalStateException expected) {
        }

        try {
            JsonReader reader = new JsonReader(new StringReader("{\"a\":[]}"));
            reader.close();
            reader.beginObject();
            fail();
        } catch (IllegalStateException expected) {
        }

        try {
            JsonReader reader = new JsonReader(new StringReader("{\"a\":true}"));
            reader.beginObject();
            reader.nextName();
            reader.peek();
            reader.close();
            reader.nextBoolean();
            fail();
        } catch (IllegalStateException expected) {
        }
!!!6092300.java!!!	testNextFailuresDoNotAdvance() : void
        JsonReader reader = new JsonReader(new StringReader("{\"a\":true}"));
        reader.beginObject();
        try {
            reader.nextString();
            fail();
        } catch (IllegalStateException expected) {
        }
        assertEquals("a", reader.nextName());
        try {
            reader.nextName();
            fail();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
            fail();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
            fail();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginObject();
            fail();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endObject();
            fail();
        } catch (IllegalStateException expected) {
        }
        assertEquals(true, reader.nextBoolean());
        try {
            reader.nextString();
            fail();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.nextName();
            fail();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.beginArray();
            fail();
        } catch (IllegalStateException expected) {
        }
        try {
            reader.endArray();
            fail();
        } catch (IllegalStateException expected) {
        }
        reader.endObject();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
        reader.close();
!!!6092428.java!!!	testStringNullIsNotNull() : void
        JsonReader reader = new JsonReader(new StringReader("[\"null\"]"));
        reader.beginArray();
        try {
            reader.nextNull();
            fail();
        } catch (IllegalStateException expected) {
        }
!!!6092556.java!!!	testNullLiteralIsNotAString() : void
       JsonReader reader = new JsonReader(new StringReader("[null]"));
        reader.beginArray();
        try {
            reader.nextString();
            fail();
        } catch (IllegalStateException expected) {
        }
!!!6092684.java!!!	testStrictNameValueSeparator() : void
        JsonReader reader = new JsonReader(new StringReader("{\"a\"=true}"));
        reader.beginObject();
        assertEquals("a", reader.nextName());
        try {
            reader.nextBoolean();
            fail();
        } catch (IOException expected) {
        }

        reader = new JsonReader(new StringReader("{\"a\"=>true}"));
        reader.beginObject();
        assertEquals("a", reader.nextName());
        try {
            reader.nextBoolean();
            fail();
        } catch (IOException expected) {
        }
!!!6092812.java!!!	testLenientNameValueSeparator() : void
        JsonReader reader = new JsonReader(new StringReader("{\"a\"=true}"));
        reader.setLenient(true);
        reader.beginObject();
        assertEquals("a", reader.nextName());
        assertEquals(true, reader.nextBoolean());

        reader = new JsonReader(new StringReader("{\"a\"=>true}"));
        reader.setLenient(true);
        reader.beginObject();
        assertEquals("a", reader.nextName());
        assertEquals(true, reader.nextBoolean());
!!!6092940.java!!!	testStrictComments() : void
        JsonReader reader = new JsonReader(new StringReader("[// comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            fail();
        } catch (IOException expected) {
        }

        reader = new JsonReader(new StringReader("[# comment \n true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            fail();
        } catch (IOException expected) {
        }

        reader = new JsonReader(new StringReader("[/* comment */ true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            fail();
        } catch (IOException expected) {
        }
!!!6093068.java!!!	testLenientComments() : void
        JsonReader reader = new JsonReader(new StringReader("[// comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());

        reader = new JsonReader(new StringReader("[# comment \n true]"));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());

        reader = new JsonReader(new StringReader("[/* comment */ true]"));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());
!!!6093196.java!!!	testStrictUnquotedNames() : void
        JsonReader reader = new JsonReader(new StringReader("{a:true}"));
        reader.beginObject();
        try {
            reader.nextName();
            fail();
        } catch (IOException expected) {
        }
!!!6093324.java!!!	testLenientUnquotedNames() : void
        JsonReader reader = new JsonReader(new StringReader("{a:true}"));
        reader.setLenient(true);
        reader.beginObject();
        assertEquals("a", reader.nextName());
!!!6093452.java!!!	testStrictSingleQuotedNames() : void
        JsonReader reader = new JsonReader(new StringReader("{'a':true}"));
        reader.beginObject();
        try {
            reader.nextName();
            fail();
        } catch (IOException expected) {
        }
!!!6093580.java!!!	testLenientSingleQuotedNames() : void
        JsonReader reader = new JsonReader(new StringReader("{'a':true}"));
        reader.setLenient(true);
        reader.beginObject();
        assertEquals("a", reader.nextName());
!!!6093708.java!!!	testStrictUnquotedStrings() : void
        JsonReader reader = new JsonReader(new StringReader("[a]"));
        reader.beginArray();
        try {
            reader.nextString();
            fail();
        } catch (MalformedJsonException expected) {
        }
!!!6093836.java!!!	testLenientUnquotedStrings() : void
        JsonReader reader = new JsonReader(new StringReader("[a]"));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals("a", reader.nextString());
!!!6093964.java!!!	testStrictSingleQuotedStrings() : void
        JsonReader reader = new JsonReader(new StringReader("['a']"));
        reader.beginArray();
        try {
            reader.nextString();
            fail();
        } catch (IOException expected) {
        }
!!!6094092.java!!!	testLenientSingleQuotedStrings() : void
        JsonReader reader = new JsonReader(new StringReader("['a']"));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals("a", reader.nextString());
!!!6094220.java!!!	testStrictSemicolonDelimitedArray() : void
        JsonReader reader = new JsonReader(new StringReader("[true;true]"));
        reader.beginArray();
        try {
            reader.nextBoolean();
            reader.nextBoolean();
            fail();
        } catch (IOException expected) {
        }
!!!6094348.java!!!	testLenientSemicolonDelimitedArray() : void
        JsonReader reader = new JsonReader(new StringReader("[true;true]"));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());
        assertEquals(true, reader.nextBoolean());
!!!6094476.java!!!	testStrictSemicolonDelimitedNameValuePair() : void
        JsonReader reader = new JsonReader(new StringReader("{\"a\":true;\"b\":true}"));
        reader.beginObject();
        assertEquals("a", reader.nextName());
        try {
            reader.nextBoolean();
            reader.nextName();
            fail();
        } catch (IOException expected) {
        }
!!!6094604.java!!!	testLenientSemicolonDelimitedNameValuePair() : void
        JsonReader reader = new JsonReader(new StringReader("{\"a\":true;\"b\":true}"));
        reader.setLenient(true);
        reader.beginObject();
        assertEquals("a", reader.nextName());
        assertEquals(true, reader.nextBoolean());
        assertEquals("b", reader.nextName());
!!!6094732.java!!!	testStrictUnnecessaryArraySeparators() : void
        JsonReader reader = new JsonReader(new StringReader("[true,,true]"));
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());
        try {
            reader.nextNull();
            fail();
        } catch (IOException expected) {
        }

        reader = new JsonReader(new StringReader("[,true]"));
        reader.beginArray();
        try {
            reader.nextNull();
            fail();
        } catch (IOException expected) {
        }

        reader = new JsonReader(new StringReader("[true,]"));
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());
        try {
            reader.nextNull();
            fail();
        } catch (IOException expected) {
        }

        reader = new JsonReader(new StringReader("[,]"));
        reader.beginArray();
        try {
            reader.nextNull();
            fail();
        } catch (IOException expected) {
        }
!!!6094860.java!!!	testLenientUnnecessaryArraySeparators() : void
        JsonReader reader = new JsonReader(new StringReader("[true,,true]"));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());
        reader.nextNull();
        assertEquals(true, reader.nextBoolean());
        reader.endArray();

        reader = new JsonReader(new StringReader("[,true]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        assertEquals(true, reader.nextBoolean());
        reader.endArray();

        reader = new JsonReader(new StringReader("[true,]"));
        reader.setLenient(true);
        reader.beginArray();
        assertEquals(true, reader.nextBoolean());
        reader.nextNull();
        reader.endArray();

        reader = new JsonReader(new StringReader("[,]"));
        reader.setLenient(true);
        reader.beginArray();
        reader.nextNull();
        reader.nextNull();
        reader.endArray();
!!!6094988.java!!!	testStrictMultipleTopLevelValues() : void
        JsonReader reader = new JsonReader(new StringReader("[] []"));
        reader.beginArray();
        reader.endArray();
        try {
            reader.peek();
            fail();
        } catch (IOException expected) {
        }
!!!6095116.java!!!	testLenientMultipleTopLevelValues() : void
        JsonReader reader = new JsonReader(new StringReader("[] true {}"));
        reader.setLenient(true);
        reader.beginArray();
        reader.endArray();
        assertEquals(true, reader.nextBoolean());
        reader.beginObject();
        reader.endObject();
        assertEquals(JsonToken.END_DOCUMENT, reader.peek());
!!!6095244.java!!!	testStrictTopLevelValueType() : void
        JsonReader reader = new JsonReader(new StringReader("true"));
        try {
            reader.nextBoolean();
            fail();
        } catch (IOException expected) {
        }
!!!6095372.java!!!	testLenientTopLevelValueType() : void
        JsonReader reader = new JsonReader(new StringReader("true"));
        reader.setLenient(true);
        assertEquals(true, reader.nextBoolean());
!!!6095500.java!!!	testStrictNonExecutePrefix() : void
        JsonReader reader = new JsonReader(new StringReader(")]}'\n []"));
        try {
            reader.beginArray();
            fail();
        } catch (IOException expected) {
        }
!!!6095628.java!!!	testBomIgnoredAsFirstCharacterOfDocument() : void
        JsonReader reader = new JsonReader(new StringReader("\ufeff[]"));
        reader.beginArray();
        reader.endArray();
!!!6095756.java!!!	testBomForbiddenAsOtherCharacterInDocument() : void
        JsonReader reader = new JsonReader(new StringReader("[\ufeff]"));
        reader.beginArray();
        try {
            reader.endArray();
            fail();
        } catch (IOException expected) {
        }
!!!6095884.java!!!	testFailWithPosition() : void
        testFailWithPosition("Expected literal value at line 6 column 3",
                "[\n\n\n\n\n0,}]");
!!!6096012.java!!!	testFailWithPositionIsOffsetByBom() : void
        testFailWithPosition("Expected literal value at line 1 column 4",
                "\ufeff[0,}]");
!!!6096140.java!!!	testFailWithPositionGreaterThanBufferSize() : void
        String spaces = repeat(' ', 8192);
        testFailWithPosition("Expected literal value at line 6 column 3",
                "[\n\n" + spaces + "\n\n\n0,}]");
!!!6096268.java!!!	testFailWithPosition(in message : String, in json : String) : void
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.beginArray();
        reader.nextInt();
        try {
            reader.peek();
            fail();
        } catch (IOException expected) {
            assertEquals(message, expected.getMessage());
        }
!!!6096396.java!!!	repeat(in c : char, in count : int) : String
        char[] array = new char[count];
        Arrays.fill(array, c);
        return new String(array);
