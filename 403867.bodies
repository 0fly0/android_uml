class OldThreadGroupTest
!!!2743323.java!!!	test_activeGroupCount() : void
        ThreadGroup tg = new ThreadGroup("group count");
        assertEquals("Incorrect number of groups",
                0, tg.activeGroupCount());
        Thread t1 = new Thread(tg, new Runnable() {
            public void run() {

            }
        });
        assertEquals("Incorrect number of groups",
                0, tg.activeGroupCount());
        t1.start();
        assertEquals("Incorrect number of groups",
                0, tg.activeGroupCount());
        new ThreadGroup(tg, "test group 1");
        assertEquals("Incorrect number of groups",
                1, tg.activeGroupCount());
        new ThreadGroup(tg, "test group 2");
        assertEquals("Incorrect number of groups",
                2, tg.activeGroupCount());
!!!2743451.java!!!	test_allowThreadSuspensionZ() : void
        ThreadGroup tg = new ThreadGroup("thread suspension");
        assertTrue("Thread suspention can not be changed",
                tg.allowThreadSuspension(false));
        assertTrue("Thread suspention can not be changed",
                tg.allowThreadSuspension(true));
!!!2743579.java!!!	inListOfThreads(inout threads : Thread) : boolean
        for (int i = 0; i < threads.length; i++) {
            if (Thread.currentThread() == threads[i]) {
                return true;
            }
        }

        return false;
!!!2743707.java!!!	test_enumerateLThreadArray() : void
        int numThreads = initialThreadGroup.activeCount();
        Thread[] listOfThreads = new Thread[numThreads];

        int countThread = initialThreadGroup.enumerate(listOfThreads);
        assertEquals(numThreads, countThread);
        assertTrue("Current thread must be in enumeration of threads",
                inListOfThreads(listOfThreads));
!!!2743835.java!!!	test_enumerateLThreadArrayLZtest_enumerateLThreadArrayLZ() : void
        // capture the initial condition
        int initialThreadCount = initialThreadGroup.activeCount();
        Thread[] initialThreads = new Thread[initialThreadCount];
        assertEquals(initialThreadCount, initialThreadGroup.enumerate(initialThreads, false));
        assertEquals(initialThreadCount, initialThreadGroup.enumerate(initialThreads, true));
        assertTrue(inListOfThreads(initialThreads));

        // start some the threads and see how the count changes
        ThreadGroup group = new ThreadGroup(initialThreadGroup, "enumerateThreadArray");
        int groupSize = 3;
        List<MyThread> newThreads = populateGroupsWithThreads(group, groupSize);
        assertEquals(initialThreadCount, initialThreadGroup.enumerate(initialThreads, true));
        assertTrue(inListOfThreads(initialThreads));
        for(MyThread thread : newThreads) {
            thread.start();
        }
        Thread.sleep(500); // starting threads isn't instant!
        int afterStartCount = initialThreadGroup.activeCount();
        Set<Thread> initialPlusNew = new HashSet<Thread>();
        initialPlusNew.addAll(Arrays.asList(initialThreads));
        initialPlusNew.addAll(newThreads);
        Thread[] afterStartThreads = new Thread[afterStartCount];
        assertEquals(afterStartCount, initialThreadGroup.enumerate(afterStartThreads, true));
        assertEquals(initialPlusNew, new HashSet<Thread>(Arrays.asList(afterStartThreads)));
        assertTrue(inListOfThreads(afterStartThreads));

        // kill the threads and count 'em again
        for(MyThread thread : newThreads) {
            thread.interrupt();
        }
        Thread.sleep(500); // killing threads isn't instant
        int afterDeathCount = initialThreadGroup.activeCount();
        Thread[] afterDeathThreads = new Thread[afterDeathCount];
        assertEquals(afterDeathCount, initialThreadGroup.enumerate(afterDeathThreads, false));
        assertEquals(Arrays.asList(initialThreads), Arrays.asList(afterDeathThreads));
        assertTrue(inListOfThreads(afterDeathThreads));
!!!2743963.java!!!	test_enumerateLThreadGroupArray() : void
        int numChildGroupsBefore = initialThreadGroup.activeGroupCount();
        ThreadGroup childGroup = new ThreadGroup(initialThreadGroup, "child group");

        int numChildGroupsAfter = initialThreadGroup.activeGroupCount();
        assertTrue(initialThreadGroup.toString(), numChildGroupsAfter == numChildGroupsBefore + 1);
        ThreadGroup[] listOfGroups = new ThreadGroup[numChildGroupsAfter];

        int countGroupThread = initialThreadGroup.enumerate(listOfGroups);
        assertEquals(numChildGroupsAfter, countGroupThread);
        assertTrue(Arrays.asList(listOfGroups).contains(childGroup));

        ThreadGroup[] listOfGroups1 = new ThreadGroup[numChildGroupsAfter + 1];
        countGroupThread = initialThreadGroup.enumerate(listOfGroups1);
        assertEquals(numChildGroupsAfter, countGroupThread);
        assertNull(listOfGroups1[listOfGroups1.length - 1]);

        ThreadGroup[] listOfGroups2 = new ThreadGroup[numChildGroupsAfter - 1];
        countGroupThread = initialThreadGroup.enumerate(listOfGroups2);
        assertEquals(numChildGroupsAfter - 1, countGroupThread);

        ThreadGroup thrGroup1 = new ThreadGroup("Test Group 1");
        countGroupThread = thrGroup1.enumerate(listOfGroups);
        assertEquals(0, countGroupThread);

        childGroup.destroy();
        assertTrue(initialThreadGroup.activeGroupCount() == numChildGroupsBefore + 1);
!!!2744091.java!!!	test_enumerateLThreadGroupArrayLZ() : void
        ThreadGroup thrGroup = new ThreadGroup("Test Group 1");
        List<MyThread> subThreads = populateGroupsWithThreads(thrGroup, 3);
        int numGroupThreads = thrGroup.activeGroupCount();
        ThreadGroup[] listOfGroups = new ThreadGroup[numGroupThreads];

        assertEquals(0, thrGroup.enumerate(listOfGroups, true));
        assertEquals(0, thrGroup.enumerate(listOfGroups, false));

        for(MyThread thr:subThreads) {
            thr.start();
        }

        numGroupThreads = thrGroup.activeGroupCount();
        listOfGroups = new ThreadGroup[numGroupThreads];

        assertEquals(0, thrGroup.enumerate(listOfGroups, true));
        assertEquals(0, thrGroup.enumerate(listOfGroups, false));

        ThreadGroup subGroup1 = new ThreadGroup(thrGroup, "Test Group 2");
        List<MyThread> subThreads1 = populateGroupsWithThreads(subGroup1, 3);
        numGroupThreads = thrGroup.activeGroupCount();
        listOfGroups = new ThreadGroup[numGroupThreads];

        assertEquals(1, thrGroup.enumerate(listOfGroups, true));
        assertEquals(1, thrGroup.enumerate(listOfGroups, false));

        for(MyThread thr:subThreads1) {
            thr.start();
        }
        numGroupThreads = thrGroup.activeGroupCount();
        listOfGroups = new ThreadGroup[numGroupThreads];

        assertEquals(1, thrGroup.enumerate(listOfGroups, true));
        assertEquals(1, thrGroup.enumerate(listOfGroups, false));

        for(MyThread thr:subThreads) {
            thr.interrupt();
         }

        ThreadGroup subGroup2 = new ThreadGroup(subGroup1, "Test Group 3");
        List<MyThread> subThreads2 = populateGroupsWithThreads(subGroup2, 3);
        numGroupThreads = thrGroup.activeGroupCount();
        listOfGroups = new ThreadGroup[numGroupThreads];

        assertEquals(2, thrGroup.enumerate(listOfGroups, true));
        assertEquals(1, thrGroup.enumerate(listOfGroups, false));
!!!2744219.java!!!	test_interrupt() : void

        Thread.setDefaultUncaughtExceptionHandler(this);
        ThreadGroup tg = new ThreadGroup("interrupt");
        Thread t1 = new Thread(tg, new Runnable() {
            public void run() {
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e) {
                    fail("ok");
                }
            }
        });
        assertFalse("Incorrect state of thread", interrupted);
        t1.start();
        assertFalse("Incorrect state of thread", interrupted);
        t1.interrupt();
        try {
            t1.join();
        } catch (InterruptedException e) {
        }
        assertTrue("Incorrect state of thread", interrupted);
        tg.destroy();
!!!2744347.java!!!	test_isDestroyed() : void
        final ThreadGroup originalCurrent = getInitialThreadGroup();
        final ThreadGroup testRoot = new ThreadGroup(originalCurrent,
                "Test group");
        assertFalse("Test group is not destroyed yet",
                testRoot.isDestroyed());
        testRoot.destroy();
        assertTrue("Test group already destroyed",
                testRoot.isDestroyed());
!!!2744475.java!!!	test_resume() : void
        ThreadGroup group = new ThreadGroup("Foo");

        Thread thread = launchFiveSecondDummyThread(group);

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            // Ignore
        }

        try {
            group.resume();
            fail();
        } catch (UnsupportedOperationException expected) {
        }
!!!2744603.java!!!	launchFiveSecondDummyThread(inout group : ThreadGroup) : Thread
        Thread thread = new Thread(group, "Bar") {
            public void run() {
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e) {
                    // Ignore
                }
            }
        };

        thread.start();

        return thread;
!!!2744731.java!!!	uncaughtException(inout t : Thread, inout e : Throwable) : void
        interrupted = true;
        Thread.setDefaultUncaughtExceptionHandler(null);
!!!2744859.java!!!	setUp() : void
        initialThreadGroup = Thread.currentThread().getThreadGroup();
        ThreadGroup rootThreadGroup = initialThreadGroup;
        while (rootThreadGroup.getParent() != null) {
            rootThreadGroup = rootThreadGroup.getParent();
        }
!!!2744987.java!!!	tearDown() : void
        try {
            // Give the threads a chance to die.
            Thread.sleep(50);
        } catch (InterruptedException e) {
        }
!!!2745115.java!!!	getInitialThreadGroup() : ThreadGroup
        return initialThreadGroup;
!!!2745243.java!!!	groups(inout parent : ThreadGroup) : ThreadGroup
        // No API to get the count of immediate children only
        int count = parent.activeGroupCount();
        ThreadGroup[] all = new ThreadGroup[count];
        parent.enumerate(all, false);
        // Now we may have nulls in the array, we must find the actual size
        int actualSize = 0;
        for (; actualSize < all.length; actualSize++) {
            if (all[actualSize] == null) {
                break;
            }
        }
        return Arrays.copyOfRange(all, 0, actualSize);
!!!2745371.java!!!	populateGroupsWithThreads(inout group : ThreadGroup, in threadCount : int) : List
        List<MyThread> result = new ArrayList<MyThread>();
        populateGroupsWithThreads(group, threadCount, result);
        return result;
!!!2745499.java!!!	populateGroupsWithThreads(inout group : ThreadGroup, in threadCount : int, inout out : List) : void
        for (int i = 0; i < threadCount; i++) {
            out.add(new MyThread(group, "MyThread " + i + " of " + threadCount));
        }

        // Recursively for subgroups (if any)
        ThreadGroup[] children = groups(group);
        for (ThreadGroup element : children) {
            populateGroupsWithThreads(element, threadCount, out);
        }
