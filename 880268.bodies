class SeekBarPreference
!!!4054924.java!!!	SeekBarPreference(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
        TypedArray a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.ProgressBar, defStyle, 0);
        setMax(a.getInt(com.android.internal.R.styleable.ProgressBar_max, mMax));
        a.recycle();
        setLayoutResource(com.android.internal.R.layout.preference_widget_seekbar);
!!!4055052.java!!!	SeekBarPreference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!4055180.java!!!	SeekBarPreference(inout context : Context)
        this(context, null);
!!!4055308.java!!!	onBindView(inout view : View) : void
        super.onBindView(view);
        SeekBar seekBar = (SeekBar) view.findViewById(
                com.android.internal.R.id.seekbar);
        seekBar.setOnSeekBarChangeListener(this);
        seekBar.setMax(mMax);
        seekBar.setProgress(mProgress);
        seekBar.setEnabled(isEnabled());
!!!4055436.java!!!	getSummary() : CharSequence
        return null;
!!!4055564.java!!!	onSetInitialValue(inout restoreValue : boolean, inout defaultValue : Object) : void
        setProgress(restoreValue ? getPersistedInt(mProgress)
                : (Integer) defaultValue);
!!!4055692.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return a.getInt(index, 0);
!!!4055820.java!!!	onKey(inout v : View, in keyCode : int, inout event : KeyEvent) : boolean
        if (event.getAction() != KeyEvent.ACTION_UP) {
            if (keyCode == KeyEvent.KEYCODE_PLUS
                    || keyCode == KeyEvent.KEYCODE_EQUALS) {
                setProgress(getProgress() + 1);
                return true;
            }
            if (keyCode == KeyEvent.KEYCODE_MINUS) {
                setProgress(getProgress() - 1);
                return true;
            }
        }
        return false;
!!!4055948.java!!!	setMax(in max : int) : void
        if (max != mMax) {
            mMax = max;
            notifyChanged();
        }
!!!4056076.java!!!	setProgress(in progress : int) : void
        setProgress(progress, true);
!!!4056204.java!!!	setProgress(in progress : int, inout notifyChanged : boolean) : void
        if (progress > mMax) {
            progress = mMax;
        }
        if (progress < 0) {
            progress = 0;
        }
        if (progress != mProgress) {
            mProgress = progress;
            persistInt(progress);
            if (notifyChanged) {
                notifyChanged();
            }
        }
!!!4056332.java!!!	getProgress() : int
        return mProgress;
!!!4056460.java!!!	syncProgress(inout seekBar : SeekBar) : void
        int progress = seekBar.getProgress();
        if (progress != mProgress) {
            if (callChangeListener(progress)) {
                setProgress(progress, false);
            } else {
                seekBar.setProgress(mProgress);
            }
        }
!!!4056588.java!!!	onProgressChanged(inout seekBar : SeekBar, in progress : int, inout fromUser : boolean) : void
        if (fromUser && !mTrackingTouch) {
            syncProgress(seekBar);
        }
!!!4056716.java!!!	onStartTrackingTouch(inout seekBar : SeekBar) : void
        mTrackingTouch = true;
!!!4056844.java!!!	onStopTrackingTouch(inout seekBar : SeekBar) : void
        mTrackingTouch = false;
        if (seekBar.getProgress() != mProgress) {
            syncProgress(seekBar);
        }
!!!4056972.java!!!	onSaveInstanceState() : Parcelable
        /*
         * Suppose a client uses this preference type without persisting. We
         * must save the instance state so it is able to, for example, survive
         * orientation changes.
         */

        final Parcelable superState = super.onSaveInstanceState();
        if (isPersistent()) {
            // No need to save instance state since it's persistent
            return superState;
        }

        // Save the instance state
        final SavedState myState = new SavedState(superState);
        myState.progress = mProgress;
        myState.max = mMax;
        return myState;
!!!4057100.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (!state.getClass().equals(SavedState.class)) {
            // Didn't save state for us in onSaveInstanceState
            super.onRestoreInstanceState(state);
            return;
        }

        // Restore the instance state
        SavedState myState = (SavedState) state;
        super.onRestoreInstanceState(myState.getSuperState());
        mProgress = myState.progress;
        mMax = myState.max;
        notifyChanged();
