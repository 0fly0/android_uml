class Formatter
!!!1276059.java!!!	getDecimalFormat(inout pattern : String) : NativeDecimalFormat
        return cachedDecimalFormat.get().update(localeData, pattern);
!!!1276187.java!!!	Formatter()
        this(new StringBuilder(), Locale.getDefault());
!!!1276315.java!!!	Formatter(inout a : Appendable)
        this(a, Locale.getDefault());
!!!1276443.java!!!	Formatter(inout l : Locale)
        this(new StringBuilder(), l);
!!!1276571.java!!!	Formatter(inout a : Appendable, inout l : Locale)
        if (a == null) {
            out = new StringBuilder();
        } else {
            out = a;
        }
        locale = l;
!!!1276699.java!!!	Formatter(inout fileName : String)
        this(new File(fileName));

!!!1276827.java!!!	Formatter(inout fileName : String, inout csn : String)
        this(new File(fileName), csn);
!!!1276955.java!!!	Formatter(inout fileName : String, inout csn : String, inout l : Locale)

        this(new File(fileName), csn, l);
!!!1277083.java!!!	Formatter(inout file : File)
        this(new FileOutputStream(file));
!!!1277211.java!!!	Formatter(inout file : File, inout csn : String)
        this(file, csn, Locale.getDefault());
!!!1277339.java!!!	Formatter(inout file : File, inout csn : String, inout l : Locale)
        FileOutputStream fout = null;
        try {
            fout = new FileOutputStream(file);
            out = new BufferedWriter(new OutputStreamWriter(fout, csn));
        } catch (RuntimeException e) {
            IoUtils.closeQuietly(fout);
            throw e;
        } catch (UnsupportedEncodingException e) {
            IoUtils.closeQuietly(fout);
            throw e;
        }

        locale = l;
!!!1277467.java!!!	Formatter(inout os : OutputStream)
        out = new BufferedWriter(new OutputStreamWriter(os, Charset.defaultCharset()));
        locale = Locale.getDefault();
!!!1277595.java!!!	Formatter(inout os : OutputStream, inout csn : String)
        this(os, csn, Locale.getDefault());
!!!1277723.java!!!	Formatter(inout os : OutputStream, inout csn : String, inout l : Locale)
        out = new BufferedWriter(new OutputStreamWriter(os, csn));
        locale = l;
!!!1277851.java!!!	Formatter(inout ps : PrintStream)
        if (ps == null) {
            throw new NullPointerException("ps == null");
        }
        out = ps;
        locale = Locale.getDefault();
!!!1277979.java!!!	checkNotClosed() : void
        if (closed) {
            throw new FormatterClosedException();
        }
!!!1278107.java!!!	locale() : Locale
        checkNotClosed();
        return locale;
!!!1278235.java!!!	out() : Appendable
        checkNotClosed();
        return out;
!!!1278363.java!!!	toString() : String
        checkNotClosed();
        return out.toString();
!!!1278491.java!!!	flush() : void
        checkNotClosed();
        if (out instanceof Flushable) {
            try {
                ((Flushable) out).flush();
            } catch (IOException e) {
                lastIOException = e;
            }
        }
!!!1278619.java!!!	close() : void
        if (!closed) {
            closed = true;
            try {
                if (out instanceof Closeable) {
                    ((Closeable) out).close();
                }
            } catch (IOException e) {
                lastIOException = e;
            }
        }
!!!1278747.java!!!	ioException() : IOException
        return lastIOException;
!!!1278875.java!!!	format(inout format : String, inout  : Object...args) : Formatter
        return format(this.locale, format, args);
!!!1279003.java!!!	format(inout l : Locale, inout format : String, inout  : Object...args) : Formatter
        Locale originalLocale = locale;
        try {
            this.locale = (l == null ? Locale.US : l);
            this.localeData = LocaleData.get(locale);
            doFormat(format, args);
        } finally {
            this.locale = originalLocale;
        }
        return this;
!!!1279131.java!!!	doFormat(inout format : String, inout  : Object...args) : void
        checkNotClosed();

        FormatSpecifierParser fsp = new FormatSpecifierParser(format);
        int currentObjectIndex = 0;
        Object lastArgument = null;
        boolean hasLastArgumentSet = false;

        int length = format.length();
        int i = 0;
        while (i < length) {
            // Find the maximal plain-text sequence...
            int plainTextStart = i;
            int nextPercent = format.indexOf('%', i);
            int plainTextEnd = (nextPercent == -1) ? length : nextPercent;
            // ...and output it.
            if (plainTextEnd > plainTextStart) {
                outputCharSequence(format, plainTextStart, plainTextEnd);
            }
            i = plainTextEnd;
            // Do we have a format specifier?
            if (i < length) {
                FormatToken token = fsp.parseFormatToken(i + 1);

                Object argument = null;
                if (token.requireArgument()) {
                    int index = token.getArgIndex() == FormatToken.UNSET ? currentObjectIndex++ : token.getArgIndex();
                    argument = getArgument(args, index, fsp, lastArgument, hasLastArgumentSet);
                    lastArgument = argument;
                    hasLastArgumentSet = true;
                }

                CharSequence substitution = transform(token, argument);
                // The substitution is null if we called Formattable.formatTo.
                if (substitution != null) {
                    outputCharSequence(substitution, 0, substitution.length());
                }
                i = fsp.i;
            }
        }
!!!1279259.java!!!	outputCharSequence(inout cs : CharSequence, in start : int, in end : int) : void
        try {
            out.append(cs, start, end);
        } catch (IOException e) {
            lastIOException = e;
        }
!!!1279387.java!!!	getArgument(inout args : Object, in index : int, inout fsp : FormatSpecifierParser, inout lastArgument : Object, inout hasLastArgumentSet : boolean) : Object
        if (index == FormatToken.LAST_ARGUMENT_INDEX && !hasLastArgumentSet) {
            throw new MissingFormatArgumentException("<");
        }

        if (args == null) {
            return null;
        }

        if (index >= args.length) {
            throw new MissingFormatArgumentException(fsp.getFormatSpecifierText());
        }

        if (index == FormatToken.LAST_ARGUMENT_INDEX) {
            return lastArgument;
        }

        return args[index];
!!!1281691.java!!!	transform(inout token : FormatToken, inout argument : Object) : CharSequence
        this.formatToken = token;
        this.arg = argument;

        // There are only two format specifiers that matter: "%d" and "%s".
        // Nothing else is common in the wild. We fast-path these two to
        // avoid the heavyweight machinery needed to cope with flags, width,
        // and precision.
        if (token.isDefault()) {
            switch (token.getConversionType()) {
            case 's':
                if (arg == null) {
                    return "null";
                } else if (!(arg instanceof Formattable)) {
                    return arg.toString();
                }
                break;
            case 'd':
                boolean needLocalizedDigits = (localeData.zeroDigit != '0');
                if (out instanceof StringBuilder && !needLocalizedDigits) {
                    if (arg instanceof Integer || arg instanceof Short || arg instanceof Byte) {
                        IntegralToString.appendInt((StringBuilder) out, ((Number) arg).intValue());
                        return null;
                    } else if (arg instanceof Long) {
                        IntegralToString.appendLong((StringBuilder) out, ((Long) arg).longValue());
                        return null;
                    }
                }
                if (arg instanceof Integer || arg instanceof Long || arg instanceof Short || arg instanceof Byte) {
                    String result = arg.toString();
                    return needLocalizedDigits ? localizeDigits(result) : result;
                }
            }
        }

        formatToken.checkFlags(arg);
        CharSequence result;
        switch (token.getConversionType()) {
        case 'B': case 'b':
            result = transformFromBoolean();
            break;
        case 'H': case 'h':
            result = transformFromHashCode();
            break;
        case 'S': case 's':
            result = transformFromString();
            break;
        case 'C': case 'c':
            result = transformFromCharacter();
            break;
        case 'd': case 'o': case 'x': case 'X':
            if (arg == null || arg instanceof BigInteger) {
                result = transformFromBigInteger();
            } else {
                result = transformFromInteger();
            }
            break;
        case 'A': case 'a': case 'E': case 'e': case 'f': case 'G': case 'g':
            result = transformFromFloat();
            break;
        case '%':
            result = transformFromPercent();
            break;
        case 'n':
            result = System.lineSeparator();
            break;
        case 't': case 'T':
            result = transformFromDateTime();
            break;
        default:
            throw token.unknownFormatConversionException();
        }

        if (Character.isUpperCase(token.getConversionType())) {
            if (result != null) {
                result = result.toString().toUpperCase(locale);
            }
        }
        return result;
!!!1281819.java!!!	badArgumentType() : IllegalFormatConversionException
        throw new IllegalFormatConversionException(formatToken.getConversionType(), arg.getClass());
!!!1281947.java!!!	localizeDigits(inout s : CharSequence) : CharSequence
        int length = s.length();
        int offsetToLocalizedDigits = localeData.zeroDigit - '0';
        StringBuilder result = new StringBuilder(length);
        for (int i = 0; i < length; ++i) {
            char ch = s.charAt(i);
            if (ch >= '0' && ch <= '9') {
                ch += offsetToLocalizedDigits;
            }
            result.append(ch);
        }
        return result;
!!!1282075.java!!!	insertGrouping(inout s : CharSequence) : CharSequence
        StringBuilder result = new StringBuilder(s.length() + s.length()/3);

        // A leading '-' doesn't want to be included in the grouping.
        int digitsLength = s.length();
        int i = 0;
        if (s.charAt(0) == '-') {
            --digitsLength;
            ++i;
            result.append('-');
        }

        // Append the digits that come before the first separator.
        int headLength = digitsLength % 3;
        if (headLength == 0) {
            headLength = 3;
        }
        result.append(s, i, i + headLength);
        i += headLength;

        // Append the remaining groups.
        for (; i < s.length(); i += 3) {
            result.append(localeData.groupingSeparator);
            result.append(s, i, i + 3);
        }
        return result;
!!!1282203.java!!!	transformFromBoolean() : CharSequence
        CharSequence result;
        if (arg instanceof Boolean) {
            result = arg.toString();
        } else if (arg == null) {
            result = "false";
        } else {
            result = "true";
        }
        return padding(result, 0);
!!!1282331.java!!!	transformFromHashCode() : CharSequence
        CharSequence result;
        if (arg == null) {
            result = "null";
        } else {
            result = Integer.toHexString(arg.hashCode());
        }
        return padding(result, 0);
!!!1282459.java!!!	transformFromString() : CharSequence
        if (arg instanceof Formattable) {
            int flags = 0;
            if (formatToken.flagMinus) {
                flags |= FormattableFlags.LEFT_JUSTIFY;
            }
            if (formatToken.flagSharp) {
                flags |= FormattableFlags.ALTERNATE;
            }
            if (Character.isUpperCase(formatToken.getConversionType())) {
                flags |= FormattableFlags.UPPERCASE;
            }
            ((Formattable) arg).formatTo(this, flags, formatToken.getWidth(),
                    formatToken.getPrecision());
            // all actions have been taken out in the
            // Formattable.formatTo, thus there is nothing to do, just
            // returns null, which tells the Parser to add nothing to the
            // output.
            return null;
        }
        CharSequence result = arg != null ? arg.toString() : "null";
        return padding(result, 0);
!!!1282587.java!!!	transformFromCharacter() : CharSequence
        if (arg == null) {
            return padding("null", 0);
        }
        if (arg instanceof Character) {
            return padding(String.valueOf(arg), 0);
        } else if (arg instanceof Byte || arg instanceof Short || arg instanceof Integer) {
            int codePoint = ((Number) arg).intValue();
            if (!Character.isValidCodePoint(codePoint)) {
                throw new IllegalFormatCodePointException(codePoint);
            }
            CharSequence result = (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT)
                    ? String.valueOf((char) codePoint)
                    : String.valueOf(Character.toChars(codePoint));
            return padding(result, 0);
        } else {
            throw badArgumentType();
        }
!!!1282715.java!!!	transformFromPercent() : CharSequence
        return padding("%", 0);
!!!1282843.java!!!	padding(inout source : CharSequence, in startIndex : int) : CharSequence
        int start = startIndex;
        int width = formatToken.getWidth();
        int precision = formatToken.getPrecision();

        int length = source.length();
        if (precision >= 0) {
            length = Math.min(length, precision);
            if (source instanceof StringBuilder) {
                ((StringBuilder) source).setLength(length);
            } else {
                source = source.subSequence(0, length);
            }
        }
        if (width > 0) {
            width = Math.max(source.length(), width);
        }
        if (length >= width) {
            return source;
        }

        char paddingChar = '\u0020'; // space as padding char.
        if (formatToken.flagZero) {
            if (formatToken.getConversionType() == 'd') {
                paddingChar = localeData.zeroDigit;
            } else {
                paddingChar = '0'; // No localized digits for bases other than decimal.
            }
        } else {
            // if padding char is space, always pad from the start.
            start = 0;
        }
        char[] paddingChars = new char[width - length];
        Arrays.fill(paddingChars, paddingChar);

        boolean paddingRight = formatToken.flagMinus;
        StringBuilder result = toStringBuilder(source);
        if (paddingRight) {
            result.append(paddingChars);
        } else {
            result.insert(start, paddingChars);
        }
        return result;
!!!1282971.java!!!	toStringBuilder(inout cs : CharSequence) : StringBuilder
        return cs instanceof StringBuilder ? (StringBuilder) cs : new StringBuilder(cs);
!!!1283099.java!!!	wrapParentheses(inout result : StringBuilder) : StringBuilder
        result.setCharAt(0, '('); // Replace the '-'.
        if (formatToken.flagZero) {
            formatToken.setWidth(formatToken.getWidth() - 1);
            result = (StringBuilder) padding(result, 1);
            result.append(')');
        } else {
            result.append(')');
            result = (StringBuilder) padding(result, 0);
        }
        return result;
!!!1283227.java!!!	transformFromInteger() : CharSequence
        int startIndex = 0;
        StringBuilder result = new StringBuilder();
        char currentConversionType = formatToken.getConversionType();

        long value;
        if (arg instanceof Long) {
            value = ((Long) arg).longValue();
        } else if (arg instanceof Integer) {
            value = ((Integer) arg).longValue();
        } else if (arg instanceof Short) {
            value = ((Short) arg).longValue();
        } else if (arg instanceof Byte) {
            value = ((Byte) arg).longValue();
        } else {
            throw badArgumentType();
        }

        if (formatToken.flagSharp) {
            if (currentConversionType == 'o') {
                result.append("0");
                startIndex += 1;
            } else {
                result.append("0x");
                startIndex += 2;
            }
        }

        if (currentConversionType == 'd') {
            CharSequence digits = Long.toString(value);
            if (formatToken.flagComma) {
                digits = insertGrouping(digits);
            }
            if (localeData.zeroDigit != '0') {
                digits = localizeDigits(digits);
            }
            result.append(digits);

            if (value < 0) {
                if (formatToken.flagParenthesis) {
                    return wrapParentheses(result);
                } else if (formatToken.flagZero) {
                    startIndex++;
                }
            } else {
                if (formatToken.flagPlus) {
                    result.insert(0, '+');
                    startIndex += 1;
                } else if (formatToken.flagSpace) {
                    result.insert(0, ' ');
                    startIndex += 1;
                }
            }
        } else {
            // Undo sign-extension, since we'll be using Long.to(Octal|Hex)String.
            if (arg instanceof Byte) {
                value &= 0xffL;
            } else if (arg instanceof Short) {
                value &= 0xffffL;
            } else if (arg instanceof Integer) {
                value &= 0xffffffffL;
            }
            if (currentConversionType == 'o') {
                result.append(Long.toOctalString(value));
            } else {
                result.append(Long.toHexString(value));
            }
        }

        return padding(result, startIndex);
!!!1283355.java!!!	transformFromNull() : CharSequence
        formatToken.flagZero = false;
        return padding("null", 0);
!!!1283483.java!!!	transformFromBigInteger() : CharSequence
        int startIndex = 0;
        StringBuilder result = new StringBuilder();
        BigInteger bigInt = (BigInteger) arg;
        char currentConversionType = formatToken.getConversionType();

        if (bigInt == null) {
            return transformFromNull();
        }

        boolean isNegative = (bigInt.compareTo(BigInteger.ZERO) < 0);

        if (currentConversionType == 'd') {
            CharSequence digits = bigInt.toString(10);
            if (formatToken.flagComma) {
                digits = insertGrouping(digits);
            }
            result.append(digits);
        } else if (currentConversionType == 'o') {
            // convert BigInteger to a string presentation using radix 8
            result.append(bigInt.toString(8));
        } else {
            // convert BigInteger to a string presentation using radix 16
            result.append(bigInt.toString(16));
        }
        if (formatToken.flagSharp) {
            startIndex = isNegative ? 1 : 0;
            if (currentConversionType == 'o') {
                result.insert(startIndex, "0");
                startIndex += 1;
            } else if (currentConversionType == 'x' || currentConversionType == 'X') {
                result.insert(startIndex, "0x");
                startIndex += 2;
            }
        }

        if (!isNegative) {
            if (formatToken.flagPlus) {
                result.insert(0, '+');
                startIndex += 1;
            }
            if (formatToken.flagSpace) {
                result.insert(0, ' ');
                startIndex += 1;
            }
        }

        /* pad paddingChar to the output */
        if (isNegative && formatToken.flagParenthesis) {
            return wrapParentheses(result);
        }
        if (isNegative && formatToken.flagZero) {
            startIndex++;
        }
        return padding(result, startIndex);
!!!1283611.java!!!	transformFromDateTime() : CharSequence
        if (arg == null) {
            return transformFromNull();
        }

        Calendar calendar;
        if (arg instanceof Calendar) {
            calendar = (Calendar) arg;
        } else {
            Date date = null;
            if (arg instanceof Long) {
                date = new Date(((Long) arg).longValue());
            } else if (arg instanceof Date) {
                date = (Date) arg;
            } else {
                throw badArgumentType();
            }
            calendar = Calendar.getInstance(locale);
            calendar.setTime(date);
        }

        StringBuilder result = new StringBuilder();
        if (!appendT(result, formatToken.getDateSuffix(), calendar)) {
            throw formatToken.unknownFormatConversionException();
        }
        return padding(result, 0);
!!!1283739.java!!!	appendT(inout result : StringBuilder, in conversion : char, inout calendar : Calendar) : boolean
        switch (conversion) {
        case 'A':
            result.append(localeData.longWeekdayNames[calendar.get(Calendar.DAY_OF_WEEK)]);
            return true;
        case 'a':
            result.append(localeData.shortWeekdayNames[calendar.get(Calendar.DAY_OF_WEEK)]);
            return true;
        case 'B':
            result.append(localeData.longMonthNames[calendar.get(Calendar.MONTH)]);
            return true;
        case 'b': case 'h':
            result.append(localeData.shortMonthNames[calendar.get(Calendar.MONTH)]);
            return true;
        case 'C':
            appendLocalized(result, calendar.get(Calendar.YEAR) / 100, 2);
            return true;
        case 'D':
            appendT(result, 'm', calendar);
            result.append('/');
            appendT(result, 'd', calendar);
            result.append('/');
            appendT(result, 'y', calendar);
            return true;
        case 'F':
            appendT(result, 'Y', calendar);
            result.append('-');
            appendT(result, 'm', calendar);
            result.append('-');
            appendT(result, 'd', calendar);
            return true;
        case 'H':
            appendLocalized(result, calendar.get(Calendar.HOUR_OF_DAY), 2);
            return true;
        case 'I':
            appendLocalized(result, to12Hour(calendar.get(Calendar.HOUR)), 2);
            return true;
        case 'L':
            appendLocalized(result, calendar.get(Calendar.MILLISECOND), 3);
            return true;
        case 'M':
            appendLocalized(result, calendar.get(Calendar.MINUTE), 2);
            return true;
        case 'N':
            appendLocalized(result, calendar.get(Calendar.MILLISECOND) * 1000000L, 9);
            return true;
        case 'Q':
            appendLocalized(result, calendar.getTimeInMillis(), 0);
            return true;
        case 'R':
            appendT(result, 'H', calendar);
            result.append(':');
            appendT(result, 'M', calendar);
            return true;
        case 'S':
            appendLocalized(result, calendar.get(Calendar.SECOND), 2);
            return true;
        case 'T':
            appendT(result, 'H', calendar);
            result.append(':');
            appendT(result, 'M', calendar);
            result.append(':');
            appendT(result, 'S', calendar);
            return true;
        case 'Y':
            appendLocalized(result, calendar.get(Calendar.YEAR), 4);
            return true;
        case 'Z':
            TimeZone timeZone = calendar.getTimeZone();
            result.append(timeZone.getDisplayName(timeZone.inDaylightTime(calendar.getTime()),
                    TimeZone.SHORT, locale));
            return true;
        case 'c':
            appendT(result, 'a', calendar);
            result.append(' ');
            appendT(result, 'b', calendar);
            result.append(' ');
            appendT(result, 'd', calendar);
            result.append(' ');
            appendT(result, 'T', calendar);
            result.append(' ');
            appendT(result, 'Z', calendar);
            result.append(' ');
            appendT(result, 'Y', calendar);
            return true;
        case 'd':
            appendLocalized(result, calendar.get(Calendar.DAY_OF_MONTH), 2);
            return true;
        case 'e':
            appendLocalized(result, calendar.get(Calendar.DAY_OF_MONTH), 0);
            return true;
        case 'j':
            appendLocalized(result, calendar.get(Calendar.DAY_OF_YEAR), 3);
            return true;
        case 'k':
            appendLocalized(result, calendar.get(Calendar.HOUR_OF_DAY), 0);
            return true;
        case 'l':
            appendLocalized(result, to12Hour(calendar.get(Calendar.HOUR)), 0);
            return true;
        case 'm':
            // Calendar.JANUARY is 0; humans want January represented as 1.
            appendLocalized(result, calendar.get(Calendar.MONTH) + 1, 2);
            return true;
        case 'p':
            result.append(localeData.amPm[calendar.get(Calendar.AM_PM)].toLowerCase(locale));
            return true;
        case 'r':
            appendT(result, 'I', calendar);
            result.append(':');
            appendT(result, 'M', calendar);
            result.append(':');
            appendT(result, 'S', calendar);
            result.append(' ');
            result.append(localeData.amPm[calendar.get(Calendar.AM_PM)]);
            return true;
        case 's':
            appendLocalized(result, calendar.getTimeInMillis() / 1000, 0);
            return true;
        case 'y':
            appendLocalized(result, calendar.get(Calendar.YEAR) % 100, 2);
            return true;
        case 'z':
            long offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
            char sign = '+';
            if (offset < 0) {
                sign = '-';
                offset = -offset;
            }
            result.append(sign);
            appendLocalized(result, offset / 3600000, 2);
            appendLocalized(result, (offset % 3600000) / 60000, 2);
            return true;
        }
        return false;
!!!1283867.java!!!	to12Hour(in hour : int) : int
        return hour == 0 ? 12 : hour;
!!!1283995.java!!!	appendLocalized(inout result : StringBuilder, in value : long, in width : int) : void
        int paddingIndex = result.length();
        char zeroDigit = localeData.zeroDigit;
        if (zeroDigit == '0') {
            result.append(value);
        } else {
            result.append(localizeDigits(Long.toString(value)));
        }
        int zeroCount = width - (result.length() - paddingIndex);
        if (zeroCount <= 0) {
            return;
        }
        if (zeroDigit == '0') {
            result.insert(paddingIndex, ZEROS, 0, zeroCount);
        } else {
            for (int i = 0; i < zeroCount; ++i) {
                result.insert(paddingIndex, zeroDigit);
            }
        }
!!!1284123.java!!!	transformFromSpecialNumber(in d : double) : CharSequence
        String source = null;
        if (Double.isNaN(d)) {
            source = "NaN";
        } else if (d == Double.POSITIVE_INFINITY) {
            if (formatToken.flagPlus) {
                source = "+Infinity";
            } else if (formatToken.flagSpace) {
                source = " Infinity";
            } else {
                source = "Infinity";
            }
        } else if (d == Double.NEGATIVE_INFINITY) {
            if (formatToken.flagParenthesis) {
                source = "(Infinity)";
            } else {
                source = "-Infinity";
            }
        } else {
            return null;
        }

        formatToken.setPrecision(FormatToken.UNSET);
        formatToken.flagZero = false;
        return padding(source, 0);
!!!1284251.java!!!	transformFromFloat() : CharSequence
        if (arg == null) {
            return transformFromNull();
        } else if (arg instanceof Float || arg instanceof Double) {
            Number number = (Number) arg;
            double d = number.doubleValue();
            if (d != d || d == Double.POSITIVE_INFINITY || d == Double.NEGATIVE_INFINITY) {
                return transformFromSpecialNumber(d);
            }
        } else if (arg instanceof BigDecimal) {
            // BigDecimal can't represent NaN or infinities, but its doubleValue method will return
            // infinities if the BigDecimal is too big for a double.
        } else {
            throw badArgumentType();
        }

        char conversionType = formatToken.getConversionType();
        if (conversionType != 'a' && conversionType != 'A' && !formatToken.isPrecisionSet()) {
            formatToken.setPrecision(FormatToken.DEFAULT_PRECISION);
        }

        StringBuilder result = new StringBuilder();
        switch (conversionType) {
        case 'a': case 'A':
            transformA(result);
            break;
        case 'e': case 'E':
            transformE(result);
            break;
        case 'f':
            transformF(result);
            break;
        case 'g':
        case 'G':
            transformG(result);
            break;
        default:
            throw formatToken.unknownFormatConversionException();
        }

        formatToken.setPrecision(FormatToken.UNSET);

        int startIndex = 0;
        if (result.charAt(0) == localeData.minusSign) {
            if (formatToken.flagParenthesis) {
                return wrapParentheses(result);
            }
        } else {
            if (formatToken.flagSpace) {
                result.insert(0, ' ');
                startIndex++;
            }
            if (formatToken.flagPlus) {
                result.insert(0, '+');
                startIndex++;
            }
        }

        char firstChar = result.charAt(0);
        if (formatToken.flagZero && (firstChar == '+' || firstChar == localeData.minusSign)) {
            startIndex = 1;
        }

        if (conversionType == 'a' || conversionType == 'A') {
            startIndex += 2;
        }
        return padding(result, startIndex);
!!!1284379.java!!!	transformE(inout result : StringBuilder) : void
        // All zeros in this method are *pattern* characters, so no localization.
        final int precision = formatToken.getPrecision();
        String pattern = "0E+00";
        if (precision > 0) {
            StringBuilder sb = new StringBuilder("0.");
            char[] zeros = new char[precision];
            Arrays.fill(zeros, '0');
            sb.append(zeros);
            sb.append("E+00");
            pattern = sb.toString();
        }

        NativeDecimalFormat nf = getDecimalFormat(pattern);
        char[] chars;
        if (arg instanceof BigDecimal) {
            chars = nf.formatBigDecimal((BigDecimal) arg, null);
        } else {
            chars = nf.formatDouble(((Number) arg).doubleValue(), null);
        }
        // Unlike %f, %e uses 'e' (regardless of what the DecimalFormatSymbols would have us use).
        for (int i = 0; i < chars.length; ++i) {
            if (chars[i] == 'E') {
                chars[i] = 'e';
            }
        }
        result.append(chars);
        // The # flag requires that we always output a decimal separator.
        if (formatToken.flagSharp && precision == 0) {
            int indexOfE = result.indexOf("e");
            result.insert(indexOfE, localeData.decimalSeparator);
        }
!!!1284507.java!!!	transformG(inout result : StringBuilder) : void
        int precision = formatToken.getPrecision();
        if (precision == 0) {
            precision = 1;
        }
        formatToken.setPrecision(precision);

        double d = ((Number) arg).doubleValue();
        if (d == 0.0) {
            precision--;
            formatToken.setPrecision(precision);
            transformF(result);
            return;
        }

        boolean requireScientificRepresentation = true;
        d = Math.abs(d);
        if (Double.isInfinite(d)) {
            precision = formatToken.getPrecision();
            precision--;
            formatToken.setPrecision(precision);
            transformE(result);
            return;
        }
        BigDecimal b = new BigDecimal(d, new MathContext(precision));
        d = b.doubleValue();
        long l = b.longValue();

        if (d >= 1 && d < Math.pow(10, precision)) {
            if (l < Math.pow(10, precision)) {
                requireScientificRepresentation = false;
                precision -= String.valueOf(l).length();
                precision = precision < 0 ? 0 : precision;
                l = Math.round(d * Math.pow(10, precision + 1));
                if (String.valueOf(l).length() <= formatToken.getPrecision()) {
                    precision++;
                }
                formatToken.setPrecision(precision);
            }
        } else {
            l = b.movePointRight(4).longValue();
            if (d >= Math.pow(10, -4) && d < 1) {
                requireScientificRepresentation = false;
                precision += 4 - String.valueOf(l).length();
                l = b.movePointRight(precision + 1).longValue();
                if (String.valueOf(l).length() <= formatToken.getPrecision()) {
                    precision++;
                }
                l = b.movePointRight(precision).longValue();
                if (l >= Math.pow(10, precision - 4)) {
                    formatToken.setPrecision(precision);
                }
            }
        }
        if (requireScientificRepresentation) {
            precision = formatToken.getPrecision();
            precision--;
            formatToken.setPrecision(precision);
            transformE(result);
        } else {
            transformF(result);
        }
!!!1284635.java!!!	transformF(inout result : StringBuilder) : void
        // All zeros in this method are *pattern* characters, so no localization.
        String pattern = "0.000000";
        final int precision = formatToken.getPrecision();
        if (formatToken.flagComma || precision != FormatToken.DEFAULT_PRECISION) {
            StringBuilder patternBuilder = new StringBuilder();
            if (formatToken.flagComma) {
                patternBuilder.append(',');
                int groupingSize = 3;
                char[] sharps = new char[groupingSize - 1];
                Arrays.fill(sharps, '#');
                patternBuilder.append(sharps);
            }
            patternBuilder.append('0');
            if (precision > 0) {
                patternBuilder.append('.');
                for (int i = 0; i < precision; ++i) {
                    patternBuilder.append('0');
                }
            }
            pattern = patternBuilder.toString();
        }

        NativeDecimalFormat nf = getDecimalFormat(pattern);
        if (arg instanceof BigDecimal) {
            result.append(nf.formatBigDecimal((BigDecimal) arg, null));
        } else {
            result.append(nf.formatDouble(((Number) arg).doubleValue(), null));
        }
        // The # flag requires that we always output a decimal separator.
        if (formatToken.flagSharp && precision == 0) {
            result.append(localeData.decimalSeparator);
        }
!!!1284763.java!!!	transformA(inout result : StringBuilder) : void
        if (arg instanceof Float) {
            result.append(Float.toHexString(((Float) arg).floatValue()));
        } else if (arg instanceof Double) {
            result.append(Double.toHexString(((Double) arg).doubleValue()));
        } else {
            throw badArgumentType();
        }

        if (!formatToken.isPrecisionSet()) {
            return;
        }

        int precision = formatToken.getPrecision();
        if (precision == 0) {
            precision = 1;
        }
        int indexOfFirstFractionalDigit = result.indexOf(".") + 1;
        int indexOfP = result.indexOf("p");
        int fractionalLength = indexOfP - indexOfFirstFractionalDigit;

        if (fractionalLength == precision) {
            return;
        }

        if (fractionalLength < precision) {
            char[] zeros = new char[precision - fractionalLength];
            Arrays.fill(zeros, '0'); // %a shouldn't be localized.
            result.insert(indexOfP, zeros);
            return;
        }
        result.delete(indexOfFirstFractionalDigit + precision, indexOfP);
