class SubMenuFragment
!!!12368652.java!!!	SubMenuFragment()
        super();
        // TODO Auto-generated constructor stub
!!!12368780.java!!!	onViewCreated(inout view : View, inout savedInstanceState : Bundle) : void
        super.onViewCreated(view, savedInstanceState);

        // getActivity().setTitle(getMenuData().get(KEY_MENU_TITLE).toString());
        ((MainActivity) getActivity()).setTitle(getMenuData().get(KEY_MENU_TITLE).toString());
!!!12368908.java!!!	onListItemClick(inout l : ListView, inout v : View, in position : int, in id : long) : void
        super.onListItemClick(l, v, position, id);
        if (v != null && v.isEnabled()) {
            Object classNameObj = null;
            if (getData() != null) {
                classNameObj = getData().get(position).get(KEY_TARGET_CLASS);
            }
            if (classNameObj != null) {
                String className = classNameObj.toString();
                if (className.contains("Fragment")) {
                    Object targetObject = Utils.CreateObjectByClass(className);
                    MenuFragment menuFgm = (MenuFragment) targetObject;
                    if (menuFgm != null) {
                        FragmentTransaction fragmentTransaction = getFragmentManager()
                                .beginTransaction();
                        fragmentTransaction.setCustomAnimations(R.anim.slide_in, R.anim.slide_out,
                                R.anim.slide_in_back,
                                R.anim.slide_out_back);
                        fragmentTransaction.replace(R.id.mainSettingsLayout, menuFgm, className);
                        fragmentTransaction.addToBackStack(className);
                        fragmentTransaction.commit();
                    }
                } else if (className.contains("Activity")) {
                    Class<?> c = Utils.GetClassTypeByClassName(className);
                    if (c != null) {
                        Intent intent = new Intent(getActivity(), c);
                        // Comment the signleTop flag otherwise onActivityResult
                        // is called immediately with Cancel result
                        // intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
                        // intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        if (getData().get(position).get(KEY_API) != null) {

                            intent.putExtra("api_name", getData().get(position).get(KEY_API)
                                    .toString());
                        }
                        setupActionIntent(intent, position);
                    }
                }
            }
        }
!!!12369036.java!!!	setupActionIntent(inout intent : Intent, in position : int) : void
        if (intent != null) {
            startActivityForResult(intent, REQUEST_GENERAL);
            hideSelf(true);
        }
!!!12369164.java!!!	getResourceId() : int
        return R.layout.sub_menu;
!!!12369292.java!!!	getItemResourceId() : int
        return R.layout.list_item_submenu;
!!!12369420.java!!!	getDataXmlId() : int
        return 0;
!!!12369548.java!!!	getAdatperKeyArray() : String
        return new String[] {
                KEY_TITLE, KEY_ITEM_MASK
        };
!!!12369676.java!!!	getAdatperIdArray() : int
        return new int[] {
                R.id.DescText, R.id.subitemlayout
        };
!!!12369804.java!!!	updateValidData(inout map : Map<String, Object>) : boolean
        if (map.get(KEY_API) != null) {
            String API_name = map.get(KEY_API).toString();
            Integer retVal = Utils.getValueByAPI(FacFunctionImpl.getInstance(), API_name);
            map.put(KEY_CURR_VALUE, retVal);
        }

        return true;
!!!12369932.java!!!	getListNameByValue(inout nameList : CharSequence, inout valList : int, in val : int) : String
        if (nameList != null && valList != null && nameList.length <= valList.length
                && val >= 0) {
            for (int i = 0; i < valList.length; i++) {
                if (valList[i] == val) {
                    return nameList[i].toString();
                }
            }
        }
        return getStringById(R.string.unknown) + " " + val;
!!!12370060.java!!!	getStringById(in resId : int) : String
        return getActivity().getString(resId);
!!!12370188.java!!!	setListItemValue(inout view : View, in position : int) : void
        Log.d(TAG, "setListItemValue");

        Map<String, Object> map = null;
        Integer itemType = -1;
        if (getData() != null) {
            map = getData().get(position);
            itemType = (Integer) getData().get(position).get(KEY_ITEM_TYPE);
        }

        ViewHolder holder = (ViewHolder) view.getTag();
        if (holder == null) {
            holder = new ViewHolder();
            holder.titleTextView = (TextView) view.findViewById(R.id.DescText);
            holder.listLayout = (LinearLayout) view.findViewById(R.id.listLayout);
            holder.listText = (TextView) view.findViewById(R.id.SelectionText);
            holder.progressLayout = (LinearLayout) view.findViewById(R.id.progressLayout);
            view.setTag(holder);
        }

        switch (itemType) {
            case ITEM_TYPE_NORMAL: {
                holder.listLayout.setVisibility(View.GONE);
                holder.progressLayout.setVisibility(View.GONE);
                android.widget.RelativeLayout.LayoutParams layoutParams =
                        (android.widget.RelativeLayout.LayoutParams) holder.titleTextView
                                .getLayoutParams();
                holder.titleTextView.setLayoutParams(layoutParams);
            }
                break;
            case ITEM_TYPE_PROGRESS: {
                holder.listLayout.setVisibility(View.GONE);
                holder.progressLayout.setVisibility(View.VISIBLE);
                SeekBar sb = (SeekBar) holder.progressLayout.findViewById(R.id.sb);
                TextView tv = (TextView) holder.progressLayout.findViewById(R.id.seekbar_view);
                int progress_max = (Integer) map.get(KEY_PROGRESS_MAX);
                int progress_min = (Integer) map.get(KEY_PROGRESS_MIN);
                int progress_step = (Integer) map.get(KEY_PROGRESS_STEP);
                int progress_cur = (Integer) map.get(KEY_CURR_VALUE);
                Log.d(TAG, "setListItemValue -progress_cur = " + progress_cur);
                setProgressLayout(sb, tv, progress_max, progress_min,
                        progress_cur, progress_step);
            }
                break;
            case ITEM_TYPE_LIST: {
                holder.listLayout.setVisibility(View.VISIBLE);
                holder.progressLayout.setVisibility(View.GONE);
                if (holder.listText != null && map != null) {
                    holder.listText.setText(getListNameByValue(
                            (CharSequence[]) map.get(KEY_LIST_NAMES),
                            (int[]) map.get(KEY_LIST_VALUES),
                            (Integer) map.get(KEY_CURR_VALUE)));

                }
            }
                break;
            default:
                break;
        }
!!!12370316.java!!!	setProgressLayout(inout sb : SeekBar, inout tv : TextView, in max : int, in min : int, in cur : int, in progress_step : int) : void
        if (min != 0) {
            sb.setMax(max - min);
        } else {
            sb.setMax(max);
        }
        sb.setKeyProgressIncrement(progress_step);
        if (min != 0) {
            sb.setProgress(cur - min);
        } else {
            sb.setProgress(cur);
        }
        tv.setText(String.valueOf(cur));
!!!12370444.java!!!	onListItemKey(inout view : View, in keyCode : int, inout event : KeyEvent) : boolean
        ListView listView = (ListView) view;
        if (listView != null && event.getAction() == KeyEvent.ACTION_DOWN) {
            if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
                int position = listView.getSelectedItemPosition();
                int visiblePosition = listView.getFirstVisiblePosition();
                View view_1 = listView.getChildAt(position - visiblePosition);
                if (view_1 != null && view_1.isEnabled()) {
                    Log.e(TAG, "position-onListItemKey=" + position);
                    if (position != -1 && getData() != null) {
                        Map<String, Object> map = getData().get(position);
                        Integer itemType = (Integer) map.get(KEY_ITEM_TYPE);
                        if (itemType == ITEM_TYPE_LIST) {
                            int[] intArray = (int[]) map.get(KEY_LIST_VALUES);
                            List<Integer> valArray = new ArrayList<Integer>();
                            for (int i : intArray) {
                                valArray.add(i);
                            }
                            int currIndex = valArray.indexOf(map.get(KEY_CURR_VALUE));
                            int listCnt = (Integer) map.get(KEY_LIST_COUNT);
                            switch (keyCode) {
                                case KeyEvent.KEYCODE_DPAD_LEFT:
                                    currIndex = currIndex - 1;
                                    break;
                                case KeyEvent.KEYCODE_DPAD_RIGHT:
                                    currIndex = currIndex + 1;
                                    break;
                            }
                            if (currIndex <= -1) {
                                currIndex = listCnt - 1;
                            } else if (currIndex >= listCnt) {
                                currIndex = 0;
                            }
                            map.put(KEY_CURR_VALUE, valArray.get(currIndex));

                            TextView listText = (TextView) view_1.findViewById(R.id.SelectionText);
                            if (listText != null) {
                                listText.setText(getListNameByValue(
                                        (CharSequence[]) map.get(KEY_LIST_NAMES),
                                        (int[]) map.get(KEY_LIST_VALUES),
                                        (Integer) map.get(KEY_CURR_VALUE)));
                            }

                            /*
                             * Optimize key response by calling api in non-ui
                             * thread, and limit user to finish previous
                             * operations before operate on another menu item
                             */
                            if (map.get(KEY_API) != null && (Boolean) map.get(KEY_ASYNC_API)) {
                                Log.v(TAG, "API async:" + map.get(KEY_API).toString());
                                synchronized (setApiBundle) {
                                    setApiBundle.putString("apiName", map.get(KEY_API).toString());
                                    setApiBundle.putInt("apiValue", valArray.get(currIndex));
                                    setApiBundle.putInt("position", position);
                                    setApiBundle.putBoolean("notifyChange",
                                            (Boolean) map.get(KEY_NOTIFY_CHANGE));
                                }

                                if (setApiRunnable != null) {
                                    Utils.getMsgQueueHandler().removeCallbacks(setApiRunnable);
                                }
                                setApiRunnable = new Runnable() {
                                    @Override
                                    public void run() {
                                        String apiName = null;
                                        int apiValue = 0;
                                        synchronized (setApiBundle) {
                                            apiName = setApiBundle.getString("apiName");
                                            apiValue = setApiBundle.getInt("apiValue");
                                        }

                                        Utils.setValueByAPI(FacFunctionImpl.getInstance(), apiName,
                                                apiValue);
                                        Activity targetActivity = SubMenuFragment.this
                                                .getActivity();
                                        if (targetActivity != null) {
                                            targetActivity.runOnUiThread(new Runnable() {
                                                @Override
                                                public void run() {
                                                    int position = 0;
                                                    boolean notifyChange = false;
                                                    synchronized (setApiBundle) {
                                                        position =
                                                                setApiBundle.getInt("position");
                                                        notifyChange = setApiBundle
                                                                .getBoolean("notifyChange");
                                                    }
                                                    onSetItemValue(position);
                                                    if (notifyChange) {
                                                        refreshMenuData(getData());
                                                        notifyDataSetChange();
                                                    }
                                                }
                                            });
                                        }
                                    }
                                };
                                Utils.getMsgQueueHandler().post(setApiRunnable);
                            } else {
                                if (map.get(KEY_API) != null) {
                                    String API_name = map.get(KEY_API).toString();
                                    Utils.setValueByAPI(FacFunctionImpl.getInstance(), API_name,
                                            valArray.get(currIndex));
                                    onSetItemValue(position);
                                }

                                boolean notifyChange = (Boolean) map.get(KEY_NOTIFY_CHANGE);
                                if (notifyChange) {
                                    refreshMenuData(getData());
                                    notifyDataSetChange();
                                }
                            }
                        } else if (itemType == ITEM_TYPE_PROGRESS) {
                            int progress_max = (Integer) map.get(KEY_PROGRESS_MAX);
                            int progress_min = (Integer) map.get(KEY_PROGRESS_MIN);
                            int progress_cur = (Integer) map.get(KEY_CURR_VALUE);
                            int progress_step = (Integer) map.get(KEY_PROGRESS_STEP);
                            String apiName = (String) map.get(KEY_API);
                            String title = (String) map.get(KEY_TITLE);
                            boolean singleBar = (Boolean) map.get(KEY_SINGLEBAR);
                            if (singleBar) {
                                // For Picture Mode, the seekbar should be
                                // edited in a new activity.
                                Intent intent = new Intent(getActivity(),
                                        SeekBarSettingsActivity.class);
                                Bundle bundle = new Bundle();
                                bundle.putInt(KEY_PROGRESS_MAX, progress_max);
                                bundle.putInt(KEY_PROGRESS_MIN, progress_min);
                                bundle.putInt(KEY_CURR_VALUE, progress_cur);
                                bundle.putInt(KEY_PROGRESS_STEP, progress_step);
                                bundle.putString(KEY_TITLE, title);
                                bundle.putString(KEY_API, apiName);
                                bundle.putInt(SeekBarSettingsActivity.CURRENT_POSITION, position);
                                intent.putExtra(SeekBarSettingsActivity.SEEKBAR_SETTINGS_ACTIVITY,
                                        bundle);
                                startActivityForResult(intent, REQUEST_SEEKBAR);
                                hideSelf(true);
                            } else {
                                switch (keyCode) {
                                    case KeyEvent.KEYCODE_DPAD_LEFT:
                                        if (progress_cur >= progress_min
                                                && progress_cur <= progress_max) {
                                            progress_cur -= progress_step;
                                        }
                                        break;
                                    case KeyEvent.KEYCODE_DPAD_RIGHT:
                                        if (progress_cur >= progress_min
                                                && progress_cur <= progress_max) {
                                            progress_cur += progress_step;
                                        }
                                        break;
                                }
                                if (progress_cur < progress_min) {
                                    progress_cur = progress_min;
                                }
                                if (progress_cur > progress_max) {
                                    progress_cur = progress_max;
                                }

                                map.put(KEY_CURR_VALUE, progress_cur);

                                Utils.setValueByAPI(FacFunctionImpl.getInstance(), apiName,
                                        progress_cur);
                                onSetItemValue(position);

                                SeekBar sb = (SeekBar) view_1.findViewById(R.id.sb);
                                TextView tv = (TextView) view_1.findViewById(R.id.seekbar_view);
                                if (sb != null && tv != null) {
                                    sb.setProgress(progress_cur - progress_min);
                                    tv.setText(String.valueOf(progress_cur));
                                }
                            }
                        }
                    }
                }
            }
        }
        return super.onListItemKey(view, keyCode, event);
!!!12370572.java!!!	enableListItem(inout view : View, inout enabled : boolean) : void
        ViewHolder holder = (ViewHolder) view.getTag();
        if (holder != null) {
            view.setEnabled(enabled);

            if (holder.titleTextView != null) {
                holder.titleTextView.setEnabled(enabled);
            }
            if (holder.listText != null) {
                holder.listText.setEnabled(enabled);
                holder.listText.findViewById(R.id.SelectionText).setEnabled(enabled);
            }
            if (holder.progressLayout != null
                    && holder.progressLayout.findViewById(R.id.seekbar_view) != null) {
                holder.progressLayout.setEnabled(enabled);
                holder.progressLayout.findViewById(R.id.sb).setEnabled(enabled);
                holder.progressLayout.findViewById(R.id.seekbar_view).setEnabled(enabled);
            }
        }
!!!12370700.java!!!	hideSelf(inout hide : boolean) : void
        WindowManager.LayoutParams lp = this.getActivity().getWindow().getAttributes();
        if (hide) {
            lp.alpha = 0f;
        } else {
            lp.alpha = 1f;
        }
        this.getActivity().getWindow().setAttributes(lp);
!!!12370828.java!!!	notifyDataSetChange() : void
        MenuItemAdapter miAdapter = (MenuItemAdapter) getListAdapter();
        if (miAdapter != null) {
            miAdapter.notifyDataSetChanged();
        }
!!!12370956.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        hideSelf(false);
        if (requestCode == REQUEST_SEEKBAR && resultCode == Activity.RESULT_OK) {
            Bundle bundle = data.getBundleExtra(SeekBarSettingsActivity.SEEKBAR_SETTINGS_ACTIVITY);
            if (bundle != null) {
                int position = bundle.getInt(SeekBarSettingsActivity.CURRENT_POSITION, 0);
                Log.d(TAG,
                        " getData()-onActivityResult="
                                + Utils.getValueByAPI(FacFunctionImpl.getInstance(),
                                        (String) getData().get(position).get(KEY_API)));
                boolean notifyChange = (Boolean) (getData().get(position).get(KEY_NOTIFY_CHANGE));
                if (notifyChange) {
                    refreshMenuData(getData());
                } else {
                    getData().get(position).put(
                            KEY_CURR_VALUE,
                            Utils.getValueByAPI(FacFunctionImpl.getInstance(),
                                    (String) getData().get(position).get(KEY_API)));
                }
                notifyDataSetChange();
            }
        }
        super.onActivityResult(requestCode, resultCode, data);

!!!12371084.java!!!	setMenuTip(in tip : String) : void
        // TODO Auto-generated method stub

!!!12371212.java!!!	refreshMenuData(inout list : List<Map<String, Object>>) : void
        if (list != null) {
            for (Map<String, Object> map : list) {
                String apiName = null;
                if (map.get(KEY_API) != null) {
                    apiName = (String) map.get(KEY_API);
                    map.put(KEY_CURR_VALUE,
                            Utils.getValueByAPI(FacFunctionImpl.getInstance(), apiName));
                }
            }
        }
!!!12371340.java!!!	onSetItemValue(in position : int) : void
        // override this method to do something when item value changed
