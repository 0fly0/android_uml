class Character
!!!291995.java!!!	Character(in value : char)
        this.value = value;
!!!292123.java!!!	charValue() : char
        return value;
!!!292251.java!!!	checkValidCodePoint(in codePoint : int) : void
        if (!isValidCodePoint(codePoint)) {
            throw new IllegalArgumentException("Invalid code point: " + codePoint);
        }
!!!292379.java!!!	compareTo(inout c : Character) : int
        return compare(value, c.value);
!!!292507.java!!!	compare(in lhs : char, in rhs : char) : int
        return lhs - rhs;
!!!292635.java!!!	valueOf(in c : char) : Character
        return c < 128 ? SMALL_VALUES[c] : new Character(c);
!!!292763.java!!!	isValidCodePoint(in codePoint : int) : boolean
        return (MIN_CODE_POINT <= codePoint && MAX_CODE_POINT >= codePoint);
!!!292891.java!!!	isSupplementaryCodePoint(in codePoint : int) : boolean
        return (MIN_SUPPLEMENTARY_CODE_POINT <= codePoint && MAX_CODE_POINT >= codePoint);
!!!293019.java!!!	isHighSurrogate(in ch : char) : boolean
        return (MIN_HIGH_SURROGATE <= ch && MAX_HIGH_SURROGATE >= ch);
!!!293147.java!!!	isLowSurrogate(in ch : char) : boolean
        return (MIN_LOW_SURROGATE <= ch && MAX_LOW_SURROGATE >= ch);
!!!293275.java!!!	isSurrogate(in ch : char) : boolean
        return ch >= MIN_SURROGATE && ch <= MAX_SURROGATE;
!!!293403.java!!!	isSurrogatePair(in high : char, in low : char) : boolean
        return (isHighSurrogate(high) && isLowSurrogate(low));
!!!293531.java!!!	charCount(in codePoint : int) : int
        return (codePoint >= 0x10000 ? 2 : 1);
!!!293659.java!!!	toCodePoint(in high : char, in low : char) : int
        // See RFC 2781, Section 2.2
        // http://www.ietf.org/rfc/rfc2781.txt
        int h = (high & 0x3FF) << 10;
        int l = low & 0x3FF;
        return (h | l) + 0x10000;
!!!293787.java!!!	codePointAt(inout seq : CharSequence, in index : int) : int
        if (seq == null) {
            throw new NullPointerException("seq == null");
        }
        int len = seq.length();
        if (index < 0 || index >= len) {
            throw new IndexOutOfBoundsException();
        }

        char high = seq.charAt(index++);
        if (index >= len) {
            return high;
        }
        char low = seq.charAt(index);
        if (isSurrogatePair(high, low)) {
            return toCodePoint(high, low);
        }
        return high;
!!!293915.java!!!	codePointAt(inout seq : char, in index : int) : int
        if (seq == null) {
            throw new NullPointerException("seq == null");
        }
        int len = seq.length;
        if (index < 0 || index >= len) {
            throw new IndexOutOfBoundsException();
        }

        char high = seq[index++];
        if (index >= len) {
            return high;
        }
        char low = seq[index];
        if (isSurrogatePair(high, low)) {
            return toCodePoint(high, low);
        }
        return high;
!!!294043.java!!!	codePointAt(inout seq : char, in index : int, in limit : int) : int
        if (index < 0 || index >= limit || limit < 0 || limit > seq.length) {
            throw new IndexOutOfBoundsException();
        }

        char high = seq[index++];
        if (index >= limit) {
            return high;
        }
        char low = seq[index];
        if (isSurrogatePair(high, low)) {
            return toCodePoint(high, low);
        }
        return high;
!!!294171.java!!!	codePointBefore(inout seq : CharSequence, in index : int) : int
        if (seq == null) {
            throw new NullPointerException("seq == null");
        }
        int len = seq.length();
        if (index < 1 || index > len) {
            throw new IndexOutOfBoundsException();
        }

        char low = seq.charAt(--index);
        if (--index < 0) {
            return low;
        }
        char high = seq.charAt(index);
        if (isSurrogatePair(high, low)) {
            return toCodePoint(high, low);
        }
        return low;
!!!294299.java!!!	codePointBefore(inout seq : char, in index : int) : int
        if (seq == null) {
            throw new NullPointerException("seq == null");
        }
        int len = seq.length;
        if (index < 1 || index > len) {
            throw new IndexOutOfBoundsException();
        }

        char low = seq[--index];
        if (--index < 0) {
            return low;
        }
        char high = seq[index];
        if (isSurrogatePair(high, low)) {
            return toCodePoint(high, low);
        }
        return low;
!!!294427.java!!!	codePointBefore(inout seq : char, in index : int, in start : int) : int
        if (seq == null) {
            throw new NullPointerException("seq == null");
        }
        int len = seq.length;
        if (index <= start || index > len || start < 0 || start >= len) {
            throw new IndexOutOfBoundsException();
        }

        char low = seq[--index];
        if (--index < start) {
            return low;
        }
        char high = seq[index];
        if (isSurrogatePair(high, low)) {
            return toCodePoint(high, low);
        }
        return low;
!!!294555.java!!!	toChars(in codePoint : int, inout dst : char, in dstIndex : int) : int
        checkValidCodePoint(codePoint);
        if (dst == null) {
            throw new NullPointerException("dst == null");
        }
        if (dstIndex < 0 || dstIndex >= dst.length) {
            throw new IndexOutOfBoundsException();
        }

        if (isSupplementaryCodePoint(codePoint)) {
            if (dstIndex == dst.length - 1) {
                throw new IndexOutOfBoundsException();
            }
            // See RFC 2781, Section 2.1
            // http://www.ietf.org/rfc/rfc2781.txt
            int cpPrime = codePoint - 0x10000;
            int high = 0xD800 | ((cpPrime >> 10) & 0x3FF);
            int low = 0xDC00 | (cpPrime & 0x3FF);
            dst[dstIndex] = (char) high;
            dst[dstIndex + 1] = (char) low;
            return 2;
        }

        dst[dstIndex] = (char) codePoint;
        return 1;
!!!294683.java!!!	toChars(in codePoint : int) : char
        checkValidCodePoint(codePoint);
        if (isSupplementaryCodePoint(codePoint)) {
            int cpPrime = codePoint - 0x10000;
            int high = 0xD800 | ((cpPrime >> 10) & 0x3FF);
            int low = 0xDC00 | (cpPrime & 0x3FF);
            return new char[] { (char) high, (char) low };
        }
        return new char[] { (char) codePoint };
!!!294811.java!!!	codePointCount(inout seq : CharSequence, in beginIndex : int, in endIndex : int) : int
        if (seq == null) {
            throw new NullPointerException("seq == null");
        }
        int len = seq.length();
        if (beginIndex < 0 || endIndex > len || beginIndex > endIndex) {
            throw new IndexOutOfBoundsException();
        }

        int result = 0;
        for (int i = beginIndex; i < endIndex; i++) {
            char c = seq.charAt(i);
            if (isHighSurrogate(c)) {
                if (++i < endIndex) {
                    c = seq.charAt(i);
                    if (!isLowSurrogate(c)) {
                        result++;
                    }
                }
            }
            result++;
        }
        return result;
!!!294939.java!!!	codePointCount(inout seq : char, in offset : int, in count : int) : int
        Arrays.checkOffsetAndCount(seq.length, offset, count);
        int endIndex = offset + count;
        int result = 0;
        for (int i = offset; i < endIndex; i++) {
            char c = seq[i];
            if (isHighSurrogate(c)) {
                if (++i < endIndex) {
                    c = seq[i];
                    if (!isLowSurrogate(c)) {
                        result++;
                    }
                }
            }
            result++;
        }
        return result;
!!!295067.java!!!	offsetByCodePoints(inout seq : CharSequence, in index : int, in codePointOffset : int) : int
        if (seq == null) {
            throw new NullPointerException("seq == null");
        }
        int len = seq.length();
        if (index < 0 || index > len) {
            throw new IndexOutOfBoundsException();
        }

        if (codePointOffset == 0) {
            return index;
        }

        if (codePointOffset > 0) {
            int codePoints = codePointOffset;
            int i = index;
            while (codePoints > 0) {
                codePoints--;
                if (i >= len) {
                    throw new IndexOutOfBoundsException();
                }
                if (isHighSurrogate(seq.charAt(i))) {
                    int next = i + 1;
                    if (next < len && isLowSurrogate(seq.charAt(next))) {
                        i++;
                    }
                }
                i++;
            }
            return i;
        }

        int codePoints = -codePointOffset;
        int i = index;
        while (codePoints > 0) {
            codePoints--;
            i--;
            if (i < 0) {
                throw new IndexOutOfBoundsException();
            }
            if (isLowSurrogate(seq.charAt(i))) {
                int prev = i - 1;
                if (prev >= 0 && isHighSurrogate(seq.charAt(prev))) {
                    i--;
                }
            }
        }
        return i;
!!!295195.java!!!	offsetByCodePoints(inout seq : char, in start : int, in count : int, in index : int, in codePointOffset : int) : int
        Arrays.checkOffsetAndCount(seq.length, start, count);
        int end = start + count;
        if (index < start || index > end) {
            throw new IndexOutOfBoundsException();
        }

        if (codePointOffset == 0) {
            return index;
        }

        if (codePointOffset > 0) {
            int codePoints = codePointOffset;
            int i = index;
            while (codePoints > 0) {
                codePoints--;
                if (i >= end) {
                    throw new IndexOutOfBoundsException();
                }
                if (isHighSurrogate(seq[i])) {
                    int next = i + 1;
                    if (next < end && isLowSurrogate(seq[next])) {
                        i++;
                    }
                }
                i++;
            }
            return i;
        }

        int codePoints = -codePointOffset;
        int i = index;
        while (codePoints > 0) {
            codePoints--;
            i--;
            if (i < start) {
                throw new IndexOutOfBoundsException();
            }
            if (isLowSurrogate(seq[i])) {
                int prev = i - 1;
                if (prev >= start && isHighSurrogate(seq[prev])) {
                    i--;
                }
            }
        }
        return i;
!!!295323.java!!!	digit(in c : char, in radix : int) : int
        return digit((int) c, radix);
!!!295451.java!!!	digit(in codePoint : int, in radix : int) : int
        if (radix < MIN_RADIX || radix > MAX_RADIX) {
            return -1;
        }
        if (codePoint < 128) {
            // Optimized for ASCII
            int result = -1;
            if ('0' <= codePoint && codePoint <= '9') {
                result = codePoint - '0';
            } else if ('a' <= codePoint && codePoint <= 'z') {
                result = 10 + (codePoint - 'a');
            } else if ('A' <= codePoint && codePoint <= 'Z') {
                result = 10 + (codePoint - 'A');
            }
            return result < radix ? result : -1;
        }
        return digitImpl(codePoint, radix);
!!!295707.java!!!	equals(inout object : Object) : boolean
        return (object instanceof Character) && (((Character) object).value == value);
!!!295835.java!!!	forDigit(in digit : int, in radix : int) : char
        if (MIN_RADIX <= radix && radix <= MAX_RADIX) {
            if (digit >= 0 && digit < radix) {
                return (char) (digit < 10 ? digit + '0' : digit + 'a' - 10);
            }
        }
        return 0;
!!!295963.java!!!	getName(in codePoint : int) : String
        checkValidCodePoint(codePoint);
        if (getType(codePoint) == Character.UNASSIGNED) {
            return null;
        }
        String result = getNameImpl(codePoint);
        if (result == null) {
            String blockName = Character.UnicodeBlock.of(codePoint).toString().replace('_', ' ');
            result = blockName + " " + IntegralToString.intToHexString(codePoint, true, 0);
        }
        return result;
!!!296219.java!!!	getNumericValue(in c : char) : int
        return getNumericValue((int) c);
!!!296347.java!!!	getNumericValue(in codePoint : int) : int
        // This is both an optimization and papers over differences between Java and ICU.
        if (codePoint < 128) {
            if (codePoint >= '0' && codePoint <= '9') {
                return codePoint - '0';
            }
            if (codePoint >= 'a' && codePoint <= 'z') {
                return codePoint - ('a' - 10);
            }
            if (codePoint >= 'A' && codePoint <= 'Z') {
                return codePoint - ('A' - 10);
            }
            return -1;
        }
        // Full-width uppercase A-Z.
        if (codePoint >= 0xff21 && codePoint <= 0xff3a) {
            return codePoint - 0xff17;
        }
        // Full-width lowercase a-z.
        if (codePoint >= 0xff41 && codePoint <= 0xff5a) {
            return codePoint - 0xff37;
        }
        return getNumericValueImpl(codePoint);
!!!296603.java!!!	getType(in c : char) : int
        return getType((int) c);
!!!296731.java!!!	getType(in codePoint : int) : int
        int type = getTypeImpl(codePoint);
        // The type values returned by ICU are not RI-compatible. The RI skips the value 17.
        if (type <= Character.FORMAT) {
            return type;
        }
        return (type + 1);
!!!296987.java!!!	getDirectionality(in c : char) : byte
        return getDirectionality((int)c);
!!!297115.java!!!	getDirectionality(in codePoint : int) : byte
        if (getType(codePoint) == Character.UNASSIGNED) {
            return Character.DIRECTIONALITY_UNDEFINED;
        }

        byte directionality = getDirectionalityImpl(codePoint);
        if (directionality == -1) {
            return -1;
        }
        return DIRECTIONALITY[directionality];
!!!297371.java!!!	isMirrored(in c : char) : boolean
        return isMirrored((int) c);
!!!297499.java!!!	isMirrored(in codePoint : int) : boolean
        return isMirroredImpl(codePoint);
!!!297755.java!!!	hashCode() : int
        return value;
!!!297883.java!!!	highSurrogate(in codePoint : int) : char
        return (char) ((codePoint >> 10) + 0xd7c0);
!!!298011.java!!!	lowSurrogate(in codePoint : int) : char
        return (char) ((codePoint & 0x3ff) | 0xdc00);
!!!298139.java!!!	isBmpCodePoint(in codePoint : int) : boolean
        return codePoint >= 0 && codePoint <= 0xffff;
!!!298267.java!!!	isDefined(in c : char) : boolean
        return isDefinedImpl(c);
!!!298395.java!!!	isDefined(in codePoint : int) : boolean
        return isDefinedImpl(codePoint);
!!!298651.java!!!	isDigit(in c : char) : boolean
        return isDigit((int) c);
!!!298779.java!!!	isDigit(in codePoint : int) : boolean
        // Optimized case for ASCII
        if ('0' <= codePoint && codePoint <= '9') {
            return true;
        }
        if (codePoint < 1632) {
            return false;
        }
        return isDigitImpl(codePoint);
!!!299035.java!!!	isIdentifierIgnorable(in c : char) : boolean
        return isIdentifierIgnorable((int) c);
!!!299163.java!!!	isIdentifierIgnorable(in codePoint : int) : boolean
        // This is both an optimization and papers over differences between Java and ICU.
        if (codePoint < 0x600) {
            return (codePoint >= 0 && codePoint <= 8) || (codePoint >= 0xe && codePoint <= 0x1b) ||
                    (codePoint >= 0x7f && codePoint <= 0x9f) || (codePoint == 0xad);
        }
        return isIdentifierIgnorableImpl(codePoint);
!!!299419.java!!!	isISOControl(in c : char) : boolean
        return isISOControl((int) c);
!!!299547.java!!!	isISOControl(in c : int) : boolean
        return (c >= 0 && c <= 0x1f) || (c >= 0x7f && c <= 0x9f);
!!!299675.java!!!	isJavaIdentifierPart(in c : char) : boolean
        return isJavaIdentifierPart((int) c);
!!!299803.java!!!	isJavaIdentifierPart(in codePoint : int) : boolean
        // Use precomputed bitmasks to optimize the ASCII range.
        if (codePoint < 64) {
            return (0x3ff00100fffc1ffL & (1L << codePoint)) != 0;
        } else if (codePoint < 128) {
            return (0x87fffffe87fffffeL & (1L << (codePoint - 64))) != 0;
        }
        int type = getType(codePoint);
        return (type >= UPPERCASE_LETTER && type <= OTHER_LETTER)
                || type == CURRENCY_SYMBOL || type == CONNECTOR_PUNCTUATION
                || (type >= DECIMAL_DIGIT_NUMBER && type <= LETTER_NUMBER)
                || type == COMBINING_SPACING_MARK || type == NON_SPACING_MARK
                || (codePoint >= 0 && codePoint <= 8) || (codePoint >= 0xe && codePoint <= 0x1b)
                || (codePoint >= 0x7f && codePoint <= 0x9f) || type == FORMAT;
!!!299931.java!!!	isJavaIdentifierStart(in c : char) : boolean
        return isJavaIdentifierStart((int) c);
!!!300059.java!!!	isJavaIdentifierStart(in codePoint : int) : boolean
        // Use precomputed bitmasks to optimize the ASCII range.
        if (codePoint < 64) {
            return (codePoint == '$'); // There's only one character in this range.
        } else if (codePoint < 128) {
            return (0x7fffffe87fffffeL & (1L << (codePoint - 64))) != 0;
        }
        int type = getType(codePoint);
        return (type >= UPPERCASE_LETTER && type <= OTHER_LETTER) || type == CURRENCY_SYMBOL
                || type == CONNECTOR_PUNCTUATION || type == LETTER_NUMBER;
!!!300187.java!!!	isJavaLetter(in c : char) : boolean
        return isJavaIdentifierStart(c);
!!!300315.java!!!	isJavaLetterOrDigit(in c : char) : boolean
        return isJavaIdentifierPart(c);
!!!300443.java!!!	isLetter(in c : char) : boolean
        return isLetter((int) c);
!!!300571.java!!!	isLetter(in codePoint : int) : boolean
        if (('A' <= codePoint && codePoint <= 'Z') || ('a' <= codePoint && codePoint <= 'z')) {
            return true;
        }
        if (codePoint < 128) {
            return false;
        }
        return isLetterImpl(codePoint);
!!!300827.java!!!	isLetterOrDigit(in c : char) : boolean
        return isLetterOrDigit((int) c);
!!!300955.java!!!	isLetterOrDigit(in codePoint : int) : boolean
        // Optimized case for ASCII
        if (('A' <= codePoint && codePoint <= 'Z') || ('a' <= codePoint && codePoint <= 'z')) {
            return true;
        }
        if ('0' <= codePoint && codePoint <= '9') {
            return true;
        }
        if (codePoint < 128) {
            return false;
        }
        return isLetterOrDigitImpl(codePoint);
!!!301211.java!!!	isLowerCase(in c : char) : boolean
        return isLowerCase((int) c);
!!!301339.java!!!	isLowerCase(in codePoint : int) : boolean
        // Optimized case for ASCII
        if ('a' <= codePoint && codePoint <= 'z') {
            return true;
        }
        if (codePoint < 128) {
            return false;
        }
        return isLowerCaseImpl(codePoint);
!!!301595.java!!!	isSpace(in c : char) : boolean
        return c == '\n' || c == '\t' || c == '\f' || c == '\r' || c == ' ';
!!!301723.java!!!	isSpaceChar(in c : char) : boolean
        return isSpaceChar((int) c);
!!!301851.java!!!	isSpaceChar(in codePoint : int) : boolean
        if (codePoint == 0x20 || codePoint == 0xa0 || codePoint == 0x1680) {
            return true;
        }
        if (codePoint < 0x2000) {
            return false;
        }
        if (codePoint <= 0xffff) {
            return codePoint <= 0x200b || codePoint == 0x2028 || codePoint == 0x2029 ||
                    codePoint == 0x202f || codePoint == 0x3000;
        }
        return isSpaceCharImpl(codePoint);
!!!302107.java!!!	isTitleCase(in c : char) : boolean
        return isTitleCaseImpl(c);
!!!302235.java!!!	isTitleCase(in codePoint : int) : boolean
        return isTitleCaseImpl(codePoint);
!!!302491.java!!!	isUnicodeIdentifierPart(in c : char) : boolean
        return isUnicodeIdentifierPartImpl(c);
!!!302619.java!!!	isUnicodeIdentifierPart(in codePoint : int) : boolean
        return isUnicodeIdentifierPartImpl(codePoint);
!!!302875.java!!!	isUnicodeIdentifierStart(in c : char) : boolean
        return isUnicodeIdentifierStartImpl(c);
!!!303003.java!!!	isUnicodeIdentifierStart(in codePoint : int) : boolean
        return isUnicodeIdentifierStartImpl(codePoint);
!!!303259.java!!!	isUpperCase(in c : char) : boolean
        return isUpperCase((int) c);
!!!303387.java!!!	isUpperCase(in codePoint : int) : boolean
        // Optimized case for ASCII
        if ('A' <= codePoint && codePoint <= 'Z') {
            return true;
        }
        if (codePoint < 128) {
            return false;
        }
        return isUpperCaseImpl(codePoint);
!!!303643.java!!!	isWhitespace(in c : char) : boolean
        return isWhitespace((int) c);
!!!303771.java!!!	isWhitespace(in codePoint : int) : boolean
        // This is both an optimization and papers over differences between Java and ICU.
        if ((codePoint >= 0x1c && codePoint <= 0x20) || (codePoint >= 0x9 && codePoint <= 0xd)) {
            return true;
        }
        if (codePoint == 0x1680) {
            return true;
        }
        if (codePoint < 0x2000 || codePoint == 0x2007) {
            return false;
        }
        if (codePoint <= 0xffff) {
            return codePoint <= 0x200b || codePoint == 0x2028 || codePoint == 0x2029 ||
                    codePoint == 0x3000;
        }
        return isWhitespaceImpl(codePoint);
!!!304027.java!!!	reverseBytes(in c : char) : char
        return (char)((c<<8) | (c>>8));
!!!304155.java!!!	toLowerCase(in c : char) : char
        return (char) toLowerCase((int) c);
!!!304283.java!!!	toLowerCase(in codePoint : int) : int
        // Optimized case for ASCII
        if ('A' <= codePoint && codePoint <= 'Z') {
            return (char) (codePoint + ('a' - 'A'));
        }
        if (codePoint < 192) {
            return codePoint;
        }
        return toLowerCaseImpl(codePoint);
!!!304539.java!!!	toString() : String
        return String.valueOf(value);
!!!304667.java!!!	toString(in value : char) : String
        return String.valueOf(value);
!!!304795.java!!!	toTitleCase(in c : char) : char
        return (char) toTitleCaseImpl(c);
!!!304923.java!!!	toTitleCase(in codePoint : int) : int
        return toTitleCaseImpl(codePoint);
!!!305179.java!!!	toUpperCase(in c : char) : char
        return (char) toUpperCase((int) c);
!!!305307.java!!!	toUpperCase(in codePoint : int) : int
        // Optimized case for ASCII
        if ('a' <= codePoint && codePoint <= 'z') {
            return (char) (codePoint - ('a' - 'A'));
        }
        if (codePoint < 181) {
            return codePoint;
        }
        return toUpperCaseImpl(codePoint);
