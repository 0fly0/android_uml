class OpenSSLRSAPrivateKey
!!!2434715.java!!!	OpenSSLRSAPrivateKey(inout key : OpenSSLKey)
        this.key = key;
!!!2434843.java!!!	OpenSSLRSAPrivateKey(inout key : OpenSSLKey, inout params : byte)
        this(key);
        readParams(params);
        fetchedParams = true;
!!!2434971.java!!!	getOpenSSLKey() : OpenSSLKey
        return key;
!!!2435099.java!!!	OpenSSLRSAPrivateKey(inout rsaKeySpec : RSAPrivateKeySpec)
        this(init(rsaKeySpec));
!!!2435227.java!!!	init(inout rsaKeySpec : RSAPrivateKeySpec) : OpenSSLKey
        final BigInteger modulus = rsaKeySpec.getModulus();
        final BigInteger privateExponent = rsaKeySpec.getPrivateExponent();

        if (modulus == null) {
            throw new InvalidKeySpecException("modulus == null");
        } else if (privateExponent == null) {
            throw new InvalidKeySpecException("privateExponent == null");
        }

        try {
            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_RSA(
                    modulus.toByteArray(),
                    null,
                    privateExponent.toByteArray(),
                    null,
                    null,
                    null,
                    null,
                    null));
        } catch (Exception e) {
            throw new InvalidKeySpecException(e);
        }
!!!2435355.java!!!	getInstance(inout key : OpenSSLKey) : OpenSSLRSAPrivateKey
      byte[][] params = NativeCrypto.get_RSA_private_params(key.getPkeyContext());
      if (params[1] != null) {
          return new OpenSSLRSAPrivateCrtKey(key, params);
      }
      return new OpenSSLRSAPrivateKey(key, params);
!!!2435483.java!!!	getInstance(inout rsaPrivateKey : RSAPrivateKey) : OpenSSLKey
        final BigInteger modulus = rsaPrivateKey.getModulus();
        final BigInteger privateExponent = rsaPrivateKey.getPrivateExponent();

        if (modulus == null) {
            throw new InvalidKeyException("modulus == null");
        } else if (privateExponent == null) {
            throw new InvalidKeyException("privateExponent == null");
        }

        try {
            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_RSA(
                    modulus.toByteArray(),
                    null,
                    privateExponent.toByteArray(),
                    null,
                    null,
                    null,
                    null,
                    null));
        } catch (Exception e) {
            throw new InvalidKeyException(e);
        }
!!!2435611.java!!!	ensureReadParams() : void
        if (fetchedParams) {
            return;
        }
        readParams(NativeCrypto.get_RSA_private_params(key.getPkeyContext()));
        fetchedParams = true;
!!!2435739.java!!!	readParams(inout params : byte) : void
        if (params[0] == null) {
            throw new NullPointerException("modulus == null");
        } else if (params[2] == null && !key.isEngineBased()) {
            throw new NullPointerException("privateExponent == null");
        }

        modulus = new BigInteger(params[0]);

        // ENGINE-based keys are not guaranteed to have a private exponent.
        if (params[2] != null) {
            privateExponent = new BigInteger(params[2]);
        }
!!!2435867.java!!!	getPrivateExponent() : BigInteger
        if (key.isEngineBased()) {
            throw new UnsupportedOperationException("private exponent cannot be extracted");
        }

        ensureReadParams();
        return privateExponent;
!!!2435995.java!!!	getModulus() : BigInteger
        ensureReadParams();
        return modulus;
!!!2436123.java!!!	getEncoded() : byte
        /*
         * If we're using an OpenSSL ENGINE, there's no guarantee we can export
         * the key. Returning {@code null} tells the caller that there's no
         * encoded format.
         */
        if (key.isEngineBased()) {
            return null;
        }

        return NativeCrypto.i2d_PKCS8_PRIV_KEY_INFO(key.getPkeyContext());
!!!2436251.java!!!	getFormat() : String
        /*
         * If we're using an OpenSSL ENGINE, there's no guarantee we can export
         * the key. Returning {@code null} tells the caller that there's no
         * encoded format.
         */
        if (key.isEngineBased()) {
            return null;
        }

        return "PKCS#8";
!!!2436379.java!!!	getAlgorithm() : String
        return "RSA";
!!!2436507.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (o instanceof OpenSSLRSAPrivateKey) {
            OpenSSLRSAPrivateKey other = (OpenSSLRSAPrivateKey) o;
            return key.equals(other.getOpenSSLKey());
        }

        if (o instanceof RSAPrivateKey) {
            ensureReadParams();
            RSAPrivateKey other = (RSAPrivateKey) o;

            return modulus.equals(other.getModulus())
                    && privateExponent.equals(other.getPrivateExponent());
        }

        return false;
!!!2436635.java!!!	hashCode() : int
        ensureReadParams();
        int hash = 1;

        hash = hash * 3 + modulus.hashCode();
        if (privateExponent != null) {
            hash = hash * 7 + privateExponent.hashCode();
        }

        return hash;
!!!2436763.java!!!	toString() : String
        final StringBuilder sb = new StringBuilder("OpenSSLRSAPrivateKey{");

        final boolean engineBased = key.isEngineBased();
        if (engineBased) {
            sb.append("key=");
            sb.append(key);
            sb.append('}');
        }

        ensureReadParams();
        sb.append("modulus=");
        sb.append(modulus.toString(16));
        sb.append(',');

        if (!engineBased) {
            sb.append("privateExponent=");
            sb.append(privateExponent.toString(16));
            sb.append(',');
        }

        return sb.toString();
!!!2436891.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();

        key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_RSA(
                modulus.toByteArray(),
                null,
                privateExponent.toByteArray(),
                null,
                null,
                null,
                null,
                null));
        fetchedParams = true;
!!!2437019.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        if (getOpenSSLKey().isEngineBased()) {
            throw new NotSerializableException("engine-based keys can not be serialized");
        }

        ensureReadParams();
        stream.defaultWriteObject();
