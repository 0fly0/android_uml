class MediaArtistNativeHelper
!!!6889996.java!!!	MediaArtistNativeHelper(in projectPath : String, inout lock : Semaphore, inout veObj : VideoEditor)
        mProjectPath = projectPath;
        if (veObj != null) {
            mVideoEditor = veObj;
        } else {
            mVideoEditor = null;
            throw new IllegalArgumentException("video editor object is null");
        }
        if (mStoryBoardSettings == null) {
            mStoryBoardSettings = new EditSettings();
        }

        mLock = lock;

        _init(mProjectPath, "null");
        mAudioTrackPCMFilePath = null;
!!!6890124.java!!!	getProjectPath() : String
        return mProjectPath;
!!!6890252.java!!!	getProjectAudioTrackPCMFilePath() : String
        return mAudioTrackPCMFilePath;
!!!6890380.java!!!	invalidatePcmFile() : void
        if (mAudioTrackPCMFilePath != null) {
            new File(mAudioTrackPCMFilePath).delete();
            mAudioTrackPCMFilePath = null;
        }
!!!6890508.java!!!	onProgressUpdate(in taskId : int, in progress : int) : void
        if (mProcessingState == PROCESSING_EXPORT) {
            if (mExportProgressListener != null) {
                if (mProgressToApp < progress) {
                    mExportProgressListener.onProgress(mVideoEditor, mOutputFilename, progress);
                    /* record previous progress */
                    mProgressToApp = progress;
                }
            }
        }
        else {
            // Adapt progress depending on current state
            int actualProgress = 0;
            int action = 0;

            if (mProcessingState == PROCESSING_AUDIO_PCM) {
                action = MediaProcessingProgressListener.ACTION_DECODE;
            } else {
                action = MediaProcessingProgressListener.ACTION_ENCODE;
            }

            switch (mProcessingState) {
                case PROCESSING_AUDIO_PCM:
                    actualProgress = progress;
                    break;
                case PROCESSING_TRANSITION:
                    actualProgress = progress;
                    break;
                case PROCESSING_KENBURNS:
                    actualProgress = progress;
                    break;
                case PROCESSING_INTERMEDIATE1:
                    if ((progress == 0) && (mProgressToApp != 0)) {
                        mProgressToApp = 0;
                    }
                    if ((progress != 0) || (mProgressToApp != 0)) {
                        actualProgress = progress/4;
                    }
                    break;
                case PROCESSING_INTERMEDIATE2:
                    if ((progress != 0) || (mProgressToApp != 0)) {
                        actualProgress = 25 + progress/4;
                    }
                    break;
                case PROCESSING_INTERMEDIATE3:
                    if ((progress != 0) || (mProgressToApp != 0)) {
                        actualProgress = 50 + progress/2;
                    }
                    break;
                case PROCESSING_NONE:

                default:
                    Log.e(TAG, "ERROR unexpected State=" + mProcessingState);
                    return;
            }
            if ((mProgressToApp != actualProgress) && (actualProgress != 0)) {

                mProgressToApp = actualProgress;

                if (mMediaProcessingProgressListener != null) {
                    // Send the progress indication
                    mMediaProcessingProgressListener.onProgress(mProcessingObject, action,
                                                                actualProgress);
                }
            }
            /* avoid 0 in next intermediate call */
            if (mProgressToApp == 0) {
                if (mMediaProcessingProgressListener != null) {
                    /*
                     *  Send the progress indication
                     */
                    mMediaProcessingProgressListener.onProgress(mProcessingObject, action,
                                                                actualProgress);
                }
                mProgressToApp = 1;
            }
        }
!!!6890636.java!!!	onPreviewProgressUpdate(in progress : int, inout isFinished : boolean, inout updateOverlay : boolean, in filename : String, in renderingMode : int, in error : int) : void
        if (mPreviewProgressListener != null) {
            if (mIsFirstProgress) {
                mPreviewProgressListener.onStart(mVideoEditor);
                mIsFirstProgress = false;
            }

            final VideoEditor.OverlayData overlayData;
            if (updateOverlay) {
                overlayData = new VideoEditor.OverlayData();
                if (filename != null) {
                    overlayData.set(BitmapFactory.decodeFile(filename), renderingMode);
                } else {
                    overlayData.setClear();
                }
            } else {
                overlayData = null;
            }

            if (progress != 0) {
                mPreviewProgress = progress;
            }

            if (isFinished) {
                mPreviewProgressListener.onStop(mVideoEditor);
            } else if (error != 0) {
                mPreviewProgressListener.onError(mVideoEditor, error);
            } else {
                mPreviewProgressListener.onProgress(mVideoEditor, progress, overlayData);
            }
        }
!!!6890764.java!!!	releaseNativeHelper() : void
        release();
!!!6890892.java!!!	onAudioGraphExtractProgressUpdate(in progress : int, inout isVideo : boolean) : void
        if ((mExtractAudioWaveformProgressListener != null) && (progress > 0)) {
            mExtractAudioWaveformProgressListener.onProgress(progress);
        }
!!!6891020.java!!!	getEffectSettings(inout effects : EffectColor) : EffectSettings
        EffectSettings effectSettings = new EffectSettings();
        effectSettings.startTime = (int)effects.getStartTime();
        effectSettings.duration = (int)effects.getDuration();
        effectSettings.videoEffectType = getEffectColorType(effects);
        effectSettings.audioEffectType = 0;
        effectSettings.startPercent = 0;
        effectSettings.durationPercent = 0;
        effectSettings.framingFile = null;
        effectSettings.topLeftX = 0;
        effectSettings.topLeftY = 0;
        effectSettings.framingResize = false;
        effectSettings.text = null;
        effectSettings.textRenderingData = null;
        effectSettings.textBufferWidth = 0;
        effectSettings.textBufferHeight = 0;
        if (effects.getType() == EffectColor.TYPE_FIFTIES) {
            effectSettings.fiftiesFrameRate = 15;
        } else {
            effectSettings.fiftiesFrameRate = 0;
        }

        if ((effectSettings.videoEffectType == VideoEffect.COLORRGB16)
                || (effectSettings.videoEffectType == VideoEffect.GRADIENT)) {
            effectSettings.rgb16InputColor = effects.getColor();
        }

        effectSettings.alphaBlendingStartPercent = 0;
        effectSettings.alphaBlendingMiddlePercent = 0;
        effectSettings.alphaBlendingEndPercent = 0;
        effectSettings.alphaBlendingFadeInTimePercent = 0;
        effectSettings.alphaBlendingFadeOutTimePercent = 0;
        return effectSettings;
!!!6891148.java!!!	getOverlaySettings(inout overlay : OverlayFrame) : EffectSettings
        EffectSettings effectSettings = new EffectSettings();
        Bitmap bitmap = null;

        effectSettings.startTime = (int)overlay.getStartTime();
        effectSettings.duration = (int)overlay.getDuration();
        effectSettings.videoEffectType = VideoEffect.FRAMING;
        effectSettings.audioEffectType = 0;
        effectSettings.startPercent = 0;
        effectSettings.durationPercent = 0;
        effectSettings.framingFile = null;

        if ((bitmap = overlay.getBitmap()) != null) {
            effectSettings.framingFile = overlay.getFilename();

            if (effectSettings.framingFile == null) {
                try {
                    (overlay).save(mProjectPath);
                } catch (IOException e) {
                    Log.e(TAG, "getOverlaySettings : File not found");
                }
                effectSettings.framingFile = overlay.getFilename();
            }
            if (bitmap.getConfig() == Bitmap.Config.ARGB_8888)
                effectSettings.bitmapType = 6;
            else if (bitmap.getConfig() == Bitmap.Config.ARGB_4444)
                effectSettings.bitmapType = 5;
            else if (bitmap.getConfig() == Bitmap.Config.RGB_565)
                effectSettings.bitmapType = 4;
            else if (bitmap.getConfig() == Bitmap.Config.ALPHA_8)
                throw new RuntimeException("Bitmap config not supported");

            effectSettings.width = bitmap.getWidth();
            effectSettings.height = bitmap.getHeight();
            effectSettings.framingBuffer = new int[effectSettings.width];
            int tmp = 0;
            short maxAlpha = 0;
            short minAlpha = (short)0xFF;
            short alpha = 0;
            while (tmp < effectSettings.height) {
                bitmap.getPixels(effectSettings.framingBuffer, 0,
                                 effectSettings.width, 0, tmp,
                                 effectSettings.width, 1);
                for (int i = 0; i < effectSettings.width; i++) {
                    alpha = (short)((effectSettings.framingBuffer[i] >> 24) & 0xFF);
                    if (alpha > maxAlpha) {
                        maxAlpha = alpha;
                    }
                    if (alpha < minAlpha) {
                        minAlpha = alpha;
                    }
                }
                tmp += 1;
            }
            alpha = (short)((maxAlpha + minAlpha) / 2);
            alpha = (short)((alpha * 100) / 256);
            effectSettings.alphaBlendingEndPercent = alpha;
            effectSettings.alphaBlendingMiddlePercent = alpha;
            effectSettings.alphaBlendingStartPercent = alpha;
            effectSettings.alphaBlendingFadeInTimePercent = 100;
            effectSettings.alphaBlendingFadeOutTimePercent = 100;
            effectSettings.framingBuffer = null;

            /*
             * Set the resized RGB file dimensions
             */
            effectSettings.width = overlay.getResizedRGBSizeWidth();
            if(effectSettings.width == 0) {
                effectSettings.width = bitmap.getWidth();
            }

            effectSettings.height = overlay.getResizedRGBSizeHeight();
            if(effectSettings.height == 0) {
                effectSettings.height = bitmap.getHeight();
            }

        }

        effectSettings.topLeftX = 0;
        effectSettings.topLeftY = 0;

        effectSettings.framingResize = true;
        effectSettings.text = null;
        effectSettings.textRenderingData = null;
        effectSettings.textBufferWidth = 0;
        effectSettings.textBufferHeight = 0;
        effectSettings.fiftiesFrameRate = 0;
        effectSettings.rgb16InputColor = 0;
        int mediaItemHeight;
        int aspectRatio;
        if (overlay.getMediaItem() instanceof MediaImageItem) {
            if (((MediaImageItem)overlay.getMediaItem()).getGeneratedImageClip() != null) {
                // Ken Burns was applied
                mediaItemHeight = ((MediaImageItem)overlay.getMediaItem()).getGeneratedClipHeight();
                aspectRatio = getAspectRatio(
                    ((MediaImageItem)overlay.getMediaItem()).getGeneratedClipWidth()
                    , mediaItemHeight);
            } else {
                //For image get the scaled height. Aspect ratio would remain the same
                mediaItemHeight = ((MediaImageItem)overlay.getMediaItem()).getScaledHeight();
                aspectRatio = overlay.getMediaItem().getAspectRatio();
            }
        } else {
            aspectRatio = overlay.getMediaItem().getAspectRatio();
            mediaItemHeight = overlay.getMediaItem().getHeight();
        }
        effectSettings.framingScaledSize = findVideoResolution(aspectRatio, mediaItemHeight);
        return effectSettings;
!!!6891276.java!!!	nativeHelperGetAspectRatio() : int
        return mVideoEditor.getAspectRatio();
!!!6891404.java!!!	setAudioCodec(in codec : int) : void
        mExportAudioCodec = codec;
!!!6891532.java!!!	setVideoCodec(in codec : int) : void
        mExportVideoCodec = codec;
!!!6891660.java!!!	setAudioflag(inout flag : boolean) : void
        //check if the file exists.
        if (!(new File(String.format(mProjectPath + "/" + AUDIO_TRACK_PCM_FILE)).exists())) {
            flag = true;
        }
        mRegenerateAudio = flag;
!!!6891788.java!!!	getAudioflag() : boolean
        return mRegenerateAudio;
!!!6891916.java!!!	GetClosestVideoFrameRate(in averageFrameRate : int) : int
        if (averageFrameRate >= 25) {
            return VideoFrameRate.FR_30_FPS;
        } else if (averageFrameRate >= 20) {
            return VideoFrameRate.FR_25_FPS;
        } else if (averageFrameRate >= 15) {
            return VideoFrameRate.FR_20_FPS;
        } else if (averageFrameRate >= 12) {
            return VideoFrameRate.FR_15_FPS;
        } else if (averageFrameRate >= 10) {
            return VideoFrameRate.FR_12_5_FPS;
        } else if (averageFrameRate >= 7) {
            return VideoFrameRate.FR_10_FPS;
        } else if (averageFrameRate >= 5) {
            return VideoFrameRate.FR_7_5_FPS;
        } else {
            return -1;
        }
!!!6892044.java!!!	adjustEffectsStartTimeAndDuration(inout lEffect : EffectSettings, in beginCutTime : int, in endCutTime : int) : void

        int effectStartTime = 0;
        int effectDuration = 0;

        /**
         * cbct -> clip begin cut time
         * cect -> clip end cut time
         ****************************************
         *  |                                 |
         *  |         cbct        cect        |
         *  | <-1-->   |           |          |
         *  |       <--|-2->       |          |
         *  |          | <---3---> |          |
         *  |          |        <--|-4--->    |
         *  |          |           | <--5-->  |
         *  |      <---|------6----|---->     |
         *  |                                 |
         *  < : effectStart
         *  > : effectStart + effectDuration
         ****************************************
         **/

        /** 1 & 5 */
        /**
         * Effect falls out side the trim duration. In such a case effects shall
         * not be applied.
         */
        if ((lEffect.startTime > endCutTime)
                || ((lEffect.startTime + lEffect.duration) <= beginCutTime)) {

            effectStartTime = 0;
            effectDuration = 0;

            lEffect.startTime = effectStartTime;
            lEffect.duration = effectDuration;
            return;
        }

        /** 2 */
        if ((lEffect.startTime < beginCutTime)
                && ((lEffect.startTime + lEffect.duration) > beginCutTime)
                && ((lEffect.startTime + lEffect.duration) <= endCutTime)) {
            effectStartTime = 0;
            effectDuration = lEffect.duration;

            effectDuration -= (beginCutTime - lEffect.startTime);
            lEffect.startTime = effectStartTime;
            lEffect.duration = effectDuration;
            return;
        }

        /** 3 */
        if ((lEffect.startTime >= beginCutTime)
                && ((lEffect.startTime + lEffect.duration) <= endCutTime)) {
            effectStartTime = lEffect.startTime - beginCutTime;
            lEffect.startTime = effectStartTime;
            lEffect.duration = lEffect.duration;
            return;
        }

        /** 4 */
        if ((lEffect.startTime >= beginCutTime)
                && ((lEffect.startTime + lEffect.duration) > endCutTime)) {
            effectStartTime = lEffect.startTime - beginCutTime;
            effectDuration = endCutTime - lEffect.startTime;
            lEffect.startTime = effectStartTime;
            lEffect.duration = effectDuration;
            return;
        }

        /** 6 */
        if ((lEffect.startTime < beginCutTime)
                && ((lEffect.startTime + lEffect.duration) > endCutTime)) {
            effectStartTime = 0;
            effectDuration = endCutTime - beginCutTime;
            lEffect.startTime = effectStartTime;
            lEffect.duration = effectDuration;
            return;
        }

!!!6892172.java!!!	generateClip(inout editSettings : EditSettings) : int
        int err = 0;

        try {
            err = nativeGenerateClip(editSettings);
        } catch (IllegalArgumentException ex) {
            Log.e(TAG, "Illegal Argument exception in load settings");
            return -1;
        } catch (IllegalStateException ex) {
            Log.e(TAG, "Illegal state exception in load settings");
            return -1;
        } catch (RuntimeException ex) {
            Log.e(TAG, "Runtime exception in load settings");
            return -1;
        }
        return err;
!!!6892300.java!!!	initClipSettings(inout lclipSettings : ClipSettings) : void
        lclipSettings.clipPath = null;
        lclipSettings.clipDecodedPath = null;
        lclipSettings.clipOriginalPath = null;
        lclipSettings.fileType = 0;
        lclipSettings.endCutTime = 0;
        lclipSettings.beginCutTime = 0;
        lclipSettings.beginCutPercent = 0;
        lclipSettings.endCutPercent = 0;
        lclipSettings.panZoomEnabled = false;
        lclipSettings.panZoomPercentStart = 0;
        lclipSettings.panZoomTopLeftXStart = 0;
        lclipSettings.panZoomTopLeftYStart = 0;
        lclipSettings.panZoomPercentEnd = 0;
        lclipSettings.panZoomTopLeftXEnd = 0;
        lclipSettings.panZoomTopLeftYEnd = 0;
        lclipSettings.mediaRendering = 0;
        lclipSettings.rotationDegree = 0;
!!!6892428.java!!!	generateEffectClip(inout lMediaItem : MediaItem, inout lclipSettings : ClipSettings, inout e : EditSettings, in uniqueId : String, in clipNo : int) : String
        int err = 0;
        EditSettings editSettings = null;
        String EffectClipPath = null;
        int outVideoProfile = 0;
        int outVideoLevel = 0;
        editSettings = new EditSettings();

        editSettings.clipSettingsArray = new ClipSettings[1];
        editSettings.clipSettingsArray[0] = lclipSettings;

        editSettings.backgroundMusicSettings = null;
        editSettings.transitionSettingsArray = null;
        editSettings.effectSettingsArray = e.effectSettingsArray;

        EffectClipPath = String.format(mProjectPath + "/" + "ClipEffectIntermediate" + "_"
                + lMediaItem.getId() + uniqueId + ".3gp");

        File tmpFile = new File(EffectClipPath);
        if (tmpFile.exists()) {
            tmpFile.delete();
        }

        outVideoProfile = VideoEditorProfile.getExportProfile(VideoFormat.H264);
        outVideoLevel = VideoEditorProfile.getExportLevel(VideoFormat.H264);
        editSettings.videoProfile = outVideoProfile;
        editSettings.videoLevel= outVideoLevel;

        if (lMediaItem instanceof MediaVideoItem) {
            MediaVideoItem m = (MediaVideoItem)lMediaItem;

            editSettings.audioFormat = AudioFormat.AAC;
            editSettings.audioChannels = 2;
            editSettings.audioBitrate = Bitrate.BR_64_KBPS;
            editSettings.audioSamplingFreq = AudioSamplingFrequency.FREQ_32000;

            editSettings.videoFormat = VideoFormat.H264;
            editSettings.videoFrameRate = VideoFrameRate.FR_30_FPS;
            editSettings.videoFrameSize = findVideoResolution(mVideoEditor.getAspectRatio(),
                    m.getHeight());
            editSettings.videoBitrate = findVideoBitrate(editSettings.videoFrameSize);
        } else {
            MediaImageItem m = (MediaImageItem)lMediaItem;
            editSettings.audioBitrate = Bitrate.BR_64_KBPS;
            editSettings.audioChannels = 2;
            editSettings.audioFormat = AudioFormat.AAC;
            editSettings.audioSamplingFreq = AudioSamplingFrequency.FREQ_32000;

            editSettings.videoFormat = VideoFormat.H264;
            editSettings.videoFrameRate = VideoFrameRate.FR_30_FPS;
            editSettings.videoFrameSize = findVideoResolution(mVideoEditor.getAspectRatio(),
                    m.getScaledHeight());
            editSettings.videoBitrate = findVideoBitrate(editSettings.videoFrameSize);
        }

        editSettings.outputFile = EffectClipPath;

        if (clipNo == 1) {
            mProcessingState  = PROCESSING_INTERMEDIATE1;
        } else if (clipNo == 2) {
            mProcessingState  = PROCESSING_INTERMEDIATE2;
        }
        mProcessingObject = lMediaItem;
        err = generateClip(editSettings);
        mProcessingState  = PROCESSING_NONE;

        if (err == 0) {
            lclipSettings.clipPath = EffectClipPath;
            lclipSettings.fileType = FileType.THREE_GPP;
            return EffectClipPath;
        } else {
            throw new RuntimeException("preview generation cannot be completed");
        }
!!!6892556.java!!!	generateKenBurnsClip(inout e : EditSettings, inout m : MediaImageItem) : String
        String output = null;
        int err = 0;
        int outVideoProfile = 0;
        int outVideoLevel = 0;

        e.backgroundMusicSettings = null;
        e.transitionSettingsArray = null;
        e.effectSettingsArray = null;
        output = String.format(mProjectPath + "/" + "ImageClip-" + m.getId() + ".3gp");

        File tmpFile = new File(output);
        if (tmpFile.exists()) {
            tmpFile.delete();
        }

        outVideoProfile = VideoEditorProfile.getExportProfile(VideoFormat.H264);
        outVideoLevel = VideoEditorProfile.getExportLevel(VideoFormat.H264);
        e.videoProfile = outVideoProfile;
        e.videoLevel = outVideoLevel;

        e.outputFile = output;
        e.audioBitrate = Bitrate.BR_64_KBPS;
        e.audioChannels = 2;
        e.audioFormat = AudioFormat.AAC;
        e.audioSamplingFreq = AudioSamplingFrequency.FREQ_32000;

        e.videoFormat = VideoFormat.H264;
        e.videoFrameRate = VideoFrameRate.FR_30_FPS;
        e.videoFrameSize = findVideoResolution(mVideoEditor.getAspectRatio(),
                                                           m.getScaledHeight());
        e.videoBitrate = findVideoBitrate(e.videoFrameSize);

        mProcessingState  = PROCESSING_KENBURNS;
        mProcessingObject = m;
        err = generateClip(e);
        // Reset the processing state and check for errors
        mProcessingState  = PROCESSING_NONE;
        if (err != 0) {
            throw new RuntimeException("preview generation cannot be completed");
        }
        return output;
!!!6892684.java!!!	getTransitionResolution(inout m1 : MediaItem, inout m2 : MediaItem) : int
        int clip1Height = 0;
        int clip2Height = 0;
        int videoSize = 0;

        if (m1 != null && m2 != null) {
            if (m1 instanceof MediaVideoItem) {
                clip1Height = m1.getHeight();
            } else if (m1 instanceof MediaImageItem) {
                clip1Height = ((MediaImageItem)m1).getScaledHeight();
            }
            if (m2 instanceof MediaVideoItem) {
                clip2Height = m2.getHeight();
            } else if (m2 instanceof MediaImageItem) {
                clip2Height = ((MediaImageItem)m2).getScaledHeight();
            }
            if (clip1Height > clip2Height) {
                videoSize = findVideoResolution(mVideoEditor.getAspectRatio(), clip1Height);
            } else {
                videoSize = findVideoResolution(mVideoEditor.getAspectRatio(), clip2Height);
            }
        } else if (m1 == null && m2 != null) {
            if (m2 instanceof MediaVideoItem) {
                clip2Height = m2.getHeight();
            } else if (m2 instanceof MediaImageItem) {
                clip2Height = ((MediaImageItem)m2).getScaledHeight();
            }
            videoSize = findVideoResolution(mVideoEditor.getAspectRatio(), clip2Height);
        } else if (m1 != null && m2 == null) {
            if (m1 instanceof MediaVideoItem) {
                clip1Height = m1.getHeight();
            } else if (m1 instanceof MediaImageItem) {
                clip1Height = ((MediaImageItem)m1).getScaledHeight();
            }
            videoSize = findVideoResolution(mVideoEditor.getAspectRatio(), clip1Height);
        }
        return videoSize;
!!!6892812.java!!!	generateTransitionClip(inout e : EditSettings, in uniqueId : String, inout m1 : MediaItem, inout m2 : MediaItem, inout t : Transition) : String
        String outputFilename = null;
        int err = 0;
        int outVideoProfile = 0;
        int outVideoLevel = 0;
        outputFilename = String.format(mProjectPath + "/" + uniqueId + ".3gp");

        outVideoProfile = VideoEditorProfile.getExportProfile(VideoFormat.H264);
        outVideoLevel = VideoEditorProfile.getExportLevel(VideoFormat.H264);
        e.videoProfile = outVideoProfile;
        e.videoLevel = outVideoLevel;

        e.outputFile = outputFilename;
        e.audioBitrate = Bitrate.BR_64_KBPS;
        e.audioChannels = 2;
        e.audioFormat = AudioFormat.AAC;
        e.audioSamplingFreq = AudioSamplingFrequency.FREQ_32000;

        e.videoFormat = VideoFormat.H264;
        e.videoFrameRate = VideoFrameRate.FR_30_FPS;
        e.videoFrameSize = getTransitionResolution(m1, m2);
        e.videoBitrate = findVideoBitrate(e.videoFrameSize);

        if (new File(outputFilename).exists()) {
            new File(outputFilename).delete();
        }
        mProcessingState  = PROCESSING_INTERMEDIATE3;
        mProcessingObject = t;
        err = generateClip(e);
        // Reset the processing state and check for errors
        mProcessingState  = PROCESSING_NONE;
        if (err != 0) {
            throw new RuntimeException("preview generation cannot be completed");
        }
        return outputFilename;
!!!6892940.java!!!	populateEffects(inout m : MediaItem, inout effectSettings : EffectSettings, in i : int, in beginCutTime : int, in endCutTime : int, in storyBoardTime : int) : int

        if (m.getBeginTransition() != null && m.getBeginTransition().getDuration() > 0
                && m.getEndTransition() != null && m.getEndTransition().getDuration() > 0) {
            beginCutTime += m.getBeginTransition().getDuration();
            endCutTime -= m.getEndTransition().getDuration();
        } else if (m.getBeginTransition() == null && m.getEndTransition() != null
                && m.getEndTransition().getDuration() > 0) {
            endCutTime -= m.getEndTransition().getDuration();
        } else if (m.getEndTransition() == null && m.getBeginTransition() != null
                && m.getBeginTransition().getDuration() > 0) {
            beginCutTime += m.getBeginTransition().getDuration();
        }

        final List<Effect> effects = m.getAllEffects();
        final List<Overlay> overlays = m.getAllOverlays();

        for (Overlay overlay : overlays) {
            effectSettings[i] = getOverlaySettings((OverlayFrame)overlay);
            adjustEffectsStartTimeAndDuration(effectSettings[i], beginCutTime, endCutTime);
            effectSettings[i].startTime += storyBoardTime;
            i++;
        }

        for (Effect effect : effects) {
            if (effect instanceof EffectColor) {
                effectSettings[i] = getEffectSettings((EffectColor)effect);
                adjustEffectsStartTimeAndDuration(effectSettings[i], beginCutTime, endCutTime);
                effectSettings[i].startTime += storyBoardTime;
                i++;
            }
        }

        return i;
!!!6893068.java!!!	adjustMediaItemBoundary(inout clipSettings : ClipSettings, inout clipProperties : Properties, inout m : MediaItem) : void
        if (m.getBeginTransition() != null && m.getBeginTransition().getDuration() > 0
                && m.getEndTransition() != null && m.getEndTransition().getDuration() > 0) {
            clipSettings.beginCutTime += m.getBeginTransition().getDuration();
            clipSettings.endCutTime -= m.getEndTransition().getDuration();
        } else if (m.getBeginTransition() == null && m.getEndTransition() != null
                && m.getEndTransition().getDuration() > 0) {
            clipSettings.endCutTime -= m.getEndTransition().getDuration();
        } else if (m.getEndTransition() == null && m.getBeginTransition() != null
                && m.getBeginTransition().getDuration() > 0) {
            clipSettings.beginCutTime += m.getBeginTransition().getDuration();
        }

        clipProperties.duration = clipSettings.endCutTime - clipSettings.beginCutTime;

        if (clipProperties.videoDuration != 0) {
            clipProperties.videoDuration = clipSettings.endCutTime - clipSettings.beginCutTime;
        }

        if (clipProperties.audioDuration != 0) {
            clipProperties.audioDuration = clipSettings.endCutTime - clipSettings.beginCutTime;
        }
!!!6893196.java!!!	generateTransition(inout transition : Transition, inout editSettings : EditSettings, inout clipPropertiesArray : PreviewClipProperties, in index : int) : void
        if (!(transition.isGenerated())) {
            transition.generate();
        }
        editSettings.clipSettingsArray[index] = new ClipSettings();
        editSettings.clipSettingsArray[index].clipPath = transition.getFilename();
        editSettings.clipSettingsArray[index].fileType = FileType.THREE_GPP;
        editSettings.clipSettingsArray[index].beginCutTime = 0;
        editSettings.clipSettingsArray[index].endCutTime = (int)transition.getDuration();
        editSettings.clipSettingsArray[index].mediaRendering = MediaRendering.BLACK_BORDERS;

        try {
            clipPropertiesArray.clipProperties[index] =
                getMediaProperties(transition.getFilename());
        } catch (Exception e) {
            throw new IllegalArgumentException("Unsupported file or file not found");
        }

        clipPropertiesArray.clipProperties[index].Id = null;
        clipPropertiesArray.clipProperties[index].audioVolumeValue = 100;
        clipPropertiesArray.clipProperties[index].duration = (int)transition.getDuration();
        if (clipPropertiesArray.clipProperties[index].videoDuration != 0) {
            clipPropertiesArray.clipProperties[index].videoDuration = (int)transition.getDuration();
        }

        if (clipPropertiesArray.clipProperties[index].audioDuration != 0) {
            clipPropertiesArray.clipProperties[index].audioDuration = (int)transition.getDuration();
        }
!!!6893324.java!!!	adjustVolume(inout m : MediaItem, inout clipProperties : PreviewClipProperties, in index : int) : void
        if (m instanceof MediaVideoItem) {
            final boolean videoMuted = ((MediaVideoItem)m).isMuted();
            if (videoMuted == false) {
                mClipProperties.clipProperties[index].audioVolumeValue =
                    ((MediaVideoItem)m).getVolume();
            } else {
                mClipProperties.clipProperties[index].audioVolumeValue = 0;
            }
        } else if (m instanceof MediaImageItem) {
            mClipProperties.clipProperties[index].audioVolumeValue = 0;
        }
!!!6893452.java!!!	checkOddSizeImage(inout m : MediaItem, inout clipProperties : PreviewClipProperties, in index : int) : void
        if (m instanceof MediaImageItem) {
            int width = mClipProperties.clipProperties[index].width;
            int height = mClipProperties.clipProperties[index].height;

            if ((width % 2) != 0) {
                width -= 1;
            }
            if ((height % 2) != 0) {
                height -= 1;
            }
            mClipProperties.clipProperties[index].width = width;
            mClipProperties.clipProperties[index].height = height;
        }
!!!6893580.java!!!	populateMediaItemProperties(inout m : MediaItem, in index : int, in maxHeight : int) : int
        mPreviewEditSettings.clipSettingsArray[index] = new ClipSettings();
        if (m instanceof MediaVideoItem) {
            mPreviewEditSettings.clipSettingsArray[index] =
                ((MediaVideoItem)m).getVideoClipProperties();
            if (((MediaVideoItem)m).getHeight() > maxHeight) {
                maxHeight = ((MediaVideoItem)m).getHeight();
            }
        } else if (m instanceof MediaImageItem) {
            mPreviewEditSettings.clipSettingsArray[index] =
                ((MediaImageItem)m).getImageClipProperties();
            if (((MediaImageItem)m).getScaledHeight() > maxHeight) {
                maxHeight = ((MediaImageItem)m).getScaledHeight();
            }
        }
        /** + Handle the image files here */
        if (mPreviewEditSettings.clipSettingsArray[index].fileType == FileType.JPG) {
            mPreviewEditSettings.clipSettingsArray[index].clipDecodedPath =
                ((MediaImageItem)m).getDecodedImageFileName();

            mPreviewEditSettings.clipSettingsArray[index].clipOriginalPath =
                         mPreviewEditSettings.clipSettingsArray[index].clipPath;
        }
        return maxHeight;
!!!6893708.java!!!	populateBackgroundMusicProperties(inout mediaBGMList : List<AudioTrack>) : void

        if (mediaBGMList.size() == 1) {
            mAudioTrack = mediaBGMList.get(0);
        } else {
            mAudioTrack = null;
        }

        if (mAudioTrack != null) {
            mAudioSettings = new AudioSettings();
            Properties mAudioProperties = new Properties();
            mAudioSettings.pFile = null;
            mAudioSettings.Id = mAudioTrack.getId();
            try {
                mAudioProperties = getMediaProperties(mAudioTrack.getFilename());
            } catch (Exception e) {
               throw new IllegalArgumentException("Unsupported file or file not found");
            }
            mAudioSettings.bRemoveOriginal = false;
            mAudioSettings.channels = mAudioProperties.audioChannels;
            mAudioSettings.Fs = mAudioProperties.audioSamplingFrequency;
            mAudioSettings.loop = mAudioTrack.isLooping();
            mAudioSettings.ExtendedFs = 0;
            mAudioSettings.pFile = mAudioTrack.getFilename();
            mAudioSettings.startMs = mAudioTrack.getStartTime();
            mAudioSettings.beginCutTime = mAudioTrack.getBoundaryBeginTime();
            mAudioSettings.endCutTime = mAudioTrack.getBoundaryEndTime();
            if (mAudioTrack.isMuted()) {
                mAudioSettings.volume = 0;
            } else {
                mAudioSettings.volume = mAudioTrack.getVolume();
            }
            mAudioSettings.fileType = mAudioProperties.fileType;
            mAudioSettings.ducking_lowVolume = mAudioTrack.getDuckedTrackVolume();
            mAudioSettings.ducking_threshold = mAudioTrack.getDuckingThreshhold();
            mAudioSettings.bInDucking_enable = mAudioTrack.isDuckingEnabled();
            mAudioTrackPCMFilePath = String.format(mProjectPath + "/" + AUDIO_TRACK_PCM_FILE);
            mAudioSettings.pcmFilePath = mAudioTrackPCMFilePath;

            mPreviewEditSettings.backgroundMusicSettings = new BackgroundMusicSettings();
            mPreviewEditSettings.backgroundMusicSettings.file = mAudioTrackPCMFilePath;
            mPreviewEditSettings.backgroundMusicSettings.fileType = mAudioProperties.fileType;
            mPreviewEditSettings.backgroundMusicSettings.insertionTime =
                mAudioTrack.getStartTime();
            mPreviewEditSettings.backgroundMusicSettings.volumePercent = mAudioTrack.getVolume();
            mPreviewEditSettings.backgroundMusicSettings.beginLoop =
                mAudioTrack.getBoundaryBeginTime();
            mPreviewEditSettings.backgroundMusicSettings.endLoop =
                                               mAudioTrack.getBoundaryEndTime();
            mPreviewEditSettings.backgroundMusicSettings.enableDucking =
                mAudioTrack.isDuckingEnabled();
            mPreviewEditSettings.backgroundMusicSettings.duckingThreshold =
                mAudioTrack.getDuckingThreshhold();
            mPreviewEditSettings.backgroundMusicSettings.lowVolume =
                mAudioTrack.getDuckedTrackVolume();
            mPreviewEditSettings.backgroundMusicSettings.isLooping = mAudioTrack.isLooping();
            mPreviewEditSettings.primaryTrackVolume = 100;
            mProcessingState  = PROCESSING_AUDIO_PCM;
            mProcessingObject = mAudioTrack;
        } else {
            mAudioSettings = null;
            mPreviewEditSettings.backgroundMusicSettings = null;
            mAudioTrackPCMFilePath = null;
        }
!!!6893836.java!!!	getTotalEffects(inout mediaItemsList : List<MediaItem>) : int
        int totalEffects = 0;
        final Iterator<MediaItem> it = mediaItemsList.iterator();
        while (it.hasNext()) {
            final MediaItem t = it.next();
            totalEffects += t.getAllEffects().size();
            totalEffects += t.getAllOverlays().size();
            final Iterator<Effect> ef = t.getAllEffects().iterator();
            while (ef.hasNext()) {
                final Effect e = ef.next();
                if (e instanceof EffectKenBurns) {
                    totalEffects--;
                }
            }
        }
        return totalEffects;
!!!6893964.java!!!	previewStoryBoard(inout mediaItemsList : List<MediaItem>, inout mediaTransitionList : List<Transition>, inout mediaBGMList : List<AudioTrack>, inout listener : MediaProcessingProgressListener) : void
        if (mInvalidatePreviewArray) {
            int previewIndex = 0;
            int totalEffects = 0;
            int storyBoardTime = 0;
            int maxHeight = 0;
            int beginCutTime = 0;
            int endCutTime = 0;
            int effectIndex = 0;
            Transition lTransition = null;
            MediaItem lMediaItem = null;
            mPreviewEditSettings = new EditSettings();
            mClipProperties = new PreviewClipProperties();
            mTotalClips = 0;

            mTotalClips = mediaItemsList.size();
            for (Transition transition : mediaTransitionList) {
                if (transition.getDuration() > 0) {
                    mTotalClips++;
                }
            }

            totalEffects = getTotalEffects(mediaItemsList);

            mPreviewEditSettings.clipSettingsArray = new ClipSettings[mTotalClips];
            mPreviewEditSettings.effectSettingsArray = new EffectSettings[totalEffects];
            mClipProperties.clipProperties = new Properties[mTotalClips];

            /** record the call back progress listener */
            mMediaProcessingProgressListener = listener;
            mProgressToApp = 0;

            if (mediaItemsList.size() > 0) {
                for (int i = 0; i < mediaItemsList.size(); i++) {
                    /* Get the Media Item from the list */
                    lMediaItem = mediaItemsList.get(i);
                    if (lMediaItem instanceof MediaVideoItem) {
                        beginCutTime = (int)((MediaVideoItem)lMediaItem).getBoundaryBeginTime();
                        endCutTime = (int)((MediaVideoItem)lMediaItem).getBoundaryEndTime();
                    } else if (lMediaItem instanceof MediaImageItem) {
                        beginCutTime = 0;
                        endCutTime = (int)((MediaImageItem)lMediaItem).getTimelineDuration();
                    }
                    /* Get the transition associated with Media Item */
                    lTransition = lMediaItem.getBeginTransition();
                    if (lTransition != null && (lTransition.getDuration() > 0)) {
                        /* generate transition clip */
                        generateTransition(lTransition, mPreviewEditSettings,
                                           mClipProperties, previewIndex);
                        storyBoardTime += mClipProperties.clipProperties[previewIndex].duration;
                        previewIndex++;
                    }
                    /* Populate media item properties */
                    maxHeight = populateMediaItemProperties(lMediaItem, previewIndex, maxHeight);
                    /* Get the clip properties of the media item. */
                    if (lMediaItem instanceof MediaImageItem) {
                        int tmpCnt = 0;
                        boolean bEffectKbPresent = false;
                        final List<Effect> effectList = lMediaItem.getAllEffects();
                        /**
                         * Check if Ken Burns effect is present
                         */
                        while (tmpCnt < effectList.size()) {
                            if (effectList.get(tmpCnt) instanceof EffectKenBurns) {
                                bEffectKbPresent = true;
                                break;
                            }
                            tmpCnt++;
                        }

                        if (bEffectKbPresent) {
                            try {
                                  if(((MediaImageItem)lMediaItem).getGeneratedImageClip() != null) {
                                     mClipProperties.clipProperties[previewIndex]
                                        = getMediaProperties(((MediaImageItem)lMediaItem).
                                                             getGeneratedImageClip());
                                  }
                                  else {
                                   mClipProperties.clipProperties[previewIndex]
                                      = getMediaProperties(((MediaImageItem)lMediaItem).
                                                             getScaledImageFileName());
                                   mClipProperties.clipProperties[previewIndex].width =
                                             ((MediaImageItem)lMediaItem).getScaledWidth();
                                   mClipProperties.clipProperties[previewIndex].height =
                                             ((MediaImageItem)lMediaItem).getScaledHeight();
                                  }
                                } catch (Exception e) {
                                   throw new IllegalArgumentException("Unsupported file or file not found");
                                }
                         } else {
                              try {
                                  mClipProperties.clipProperties[previewIndex]
                                      = getMediaProperties(((MediaImageItem)lMediaItem).
                                                               getScaledImageFileName());
                              } catch (Exception e) {
                                throw new IllegalArgumentException("Unsupported file or file not found");
                              }
                            mClipProperties.clipProperties[previewIndex].width =
                                        ((MediaImageItem)lMediaItem).getScaledWidth();
                            mClipProperties.clipProperties[previewIndex].height =
                                        ((MediaImageItem)lMediaItem).getScaledHeight();
                        }
                    } else {
                        try {
                            mClipProperties.clipProperties[previewIndex]
                                 = getMediaProperties(lMediaItem.getFilename());
                            } catch (Exception e) {
                              throw new IllegalArgumentException("Unsupported file or file not found");
                          }
                    }
                    mClipProperties.clipProperties[previewIndex].Id = lMediaItem.getId();
                    checkOddSizeImage(lMediaItem, mClipProperties, previewIndex);
                    adjustVolume(lMediaItem, mClipProperties, previewIndex);

                    /*
                     * Adjust media item start time and end time w.r.t to begin
                     * and end transitions associated with media item
                     */

                    adjustMediaItemBoundary(mPreviewEditSettings.clipSettingsArray[previewIndex],
                            mClipProperties.clipProperties[previewIndex], lMediaItem);

                    /*
                     * Get all the effects and overlays for that media item and
                     * adjust start time and duration of effects
                     */

                    effectIndex = populateEffects(lMediaItem,
                            mPreviewEditSettings.effectSettingsArray, effectIndex, beginCutTime,
                            endCutTime, storyBoardTime);
                    storyBoardTime += mClipProperties.clipProperties[previewIndex].duration;
                    previewIndex++;

                    /* Check if there is any end transition at last media item */

                    if (i == (mediaItemsList.size() - 1)) {
                        lTransition = lMediaItem.getEndTransition();
                        if (lTransition != null && (lTransition.getDuration() > 0)) {
                            generateTransition(lTransition, mPreviewEditSettings, mClipProperties,
                                    previewIndex);
                            break;
                        }
                    }
                }

                if (!mErrorFlagSet) {
                    mPreviewEditSettings.videoFrameSize = findVideoResolution(mVideoEditor
                            .getAspectRatio(), maxHeight);
                    populateBackgroundMusicProperties(mediaBGMList);

                    /** call to native populate settings */
                    try {
                        nativePopulateSettings(mPreviewEditSettings, mClipProperties, mAudioSettings);
                    } catch (IllegalArgumentException ex) {
                        Log.e(TAG, "Illegal argument exception in nativePopulateSettings");
                        throw ex;
                    } catch (IllegalStateException ex) {
                        Log.e(TAG, "Illegal state exception in nativePopulateSettings");
                        throw ex;
                    } catch (RuntimeException ex) {
                        Log.e(TAG, "Runtime exception in nativePopulateSettings");
                        throw ex;
                    }
                    mInvalidatePreviewArray = false;
                    mProcessingState  = PROCESSING_NONE;
                }
            }
            if (mErrorFlagSet) {
                mErrorFlagSet = false;
                throw new RuntimeException("preview generation cannot be completed");
            }
        }
!!!6894092.java!!!	doPreview(inout surface : Surface, in fromMs : long, in toMs : long, inout loop : boolean, in callbackAfterFrameCount : int, inout listener : PreviewProgressListener) : void
        mPreviewProgress = fromMs;
        mIsFirstProgress = true;
        mPreviewProgressListener = listener;

        if (!mInvalidatePreviewArray) {
            try {
                /** Modify the image files names to rgb image files. */
                for (int clipCnt = 0; clipCnt < mPreviewEditSettings.clipSettingsArray.length;
                    clipCnt++) {
                    if (mPreviewEditSettings.clipSettingsArray[clipCnt].fileType == FileType.JPG) {
                        mPreviewEditSettings.clipSettingsArray[clipCnt].clipPath =
                            mPreviewEditSettings.clipSettingsArray[clipCnt].clipDecodedPath;
                    }
                }
                nativePopulateSettings(mPreviewEditSettings, mClipProperties, mAudioSettings);
                nativeStartPreview(surface, fromMs, toMs, callbackAfterFrameCount, loop);
            } catch (IllegalArgumentException ex) {
                Log.e(TAG, "Illegal argument exception in nativeStartPreview");
                throw ex;
            } catch (IllegalStateException ex) {
                Log.e(TAG, "Illegal state exception in nativeStartPreview");
                throw ex;
            } catch (RuntimeException ex) {
                Log.e(TAG, "Runtime exception in nativeStartPreview");
                throw ex;
            }
        } else {
            throw new IllegalStateException("generatePreview is in progress");
        }
!!!6894220.java!!!	stopPreview() : long
        return nativeStopPreview();
!!!6894348.java!!!	renderPreviewFrame(inout surface : Surface, in time : long, in surfaceWidth : int, in surfaceHeight : int, inout overlayData : OverlayData) : long
        if (mInvalidatePreviewArray) {
            if (Log.isLoggable(TAG, Log.DEBUG)) {
                Log.d(TAG, "Call generate preview first");
            }
            throw new IllegalStateException("Call generate preview first");
        }

        long timeMs = 0;
        try {
            for (int clipCnt = 0; clipCnt < mPreviewEditSettings.clipSettingsArray.length;
                  clipCnt++) {
                if (mPreviewEditSettings.clipSettingsArray[clipCnt].fileType == FileType.JPG) {
                    mPreviewEditSettings.clipSettingsArray[clipCnt].clipPath =
                        mPreviewEditSettings.clipSettingsArray[clipCnt].clipDecodedPath;
                }
            }

            // Reset the render preview frame params that shall be set by native.
            mRenderPreviewOverlayFile = null;
            mRenderPreviewRenderingMode = MediaRendering.RESIZING;

            nativePopulateSettings(mPreviewEditSettings, mClipProperties, mAudioSettings);

            timeMs = (long)nativeRenderPreviewFrame(surface, time, surfaceWidth, surfaceHeight);

            if (mRenderPreviewOverlayFile != null) {
                overlayData.set(BitmapFactory.decodeFile(mRenderPreviewOverlayFile),
                        mRenderPreviewRenderingMode);
            } else {
                overlayData.setClear();
            }
        } catch (IllegalArgumentException ex) {
            Log.e(TAG, "Illegal Argument exception in nativeRenderPreviewFrame");
            throw ex;
        } catch (IllegalStateException ex) {
            Log.e(TAG, "Illegal state exception in nativeRenderPreviewFrame");
            throw ex;
        } catch (RuntimeException ex) {
            Log.e(TAG, "Runtime exception in nativeRenderPreviewFrame");
            throw ex;
        }

        return timeMs;
!!!6894476.java!!!	previewFrameEditInfo(in filename : String, in renderingMode : int) : void
        mRenderPreviewOverlayFile = filename;
        mRenderPreviewRenderingMode = renderingMode;
!!!6894604.java!!!	renderMediaItemPreviewFrame(inout surface : Surface, in filepath : String, in time : long, in framewidth : int, in frameheight : int) : long
        long timeMs = 0;
        try {
            timeMs = (long)nativeRenderMediaItemPreviewFrame(surface, filepath, framewidth,
                    frameheight, 0, 0, time);
        } catch (IllegalArgumentException ex) {
            Log.e(TAG, "Illegal Argument exception in renderMediaItemPreviewFrame");
            throw ex;
        } catch (IllegalStateException ex) {
            Log.e(TAG, "Illegal state exception in renderMediaItemPreviewFrame");
            throw ex;
        } catch (RuntimeException ex) {
            Log.e(TAG, "Runtime exception in renderMediaItemPreviewFrame");
            throw ex;
        }

        return timeMs;
!!!6894732.java!!!	setGeneratePreview(inout isRequired : boolean) : void
        boolean semAcquiredDone = false;
        try {
            lock();
            semAcquiredDone = true;
            mInvalidatePreviewArray = isRequired;
        } catch (InterruptedException ex) {
            Log.e(TAG, "Runtime exception in renderMediaItemPreviewFrame");
        } finally {
            if (semAcquiredDone) {
                unlock();
            }
        }
!!!6894860.java!!!	getGeneratePreview() : boolean
        return mInvalidatePreviewArray;
!!!6894988.java!!!	getAspectRatio(in w : int, in h : int) : int
        double apRatio = (double)(w) / (double)(h);
        BigDecimal bd = new BigDecimal(apRatio);
        bd = bd.setScale(3, BigDecimal.ROUND_HALF_UP);
        apRatio = bd.doubleValue();
        int var = MediaProperties.ASPECT_RATIO_16_9;
        if (apRatio >= 1.7) {
            var = MediaProperties.ASPECT_RATIO_16_9;
        } else if (apRatio >= 1.6) {
            var = MediaProperties.ASPECT_RATIO_5_3;
        } else if (apRatio >= 1.5) {
            var = MediaProperties.ASPECT_RATIO_3_2;
        } else if (apRatio > 1.3) {
            var = MediaProperties.ASPECT_RATIO_4_3;
        } else if (apRatio >= 1.2) {
            var = MediaProperties.ASPECT_RATIO_11_9;
        }
        return var;
!!!6895116.java!!!	getFileType(in fileType : int) : int
        int retValue = -1;
        switch (fileType) {
            case FileType.UNSUPPORTED:
                retValue = MediaProperties.FILE_UNSUPPORTED;
                break;
            case FileType.THREE_GPP:
                retValue = MediaProperties.FILE_3GP;
                break;
            case FileType.MP4:
                retValue = MediaProperties.FILE_MP4;
                break;
            case FileType.JPG:
                retValue = MediaProperties.FILE_JPEG;
                break;
            case FileType.PNG:
                retValue = MediaProperties.FILE_PNG;
                break;
            case FileType.MP3:
                retValue = MediaProperties.FILE_MP3;
                break;
            case FileType.M4V:
                retValue = MediaProperties.FILE_M4V;
                break;
            case FileType.AMR:
                retValue = MediaProperties.FILE_AMR;
                break;

            default:
                retValue = -1;
        }
        return retValue;
!!!6895244.java!!!	getVideoCodecType(in codecType : int) : int
        int retValue = -1;
        switch (codecType) {
            case VideoFormat.H263:
                retValue = MediaProperties.VCODEC_H263;
                break;
            case VideoFormat.H264:
                retValue = MediaProperties.VCODEC_H264;
                break;
            case VideoFormat.MPEG4:
                retValue = MediaProperties.VCODEC_MPEG4;
                break;
            case VideoFormat.UNSUPPORTED:

            default:
                retValue = -1;
        }
        return retValue;
!!!6895372.java!!!	getAudioCodecType(in codecType : int) : int
        int retValue = -1;
        switch (codecType) {
            case AudioFormat.AMR_NB:
                retValue = MediaProperties.ACODEC_AMRNB;
                break;
            case AudioFormat.AAC:
                retValue = MediaProperties.ACODEC_AAC_LC;
                break;
            case AudioFormat.MP3:
                retValue = MediaProperties.ACODEC_MP3;
                break;

            default:
                retValue = -1;
        }
        return retValue;
!!!6895500.java!!!	getFrameRate(in fps : int) : int
        int retValue = -1;
        switch (fps) {
            case VideoFrameRate.FR_5_FPS:
                retValue = 5;
                break;
            case VideoFrameRate.FR_7_5_FPS:
                retValue = 8;
                break;
            case VideoFrameRate.FR_10_FPS:
                retValue = 10;
                break;
            case VideoFrameRate.FR_12_5_FPS:
                retValue = 13;
                break;
            case VideoFrameRate.FR_15_FPS:
                retValue = 15;
                break;
            case VideoFrameRate.FR_20_FPS:
                retValue = 20;
                break;
            case VideoFrameRate.FR_25_FPS:
                retValue = 25;
                break;
            case VideoFrameRate.FR_30_FPS:
                retValue = 30;
                break;

            default:
                retValue = -1;
        }
        return retValue;
!!!6895628.java!!!	getMediaItemFileType(in fileType : int) : int
        int retValue = -1;

        switch (fileType) {
            case MediaProperties.FILE_UNSUPPORTED:
                retValue = FileType.UNSUPPORTED;
                break;
            case MediaProperties.FILE_3GP:
                retValue = FileType.THREE_GPP;
                break;
            case MediaProperties.FILE_MP4:
                retValue = FileType.MP4;
                break;
            case MediaProperties.FILE_JPEG:
                retValue = FileType.JPG;
                break;
            case MediaProperties.FILE_PNG:
                retValue = FileType.PNG;
                break;
            case MediaProperties.FILE_M4V:
                retValue = FileType.M4V;
                break;

            default:
                retValue = -1;
        }
        return retValue;

!!!6895756.java!!!	getMediaItemRenderingMode(in renderingMode : int) : int
        int retValue = -1;
        switch (renderingMode) {
            case MediaItem.RENDERING_MODE_BLACK_BORDER:
                retValue = MediaRendering.BLACK_BORDERS;
                break;
            case MediaItem.RENDERING_MODE_STRETCH:
                retValue = MediaRendering.RESIZING;
                break;
            case MediaItem.RENDERING_MODE_CROPPING:
                retValue = MediaRendering.CROPPING;
                break;

            default:
                retValue = -1;
        }
        return retValue;
!!!6895884.java!!!	getVideoTransitionBehaviour(in transitionType : int) : int
        int retValue = -1;
        switch (transitionType) {
            case Transition.BEHAVIOR_SPEED_UP:
                retValue = TransitionBehaviour.SPEED_UP;
                break;
            case Transition.BEHAVIOR_SPEED_DOWN:
                retValue = TransitionBehaviour.SPEED_DOWN;
                break;
            case Transition.BEHAVIOR_LINEAR:
                retValue = TransitionBehaviour.LINEAR;
                break;
            case Transition.BEHAVIOR_MIDDLE_SLOW:
                retValue = TransitionBehaviour.SLOW_MIDDLE;
                break;
            case Transition.BEHAVIOR_MIDDLE_FAST:
                retValue = TransitionBehaviour.FAST_MIDDLE;
                break;

            default:
                retValue = -1;
        }
        return retValue;
!!!6896012.java!!!	getSlideSettingsDirection(in slideDirection : int) : int
        int retValue = -1;
        switch (slideDirection) {
            case TransitionSliding.DIRECTION_RIGHT_OUT_LEFT_IN:
                retValue = SlideDirection.RIGHT_OUT_LEFT_IN;
                break;
            case TransitionSliding.DIRECTION_LEFT_OUT_RIGHT_IN:
                retValue = SlideDirection.LEFT_OUT_RIGTH_IN;
                break;
            case TransitionSliding.DIRECTION_TOP_OUT_BOTTOM_IN:
                retValue = SlideDirection.TOP_OUT_BOTTOM_IN;
                break;
            case TransitionSliding.DIRECTION_BOTTOM_OUT_TOP_IN:
                retValue = SlideDirection.BOTTOM_OUT_TOP_IN;
                break;

            default:
                retValue = -1;
        }
        return retValue;
!!!6896140.java!!!	getEffectColorType(inout effect : EffectColor) : int
        int retValue = -1;
        switch (effect.getType()) {
            case EffectColor.TYPE_COLOR:
                if (effect.getColor() == EffectColor.GREEN) {
                    retValue = VideoEffect.GREEN;
                } else if (effect.getColor() == EffectColor.PINK) {
                    retValue = VideoEffect.PINK;
                } else if (effect.getColor() == EffectColor.GRAY) {
                    retValue = VideoEffect.BLACK_AND_WHITE;
                } else {
                    retValue = VideoEffect.COLORRGB16;
                }
                break;
            case EffectColor.TYPE_GRADIENT:
                retValue = VideoEffect.GRADIENT;
                break;
            case EffectColor.TYPE_SEPIA:
                retValue = VideoEffect.SEPIA;
                break;
            case EffectColor.TYPE_NEGATIVE:
                retValue = VideoEffect.NEGATIVE;
                break;
            case EffectColor.TYPE_FIFTIES:
                retValue = VideoEffect.FIFTIES;
                break;

            default:
                retValue = -1;
        }
        return retValue;
!!!6896268.java!!!	findVideoResolution(in aspectRatio : int, in height : int) : int
        final Pair<Integer, Integer>[] resolutions;
        final Pair<Integer, Integer> maxResolution;
        int retValue = VideoFrameSize.SIZE_UNDEFINED;
        switch (aspectRatio) {
            case MediaProperties.ASPECT_RATIO_3_2:
                if (height == MediaProperties.HEIGHT_480)
                    retValue = VideoFrameSize.NTSC;
                else if (height == MediaProperties.HEIGHT_720)
                    retValue = VideoFrameSize.W720p;
                break;
            case MediaProperties.ASPECT_RATIO_16_9:
                if (height == MediaProperties.HEIGHT_480)
                    retValue = VideoFrameSize.WVGA16x9;
                else if (height == MediaProperties.HEIGHT_720)
                    retValue = VideoFrameSize.V720p;
                else if (height == MediaProperties.HEIGHT_1080)
                    retValue = VideoFrameSize.V1080p;
                break;
            case MediaProperties.ASPECT_RATIO_4_3:
                if (height == MediaProperties.HEIGHT_480)
                    retValue = VideoFrameSize.VGA;
                else if (height == MediaProperties.HEIGHT_720)
                    retValue = VideoFrameSize.S720p;
                break;
            case MediaProperties.ASPECT_RATIO_5_3:
                if (height == MediaProperties.HEIGHT_480)
                    retValue = VideoFrameSize.WVGA;
                break;
            case MediaProperties.ASPECT_RATIO_11_9:
                if (height == MediaProperties.HEIGHT_144)
                    retValue = VideoFrameSize.QCIF;
                else if (height == MediaProperties.HEIGHT_288)
                    retValue = VideoFrameSize.CIF;
                break;
        }
        if (retValue == VideoFrameSize.SIZE_UNDEFINED) {
            resolutions = MediaProperties.getSupportedResolutions(mVideoEditor.getAspectRatio());
            // Get the highest resolution
            maxResolution = resolutions[resolutions.length - 1];
            retValue = findVideoResolution(mVideoEditor.getAspectRatio(), maxResolution.second);
        }

        return retValue;
!!!6896396.java!!!	findVideoBitrate(in videoFrameSize : int) : int
        switch (videoFrameSize) {
            case VideoFrameSize.SQCIF:
            case VideoFrameSize.QQVGA:
            case VideoFrameSize.QCIF:
                return Bitrate.BR_128_KBPS;
            case VideoFrameSize.QVGA:
            case VideoFrameSize.CIF:
                return Bitrate.BR_384_KBPS;
            case VideoFrameSize.VGA:
            case VideoFrameSize.WVGA:
            case VideoFrameSize.NTSC:
            case VideoFrameSize.nHD:
            case VideoFrameSize.WVGA16x9:
                return Bitrate.BR_2_MBPS;
            case VideoFrameSize.V720p:
            case VideoFrameSize.W720p:
            case VideoFrameSize.S720p:
                return Bitrate.BR_5_MBPS;
            case VideoFrameSize.V1080p:
            default:
                return Bitrate.BR_8_MBPS;
        }
!!!6896524.java!!!	export(in filePath : String, in projectDir : String, in height : int, in bitrate : int, inout mediaItemsList : List<MediaItem>, inout mediaTransitionList : List<Transition>, inout mediaBGMList : List<AudioTrack>, inout listener : ExportProgressListener) : void

        int outBitrate = 0;
        mExportFilename = filePath;
        previewStoryBoard(mediaItemsList, mediaTransitionList, mediaBGMList,null);
        mExportProgressListener = listener;
        int outVideoProfile = 0;
        int outVideoLevel = 0;

        /** Check the platform specific maximum export resolution */
        VideoEditorProfile veProfile = VideoEditorProfile.get();
        if (veProfile == null) {
            throw new RuntimeException("Can't get the video editor profile");
        }
        final int maxOutputHeight = veProfile.maxOutputVideoFrameHeight;
        final int maxOutputWidth = veProfile.maxOutputVideoFrameWidth;
        if (height > maxOutputHeight) {
            throw new IllegalArgumentException(
                    "Unsupported export resolution. Supported maximum width:" +
                    maxOutputWidth + " height:" + maxOutputHeight +
                    " current height:" + height);
        }
        outVideoProfile = VideoEditorProfile.getExportProfile(mExportVideoCodec);
        outVideoLevel = VideoEditorProfile.getExportLevel(mExportVideoCodec);

        mProgressToApp = 0;

        switch (bitrate) {
            case MediaProperties.BITRATE_28K:
                outBitrate = Bitrate.BR_32_KBPS;
                break;
            case MediaProperties.BITRATE_40K:
                outBitrate = Bitrate.BR_48_KBPS;
                break;
            case MediaProperties.BITRATE_64K:
                outBitrate = Bitrate.BR_64_KBPS;
                break;
            case MediaProperties.BITRATE_96K:
                outBitrate = Bitrate.BR_96_KBPS;
                break;
            case MediaProperties.BITRATE_128K:
                outBitrate = Bitrate.BR_128_KBPS;
                break;
            case MediaProperties.BITRATE_192K:
                outBitrate = Bitrate.BR_192_KBPS;
                break;
            case MediaProperties.BITRATE_256K:
                outBitrate = Bitrate.BR_256_KBPS;
                break;
            case MediaProperties.BITRATE_384K:
                outBitrate = Bitrate.BR_384_KBPS;
                break;
            case MediaProperties.BITRATE_512K:
                outBitrate = Bitrate.BR_512_KBPS;
                break;
            case MediaProperties.BITRATE_800K:
                outBitrate = Bitrate.BR_800_KBPS;
                break;
            case MediaProperties.BITRATE_2M:
                outBitrate = Bitrate.BR_2_MBPS;
                break;
            case MediaProperties.BITRATE_5M:
                outBitrate = Bitrate.BR_5_MBPS;
                break;
            case MediaProperties.BITRATE_8M:
                outBitrate = Bitrate.BR_8_MBPS;
                break;

            default:
                throw new IllegalArgumentException("Argument Bitrate incorrect");
        }
        mPreviewEditSettings.videoFrameRate = VideoFrameRate.FR_30_FPS;
        mPreviewEditSettings.outputFile = mOutputFilename = filePath;

        int aspectRatio = mVideoEditor.getAspectRatio();
        mPreviewEditSettings.videoFrameSize = findVideoResolution(aspectRatio, height);
        mPreviewEditSettings.videoFormat = mExportVideoCodec;
        mPreviewEditSettings.audioFormat = mExportAudioCodec;
        mPreviewEditSettings.videoProfile = outVideoProfile;
        mPreviewEditSettings.videoLevel = outVideoLevel;
        mPreviewEditSettings.audioSamplingFreq = AudioSamplingFrequency.FREQ_32000;
        mPreviewEditSettings.maxFileSize = 0;
        mPreviewEditSettings.audioChannels = 2;
        mPreviewEditSettings.videoBitrate = outBitrate;
        mPreviewEditSettings.audioBitrate = Bitrate.BR_96_KBPS;

        mPreviewEditSettings.transitionSettingsArray = new TransitionSettings[mTotalClips - 1];
        for (int index = 0; index < mTotalClips - 1; index++) {
            mPreviewEditSettings.transitionSettingsArray[index] = new TransitionSettings();
            mPreviewEditSettings.transitionSettingsArray[index].videoTransitionType =
                VideoTransition.NONE;
            mPreviewEditSettings.transitionSettingsArray[index].audioTransitionType =
                AudioTransition.NONE;
        }

        for (int clipCnt = 0; clipCnt < mPreviewEditSettings.clipSettingsArray.length; clipCnt++) {
            if (mPreviewEditSettings.clipSettingsArray[clipCnt].fileType == FileType.JPG) {
                mPreviewEditSettings.clipSettingsArray[clipCnt].clipPath =
                mPreviewEditSettings.clipSettingsArray[clipCnt].clipOriginalPath;
            }
        }
        nativePopulateSettings(mPreviewEditSettings, mClipProperties, mAudioSettings);

        int err = 0;
        try {
            mProcessingState  = PROCESSING_EXPORT;
            mProcessingObject = null;
            err = generateClip(mPreviewEditSettings);
            mProcessingState  = PROCESSING_NONE;
        } catch (IllegalArgumentException ex) {
            Log.e(TAG, "IllegalArgument for generateClip");
            throw ex;
        } catch (IllegalStateException ex) {
            Log.e(TAG, "IllegalStateExceptiont for generateClip");
            throw ex;
        } catch (RuntimeException ex) {
            Log.e(TAG, "RuntimeException for generateClip");
            throw ex;
        }

        if (err != 0) {
            Log.e(TAG, "RuntimeException for generateClip");
            throw new RuntimeException("generateClip failed with error=" + err);
        }

        mExportProgressListener = null;
!!!6896652.java!!!	stop(in filename : String) : void
        try {
            stopEncoding();
            new File(mExportFilename).delete();
        } catch (IllegalStateException ex) {
            Log.e(TAG, "Illegal state exception in unload settings");
            throw ex;
        } catch (RuntimeException ex) {
            Log.e(TAG, "Runtime exception in unload settings");
            throw ex;
        }
!!!6896780.java!!!	getPixels(in filename : String, in width : int, in height : int, in timeMs : long, in videoRotation : int) : Bitmap
        final Bitmap result[] = new Bitmap[1];
        getPixelsList(filename, width, height, timeMs, timeMs, 1, new int[] {0},
                new MediaItem.GetThumbnailListCallback() {
            public void onThumbnail(Bitmap bitmap, int index) {
                result[0] = bitmap;
            }
        }, videoRotation);
        return result[0];
!!!6896908.java!!!	getPixelsList(in filename : String, in width : int, in height : int, in startMs : long, in endMs : long, in thumbnailCount : int, inout indices : int, in callback : GetThumbnailListCallback, in videoRotation : int) : void

        // The decoder needs output width and height as even
        final int decWidth = (width + 1) & 0xFFFFFFFE;
        final int decHeight = (height + 1) & 0xFFFFFFFE;
        final int thumbnailSize = decWidth * decHeight;

        // We convert the decoder output (in int[]) to a bitmap by first
        // copy it into an IntBuffer, then use Bitmap.copyPixelsFromBuffer to
        // copy it to the bitmap.
        final int[] decArray = new int[thumbnailSize];
        final IntBuffer decBuffer = IntBuffer.allocate(thumbnailSize);

        // If we need to resize and/or rotate the decoder output, we need a
        // temporary bitmap to hold the decoded output.
        final boolean needToMassage =
                (decWidth != width || decHeight != height || videoRotation != 0);
        final Bitmap tmpBitmap = needToMassage
                ? Bitmap.createBitmap(decWidth, decHeight, Bitmap.Config.ARGB_8888)
                : null;

        // The final output bitmap width/height may swap because of rotation.
        final boolean needToSwapWH = (videoRotation == 90 || videoRotation == 270);
        final int outWidth = needToSwapWH ? height : width;
        final int outHeight = needToSwapWH ? width : height;

        nativeGetPixelsList(filename, decArray, decWidth, decHeight,
                thumbnailCount, startMs, endMs, indices,
                new NativeGetPixelsListCallback() {
            public void onThumbnail(int index) {
                // This is the bitmap we will output to the client
                Bitmap outBitmap = Bitmap.createBitmap(
                        outWidth, outHeight, Bitmap.Config.ARGB_8888);

                // Copy int[] to IntBuffer
                decBuffer.rewind();
                decBuffer.put(decArray, 0, thumbnailSize);
                decBuffer.rewind();

                if (!needToMassage) {
                    // We can directly read the decoded result to output bitmap
                    outBitmap.copyPixelsFromBuffer(decBuffer);
                } else {
                    // Copy the decoded result to an intermediate bitmap first
                    tmpBitmap.copyPixelsFromBuffer(decBuffer);

                    // Create a canvas to resize/rotate the bitmap
                    // First scale the decoded bitmap to (0,0)-(1,1), rotate it
                    // with (0.5, 0.5) as center, then scale it to
                    // (outWidth, outHeight).
                    final Canvas canvas = new Canvas(outBitmap);
                    Matrix m = new Matrix();
                    float sx = 1f / decWidth;
                    float sy = 1f / decHeight;
                    m.postScale(sx, sy);
                    m.postRotate(videoRotation, 0.5f, 0.5f);
                    m.postScale(outWidth, outHeight);
                    canvas.drawBitmap(tmpBitmap, m, sResizePaint);
                }
                callback.onThumbnail(outBitmap, index);
            }
        });

        if (tmpBitmap != null) {
            tmpBitmap.recycle();
        }
!!!6897164.java!!!	generateAudioGraph(in uniqueId : String, in inFileName : String, in OutAudiGraphFileName : String, in frameDuration : int, in audioChannels : int, in samplesCount : int, inout listener : ExtractAudioWaveformProgressListener, inout isVideo : boolean) : void
        String tempPCMFileName;

        mExtractAudioWaveformProgressListener = listener;

        /**
         * In case of Video, first call will generate the PCM file to make the
         * audio graph
         */
        if (isVideo) {
            tempPCMFileName = String.format(mProjectPath + "/" + uniqueId + ".pcm");
        } else {
            tempPCMFileName = mAudioTrackPCMFilePath;
        }

        /**
         * For Video item, generate the PCM
         */
        if (isVideo) {
            nativeGenerateRawAudio(inFileName, tempPCMFileName);
        }

        nativeGenerateAudioGraph(tempPCMFileName, OutAudiGraphFileName, frameDuration,
                audioChannels, samplesCount);

        /**
         * Once the audio graph file is generated, delete the pcm file
         */
        if (isVideo) {
            new File(tempPCMFileName).delete();
        }
!!!6897292.java!!!	clearPreviewSurface(inout surface : Surface) : void
        nativeClearSurface(surface);
!!!6897420.java!!!	lock() : void
        if (Log.isLoggable(TAG, Log.DEBUG)) {
            Log.d(TAG, "lock: grabbing semaphore", new Throwable());
        }
        mLock.acquire();
        if (Log.isLoggable(TAG, Log.DEBUG)) {
            Log.d(TAG, "lock: grabbed semaphore");
        }
!!!6897548.java!!!	unlock() : void
        if (Log.isLoggable(TAG, Log.DEBUG)) {
            Log.d(TAG, "unlock: releasing semaphore");
        }
        mLock.release();
