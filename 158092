format 74
"core" // framework::base::media::mca::filterfw::native::core
  revision 2
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/framework/base/media/mca/filterfw/native/core/"
  cpp_src_dir "/home/shchen/work/jellybean/framework/base/media/mca/filterfw/native/core/"
  cpp_namespace "android::filterfw"
  classview 148236 "core"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 452876 "Point"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This is an initial implementation of some geometrical structures. This is
 likely to grow and become more sophisticated in the future."
      operation 1166220 "Point"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : x_(0.0f), y_(0.0f) {};
"
	
	
	
	
      end

      operation 1166348 "Point"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} : x_(x), y_(y) {};
"
	
	
	
	
      end

      operation 1166476 "x"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return x_; };
"
	
	
	
	
      end

      operation 1166604 "y"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return y_; };
"
	
	
	
	
      end

      operation 1166732 "Length"
	preserve_cpp_body_indent const public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1166860 "ScaleTo"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "new_length" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1166988 "Distance"
	class_operation preserve_cpp_body_indent public explicit_return_type "float"
	nparams 2
	  param in name "p0" type class_ref 452876 // Point
	  param in name "p1" type class_ref 452876 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1167116 "operator +"
	preserve_cpp_body_indent const public return_type class_ref 452876 // Point
	nparams 1
	  param in name "other" type class_ref 452876 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add more of these as needed:"
      end

      operation 1167244 "operator -"
	preserve_cpp_body_indent const public return_type class_ref 452876 // Point
	nparams 1
	  param in name "other" type class_ref 452876 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1167372 "operator *"
	preserve_cpp_body_indent const public return_type class_ref 452876 // Point
	nparams 1
	  param in name "factor" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1167500 "Rotate90Clockwise"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 453004 "Quad"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1167628 "Quad"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : points_(4) {};
"
	
	
	
	
      end

      operation 1167756 "~Quad"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1167884 "Quad"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "p0" type class_ref 452876 // Point
	  param in name "p1" type class_ref 452876 // Point
	  param in name "p2" type class_ref 452876 // Point
	  param in name "p3" type class_ref 452876 // Point
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${volatile}${throw} : points_(4) {
      points_[0] = p0;
      points_[1] = p1;
      points_[2] = p2;
      points_[3] = p3;
    };
"
	
	
	
	
      end

      operation 1168012 "points"
	const cpp_inline public explicit_return_type "std::vector<Point>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return points_; };
"
	
	
	
	
      end

      operation 1168140 "point"
	preserve_cpp_body_indent const public return_type class_ref 452876 // Point
	nparams 1
	  param in name "ix" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 926220 // points_ (<directional composition>)
	relation 926220 *-->
	  stereotype "std::vector"
	  a role_name "points_" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 926220 // points_ (<directional composition>)
	  b parent class_ref 452876 // Point
      end
    end

    class 453132 "Rect"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1168268 "Rect"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    x = y = 0.0f;
    width = height = 1.0f;
  };
"
	
	
	
	
      end

      operation 1168396 "Rect"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	  param in name "width" explicit_type "float"
	  param in name "height" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw} {
    this->x = x;
    this->y = y;
    this->width = width;
    this->height = height;
  };
"
	
	
	
	
      end

      operation 1168524 "ExpandToAspectRatio"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "ratio" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1168652 "ExpandToMinLength"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "length" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1168780 "ScaleWithLengthLimit"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "factor" explicit_type "float"
	  param in name "max_length" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 453260 "GLTextureHandle"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1168908 "~GLTextureHandle"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 1169036 "GetTextureId"
	abstract const cpp_virtual public return_type class_ref 190220 // GLuint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Returns the held texture id."
      end

      operation 1169164 "FocusTexture"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Binds the held texture. This may result in creating the texture if it
 is not yet available."
      end

      operation 1169292 "GenerateMipMap"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Generates the mipmap chain of the held texture. Returns true, iff
 generating was successful."
      end

      operation 1169420 "SetTextureParameter"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "pname" type class_ref 190348 // GLenum
	  param in name "value" type class_ref 191116 // GLint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Set a texture parameter (see glTextureParameter documentation). Returns
 true iff the parameter was set successfully."
      end

      operation 1169548 "GetTextureTarget"
	abstract const cpp_virtual public return_type class_ref 190220 // GLuint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Returns the texture target used.
 Texture Target should be: GL_TEXTURE_2D, GL_TEXTURE_EXTERNAL_OES."
      end
    end

    class 453388 "GLFrameBufferHandle"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1169676 "~GLFrameBufferHandle"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 1169804 "GetFboId"
	abstract const cpp_virtual public return_type class_ref 190220 // GLuint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Returns the held FBO id."
      end

      operation 1169932 "FocusFrameBuffer"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Binds the held FBO. This may result in creating the FBO if it
 is not yet available."
      end
    end

    class 453516 "GLBufferHandle"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Interface to instances that hold GL textures and frame-buffer-objects.
 The GLFrame class implements this interface."
      classrelation 926348 // <generalisation>
	relation 926348 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 926348 // <generalisation>
	  b parent class_ref 453260 // GLTextureHandle
      end

      classrelation 926476 // <generalisation>
	relation 926476 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 926476 // <generalisation>
	  b parent class_ref 453388 // GLFrameBufferHandle
      end

      operation 1170060 "~GLBufferHandle"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end
    end

    class 453644 "WindowHandle"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1170188 "~WindowHandle"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
    };
"
	
	
	
	
      end

      operation 1170316 "Destroy"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1170444 "Equals"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "window" type class_ref 453644 // WindowHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      return InternalHandle() == window->InternalHandle();
    };
"
	
	
	
	
      end

      operation 1170572 "InternalHandle"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1170700 "InternalHandle"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 453772 "GLEnv"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The GLEnv class provides functionality related to the EGL environment, which
 includes the display, context, and surface. It is possible to either create
 a new environment or base it off the currently active EGL environment. In
 order to do the latter, an EGL environment must be setup already (though not
 necessarily through this class), and have an active display, context, and
 surface."
      operation 1170828 "GLEnv"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
  : display_(EGL_NO_DISPLAY),
    context_id_(0),
    surface_id_(0),
    max_surface_id_(0),
    created_context_(false),
    created_surface_(false),
    initialized_(false) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Constructing and Activating /////////////////////////////////////////////
 Constructs a new GLEnv object. This does not create a GL context."
      end

      operation 1170956 "~GLEnv"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Destructor. Tears down and deallocates any GL objects that were created
 by this instance."
      end

      operation 1171084 "InitWithNewContext"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Inits a new GL environment, including a new surface and context. You
 must call Activate() before performing any GL operations."
      end

      operation 1171212 "InitWithCurrentContext"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Inits the GL environment from the current GL environment. Use this when
 there is already a display, surface and context available (possibly
 created by the host application). You do not need to call Activate() as
 this context is active already."
      end

      operation 1171340 "Activate"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Activates the environment, and makes the associated GL context the
 current context. Creates the environment, if it has not been created
 already. Returns true if the activation was successful."
      end

      operation 1171468 "Deactivate"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Deactivates the environment. Returns true if the deactivation was
 successful. You may want to call this when moving a context to another
 thread. In this case, deactivate the GLEnv in the old thread, and
 reactivate it in the new thread."
      end

      operation 1171596 "SwapBuffers"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " When rendering to a visible surface, call this to swap between the
 offscreen and onscreen buffers. Returns true if the buffer swap was
 successful."
      end

      operation 1171724 "AddSurface"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "surface" type class_ref 190732 // EGLSurface
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Working with Surfaces ///////////////////////////////////////////////////
 Add a surface to the environment. This surface will now be managed (and
 owned) by the GLEnv instance. Returns the id of the surface."
      end

      operation 1171852 "AddWindowSurface"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 2
	  param in name "surface" type class_ref 190732 // EGLSurface
	  param inout name "window_handle" type class_ref 453644 // WindowHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add a window surface to the environment. The window is passed in as
 an opaque window handle.
 This surface will now be managed (and owned) by the GLEnv instance.
 Returns the id of the surface."
      end

      operation 1171980 "SwitchToSurfaceId"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "surface_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Switch to the surface with the specified id. This will make the surface
 active, if it is not active already. Specify an ID of 0 if you would like
 to switch to the default surface. Returns true if successful."
      end

      operation 1172108 "ReleaseSurfaceId"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "surface_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Release the surface with the specified id. This will deallocate the
 surface. If this is the active surface, the environment will switch to
 the default surface (0) first. You cannot release the default surface."
      end

      operation 1172236 "SetSurfaceTimestamp"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "timestamp" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the timestamp for the current surface. Must be called
 before swapBuffers to associate the timestamp with the frame
 resulting from swapBuffers."
      end

      operation 1172364 "FindSurfaceIdForWindow"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "window_handle" type class_ref 453644 // WindowHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Looks for a surface with the associated window handle. Returns -1 if no
 surface with such a window was found."
      end

      operation 1172492 "surface"
	const cpp_inline public return_type class_ref 190732 // EGLSurface
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return surfaces_.find(surface_id_)->second.first;
    };
"
	
	
	
	
	comment " Obtain the environment's EGL surface."
      end

      operation 1172620 "AddContext"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "context" type class_ref 190860 // EGLContext
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Working with Contexts ///////////////////////////////////////////////////
 Add a context to the environment. This context will now be managed (and
 owned) by the GLEnv instance. Returns the id of the context."
      end

      operation 1172748 "SwitchToContextId"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "context_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Switch to the context with the specified id. This will make the context
 active, if it is not active already. Specify an ID of 0 if you would like
 to switch to the default context. Returns true if successful."
      end

      operation 1172876 "ReleaseContextId"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "context_id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Release the context with the specified id. This will deallocate the
 context. If this is the active context, the environment will switch to
 the default context (0) first. You cannot release the default context."
      end

      operation 1173004 "context"
	const cpp_inline public return_type class_ref 190860 // EGLContext
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return contexts_.find(context_id_)->second;
    };
"
	
	
	
	
	comment " Obtain the environment's EGL context."
      end

      operation 1173132 "display"
	const cpp_inline public return_type class_ref 190604 // EGLDisplay
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return display_;
    };
"
	
	
	
	
	comment " Working with the Display ////////////////////////////////////////////////
 Obtain the environment's EGL display."
      end

      operation 1173260 "IsActive"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Inspecting the environment //////////////////////////////////////////////
 Returns true if the environment is active in the current thread."
      end

      operation 1173388 "IsContextActive"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns true if the environment's context is active in the curent thread."
      end

      operation 1173516 "IsAnyContextActive"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns true if there is any EGL context active in the current thread.
 This need not be a context created by a GLEnv instance."
      end

      operation 1173644 "AttachShader"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "key" explicit_type "int"
	  param inout name "shader" type class_ref 453900 // ShaderProgram
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Attaching GL objects ////////////////////////////////////////////////////
 Attach a shader to the environment. The environment takes ownership of
 the shader."
      end

      operation 1173772 "AttachVertexFrame"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "key" explicit_type "int"
	  param inout name "frame" type class_ref 454028 // VertexFrame
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Attach a vertex frame to the environment. The environment takes ownership
 of the frame."
      end

      operation 1173900 "ShaderWithKey"
	preserve_cpp_body_indent public return_type class_ref 453900 // ShaderProgram
	nparams 1
	  param in name "key" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return the shader with the specified key, or NULL if there is no such
 shader attached to this environment."
      end

      operation 1174028 "VertexFrameWithKey"
	preserve_cpp_body_indent public return_type class_ref 454028 // VertexFrame
	nparams 1
	  param in name "key" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return the vertex frame with the specified key, or NULL if there is no
 such frame attached to this environment."
      end

      operation 1174156 "CheckGLError"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "op" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Static methods //////////////////////////////////////////////////////////
 These operate on the currently active environment!
 Checks if the current environment is in a GL error state. If so, it will
 output an error message referencing the given operation string. Returns
 true if there was at least one error."
      end

      operation 1174284 "CheckEGLError"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "op" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Checks if the current environment is in an EGL error state. If so, it
 will output an error message referencing the given operation string.
 Returns true if there was at least one error."
      end

      operation 1174412 "GetCurrentProgram"
	class_operation preserve_cpp_body_indent public return_type class_ref 190220 // GLuint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Get the currently used (shader) program."
      end

      operation 1174540 "GetCurrentDisplay"
	class_operation preserve_cpp_body_indent public return_type class_ref 190604 // EGLDisplay
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Get the currently active display."
      end

      operation 1174668 "NumberOfComponents"
	class_operation preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "type" type class_ref 190348 // GLenum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns the number of components for a given GL type. For instance,
 returns 4 for vec4, and 16 for mat4."
      end

      class 454156 "SurfaceWindowPair"
	visibility package stereotype "typedef" base_type class_ref 190732 // EGLSurface
	cpp_decl "${comment}typedef std::pair<${type},WindowHandle*> ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 926604 // <dependency>
	  relation 926604 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 926604 // <dependency>
	    b parent class_ref 190732 // EGLSurface
	end
      end

      operation 1174796 "Init"
	private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Initializes a new GL environment."
      end

      operation 1174924 "IsInitialized"
	preserve_cpp_body_indent const private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns true if one of the Inits has been called successfully on this
 instance."
      end

      operation 1175052 "CheckEGLMakeCurrentError"
	class_operation preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Outputs error messages specific to the operation eglMakeCurrent().
 Returns true if there was at least one error."
      end

      classrelation 926732 // display_ (<directional composition>)
	relation 926732 *-->
	  a role_name "display_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 926732 // display_ (<directional composition>)
	  b parent class_ref 190604 // EGLDisplay
      end

      classrelation 926860 // contexts_ (<directional composition>)
	relation 926860 *-->
	  stereotype "std::map"
	  a role_name "contexts_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<int,${type}> ${name}${value};
"
	    classrelation_ref 926860 // contexts_ (<directional composition>)
	  b parent class_ref 190860 // EGLContext
      end

      classrelation 926988 // surfaces_ (<directional composition>)
	relation 926988 *-->
	  stereotype "std::map"
	  a role_name "surfaces_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<int,${type}> ${name}${value};
"
	    classrelation_ref 926988 // surfaces_ (<directional composition>)
	  b parent class_ref 454156 // SurfaceWindowPair
      end

      attribute 1052812 "context_id_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1052940 "surface_id_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 927116 // window_ (<directional composition>)
	relation 927116 *-->
	  stereotype "sp"
	  a role_name "window_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 927116 // window_ (<directional composition>)
	  b parent class_ref 175628 // ANativeWindow
      end

      attribute 1053068 "max_surface_id_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1053196 "created_context_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1053324 "created_surface_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1053452 "initialized_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 927372 // attached_shaders_ (<unidirectional association>)
	relation 927372 --->
	  stereotype "std::map"
	  a role_name "attached_shaders_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<int,${type}*> ${name}${value};
"
	    classrelation_ref 927372 // attached_shaders_ (<unidirectional association>)
	  b parent class_ref 453900 // ShaderProgram
      end

      classrelation 927500 // attached_vframes_ (<unidirectional association>)
	relation 927500 --->
	  stereotype "std::map"
	  a role_name "attached_vframes_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<int,${type}*> ${name}${value};
"
	    classrelation_ref 927500 // attached_vframes_ (<unidirectional association>)
	  b parent class_ref 454028 // VertexFrame
      end
    end

    class 453900 "ShaderProgram"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A ShaderProgram is a Program object that holds a GLSL shader implementation.
 It provides functionality for compiling, linking, and executing the shader.
 On top of that, it provides access to the shaders source code, uniforms,
 attributes, and other properties.
 By default a ShaderProgram provides its own vertex shader. However, a custom
 vertex shader may be passed and used instead.
 When implementing a vertex shader, the following attribute names have special
 meaning:

  - a_position: The vertex position
  - a_texcoord: The texture cooridnates

 The shader program will bind these attributes to the correct values, if they
 are present in the vertex shader source code.

 When implementing the fragment shader, the following variable names must be
 defined:

  - tex_sampler_<n>: The n'th input texture. For instance, use tex_sampler_0
                     for the first input texture. Must be a uniform sampler2D.
  - v_texcoord: The current texture coordinate.

 If more input textures are given than the shader can handle, this will result
 in an error."
      operation 1183244 "ShaderProgram"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param inout name "gl_env" type class_ref 453772 // GLEnv
	  param in name "fragment_shader" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "// ShaderProgram implementation ////////////////////////////////////////////////

${inline}${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}
  : fragment_shader_source_(fragment_shader),
    vertex_shader_source_(s_default_vertex_shader_source_),
    fragment_shader_(0),
    vertex_shader_(0),
    program_(0),
    gl_env_(gl_env),
    base_texture_unit_(GL_TEXTURE0),
    source_coords_(NULL),
    target_coords_(NULL),
    manage_coordinates_(false),
    tile_x_count_(1),
    tile_y_count_(1),
    vertex_count_(4),
    draw_mode_(GL_TRIANGLE_STRIP),
    clears_(false),
    blending_(false),
    sfactor_(GL_SRC_ALPHA),
    dfactor_(GL_ONE_MINUS_SRC_ALPHA) ${throw}{
  ${body}}
"
	
	
	
	
	comment " General Functionality ///////////////////////////////////////////////////
 Create a new shader program with the given fragment shader source code.
 A default vertex shader is used, which renders the input texture to a
 rectangular region of the output texture. You can modify the input and
 output regions by using the SetSourceRegion(...) and SetTargetRegion(...)
 (and related) functions below.
 This program will not be executable until you have compiled and linked
 it.
 Note, that the ShaderProgram does NOT take ownership of the GLEnv. The
 caller must make sure the GLEnv stays valid as long as the GLFrame is
 alive."
      end

      operation 1183372 "ShaderProgram"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param inout name "gl_env" type class_ref 453772 // GLEnv
	  param in name "vertex_shader" explicit_type "std::string"
	  param in name "fragment_shader" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}
  : fragment_shader_source_(fragment_shader),
    vertex_shader_source_(vertex_shader),
    fragment_shader_(0),
    vertex_shader_(0),
    program_(0),
    gl_env_(gl_env),
    base_texture_unit_(GL_TEXTURE0),
    source_coords_(NULL),
    target_coords_(NULL),
    manage_coordinates_(false),
    tile_x_count_(1),
    tile_y_count_(1),
    vertex_count_(4),
    draw_mode_(GL_TRIANGLE_STRIP),
    clears_(false),
    blending_(false),
    sfactor_(GL_SRC_ALPHA),
    dfactor_(GL_ONE_MINUS_SRC_ALPHA) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Create a new shader program with the given fragment and vertex shader
 source code. This program will not be executable until you have compiled
 and linked it.
 Note, that the ShaderProgram does NOT take ownership of the GLEnv. The
 caller must make sure the GLEnv stays valid as long as the GLFrame is
 alive."
      end

      operation 1183500 "~ShaderProgram"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Destructor."
      end

      operation 1183628 "Process"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "input" explicit_type "std::vector<const GLFrame*>"
	  param inout name "output" type class_ref 454284 // GLFrame
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Process the given input frames and write the result to the output frame.
 Returns false if there was an error processing."
      end

      operation 1183756 "Process"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "input" explicit_type "std::vector<const GLTextureHandle*>"
	  param inout name "output" type class_ref 453388 // GLFrameBufferHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Same as above, but pass GL interfaces rather than frame objects. Use this
 only if you are not working on Frame objects, but rather directly on GL
 textures and FBOs."
      end

      operation 1183884 "CompileAndLink"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Compile and link the shader source code. Returns true if compilation
 and linkage was successful. Compilation and linking error messages are
 written to the error log."
      end

      operation 1184012 "IsExecutable"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return program_ != 0;
    };
"
	
	
	
	
	comment " Returns true if this Program has been compiled and linked successfully."
      end

      operation 1184140 "IsVarValid"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "var" type class_ref 455564 // ProgramVar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns true if the shader program variable is valid."
      end

      operation 1184268 "CreateIdentity"
	class_operation preserve_cpp_body_indent public return_type class_ref 453900 // ShaderProgram
	nparams 1
	  param inout name "gl_env" type class_ref 453772 // GLEnv
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Special ShaderPrograms //////////////////////////////////////////////////
 A (compiled) shader program which assigns the sampled pixels from the
 input to the output. Note that transformations may be applied to achieve
 effects such as cropping, scaling or rotation.
 The caller takes ownership of the result!"
      end

      operation 1184396 "SetSourceRect"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	  param in name "width" explicit_type "float"
	  param in name "height" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Geometry ////////////////////////////////////////////////////////////////
 These functions modify the source and target regions used during
 rasterization. Note, that these functions will ONLY take effect if
 the default vertex shader is used, or your custom vertex shader defines
 the a_position and a_texcoord attributes.
 Set the program to read from a subregion of the input frame, given by
 the origin (x, y) and dimensions (width, height). Values are considered
 normalized between 0.0 and 1.0. If this region exceeds the input frame
 dimensions the results are undefined."
      end

      operation 1184524 "SetSourceRegion"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "quad" type class_ref 453004 // Quad
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the program to read from a subregion of the input frame, given by
 the passed Quad. Values are considered normalized between 0.0 and 1.0.
 The Quad points are expected to be in the order top-left, top-right,
 bottom-left, bottom-right.
 If this region exceeds the input frame dimensions the results are
 undefined."
      end

      operation 1184652 "SetTargetRect"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	  param in name "width" explicit_type "float"
	  param in name "height" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the program to write to a subregion of the output frame, given by
 the origin (x, y) and dimensions (width, height). Values are considered
 normalized between 0.0 and 1.0. If this region exceeds the output frame
 dimensions the image will be clipped."
      end

      operation 1184780 "SetTargetRegion"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "quad" type class_ref 453004 // Quad
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the program to write to a subregion of the output frame, given by
 the passed Quad. Values are considered normalized between 0.0 and 1.0.
 The Quad points are expected to be in the order top-left, top-right,
 bottom-left, bottom-right.
 If this region exceeds the output frame dimensions the image will be
 clipped."
      end

      operation 1184908 "MaxUniformCount"
	class_operation preserve_cpp_body_indent public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Uniform Variable access /////////////////////////////////////////////////
 Note: In order to get and set uniforms, the program must have been
 successfully compiled and linked. Otherwise, the getters will return an
 invalid ProgramVar variable (check with IsVarValid()).
 When setting values, the value type must be match the type of the uniform
 in the shader. For instance, a vector of 3 elements cannot be assigned to
 a vec2. Similarly, an integer value cannot be assigned to a float value.
 Such a type mismatch will result in failure to set the value (which will
 remain untouched). Check the return value of the setters to determine
 success.
 Returns the maximum number of uniforms supported by this implementation."
      end

      operation 1185036 "GetUniform"
	preserve_cpp_body_indent const public return_type class_ref 455564 // ProgramVar
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns a handle to the uniform with the given name, or invalid if no
 such uniform variable exists in the shader."
      end

      operation 1185164 "SetUniformValue"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the specified uniform value to the given integer value. Returns true
 if the assignment was successful."
      end

      operation 1185292 "SetUniformValue"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the specified uniform value to the given float value. Returns true
 if the assignment was successful."
      end

      operation 1185420 "SetUniformValue"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 3
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "values" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the specified uniform value to the given values. Returns true
 if the assignment was successful."
      end

      operation 1185548 "SetUniformValue"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 3
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "values" explicit_type "float"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the specified uniform value to the given values. Returns true
 if the assignment was successful."
      end

      operation 1185676 "SetUniformValue"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "values" explicit_type "std::vector<int>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the specified uniform value to the given vector value. Returns true
 if the assignment was successful."
      end

      operation 1185804 "SetUniformValue"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "values" explicit_type "std::vector<float>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the specified uniform value to the given vector value. Returns true
 if the assignment was successful."
      end

      operation 1185932 "SetUniformValue"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "value" type class_ref 455692 // Value
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Generic variable setter, which in the case of GL programs always attempts
 to set the value of a uniform variable with the given name. Only values
 of type float, float array (or vector), and int are supported."
      end

      operation 1186060 "GetUniformValue"
	preserve_cpp_body_indent public return_type class_ref 455692 // Value
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Generic variable getter, which in the case of GL programs always attempts
 to get the value of a uniform variable with the given name."
      end

      operation 1186188 "InputTextureUniformName"
	class_operation preserve_cpp_body_indent public explicit_return_type "std::string"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns the default name of the input texture uniform variable for the
 given input index."
      end

      operation 1186316 "MaxAttributeCount"
	class_operation preserve_cpp_body_indent public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Attributes //////////////////////////////////////////////////////////////////////////////////////

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Attribute access ////////////////////////////////////////////////////////
 Note: In order to get and set attributes, the program must have been
 successfully compiled and linked. Otherwise, the getters will return an
 invalid ProgramVar variable (check with IsVarValid()). Constant attribute
 values must be floats. Attribute pointers must be associated with a
 specific type, which can be any of the following:
   GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_FLOAT,
   GL_FIXED, GL_HALF_FLOAT_OES.
 When storing vertex data, it is recommended to use VertexFrames when
 possible as these will be kept in GPU memory, and no copying of vertex
 attributes between system and GPU memory needs to take place.
 Returns the maximum number of attributes supported by this
 implementation."
      end

      operation 1186444 "GetAttribute"
	preserve_cpp_body_indent const public return_type class_ref 455564 // ProgramVar
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns a handle to the attribute with the given name, or invalid if no
 such attribute exists in the vertex shader."
      end

      operation 1186572 "SetConstAttributeValue"
	public explicit_return_type "bool"
	nparams 2
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set an attribute value that will be constant for each vertex. Returns
 true if the assignment was successful."
      end

      operation 1186700 "SetConstAttributeValue"
	public explicit_return_type "bool"
	nparams 2
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "value" explicit_type "std::vector<float>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set an attribute vector value that will be constant for each vertex.
 Returns true if the assignment was successful."
      end

      operation 1186828 "SetAttributeValues"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 7
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "vbo" type class_ref 454028 // VertexFrame
	  param in name "type" type class_ref 190348 // GLenum
	  param in name "components" explicit_type "int"
	  param in name "stride" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "normalize" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set attribute values that differ across vertexes, using a VertexFrame.
 This is the recommended method of specifying vertex data, that does not
 change from iteration to iteration. The parameters are as follows:
   var: The shader variable to bind the values to.
   data: The vertex frame which holds the vertex data. This may be a
         superset of the data required for this particular vertex. Use the
         offset and stride to select the correct data portion.
   type: The type of the data values. This may differ from the type of the
         shader variables. See the normalize flag on how values are
         converted.
   components: The number of components per value. Valid values are 1-4.
   stride: The delta of one element to the next in bytes.
   offset: The offset of the first element.
   normalize: True, if not float values should be normalized to the range
              0-1, when converted to a float.
 Returns true, if the assignment was successful."
      end

      operation 1186956 "SetAttributeValues"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 7
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "data" explicit_type "uint8_t"
	  param in name "type" type class_ref 190348 // GLenum
	  param in name "components" explicit_type "int"
	  param in name "stride" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "normalize" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set attribute values that differ across vertexes, using a data buffer.
 This is the recommended method of specifying vertex data, if your data
 changes often. Note that this data may need to be copied to GPU memory
 for each render pass. Please see above for a description of the
 parameters.
 Note: The data passed here MUST be valid until all executions of this
 Program instance have been completed!"
      end

      operation 1187084 "SetAttributeValues"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 3
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "data" explicit_type "std::vector<float>"
	  param in name "components" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Convenience method for setting vertex values using a vector of floats.
 The components parameter specifies how many elements per variable should
 be assigned (The variable must be able to fit the number of components).
 It must be a value between 1 and 4.
 While this method is not as flexible as the methods above, this can be
 used when more advanced methods are not necessary. Note, that if your
 vertex data does not change, it is recommended to use a VertexFrame."
      end

      operation 1187212 "SetAttributeValues"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 4
	  param in name "var" type class_ref 455564 // ProgramVar
	  param in name "data" explicit_type "float"
	  param in name "total" explicit_type "int"
	  param in name "components" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Same as above, but using a float pointer instead of vector. Pass the
 total number of elements in total."
      end

      operation 1187340 "SetVertexCount"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " By default, rendering only uses the first 4 vertices. You should only
 adjust this value if you are providing your own vertex attributes with
 a count unequal to 4. Adjust this value before calling Process()."
      end

      operation 1187468 "TexCoordAttributeName"
	class_operation cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      static std::string s_texcoord(\"a_texcoord\");
      return s_texcoord;
    };
"
	
	
	
	
	comment " Returns the default name of the attribute used to hold the texture
 coordinates. Use this when you need to access the texture coordinate
 attribute of the shader's default vertex shader."
      end

      operation 1187596 "PositionAttributeName"
	class_operation cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      static std::string s_position(\"a_position\");
      return s_position;
    };
"
	
	
	
	
	comment " Returns the default name of the attribute used to hold the output
 coordinates. Use this when you need to access the output coordinate
 attribute of the shader's default vertex shader."
      end

      operation 1187724 "SetDrawMode"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "mode" type class_ref 190348 // GLenum
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Rendering ///////////////////////////////////////////////////////////////
 Set the draw mode, which can be any of GL_POINTS, GL_LINES,
 GL_LINE_STRIP, GL_LINE_LOOP, GL_TRIANGLES, GL_TRIANGLE_STRIP,
 GL_TRIANGLE_FAN. The default is GL_TRIANGLE_STRIP.
 Warning: Do NOT change this if you are not specifying your own vertex
 data with SetAttributeValues(...)."
      end

      operation 1187852 "BeginDraw"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " If you are doing your own drawing you should call this before beginning
 to draw. This will activate the program, push all used attributes, and
 clear the frame if requested. You do not need to call this if you are
 not doing your own GL drawing!"
      end

      operation 1187980 "RenderFrame"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "textures" explicit_type "std::vector<GLuint>"
	  param in name "targets" explicit_type "std::vector<GLenum>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Render a single frame with the given input textures. You may override
 this, if you need custom rendering behavior. However, you must take
 care of the following things when overriding:
   - Use the correct program (e.g. by calling UseProgram()).
   - Bind the given textures
   - Bind vertex attributes
   - Draw"
      end

      operation 1188108 "SetClearsOutput"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "clears" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Pass true to clear the output frame before rendering. The color used
 to clear is set in SetClearColor()."
      end

      operation 1188236 "SetClearColor"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "red" explicit_type "float"
	  param in name "green" explicit_type "float"
	  param in name "blue" explicit_type "float"
	  param in name "alpha" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the color used to clear the output frame before rendering. You
 must activate clearing by calling SetClearsOutput(true)."
      end

      operation 1188364 "SetTileCounts"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "x_count" explicit_type "int"
	  param in name "y_count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the number of tiles to split rendering into. Higher tile numbers
 will affect performance negatively, but will allow other GPU threads
 to render more frequently. Defaults to 1, 1."
      end

      operation 1188492 "SetBlendEnabled"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "enable" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      blending_ = enable;
    };
"
	
	
	
	
	comment " Enable or Disable Blending
 Set to true to enable, false to disable."
      end

      operation 1188620 "SetBlendFunc"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "sfactor" explicit_type "int"
	  param in name "dfactor" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      sfactor_ = sfactor;
      dfactor_ = dfactor;
    };
"
	
	
	
	
	comment " Specify pixel arithmetic for blending
 The values of sfactor and dfactor can be:
  GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA,
  GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA,
  GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA_SATURATE
 Default values for blending are set to:
  sfactor = GL_SRC_ALPHA
  dfactor = GL_ONE_MINUS_SRC_ALPHA"
      end

      operation 1188748 "UseProgram"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Accessing the Compiled Program //////////////////////////////////////////
 Use the compiled and linked program for rendering. You should not need
 to call this, unless you are implementing your own rendering method."
      end

      operation 1188876 "MaxVaryingCount"
	class_operation preserve_cpp_body_indent public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Other Properties ////////////////////////////////////////////////////////
 Returns the maximum number of varyings supported by this implementation."
      end

      operation 1189004 "MaxTextureUnits"
	class_operation preserve_cpp_body_indent public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns the maximum number of texture units supported by this
 implementation."
      end

      operation 1189132 "CompileShader"
	class_operation preserve_cpp_body_indent public return_type class_ref 190220 // GLuint
	nparams 2
	  param in name "shader_type" type class_ref 190348 // GLenum
	  param in name "source" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Lower level functionality ///////////////////////////////////////////////
 Compile the shader with the given source. The shader_type must be either
 GL_VERTEX_SHADER or GL_FRAGMENT_SHADER."
      end

      operation 1189260 "LinkProgram"
	class_operation preserve_cpp_body_indent public return_type class_ref 190220 // GLuint
	nparams 2
	  param inout name "shaders" type class_ref 190220 // GLuint
	  param in name "count" type class_ref 190220 // GLuint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Link the compiled shader objects and return the resulting program."
      end

      operation 1189388 "BaseTextureUnit"
	const cpp_inline public return_type class_ref 190220 // GLuint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return base_texture_unit_;
    };
"
	
	
	
	
	comment " Returns the lowest texture unit that will be used to bind textures."
      end

      operation 1189516 "SetBaseTextureUnit"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "texture_unit" type class_ref 190220 // GLuint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      base_texture_unit_ = texture_unit;
    };
"
	
	
	
	
	comment " Sets the lowest texture unit that will be used to bind textures. The
 default value is GL_TEXTURE0."
      end

      class 455820 "VertexAttrib"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1055756 "is_const"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1055884 "index"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1056012 "normalized"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1056140 "stride"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1056268 "components"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1056396 "offset"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 929548 // type (<directional composition>)
	  relation 929548 *-->
	    a role_name "type" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 929548 // type (<directional composition>)
	    b parent class_ref 190348 // GLenum
	end

	classrelation 929676 // vbo (<directional composition>)
	  relation 929676 *-->
	    a role_name "vbo" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 929676 // vbo (<directional composition>)
	    b parent class_ref 190220 // GLuint
	end

	attribute 1056524 "values"
	  const_attribute public explicit_type "void"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1056652 "owned_data"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1189644 "VertexAttrib"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "// VertexAttrib implementation /////////////////////////////////////////////////

${inline}${class}::${name}${(}${)}
  : is_const(true),
    index(-1),
    normalized(false),
    stride(0),
    components(0),
    offset(0),
    type(GL_FLOAT),
    vbo(0),
    values(NULL),
    owned_data(NULL) ${throw}{
  ${body}}
"
	  
	  
	  
	  
	end
      end

      class 455948 "VertexAttribMap"
	visibility package stereotype "typedef" base_type class_ref 455564 // ProgramVar
	cpp_decl "${comment}typedef std::map<${type},VertexAttrib> ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 929804 // <dependency>
	  relation 929804 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 929804 // <dependency>
	    b parent class_ref 455564 // ProgramVar
	end
      end

      class 456076 "RGBAColor"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1056780 "red"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1056908 "green"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1057036 "blue"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1057164 "alpha"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1189772 "RGBAColor"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : red(0), green(0), blue(0), alpha(1) {
      };
"
	  
	  
	  
	  
	end
      end

      operation 1189900 "ScanUniforms"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Scans for all uniforms in the shader and creates index -> id map."
      end

      operation 1190028 "IndexOfUniform"
	preserve_cpp_body_indent private return_type class_ref 190220 // GLuint
	nparams 1
	  param in name "var" type class_ref 455564 // ProgramVar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns the index of the given uniform. The caller must make sure
 that the variable id passed is valid."
      end

      operation 1190156 "BindInputTextures"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 2
	  param in name "textures" explicit_type "std::vector<GLuint>"
	  param in name "targets" explicit_type "std::vector<GLenum>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Binds the given input textures."
      end

      operation 1190284 "SetDefaultCoords"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sets the default source and target coordinates."
      end

      operation 1190412 "PushCoords"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 2
	  param in name "attr" type class_ref 455564 // ProgramVar
	  param inout name "coords" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Pushes the specified coordinates to the shader attribute."
      end

      operation 1190540 "PushSourceCoords"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param inout name "coords" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Pushes the source coordinates."
      end

      operation 1190668 "PushTargetCoords"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param inout name "coords" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Pushes the target coordinates."
      end

      operation 1190796 "Draw"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Performs (simple) GL drawing."
      end

      operation 1190924 "DrawTiled"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Performs tiled GL drawing."
      end

      operation 1191052 "Yield"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Yields to other GPU threads."
      end

      operation 1191180 "CheckValueCount"
	class_operation preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 5
	  param in name "var_type" explicit_type "std::string"
	  param in name "var_name" explicit_type "std::string"
	  param in name "expected_count" explicit_type "int"
	  param in name "components" explicit_type "int"
	  param in name "value_size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Variable Value Setting Helpers //////////////////////////////////////////////

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Helper method to assert that the variable value passed has the correct
 total size."
      end

      operation 1191308 "CheckValueMult"
	class_operation preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 4
	  param in name "var_type" explicit_type "std::string"
	  param in name "var_name" explicit_type "std::string"
	  param in name "components" explicit_type "int"
	  param in name "value_size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Helper method to assert that the variable value passed has a size, that
 is compatible with the type size (must be divisible)."
      end

      operation 1191436 "CheckVarValid"
	class_operation preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param in name "var" type class_ref 455564 // ProgramVar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Checks that the variable is valid. Logs an error and returns false if
 not."
      end

      operation 1191564 "CheckUniformValid"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param in name "var" type class_ref 455564 // ProgramVar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Uniforms ////////////////////////////////////////////////////////////////////

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns true if the uniform specified by var is an active uniform in the
 program."
      end

      operation 1191692 "StoreAttribute"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param in name "attrib" type class_ref 455820 // VertexAttrib
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Store an attribute to use when rendering."
      end

      operation 1191820 "PushAttributes"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Push all assigned attributes before rendering."
      end

      operation 1191948 "PopAttributes"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Pop all assigned attributes after rendering."
      end

      attribute 1057292 "fragment_shader_source_"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1057420 "vertex_shader_source_"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 929932 // fragment_shader_ (<directional composition>)
	relation 929932 *-->
	  a role_name "fragment_shader_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 929932 // fragment_shader_ (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end

      classrelation 930060 // vertex_shader_ (<directional composition>)
	relation 930060 *-->
	  a role_name "vertex_shader_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 930060 // vertex_shader_ (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end

      classrelation 930188 // program_ (<directional composition>)
	relation 930188 *-->
	  a role_name "program_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 930188 // program_ (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end

      classrelation 930316 // gl_env_ (<unidirectional association>)
	relation 930316 --->
	  a role_name "gl_env_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 930316 // gl_env_ (<unidirectional association>)
	  b parent class_ref 453772 // GLEnv
      end

      classrelation 930444 // base_texture_unit_ (<directional composition>)
	relation 930444 *-->
	  a role_name "base_texture_unit_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 930444 // base_texture_unit_ (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end

      attribute 1057548 "source_coords_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1057676 "target_coords_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1057804 "manage_coordinates_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1057932 "tile_x_count_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1058060 "tile_y_count_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 930572 // attrib_values_ (<directional composition>)
	relation 930572 *-->
	  a role_name "attrib_values_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 930572 // attrib_values_ (<directional composition>)
	  b parent class_ref 455948 // VertexAttribMap
      end

      attribute 1058188 "vertex_count_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 930700 // draw_mode_ (<directional composition>)
	relation 930700 *-->
	  a role_name "draw_mode_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 930700 // draw_mode_ (<directional composition>)
	  b parent class_ref 190348 // GLenum
      end

      attribute 1058316 "clears_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 930828 // clear_color_ (<directional composition>)
	relation 930828 *-->
	  a role_name "clear_color_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 930828 // clear_color_ (<directional composition>)
	  b parent class_ref 456076 // RGBAColor
      end

      attribute 1058444 "blending_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1058572 "sfactor_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1058700 "dfactor_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 930956 // uniform_indices_ (<directional composition>)
	relation 930956 *-->
	  stereotype "std::map"
	  a role_name "uniform_indices_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type},GLuint> ${name}${value};
"
	    classrelation_ref 930956 // uniform_indices_ (<directional composition>)
	  b parent class_ref 455564 // ProgramVar
      end
    end

    class 454028 "VertexFrame"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A VertexFrame stores vertex attribute data in a VBO. Unlike other frames,
 you often create instances of VertexFrame yourself, to pass vertex data to
 a ShaderProgram. Note, that any kind of reading from VertexFrames is NOT
 supported. Once data is uploaded to a VertexFrame, it cannot be read from
 again."
      operation 1195020 "VertexFrame"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}
  : vbo_(0),
    size_(size) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Create a VertexFrame of the specified size (in bytes)."
      end

      operation 1195148 "~VertexFrame"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1195276 "WriteData"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "data" explicit_type "uint8_t"
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Upload the given data to the vertex buffer. The size must match the size
 passed in the constructor for the first upload. Subsequent uploads must
 be able to fit within the allocated space (i.e. size must not exceed the
 frame's size)."
      end

      operation 1195404 "Size"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " The size of the vertex buffer in bytes."
      end

      operation 1195532 "GetVboId"
	const cpp_inline public return_type class_ref 190220 // GLuint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return vbo_;
    };
"
	
	
	
	
	comment " Return the id of the internal VBO. Returns 0 if no VBO has been
 generated yet. The internal VBO is generated the first time data is
 uploaded."
      end

      operation 1195660 "HasBuffer"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return vbo_ != 0;
    };
"
	
	
	
	
	comment " Returns true if the frame contains an allocated VBO."
      end

      operation 1195788 "CreateBuffer"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Create the VBO"
      end

      operation 1195916 "HasVBO"
	const cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return vbo_ != 0;
    };
"
	
	
	
	
	comment " Returns true if the VBO has been created."
      end

      classrelation 931340 // vbo_ (<directional composition>)
	relation 931340 *-->
	  a role_name "vbo_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 931340 // vbo_ (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end

      attribute 1061260 "size_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 454284 "GLFrame"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A GLFrame stores pixel data on the GPU. While pixel data may be uploaded to
 a GLFrame and also read out of a GLFrame (access in place is not supported),
 it is strongly recommended to use ShaderProgram objects for any kind of
 processing from one GLFrame to another."
      classrelation 927628 // <generalisation>
	relation 927628 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 927628 // <generalisation>
	  b parent class_ref 453516 // GLBufferHandle
      end

      operation 1175180 "GLFrame"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "gl_env" type class_ref 453772 // GLEnv
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// A GLFrame stores pixel data on the GPU. It uses two kinds of GL data
// containers for this: Textures and Frame Buffer Objects (FBOs). Textures are
// used whenever pixel data needs to be read into a shader or the host program,
// and when pixel data is uploaded to a GLFrame. The FBO is used as a rendering
// target for shaders.

${inline}${class}::${name}${(}${t0} * ${p0}${)}
  : gl_env_(gl_env),
    width_(0),
    height_(0),
    vp_x_(0),
    vp_y_(0),
    vp_width_(0),
    vp_height_(0),
    texture_id_(0),
    fbo_id_(0),
    texture_target_(GL_TEXTURE_2D),
    texture_state_(kStateUninitialized),
    fbo_state_(kStateUninitialized),
    owns_texture_(false),
    owns_fbo_(false) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Create an empty GL frame in the specified GL environment. Note, that the GLFrame does NOT
 take ownership. The caller must make sure the GLEnv stays valid as long as the GLFrame is
 alive."
      end

      operation 1175308 "~GLFrame"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Deallocate a GL frame."
      end

      operation 1175436 "Init"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Initialize a GL frame to the given width, height, format. Also specify
 whether this is a read-only GL frame or not."
      end

      operation 1175564 "InitWithExternalTexture"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Initialize as using an external texture."
      end

      operation 1175692 "InitWithTexture"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 3
	  param in name "texture_id" type class_ref 191116 // GLint
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Initialize using an existing texture."
      end

      operation 1175820 "InitWithFbo"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 3
	  param in name "fbo_id" type class_ref 191116 // GLint
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Initialize using an existing FBO."
      end

      operation 1175948 "WriteData"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "data" explicit_type "uint8_t"
	  param in name "data_size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Write the data with the given size in bytes to the frame. The frame size must match the
 size of the data."
      end

      operation 1176076 "CopyDataTo"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param inout name "buffer" explicit_type "uint8_t"
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Copies the frame data to the given buffer."
      end

      operation 1176204 "CopyPixelsFrom"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "frame" type class_ref 454284 // GLFrame
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Copies the pixels from another GL frame to this frame."
      end

      operation 1176332 "Size"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns the size of the buffer in bytes."
      end

      operation 1176460 "Clone"
	preserve_cpp_body_indent const public return_type class_ref 454284 // GLFrame
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Clone the current frame by creating a new GL frame and copying all data to it."
      end

      operation 1176588 "GetTextureId"
	preserve_cpp_body_indent const public return_type class_ref 190220 // GLuint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns the held texture id. Only call this if the GLFrame holds a
 texture. You can check this by calling HoldsTexture().
 Note, that a texture is created only when needed. If you are creating a
 new GLFrame, and you need it to be bound to a texture, upload (zeroed)
 data to it first, before calling this method."
      end

      operation 1176716 "GetFboId"
	preserve_cpp_body_indent const public return_type class_ref 190220 // GLuint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns the held FBO id. Only call this if the GLFrame holds an FBO. You
 can check this by calling HoldsFbo()."
      end

      operation 1176844 "GetTextureTarget"
	const cpp_inline public return_type class_ref 190220 // GLuint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return texture_target_;
    };
"
	
	
	
	
	comment " Returns the texture target: GL_TEXTURE_2D or GL_TEXTURE_EXTERNAL_OES."
      end

      operation 1176972 "SetViewport"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 4
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the viewport that will be used when focusing this frame for rendering. Defaults to
 the dimensions of the frame."
      end

      operation 1177100 "FocusTexture"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Binds the held texture. This may result in creating the texture if it
 is not yet available."
      end

      operation 1177228 "FocusFrameBuffer"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Binds the held FBO. This may result in creating the FBO if it
 is not yet available."
      end

      operation 1177356 "GenerateMipMap"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Generates the mipmap chain of the held texture. Returns true, iff
 generating was successful."
      end

      operation 1177484 "SetTextureParameter"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "pname" type class_ref 190348 // GLenum
	  param in name "value" type class_ref 191116 // GLint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set a texture parameter (see glTextureParameter documentation). Returns
 true iff the parameter was set successfully."
      end

      operation 1177612 "ResetTexParameters"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Reset any modifed texture parameters."
      end

      operation 1177740 "DetachTextureFromFbo"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Detaches the internal texture from the FBO."
      end

      operation 1177868 "ReattachTextureToFbo"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Reattaches the internal texture to the FBO after detachment."
      end

      class 454412 "GLObjectState"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1053580 "kStateUnmanaged"
	  public type class_ref 454412 // GLObjectState
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1053708 "kStateUninitialized"
	  public type class_ref 454412 // GLObjectState
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1053836 "kStateGenerated"
	  public type class_ref 454412 // GLObjectState
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1053964 "kStateComplete"
	  public type class_ref 454412 // GLObjectState
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1177996 "InitDimensions"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sets the frame and viewport dimensions."
      end

      operation 1178124 "GenerateTextureName"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Generates the internal texture name."
      end

      operation 1178252 "AllocateTexture"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Allocates the internal texture."
      end

      operation 1178380 "GenerateFboName"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Creates the internal FBO."
      end

      operation 1178508 "CopyPixelsTo"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param inout name "buffer" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Copies pixels from texture or FBO to the specified buffer."
      end

      operation 1178636 "ReadTexturePixels"
	preserve_cpp_body_indent const private explicit_return_type "bool"
	nparams 1
	  param inout name "pixels" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Reads the pixels from the internal texture to the given buffer."
      end

      operation 1178764 "ReadFboPixels"
	preserve_cpp_body_indent const private explicit_return_type "bool"
	nparams 1
	  param inout name "pixels" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Reads the pixels from the internal FBO to the given buffer."
      end

      operation 1178892 "UploadTexturePixels"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param in name "pixels" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Writes the specified pixels to the internal texture."
      end

      operation 1179020 "BindTexture"
	preserve_cpp_body_indent const private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Binds the internal texture."
      end

      operation 1179148 "BindFrameBuffer"
	preserve_cpp_body_indent const private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Binds the internal FBO."
      end

      operation 1179276 "AttachTextureToFbo"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Attaches the internal texture to the internal FBO."
      end

      operation 1179404 "UpdateTexParameters"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Update the texture parameters to the user specified parameters"
      end

      operation 1179532 "TexParametersModifed"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns true if the current texture parameters are not the GLES2
 default parameters."
      end

      operation 1179660 "SetDefaultTexParameters"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sets the current texture parameters to the GLES2 default
 parameters. This still requires a call to UpdateTexParameters()
 for the changes to take effect."
      end

      operation 1179788 "TextureWasDeleted"
	preserve_cpp_body_indent const private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns true if the texture we assume to be allocated has been
 deleted externally. In this case we assume the texture name is
 still valid (otherwise we were provided with a bad texture id)."
      end

      operation 1179916 "GetIdentity"
	preserve_cpp_body_indent const private return_type class_ref 453900 // ShaderProgram
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Get the (cached) identity shader."
      end

      classrelation 927756 // gl_env_ (<unidirectional association>)
	relation 927756 --->
	  a role_name "gl_env_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 927756 // gl_env_ (<unidirectional association>)
	  b parent class_ref 453772 // GLEnv
      end

      attribute 1054092 "width_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1054220 "height_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1054348 "vp_x_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1054476 "vp_y_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1054604 "vp_width_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1054732 "vp_height_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 927884 // texture_id_ (<directional composition>)
	relation 927884 *-->
	  a role_name "texture_id_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 927884 // texture_id_ (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end

      classrelation 928012 // fbo_id_ (<directional composition>)
	relation 928012 *-->
	  a role_name "fbo_id_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 928012 // fbo_id_ (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end

      classrelation 928140 // texture_target_ (<directional composition>)
	relation 928140 *-->
	  a role_name "texture_target_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 928140 // texture_target_ (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end

      classrelation 928268 // texture_state_ (<directional composition>)
	relation 928268 *-->
	  a role_name "texture_state_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 928268 // texture_state_ (<directional composition>)
	  b parent class_ref 454412 // GLObjectState
      end

      classrelation 928396 // fbo_state_ (<directional composition>)
	relation 928396 *-->
	  a role_name "fbo_state_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 928396 // fbo_state_ (<directional composition>)
	  b parent class_ref 454412 // GLObjectState
      end

      classrelation 928524 // tex_params_ (<directional composition>)
	relation 928524 *-->
	  stereotype "std::map"
	  a role_name "tex_params_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type},GLint> ${name}${value};
"
	    classrelation_ref 928524 // tex_params_ (<directional composition>)
	  b parent class_ref 190348 // GLenum
      end

      attribute 1054860 "owns_texture_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1054988 "owns_fbo_"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 454540 "NativeFrame"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A NativeFrame stores data in a memory buffer (on the heap). It is used for
 data processing on the CPU."
      operation 1180044 "NativeFrame"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)} : data_(NULL), size_(size), capacity_(size) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Create an empty native frame."
      end

      operation 1180172 "~NativeFrame"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1180300 "SetData"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param inout name "data" explicit_type "uint8_t"
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set the frame data and size in bytes. The NativeFrame object takes ownership of the data.
 To copy data into an existing frame, use WriteData()."
      end

      operation 1180428 "WriteData"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 3
	  param in name "data" explicit_type "uint8_t"
	  param in name "offset" explicit_type "int"
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Write the specified data of the given size to the frame at the specified offset. The
 receiver must be large enough to hold the data."
      end

      operation 1180556 "Data"
	const cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return data_;
    };
"
	
	
	
	
	comment " Returns a pointer to the data, or NULL if no data was set."
      end

      operation 1180684 "MutableData"
	cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return data_;
    };
"
	
	
	
	
	comment " Returns a non-const pointer to the data, or NULL if no data was set."
      end

      operation 1180812 "Resize"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "newSize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Resize the frame. You can only resize to a size that fits within the frame's capacity.
 Returns true if the resize was successful."
      end

      operation 1180940 "Size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return size_;
    };
"
	
	
	
	
	comment " Returns the size of the frame in bytes."
      end

      operation 1181068 "Capacity"
	cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return capacity_;
    };
"
	
	
	
	
	comment " Returns the capacity of the frame in bytes."
      end

      operation 1181196 "Clone"
	preserve_cpp_body_indent const public return_type class_ref 454540 // NativeFrame
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns a new native frame"
      end

      attribute 1055116 "data_"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1055244 "size_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1055372 "capacity_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 454668 "InitFunctionPtr"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(void**);
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 454796 "SetValueFunctionPtr"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(const char*, const char*, void*);
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 454924 "GetValueFunctionPtr"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(const char*, char*, int, void*);
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 455052 "ProcessFunctionPtr"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(const char**, const int*, int, char*, int, void*);
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 455180 "ResetFunctionPtr"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(void*);
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 455308 "TeardownFunctionPtr"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(void*);
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 455436 "NativeProgram"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1181324 "NativeProgram"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : lib_handle_(NULL),
      init_function_(NULL),
      setvalue_function_(NULL),
      getvalue_function_(NULL),
      process_function_(NULL),
      reset_function_(NULL),
      teardown_function_(NULL),
      user_data_(NULL) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Create an empty native frame."
      end

      operation 1181452 "~NativeProgram"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1181580 "OpenLibrary"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "lib_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1181708 "BindInitFunction"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "func_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1181836 "BindSetValueFunction"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "func_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1181964 "BindGetValueFunction"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "func_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1182092 "BindProcessFunction"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "func_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1182220 "BindResetFunction"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "func_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1182348 "BindTeardownFunction"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "func_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1182476 "CallInit"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1182604 "CallSetValue"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "key" explicit_type "std::string"
	  param in name "value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1182732 "CallGetValue"
	preserve_cpp_body_indent public explicit_return_type "std::string"
	nparams 1
	  param in name "key" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1182860 "CallProcess"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 4
	  param in name "inputs" explicit_type "std::vector<const char*>"
	  param in name "input_sizes" explicit_type "std::vector<int>"
	  param inout name "output" explicit_type "char"
	  param in name "output_size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1182988 "CallReset"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1183116 "CallTeardown"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1055500 "lib_handle_"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 928652 // init_function_ (<directional composition>)
	relation 928652 *-->
	  a role_name "init_function_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 928652 // init_function_ (<directional composition>)
	  b parent class_ref 454668 // InitFunctionPtr
      end

      classrelation 928780 // setvalue_function_ (<directional composition>)
	relation 928780 *-->
	  a role_name "setvalue_function_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 928780 // setvalue_function_ (<directional composition>)
	  b parent class_ref 454796 // SetValueFunctionPtr
      end

      classrelation 928908 // getvalue_function_ (<directional composition>)
	relation 928908 *-->
	  a role_name "getvalue_function_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 928908 // getvalue_function_ (<directional composition>)
	  b parent class_ref 454924 // GetValueFunctionPtr
      end

      classrelation 929036 // process_function_ (<directional composition>)
	relation 929036 *-->
	  a role_name "process_function_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 929036 // process_function_ (<directional composition>)
	  b parent class_ref 455052 // ProcessFunctionPtr
      end

      classrelation 929164 // reset_function_ (<directional composition>)
	relation 929164 *-->
	  a role_name "reset_function_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 929164 // reset_function_ (<directional composition>)
	  b parent class_ref 455180 // ResetFunctionPtr
      end

      classrelation 929292 // teardown_function_ (<directional composition>)
	relation 929292 *-->
	  a role_name "teardown_function_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 929292 // teardown_function_ (<directional composition>)
	  b parent class_ref 455308 // TeardownFunctionPtr
      end

      attribute 1055628 "user_data_"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 455564 "ProgramVar"
      visibility package stereotype "typedef" base_type class_ref 191116 // GLint
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 929420 // <dependency>
	relation 929420 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 929420 // <dependency>
	  b parent class_ref 191116 // GLint
      end
    end

    class 456204 "IncrementalGaussian"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " An incrementally-constructed Normal distribution."
      operation 1192076 "IncrementalGaussian"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : n_(0),
      sum_x_(0.0f),
      sum_x2_(0.0f),
      mean_(0.0f),
      var_(0.0f),
      exp_denom_(0.0f),
      pdf_denom_(0.0f) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1192204 "Add"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1192332 "NumSamples"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return n_; };
"
	
	
	
	
      end

      operation 1192460 "Mean"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mean_; };
"
	
	
	
	
      end

      operation 1192588 "Var"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_; };
"
	
	
	
	
      end

      operation 1192716 "Std"
	preserve_cpp_body_indent const public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1192844 "Pdf"
	preserve_cpp_body_indent const public explicit_return_type "float"
	nparams 1
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1058828 "n_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1058956 "sum_x_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1059084 "sum_x2_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1059212 "mean_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1059340 "var_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1059468 "exp_denom_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1059596 "pdf_denom_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 456332 "RCFilter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Discrete-time implementation of a simple RC low-pass filter:
 exponentially-weighted moving average."
      operation 1192972 "RCFilter"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "gain" explicit_type "float"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : gain_(gain), n_(0), value_(0.0f) {};
"
	
	
	
	
      end

      operation 1193100 "Add"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "measurement" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    value_ = n_++ ? gain_ * measurement + (1.0f - gain_) * value_ : measurement;
  };
"
	
	
	
	
      end

      operation 1193228 "Reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { n_ = 0; };
"
	
	
	
	
      end

      operation 1193356 "NumMeasurements"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return n_; };
"
	
	
	
	
      end

      operation 1193484 "Output"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value_; };
"
	
	
	
	
      end

      attribute 1059724 "gain_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1059852 "n_"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1059980 "value_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 456460 "NamedStopWatch"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 931084 // <generalisation>
	relation 931084 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 931084 // <generalisation>
	  b parent class_ref 140044 // RefBase
      end

      attribute 1060108 "kDefaultLoggingPeriodInFrames"
	class_attribute const_attribute public explicit_type "uint64_t"
	init_value "= 100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1193612 "NamedStopWatch"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1193740 "Start"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1193868 "Stop"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1193996 "SetName"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mName = name; };
"
	
	
	
	
      end

      operation 1194124 "SetLoggingPeriodInFrames"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "numFrames" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mLoggingPeriodInFrames = numFrames;
    };
"
	
	
	
	
      end

      operation 1194252 "Name"
	const cpp_inline public explicit_return_type "string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mName; };
"
	
	
	
	
      end

      operation 1194380 "NumCalls"
	const cpp_inline public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mNumCalls; };
"
	
	
	
	
      end

      operation 1194508 "TotalUSec"
	const cpp_inline public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mTotalUSec; };
"
	
	
	
	
      end

      attribute 1060236 "mName"
	private explicit_type "string"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1060364 "mLoggingPeriodInFrames"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1060492 "mStartUSec"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1060620 "mNumCalls"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1060748 "mTotalUSec"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 456588 "ScopedTimer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1194636 "ScopedTimer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "stop_watch_name" explicit_type "string"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// namespace

${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1194764 "ScopedTimer"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "watch" type class_ref 456460 // NamedStopWatch
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : mWatch(watch) { mWatch->Start(); };
"
	
	
	
	
      end

      operation 1194892 "~ScopedTimer"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { mWatch->Stop(); };
"
	
	
	
	
      end

      classrelation 931212 // mWatch (<unidirectional association>)
	relation 931212 --->
	  a role_name "mWatch" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 931212 // mWatch (<unidirectional association>)
	  b parent class_ref 456460 // NamedStopWatch
      end
    end
  end

  deploymentview 145804 "core"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 209932 "geometry"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 452876 // Point
	class_ref 453004 // Quad
	class_ref 453132 // Rect
      end
    end

    artifact 210060 "gl_buffer_interface"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 453260 // GLTextureHandle
	class_ref 453388 // GLFrameBufferHandle
	class_ref 453516 // GLBufferHandle
      end
    end

    artifact 210188 "gl_env"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 453644 // WindowHandle
	class_ref 453772 // GLEnv
      end
    end

    artifact 210316 "gl_frame"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 454284 // GLFrame
      end
    end

    artifact 210444 "native_frame"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 454540 // NativeFrame
      end
    end

    artifact 210572 "native_program"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 454668 // InitFunctionPtr
	class_ref 454796 // SetValueFunctionPtr
	class_ref 454924 // GetValueFunctionPtr
	class_ref 455052 // ProcessFunctionPtr
	class_ref 455180 // ResetFunctionPtr
	class_ref 455308 // TeardownFunctionPtr
	class_ref 455436 // NativeProgram
      end
    end

    artifact 210700 "shader_program"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 455564 // ProgramVar
	class_ref 453900 // ShaderProgram
      end
    end

    artifact 210828 "statistics"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 456204 // IncrementalGaussian
	class_ref 456332 // RCFilter
      end
    end

    artifact 210956 "time_util"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 456460 // NamedStopWatch
	class_ref 456588 // ScopedTimer
      end
    end

    artifact 211212 "vertex_frame"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 454028 // VertexFrame
      end
    end
  end

  package_ref 158220 // core
end
