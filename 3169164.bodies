class MyPreferenceFragment
!!!13443724.java!!!	onCreate(inout savedInstanceState : Bundle) : void
            super.onCreate(savedInstanceState);
            mDataProvider = ((LauncherApp) getActivity().getApplication()).getDataProvider();
            mPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
            setupExtraInfos();
            addPreferencesFromResource(R.xml.launcher_settings);
            loadBootItem();
            loadHideAppsList();
            loadRestoreDefaults();
!!!13443852.java!!!	onSaveInstanceState(inout outState : Bundle) : void
            // Don't bother saving state for this fragment due to dynamic loading.
!!!13443980.java!!!	loadBootItem() : void
            final ListPreference startupItems = (ListPreference) findPreference(PREF_BOOT_ITEM_KEY);
            Intent savedBootIntent = PreferenceUtils.getBootIntent(getActivity()
                    .getContentResolver());
            final Intent bootIntent = savedBootIntent != null ?
                    savedBootIntent : mDefaultBootItemInfo.getIntent();
            startupItems.setValue(bootIntent.toUri(Intent.URI_INTENT_SCHEME));
            startupItems.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
                @Override
                public boolean onPreferenceChange(Preference preference, Object newValue) {
                    if (!preference.isEnabled() || getActivity() == null) {
                        return false;
                    }
                    try {
                        Intent intent = Intent.parseUri(newValue.toString(),
                                Intent.URI_INTENT_SCHEME);
                        PreferenceUtils.setBootIntent(getActivity().getContentResolver(), intent);
                        return true;
                    } catch (URISyntaxException e) {
                        return false;
                    }
                }
            });
            ItemLoaderTask task = new ItemLoaderTask(DataType.BOOT_ITEMS) {
                @Override
                protected void onPreExecute() {
                    super.onPreExecute();
                    startupItems.setEnabled(false);
                }

                @Override
                protected void onPostExecute(List<LauncherItemInfo> result) {
                    super.onPostExecute(result);
                    if (result != null) {
                        setStartupListPreferenceItems(startupItems, result, bootIntent);
                        startupItems.setEnabled(true);
                    }
                }
            };
            task.execute();
!!!13444108.java!!!	loadHideAppsList() : void
            final MultiSelectListPreference appsPreference =
                    (MultiSelectListPreference) findPreference(PREF_HIDE_APPS_LIST_KEY);
            final OnPreferenceChangeListener listener = new OnPreferenceChangeListener() {
                @SuppressWarnings("unchecked")
                @Override
                public boolean onPreferenceChange(Preference preference, Object newValue) {
                    Set<String> newValues = (Set<String>) newValue;
                    Set<String> realNewValues = new HashSet<String>();
                    for (CharSequence intentUri : appsPreference.getEntryValues()) {
                        if (!newValues.contains(intentUri)) {
                            realNewValues.add(intentUri.toString());
                        }
                    }
                    PreferenceUtils.setHiddenApps(mPreferences, realNewValues);
                    // Reload the list rather than relying on multiselect list preference since
                    // we are using it in a non standard fashion.
                    loadHideAppsList();
                    return false;
                }
            };
            ItemLoaderTask task = new ItemLoaderTask(DataType.APPLICATION_LIST) {

                @Override
                protected void onPreExecute() {
                    super.onPreExecute();
                    appsPreference.setEnabled(false);
                }

                @Override
                protected void onPostExecute(List<LauncherItemInfo> result) {
                    super.onPostExecute(result);
                    if (result != null) {
                        ArrayList<CharSequence> entries = new ArrayList<CharSequence>(
                                result.size());
                        ArrayList<String> entryValues = new ArrayList<String>(result.size());
                        Set<String> setValues = new HashSet<String>();
                        for (LauncherItemInfo item : result) {
                            entries.add(item.getTitle());
                            String intentUri = item.getIntent().toUri(Intent.URI_INTENT_SCHEME);
                            entryValues.add(intentUri);
                            if (!PreferenceUtils.isAppHidden(mPreferences, intentUri)) {
                                setValues.add(intentUri);
                            }
                        }
                        appsPreference.setEntries(entries.toArray(new CharSequence[] {}));
                        appsPreference.setEntryValues(entryValues.toArray(new String[] {}));
                        appsPreference.setOnPreferenceChangeListener(null);
                        appsPreference.setValues(setValues);
                        // Set listener after setting the default state.
                        appsPreference.setOnPreferenceChangeListener(listener);
                        appsPreference.setEnabled(true);
                    }
                }
            };
            task.execute();
!!!13444236.java!!!	setupExtraInfos() : void
            String bootIntentUri = getString(R.string.default_boot_intent_uri);
            boolean bootIntentIsHome = TextUtils.isEmpty(bootIntentUri);
            Intent shortcutIntent;
            Intent createIntent;
            ShortcutIconResource iconResource = ShortcutIconResource.fromContext(getActivity(),
                    R.drawable.app_icon);
            if (bootIntentIsHome) {
                shortcutIntent = new Intent(Intent.ACTION_MAIN)
                        .addCategory(Intent.CATEGORY_HOME);
            } else {
                shortcutIntent = new Intent(Intent.ACTION_VIEW,
                        Uri.parse(getString(R.string.default_boot_intent_uri)));
            }
            createIntent = new Intent(Intent.ACTION_CREATE_SHORTCUT);
            createIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,
                    getString(R.string.settings_boot_intent_default));
            createIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, shortcutIntent);
            createIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, iconResource);
            mDefaultBootItemInfo = ShortcutInfo.fromIntent(createIntent);

            if (!bootIntentIsHome) {
                shortcutIntent = new Intent(Intent.ACTION_MAIN)
                        .addCategory(Intent.CATEGORY_HOME);
                createIntent = new Intent(Intent.ACTION_CREATE_SHORTCUT);
                createIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,
                        getString(R.string.settings_boot_intent_none));
                createIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, shortcutIntent);
                createIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, iconResource);
                mNoBootItemInfo = ShortcutInfo.fromIntent(createIntent);
            }
!!!13444364.java!!!	setStartupListPreferenceItems(inout preference : ListPreference, inout items : List<LauncherItemInfo>, inout initialValue : Intent) : void
            ArrayList<CharSequence> entries = new ArrayList<CharSequence>(items.size());
            ArrayList<String> entryValues = new ArrayList<String>(items.size());
            int foundIndex = -1;
            for (int index = 0; index < items.size(); ++index) {
                LauncherItemInfo item = items.get(index);
                entries.add(item.getTitle());
                entryValues.add(item.getIntent().toUri(Intent.URI_INTENT_SCHEME));
                if (item.getIntent().filterEquals(initialValue)) {
                    foundIndex = index;
                }
            }
            preference.setEntries(entries.toArray(new CharSequence[] {}));
            preference.setEntryValues(entryValues.toArray(new String[] {}));
            if (foundIndex != -1) {
                preference.setValueIndex(foundIndex);
            }
!!!13444492.java!!!	loadRestoreDefaults() : void
            final Preference restoreDefaults = findPreference(PREF_RESTORE_DEFAULTS);
            ItemLoaderTask task = new ItemLoaderTask(DataType.SHORTCUTS) {

                @Override
                protected void onPreExecute() {
                    super.onPreExecute();
                    restoreDefaults.setEnabled(false);
                }

                @Override
                protected void onPostExecute(List<LauncherItemInfo> result) {
                    super.onPostExecute(result);
                    if (getActivity() == null) {
                        return;
                    }
                    List<ShortcutInfo> defaults = new DefaultItemProvider(getActivity())
                            .getAllDefaultShortcuts(true);
                    if (result != null) {
                        final ArrayList<ShortcutInfo> missingDefaults =
                                new ArrayList<ShortcutInfo>();
                        for (ShortcutInfo shortcut : defaults) {
                            boolean found = false;
                            for (LauncherItemInfo info : result) {
                                if (shortcut.getIntent().filterEquals(info.getIntent())) {
                                    found = true;
                                    break;
                                }
                            }
                            if (!found) {
                                missingDefaults.add(shortcut);
                            }
                        }
                        if (missingDefaults.size() > 0) {
                            restoreDefaults.setEnabled(true);
                            restoreDefaults.setOnPreferenceClickListener(
                                    new OnPreferenceClickListener() {

                                @Override
                                public boolean onPreferenceClick(Preference preference) {
                                    restoreDefaultShortcuts(missingDefaults);
                                    return true;
                                }
                            });
                        }
                    }
                }
            };
            task.execute();
!!!13444620.java!!!	restoreDefaultShortcuts(inout missingDefaults : List<ShortcutInfo>) : void
            for (ShortcutInfo info : missingDefaults) {
                IDataProvider provider = ((LauncherApp) getActivity().getApplicationContext())
                        .getDataProvider();
                provider.addShortcut(info);
            }
            loadRestoreDefaults();
