class ResearchLogger
!!!12830732.java!!!	ResearchLogger(in logFileManager : LogFileManager)
        final HandlerThread handlerThread = new HandlerThread("ResearchLogger logging task",
                Process.THREAD_PRIORITY_BACKGROUND);
        handlerThread.start();
        mLoggingHandler = new Handler(handlerThread.getLooper());
        mLogFileManager = logFileManager;
!!!12830860.java!!!	getInstance() : ResearchLogger
        return sInstance;
!!!12830988.java!!!	init(in ims : InputMethodService, in prefs : SharedPreferences) : void
        sInstance.initInternal(ims, prefs);
!!!12831116.java!!!	initInternal(in ims : InputMethodService, in prefs : SharedPreferences) : void
        mIms = ims;
        final LogFileManager logFileManager = mLogFileManager;
        if (logFileManager != null) {
            logFileManager.init(ims);
            try {
                logFileManager.createLogFile(prefs);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (prefs != null) {
            sIsLogging = prefs.getBoolean(PREF_USABILITY_STUDY_MODE, false);
            prefs.registerOnSharedPreferenceChangeListener(this);
        }
!!!12831372.java!!!	logMotionEvent(in action : int, in eventTime : long, in id : int, in x : int, in y : int, in size : float, in pressure : float) : void
        final String eventTag;
        switch (action) {
            case MotionEvent.ACTION_CANCEL: eventTag = "[Cancel]"; break;
            case MotionEvent.ACTION_UP: eventTag = "[Up]"; break;
            case MotionEvent.ACTION_DOWN: eventTag = "[Down]"; break;
            case MotionEvent.ACTION_POINTER_UP: eventTag = "[PointerUp]"; break;
            case MotionEvent.ACTION_POINTER_DOWN: eventTag = "[PointerDown]"; break;
            case MotionEvent.ACTION_MOVE: eventTag = "[Move]"; break;
            case MotionEvent.ACTION_OUTSIDE: eventTag = "[Outside]"; break;
            default: eventTag = "[Action" + action + "]"; break;
        }
        if (!TextUtils.isEmpty(eventTag)) {
            final StringBuilder sb = new StringBuilder();
            sb.append(eventTag);
            sb.append('\t'); sb.append(eventTime);
            sb.append('\t'); sb.append(id);
            sb.append('\t'); sb.append(x);
            sb.append('\t'); sb.append(y);
            sb.append('\t'); sb.append(size);
            sb.append('\t'); sb.append(pressure);
            write(LogGroup.MOTION_EVENT, sb.toString());
        }
!!!12831500.java!!!	logKeyEvent(in code : int, in x : int, in y : int) : void
        final StringBuilder sb = new StringBuilder();
        sb.append(Keyboard.printableCode(code));
        sb.append('\t'); sb.append(x);
        sb.append('\t'); sb.append(y);
        write(LogGroup.KEY, sb.toString());
!!!12831628.java!!!	logCorrection(in subgroup : String, in before : String, in after : String, in position : int) : void
        final StringBuilder sb = new StringBuilder();
        sb.append(subgroup);
        sb.append('\t'); sb.append(before);
        sb.append('\t'); sb.append(after);
        sb.append('\t'); sb.append(position);
        write(LogGroup.CORRECTION, sb.toString());
!!!12831756.java!!!	logStateChange(in subgroup : String, in details : String) : void
        write(LogGroup.STATE_CHANGE, subgroup + "\t" + details);
!!!12831884.java!!!	logUnstructured(in logGroup : String, in details : String) : void
        // TODO: improve performance by making entire class static and/or implementing natively
        getInstance().write(LogGroup.UNSTRUCTURED, logGroup + "\t" + details);
!!!12832012.java!!!	write(in logGroup : LogGroup, in log : String) : void
        // TODO: rewrite in native for better performance
        mLoggingHandler.post(new Runnable() {
            @Override
            public void run() {
                final long currentTime = System.currentTimeMillis();
                final long upTime = SystemClock.uptimeMillis();
                final StringBuilder builder = new StringBuilder();
                builder.append(currentTime);
                builder.append('\t'); builder.append(upTime);
                builder.append('\t'); builder.append(logGroup.mLogString);
                builder.append('\t'); builder.append(log);
                builder.append('\n');
                if (DEBUG) {
                    Log.d(TAG, "Write: " + '[' + logGroup.mLogString + ']' + log);
                }
                final String s = builder.toString();
                if (mLogFileManager.append(s)) {
                    // success
                } else {
                    if (DEBUG) {
                        Log.w(TAG, "Unable to write to log.");
                    }
                    // perhaps logfile was deleted.  try to recreate and relog.
                    try {
                        mLogFileManager.createLogFile(PreferenceManager
                                .getDefaultSharedPreferences(mIms));
                        mLogFileManager.append(s);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
!!!12832140.java!!!	clearAll() : void
        mLoggingHandler.post(new Runnable() {
            @Override
            public void run() {
                if (DEBUG) {
                    Log.d(TAG, "Delete log file.");
                }
                mLogFileManager.reset();
            }
        });
!!!12832268.java!!!	getLogFileManager() : LogFileManager
        return mLogFileManager;
!!!12832396.java!!!	onSharedPreferenceChanged(inout prefs : SharedPreferences, in key : String) : void
        if (key == null || prefs == null) {
            return;
        }
        sIsLogging = prefs.getBoolean(PREF_USABILITY_STUDY_MODE, false);
!!!12832524.java!!!	keyboardState_onCancelInput(in isSinglePointer : boolean, in keyboardState : KeyboardState) : void
        if (UnsLogGroup.KEYBOARDSTATE_ONCANCELINPUT_ENABLED) {
            final String s = "onCancelInput: single=" + isSinglePointer + " " + keyboardState;
            logUnstructured("KeyboardState_onCancelInput", s);
        }
!!!12832652.java!!!	keyboardState_onCodeInput(in code : int, in isSinglePointer : boolean, in autoCaps : int, in keyboardState : KeyboardState) : void
        if (UnsLogGroup.KEYBOARDSTATE_ONCODEINPUT_ENABLED) {
            final String s = "onCodeInput: code=" + Keyboard.printableCode(code)
                    + " single=" + isSinglePointer
                    + " autoCaps=" + autoCaps + " " + keyboardState;
            logUnstructured("KeyboardState_onCodeInput", s);
        }
!!!12832780.java!!!	keyboardState_onLongPressTimeout(in code : int, in keyboardState : KeyboardState) : void
        if (UnsLogGroup.KEYBOARDSTATE_ONLONGPRESSTIMEOUT_ENABLED) {
            final String s = "onLongPressTimeout: code=" + Keyboard.printableCode(code) + " "
                    + keyboardState;
            logUnstructured("KeyboardState_onLongPressTimeout", s);
        }
!!!12832908.java!!!	keyboardState_onPressKey(in code : int, in keyboardState : KeyboardState) : void
        if (UnsLogGroup.KEYBOARDSTATE_ONPRESSKEY_ENABLED) {
            final String s = "onPressKey: code=" + Keyboard.printableCode(code) + " "
                    + keyboardState;
            logUnstructured("KeyboardState_onPressKey", s);
        }
!!!12833036.java!!!	keyboardState_onReleaseKey(in keyboardState : KeyboardState, in code : int, in withSliding : boolean) : void
        if (UnsLogGroup.KEYBOARDSTATE_ONRELEASEKEY_ENABLED) {
            final String s = "onReleaseKey: code=" + Keyboard.printableCode(code)
                    + " sliding=" + withSliding + " " + keyboardState;
            logUnstructured("KeyboardState_onReleaseKey", s);
        }
!!!12833164.java!!!	latinIME_commitCurrentAutoCorrection(in typedWord : String, in autoCorrection : String) : void
        if (UnsLogGroup.LATINIME_COMMITCURRENTAUTOCORRECTION_ENABLED) {
            if (typedWord.equals(autoCorrection)) {
                getInstance().logCorrection("[----]", typedWord, autoCorrection, -1);
            } else {
                getInstance().logCorrection("[Auto]", typedWord, autoCorrection, -1);
            }
        }
!!!12833292.java!!!	latinIME_commitText(in typedWord : CharSequence) : void
        if (UnsLogGroup.LATINIME_COMMITTEXT_ENABLED) {
            logUnstructured("LatinIME_commitText", typedWord.toString());
        }
!!!12833420.java!!!	latinIME_deleteSurroundingText(in length : int) : void
        if (UnsLogGroup.LATINIME_DELETESURROUNDINGTEXT_ENABLED) {
            logUnstructured("LatinIME_deleteSurroundingText", String.valueOf(length));
        }
!!!12833548.java!!!	latinIME_doubleSpaceAutoPeriod() : void
        if (UnsLogGroup.LATINIME_DOUBLESPACEAUTOPERIOD_ENABLED) {
            logUnstructured("LatinIME_doubleSpaceAutoPeriod", "");
        }
!!!12833676.java!!!	latinIME_onDisplayCompletions(in applicationSpecifiedCompletions : CompletionInfo) : void
        if (UnsLogGroup.LATINIME_ONDISPLAYCOMPLETIONS_ENABLED) {
            final StringBuilder builder = new StringBuilder();
            builder.append("Received completions:");
            if (applicationSpecifiedCompletions != null) {
                for (int i = 0; i < applicationSpecifiedCompletions.length; i++) {
                    builder.append("  #");
                    builder.append(i);
                    builder.append(": ");
                    builder.append(applicationSpecifiedCompletions[i]);
                    builder.append("\n");
                }
            }
            logUnstructured("LatinIME_onDisplayCompletions", builder.toString());
        }
!!!12833804.java!!!	latinIME_onStartInputViewInternal(in editorInfo : EditorInfo, in prefs : SharedPreferences) : void
        if (UnsLogGroup.LATINIME_ONSTARTINPUTVIEWINTERNAL_ENABLED) {
            final StringBuilder builder = new StringBuilder();
            builder.append("onStartInputView: editorInfo:");
            builder.append("\tinputType=");
            builder.append(Integer.toHexString(editorInfo.inputType));
            builder.append("\timeOptions=");
            builder.append(Integer.toHexString(editorInfo.imeOptions));
            builder.append("\tdisplay="); builder.append(Build.DISPLAY);
            builder.append("\tmodel="); builder.append(Build.MODEL);
            for (Map.Entry<String,?> entry : prefs.getAll().entrySet()) {
                builder.append("\t" + entry.getKey());
                Object value = entry.getValue();
                builder.append("=" + ((value == null) ? "<null>" : value.toString()));
            }
            logUnstructured("LatinIME_onStartInputViewInternal", builder.toString());
        }
!!!12833932.java!!!	latinIME_onUpdateSelection(in lastSelectionStart : int, in lastSelectionEnd : int, in oldSelStart : int, in oldSelEnd : int, in newSelStart : int, in newSelEnd : int, in composingSpanStart : int, in composingSpanEnd : int) : void
        if (UnsLogGroup.LATINIME_ONUPDATESELECTION_ENABLED) {
            final String s = "onUpdateSelection: oss=" + oldSelStart
                    + ", ose=" + oldSelEnd
                    + ", lss=" + lastSelectionStart
                    + ", lse=" + lastSelectionEnd
                    + ", nss=" + newSelStart
                    + ", nse=" + newSelEnd
                    + ", cs=" + composingSpanStart
                    + ", ce=" + composingSpanEnd;
            logUnstructured("LatinIME_onUpdateSelection", s);
        }
!!!12834060.java!!!	latinIME_performEditorAction(in imeActionNext : int) : void
        if (UnsLogGroup.LATINIME_PERFORMEDITORACTION_ENABLED) {
            logUnstructured("LatinIME_performEditorAction", String.valueOf(imeActionNext));
        }
!!!12834188.java!!!	latinIME_pickApplicationSpecifiedCompletion(in index : int, in text : CharSequence, in x : int, in y : int) : void
        if (UnsLogGroup.LATINIME_PICKAPPLICATIONSPECIFIEDCOMPLETION_ENABLED) {
            final String s = String.valueOf(index) + '\t' + text + '\t' + x + '\t' + y;
            logUnstructured("LatinIME_pickApplicationSpecifiedCompletion", s);
        }
!!!12834316.java!!!	latinIME_pickSuggestionManually(in replacedWord : String, in index : int, inout suggestion : CharSequence, in x : int, in y : int) : void
        if (UnsLogGroup.LATINIME_PICKSUGGESTIONMANUALLY_ENABLED) {
            final String s = String.valueOf(index) + '\t' + suggestion + '\t' + x + '\t' + y;
            logUnstructured("LatinIME_pickSuggestionManually", s);
        }
!!!12834444.java!!!	latinIME_punctuationSuggestion(in index : int, in suggestion : CharSequence, in x : int, in y : int) : void
        if (UnsLogGroup.LATINIME_PICKPUNCTUATIONSUGGESTION_ENABLED) {
            final String s = String.valueOf(index) + '\t' + suggestion + '\t' + x + '\t' + y;
            logUnstructured("LatinIME_pickPunctuationSuggestion", s);
        }
!!!12834572.java!!!	latinIME_revertDoubleSpaceWhileInBatchEdit() : void
        if (UnsLogGroup.LATINIME_REVERTDOUBLESPACEWHILEINBATCHEDIT_ENABLED) {
            logUnstructured("LatinIME_revertDoubleSpaceWhileInBatchEdit", "");
        }
!!!12834700.java!!!	latinIME_revertSwapPunctuation() : void
        if (UnsLogGroup.LATINIME_REVERTSWAPPUNCTUATION_ENABLED) {
            logUnstructured("LatinIME_revertSwapPunctuation", "");
        }
!!!12834828.java!!!	latinIME_sendKeyCodePoint(in code : int) : void
        if (UnsLogGroup.LATINIME_SENDKEYCODEPOINT_ENABLED) {
            logUnstructured("LatinIME_sendKeyCodePoint", String.valueOf(code));
        }
!!!12834956.java!!!	latinIME_swapSwapperAndSpaceWhileInBatchEdit() : void
        if (UnsLogGroup.LATINIME_SWAPSWAPPERANDSPACEWHILEINBATCHEDIT_ENABLED) {
            logUnstructured("latinIME_swapSwapperAndSpaceWhileInBatchEdit", "");
        }
!!!12835084.java!!!	latinIME_switchToKeyboardView() : void
        if (UnsLogGroup.LATINIME_SWITCHTOKEYBOARDVIEW_ENABLED) {
            final String s = "Switch to keyboard view.";
            logUnstructured("LatinIME_switchToKeyboardView", s);
        }
!!!12835212.java!!!	latinKeyboardView_onLongPress() : void
        if (UnsLogGroup.LATINKEYBOARDVIEW_ONLONGPRESS_ENABLED) {
            final String s = "long press detected";
            logUnstructured("LatinKeyboardView_onLongPress", s);
        }
!!!12835340.java!!!	latinKeyboardView_processMotionEvent(inout me : MotionEvent, in action : int, in eventTime : long, in index : int, in id : int, in x : int, in y : int) : void
        if (UnsLogGroup.LATINKEYBOARDVIEW_ONPROCESSMOTIONEVENT_ENABLED) {
            final float size = me.getSize(index);
            final float pressure = me.getPressure(index);
            if (action != MotionEvent.ACTION_MOVE) {
                getInstance().logMotionEvent(action, eventTime, id, x, y, size, pressure);
            }
        }
!!!12835468.java!!!	latinKeyboardView_setKeyboard(in keyboard : Keyboard) : void
        if (UnsLogGroup.LATINKEYBOARDVIEW_SETKEYBOARD_ENABLED) {
            StringBuilder builder = new StringBuilder();
            builder.append("id=");
            builder.append(keyboard.mId);
            builder.append("\tw=");
            builder.append(keyboard.mOccupiedWidth);
            builder.append("\th=");
            builder.append(keyboard.mOccupiedHeight);
            builder.append("\tkeys=[");
            boolean first = true;
            for (Key key : keyboard.mKeys) {
                if (first) {
                    first = false;
                } else {
                    builder.append(",");
                }
                builder.append("{code:");
                builder.append(key.mCode);
                builder.append(",altCode:");
                builder.append(key.mAltCode);
                builder.append(",x:");
                builder.append(key.mX);
                builder.append(",y:");
                builder.append(key.mY);
                builder.append(",w:");
                builder.append(key.mWidth);
                builder.append(",h:");
                builder.append(key.mHeight);
                builder.append("}");
            }
            builder.append("]");
            logUnstructured("LatinKeyboardView_setKeyboard", builder.toString());
        }
!!!12835596.java!!!	latinIME_revertCommit(in originallyTypedWord : String) : void
        if (UnsLogGroup.LATINIME_REVERTCOMMIT_ENABLED) {
            logUnstructured("LatinIME_revertCommit", originallyTypedWord);
        }
!!!12835724.java!!!	pointerTracker_callListenerOnCancelInput() : void
        final String s = "onCancelInput";
        if (UnsLogGroup.POINTERTRACKER_CALLLISTENERONCANCELINPUT_ENABLED) {
            logUnstructured("PointerTracker_callListenerOnCancelInput", s);
        }
!!!12835852.java!!!	pointerTracker_callListenerOnCodeInput(in key : Key, in x : int, in y : int, in ignoreModifierKey : boolean, in altersCode : boolean, in code : int) : void
        if (UnsLogGroup.POINTERTRACKER_CALLLISTENERONCODEINPUT_ENABLED) {
            final String s = "onCodeInput: " + Keyboard.printableCode(code)
                    + " text=" + key.mOutputText + " x=" + x + " y=" + y
                    + " ignoreModifier=" + ignoreModifierKey + " altersCode=" + altersCode
                    + " enabled=" + key.isEnabled();
            logUnstructured("PointerTracker_callListenerOnCodeInput", s);
        }
!!!12835980.java!!!	pointerTracker_callListenerOnPressAndCheckKeyboardLayoutChange(in key : Key, in ignoreModifierKey : boolean) : void
        if (UnsLogGroup.POINTERTRACKER_CALLLISTENERONPRESSANDCHECKKEYBOARDLAYOUTCHANGE_ENABLED) {
            final String s = "onPress    : " + KeyDetector.printableCode(key)
                    + " ignoreModifier=" + ignoreModifierKey
                    + " enabled=" + key.isEnabled();
            logUnstructured("PointerTracker_callListenerOnPressAndCheckKeyboardLayoutChange", s);
        }
!!!12836108.java!!!	pointerTracker_callListenerOnRelease(in key : Key, in primaryCode : int, in withSliding : boolean, in ignoreModifierKey : boolean) : void
        if (UnsLogGroup.POINTERTRACKER_CALLLISTENERONRELEASE_ENABLED) {
            final String s = "onRelease  : " + Keyboard.printableCode(primaryCode)
                    + " sliding=" + withSliding + " ignoreModifier=" + ignoreModifierKey
                    + " enabled="+ key.isEnabled();
            logUnstructured("PointerTracker_callListenerOnRelease", s);
        }
!!!12836236.java!!!	pointerTracker_onDownEvent(in deltaT : long, in distanceSquared : int) : void
        if (UnsLogGroup.POINTERTRACKER_ONDOWNEVENT_ENABLED) {
            final String s = "onDownEvent: ignore potential noise: time=" + deltaT
                    + " distance=" + distanceSquared;
            logUnstructured("PointerTracker_onDownEvent", s);
        }
!!!12836364.java!!!	pointerTracker_onMoveEvent(in x : int, in y : int, in lastX : int, in lastY : int) : void
        if (UnsLogGroup.POINTERTRACKER_ONMOVEEVENT_ENABLED) {
            final String s = String.format("onMoveEvent: sudden move is translated to "
                    + "up[%d,%d]/down[%d,%d] events", lastX, lastY, x, y);
            logUnstructured("PointerTracker_onMoveEvent", s);
        }
!!!12836492.java!!!	suddenJumpingTouchEventHandler_onTouchEvent(in me : MotionEvent) : void
        if (UnsLogGroup.SUDDENJUMPINGTOUCHEVENTHANDLER_ONTOUCHEVENT_ENABLED) {
            final String s = "onTouchEvent: ignore sudden jump " + me;
            logUnstructured("SuddenJumpingTouchEventHandler_onTouchEvent", s);
        }
!!!12836620.java!!!	suggestionsView_setSuggestions(in mSuggestedWords : SuggestedWords) : void
        if (UnsLogGroup.SUGGESTIONSVIEW_SETSUGGESTIONS_ENABLED) {
            logUnstructured("SuggestionsView_setSuggestions", mSuggestedWords.toString());
        }
