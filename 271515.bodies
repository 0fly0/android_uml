class SynchronousQueue
!!!1620891.java!!!	SynchronousQueue()
        this(false);
!!!1621019.java!!!	SynchronousQueue(inout fair : boolean)
        transferer = fair ? new TransferQueue() : new TransferStack();
!!!1621147.java!!!	put(inout o : E) : void
        if (o == null) throw new NullPointerException();
        if (transferer.transfer(o, false, 0) == null) {
            Thread.interrupted();
            throw new InterruptedException();
        }
!!!1621275.java!!!	offer(inout o : E, in timeout : long, inout unit : TimeUnit) : boolean
        if (o == null) throw new NullPointerException();
        if (transferer.transfer(o, true, unit.toNanos(timeout)) != null)
            return true;
        if (!Thread.interrupted())
            return false;
        throw new InterruptedException();
!!!1621403.java!!!	offer(inout e : E) : boolean
        if (e == null) throw new NullPointerException();
        return transferer.transfer(e, true, 0) != null;
!!!1621531.java!!!	take() : E
        Object e = transferer.transfer(null, false, 0);
        if (e != null)
            return (E)e;
        Thread.interrupted();
        throw new InterruptedException();
!!!1621659.java!!!	poll(in timeout : long, inout unit : TimeUnit) : E
        Object e = transferer.transfer(null, true, unit.toNanos(timeout));
        if (e != null || !Thread.interrupted())
            return (E)e;
        throw new InterruptedException();
!!!1621787.java!!!	poll() : E
        return (E)transferer.transfer(null, true, 0);
!!!1621915.java!!!	isEmpty() : boolean
        return true;
!!!1622043.java!!!	size() : int
        return 0;
!!!1622171.java!!!	remainingCapacity() : int
        return 0;
!!!1622427.java!!!	contains(inout o : Object) : boolean
        return false;
!!!1622555.java!!!	remove(inout o : Object) : boolean
        return false;
!!!1622683.java!!!	containsAll(inout c : Collection) : boolean
        return c.isEmpty();
!!!1622811.java!!!	removeAll(inout c : Collection) : boolean
        return false;
!!!1622939.java!!!	retainAll(inout c : Collection) : boolean
        return false;
!!!1623067.java!!!	peek() : E
        return null;
!!!1623195.java!!!	iterator() : Iterator
        return (Iterator<E>) EmptyIterator.EMPTY_ITERATOR;
!!!1623707.java!!!	toArray() : Object
        return new Object[0];
!!!1623835.java!!!	toArray(inout a : T) : T
        if (a.length > 0)
            a[0] = null;
        return a;
!!!1623963.java!!!	drainTo(inout c : Collection) : int
        if (c == null)
            throw new NullPointerException();
        if (c == this)
            throw new IllegalArgumentException();
        int n = 0;
        for (E e; (e = poll()) != null;) {
            c.add(e);
            ++n;
        }
        return n;
!!!1624091.java!!!	drainTo(inout c : Collection, in maxElements : int) : int
        if (c == null)
            throw new NullPointerException();
        if (c == this)
            throw new IllegalArgumentException();
        int n = 0;
        for (E e; n < maxElements && (e = poll()) != null;) {
            c.add(e);
            ++n;
        }
        return n;
!!!1624219.java!!!	writeObject(inout s : ObjectOutputStream) : void
        boolean fair = transferer instanceof TransferQueue;
        if (fair) {
            qlock = new ReentrantLock(true);
            waitingProducers = new FifoWaitQueue();
            waitingConsumers = new FifoWaitQueue();
        }
        else {
            qlock = new ReentrantLock();
            waitingProducers = new LifoWaitQueue();
            waitingConsumers = new LifoWaitQueue();
        }
        s.defaultWriteObject();
!!!1624347.java!!!	readObject(in s : ObjectInputStream) : void
        s.defaultReadObject();
        if (waitingProducers instanceof FifoWaitQueue)
            transferer = new TransferQueue();
        else
            transferer = new TransferStack();
!!!1624475.java!!!	objectFieldOffset(inout UNSAFE : Unsafe, inout field : String, inout klazz : Class) : long
        try {
            return UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));
        } catch (NoSuchFieldException e) {
            // Convert Exception to corresponding Error
            NoSuchFieldError error = new NoSuchFieldError(field);
            error.initCause(e);
            throw error;
        }
