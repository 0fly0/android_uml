class TextureView
!!!4603276.java!!!	TextureView(inout context : Context)
        super(context);
        init();
!!!4603404.java!!!	TextureView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        init();
!!!4603532.java!!!	TextureView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
        init();
!!!4603660.java!!!	init() : void
        mLayerPaint = new Paint();
!!!4603788.java!!!	isOpaque() : boolean
        return mOpaque;
!!!4603916.java!!!	setOpaque(inout opaque : boolean) : void
        if (opaque != mOpaque) {
            mOpaque = opaque;
            if (mLayer != null) {
                updateLayerAndInvalidate();
            }
        }
!!!4604044.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();

        if (!isHardwareAccelerated()) {
            Log.w(LOG_TAG, "A TextureView or a subclass can only be "
                    + "used with hardware acceleration enabled.");
        }
!!!4604172.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();
        if (mLayer != null && mAttachInfo != null && mAttachInfo.mHardwareRenderer != null) {
            boolean success = mAttachInfo.mHardwareRenderer.safelyRun(new Runnable() {
                @Override
                public void run() {
                    destroySurface();
                }
            });

            if (!success) {
                Log.w(LOG_TAG, "TextureView was not able to destroy its surface: " + this);
            }
        }
!!!4604300.java!!!	destroySurface() : void
        if (mLayer != null) {
            mSurface.detachFromGLContext();
            // SurfaceTexture owns the texture name and detachFromGLContext
            // should have deleted it
            mLayer.clearStorage();

            boolean shouldRelease = true;
            if (mListener != null) {
                shouldRelease = mListener.onSurfaceTextureDestroyed(mSurface);
            }

            synchronized (mNativeWindowLock) {
                nDestroyNativeWindow();
            }

            mLayer.destroy();
            if (shouldRelease) mSurface.release();
            mSurface = null;
            mLayer = null;
        }
!!!4604428.java!!!	setLayerType(in layerType : int, inout paint : Paint) : void
        if (paint != mLayerPaint) {
            mLayerPaint = paint;
            invalidate();
        }
!!!4604556.java!!!	getLayerType() : int
        return LAYER_TYPE_HARDWARE;
!!!4604684.java!!!	hasStaticLayer() : boolean
        return true;
!!!4604940.java!!!	draw(inout canvas : Canvas) : void
        // NOTE: Maintain this carefully (see View.java)
        mPrivateFlags = (mPrivateFlags & ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;

        applyUpdate();
        applyTransformMatrix();
!!!4605196.java!!!	onSizeChanged(in w : int, in h : int, in oldw : int, in oldh : int) : void
        super.onSizeChanged(w, h, oldw, oldh);
        if (mSurface != null) {
            nSetDefaultBufferSize(mSurface, getWidth(), getHeight());
            updateLayer();
            if (mListener != null) {
                mListener.onSurfaceTextureSizeChanged(mSurface, getWidth(), getHeight());
            }
        }
!!!4605324.java!!!	destroyLayer(inout valid : boolean) : boolean
        return false;
!!!4605452.java!!!	destroyHardwareResources() : void
        super.destroyHardwareResources();
        destroySurface();
        invalidateParentCaches();
        invalidate(true);
!!!4605580.java!!!	getHardwareLayer() : HardwareLayer
        // NOTE: Maintain these two lines very carefully (see View.java)
        mPrivateFlags |= PFLAG_DRAWN | PFLAG_DRAWING_CACHE_VALID;
        mPrivateFlags &= ~PFLAG_DIRTY_MASK;

        if (mLayer == null) {
            if (mAttachInfo == null || mAttachInfo.mHardwareRenderer == null) {
                return null;
            }

            mLayer = mAttachInfo.mHardwareRenderer.createHardwareLayer(mOpaque);
            if (!mUpdateSurface) {
                // Create a new SurfaceTexture for the layer.
                mSurface = mAttachInfo.mHardwareRenderer.createSurfaceTexture(mLayer);
            }
            nSetDefaultBufferSize(mSurface, getWidth(), getHeight());
            nCreateNativeWindow(mSurface);

            mUpdateListener = new SurfaceTexture.OnFrameAvailableListener() {
                @Override
                public void onFrameAvailable(SurfaceTexture surfaceTexture) {
                    // Per SurfaceTexture's documentation, the callback may be invoked
                    // from an arbitrary thread
                    updateLayer();

                    if (Looper.myLooper() == Looper.getMainLooper()) {
                        invalidate();
                    } else {
                        postInvalidate();
                    }
                }
            };
            mSurface.setOnFrameAvailableListener(mUpdateListener);

            if (mListener != null && !mUpdateSurface) {
                mListener.onSurfaceTextureAvailable(mSurface, getWidth(), getHeight());
            }
            mLayer.setLayerPaint(mLayerPaint);
        }

        if (mUpdateSurface) {
            // Someone has requested that we use a specific SurfaceTexture, so
            // tell mLayer about it and set the SurfaceTexture to use the
            // current view size.
            mUpdateSurface = false;

            // Since we are updating the layer, force an update to ensure its
            // parameters are correct (width, height, transform, etc.)
            updateLayer();
            mMatrixChanged = true;

            mAttachInfo.mHardwareRenderer.setSurfaceTexture(mLayer, mSurface);
            nSetDefaultBufferSize(mSurface, getWidth(), getHeight());
        }

        applyUpdate();
        applyTransformMatrix();

        return mLayer;
!!!4605708.java!!!	onVisibilityChanged(inout changedView : View, in visibility : int) : void
        super.onVisibilityChanged(changedView, visibility);

        if (mSurface != null) {
            // When the view becomes invisible, stop updating it, it's a waste of CPU
            // To cancel updates, the easiest thing to do is simply to remove the
            // updates listener
            if (visibility == VISIBLE) {
                mSurface.setOnFrameAvailableListener(mUpdateListener);
                updateLayerAndInvalidate();
            } else {
                mSurface.setOnFrameAvailableListener(null);
            }
        }
!!!4605836.java!!!	updateLayer() : void
        synchronized (mLock) {
            mUpdateLayer = true;
        }
!!!4605964.java!!!	updateLayerAndInvalidate() : void
        synchronized (mLock) {
            mUpdateLayer = true;
        }
        invalidate();
!!!4606092.java!!!	applyUpdate() : void
        if (mLayer == null) {
            return;
        }

        synchronized (mLock) {
            if (mUpdateLayer) {
                mUpdateLayer = false;
            } else {
                return;
            }
        }
        
        mLayer.update(getWidth(), getHeight(), mOpaque);

        if (mListener != null) {
            mListener.onSurfaceTextureUpdated(mSurface);
        }
!!!4606220.java!!!	setTransform(inout transform : Matrix) : void
        mMatrix.set(transform);
        mMatrixChanged = true;
        invalidateParentIfNeeded();
!!!4606348.java!!!	getTransform(inout transform : Matrix) : Matrix
        if (transform == null) {
            transform = new Matrix();
        }

        transform.set(mMatrix);

        return transform;
!!!4606476.java!!!	applyTransformMatrix() : void
        if (mMatrixChanged && mLayer != null) {
            mLayer.setTransform(mMatrix);
            mMatrixChanged = false;
        }
!!!4606604.java!!!	getBitmap() : Bitmap
        return getBitmap(getWidth(), getHeight());
!!!4606732.java!!!	getBitmap(in width : int, in height : int) : Bitmap
        if (isAvailable() && width > 0 && height > 0) {
            return getBitmap(Bitmap.createBitmap(getResources().getDisplayMetrics(),
                    width, height, Bitmap.Config.ARGB_8888));
        }
        return null;
!!!4606860.java!!!	getBitmap(inout bitmap : Bitmap) : Bitmap
        if (bitmap != null && isAvailable()) {
            AttachInfo info = mAttachInfo;
            if (info != null && info.mHardwareRenderer != null &&
                    info.mHardwareRenderer.isEnabled()) {
                if (!info.mHardwareRenderer.validate()) {
                    throw new IllegalStateException("Could not acquire hardware rendering context");
                }
            }

            applyUpdate();
            applyTransformMatrix();

            // This case can happen if the app invokes setSurfaceTexture() before
            // we are able to create the hardware layer. We can safely initialize
            // the layer here thanks to the validate() call at the beginning of
            // this method
            if (mLayer == null && mUpdateSurface) {
                getHardwareLayer();
            }

            if (mLayer != null) {
                mLayer.copyInto(bitmap);
            }
        }
        return bitmap;
!!!4606988.java!!!	isAvailable() : boolean
        return mSurface != null;
!!!4607116.java!!!	lockCanvas() : Canvas
        return lockCanvas(null);
!!!4607244.java!!!	lockCanvas(inout dirty : Rect) : Canvas
        if (!isAvailable()) return null;

        if (mCanvas == null) {
            mCanvas = new Canvas();
        }

        synchronized (mNativeWindowLock) {
            nLockCanvas(mNativeWindow, mCanvas, dirty);
        }
        mSaveCount = mCanvas.save();

        return mCanvas;
!!!4607372.java!!!	unlockCanvasAndPost(inout canvas : Canvas) : void
        if (mCanvas != null && canvas == mCanvas) {
            canvas.restoreToCount(mSaveCount);
            mSaveCount = 0;

            synchronized (mNativeWindowLock) {
                nUnlockCanvasAndPost(mNativeWindow, mCanvas);
            }
        }
!!!4607500.java!!!	getSurfaceTexture() : SurfaceTexture
        return mSurface;
!!!4607628.java!!!	setSurfaceTexture(inout surfaceTexture : SurfaceTexture) : void
        if (surfaceTexture == null) {
            throw new NullPointerException("surfaceTexture must not be null");
        }
        if (mSurface != null) {
            mSurface.release();
        }
        mSurface = surfaceTexture;
        mUpdateSurface = true;
        invalidateParentIfNeeded();
!!!4607756.java!!!	getSurfaceTextureListener() : SurfaceTextureListener
        return mListener;
!!!4607884.java!!!	setSurfaceTextureListener(inout listener : SurfaceTextureListener) : void
        mListener = listener;
