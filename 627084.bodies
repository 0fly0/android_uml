class RTPSink::Source
!!!1910156.cpp!!!	updateSeq(in seq : uint16_t, in buffer : sp<ABuffer>) : bool
    uint16_t udelta = seq - mMaxSeq;

    if (mProbation) {
        // Startup phase

        if (seq == mMaxSeq + 1) {
            buffer->setInt32Data(mCycles | seq);
            queuePacket(buffer);

            --mProbation;
            mMaxSeq = seq;
            if (mProbation == 0) {
                initSeq(seq);
                ++mReceived;

                return true;
            }
        } else {
            // Packet out of sequence, restart startup phase

            mProbation = kMinSequential - 1;
            mMaxSeq = seq;

#if 0
            mPackets.clear();
            mTotalBytesQueued = 0;
            ALOGI("XXX cleared packets");
#endif

            buffer->setInt32Data(mCycles | seq);
            queuePacket(buffer);
        }

        return false;
    }

    if (udelta < kMaxDropout) {
        // In order, with permissible gap.

        if (seq < mMaxSeq) {
            // Sequence number wrapped - count another 64K cycle
            mCycles += kRTPSeqMod;
        }

        mMaxSeq = seq;
    } else if (udelta <= kRTPSeqMod - kMaxMisorder) {
        // The sequence number made a very large jump

        if (seq == mBadSeq) {
            // Two sequential packets -- assume that the other side
            // restarted without telling us so just re-sync
            // (i.e. pretend this was the first packet)

            initSeq(seq);
        } else {
            mBadSeq = (seq + 1) & (kRTPSeqMod - 1);

            return false;
        }
    } else {
        // Duplicate or reordered packet.
    }

    ++mReceived;

    buffer->setInt32Data(mCycles | seq);
    queuePacket(buffer);

    return true;
!!!1910284.cpp!!!	addReportBlock(in ssrc : uint32_t, in buf : sp<ABuffer>) : void
    uint32_t extMaxSeq = mMaxSeq | mCycles;
    uint32_t expected = extMaxSeq - mBaseSeq + 1;

    int64_t lost = (int64_t)expected - (int64_t)mReceived;
    if (lost > 0x7fffff) {
        lost = 0x7fffff;
    } else if (lost < -0x800000) {
        lost = -0x800000;
    }

    uint32_t expectedInterval = expected - mExpectedPrior;
    mExpectedPrior = expected;

    uint32_t receivedInterval = mReceived - mReceivedPrior;
    mReceivedPrior = mReceived;

    int64_t lostInterval = expectedInterval - receivedInterval;

    uint8_t fractionLost;
    if (expectedInterval == 0 || lostInterval <=0) {
        fractionLost = 0;
    } else {
        fractionLost = (lostInterval << 8) / expectedInterval;
    }

    uint8_t *ptr = buf->data() + buf->size();

    ptr[0] = ssrc >> 24;
    ptr[1] = (ssrc >> 16) & 0xff;
    ptr[2] = (ssrc >> 8) & 0xff;
    ptr[3] = ssrc & 0xff;

    ptr[4] = fractionLost;

    ptr[5] = (lost >> 16) & 0xff;
    ptr[6] = (lost >> 8) & 0xff;
    ptr[7] = lost & 0xff;

    ptr[8] = extMaxSeq >> 24;
    ptr[9] = (extMaxSeq >> 16) & 0xff;
    ptr[10] = (extMaxSeq >> 8) & 0xff;
    ptr[11] = extMaxSeq & 0xff;

    // XXX TODO:

    ptr[12] = 0x00;  // interarrival jitter
    ptr[13] = 0x00;
    ptr[14] = 0x00;
    ptr[15] = 0x00;

    ptr[16] = 0x00;  // last SR
    ptr[17] = 0x00;
    ptr[18] = 0x00;
    ptr[19] = 0x00;

    ptr[20] = 0x00;  // delay since last SR
    ptr[21] = 0x00;
    ptr[22] = 0x00;
    ptr[23] = 0x00;
!!!1910412.cpp!!!	initSeq(in seq : uint16_t) : void
    mMaxSeq = seq;
    mCycles = 0;
    mBaseSeq = seq;
    mBadSeq = kRTPSeqMod + 1;
    mReceived = 0;
    mExpectedPrior = 0;
    mReceivedPrior = 0;
!!!1910540.cpp!!!	queuePacket(in buffer : sp<ABuffer>) : void
    sp<AMessage> msg = mQueueBufferMsg->dup();
    msg->setBuffer("buffer", buffer);
    msg->post();
