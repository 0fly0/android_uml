class ChannelPanel
!!!12252940.java!!!	onCreate(in savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.panel);
        Log.d(TAG, "onCreate()");
        setUpViews();

        // Getting the resources
        mContext = getApplicationContext();
        mRes = mContext.getResources();

        // Getting the duration of the delay from the resources.
        mDelayDuration = mRes.getInteger(R.integer.delay_duration);

        // A handler and a runnable to provide the delay.
        mHandler = new Handler();

        // Extracting the first channel number pressed by the user.
        final Bundle bundle = getIntent().getExtras();
        if (bundle != null) {
            final int value = bundle.getInt(EXTRA_CHANNEL_NUM, 0);
            mTextViewMajor.setText(Integer.toString(value));
        }
        delayChannelChange();
!!!12253068.java!!!	onDestroy() : void
        if (mDialog != null) {
            mDialog.dismiss();
            mDialog = null;
        }

        mHandler.removeCallbacks(mChannelChangeRunnable);

        if (mScanResultRunnable != null)
            mHandler.removeCallbacks(mScanResultRunnable);

        super.onDestroy();
!!!12253196.java!!!	onKeyUp(in keyCode : int, in event : KeyEvent) : boolean

        // fix 29978 [Trestles]Manual scan will be started twice after cancel
        // manual scan and press digit keys
        if (duringChannelNavigation) {
            return true;
        }

        if ((keyCode == KeyEvent.KEYCODE_DPAD_RIGHT || keyCode == KeyEvent.KEYCODE_MINUS)
                && isMajorNumberFocused()) {

            focusMinorNumber();

            delayChannelChange();

        } else if ((keyCode >= KeyEvent.KEYCODE_0) && (keyCode <= KeyEvent.KEYCODE_9)) {

            if (isMajorNumberFocused()) {
                mTextViewMajor.setText((mTextViewMajor.getText())
                        + (Integer.toString(keyCode - KeyEvent.KEYCODE_0)));
                if (mTextViewMajor.length() == mRes.getInteger(R.integer.max_majorNumber_length)) {
                    focusMinorNumber();
                }

                delayChannelChange();
            } else {

                mTextViewMinor.setText(mTextViewMinor.getText()
                        + Integer.toString(keyCode - KeyEvent.KEYCODE_0));

                if (mTextViewMinor.length() == mRes.getInteger(R.integer.max_minorNumber_length)) {
                    launchChannelChange();
                } else {
                    delayChannelChange();
                }
            }
        } else if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER
                || keyCode == KeyEvent.KEYCODE_ENTER) {

            launchChannelChange();

        } else {
            return super.onKeyUp(keyCode, event);
        }
        return true;
!!!12253324.java!!!	delayChannelChange() : void

        // Stopping the timer of previous delay
        mHandler.removeCallbacks(mChannelChangeRunnable);

        // Starting the delay again
        mHandler.postDelayed(mChannelChangeRunnable, mDelayDuration);
!!!12253452.java!!!	launchChannelChange() : void
        // Stopping the timer of previous delay
        mHandler.removeCallbacks(mChannelChangeRunnable);

        // Start the thread
        mHandler.post(mChannelChangeRunnable);
!!!12253836.java!!!	readFrequenciesFromFile(in context : Context) : ArrayList<Object>
        ArrayList<Object> inputs = new ArrayList<Object>();
        final Resources resource = mRes;

        mTunerMode = TvFramework.getInstance().getTunerInstance().getTunerMode(mContext);

        if ((mTunerMode == InputSourceType.CABLE_INPUT)
                && mSearchType.equalsIgnoreCase(resource.getString(R.string.modulation_analog))) {

            mTunerMode = InputSourceType.ANALOG_CABLE_INPUT;
            inputs = getInputFrequencies(TUNER_MODE_CABLE_ANALOG);

        } else if ((mTunerMode == InputSourceType.CABLE_INPUT)
                && mSearchType.equalsIgnoreCase(resource.getString(R.string.modulation_digital))) {
            mTunerMode = InputSourceType.CABLE_INPUT;
            inputs = getInputFrequencies(TUNER_MODE_CABLE_DIGITAL);

        } else if ((mTunerMode == InputSourceType.ATSC_INPUT)
                && mSearchType.equalsIgnoreCase(resource.getString(R.string.modulation_analog))) {
            mTunerMode = InputSourceType.ANALOG_ATSC_INPUT;
            inputs = getInputFrequencies(TUNER_MODE_ANTENNA_ANALOG);

        } else {
            mTunerMode = InputSourceType.ATSC_INPUT;
            inputs = getInputFrequencies(TUNER_MODE_ANTENNA_DIGITAL);
        }

        return inputs;
!!!12253964.java!!!	getInputFrequencies(in tunerMode : String) : ArrayList<Object>

        final Properties properties = new Properties();
        final Resources resource = mRes;
        final AssetManager assetManager = resource.getAssets();

        // fetching file from resource folder
        InputStream inputStream;
        String strModType;
        final ArrayList<Object> freq = new ArrayList<Object>();
        try {
            inputStream = assetManager.open("Frequencies.properties");

            // Loading values from file into Properties object
            properties.load(inputStream);
            if (tunerMode.equalsIgnoreCase(TUNER_MODE_ANTENNA_DIGITAL)) {
                strModType = properties.getProperty(TUNER_MODE_ANTENNA_DIGITAL);
            } else if (tunerMode.equalsIgnoreCase(TUNER_MODE_CABLE_DIGITAL)) {
                strModType = properties.getProperty(TUNER_MODE_CABLE_DIGITAL);
            } else if (tunerMode.equalsIgnoreCase(TUNER_MODE_ANTENNA_ANALOG)) {
                strModType = properties.getProperty(TUNER_MODE_ANTENNA_ANALOG);
            } else {
                strModType = properties.getProperty(TUNER_MODE_CABLE_ANALOG);
            }
            if (strModType != null) {
                final String frequencies[] = strModType.split(",\\s*");
                for (String str : frequencies) {
                    freq.add(str);
                }
            }
        } catch (IOException e) {
            ProgramaticException.displayException(mContext, "ManualScan", e);
        }
        return freq;

!!!12254092.java!!!	startManualScan(in majorNumber : String, in minorNumber : String, inout searchType : ChannelSearchType) : int
        int ret = ErrorCodes.SUCCESS;
        stopTimeOut();
        int inputFrequency = -1;
        int freqIndex = Integer.parseInt(majorNumber);
        int actualFreqIndex = -1;

        final Tuner tuner = TvFramework.getInstance().getTunerInstance();
        mTunerMode = tuner.getTunerMode(mContext);

        if (freqIndex == mRes.getInteger(R.integer.invalid_major_no)) {
            freqIndex = Integer.parseInt(minorNumber);
        }
        if (mTunerMode == InputSourceType.ANALOG_CABLE_INPUT
                || mTunerMode == InputSourceType.CABLE_INPUT) {
            // major number 0 is ignored.
            if (freqIndex <= 0) {
                clearAll();
                return ErrorCodes.FAILURE;
            }
            actualFreqIndex = freqIndex - 1;
        } else {
            // major number 0 and 1 are ignored.
            if (freqIndex <= 1) {
                clearAll();
                return ErrorCodes.FAILURE;
            }
            actualFreqIndex = freqIndex - 2;
        }

        ArrayList<Object> frequencies = null;
        // first perform digital search with current tuner mode
        if (searchType == ChannelSearchType.SEARCH_DIGITAL) {
            mSearchType = mRes.getString(R.string.modulation_digital);
            frequencies = readFrequenciesFromFile(mContext);

            if ((actualFreqIndex) < frequencies.size()) {
                inputFrequency = Integer.parseInt((String) frequencies.get(actualFreqIndex));
            } else {
                // if no digital frequency found for the given major number,
                // search in analog frequencies array
                mSearchType = mRes.getString(R.string.modulation_analog);
                searchType = ChannelSearchType.SEARCH_ANALOG;
                frequencies = readFrequenciesFromFile(mContext);
                if ((actualFreqIndex) < frequencies.size()) {
                    inputFrequency = Integer.parseInt((String) frequencies.get(actualFreqIndex));
                }
            }
            if (inputFrequency > 0) {
                displayDialog(tuner);
            }
        } else {
            // perform analog search. This will be called from
            // scanStatusUpdate() method
            mSearchType = mRes.getString(R.string.modulation_analog);
            frequencies = readFrequenciesFromFile(mContext);

            if ((actualFreqIndex) < frequencies.size()) {
                inputFrequency = Integer.parseInt((String) frequencies.get(actualFreqIndex));
            }
        }

        if (inputFrequency > 0) {
            // Make a call to start manual scan and catch the return value
            // listener :to register to get the scan status updates
            Log.d(TAG, "****************************************   mTunerMode = " + mTunerMode
                    + "\tsearch type = " + mSearchType + "\tinput freq = " + inputFrequency);
            // if Tuner mode is cable and user enters channel number '1', freq
            // is passed as '0' to service
            if ((mTunerMode == InputSourceType.CABLE_INPUT
                    || mTunerMode == InputSourceType.ANALOG_CABLE_INPUT)
                    && freqIndex == 1) {
                inputFrequency = 0;
            }
            final int rtnValue = tuner.startManualScan(searchType, inputFrequency, mTunerMode,
                    new ManualScanListener(), false);
            if (rtnValue == ErrorCodes.FAILURE) {
                final String text = mRes.getString(R.string.manual_scan_failed);
                new ToastCreator(mContext, text, R.drawable.info).showToast();
                clearAll();
                ret = ErrorCodes.FAILURE;
            }
        } else {
            clearAll();
            ret = ErrorCodes.FAILURE;
        }

        return ret;
!!!12254220.java!!!	displayStopScanDialog() : void
        try {
            mDialog = ProgressDialog.show(this, "", "  Please wait...  ");
            mDialog.setContentView(R.layout.progress_dialog_view);
            mDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
                @Override
                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                    return true;
                }
            });
        } catch (Exception ex) {
            if (mDialog != null) {
                mDialog.dismiss();
                mDialog = null;
            }
            Log.d(TAG, " exception " + ex.getLocalizedMessage());
            ex.printStackTrace();
        }
!!!12254348.java!!!	displayDialog(inout tunerInstance : Tuner) : void

        try {
            final Tuner tuner = tunerInstance;
            // Display progress dialog to the user
            mDialog = ProgressDialog.show(this, "", "  Please wait...  ", false, true);
            mDialog.setContentView(R.layout.progress_dialog_view);
            ((TextView) mDialog.findViewById(R.id.progress_dialog_view_tv))
                    .setText(R.string.progress_text_scan);
            mDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
                @Override
                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                    if (keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE) {
                        return false;
                    }
                    return true;
                }
            });
            mDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {

                /**
                 * Method that will be called when user press return key on
                 * dialog box
                 * @param dialog
                 *            the dialog on which the event occurred
                 */
                @Override
                public void onCancel(final DialogInterface dialog) {
                    isScanStopped = true;
                    final int rtnValue = tuner.stopScan();
                    if (rtnValue == ErrorCodes.SUCCESS) {
                        displayStopScanDialog();
                    }
                    Log.d(TAG, "************************ stop channel scan return value = "
                            + rtnValue + " (" + ErrorCodes.getErrorString(rtnValue)
                            + ")");

                }
            });
        } catch (Exception ex) {
            if (mDialog != null) {
                mDialog.dismiss();
                mDialog = null;
            }
            Log.d(TAG, "exception stacktrace = " + ex.getMessage());
            ex.printStackTrace();
        }
!!!12254476.java!!!	setUpViews() : void
        mTextViewMajor = (TextView) findViewById(R.id.textview_major);
        mTextViewMinor = (TextView) findViewById(R.id.textview_minor);
        mLinearLayoutMajor = (LinearLayout) findViewById(R.id.layout_major);
        mLinearLayoutMinor = (LinearLayout) findViewById(R.id.layout_minor);
        mLayout = (LinearLayout) findViewById(R.id.layout_panel);
        mLayout.setGravity(Gravity.RIGHT | Gravity.TOP);
!!!12254604.java!!!	focusMinorNumber() : void
        // Providing focus to the Minor linear layout
        mLinearLayoutMinor.setVisibility(View.VISIBLE);
        mLinearLayoutMajor.setBackgroundDrawable(null);
        mFocusMajor = false;
!!!12254732.java!!!	isMajorNumberFocused() : boolean
        return mFocusMajor;
!!!12254860.java!!!	dismissPanel() : void
        if (mDialog != null) {
            mDialog.dismiss();
            mDialog = null;
        }
        ChannelPanel.this.finish();
!!!12254988.java!!!	clearAll() : void
        /*
         * Condition check added to avoid removing of ChannelLockScreen when
         * Channel Panel timed out (Fix for issue where
         * "PIN Prompt disappears for locked service" )
         */
        final String runningActivity = WidgetManager.getTopActivityAtStack(mContext);
        if (runningActivity.equalsIgnoreCase(PinActivity.class.getName())) {
            Log.d(TAG, "Calling run().finish()");
            ChannelPanel.this.finish();
        } else {
            Log.d(TAG, "Calling run().exitFromApp()");
            WidgetManager.exitFromApp(mContext);
        }
