format 74
"protobuf_v8" // hardware::ril::mock-ril::src::cpp::protobuf_v8
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/hardware/ril/mock-ril/src/cpp/"
  cpp_src_dir "/home/shchen/work/jellybean/hardware/ril/mock-ril/src/cpp/"
  cpp_namespace "protobuf_v8"
  classview 238476 "cpp"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1778444 "Schema"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3586060 // <generalisation>
	relation 3585932 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 3586060 // <generalisation>
	  b parent class_ref 1770764 // ObjectWrap
      end

      operation 10115340 "Schema"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "self" explicit_type "Handle<Object>"
	  param in name "pool" explicit_type "DescriptorPool"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${volatile}${throw} : pool_(pool) {
      DBG(\"Schema::Schema E:\");
      factory_.SetDelegateToGeneratedFactory(true);
      self->SetInternalField(1, Array::New());
      Wrap(self);
      DBG(\"Schema::Schema X:\");
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 10115468 "~Schema"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
      DBG(\"~Schema::Schema E:\");
      if (pool_ != DescriptorPool::generated_pool())
        delete pool_;
      DBG(\"~Schema::Schema X:\");
    };
"
	
	
	
	
      end

      class 1778572 "Type"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3586188 // <generalisation>
	  relation 3586060 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3586188 // <generalisation>
	    b parent class_ref 1770764 // ObjectWrap
	end

	classrelation 3586316 // schema_ (<unidirectional association>)
	  relation 3586188 --->
	    a role_name "schema_" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3586316 // schema_ (<unidirectional association>)
	    b parent class_ref 1778444 // Schema
	end

	attribute 6830732 "descriptor_"
	  const_attribute public explicit_type "Descriptor"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 10115596 "NewMessage"
	  const cpp_inline public explicit_return_type "Message"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        DBG(\"Type::NewMessage() EX:\");
        return schema_->NewMessage(descriptor_);
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10115724 "Constructor"
	  const cpp_inline public explicit_return_type "Handle<Function>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        DBG(\"Type::Constrocutor() EX:\");
        return handle_->GetInternalField(2).As<Function>();
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10115852 "NewObject"
	  const cpp_inline public explicit_return_type "Local<Object>"
	  nparams 1
	    param in name "properties" explicit_type "Handle<Value>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        DBG(\"Type::NewObjext(properties) EX:\");
        return Constructor()->NewInstance(1, &properties);
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10115980 "Type"
	  cpp_inline public explicit_return_type ""
	  nparams 3
	    param inout name "schema" type class_ref 1778444 // Schema
	    param in name "descriptor" explicit_type "Descriptor"
	    param in name "self" explicit_type "Handle<Object>"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw} : schema_(schema), descriptor_(descriptor) {
        DBG(\"Type::Type(schema, descriptor, self) E:\");
        // Generate functions for bulk conversion between a JS object
        // and an array in descriptor order:
        //   from = function(arr) { this.f0 = arr[0]; this.f1 = arr[1]; ... }
        //   to   = function()    { return [ this.f0, this.f1, ... ] }
        // This is faster than repeatedly calling Get/Set on a v8::Object.
        std::ostringstream from, to;
        from << \"(function(arr) { if(arr) {\";
        to << \"(function() { return [ \";

        for (int i = 0; i < descriptor->field_count(); i++) {
          from <<
            \"var x = arr[\" << i << \"]; \"
            \"if(x !== undefined) this['\" <<
            descriptor->field(i)->camelcase_name() <<
            \"'] = x; \";

          if (i > 0) to << \", \";
          to << \"this['\" << descriptor->field(i)->camelcase_name() << \"']\";
          DBG(\"field name=%s\", descriptor->field(i)->name().c_str());
        }

        from << \" }})\";
        to << \" ]; })\";

        // managed type->schema link
        self->SetInternalField(1, schema_->handle_);

        Handle<Function> constructor =
          Script::Compile(String::New(from.str().c_str()))->Run().As<Function>();
        constructor->SetHiddenValue(String::New(\"type\"), self);

        Handle<Function> bind =
          Script::Compile(String::New(
              \"(function(self) {\"
              \"  var f = this;\"
              \"  return function(arg) {\"
              \"    return f.call(self, arg);\"
              \"  };\"
              \"})\"))->Run().As<Function>();
        Handle<Value> arg = self;
        constructor->Set(String::New(\"parse\"), bind->Call(ParseTemplate->GetFunction(), 1, &arg));
        constructor->Set(String::New(\"serialize\"), bind->Call(SerializeTemplate->GetFunction(), 1, &arg));
        self->SetInternalField(2, constructor);
        self->SetInternalField(3, Script::Compile(String::New(to.str().c_str()))->Run());

        Wrap(self);
        DBG(\"Type::Type(schema, descriptor, self) X:\");
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 10116108 "ToJs"
	  class_operation cpp_inline public explicit_return_type "Handle<Value>"
	  nparams 5
	    param in name "instance" explicit_type "Message"
	    param in name "reflection" explicit_type "Reflection"
	    param in name "field" explicit_type "FieldDescriptor"
	    param in name "message_type" type class_ref 1778572 // Type
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        DBG(\"Type::ToJs(instance, refelction, field, message_type) E:\");
        switch (field->cpp_type()) {
        case FieldDescriptor::CPPTYPE_MESSAGE:
          DBG(\"Type::ToJs CPPTYPE_MESSAGE\");
          return message_type->ToJs(GET(Message));
        case FieldDescriptor::CPPTYPE_STRING: {
          DBG(\"Type::ToJs CPPTYPE_STRING\");
          const string& value = GET(String);
          return String::New(value.data(), value.length());
        }
        case FieldDescriptor::CPPTYPE_INT32:
          DBG(\"Type::ToJs CPPTYPE_INT32\");
          return Integer::New(GET(Int32));
        case FieldDescriptor::CPPTYPE_UINT32:
          DBG(\"Type::ToJs CPPTYPE_UINT32\");
          return Integer::NewFromUnsigned(GET(UInt32));
        case FieldDescriptor::CPPTYPE_INT64:
          DBG(\"Type::ToJs CPPTYPE_INT64\");
          return Number::New(GET(Int64));
        case FieldDescriptor::CPPTYPE_UINT64:
          DBG(\"Type::ToJs CPPTYPE_UINT64\");
          return Number::New(GET(UInt64));
        case FieldDescriptor::CPPTYPE_FLOAT:
          DBG(\"Type::ToJs CPPTYPE_FLOAT\");
          return Number::New(GET(Float));
        case FieldDescriptor::CPPTYPE_DOUBLE:
          DBG(\"Type::ToJs CPPTYPE_DOUBLE\");
          return Number::New(GET(Double));
        case FieldDescriptor::CPPTYPE_BOOL:
          DBG(\"Type::ToJs CPPTYPE_BOOL\");
          return Boolean::New(GET(Bool));
        case FieldDescriptor::CPPTYPE_ENUM:
          DBG(\"Type::ToJs CPPTYPE_ENUM\");
          return String::New(GET(Enum)->name().c_str());
        }

        return Handle<Value>();  // NOTREACHED
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10116236 "ToJs"
	  const cpp_inline public explicit_return_type "Handle<Object>"
	  nparams 1
	    param in name "instance" explicit_type "Message"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        DBG(\"Type::ToJs(Message) E:\");
        const Reflection* reflection = instance.GetReflection();
        const Descriptor* descriptor = instance.GetDescriptor();

        Handle<Array> properties = Array::New(descriptor->field_count());
        for (int i = 0; i < descriptor->field_count(); i++) {
          HandleScope scope;

          const FieldDescriptor* field = descriptor->field(i);
          bool repeated = field->is_repeated();
          if (repeated && !reflection->FieldSize(instance, field)) {
            DBG(\"Ignore repeated field with no size in reflection data\");
            continue;
          }
          if (!repeated && !reflection->HasField(instance, field)) {
            DBG(\"Ignore field with no field in relfection data\");
            continue;
          }

          const Type* child_type =
            (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) ?
            schema_->GetType(field->message_type()) : NULL;

          Handle<Value> value;
          if (field->is_repeated()) {
            int size = reflection->FieldSize(instance, field);
            Handle<Array> array = Array::New(size);
            for (int j = 0; j < size; j++) {
              array->Set(j, ToJs(instance, reflection, field, child_type, j));
            }
            value = array;
          } else {
            value = ToJs(instance, reflection, field, child_type, -1);
          }

          DBG(\"Type::ToJs: set property[%d]=%s\", i, ToCString(value));
          properties->Set(i, value);
        }

        DBG(\"Type::ToJs(Message) X:\");
        return NewObject(properties);
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10116364 "Parse"
	  class_operation cpp_inline public explicit_return_type "Handle<Value>"
	  nparams 1
	    param in name "args" explicit_type "Arguments"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        DBG(\"Type::Parse(args) E:\");
        Type* type = UnwrapThis<Type>(args);
        Buffer* buf = ObjectWrap::Unwrap<Buffer>(args[0]->ToObject());

        Message* message = type->NewMessage();
        message->ParseFromArray(buf->data(), buf->length());
        Handle<Object> result = type->ToJs(*message);
        delete message;

        DBG(\"Type::Parse(args) X:\");
        return result;
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10116492 "ToProto"
	  class_operation cpp_inline public explicit_return_type "bool"
	  nparams 5
	    param inout name "instance" explicit_type "Message"
	    param in name "field" explicit_type "FieldDescriptor"
	    param in name "value" explicit_type "Handle<Value>"
	    param in name "type" type class_ref 1778572 // Type
	    param in name "repeated" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        DBG(\"Type::ToProto(instance, field, value, type, repeated) E:\");
        bool ok = true;
        HandleScope scope;

        DBG(\"Type::ToProto field->name()=%s\", field->name().c_str());
        const Reflection* reflection = instance->GetReflection();
        switch (field->cpp_type()) {
        case FieldDescriptor::CPPTYPE_MESSAGE:
          DBG(\"Type::ToProto CPPTYPE_MESSAGE\");
          ok = type->ToProto(repeated ?
                                reflection->AddMessage(instance, field) :
                                reflection->MutableMessage(instance, field),
                                    value.As<Object>());
          break;
        case FieldDescriptor::CPPTYPE_STRING: {
          DBG(\"Type::ToProto CPPTYPE_STRING\");
          String::AsciiValue ascii(value);
          SET(String, string(*ascii, ascii.length()));
          break;
        }
        case FieldDescriptor::CPPTYPE_INT32:
          DBG(\"Type::ToProto CPPTYPE_INT32\");
          SET(Int32, value->NumberValue());
          break;
        case FieldDescriptor::CPPTYPE_UINT32:
          DBG(\"Type::ToProto CPPTYPE_UINT32\");
          SET(UInt32, value->NumberValue());
          break;
        case FieldDescriptor::CPPTYPE_INT64:
          DBG(\"Type::ToProto CPPTYPE_INT64\");
          SET(Int64, value->NumberValue());
          break;
        case FieldDescriptor::CPPTYPE_UINT64:
          DBG(\"Type::ToProto CPPTYPE_UINT64\");
          SET(UInt64, value->NumberValue());
          break;
        case FieldDescriptor::CPPTYPE_FLOAT:
          DBG(\"Type::ToProto CPPTYPE_FLOAT\");
          SET(Float, value->NumberValue());
          break;
        case FieldDescriptor::CPPTYPE_DOUBLE:
          DBG(\"Type::ToProto CPPTYPE_DOUBLE\");
          SET(Double, value->NumberValue());
          break;
        case FieldDescriptor::CPPTYPE_BOOL:
          DBG(\"Type::ToProto CPPTYPE_BOOL\");
          SET(Bool, value->BooleanValue());
          break;
        case FieldDescriptor::CPPTYPE_ENUM:
          DBG(\"Type::ToProto CPPTYPE_ENUM\");

          // Don't use SET as vd can be NULL
          char error_buff[256];
          const google::protobuf::EnumValueDescriptor* vd;
          int i32_value = 0;
          const char *str_value = NULL;
          const google::protobuf::EnumDescriptor* ed = field->enum_type();

          if (value->IsNumber()) {
            i32_value = value->Int32Value();
            vd = ed->FindValueByNumber(i32_value);
            if (vd == NULL) {
              snprintf(error_buff, sizeof(error_buff),
                  \"Type::ToProto Bad enum value, %d is not a member of enum %s\",
                      i32_value, ed->full_name().c_str());
            }
          } else {
            str_value = ToCString(value);
            // TODO: Why can str_value be corrupted sometimes?
            ALOGD(\"str_value=%s\", str_value);
            vd = ed->FindValueByName(str_value);
            if (vd == NULL) {
              snprintf(error_buff, sizeof(error_buff),
                  \"Type::ToProto Bad enum value, %s is not a member of enum %s\",
                      str_value, ed->full_name().c_str());
            }
          }
          if (vd != NULL) {
            if (repeated) {
               reflection->AddEnum(instance, field, vd);
            } else {
               reflection->SetEnum(instance, field, vd);
            }
          } else {
            v8::ThrowException(String::New(error_buff));
            ok = false;
          }
          break;
        }
        DBG(\"Type::ToProto(instance, field, value, type, repeated) X: ok=%d\", ok);
        return ok;
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10116620 "ToProto"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 2
	    param inout name "instance" explicit_type "Message"
	    param in name "src" explicit_type "Handle<Object>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        DBG(\"ToProto(Message *, Handle<Object>) E:\");

        Handle<Function> to_array = handle_->GetInternalField(3).As<Function>();
        Handle<Array> properties = to_array->Call(src, 0, NULL).As<Array>();
        bool ok = true;
        for (int i = 0; ok && (i < descriptor_->field_count()); i++) {
          Handle<Value> value = properties->Get(i);
          if (value->IsUndefined()) continue;

          const FieldDescriptor* field = descriptor_->field(i);
          const Type* child_type =
            (field->cpp_type() == FieldDescriptor::CPPTYPE_MESSAGE) ?
            schema_->GetType(field->message_type()) : NULL;
          if (field->is_repeated()) {
            if(!value->IsArray()) {
              ok = ToProto(instance, field, value, child_type, true);
            } else {
              Handle<Array> array = value.As<Array>();
              int length = array->Length();
              for (int j = 0; ok && (j < length); j++) {
                ok = ToProto(instance, field, array->Get(j), child_type, true);
              }
            }
          } else {
            ok = ToProto(instance, field, value, child_type, false);
          }
        }
        DBG(\"ToProto(Message *, Handle<Object>) X: ok=%d\", ok);
        return ok;
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10116748 "Serialize"
	  class_operation cpp_inline public explicit_return_type "Handle<Value>"
	  nparams 1
	    param in name "args" explicit_type "Arguments"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Handle<Value> result;
        DBG(\"Serialize(Arguments&) E:\");
        if (!args[0]->IsObject()) {
          DBG(\"Serialize(Arguments&) X: not an object\");
          return v8::ThrowException(args[0]);
        }

        Type* type = UnwrapThis<Type>(args);
        Message* message = type->NewMessage();
        if (type->ToProto(message, args[0].As<Object>())) {
          int length = message->ByteSize();
          Buffer* buffer = Buffer::New(length);
          message->SerializeWithCachedSizesToArray((google::protobuf::uint8*)buffer->data());
          delete message;

          result = buffer->handle_;
        } else {
          result = v8::Undefined();
        }
        DBG(\"Serialize(Arguments&) X\");
        return result;
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10116876 "ToString"
	  class_operation cpp_inline public explicit_return_type "Handle<Value>"
	  nparams 1
	    param in name "args" explicit_type "Arguments"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return String::New(UnwrapThis<Type>(args)->descriptor_->full_name().c_str());
      };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 10117004 "NewMessage"
	cpp_inline public explicit_return_type "Message"
	nparams 1
	  param in name "descriptor" explicit_type "Descriptor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      DBG(\"Schema::NewMessage(descriptor) EX:\");
      return factory_.GetPrototype(descriptor)->New();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10117132 "GetType"
	cpp_inline public return_type class_ref 1778572 // Type
	nparams 1
	  param in name "descriptor" explicit_type "Descriptor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      DBG(\"Schema::GetType(descriptor) E:\");
      Type* result = types_[descriptor];
      if (result) return result;

      result = types_[descriptor] =
        new Type(this, descriptor, TypeTemplate->GetFunction()->NewInstance());

      // managed schema->[type] link
      Handle<Array> types = handle_->GetInternalField(1).As<Array>();
      types->Set(types->Length(), result->handle_);
      DBG(\"Schema::GetType(descriptor) X:\");
      return result;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 6830860 "pool_"
	const_attribute public explicit_type "DescriptorPool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3586444 // types_ (<unidirectional association>)
	relation 3586316 --->
	  stereotype "map"
	  a role_name "types_" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<const Descriptor*,${type}*> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3586444 // types_ (<unidirectional association>)
	  b parent class_ref 1778572 // Type
      end

      attribute 6830988 "factory_"
	public explicit_type "DynamicMessageFactory"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 10117260 "GetType"
	class_operation cpp_inline public explicit_return_type "Handle<Value>"
	nparams 2
	  param in name "name" explicit_type "Local<String>"
	  param in name "args" explicit_type "AccessorInfo"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      DBG(\"Schema::GetType(name, args) E:\");
      Schema* schema = UnwrapThis<Schema>(args);
      const Descriptor* descriptor =
        schema->pool_->FindMessageTypeByName(*String::AsciiValue(name));

      DBG(\"Schema::GetType(name, args) X:\");
      return descriptor ?
        schema->GetType(descriptor)->Constructor() :
        Handle<Function>();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10117388 "NewSchema"
	class_operation cpp_inline public explicit_return_type "Handle<Value>"
	nparams 1
	  param in name "args" explicit_type "Arguments"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
      DBG(\"Schema::NewSchema E: args.Length()=%d\", args.Length());
      if (!args.Length()) {
        return (new Schema(args.This(),
                           DescriptorPool::generated_pool()))->handle_;
      }

      Buffer* buf = ObjectWrap::Unwrap<Buffer>(args[0]->ToObject());

      FileDescriptorSet descriptors;
      if (!descriptors.ParseFromArray(buf->data(), buf->length())) {
        DBG(\"Schema::NewSchema X: bad descriptor\");
        return v8::ThrowException(String::New(\"Malformed descriptor\"));
      }

      DescriptorPool* pool = new DescriptorPool;
      for (int i = 0; i < descriptors.file_size(); i++) {
        pool->BuildFile(descriptors.file(i));
      }

      DBG(\"Schema::NewSchema X\");
      return (new Schema(args.This(), pool))->handle_;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 226188 "protobuf_v8"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 851724 "Schema"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1778444 // Schema
      end
    end
  end
end
