class MdcpController
!!!13370764.java!!!	createActionMap() : Action
        HashMap<Action, KeyCode> map = new HashMap<Action, KeyCode>();
        map.put(Action.CHANNEL_DOWN, KeyCode.CHANNEL_DOWN);
        map.put(Action.CHANNEL_UP, KeyCode.CHANNEL_UP);
        map.put(Action.UP, KeyCode.DPAD_UP);
        map.put(Action.DOWN, KeyCode.DPAD_DOWN);
        map.put(Action.LEFT, KeyCode.DPAD_LEFT);
        map.put(Action.RIGHT, KeyCode.DPAD_RIGHT);
        map.put(Action.SELECT, KeyCode.SELECT);
        map.put(Action.CANCEL, KeyCode.CANCEL);
        map.put(Action.NUM_0, KeyCode.NUM0);
        map.put(Action.NUM_1, KeyCode.NUM1);
        map.put(Action.NUM_2, KeyCode.NUM2);
        map.put(Action.NUM_3, KeyCode.NUM3);
        map.put(Action.NUM_4, KeyCode.NUM4);
        map.put(Action.NUM_5, KeyCode.NUM5);
        map.put(Action.NUM_6, KeyCode.NUM6);
        map.put(Action.NUM_7, KeyCode.NUM7);
        map.put(Action.NUM_8, KeyCode.NUM8);
        map.put(Action.NUM_9, KeyCode.NUM9);
        map.put(Action.DVR, KeyCode.DVR_LIST);
        map.put(Action.GUIDE, KeyCode.GUIDE);
        map.put(Action.PLAY, KeyCode.PLAY);
        map.put(Action.PAUSE, KeyCode.PAUSE);
        map.put(Action.FAST_FORWARD, KeyCode.FAST_FORWARD);
        map.put(Action.REWIND, KeyCode.REWIND);
        map.put(Action.SKIP_FORWARD, KeyCode.SKIP_FORWARD);
        map.put(Action.SKIP_BACK, KeyCode.SKIP_BACK);
        map.put(Action.STOP, KeyCode.STOP);
        map.put(Action.RECORD, KeyCode.RECORD);
        map.put(Action.LIVE, KeyCode.LIVE_TV);
        map.put(Action.CANCEL, KeyCode.CANCEL);
        map.put(Action.PAGE_UP, KeyCode.PAGE_UP);
        map.put(Action.PAGE_DOWN, KeyCode.PAGE_DOWN);
        map.put(Action.INFO, KeyCode.INFO);
        return map;
!!!13370892.java!!!	MdcpController(inout device : DeviceRecord)
        mDevice = device;
        // TODO(justinkoh): work out a better client ID such as the mDNS name.
        mSourceId = "myclientid";
        mSupportedRequests = new HashSet<RequestType>();
        mClient = new SocketClient(mSourceId, device.getAddress(), device.getPort(),
                WireFormat.PROTO);
        setupClientListener();
!!!13371020.java!!!	setupClientListener() : void
        mClient.setListener(new IMdcpClient.Listener() {

            public void onConnectionError(Throwable ex) {
                Log.d(LOG_TAG, "Connection error from socket client.", ex);
                mClient.disconnect();
                if (mListener != null) {
                    mListener.onConnectionError(mDevice);
                }
                onConnectionStateChanged(ConnectionState.DISCONNECTED);
            }

            public void onConnectionStateChanged(ConnectionState state) {
                mState = state;
                if (mListener != null) {
                    mListener.onConnectionStateChanged(mDevice, state);
                }
            }

            public void onEventMessage(EventMessage event) {
                handleEventMessage(event);
            }

            public void onResponseMessage(ResponseMessage response) {
                handleResponseMessage(response);
            }
        });
!!!13371148.java!!!	performAction(inout event : ActionEvent) : void
        if (event.getState() != ActionEvent.State.DOWN) {
            return;
        }
        Action action = event.getAction();
        ensureConnected();
        ensureAwake();
        KeyCode code = ACTION_MAP.get(action);
        if (code == null) {
            // Check for special functions.
            if (action == Action.PLAY_PAUSE) {
                if (mNextPlayPauseIsPlay) {
                    code = KeyCode.PLAY;
                } else {
                    code = KeyCode.PAUSE;
                }
            }
        }
        if (code != null) {
            RequestMessage message = getRequestMessage(
                    RequestType.KEY_ACTION);
            message.setInnerMessage(KeyAction.newBuilder()
                    .setKey(Key.newBuilder().setKeyCode(code))
                    .setState(KeyState.PRESS)
                    .build());
            mClient.sendRequest(message);
        }
        mNextPlayPauseIsPlay = (code == KeyCode.PAUSE)
            || (code == KeyCode.FAST_FORWARD)
            || (code == KeyCode.REWIND);
!!!13371276.java!!!	goTo(in url : String) : boolean
        ensureConnected();
        ensureAwake();
        Uri tvUrl = Uri.parse(url);
        if (TvUriUtils.PASSTHROUGH_URI.toString().equalsIgnoreCase(url)) {
            requestDisplayStatus();
            return true;
        } else if (TvUriUtils.GUIDE_URI.toString().equalsIgnoreCase(url)) {
            performAction(new ActionEvent(Action.GUIDE,
                    ActionEvent.State.DOWN));
            return true;
        } else if (TvUriUtils.DVR_URI.toString().equalsIgnoreCase(url)) {
            performAction(new ActionEvent(Action.DVR,
                    ActionEvent.State.DOWN));
            return true;
        } else if (TvUriUtils.isRecording(tvUrl)) {
            performRecordingAction(RecordingAction.RecordingActionType.RESUME,
                    TvUriUtils.getRecordingId(tvUrl));
            return true;
        } else if (VOD_AUTHORITY.equalsIgnoreCase(tvUrl.getAuthority())) {
            // TODO(justinkoh): will update when tv:// spec changes.
            performVodAction(VodActionType.RESUME,
                    tvUrl.getQueryParameter(PROGRAM_ID_QUERY_PARAMETER));
        }
        return false;
!!!13371404.java!!!	tuneChannel(in channelNumber : String) : void
        ensureConnected();
        ensureAwake();
        RequestMessage message = getRequestMessage(
                RequestType.CHANNEL_TUNE_ACTION);
        message.setInnerMessage(MdcpProto.ChannelTuneAction.newBuilder()
                .setChannelNumber(channelNumber)
                .build());
        mClient.sendRequest(message);
!!!13371532.java!!!	performRecordingAction(inout action : RecordingAction.RecordingActionType, in recordingId : String) : void
        ensureConnected();
        RequestMessage message = getRequestMessage(
                RequestType.RECORDING_ACTION);
        message.setInnerMessage(MdcpProto.RecordingAction.newBuilder()
                .setRecordingId(recordingId)
                .setAction(action)
                .build());
        mClient.sendRequest(message);
!!!13371660.java!!!	performVodAction(inout action : VodActionType, in programId : String) : void
        ensureConnected();
        RequestMessage message = getRequestMessage(RequestType.VOD_ACTION);
        message.setInnerMessage(MdcpProto.VodAction.newBuilder()
                .setAction(action)
                .setProgramId(programId)
                .build());
        mClient.sendRequest(message);
!!!13371788.java!!!	requestChannelList() : void
        ensureConnected();
        RequestMessage message = getRequestMessage(RequestType.GET_CHANNELS);
        message.setInnerMessage(MdcpProto.GetChannels.newBuilder().build());
        mClient.sendRequest(message);
!!!13371916.java!!!	requestRecordingList() : void
        ensureConnected();
        RequestMessage message = getRequestMessage(RequestType.GET_RECORDINGS);
        message.setInnerMessage(MdcpProto.GetRecordings.newBuilder().build());
        mClient.sendRequest(message);
!!!13372044.java!!!	requestDisplayStatus() : void
        ensureConnected();
        RequestMessage message = getRequestMessage(
                RequestType.GET_DISPLAY_STATUS);
        message.setInnerMessage(MdcpProto.GetDisplayStatus.newBuilder()
                .build());
        mClient.sendRequest(message);
!!!13372172.java!!!	isSupportedRequest(inout type : RequestType) : boolean
        return mSupportedRequests.contains(type);
!!!13372300.java!!!	scheduleRecording(in startTimeMs : long, inout channel : Channel, in durationMin : int, inout repeatDays : int) : void
        ensureConnected();
        RequestMessage request = getRequestMessage(
                RequestType.SCHEDULE_TIMED_RECORDING);
        ScheduleTimedRecording.Builder builder =
                ScheduleTimedRecording.newBuilder()
                    .setChannel(channel)
                    .setDuration(durationMin)
                    .setStartDate(startTimeMs);
        if (repeatDays != null) {
            for (int day : repeatDays) {
                builder.addDay(day);
            }
        }
        request.setInnerMessage(builder.build());
        mClient.sendRequest(request);
!!!13372428.java!!!	scheduleRecording(in startTime : long, inout channel : Channel, in durationMin : int, inout id : GuideId, inout filter : RecordFilter) : void
        ensureConnected();
        RequestMessage request = getRequestMessage(
                RequestType.SCHEDULE_PROGRAM_RECORDING);
        ScheduleProgramRecording.Builder builder =
                ScheduleProgramRecording.newBuilder()
                        .setFilter(filter);
        if (id != null) {
            builder.setGuideId(id);
        }
        if (channel != null) {
            builder.setChannel(channel);
        }
        if (startTime != NOT_SET) {
            builder.setStartDate(startTime);
        }
        if (durationMin != NOT_SET) {
            builder.setDuration(durationMin);
        }
        request.setInnerMessage(builder.build());
        mClient.sendRequest(request);
!!!13372556.java!!!	requestDeviceInformation() : void
        ensureConnected();
        RequestMessage request = getRequestMessage(
                RequestType.GET_DEVICE_INFORMATION);
        request.setInnerMessage(MdcpProto.GetDeviceInformation.newBuilder()
                .build());
        mClient.sendRequest(request);
!!!13372684.java!!!	tearDown() : void
        mClient.disconnect();
!!!13372812.java!!!	getRequestMessage(inout type : RequestType) : RequestMessage
        return new RequestMessage(mSourceId, mDevice.getId(), type,
                ++mRequestId);
!!!13372940.java!!!	ensureConnected() : void
        if (mState != ConnectionState.CONNECTED) {
            mClient.connect();
        }
!!!13373068.java!!!	ensureAwake() : void
        if (mIsInStandby) {
            RequestMessage request = getRequestMessage(
                    RequestType.SET_STANDBY_STATUS);
            request.setInnerMessage(MdcpProto.SetStandbyStatus.newBuilder()
                    .setStandby(false)
                    .build());
            mClient.sendRequest(request);
        }
!!!13373196.java!!!	handleResponseMessage(inout response : ResponseMessage) : void
        ResponseType type = response.getResponseType();
        if (ResponseType.CHANNEL_LIST == type) {
            if (mListener != null) {
                ChannelList list = (ChannelList) response.getInnerMessage();
                mListener.onChannelListReceived(mDevice, list.getChannelList());
            }
        } else if (ResponseType.RECORDING_LIST == type) {
            if (mListener != null) {
                RecordingList list = (RecordingList) response.getInnerMessage();
                mListener.onRecordingListReceived(mDevice,
                        list.getRecordingList());
            }
        } else if (ResponseType.DISPLAY_STATUS == type) {
            processDisplayStatus((DisplayStatus) response.getInnerMessage(),
                    MediaStreamEvent.Source.UNKNOWN);
        } else if (ResponseType.REQUEST_LIST == type) {
            setSupportedRequestList((RequestList) response
                    .getInnerMessage());
        } else if (ResponseType.DEVICE_INFORMATION == type) {
            processDeviceInformation(
                    (DeviceInformation) response.getInnerMessage());
        }
!!!13373324.java!!!	setSupportedRequestList(inout requestListMessage : RequestList) : void
        mSupportedRequests.clear();
        for (RequestType type : requestListMessage.getRequestList()) {
            mSupportedRequests.add(type);
        }
!!!13373452.java!!!	handleEventMessage(inout event : EventMessage) : void
        EventType type = event.getEventType();
        if (EventType.DISPLAY_STATUS_EVENT == type) {
            DisplayStatusEvent displayStatusEvent =
                    (DisplayStatusEvent) event.getInnerMessage();
            DisplayStatusEvent.EventSource source =
                    displayStatusEvent.getSource();
            MediaStreamEvent.Source translatedSource = MediaStreamEvent.Source.UNKNOWN;
            if (source == DisplayStatusEvent.EventSource.DEVICE_NONUSER) {
                translatedSource = MediaStreamEvent.Source.NONUSER;
            } else if (source == DisplayStatusEvent.EventSource.DEVICE_USER) {
                translatedSource = MediaStreamEvent.Source.USER;
            }
            processDisplayStatus(displayStatusEvent.getDisplayStatus(),
                    translatedSource);
        } else if (EventType.CHANNEL_LINEUP_CHANGE_EVENT == type
                || EventType.CHANNEL_INFO_CHANGE_EVENT == type) {
            requestChannelList();
        } else if (EventType.RECORDING_STATUS_EVENT == type) {
            requestRecordingList();
        } else if (EventType.DEVICE_INFO_CHANGE_EVENT == type) {
            processDeviceInformation(
                    ((DeviceInfoChangeEvent) event.getInnerMessage())
                            .getDeviceInformation());
        } else if (EventType.CLIENT_INFO_REQUEST_EVENT == type) {
            sendClientDeviceInformation();
        }
!!!13373580.java!!!	processDisplayStatus(inout displayStatus : DisplayStatus, inout source : Source) : void
        mIsInStandby = DisplayMode.STANDBY == displayStatus.getDisplayMode();
        Uri locationUri = getLocationUri(displayStatus);
        if (locationUri != null && mControlListener != null) {
            try {
                mControlListener.onMediaStreamEvent(
                        new MediaStreamEvent(MediaStreamEvent.Action.MEDIA_URI_CHANGED,
                                locationUri, 0, source));
            } catch (RemoteException e) {
                // Do nothing: can't affect anything from this level.
            }
        }
!!!13373708.java!!!	processDeviceInformation(inout info : DeviceInformation) : void
        if (mListener != null) {
            mListener.onDeviceInfoReceived(mDevice, info);
        }
!!!13373836.java!!!	getLocationUri(inout status : DisplayStatus) : Uri
        DisplayMode mode = status.getDisplayMode();
        if (DisplayMode.LIVE_TV == mode) {
            return TvUriUtils.getChannelTvUri(mDevice.getId(),
                    status.getChannel().getName());
        } else if (DisplayMode.RECORDING == mode) {
            return TvUriUtils.getRecordingTvUri(mDevice.getId(),
                    status.getRecording().getId());
        }
        return null;
!!!13373964.java!!!	sendClientDeviceInformation() : void
        RequestMessage request = getRequestMessage(
                RequestType.SEND_CLIENT_INFORMATION);
        request.setInnerMessage(MdcpProto.SendClientInformation.newBuilder()
                .setInfo(DeviceInformation.newBuilder()
                        .setDeviceId(mSourceId)
                        .setModel(Build.MODEL)
                        .setVersion(Build.DISPLAY)
                        .setManufacturer(Build.MANUFACTURER))
                .build());
        mClient.sendRequest(request);
!!!13374732.java!!!	setListener(inout listener : Listener) : void
        mListener = listener;
!!!13374860.java!!!	setControlListener(inout listener : IDeviceListener) : void
        mControlListener = listener;
!!!13374988.java!!!	getDevice() : DeviceRecord
        return mDevice;
