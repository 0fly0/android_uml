class AmpAudioListener
!!!10921868.cpp!!!	watch(in timeout : int) : int
    struct timespec ts, *pts = NULL;

    if (timeout > 0) {
        ts.tv_sec  = (timeout / 1000);
        ts.tv_nsec = (timeout % 1000) * 1000 * 1000;
        pts = &ts;
    }

    __futex_wait(&mStatus, 0, pts);

    return mStatus;
!!!10921996.cpp!!!	safeReceive(inout cli : SocketClient, inout buffer : void, in count : size_t) : ssize_t
    int socket = cli->getSocket();
    ssize_t r;
    size_t n = 0;
    char *ptr = static_cast<char *>(buffer);
    while (n < count) {
        r = TEMP_FAILURE_RETRY(recv(socket, static_cast<void *>(ptr+n), count-n, 0));
        if (r < 0) {
            SLOGE("read error (%s)", strerror(errno));
            return -1;
        } else if (r == 0) {
            SLOGE("peer has performed an orderly shutdown");
            return -1;
        }
        n += static_cast<size_t>(r);
    }
    return static_cast<ssize_t>(n);
!!!10922124.cpp!!!	onDataAvailable(inout cli : SocketClient) : bool
    AmpAudioChunk *audioChunk = (AmpAudioChunk *)(mBuffer);
    size_t chunkSize; // in bytes
    ssize_t count;

    if (mStatus != 0) {
        return false;
    }

    // receive header
    count = safeReceive(cli, static_cast<void *>(audioChunk), sizeof(AmpAudioChunk));
    if (count != sizeof(AmpAudioChunk)) {
        goto error_exit;
    }
#if 0
    SLOGD("audioChunk: fc=%u, cn=%u, bp=%u, sr=%uHZ",
          audioChunk->frameCount, audioChunk->channelNum,
          audioChunk->bitDepth, audioChunk->sampleRate);
#endif
    // calculate size of data chunk in bytes to receive
    chunkSize = audioChunk->frameCount * audioChunk->channelNum *
                    (audioChunk->bitDepth / BITS_PER_BYTE);
    // receive data chunk
    count = safeReceive(cli, static_cast<void *>(audioChunk->chunk.i8), chunkSize);
    if (static_cast<size_t>(count) != chunkSize) {
        return false;
    }

    if (audioReceiver()->receiveAmpAudioChunk(audioChunk) == true)
        return true;
error_exit:
    if (mStatus == 0) {
        mStatus = -1;
        __futex_wake(&mStatus, 1);
    }
    return false;
