class OldStackTraceElementTest
!!!2734235.java!!!	setUp() : void
        original = new Original();
        super.setUp();
!!!2734363.java!!!	tearDown() : void
        super.tearDown();
!!!2734491.java!!!	test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringI() : void
        StackTraceElement ste2 = null;
        try {
            original.pureJavaMethod(new Object());
            fail();
        } catch (Exception e) {
            StackTraceElement ste1 = e.getStackTrace()[0];
            ste2 = new StackTraceElement(ste1.getClassName(),
                    ste1.getMethodName(),
                    ste1.getFileName(),
                    ste1.getLineNumber());
            assertEquals("Incorrect value of class name",
                    ste1.getClassName(), ste2.getClassName());
            assertEquals("Incorrect value of method name",
                    ste1.getMethodName(), ste2.getMethodName());
            assertEquals("Incorrect value of file name",
                    ste1.getFileName(), ste2.getFileName());
            assertEquals("Incorrect value of line number",
                    ste1.getLineNumber(), ste2.getLineNumber());
        }
        assertNotNull("Incorrect stack trace object", ste2);
        try {
            new StackTraceElement(null,
                    ste2.getMethodName(),
                    ste2.getFileName(),
                    ste2.getLineNumber());
            fail("Expected NullPointerException was not thrown");
        } catch (NullPointerException e) {
            // expected
        }
        try {
            new StackTraceElement(ste2.getClassName(),
                    null,
                    ste2.getFileName(),
                    ste2.getLineNumber());
            fail("Expected NullPointerException was not thrown");
        } catch (NullPointerException e) {
            // expected
        }
        try {
            new StackTraceElement(ste2.getClassName(),
                    ste2.getMethodName(),
                    null,
                    ste2.getLineNumber());
        } catch (NullPointerException e) {
            fail("Unexpected exception " + e.toString());
        }
!!!2734619.java!!!	test_equalsLjava_lang_Object() : void
        try {
            original.pureJavaMethod(new Object());
            fail();
        } catch (Exception e) {
            StackTraceElement ste1 = e.getStackTrace()[0];
            StackTraceElement ste2 =
                new StackTraceElement(ste1.getClassName(),
                        ste1.getMethodName(),
                        ste1.getFileName(),
                        ste1.getLineNumber());
            assertEquals("Objects are equaled", ste1, ste2);
        }
!!!2734747.java!!!	test_getClassName() : void
        try {
            original.pureJavaMethod(new Object());
            fail();
        } catch (Exception e) {
            assertEquals("Incorrect class name",
                    "libcore.java.lang.OldStackTraceElementTest$Original",
                    e.getStackTrace()[0].getClassName());
            assertEquals("Incorrect class name",
                    "libcore.java.lang.OldStackTraceElementTest",
                    e.getStackTrace()[1].getClassName());
        }
!!!2734875.java!!!	test_getFileName() : void
        try {
            original.pureJavaMethod(new Object());
            fail();
        } catch (Exception e) {
            assertEquals("Incorrect file name",
                    "OldStackTraceElementTest.java",
                    e.getStackTrace()[0].getFileName());
            assertEquals("Incorrect file name",
                    "OldStackTraceElementTest.java",
                    e.getStackTrace()[1].getFileName());
        }
!!!2735003.java!!!	test_getLineNumber() : void
        try {
            original.pureJavaMethod(new Object());
            fail();
        } catch (Exception e) {
            assertEquals("Incorrect line number",
                    26, e.getStackTrace()[0].getLineNumber());
        }
!!!2735131.java!!!	test_getMethodName() : void
        try {
            original.pureJavaMethod(new Object());
            fail();
        } catch (Exception e) {
            assertEquals("Incorrect method name",
                    "pureJavaMethod",
                    e.getStackTrace()[0].getMethodName());
            assertEquals("Incorrect method name",
                    "test_getMethodName",
                    e.getStackTrace()[1].getMethodName());
        }
!!!2735259.java!!!	test_hashCode() : void
        try {
            original.pureJavaMethod(new Object());
            fail();
        } catch (Exception e) {
            StackTraceElement ste1 = e.getStackTrace()[0];
            StackTraceElement ste2 =
                new StackTraceElement(ste1.getClassName(),
                        ste1.getMethodName(),
                        ste1.getFileName(),
                        ste1.getLineNumber());
            assertEquals("Incorrect value of hash code",
                    ste1.hashCode(), ste2.hashCode());
            assertFalse("Incorrect value of hash code",
                    ste1.hashCode() == e.getStackTrace()[1].hashCode());
        }
!!!2735387.java!!!	test_isNativeMethod() : void
        try {
            original.pureJavaMethod(new Object());
            fail();
        } catch (Exception e) {
            assertFalse("Incorrect method type",
                    e.getStackTrace()[0].isNativeMethod());
        }
        try {
            original.pureNativeMethod(new Object());
            fail();
        } catch (Error e) {
            assertTrue("Incorrect method type",
                    e.getStackTrace()[0].isNativeMethod());
        }
!!!2735515.java!!!	test_toString() : void
        try {
            original.pureJavaMethod(new Object());
            fail();
        } catch (Exception e) {
            StackTraceElement ste = e.getStackTrace()[0];
            assertTrue("String representation doesn't contain a package name",
                    ste.toString().contains(getClass().getPackage().getName()));
            assertTrue("String representation doesn't contain a class name",
                    ste.toString().contains("Original"));
            assertTrue("String representation doesn't contain a file name",
                    ste.toString().contains("OldStackTraceElementTest.java"));
            assertTrue("String representation doesn't contain a line number",
                    ste.toString().contains("26"));
            assertTrue("String representation doesn't contain a method name",
                    ste.toString().contains("pureJavaMethod"));
        }
