class AutoCorrection
!!!12766476.java!!!	AutoCorrection()
        // Purely static class: can't instantiate.
!!!12766604.java!!!	computeAutoCorrectionWord(in dictionaries : ConcurrentHashMap<String, Dictionary>, in wordComposer : WordComposer, in suggestions : ArrayList<SuggestedWordInfo>, in consideredWord : CharSequence, in autoCorrectionThreshold : float, in whitelistedWord : CharSequence) : CharSequence
        if (hasAutoCorrectionForWhitelistedWord(whitelistedWord)) {
            return whitelistedWord;
        } else if (hasAutoCorrectionForConsideredWord(
                dictionaries, wordComposer, suggestions, consideredWord)) {
            return consideredWord;
        } else if (hasAutoCorrectionForBinaryDictionary(wordComposer, suggestions,
                consideredWord, autoCorrectionThreshold)) {
            return suggestions.get(0).mWord;
        }
        return null;
!!!12766732.java!!!	isValidWord(in dictionaries : ConcurrentHashMap<String, Dictionary>, inout word : CharSequence, inout ignoreCase : boolean) : boolean
        if (TextUtils.isEmpty(word)) {
            return false;
        }
        final CharSequence lowerCasedWord = word.toString().toLowerCase();
        for (final String key : dictionaries.keySet()) {
            if (key.equals(Suggest.DICT_KEY_WHITELIST)) continue;
            final Dictionary dictionary = dictionaries.get(key);
            // It's unclear how realistically 'dictionary' can be null, but the monkey is somehow
            // managing to get null in here. Presumably the language is changing to a language with
            // no main dictionary and the monkey manages to type a whole word before the thread
            // that reads the dictionary is started or something?
            // Ideally the passed map would come out of a {@link java.util.concurrent.Future} and
            // would be immutable once it's finished initializing, but concretely a null test is
            // probably good enough for the time being.
            if (null == dictionary) continue;
            if (dictionary.isValidWord(word)
                    || (ignoreCase && dictionary.isValidWord(lowerCasedWord))) {
                return true;
            }
        }
        return false;
!!!12766860.java!!!	getMaxFrequency(in dictionaries : ConcurrentHashMap<String, Dictionary>, inout word : CharSequence) : int
        if (TextUtils.isEmpty(word)) {
            return Dictionary.NOT_A_PROBABILITY;
        }
        int maxFreq = -1;
        for (final String key : dictionaries.keySet()) {
            if (key.equals(Suggest.DICT_KEY_WHITELIST)) continue;
            final Dictionary dictionary = dictionaries.get(key);
            if (null == dictionary) continue;
            final int tempFreq = dictionary.getFrequency(word);
            if (tempFreq >= maxFreq) {
                maxFreq = tempFreq;
            }
        }
        return maxFreq;
!!!12766988.java!!!	allowsToBeAutoCorrected(in dictionaries : ConcurrentHashMap<String, Dictionary>, in word : CharSequence, in ignoreCase : boolean) : boolean
        final WhitelistDictionary whitelistDictionary =
                (WhitelistDictionary)dictionaries.get(Suggest.DICT_KEY_WHITELIST);
        // If "word" is in the whitelist dictionary, it should not be auto corrected.
        if (whitelistDictionary != null
                && whitelistDictionary.shouldForciblyAutoCorrectFrom(word)) {
            return true;
        }
        return !isValidWord(dictionaries, word, ignoreCase);
!!!12767116.java!!!	hasAutoCorrectionForWhitelistedWord(inout whiteListedWord : CharSequence) : boolean
        return whiteListedWord != null;
!!!12767244.java!!!	hasAutoCorrectionForConsideredWord(in dictionaries : ConcurrentHashMap<String, Dictionary>, in wordComposer : WordComposer, in suggestions : ArrayList<SuggestedWordInfo>, in consideredWord : CharSequence) : boolean
        if (TextUtils.isEmpty(consideredWord)) return false;
        return wordComposer.size() > 1 && suggestions.size() > 0
                && !allowsToBeAutoCorrected(dictionaries, consideredWord, false);
!!!12767372.java!!!	hasAutoCorrectionForBinaryDictionary(inout wordComposer : WordComposer, inout suggestions : ArrayList<SuggestedWordInfo>, inout consideredWord : CharSequence, in autoCorrectionThreshold : float) : boolean
        if (wordComposer.size() > 1 && suggestions.size() > 0) {
            final SuggestedWordInfo autoCorrectionSuggestion = suggestions.get(0);
            //final int autoCorrectionSuggestionScore = sortedScores[0];
            final int autoCorrectionSuggestionScore = autoCorrectionSuggestion.mScore;
            // TODO: when the normalized score of the first suggestion is nearly equals to
            //       the normalized score of the second suggestion, behave less aggressive.
            final float normalizedScore = BinaryDictionary.calcNormalizedScore(
                    consideredWord.toString(), autoCorrectionSuggestion.mWord.toString(),
                    autoCorrectionSuggestionScore);
            if (DBG) {
                Log.d(TAG, "Normalized " + consideredWord + "," + autoCorrectionSuggestion + ","
                        + autoCorrectionSuggestionScore + ", " + normalizedScore
                        + "(" + autoCorrectionThreshold + ")");
            }
            if (normalizedScore >= autoCorrectionThreshold) {
                if (DBG) {
                    Log.d(TAG, "Auto corrected by S-threshold.");
                }
                return true;
            }
        }
        return false;
