class JMediaCodec
!!!1158028.cpp!!!	JMediaCodec(inout env : JNIEnv, in thiz : jobject, in name : char, in nameIsType : bool, in encoder : bool)
    jclass clazz = env->GetObjectClass(thiz);
    CHECK(clazz != NULL);

    mClass = (jclass)env->NewGlobalRef(clazz);
    mObject = env->NewWeakGlobalRef(thiz);

    mLooper = new ALooper;
    mLooper->setName("MediaCodec_looper");

    mLooper->start(
            false,      // runOnCallingThread
            false,       // canCallJava
            PRIORITY_DEFAULT);

    if (nameIsType) {
        mCodec = MediaCodec::CreateByType(mLooper, name, encoder);
    } else {
        mCodec = MediaCodec::CreateByComponentName(mLooper, name);
    }
!!!1158156.cpp!!!	initCheck() : status_t
    return mCodec != NULL ? OK : NO_INIT;
!!!1158284.cpp!!!	configure(in format : sp<AMessage>, in surfaceTexture : sp<ISurfaceTexture>, in crypto : sp<ICrypto>, in flags : int) : status_t
    sp<SurfaceTextureClient> client;
    if (surfaceTexture != NULL) {
        mSurfaceTextureClient = new SurfaceTextureClient(surfaceTexture);
    } else {
        mSurfaceTextureClient.clear();
    }

    return mCodec->configure(format, mSurfaceTextureClient, crypto, flags);
!!!1158412.cpp!!!	start() : status_t
    return mCodec->start();
!!!1158540.cpp!!!	stop() : status_t
    mSurfaceTextureClient.clear();

    return mCodec->stop();
!!!1158668.cpp!!!	flush() : status_t
    return mCodec->flush();
!!!1158796.cpp!!!	queueInputBuffer(in index : size_t, in offset : size_t, in size : size_t, in timeUs : int64_t, in flags : uint32_t, inout errorDetailMsg : AString) : status_t
    return mCodec->queueInputBuffer(
            index, offset, size, timeUs, flags, errorDetailMsg);
!!!1158924.cpp!!!	queueSecureInputBuffer(in index : size_t, in offset : size_t, in subSamples : SubSample, in numSubSamples : size_t, in key : uint8_t, in iv : uint8_t, in mode : Mode, in presentationTimeUs : int64_t, in flags : uint32_t, inout errorDetailMsg : AString) : status_t
    return mCodec->queueSecureInputBuffer(
            index, offset, subSamples, numSubSamples, key, iv, mode,
            presentationTimeUs, flags, errorDetailMsg);
!!!1159052.cpp!!!	dequeueInputBuffer(inout index : size_t, in timeoutUs : int64_t) : status_t
    return mCodec->dequeueInputBuffer(index, timeoutUs);
!!!1159180.cpp!!!	dequeueOutputBuffer(inout env : JNIEnv, in bufferInfo : jobject, inout index : size_t, in timeoutUs : int64_t) : status_t
    size_t size, offset;
    int64_t timeUs;
    uint32_t flags;
    status_t err;
    if ((err = mCodec->dequeueOutputBuffer(
                    index, &offset, &size, &timeUs, &flags, timeoutUs)) != OK) {
        return err;
    }

    jclass clazz = env->FindClass("android/media/MediaCodec$BufferInfo");

    jmethodID method = env->GetMethodID(clazz, "set", "(IIJI)V");
    env->CallVoidMethod(bufferInfo, method, offset, size, timeUs, flags);

    return OK;
!!!1159308.cpp!!!	releaseOutputBuffer(in index : size_t, in render : bool) : status_t
    return render
        ? mCodec->renderOutputBufferAndRelease(index)
        : mCodec->releaseOutputBuffer(index);
!!!1159436.cpp!!!	getOutputFormat(inout env : JNIEnv, inout format : jobject) : status_t
    sp<AMessage> msg;
    status_t err;
    if ((err = mCodec->getOutputFormat(&msg)) != OK) {
        return err;
    }

    return ConvertMessageToMap(env, msg, format);
!!!1159564.cpp!!!	getBuffers(inout env : JNIEnv, in input : bool, inout bufArray : jobjectArray) : status_t
    Vector<sp<ABuffer> > buffers;

    status_t err =
        input
            ? mCodec->getInputBuffers(&buffers)
            : mCodec->getOutputBuffers(&buffers);

    if (err != OK) {
        return err;
    }

    jclass byteBufferClass = env->FindClass("java/nio/ByteBuffer");
    CHECK(byteBufferClass != NULL);

    jmethodID orderID = env->GetMethodID(
            byteBufferClass,
            "order",
            "(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;");

    CHECK(orderID != NULL);

    jclass byteOrderClass = env->FindClass("java/nio/ByteOrder");
    CHECK(byteOrderClass != NULL);

    jmethodID nativeOrderID = env->GetStaticMethodID(
            byteOrderClass, "nativeOrder", "()Ljava/nio/ByteOrder;");
    CHECK(nativeOrderID != NULL);

    jobject nativeByteOrderObj =
        env->CallStaticObjectMethod(byteOrderClass, nativeOrderID);
    CHECK(nativeByteOrderObj != NULL);

    *bufArray = (jobjectArray)env->NewObjectArray(
            buffers.size(), byteBufferClass, NULL);

    for (size_t i = 0; i < buffers.size(); ++i) {
        const sp<ABuffer> &buffer = buffers.itemAt(i);

        jobject byteBuffer =
            env->NewDirectByteBuffer(
                buffer->base(),
                buffer->capacity());

        jobject me = env->CallObjectMethod(
                byteBuffer, orderID, nativeByteOrderObj);
        env->DeleteLocalRef(me);
        me = NULL;

        env->SetObjectArrayElement(
                *bufArray, i, byteBuffer);

        env->DeleteLocalRef(byteBuffer);
        byteBuffer = NULL;
    }

    env->DeleteLocalRef(nativeByteOrderObj);
    nativeByteOrderObj = NULL;

    return OK;
!!!1159692.cpp!!!	setVideoScalingMode(in mode : int) : void
    if (mSurfaceTextureClient != NULL) {
        native_window_set_scaling_mode(mSurfaceTextureClient.get(), mode);
    }
!!!1159820.cpp!!!	~JMediaCodec()
    if (mCodec != NULL) {
        mCodec->release();
        mCodec.clear();
    }

    JNIEnv *env = AndroidRuntime::getJNIEnv();

    env->DeleteWeakGlobalRef(mObject);
    mObject = NULL;
    env->DeleteGlobalRef(mClass);
    mClass = NULL;
