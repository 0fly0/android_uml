class MediaDeviceView
!!!13239180.java!!!	MediaDeviceView(inout context : Context)
        this(context, null);
!!!13239308.java!!!	MediaDeviceView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!13239436.java!!!	MediaDeviceView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        mOptions = 0;
        mServiceState = ServiceState.DISCONNECTED;
        mTargetServiceState = ServiceState.NONE;

        setFocusable(false);

        mDefaultDelegate = new BasicDelegate();
        mDelegate = mDefaultDelegate;

        mServiceConnection = new MediaDevicesServiceConnection(getContext()) {
                public void onConnected() {
                    mLog.d("onConnected; target state: " + mTargetServiceState);
                    mServiceState = ServiceState.CONNECTED;

                    if (mTargetServiceState == ServiceState.DISCONNECTED) {
                        post(new Runnable() {
                                @Override
                                public void run() {
                                    disconnect();
                                }
                            });
                        return;
                    }

                    try {
                        IMediaDevicesSessionListener listener = createSessionListener();
                        mSession = mServiceConnection.getBoundService().startSession(mOptions,
                                listener);
                        mSessionListener = listener;
                    } catch (RemoteException ex) {
                        mLog.w("failed to create session", ex);
                        // TODO(mlindner): Notify app of error and possibly
                        // display an error indicator.
                        return;
                    }

                    resumeMediaAsNeeded();
                }

                public void onDisconnected() {
                    mLog.d("onDisconnected; target state: " + mTargetServiceState
                            + ", mServiceConnection.isConnected()? "
                            + mServiceConnection.isConnected());

                    mSession = null;
                    mSessionListener = null;
                    mDeviceInfo = null;
                    mLastReportedState = null;

                    mServiceState = ServiceState.DISCONNECTED;

                    if (mTargetServiceState == ServiceState.CONNECTED) {
                        post(new Runnable() {
                                @Override
                                public void run() {
                                    connect();
                                }
                            });
                        return;
                    }
                }
            };

        mSurfaceHolderCallback = new SurfaceHolder.Callback() {

                @Override
                public void surfaceChanged(SurfaceHolder holder, int format,
                        int w, int h) {
                    mLog.e("surfaceChanged");
                    setWidthHeight(w, h);
                    updateWidthHeight();
                }

                @Override
                public void surfaceCreated(SurfaceHolder holder) {
                    mLog.d("surfaceCreated");
                    // TODO(mlindner): verify which thread this is on
                    mSurface = holder.getSurface();
                    Rect rect = holder.getSurfaceFrame();
                    setWidthHeight(rect.right - rect.left, rect.bottom - rect.top);
                    resumeMediaAsNeeded();
                }

                @Override
                public void surfaceDestroyed(SurfaceHolder holder) {
                    mLog.d("surfaceDestroyed");
                    mSurface = null;
                    disconnect();
                }

            };

        getHolder().addCallback(mSurfaceHolderCallback);
        getHolder().setSizeFromLayout();
        getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
        getHolder().setKeepScreenOn((mOptions & KEEP_SCREEN_ON_WHILE_PLAYING) != 0);

        mLatestDeviceId = TvUriUtils.DEFAULT_DEVICE_ID;
!!!13239564.java!!!	setWidthHeight(in width : int, in height : int) : void
        mWidth = width;
        mHeight = height;
!!!13239692.java!!!	updateWidthHeight() : void
        if (mSession != null && mWidth != 0 && mHeight != 0) {
            try {
                mSession.viewSizeChanged(mWidth, mHeight);
            } catch (RemoteException ex) {
                mLog.w("Exception while calling viewSizeChanged", ex);
            }
        }
!!!13239820.java!!!	setDelegate(inout delegate : Delegate) : void
        mDelegate = (delegate != null) ? delegate : mDefaultDelegate;
!!!13239948.java!!!	setOptions(in options : int) : void
        mOptions = options;
!!!13240076.java!!!	connect() : void
        mLog.d("connect(): mServiceState= " + mServiceState);
        switch (mServiceState) {
            case CONNECTING:
            case CONNECTED:
                // Do nothing.
                break;

            case DISCONNECTING:
                // We need to reconnect after the disconnect completes.
                mTargetServiceState = ServiceState.CONNECTED;
                break;

            case DISCONNECTED:
                // Reconnect immediately.
                mServiceState = ServiceState.CONNECTING;
                mTargetServiceState = ServiceState.CONNECTED;
                mServiceConnection.connect();
                break;
        }
!!!13240204.java!!!	disconnect() : void
        mRequestedUri = null;
        mCurrentUri = null;
        mShouldStartPlaying = false;
        mDesiredVolume = Float.NaN;

        mLog.d("disconnect(): current state= " + mServiceState);

        switch (mServiceState) {
            case CONNECTING:
                // We need to disconnect after the connect completes.
                mTargetServiceState = ServiceState.DISCONNECTED;
                break;

            case CONNECTED:
                // Disconnect immediately.
                mServiceState = ServiceState.DISCONNECTING;
                mTargetServiceState = ServiceState.DISCONNECTED;
                doDisconnect();
                break;

            case DISCONNECTING:
            case DISCONNECTED:
                // Do nothing.
                break;
        }
!!!13240332.java!!!	doDisconnect() : void
        if (mSession != null) {
            try {
                mSession.destroy();
            } catch (RemoteException ex) {
                mLog.w("Exception while destroying session", ex);
            }
            mSession = null;
        }

        mServiceConnection.disconnect();
!!!13240460.java!!!	isConnected() : boolean
        // TODO(jaeseo): Revisit after making sure we should be atomically changing the value of
        // mServiceState and the mSession and not let them out of sync.
        return (mServiceState == ServiceState.CONNECTED && mSession != null);
!!!13240588.java!!!	setMediaUri(inout uri : Uri) : void
        if (isConnected()) {
            try {
                mSession.setMediaUri(uri);
            } catch (RemoteException ex) {
                // TODO(mlindner): Notify app of error and possibly display an
                // error indicator.
            }
        } else {
            mRequestedUri = uri;
        }
!!!13240716.java!!!	getMediaUri() : Uri
        return mCurrentUri;
!!!13240844.java!!!	performAction(inout action : Action) : void
        performAction(ActionEvent.forAction(action));
!!!13240972.java!!!	performAction(inout event : ActionEvent) : void
        mLog.d("performAction() event=" + event + ", mServiceState=" + mServiceState);
        // If we're connected to a device, perform the action.
        if (isConnected()) {
            try {
                mSession.performAction(event);
            } catch (RemoteException ex) {
                throw new MediaDeviceException(ex);
            }
        } else {
            // Otherwise, if we're currently disconnected, AND no state
            // transition is currently in progress, then reset the connection
            // so that we'll re-connect to the device.

            // TODO(mlindner): Implement reset logic.
        }
!!!13241100.java!!!	performAction(inout event : KeyEvent) : boolean
        mLog.d("Performing action for key with keycode=" + event.getKeyCode()
                + ", scancode=" + event.getScanCode());
        Action action = MediaDevicesActions.lookupAction(event);
        if (action != null) {
            performAction(ActionEvent.fromKeyEvent(event, action));
            return true;
        }
        return false;
!!!13241228.java!!!	performAction(inout event : MotionEvent) : boolean
        ActionEvent actionEvent = ActionEvent.fromTouchEvent(event);
        if ((actionEvent != null) && isConnected() && (mDeviceInfo != null)
                && mDeviceInfo.hasCapability(Capability.HAS_POINTER)) {
            performAction(actionEvent);
            return true;
        }
        return false;
!!!13241356.java!!!	performGenericMotionAction(inout event : MotionEvent) : boolean
        ActionEvent actionEvent = ActionEvent.fromGenericMotionEvent(event);
        if ((actionEvent != null) && isConnected() && (mDeviceInfo != null)
                && mDeviceInfo.hasCapability(Capability.HAS_POINTER)) {
            performAction(actionEvent);
            return true;
        }
        return false;
!!!13241484.java!!!	enableCaptionStream(inout enable : boolean) : void
        if (isConnected()) {
            try {
                mSession.enableCaptionStream(enable);
            } catch (RemoteException e) {
                throw new MediaDeviceException(e);
            }
        } else {
            throw new IllegalStateException("Not connected");
        }
!!!13241612.java!!!	startPlayback() : void
        mLog.d("startPlayback(); mServiceState=" + mServiceState + ", mSurface=" + mSurface);
        if (isConnected() && (mSurface != null)) {
            try {
                mSession.play();
            } catch (RemoteException ex) {
                mLog.w("unable to start playback", ex);
                // TODO(mlindner): Notify app of error and possibly display an
                // error indicator.
            }
        } else if (mServiceState == ServiceState.CONNECTING
                || (mServiceState == ServiceState.CONNECTED && mSurface == null)) {
            mShouldStartPlaying = true;
        } else {
            throw new IllegalStateException("Not connected");
        }
!!!13241740.java!!!	stopPlayback() : void
        // If the surface is already destroyed, it means we've been torn down
        // already, so there's nothing to do.
        if (mSurface == null) return;

        if (isConnected()) {
            try {
                mSession.stop();
            } catch (RemoteException ex) {
                mLog.w("unable to stop playback", ex);
                // TODO(mlindner): Notify app of error and possibly display an
                // error indicator.
            }
        } else if (mServiceState == ServiceState.CONNECTING) {
            mShouldStartPlaying = false;
        } else {
            throw new IllegalStateException("Not connected");
        }
!!!13241868.java!!!	isPlaying() : boolean
        boolean playing = false;

        if (isConnected()) {
            try {
                playing = mSession.isPlaying();
            } catch (RemoteException ex) {
            }
        }

        return playing;
!!!13241996.java!!!	setVolume(in volume : float) : void
        if (isConnected()) {
            try {
                mSession.setVolume(volume);
                mDesiredVolume = Float.NaN;
            } catch (RemoteException ex) {
                mLog.w("unable to set volume", ex);
                // TODO(mlindner): Notify app of error and possibly display an
                // error indicator.
            }
        } else {
            // Not yet connected; save the volume for later.
            mDesiredVolume = volume;
        }
!!!13242124.java!!!	setKeepScreenOnWhilePlaying(inout on : boolean) : void
        if (on) {
            mOptions |= KEEP_SCREEN_ON_WHILE_PLAYING;
        } else {
            mOptions &= ~KEEP_SCREEN_ON_WHILE_PLAYING;
        }
        SurfaceHolder holder = getHolder();
        if (holder != null) {
            holder.setKeepScreenOn(on);
        }
!!!13242252.java!!!	getDeviceInfo() : Device
        return mDeviceInfo;
!!!13242380.java!!!	hasDevice() : boolean
        return mDeviceInfo != null;
!!!13242508.java!!!	getLatestDeviceId() : String
        return mLatestDeviceId;
!!!13242636.java!!!	hasMultiplePairedDevices() : boolean
        if (isConnected()) {
            try {
                return mServiceConnection.getBoundService().hasMultiplePairedDevices();
            } catch (RemoteException e) {
                throw new MediaDeviceException(e);
            }
        } else {
            throw new IllegalStateException("Not connected");
        }
!!!13242764.java!!!	createSessionListener() : IMediaDevicesSessionListener
        return new IMediaDevicesSessionListener.Stub() {
                @Override
                public void onDeviceConnected(final Device deviceInfo) {
                    mLog.d("onDeviceConnected: device=" + deviceInfo);
                    mDeviceInfo = deviceInfo;
                    mCurrentUri = null;
                    mLatestDeviceId = mDeviceInfo.getId();
                    reportStateIfNeeded();
                    post(new Runnable() {
                            @Override
                            public void run() {
                                mDelegate.onDeviceAcquired(deviceInfo);
                            }
                        });
                    if (!Float.isNaN(mDesiredVolume)) {
                        mLog.d("Setting deferred volume of " + mDesiredVolume);
                        setVolume(mDesiredVolume);
                    }
                }

                @Override
                public void onDeviceDisconnected(final DeviceDisconnectReason reason) {
                    mLog.d("onDeviceDisconnected: reason=" + reason);
                    mDeviceInfo = null;
                    mCurrentUri = null;
                    post(new Runnable() {
                            @Override
                            public void run() {
                                mDelegate.onDeviceReleased(reason);
                            }
                        });
                }

                @Override
                public void onMediaUriUnavailable(final Uri uri,
                        final MediaUriUnavailableReason reason) {
                    post(new Runnable() {
                            @Override
                            public void run() {
                                mDelegate.onMediaUriUnavailable(uri, reason);
                            }
                        });
                }

                @Override
                public void onMediaStreamEvent(final MediaStreamEvent event) {
                    mLog.d("onMediaStreamEvent: event=" + event);
                    post(new Runnable() {
                            @Override
                            public void run() {
                                Uri uri = event.getUri();
                                if (uri != null) {
                                    mCurrentUri = uri;
                                }
                                mDelegate.onMediaStreamEvent(event);
                            }
                        });
                }

                @Override
                public void onMultipleMediaUrisAvailable(final Uri request,
                        final List<Uri> uris) {
                    post(new Runnable() {
                            @Override
                            public void run() {
                                mDelegate.onMultipleMediaUrisAvailable(request, uris);
                            }
                        });
                }

                @Override
                public void onCaptionStreamConnected(final boolean connected) {
                    post(new Runnable() {
                            @Override
                            public void run() {
                                mDelegate.onCaptionStreamStateChanged(connected);
                            }
                        });
                }

                @Override
                public void onCaptionData(final Caption data) {
                    post(new Runnable() {
                            @Override
                            public void run() {
                                mDelegate.onCaptionData(data);
                            }
                        });
                }
            };
!!!13242892.java!!!	resumeMediaAsNeeded() : void
        mLog.d("ResumeMediaAsNeeded; mRequestedUri=" + mRequestedUri
                + ", mShouldStartPlaying=" + mShouldStartPlaying);
        if (mSession == null) return;

        // Attach our surface to the session, if we can.
        if (mSurface != null) {
            try {
                mSession.attachSurface(mSurface);
                updateWidthHeight();

                // Set URI and/or start playback if necessary.
                if (mRequestedUri != null) {
                    mSession.setMediaUri(mRequestedUri);
                    mRequestedUri = null;
                }
                mLog.d("mShouldStartPlaying=" + mShouldStartPlaying);
                if (mShouldStartPlaying) {
                    mLog.d("Calling play() on session");
                    mSession.play();
                    mShouldStartPlaying = false;
                }
            } catch (RemoteException ex) {
                // TODO(mlindner): Notify app of error and possibly display an
                // error indicator.
            }
        }
!!!13243020.java!!!	reportState(inout state : ClientState) : void
        mLastReportedState = state;
        reportStateIfNeeded();
!!!13243148.java!!!	reportStateIfNeeded() : void
        if ((mLastReportedState != null) && hasDevice()) {
            try {
                mSession.reportState(mLastReportedState);
                mLastReportedState = null;
            } catch (RemoteException ex) {}
        }
