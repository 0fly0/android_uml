class Color
!!!6363660.java!!!	alpha(in color : int) : int
        return color >>> 24;
!!!6363788.java!!!	red(in color : int) : int
        return (color >> 16) & 0xFF;
!!!6363916.java!!!	green(in color : int) : int
        return (color >> 8) & 0xFF;
!!!6364044.java!!!	blue(in color : int) : int
        return color & 0xFF;
!!!6364172.java!!!	rgb(in red : int, in green : int, in blue : int) : int
        return (0xFF << 24) | (red << 16) | (green << 8) | blue;
!!!6364300.java!!!	argb(in alpha : int, in red : int, in green : int, in blue : int) : int
        return (alpha << 24) | (red << 16) | (green << 8) | blue;
!!!6364428.java!!!	hue(in color : int) : float
        int r = (color >> 16) & 0xFF;
        int g = (color >> 8) & 0xFF;
        int b = color & 0xFF;

        int V = Math.max(b, Math.max(r, g));
        int temp = Math.min(b, Math.min(r, g));

        float H;

        if (V == temp) {
            H = 0;
        } else {
            final float vtemp = (float) (V - temp);
            final float cr = (V - r) / vtemp;
            final float cg = (V - g) / vtemp;
            final float cb = (V - b) / vtemp;

            if (r == V) {
                H = cb - cg;
            } else if (g == V) {
                H = 2 + cr - cb;
            } else {
                H = 4 + cg - cr;
            }

            H /= 6.f;
            if (H < 0) {
                H++;
            }
        }

        return H;
!!!6364556.java!!!	saturation(in color : int) : float
        int r = (color >> 16) & 0xFF;
        int g = (color >> 8) & 0xFF;
        int b = color & 0xFF;


        int V = Math.max(b, Math.max(r, g));
        int temp = Math.min(b, Math.min(r, g));

        float S;

        if (V == temp) {
            S = 0;
        } else {
            S = (V - temp) / (float) V;
        }

        return S;
!!!6364684.java!!!	brightness(in color : int) : float
        int r = (color >> 16) & 0xFF;
        int g = (color >> 8) & 0xFF;
        int b = color & 0xFF;

        int V = Math.max(b, Math.max(r, g));

        return (V / 255.f);
!!!6364812.java!!!	parseColor(in colorString : String) : int
        if (colorString.charAt(0) == '#') {
            // Use a long to avoid rollovers on #ffXXXXXX
            long color = Long.parseLong(colorString.substring(1), 16);
            if (colorString.length() == 7) {
                // Set the alpha value
                color |= 0x00000000ff000000;
            } else if (colorString.length() != 9) {
                throw new IllegalArgumentException("Unknown color");
            }
            return (int)color;
        } else {
            Integer color = sColorNameMap.get(colorString.toLowerCase(Locale.US));
            if (color != null) {
                return color;
            }
        }
        throw new IllegalArgumentException("Unknown color");
!!!6364940.java!!!	HSBtoColor(inout hsb : float) : int
        return HSBtoColor(hsb[0], hsb[1], hsb[2]);
!!!6365068.java!!!	HSBtoColor(in h : float, in s : float, in b : float) : int
        h = MathUtils.constrain(h, 0.0f, 1.0f);
        s = MathUtils.constrain(s, 0.0f, 1.0f);
        b = MathUtils.constrain(b, 0.0f, 1.0f);
        
        float red = 0.0f;
        float green = 0.0f;
        float blue = 0.0f;
        
        final float hf = (h - (int) h) * 6.0f;
        final int ihf = (int) hf;
        final float f = hf - ihf;
        final float pv = b * (1.0f - s);
        final float qv = b * (1.0f - s * f);
        final float tv = b * (1.0f - s * (1.0f - f));

        switch (ihf) {
            case 0:         // Red is the dominant color
                red = b;
                green = tv;
                blue = pv;
                break;
            case 1:         // Green is the dominant color
                red = qv;
                green = b;
                blue = pv;
                break;
            case 2:
                red = pv;
                green = b;
                blue = tv;
                break;
            case 3:         // Blue is the dominant color
                red = pv;
                green = qv;
                blue = b;
                break;
            case 4:
                red = tv;
                green = pv;
                blue = b;
                break;
            case 5:         // Red is the dominant color
                red = b;
                green = pv;
                blue = qv;
                break;
        }

        return 0xFF000000 | (((int) (red * 255.0f)) << 16) |
                (((int) (green * 255.0f)) << 8) | ((int) (blue * 255.0f));
!!!6365196.java!!!	RGBToHSV(in red : int, in green : int, in blue : int, inout hsv : float) : void
        if (hsv.length < 3) {
            throw new RuntimeException("3 components required for hsv");
        }
        nativeRGBToHSV(red, green, blue, hsv);
!!!6365324.java!!!	colorToHSV(in color : int, inout hsv : float) : void
        RGBToHSV((color >> 16) & 0xFF, (color >> 8) & 0xFF, color & 0xFF, hsv);
!!!6365452.java!!!	HSVToColor(inout hsv : float) : int
        return HSVToColor(0xFF, hsv);
!!!6365580.java!!!	HSVToColor(in alpha : int, inout hsv : float) : int
        if (hsv.length < 3) {
            throw new RuntimeException("3 components required for hsv");
        }
        return nativeHSVToColor(alpha, hsv);
