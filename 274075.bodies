class AtomicReferenceArray
!!!1647131.java!!!	checkedByteOffset(in i : int) : long
        if (i < 0 || i >= array.length)
            throw new IndexOutOfBoundsException("index " + i);

        return byteOffset(i);
!!!1647259.java!!!	byteOffset(in i : int) : long
        return ((long) i << shift) + base;
!!!1647387.java!!!	AtomicReferenceArray(in length : int)
        array = new Object[length];
!!!1647515.java!!!	AtomicReferenceArray(inout array : E)
        // Visibility guaranteed by final field guarantees
        this.array = Arrays.copyOf(array, array.length, Object[].class);
!!!1647643.java!!!	length() : int
        return array.length;
!!!1647771.java!!!	get(in i : int) : E
        return getRaw(checkedByteOffset(i));
!!!1647899.java!!!	getRaw(in offset : long) : E
        return (E) unsafe.getObjectVolatile(array, offset);
!!!1648027.java!!!	set(in i : int, inout newValue : E) : void
        unsafe.putObjectVolatile(array, checkedByteOffset(i), newValue);
!!!1648155.java!!!	lazySet(in i : int, inout newValue : E) : void
        unsafe.putOrderedObject(array, checkedByteOffset(i), newValue);
!!!1648283.java!!!	getAndSet(in i : int, inout newValue : E) : E
        long offset = checkedByteOffset(i);
        while (true) {
            E current = getRaw(offset);
            if (compareAndSetRaw(offset, current, newValue))
                return current;
        }
!!!1648411.java!!!	compareAndSet(in i : int, inout expect : E, inout update : E) : boolean
        return compareAndSetRaw(checkedByteOffset(i), expect, update);
!!!1648539.java!!!	compareAndSetRaw(in offset : long, inout expect : E, inout update : E) : boolean
        return unsafe.compareAndSwapObject(array, offset, expect, update);
!!!1648667.java!!!	weakCompareAndSet(in i : int, inout expect : E, inout update : E) : boolean
        return compareAndSet(i, expect, update);
!!!1648795.java!!!	toString() : String
        int iMax = array.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(getRaw(byteOffset(i)));
            if (i == iMax)
                return b.append(']').toString();
            b.append(',').append(' ');
        }
!!!1648923.java!!!	readObject(inout s : ObjectInputStream) : void
        // Note: This must be changed if any additional fields are defined
        Object a = s.readFields().get("array", null);
        if (a == null || !a.getClass().isArray())
            throw new java.io.InvalidObjectException("Not array type");
        if (a.getClass() != Object[].class)
            a = Arrays.copyOf((Object[])a, Array.getLength(a), Object[].class);
        unsafe.putObjectVolatile(this, arrayFieldOffset, a);
