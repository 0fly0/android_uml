class MoreKeysKeyboardBuilderTests
!!!13000204.java!!!	setUp() : void
        super.setUp();
!!!13000332.java!!!	createParams(in numKeys : int, in maxColumns : int, in coordXInParnet : int) : MoreKeysKeyboardParams
        final MoreKeysKeyboardParams params = new MoreKeysKeyboardParams();
        params.setParameters(numKeys, maxColumns, WIDTH, HEIGHT, coordXInParnet, KEYBOARD_WIDTH,
                /* isFixedOrderColumn */false, /* dividerWidth */0);
        return params;
!!!13000460.java!!!	testLayoutError() : void
        MoreKeysKeyboardParams params = null;
        try {
            final int maxColumns = KEYBOARD_WIDTH / WIDTH;
            params = createParams(10, maxColumns + 1, HEIGHT);
            fail("Should throw IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Too small keyboard to hold more keys keyboard.
        }
        assertNull("Too small keyboard to hold more keys keyboard", params);
!!!13000588.java!!!	testLayout1KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_M0);
        assertEquals("1 key max 5 M0 columns", 1, params.mNumColumns);
        assertEquals("1 key max 5 M0 rows", 1, params.mNumRows);
        assertEquals("1 key max 5 M0 left", 0, params.mLeftKeys);
        assertEquals("1 key max 5 M0 right", 1, params.mRightKeys);
        assertEquals("1 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key max 5 M0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13000716.java!!!	testLayout1KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_L0);
        assertEquals("1 key max 5 L0 columns", 1, params.mNumColumns);
        assertEquals("1 key max 5 L0 rows", 1, params.mNumRows);
        assertEquals("1 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("1 key max 5 L0 right", 1, params.mRightKeys);
        assertEquals("1 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13000844.java!!!	testLayout1KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_L1);
        assertEquals("1 key max 5 L1 columns", 1, params.mNumColumns);
        assertEquals("1 key max 5 L1 rows", 1, params.mNumRows);
        assertEquals("1 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("1 key max 5 L1 right", 1, params.mRightKeys);
        assertEquals("1 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key max 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13000972.java!!!	testLayout1KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_L2);
        assertEquals("1 key max 5 L2 columns", 1, params.mNumColumns);
        assertEquals("1 key max 5 L2 rows", 1, params.mNumRows);
        assertEquals("1 key max 5 L2 left", 0, params.mLeftKeys);
        assertEquals("1 key max 5 L2 right", 1, params.mRightKeys);
        assertEquals("1 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key max 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key max 5 L2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13001100.java!!!	testLayout1KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_R0);
        assertEquals("1 key max 5 R0 columns", 1, params.mNumColumns);
        assertEquals("1 key max 5 R0 rows", 1, params.mNumRows);
        assertEquals("1 key max 5 R0 left", 0, params.mLeftKeys);
        assertEquals("1 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("1 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key max 5 R0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13001228.java!!!	testLayout1KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_R1);
        assertEquals("1 key max 5 R1 columns", 1, params.mNumColumns);
        assertEquals("1 key max 5 R1 rows", 1, params.mNumRows);
        assertEquals("1 key max 5 R1 left", 0, params.mLeftKeys);
        assertEquals("1 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("1 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key max 5 R1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13001356.java!!!	testLayout1KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_R2);
        assertEquals("1 key max 5 R2 columns", 1, params.mNumColumns);
        assertEquals("1 key max 5 R2 rows", 1, params.mNumRows);
        assertEquals("1 key max 5 R2 left", 0, params.mLeftKeys);
        assertEquals("1 key max 5 R2 right", 1, params.mRightKeys);
        assertEquals("1 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key max 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key max 5 R2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13001484.java!!!	testLayout2KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_M0);
        assertEquals("2 key max 5 M0 columns", 2, params.mNumColumns);
        assertEquals("2 key max 5 M0 rows", 1, params.mNumRows);
        assertEquals("2 key max 5 M0 left", 0, params.mLeftKeys);
        assertEquals("2 key max 5 M0 right", 2, params.mRightKeys);
        assertEquals("2 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key max 5 M0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13001612.java!!!	testLayout2KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_L0);
        assertEquals("2 key max 5 L0 columns", 2, params.mNumColumns);
        assertEquals("2 key max 5 L0 rows", 1, params.mNumRows);
        assertEquals("2 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("2 key max 5 L0 right", 2, params.mRightKeys);
        assertEquals("2 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key max 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13001740.java!!!	testLayout2KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_L1);
        assertEquals("2 key max 5 L1 columns", 2, params.mNumColumns);
        assertEquals("2 key max 5 L1 rows", 1, params.mNumRows);
        assertEquals("2 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("2 key max 5 L1 right", 2, params.mRightKeys);
        assertEquals("2 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key max 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key max 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13001868.java!!!	testLayout2KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_L2);
        assertEquals("2 key max 5 L2 columns", 2, params.mNumColumns);
        assertEquals("2 key max 5 L2 rows", 1, params.mNumRows);
        assertEquals("2 key max 5 L2 left", 0, params.mLeftKeys);
        assertEquals("2 key max 5 L2 right", 2, params.mRightKeys);
        assertEquals("2 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key max 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key max 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key max 5 L2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13001996.java!!!	testLayout2KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_R0);
        assertEquals("2 key max 5 R0 columns", 2, params.mNumColumns);
        assertEquals("2 key max 5 R0 rows", 1, params.mNumRows);
        assertEquals("2 key max 5 R0 left", 1, params.mLeftKeys);
        assertEquals("2 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("2 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key max 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("2 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key max 5 R0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13002124.java!!!	testLayout2KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_R1);
        assertEquals("2 key max 5 R1 columns", 2, params.mNumColumns);
        assertEquals("2 key max 5 R1 rows", 1, params.mNumRows);
        assertEquals("2 key max 5 R1 left", 1, params.mLeftKeys);
        assertEquals("2 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("2 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key max 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("2 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key max 5 R1 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13002252.java!!!	testLayout2KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_R2);
        assertEquals("2 key max 5 R2 columns", 2, params.mNumColumns);
        assertEquals("2 key max 5 R2 rows", 1, params.mNumRows);
        assertEquals("2 key max 5 R2 left", 0, params.mLeftKeys);
        assertEquals("2 key max 5 R2 right", 2, params.mRightKeys);
        assertEquals("2 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key max 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key max 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key max 5 R2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13002380.java!!!	testLayout3KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_M0);
        assertEquals("3 key max 5 M0 columns", 3, params.mNumColumns);
        assertEquals("3 key max 5 M0 rows", 1, params.mNumRows);
        assertEquals("3 key max 5 M0 left", 1, params.mLeftKeys);
        assertEquals("3 key max 5 M0 right", 2, params.mRightKeys);
        assertEquals("3 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("3 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 5 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13002508.java!!!	testLayout3KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_L0);
        assertEquals("3 key max 5 L0 columns", 3, params.mNumColumns);
        assertEquals("3 key max 5 L0 rows", 1, params.mNumRows);
        assertEquals("3 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("3 key max 5 L0 right", 3, params.mRightKeys);
        assertEquals("3 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("3 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13002636.java!!!	testLayout3KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_L1);
        assertEquals("3 key max 5 L1 columns", 3, params.mNumColumns);
        assertEquals("3 key max 5 L1 rows", 1, params.mNumRows);
        assertEquals("3 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("3 key max 5 L1 right", 3, params.mRightKeys);
        assertEquals("3 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("3 key max 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13002764.java!!!	testLayout3KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_L2);
        assertEquals("3 key max 5 L2 columns", 3, params.mNumColumns);
        assertEquals("3 key max 5 L2 rows", 1, params.mNumRows);
        assertEquals("3 key max 5 L2 left", 1, params.mLeftKeys);
        assertEquals("3 key max 5 L2 right", 2, params.mRightKeys);
        assertEquals("3 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 5 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("3 key max 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13002892.java!!!	testLayout3KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_R0);
        assertEquals("3 key max 5 R0 columns", 3, params.mNumColumns);
        assertEquals("3 key max 5 R0 rows", 1, params.mNumRows);
        assertEquals("3 key max 5 R0 left", 2, params.mLeftKeys);
        assertEquals("3 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("3 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("3 key max 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("3 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 5 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13003020.java!!!	testLayout3KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_R1);
        assertEquals("3 key max 5 R1 columns", 3, params.mNumColumns);
        assertEquals("3 key max 5 R1 rows", 1, params.mNumRows);
        assertEquals("3 key max 5 R1 left", 2, params.mLeftKeys);
        assertEquals("3 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("3 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("3 key max 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("3 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 5 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13003148.java!!!	testLayout3KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_R2);
        assertEquals("3 key max 5 R2 columns", 3, params.mNumColumns);
        assertEquals("3 key max 5 R2 rows", 1, params.mNumRows);
        assertEquals("3 key max 5 R2 left", 1, params.mLeftKeys);
        assertEquals("3 key max 5 R2 right", 2, params.mRightKeys);
        assertEquals("3 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("3 key max 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 5 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13003276.java!!!	testLayout3KeyMax2M0() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_M0);
        assertEquals("3 key max 2 M0 columns", 2, params.mNumColumns);
        assertEquals("3 key max 2 M0 rows", 2, params.mNumRows);
        assertEquals("3 key max 2 M0 left", 0, params.mLeftKeys);
        assertEquals("3 key max 2 M0 right", 2, params.mRightKeys);
        assertEquals("3 key max 2 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 2 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 2 M0 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key max 2 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 2 M0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13003404.java!!!	testLayout3KeyMax2L0() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_L0);
        assertEquals("3 key max 2 L0 columns", 2, params.mNumColumns);
        assertEquals("3 key max 2 L0 rows", 2, params.mNumRows);
        assertEquals("3 key max 2 L0 left", 0, params.mLeftKeys);
        assertEquals("3 key max 2 L0 right", 2, params.mRightKeys);
        assertEquals("3 key max 2 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 2 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 2 L0 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key max 2 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 2 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13003532.java!!!	testLayout3KeyMax2L1() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_L1);
        assertEquals("3 key max 2 L1 columns", 2, params.mNumColumns);
        assertEquals("3 key max 2 L1 rows", 2, params.mNumRows);
        assertEquals("3 key max 2 L1 left", 0, params.mLeftKeys);
        assertEquals("3 key max 2 L1 right", 2, params.mRightKeys);
        assertEquals("3 key max 2 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 2 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 2 L1 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key max 2 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 2 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13003660.java!!!	testLayout3KeyMax2L2() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_L2);
        assertEquals("3 key max 2 L2 columns", 2, params.mNumColumns);
        assertEquals("3 key max 2 L2 rows", 2, params.mNumRows);
        assertEquals("3 key max 2 L2 left", 0, params.mLeftKeys);
        assertEquals("3 key max 2 L2 right", 2, params.mRightKeys);
        assertEquals("3 key max 2 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 2 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 2 L2 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key max 2 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 2 L2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13003788.java!!!	testLayout3KeyMax2R0() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_R0);
        assertEquals("3 key max 2 R0 columns", 2, params.mNumColumns);
        assertEquals("3 key max 2 R0 rows", 2, params.mNumRows);
        assertEquals("3 key max 2 R0 left", 1, params.mLeftKeys);
        assertEquals("3 key max 2 R0 right", 1, params.mRightKeys);
        assertEquals("3 key max 2 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 2 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("3 key max 2 R0 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key max 2 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 2 R0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13003916.java!!!	testLayout3KeyMax2R1() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_R1);
        assertEquals("3 key max 2 R1 columns", 2, params.mNumColumns);
        assertEquals("3 key max 2 R1 rows", 2, params.mNumRows);
        assertEquals("3 key max 2 R1 left", 1, params.mLeftKeys);
        assertEquals("3 key max 2 R1 right", 1, params.mRightKeys);
        assertEquals("3 key max 2 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 2 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("3 key max 2 R1 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key max 2 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 2 R1 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13004044.java!!!	testLayout3KeyMax2R2() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_R2);
        assertEquals("3 key max 2 R2 columns", 2, params.mNumColumns);
        assertEquals("3 key max 2 R2 rows", 2, params.mNumRows);
        assertEquals("3 key max 2 R2 left", 0, params.mLeftKeys);
        assertEquals("3 key max 2 R2 right", 2, params.mRightKeys);
        assertEquals("3 key max 2 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key max 2 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key max 2 R2 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key max 2 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key max 2 R2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13004172.java!!!	testLayout4KeyMax3M0() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_M0);
        assertEquals("4 key max 3 M0 columns", 2, params.mNumColumns);
        assertEquals("4 key max 3 M0 rows", 2, params.mNumRows);
        assertEquals("4 key max 3 M0 left", 0, params.mLeftKeys);
        assertEquals("4 key max 3 M0 right", 2, params.mRightKeys);
        assertEquals("4 key max 3 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 3 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 3 M0 [3]", 0, params.getColumnPos(2));
        assertEquals("4 key max 3 M0 [4]", 1, params.getColumnPos(3));
        assertEquals("4 key max 3 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 3 M0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13004300.java!!!	testLayout4KeyMax3L0() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_L0);
        assertEquals("4 key max 3 L0 columns", 2, params.mNumColumns);
        assertEquals("4 key max 3 L0 rows", 2, params.mNumRows);
        assertEquals("4 key max 3 L0 left", 0, params.mLeftKeys);
        assertEquals("4 key max 3 L0 right", 2, params.mRightKeys);
        assertEquals("4 key max 3 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 3 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 3 L0 [3]", 0, params.getColumnPos(2));
        assertEquals("4 key max 3 L0 [4]", 1, params.getColumnPos(3));
        assertEquals("4 key max 3 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 3 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13004428.java!!!	testLayout4KeyMax3L1() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_L1);
        assertEquals("4 key max 3 L1 columns", 2, params.mNumColumns);
        assertEquals("4 key max 3 L1 rows", 2, params.mNumRows);
        assertEquals("4 key max 3 L1 left", 0, params.mLeftKeys);
        assertEquals("4 key max 3 L1 right", 2, params.mRightKeys);
        assertEquals("4 key max 3 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 3 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 3 L1 [3]", 0, params.getColumnPos(2));
        assertEquals("4 key max 3 L1 [4]", 1, params.getColumnPos(3));
        assertEquals("4 key max 3 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 3 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13004556.java!!!	testLayout4KeyMax3L2() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_L2);
        assertEquals("4 key max 3 L2 columns", 2, params.mNumColumns);
        assertEquals("4 key max 3 L2 rows", 2, params.mNumRows);
        assertEquals("4 key max 3 L2 left", 0, params.mLeftKeys);
        assertEquals("4 key max 3 L2 right", 2, params.mRightKeys);
        assertEquals("4 key max 3 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 3 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 3 L2 [3]", 0, params.getColumnPos(2));
        assertEquals("4 key max 3 L2 [4]", 1, params.getColumnPos(3));
        assertEquals("4 key max 3 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 3 L2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13004684.java!!!	testLayout4KeyMax3R0() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_R0);
        assertEquals("4 key max 3 R0 columns", 2, params.mNumColumns);
        assertEquals("4 key max 3 R0 rows", 2, params.mNumRows);
        assertEquals("4 key max 3 R0 left", 1, params.mLeftKeys);
        assertEquals("4 key max 3 R0 right", 1, params.mRightKeys);
        assertEquals("4 key max 3 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 3 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("4 key max 3 R0 [3]", 0, params.getColumnPos(2));
        assertEquals("4 key max 3 R0 [4]", -1, params.getColumnPos(3));
        assertEquals("4 key max 3 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 3 R0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13004812.java!!!	testLayout4KeyMax3R1() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_R1);
        assertEquals("4 key max 3 R1 columns", 2, params.mNumColumns);
        assertEquals("4 key max 3 R1 rows", 2, params.mNumRows);
        assertEquals("4 key max 3 R1 left", 1, params.mLeftKeys);
        assertEquals("4 key max 3 R1 right", 1, params.mRightKeys);
        assertEquals("4 key max 3 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 3 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("4 key max 3 R1 [3]", 0, params.getColumnPos(2));
        assertEquals("4 key max 3 R1 [4]", -1, params.getColumnPos(3));
        assertEquals("4 key max 3 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 3 R1 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13004940.java!!!	testLayout4KeyMax3R2() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_R2);
        assertEquals("4 key max 3 R2 columns", 2, params.mNumColumns);
        assertEquals("4 key max 3 R2 rows", 2, params.mNumRows);
        assertEquals("4 key max 3 R2 left", 0, params.mLeftKeys);
        assertEquals("4 key max 3 R2 right", 2, params.mRightKeys);
        assertEquals("4 key max 3 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 3 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 3 R2 [3]", 0, params.getColumnPos(2));
        assertEquals("4 key max 3 R2 [4]", 1, params.getColumnPos(3));
        assertEquals("4 key max 3 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 3 R2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13005068.java!!!	testLayout4KeyMax4M0() : void
        MoreKeysKeyboardParams params = createParams(4, 4, XPOS_M0);
        assertEquals("4 key max 4 M0 columns", 4, params.mNumColumns);
        assertEquals("4 key max 4 M0 rows", 1, params.mNumRows);
        assertEquals("4 key max 4 M0 left", 1, params.mLeftKeys);
        assertEquals("4 key max 4 M0 right", 3, params.mRightKeys);
        assertEquals("4 key max 4 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 4 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 4 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("4 key max 4 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("4 key max 4 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 4 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13005196.java!!!	testLayout4KeyMax4L0() : void
        MoreKeysKeyboardParams params = createParams(4, 4, XPOS_L0);
        assertEquals("4 key max 4 L0 columns", 4, params.mNumColumns);
        assertEquals("4 key max 4 L0 rows", 1, params.mNumRows);
        assertEquals("4 key max 4 L0 left", 0, params.mLeftKeys);
        assertEquals("4 key max 4 L0 right", 4, params.mRightKeys);
        assertEquals("4 key max 4 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 4 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 4 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("4 key max 4 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("4 key max 4 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 4 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13005324.java!!!	testLayout4KeyMax4L1() : void
        MoreKeysKeyboardParams params = createParams(4, 4, XPOS_L1);
        assertEquals("4 key max 4 L1 columns", 4, params.mNumColumns);
        assertEquals("4 key max 4 L1 rows", 1, params.mNumRows);
        assertEquals("4 key max 4 L1 left", 0, params.mLeftKeys);
        assertEquals("4 key max 4 L1 right", 4, params.mRightKeys);
        assertEquals("4 key max 4 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 4 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 4 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("4 key max 4 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("4 key max 4 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 4 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13005452.java!!!	testLayout4KeyMax4L2() : void
        MoreKeysKeyboardParams params = createParams(4, 4, XPOS_L2);
        assertEquals("4 key max 4 L2 columns", 4, params.mNumColumns);
        assertEquals("4 key max 4 L2 rows", 1, params.mNumRows);
        assertEquals("4 key max 4 L2 left", 1, params.mLeftKeys);
        assertEquals("4 key max 4 L2 right", 3, params.mRightKeys);
        assertEquals("4 key max 4 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 4 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 4 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("4 key max 4 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("4 key max 4 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 4 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13005580.java!!!	testLayout4KeyMax4R0() : void
        MoreKeysKeyboardParams params = createParams(4, 4, XPOS_R0);
        assertEquals("4 key max 4 R0 columns", 4, params.mNumColumns);
        assertEquals("4 key max 4 R0 rows", 1, params.mNumRows);
        assertEquals("4 key max 4 R0 left", 3, params.mLeftKeys);
        assertEquals("4 key max 4 R0 right", 1, params.mRightKeys);
        assertEquals("4 key max 4 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 4 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("4 key max 4 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("4 key max 4 R0 [4]", -3, params.getColumnPos(3));
        assertEquals("4 key max 4 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 4 R0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13005708.java!!!	testLayout4KeyMax4R1() : void
        MoreKeysKeyboardParams params = createParams(4, 4, XPOS_R1);
        assertEquals("4 key max 4 R1 columns", 4, params.mNumColumns);
        assertEquals("4 key max 4 R1 rows", 1, params.mNumRows);
        assertEquals("4 key max 4 R1 left", 3, params.mLeftKeys);
        assertEquals("4 key max 4 R1 right", 1, params.mRightKeys);
        assertEquals("4 key max 4 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 4 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("4 key max 4 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("4 key max 4 R1 [4]", -3, params.getColumnPos(3));
        assertEquals("4 key max 4 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 4 R1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13005836.java!!!	testLayout4KeyMax4R2() : void
        MoreKeysKeyboardParams params = createParams(4, 4, XPOS_R2);
        assertEquals("4 key max 4 R2 columns", 4, params.mNumColumns);
        assertEquals("4 key max 4 R2 rows", 1, params.mNumRows);
        assertEquals("4 key max 4 R2 left", 2, params.mLeftKeys);
        assertEquals("4 key max 4 R2 right", 2, params.mRightKeys);
        assertEquals("4 key max 4 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 4 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 4 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("4 key max 4 R2 [4]", -2, params.getColumnPos(3));
        assertEquals("4 key max 4 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 4 R2 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13005964.java!!!	testLayout4KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_M0);
        assertEquals("4 key max 5 M0 columns", 4, params.mNumColumns);
        assertEquals("4 key max 5 M0 rows", 1, params.mNumRows);
        assertEquals("4 key max 5 M0 left", 1, params.mLeftKeys);
        assertEquals("4 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("4 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("4 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("4 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 5 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13006092.java!!!	testLayout4KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_L0);
        assertEquals("4 key max 5 L0 columns", 4, params.mNumColumns);
        assertEquals("4 key max 5 L0 rows", 1, params.mNumRows);
        assertEquals("4 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("4 key max 5 L0 right", 4, params.mRightKeys);
        assertEquals("4 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("4 key max 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("4 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13006220.java!!!	testLayout4KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_L1);
        assertEquals("4 key max 5 L1 columns", 4, params.mNumColumns);
        assertEquals("4 key max 5 L1 rows", 1, params.mNumRows);
        assertEquals("4 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("4 key max 5 L1 right", 4, params.mRightKeys);
        assertEquals("4 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("4 key max 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("4 key max 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13006348.java!!!	testLayout4KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_L2);
        assertEquals("4 key max 5 L2 columns", 4, params.mNumColumns);
        assertEquals("4 key max 5 L2 rows", 1, params.mNumRows);
        assertEquals("4 key max 5 L2 left", 1, params.mLeftKeys);
        assertEquals("4 key max 5 L2 right", 3, params.mRightKeys);
        assertEquals("4 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 5 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("4 key max 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("4 key max 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13006476.java!!!	testLayout4KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_R0);
        assertEquals("4 key max 5 R0 columns", 4, params.mNumColumns);
        assertEquals("4 key max 5 R0 rows", 1, params.mNumRows);
        assertEquals("4 key max 5 R0 left", 3, params.mLeftKeys);
        assertEquals("4 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("4 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("4 key max 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("4 key max 5 R0 [4]", -3, params.getColumnPos(3));
        assertEquals("4 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 5 R0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13006604.java!!!	testLayout4KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_R1);
        assertEquals("4 key max 5 R1 columns", 4, params.mNumColumns);
        assertEquals("4 key max 5 R1 rows", 1, params.mNumRows);
        assertEquals("4 key max 5 R1 left", 3, params.mLeftKeys);
        assertEquals("4 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("4 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("4 key max 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("4 key max 5 R1 [4]", -3, params.getColumnPos(3));
        assertEquals("4 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 5 R1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13006732.java!!!	testLayout4KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_R2);
        assertEquals("4 key max 5 R2 columns", 4, params.mNumColumns);
        assertEquals("4 key max 5 R2 rows", 1, params.mNumRows);
        assertEquals("4 key max 5 R2 left", 2, params.mLeftKeys);
        assertEquals("4 key max 5 R2 right", 2, params.mRightKeys);
        assertEquals("4 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key max 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key max 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("4 key max 5 R2 [4]", -2, params.getColumnPos(3));
        assertEquals("4 key max 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key max 5 R2 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13006860.java!!!	testLayout5KeyMax3M0() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_M0);
        assertEquals("5 key max 3 M0 columns", 3, params.mNumColumns);
        assertEquals("5 key max 3 M0 rows", 2, params.mNumRows);
        assertEquals("5 key max 3 M0 left", 1, params.mLeftKeys);
        assertEquals("5 key max 3 M0 right", 2, params.mRightKeys);
        assertEquals("5 key max 3 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 3 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 3 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key max 3 M0 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 3 M0 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 3 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("5 key max 3 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13006988.java!!!	testLayout5KeyMax3L0() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_L0);
        assertEquals("5 key max 3 L0 columns", 3, params.mNumColumns);
        assertEquals("5 key max 3 L0 rows", 2, params.mNumRows);
        assertEquals("5 key max 3 L0 left", 0, params.mLeftKeys);
        assertEquals("5 key max 3 L0 right", 3, params.mRightKeys);
        assertEquals("5 key max 3 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 3 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 3 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key max 3 L0 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 3 L0 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 3 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 3 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13007116.java!!!	testLayout5KeyMax3L1() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_L1);
        assertEquals("5 key max 3 L1 columns", 3, params.mNumColumns);
        assertEquals("5 key max 3 L1 rows", 2, params.mNumRows);
        assertEquals("5 key max 3 L1 left", 0, params.mLeftKeys);
        assertEquals("5 key max 3 L1 right", 3, params.mRightKeys);
        assertEquals("5 key max 3 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 3 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 3 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key max 3 L1 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 3 L1 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 3 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 3 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13007244.java!!!	testLayout5KeyMax3L2() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_L2);
        assertEquals("5 key max 3 L2 columns", 3, params.mNumColumns);
        assertEquals("5 key max 3 L2 rows", 2, params.mNumRows);
        assertEquals("5 key max 3 L2 left", 1, params.mLeftKeys);
        assertEquals("5 key max 3 L2 right", 2, params.mRightKeys);
        assertEquals("5 key max 3 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 3 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 3 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key max 3 L2 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 3 L2 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 3 L2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("5 key max 3 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13007372.java!!!	testLayout5KeyMax3R0() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_R0);
        assertEquals("5 key max 3 R0 columns", 3, params.mNumColumns);
        assertEquals("5 key max 3 R0 rows", 2, params.mNumRows);
        assertEquals("5 key max 3 R0 left", 2, params.mLeftKeys);
        assertEquals("5 key max 3 R0 right", 1, params.mRightKeys);
        assertEquals("5 key max 3 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 3 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key max 3 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("5 key max 3 R0 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 3 R0 [5]", -1, params.getColumnPos(4));
        assertEquals("5 key max 3 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 3 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13007500.java!!!	testLayout5KeyMax3R1() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_R1);
        assertEquals("5 key max 3 R1 columns", 3, params.mNumColumns);
        assertEquals("5 key max 3 R1 rows", 2, params.mNumRows);
        assertEquals("5 key max 3 R1 left", 2, params.mLeftKeys);
        assertEquals("5 key max 3 R1 right", 1, params.mRightKeys);
        assertEquals("5 key max 3 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 3 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key max 3 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("5 key max 3 R1 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 3 R1 [5]", -1, params.getColumnPos(4));
        assertEquals("5 key max 3 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 3 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13007628.java!!!	testLayout5KeyMax3R2() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_R2);
        assertEquals("5 key max 3 R2 columns", 3, params.mNumColumns);
        assertEquals("5 key max 3 R2 rows", 2, params.mNumRows);
        assertEquals("5 key max 3 R2 left", 1, params.mLeftKeys);
        assertEquals("5 key max 3 R2 right", 2, params.mRightKeys);
        assertEquals("5 key max 3 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 3 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 3 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key max 3 R2 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 3 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 3 R2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("5 key max 3 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13007756.java!!!	testLayout5KeyMax4M0() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_M0);
        assertEquals("5 key max 4 M0 columns", 3, params.mNumColumns);
        assertEquals("5 key max 4 M0 rows", 2, params.mNumRows);
        assertEquals("5 key max 4 M0 left", 1, params.mLeftKeys);
        assertEquals("5 key max 4 M0 right", 2, params.mRightKeys);
        assertEquals("5 key max 4 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 4 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 4 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key max 4 M0 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 4 M0 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 4 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("5 key max 4 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13007884.java!!!	testLayout5KeyMax4L0() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_L0);
        assertEquals("5 key max 4 L0 columns", 3, params.mNumColumns);
        assertEquals("5 key max 4 L0 rows", 2, params.mNumRows);
        assertEquals("5 key max 4 L0 left", 0, params.mLeftKeys);
        assertEquals("5 key max 4 L0 right", 3, params.mRightKeys);
        assertEquals("5 key max 4 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 4 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 4 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key max 4 L0 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 4 L0 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 4 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 4 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13008012.java!!!	testLayout5KeyMax4L1() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_L1);
        assertEquals("5 key max 4 L1 columns", 3, params.mNumColumns);
        assertEquals("5 key max 4 L1 rows", 2, params.mNumRows);
        assertEquals("5 key max 4 L1 left", 0, params.mLeftKeys);
        assertEquals("5 key max 4 L1 right", 3, params.mRightKeys);
        assertEquals("5 key max 4 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 4 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 4 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key max 4 L1 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 4 L1 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 4 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 4 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13008140.java!!!	testLayout5KeyMax4L2() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_L2);
        assertEquals("5 key max 4 L2 columns", 3, params.mNumColumns);
        assertEquals("5 key max 4 L2 rows", 2, params.mNumRows);
        assertEquals("5 key max 4 L2 left", 1, params.mLeftKeys);
        assertEquals("5 key max 4 L2 right", 2, params.mRightKeys);
        assertEquals("5 key max 4 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 4 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 4 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key max 4 L2 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 4 L2 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 4 L2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("5 key max 4 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13008268.java!!!	testLayout5KeyMax4R0() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_R0);
        assertEquals("5 key max 4 R0 columns", 3, params.mNumColumns);
        assertEquals("5 key max 4 R0 rows", 2, params.mNumRows);
        assertEquals("5 key max 4 R0 left", 2, params.mLeftKeys);
        assertEquals("5 key max 4 R0 right", 1, params.mRightKeys);
        assertEquals("5 key max 4 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 4 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key max 4 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("5 key max 4 R0 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 4 R0 [5]", -1, params.getColumnPos(4));
        assertEquals("5 key max 4 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 4 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13008396.java!!!	testLayout5KeyMax4R1() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_R1);
        assertEquals("5 key max 4 R1 columns", 3, params.mNumColumns);
        assertEquals("5 key max 4 R1 rows", 2, params.mNumRows);
        assertEquals("5 key max 4 R1 left", 2, params.mLeftKeys);
        assertEquals("5 key max 4 R1 right", 1, params.mRightKeys);
        assertEquals("5 key max 4 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 4 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key max 4 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("5 key max 4 R1 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 4 R1 [5]", -1, params.getColumnPos(4));
        assertEquals("5 key max 4 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 4 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13008524.java!!!	testLayout5KeyMax4R2() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_R2);
        assertEquals("5 key max 4 R2 columns", 3, params.mNumColumns);
        assertEquals("5 key max 4 R2 rows", 2, params.mNumRows);
        assertEquals("5 key max 4 R2 left", 1, params.mLeftKeys);
        assertEquals("5 key max 4 R2 right", 2, params.mRightKeys);
        assertEquals("5 key max 4 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 4 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 4 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key max 4 R2 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key max 4 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key max 4 R2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("5 key max 4 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13008652.java!!!	testLayout5KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_M0);
        assertEquals("5 key max 5 M0 columns", 5, params.mNumColumns);
        assertEquals("5 key max 5 M0 rows", 1, params.mNumRows);
        assertEquals("5 key max 5 M0 left", 2, params.mLeftKeys);
        assertEquals("5 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("5 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("5 key max 5 M0 [5]", -2, params.getColumnPos(4));
        assertEquals("5 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13008780.java!!!	testLayout5KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_L0);
        assertEquals("5 key max 5 L0 columns", 5, params.mNumColumns);
        assertEquals("5 key max 5 L0 rows", 1, params.mNumRows);
        assertEquals("5 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("5 key max 5 L0 right", 5, params.mRightKeys);
        assertEquals("5 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key max 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("5 key max 5 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("5 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13008908.java!!!	testLayout5KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_L1);
        assertEquals("5 key max 5 L1 columns", 5, params.mNumColumns);
        assertEquals("5 key max 5 L1 rows", 1, params.mNumRows);
        assertEquals("5 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("5 key max 5 L1 right", 5, params.mRightKeys);
        assertEquals("5 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key max 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("5 key max 5 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("5 key max 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13009036.java!!!	testLayout5KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_L2);
        assertEquals("5 key max 5 L2 columns", 5, params.mNumColumns);
        assertEquals("5 key max 5 L2 rows", 1, params.mNumRows);
        assertEquals("5 key max 5 L2 left", 1, params.mLeftKeys);
        assertEquals("5 key max 5 L2 right", 4, params.mRightKeys);
        assertEquals("5 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 5 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key max 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("5 key max 5 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("5 key max 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13009164.java!!!	testLayout5KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_R0);
        assertEquals("5 key max 5 R0 columns", 5, params.mNumColumns);
        assertEquals("5 key max 5 R0 rows", 1, params.mNumRows);
        assertEquals("5 key max 5 R0 left", 4, params.mLeftKeys);
        assertEquals("5 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("5 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key max 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("5 key max 5 R0 [4]", -3, params.getColumnPos(3));
        assertEquals("5 key max 5 R0 [5]", -4, params.getColumnPos(4));
        assertEquals("5 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 5 R0 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!13009292.java!!!	testLayout5KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_R1);
        assertEquals("5 key max 5 R1 columns", 5, params.mNumColumns);
        assertEquals("5 key max 5 R1 rows", 1, params.mNumRows);
        assertEquals("5 key max 5 R1 left", 4, params.mLeftKeys);
        assertEquals("5 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("5 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key max 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("5 key max 5 R1 [4]", -3, params.getColumnPos(3));
        assertEquals("5 key max 5 R1 [5]", -4, params.getColumnPos(4));
        assertEquals("5 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 5 R1 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!13009420.java!!!	testLayout5KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_R2);
        assertEquals("5 key max 5 R2 columns", 5, params.mNumColumns);
        assertEquals("5 key max 5 R2 rows", 1, params.mNumRows);
        assertEquals("5 key max 5 R2 left", 3, params.mLeftKeys);
        assertEquals("5 key max 5 R2 right", 2, params.mRightKeys);
        assertEquals("5 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key max 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key max 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key max 5 R2 [4]", -2, params.getColumnPos(3));
        assertEquals("5 key max 5 R2 [5]", -3, params.getColumnPos(4));
        assertEquals("5 key max 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key max 5 R2 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13009548.java!!!	testLayout6KeyMax4M0() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_M0);
        assertEquals("6 key max 4 M0 columns", 3, params.mNumColumns);
        assertEquals("6 key max 4 M0 rows", 2, params.mNumRows);
        assertEquals("6 key max 4 M0 left", 1, params.mLeftKeys);
        assertEquals("6 key max 4 M0 right", 2, params.mRightKeys);
        assertEquals("6 key max 4 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 4 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 4 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("6 key max 4 M0 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 4 M0 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 4 M0 [6]", -1, params.getColumnPos(5));
        assertEquals("6 key max 4 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 4 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13009676.java!!!	testLayout6KeyMax4L0() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_L0);
        assertEquals("6 key max 4 L0 columns", 3, params.mNumColumns);
        assertEquals("6 key max 4 L0 rows", 2, params.mNumRows);
        assertEquals("6 key max 4 L0 left", 0, params.mLeftKeys);
        assertEquals("6 key max 4 L0 right", 3, params.mRightKeys);
        assertEquals("6 key max 4 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 4 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 4 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key max 4 L0 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 4 L0 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 4 L0 [6]", 2, params.getColumnPos(5));
        assertEquals("6 key max 4 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 4 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13009804.java!!!	testLayout6KeyMax4L1() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_L1);
        assertEquals("6 key max 4 L1 columns", 3, params.mNumColumns);
        assertEquals("6 key max 4 L1 rows", 2, params.mNumRows);
        assertEquals("6 key max 4 L1 left", 0, params.mLeftKeys);
        assertEquals("6 key max 4 L1 right", 3, params.mRightKeys);
        assertEquals("6 key max 4 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 4 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 4 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key max 4 L1 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 4 L1 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 4 L1 [6]", 2, params.getColumnPos(5));
        assertEquals("6 key max 4 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 4 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13009932.java!!!	testLayout6KeyMax4L2() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_L2);
        assertEquals("6 key max 4 L2 columns", 3, params.mNumColumns);
        assertEquals("6 key max 4 L2 rows", 2, params.mNumRows);
        assertEquals("6 key max 4 L2 left", 1, params.mLeftKeys);
        assertEquals("6 key max 4 L2 right", 2, params.mRightKeys);
        assertEquals("6 key max 4 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 4 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 4 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("6 key max 4 L2 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 4 L2 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 4 L2 [6]", -1, params.getColumnPos(5));
        assertEquals("6 key max 4 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 4 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13010060.java!!!	testLayout6KeyMax4R0() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_R0);
        assertEquals("6 key max 4 R0 columns", 3, params.mNumColumns);
        assertEquals("6 key max 4 R0 rows", 2, params.mNumRows);
        assertEquals("6 key max 4 R0 left", 2, params.mLeftKeys);
        assertEquals("6 key max 4 R0 right", 1, params.mRightKeys);
        assertEquals("6 key max 4 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 4 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("6 key max 4 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("6 key max 4 R0 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 4 R0 [5]", -1, params.getColumnPos(4));
        assertEquals("6 key max 4 R0 [6]", -2, params.getColumnPos(5));
        assertEquals("6 key max 4 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 4 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13010188.java!!!	testLayout6KeyMax4R1() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_R1);
        assertEquals("6 key max 4 R1 columns", 3, params.mNumColumns);
        assertEquals("6 key max 4 R1 rows", 2, params.mNumRows);
        assertEquals("6 key max 4 R1 left", 2, params.mLeftKeys);
        assertEquals("6 key max 4 R1 right", 1, params.mRightKeys);
        assertEquals("6 key max 4 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 4 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("6 key max 4 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("6 key max 4 R1 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 4 R1 [5]", -1, params.getColumnPos(4));
        assertEquals("6 key max 4 R1 [6]", -2, params.getColumnPos(5));
        assertEquals("6 key max 4 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 4 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13010316.java!!!	testLayout6KeyMax4R2() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_R2);
        assertEquals("6 key max 4 R2 columns", 3, params.mNumColumns);
        assertEquals("6 key max 4 R2 rows", 2, params.mNumRows);
        assertEquals("6 key max 4 R2 left", 1, params.mLeftKeys);
        assertEquals("6 key max 4 R2 right", 2, params.mRightKeys);
        assertEquals("6 key max 4 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 4 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 4 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("6 key max 4 R2 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 4 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 4 R2 [6]", -1, params.getColumnPos(5));
        assertEquals("6 key max 4 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 4 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13010444.java!!!	testLayout6KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_M0);
        assertEquals("6 key max 5 M0 columns", 3, params.mNumColumns);
        assertEquals("6 key max 5 M0 rows", 2, params.mNumRows);
        assertEquals("6 key max 5 M0 left", 1, params.mLeftKeys);
        assertEquals("6 key max 5 M0 right", 2, params.mRightKeys);
        assertEquals("6 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("6 key max 5 M0 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 5 M0 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 5 M0 [6]", -1, params.getColumnPos(5));
        assertEquals("6 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 5 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13010572.java!!!	testLayout6KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_L0);
        assertEquals("6 key max 5 L0 columns", 3, params.mNumColumns);
        assertEquals("6 key max 5 L0 rows", 2, params.mNumRows);
        assertEquals("6 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("6 key max 5 L0 right", 3, params.mRightKeys);
        assertEquals("6 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key max 5 L0 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 5 L0 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 5 L0 [6]", 2, params.getColumnPos(5));
        assertEquals("6 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13010700.java!!!	testLayout6KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_L1);
        assertEquals("6 key max 5 L1 columns", 3, params.mNumColumns);
        assertEquals("6 key max 5 L1 rows", 2, params.mNumRows);
        assertEquals("6 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("6 key max 5 L1 right", 3, params.mRightKeys);
        assertEquals("6 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key max 5 L1 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 5 L1 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 5 L1 [6]", 2, params.getColumnPos(5));
        assertEquals("6 key max 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13010828.java!!!	testLayout6KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_L2);
        assertEquals("6 key max 5 L2 columns", 3, params.mNumColumns);
        assertEquals("6 key max 5 L2 rows", 2, params.mNumRows);
        assertEquals("6 key max 5 L2 left", 1, params.mLeftKeys);
        assertEquals("6 key max 5 L2 right", 2, params.mRightKeys);
        assertEquals("6 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 5 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("6 key max 5 L2 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 5 L2 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 5 L2 [6]", -1, params.getColumnPos(5));
        assertEquals("6 key max 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13010956.java!!!	testLayout6KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_R0);
        assertEquals("6 key max 5 R0 columns", 3, params.mNumColumns);
        assertEquals("6 key max 5 R0 rows", 2, params.mNumRows);
        assertEquals("6 key max 5 R0 left", 2, params.mLeftKeys);
        assertEquals("6 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("6 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("6 key max 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("6 key max 5 R0 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 5 R0 [5]", -1, params.getColumnPos(4));
        assertEquals("6 key max 5 R0 [6]", -2, params.getColumnPos(5));
        assertEquals("6 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 5 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13011084.java!!!	testLayout6KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_R1);
        assertEquals("6 key max 5 R1 columns", 3, params.mNumColumns);
        assertEquals("6 key max 5 R1 rows", 2, params.mNumRows);
        assertEquals("6 key max 5 R1 left", 2, params.mLeftKeys);
        assertEquals("6 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("6 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("6 key max 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("6 key max 5 R1 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 5 R1 [5]", -1, params.getColumnPos(4));
        assertEquals("6 key max 5 R1 [6]", -2, params.getColumnPos(5));
        assertEquals("6 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 5 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13011212.java!!!	testLayout6KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_R2);
        assertEquals("6 key max 5 R2 columns", 3, params.mNumColumns);
        assertEquals("6 key max 5 R2 rows", 2, params.mNumRows);
        assertEquals("6 key max 5 R2 left", 1, params.mLeftKeys);
        assertEquals("6 key max 5 R2 right", 2, params.mRightKeys);
        assertEquals("6 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key max 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key max 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("6 key max 5 R2 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key max 5 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key max 5 R2 [6]", -1, params.getColumnPos(5));
        assertEquals("6 key max 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key max 5 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13011340.java!!!	testLayout7KeyMax7L0() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_L0);
        assertEquals("7 key max 7 L0 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 L0 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 L0 left", 0, params.mLeftKeys);
        assertEquals("7 key max 7 L0 right", 7, params.mRightKeys);
        assertEquals("7 key max 7 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 7 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key max 7 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key max 7 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("7 key max 7 L0 [6]", 5, params.getColumnPos(5));
        assertEquals("7 key max 7 L0 [7]", 6, params.getColumnPos(6));
        assertEquals("7 key max 7 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13011468.java!!!	testLayout7KeyMax7L1() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_L1);
        assertEquals("7 key max 7 L1 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 L1 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 L1 left", 0, params.mLeftKeys);
        assertEquals("7 key max 7 L1 right", 7, params.mRightKeys);
        assertEquals("7 key max 7 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 7 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key max 7 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key max 7 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("7 key max 7 L1 [6]", 5, params.getColumnPos(5));
        assertEquals("7 key max 7 L1 [7]", 6, params.getColumnPos(6));
        assertEquals("7 key max 7 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13011596.java!!!	testLayout7KeyMax7L2() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_L2);
        assertEquals("7 key max 7 L2 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 L2 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 L2 left", 1, params.mLeftKeys);
        assertEquals("7 key max 7 L2 right", 6, params.mRightKeys);
        assertEquals("7 key max 7 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 7 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 7 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key max 7 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("7 key max 7 L2 [6]", 4, params.getColumnPos(5));
        assertEquals("7 key max 7 L2 [7]", 5, params.getColumnPos(6));
        assertEquals("7 key max 7 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13011724.java!!!	testLayout7KeyMax7L3() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_L3);
        assertEquals("7 key max 7 L3 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 L3 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 L3 left", 2, params.mLeftKeys);
        assertEquals("7 key max 7 L3 right", 5, params.mRightKeys);
        assertEquals("7 key max 7 L3 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 L3 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 7 L3 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 7 L3 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key max 7 L3 [5]", -2, params.getColumnPos(4));
        assertEquals("7 key max 7 L3 [6]", 3, params.getColumnPos(5));
        assertEquals("7 key max 7 L3 [7]", 4, params.getColumnPos(6));
        assertEquals("7 key max 7 L3 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 L3 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13011852.java!!!	testLayout7KeyMax7M0() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_M0);
        assertEquals("7 key max 7 M0 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 M0 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 M0 left", 3, params.mLeftKeys);
        assertEquals("7 key max 7 M0 right", 4, params.mRightKeys);
        assertEquals("7 key max 7 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 7 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 7 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key max 7 M0 [5]", -2, params.getColumnPos(4));
        assertEquals("7 key max 7 M0 [6]", 3, params.getColumnPos(5));
        assertEquals("7 key max 7 M0 [7]", -3, params.getColumnPos(6));
        assertEquals("7 key max 7 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 M0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13011980.java!!!	testLayout7KeyMax7M1() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_M1);
        assertEquals("7 key max 7 M1 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 M1 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 M1 left", 3, params.mLeftKeys);
        assertEquals("7 key max 7 M1 right", 4, params.mRightKeys);
        assertEquals("7 key max 7 M1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 M1 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 7 M1 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 7 M1 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key max 7 M1 [5]", -2, params.getColumnPos(4));
        assertEquals("7 key max 7 M1 [6]", 3, params.getColumnPos(5));
        assertEquals("7 key max 7 M1 [7]", -3, params.getColumnPos(6));
        assertEquals("7 key max 7 M1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 M1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13012108.java!!!	testLayout7KeyMax7R3() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_R3);
        assertEquals("7 key max 7 R3 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 R3 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 R3 left", 4, params.mLeftKeys);
        assertEquals("7 key max 7 R3 right", 3, params.mRightKeys);
        assertEquals("7 key max 7 R3 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 R3 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 7 R3 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 7 R3 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key max 7 R3 [5]", -2, params.getColumnPos(4));
        assertEquals("7 key max 7 R3 [6]", -3, params.getColumnPos(5));
        assertEquals("7 key max 7 R3 [7]", -4, params.getColumnPos(6));
        assertEquals("7 key max 7 R3 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 R3 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!13012236.java!!!	testLayout7KeyMax7R2() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_R2);
        assertEquals("7 key max 7 R2 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 R2 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 R2 left", 5, params.mLeftKeys);
        assertEquals("7 key max 7 R2 right", 2, params.mRightKeys);
        assertEquals("7 key max 7 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 7 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 7 R2 [4]", -2, params.getColumnPos(3));
        assertEquals("7 key max 7 R2 [5]", -3, params.getColumnPos(4));
        assertEquals("7 key max 7 R2 [6]", -4, params.getColumnPos(5));
        assertEquals("7 key max 7 R2 [7]", -5, params.getColumnPos(6));
        assertEquals("7 key max 7 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 R2 default", WIDTH * 5, params.getDefaultKeyCoordX());
!!!13012364.java!!!	testLayout7KeyMax7R1() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_R1);
        assertEquals("7 key max 7 R1 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 R1 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 R1 left", 6, params.mLeftKeys);
        assertEquals("7 key max 7 R1 right", 1, params.mRightKeys);
        assertEquals("7 key max 7 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("7 key max 7 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("7 key max 7 R1 [4]", -3, params.getColumnPos(3));
        assertEquals("7 key max 7 R1 [5]", -4, params.getColumnPos(4));
        assertEquals("7 key max 7 R1 [6]", -5, params.getColumnPos(5));
        assertEquals("7 key max 7 R1 [7]", -6, params.getColumnPos(6));
        assertEquals("7 key max 7 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 R1 default", WIDTH * 6, params.getDefaultKeyCoordX());
!!!13012492.java!!!	testLayout7KeyMax7R0() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_R0);
        assertEquals("7 key max 7 R0 columns", 7, params.mNumColumns);
        assertEquals("7 key max 7 R0 rows", 1, params.mNumRows);
        assertEquals("7 key max 7 R0 left", 6, params.mLeftKeys);
        assertEquals("7 key max 7 R0 right", 1, params.mRightKeys);
        assertEquals("7 key max 7 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 7 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("7 key max 7 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("7 key max 7 R0 [4]", -3, params.getColumnPos(3));
        assertEquals("7 key max 7 R0 [5]", -4, params.getColumnPos(4));
        assertEquals("7 key max 7 R0 [6]", -5, params.getColumnPos(5));
        assertEquals("7 key max 7 R0 [7]", -6, params.getColumnPos(6));
        assertEquals("7 key max 7 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 7 R0 default", WIDTH * 6, params.getDefaultKeyCoordX());
!!!13012620.java!!!	testLayout7KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_M0);
        assertEquals("7 key max 5 M0 columns", 4, params.mNumColumns);
        assertEquals("7 key max 5 M0 rows", 2, params.mNumRows);
        assertEquals("7 key max 5 M0 left", 1, params.mLeftKeys);
        assertEquals("7 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("7 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key max 5 M0 [5]", 0, params.getColumnPos(4));
        assertEquals("7 key max 5 M0 [6]", 1, params.getColumnPos(5));
        assertEquals("7 key max 5 M0 [7]", 2, params.getColumnPos(6));
        assertEquals("7 key max 5 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("7 key max 5 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13012748.java!!!	testLayout7KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_L0);
        assertEquals("7 key max 5 L0 columns", 4, params.mNumColumns);
        assertEquals("7 key max 5 L0 rows", 2, params.mNumRows);
        assertEquals("7 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("7 key max 5 L0 right", 4, params.mRightKeys);
        assertEquals("7 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key max 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key max 5 L0 [5]", 0, params.getColumnPos(4));
        assertEquals("7 key max 5 L0 [6]", 1, params.getColumnPos(5));
        assertEquals("7 key max 5 L0 [7]", 2, params.getColumnPos(6));
        assertEquals("7 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13012876.java!!!	testLayout7KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_L1);
        assertEquals("7 key max 5 L1 columns", 4, params.mNumColumns);
        assertEquals("7 key max 5 L1 rows", 2, params.mNumRows);
        assertEquals("7 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("7 key max 5 L1 right", 4, params.mRightKeys);
        assertEquals("7 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key max 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key max 5 L1 [5]", 0, params.getColumnPos(4));
        assertEquals("7 key max 5 L1 [6]", 1, params.getColumnPos(5));
        assertEquals("7 key max 5 L1 [7]", 2, params.getColumnPos(6));
        assertEquals("7 key max 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13013004.java!!!	testLayout7KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_L2);
        assertEquals("7 key max 5 L2 columns", 4, params.mNumColumns);
        assertEquals("7 key max 5 L2 rows", 2, params.mNumRows);
        assertEquals("7 key max 5 L2 left", 1, params.mLeftKeys);
        assertEquals("7 key max 5 L2 right", 3, params.mRightKeys);
        assertEquals("7 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 5 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key max 5 L2 [5]", 0, params.getColumnPos(4));
        assertEquals("7 key max 5 L2 [6]", 1, params.getColumnPos(5));
        assertEquals("7 key max 5 L2 [7]", 2, params.getColumnPos(6));
        assertEquals("7 key max 5 L2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("7 key max 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13013132.java!!!	testLayout7KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_R0);
        assertEquals("7 key max 5 R0 columns", 4, params.mNumColumns);
        assertEquals("7 key max 5 R0 rows", 2, params.mNumRows);
        assertEquals("7 key max 5 R0 left", 3, params.mLeftKeys);
        assertEquals("7 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("7 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("7 key max 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("7 key max 5 R0 [4]", -3, params.getColumnPos(3));
        assertEquals("7 key max 5 R0 [5]", 0, params.getColumnPos(4));
        assertEquals("7 key max 5 R0 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key max 5 R0 [7]", -2, params.getColumnPos(6));
        assertEquals("7 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 5 R0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13013260.java!!!	testLayout7KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_R1);
        assertEquals("7 key max 5 R1 columns", 4, params.mNumColumns);
        assertEquals("7 key max 5 R1 rows", 2, params.mNumRows);
        assertEquals("7 key max 5 R1 left", 3, params.mLeftKeys);
        assertEquals("7 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("7 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("7 key max 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("7 key max 5 R1 [4]", -3, params.getColumnPos(3));
        assertEquals("7 key max 5 R1 [5]", 0, params.getColumnPos(4));
        assertEquals("7 key max 5 R1 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key max 5 R1 [7]", -2, params.getColumnPos(6));
        assertEquals("7 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 5 R1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13013388.java!!!	testLayout7KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_R2);
        assertEquals("7 key max 5 R2 columns", 4, params.mNumColumns);
        assertEquals("7 key max 5 R2 rows", 2, params.mNumRows);
        assertEquals("7 key max 5 R2 left", 2, params.mLeftKeys);
        assertEquals("7 key max 5 R2 right", 2, params.mRightKeys);
        assertEquals("7 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 5 R2 [4]", -2, params.getColumnPos(3));
        assertEquals("7 key max 5 R2 [5]", 0, params.getColumnPos(4));
        assertEquals("7 key max 5 R2 [6]", 1, params.getColumnPos(5));
        assertEquals("7 key max 5 R2 [7]", -1, params.getColumnPos(6));
        assertEquals("7 key max 5 R2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("7 key max 5 R2 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13013516.java!!!	testLayout7KeyMax3M0() : void
        MoreKeysKeyboardParams params = createParams(7, 3, XPOS_M0);
        assertEquals("7 key max 3 M0 columns", 3, params.mNumColumns);
        assertEquals("7 key max 3 M0 rows", 3, params.mNumRows);
        assertEquals("7 key max 3 M0 left", 1, params.mLeftKeys);
        assertEquals("7 key max 3 M0 right", 2, params.mRightKeys);
        assertEquals("7 key max 3 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 3 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 3 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 3 M0 [4]", 0, params.getColumnPos(3));
        assertEquals("7 key max 3 M0 [5]", 1, params.getColumnPos(4));
        assertEquals("7 key max 3 M0 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key max 3 M0 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key max 3 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 3 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13013644.java!!!	testLayout7KeyMax3L0() : void
        MoreKeysKeyboardParams params = createParams(7, 3, XPOS_L0);
        assertEquals("7 key max 3 L0 columns", 3, params.mNumColumns);
        assertEquals("7 key max 3 L0 rows", 3, params.mNumRows);
        assertEquals("7 key max 3 L0 left", 0, params.mLeftKeys);
        assertEquals("7 key max 3 L0 right", 3, params.mRightKeys);
        assertEquals("7 key max 3 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 3 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 3 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key max 3 L0 [4]", 0, params.getColumnPos(3));
        assertEquals("7 key max 3 L0 [5]", 1, params.getColumnPos(4));
        assertEquals("7 key max 3 L0 [6]", 2, params.getColumnPos(5));
        assertEquals("7 key max 3 L0 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key max 3 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 3 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13013772.java!!!	testLayout7KeyMax3L1() : void
        MoreKeysKeyboardParams params = createParams(7, 3, XPOS_L1);
        assertEquals("7 key max 3 L1 columns", 3, params.mNumColumns);
        assertEquals("7 key max 3 L1 rows", 3, params.mNumRows);
        assertEquals("7 key max 3 L1 left", 0, params.mLeftKeys);
        assertEquals("7 key max 3 L1 right", 3, params.mRightKeys);
        assertEquals("7 key max 3 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 3 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 3 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key max 3 L1 [4]", 0, params.getColumnPos(3));
        assertEquals("7 key max 3 L1 [5]", 1, params.getColumnPos(4));
        assertEquals("7 key max 3 L1 [6]", 2, params.getColumnPos(5));
        assertEquals("7 key max 3 L1 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key max 3 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 3 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13013900.java!!!	testLayout7KeyMax3L2() : void
        MoreKeysKeyboardParams params = createParams(7, 3, XPOS_L2);
        assertEquals("7 key max 3 L2 columns", 3, params.mNumColumns);
        assertEquals("7 key max 3 L2 rows", 3, params.mNumRows);
        assertEquals("7 key max 3 L2 left", 1, params.mLeftKeys);
        assertEquals("7 key max 3 L2 right", 2, params.mRightKeys);
        assertEquals("7 key max 3 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 3 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 3 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 3 L2 [4]", 0, params.getColumnPos(3));
        assertEquals("7 key max 3 L2 [5]", 1, params.getColumnPos(4));
        assertEquals("7 key max 3 L2 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key max 3 L2 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key max 3 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 3 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13014028.java!!!	testLayout7KeyMax3R0() : void
        MoreKeysKeyboardParams params = createParams(7, 3, XPOS_R0);
        assertEquals("7 key max 3 R0 columns", 3, params.mNumColumns);
        assertEquals("7 key max 3 R0 rows", 3, params.mNumRows);
        assertEquals("7 key max 3 R0 left", 2, params.mLeftKeys);
        assertEquals("7 key max 3 R0 right", 1, params.mRightKeys);
        assertEquals("7 key max 3 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 3 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("7 key max 3 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("7 key max 3 R0 [4]", 0, params.getColumnPos(3));
        assertEquals("7 key max 3 R0 [5]", -1, params.getColumnPos(4));
        assertEquals("7 key max 3 R0 [6]", -2, params.getColumnPos(5));
        assertEquals("7 key max 3 R0 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key max 3 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 3 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13014156.java!!!	testLayout7KeyMax3R1() : void
        MoreKeysKeyboardParams params = createParams(7, 3, XPOS_R1);
        assertEquals("7 key max 3 R1 columns", 3, params.mNumColumns);
        assertEquals("7 key max 3 R1 rows", 3, params.mNumRows);
        assertEquals("7 key max 3 R1 left", 2, params.mLeftKeys);
        assertEquals("7 key max 3 R1 right", 1, params.mRightKeys);
        assertEquals("7 key max 3 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 3 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("7 key max 3 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("7 key max 3 R1 [4]", 0, params.getColumnPos(3));
        assertEquals("7 key max 3 R1 [5]", -1, params.getColumnPos(4));
        assertEquals("7 key max 3 R1 [6]", -2, params.getColumnPos(5));
        assertEquals("7 key max 3 R1 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key max 3 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 3 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13014284.java!!!	testLayout7KeyMax3R2() : void
        MoreKeysKeyboardParams params = createParams(7, 3, XPOS_R2);
        assertEquals("7 key max 3 R2 columns", 3, params.mNumColumns);
        assertEquals("7 key max 3 R2 rows", 3, params.mNumRows);
        assertEquals("7 key max 3 R2 left", 1, params.mLeftKeys);
        assertEquals("7 key max 3 R2 right", 2, params.mRightKeys);
        assertEquals("7 key max 3 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key max 3 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key max 3 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key max 3 R2 [4]", 0, params.getColumnPos(3));
        assertEquals("7 key max 3 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("7 key max 3 R2 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key max 3 R2 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key max 3 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key max 3 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13014412.java!!!	testLayout8KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_M0);
        assertEquals("8 key max 5 M0 columns", 4, params.mNumColumns);
        assertEquals("8 key max 5 M0 rows", 2, params.mNumRows);
        assertEquals("8 key max 5 M0 left", 1, params.mLeftKeys);
        assertEquals("8 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("8 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("8 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("8 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("8 key max 5 M0 [5]", 0, params.getColumnPos(4));
        assertEquals("8 key max 5 M0 [6]", 1, params.getColumnPos(5));
        assertEquals("8 key max 5 M0 [7]", -1, params.getColumnPos(6));
        assertEquals("8 key max 5 M0 [8]", 2, params.getColumnPos(7));
        assertEquals("8 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key max 5 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13014540.java!!!	testLayout8KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_L0);
        assertEquals("8 key max 5 L0 columns", 4, params.mNumColumns);
        assertEquals("8 key max 5 L0 rows", 2, params.mNumRows);
        assertEquals("8 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("8 key max 5 L0 right", 4, params.mRightKeys);
        assertEquals("8 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key max 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("8 key max 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("8 key max 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("8 key max 5 L0 [5]", 0, params.getColumnPos(4));
        assertEquals("8 key max 5 L0 [6]", 1, params.getColumnPos(5));
        assertEquals("8 key max 5 L0 [7]", 2, params.getColumnPos(6));
        assertEquals("8 key max 5 L0 [8]", 3, params.getColumnPos(7));
        assertEquals("8 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13014668.java!!!	testLayout8KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_L1);
        assertEquals("8 key max 5 L1 columns", 4, params.mNumColumns);
        assertEquals("8 key max 5 L1 rows", 2, params.mNumRows);
        assertEquals("8 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("8 key max 5 L1 right", 4, params.mRightKeys);
        assertEquals("8 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key max 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("8 key max 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("8 key max 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("8 key max 5 L1 [5]", 0, params.getColumnPos(4));
        assertEquals("8 key max 5 L1 [6]", 1, params.getColumnPos(5));
        assertEquals("8 key max 5 L1 [7]", 2, params.getColumnPos(6));
        assertEquals("8 key max 5 L1 [8]", 3, params.getColumnPos(7));
        assertEquals("8 key max 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13014796.java!!!	testLayout8KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_L2);
        assertEquals("8 key max 5 L2 columns", 4, params.mNumColumns);
        assertEquals("8 key max 5 L2 rows", 2, params.mNumRows);
        assertEquals("8 key max 5 L2 left", 1, params.mLeftKeys);
        assertEquals("8 key max 5 L2 right", 3, params.mRightKeys);
        assertEquals("8 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key max 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("8 key max 5 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("8 key max 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("8 key max 5 L2 [5]", 0, params.getColumnPos(4));
        assertEquals("8 key max 5 L2 [6]", 1, params.getColumnPos(5));
        assertEquals("8 key max 5 L2 [7]", -1, params.getColumnPos(6));
        assertEquals("8 key max 5 L2 [8]", 2, params.getColumnPos(7));
        assertEquals("8 key max 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key max 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13014924.java!!!	testLayout8KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_R0);
        assertEquals("8 key max 5 R0 columns", 4, params.mNumColumns);
        assertEquals("8 key max 5 R0 rows", 2, params.mNumRows);
        assertEquals("8 key max 5 R0 left", 3, params.mLeftKeys);
        assertEquals("8 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("8 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key max 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("8 key max 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("8 key max 5 R0 [4]", -3, params.getColumnPos(3));
        assertEquals("8 key max 5 R0 [5]", 0, params.getColumnPos(4));
        assertEquals("8 key max 5 R0 [6]", -1, params.getColumnPos(5));
        assertEquals("8 key max 5 R0 [7]", -2, params.getColumnPos(6));
        assertEquals("8 key max 5 R0 [8]", -3, params.getColumnPos(7));
        assertEquals("8 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key max 5 R0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13015052.java!!!	testLayout8KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_R1);
        assertEquals("8 key max 5 R1 columns", 4, params.mNumColumns);
        assertEquals("8 key max 5 R1 rows", 2, params.mNumRows);
        assertEquals("8 key max 5 R1 left", 3, params.mLeftKeys);
        assertEquals("8 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("8 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key max 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("8 key max 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("8 key max 5 R1 [4]", -3, params.getColumnPos(3));
        assertEquals("8 key max 5 R1 [5]", 0, params.getColumnPos(4));
        assertEquals("8 key max 5 R1 [6]", -1, params.getColumnPos(5));
        assertEquals("8 key max 5 R1 [7]", -2, params.getColumnPos(6));
        assertEquals("8 key max 5 R1 [8]", -3, params.getColumnPos(7));
        assertEquals("8 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key max 5 R1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13015180.java!!!	testLayout8KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_R2);
        assertEquals("8 key max 5 R2 columns", 4, params.mNumColumns);
        assertEquals("8 key max 5 R2 rows", 2, params.mNumRows);
        assertEquals("8 key max 5 R2 left", 2, params.mLeftKeys);
        assertEquals("8 key max 5 R2 right", 2, params.mRightKeys);
        assertEquals("8 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key max 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("8 key max 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("8 key max 5 R2 [4]", -2, params.getColumnPos(3));
        assertEquals("8 key max 5 R2 [5]", 0, params.getColumnPos(4));
        assertEquals("8 key max 5 R2 [6]", 1, params.getColumnPos(5));
        assertEquals("8 key max 5 R2 [7]", -1, params.getColumnPos(6));
        assertEquals("8 key max 5 R2 [8]", -2, params.getColumnPos(7));
        assertEquals("8 key max 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key max 5 R2 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13015308.java!!!	testLayout9KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_M0);
        assertEquals("9 key max 5 M0 columns", 5, params.mNumColumns);
        assertEquals("9 key max 5 M0 rows", 2, params.mNumRows);
        assertEquals("9 key max 5 M0 left", 2, params.mLeftKeys);
        assertEquals("9 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("9 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("9 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("9 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("9 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("9 key max 5 M0 [5]", -2, params.getColumnPos(4));
        assertEquals("9 key max 5 M0 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key max 5 M0 [7]", 1, params.getColumnPos(6));
        assertEquals("9 key max 5 M0 [8]", -1, params.getColumnPos(7));
        assertEquals("9 key max 5 M0 [9]", 2, params.getColumnPos(8));
        assertEquals("9 key max 5 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("9 key max 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13015436.java!!!	testLayout9KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_L0);
        assertEquals("9 key max 5 L0 columns", 5, params.mNumColumns);
        assertEquals("9 key max 5 L0 rows", 2, params.mNumRows);
        assertEquals("9 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("9 key max 5 L0 right", 5, params.mRightKeys);
        assertEquals("9 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("9 key max 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("9 key max 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("9 key max 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("9 key max 5 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("9 key max 5 L0 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key max 5 L0 [7]", 1, params.getColumnPos(6));
        assertEquals("9 key max 5 L0 [8]", 2, params.getColumnPos(7));
        assertEquals("9 key max 5 L0 [9]", 3, params.getColumnPos(8));
        assertEquals("9 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("9 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13015564.java!!!	testLayout9KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_L1);
        assertEquals("9 key max 5 L1 columns", 5, params.mNumColumns);
        assertEquals("9 key max 5 L1 rows", 2, params.mNumRows);
        assertEquals("9 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("9 key max 5 L1 right", 5, params.mRightKeys);
        assertEquals("9 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("9 key max 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("9 key max 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("9 key max 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("9 key max 5 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("9 key max 5 L1 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key max 5 L1 [7]", 1, params.getColumnPos(6));
        assertEquals("9 key max 5 L1 [8]", 2, params.getColumnPos(7));
        assertEquals("9 key max 5 L1 [9]", 3, params.getColumnPos(8));
        assertEquals("9 key max 5 L1 adjust",0, params.mTopRowAdjustment);
        assertEquals("9 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13015692.java!!!	testLayout9KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_L2);
        assertEquals("9 key max 5 L2 columns", 5, params.mNumColumns);
        assertEquals("9 key max 5 L2 rows", 2, params.mNumRows);
        assertEquals("9 key max 5 L2 left", 1, params.mLeftKeys);
        assertEquals("9 key max 5 L2 right", 4, params.mRightKeys);
        assertEquals("9 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("9 key max 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("9 key max 5 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("9 key max 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("9 key max 5 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("9 key max 5 L2 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key max 5 L2 [7]", 1, params.getColumnPos(6));
        assertEquals("9 key max 5 L2 [8]", 2, params.getColumnPos(7));
        assertEquals("9 key max 5 L2 [9]", 3, params.getColumnPos(8));
        assertEquals("9 key max 5 L2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("9 key max 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13015820.java!!!	testLayout9KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_R0);
        assertEquals("9 key max 5 R0 columns", 5, params.mNumColumns);
        assertEquals("9 key max 5 R0 rows", 2, params.mNumRows);
        assertEquals("9 key max 5 R0 left", 4, params.mLeftKeys);
        assertEquals("9 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("9 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("9 key max 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("9 key max 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("9 key max 5 R0 [4]", -3, params.getColumnPos(3));
        assertEquals("9 key max 5 R0 [5]", -4, params.getColumnPos(4));
        assertEquals("9 key max 5 R0 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key max 5 R0 [7]", -1, params.getColumnPos(6));
        assertEquals("9 key max 5 R0 [8]", -2, params.getColumnPos(7));
        assertEquals("9 key max 5 R0 [9]", -3, params.getColumnPos(8));
        assertEquals("9 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("9 key max 5 R0 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!13015948.java!!!	testLayout9KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_R1);
        assertEquals("9 key max 5 R1 columns", 5, params.mNumColumns);
        assertEquals("9 key max 5 R1 rows", 2, params.mNumRows);
        assertEquals("9 key max 5 R1 left", 4, params.mLeftKeys);
        assertEquals("9 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("9 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("9 key max 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("9 key max 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("9 key max 5 R1 [4]", -3, params.getColumnPos(3));
        assertEquals("9 key max 5 R1 [5]", -4, params.getColumnPos(4));
        assertEquals("9 key max 5 R1 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key max 5 R1 [7]", -1, params.getColumnPos(6));
        assertEquals("9 key max 5 R1 [8]", -2, params.getColumnPos(7));
        assertEquals("9 key max 5 R1 [9]", -3, params.getColumnPos(8));
        assertEquals("9 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("9 key max 5 R1 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!13016076.java!!!	testLayout9KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_R2);
        assertEquals("9 key max 5 R2 columns", 5, params.mNumColumns);
        assertEquals("9 key max 5 R2 rows", 2, params.mNumRows);
        assertEquals("9 key max 5 R2 left", 3, params.mLeftKeys);
        assertEquals("9 key max 5 R2 right", 2, params.mRightKeys);
        assertEquals("9 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("9 key max 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("9 key max 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("9 key max 5 R2 [4]", -2, params.getColumnPos(3));
        assertEquals("9 key max 5 R2 [5]", -3, params.getColumnPos(4));
        assertEquals("9 key max 5 R2 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key max 5 R2 [7]", 1, params.getColumnPos(6));
        assertEquals("9 key max 5 R2 [8]", -1, params.getColumnPos(7));
        assertEquals("9 key max 5 R2 [9]", -2, params.getColumnPos(8));
        assertEquals("9 key max 5 R2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("9 key max 5 R2 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13016204.java!!!	testLayout10KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_M0);
        assertEquals("10 key max 5 M0 columns", 5, params.mNumColumns);
        assertEquals("10 key max 5 M0 rows", 2, params.mNumRows);
        assertEquals("10 key max 5 M0 left", 2, params.mLeftKeys);
        assertEquals("10 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("10 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("10 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("10 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("10 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("10 key max 5 M0 [5]", -2, params.getColumnPos(4));
        assertEquals("10 key max 5 M0 [6]", 0, params.getColumnPos(5));
        assertEquals("10 key max 5 M0 [7]", 1, params.getColumnPos(6));
        assertEquals("10 key max 5 M0 [8]", -1, params.getColumnPos(7));
        assertEquals("10 key max 5 M0 [9]", 2, params.getColumnPos(8));
        assertEquals("10 key max 5 M0 [A]", -2, params.getColumnPos(9));
        assertEquals("10 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key max 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13016332.java!!!	testLayout10KeyMax5L0() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_L0);
        assertEquals("10 key max 5 L0 columns", 5, params.mNumColumns);
        assertEquals("10 key max 5 L0 rows", 2, params.mNumRows);
        assertEquals("10 key max 5 L0 left", 0, params.mLeftKeys);
        assertEquals("10 key max 5 L0 right", 5, params.mRightKeys);
        assertEquals("10 key max 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("10 key max 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("10 key max 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("10 key max 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("10 key max 5 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("10 key max 5 L0 [6]", 0, params.getColumnPos(5));
        assertEquals("10 key max 5 L0 [7]", 1, params.getColumnPos(6));
        assertEquals("10 key max 5 L0 [8]", 2, params.getColumnPos(7));
        assertEquals("10 key max 5 L0 [9]", 3, params.getColumnPos(8));
        assertEquals("10 key max 5 L0 [A]", 4, params.getColumnPos(9));
        assertEquals("10 key max 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key max 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13016460.java!!!	testLayout10KeyMax5L1() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_L1);
        assertEquals("10 key max 5 L1 columns", 5, params.mNumColumns);
        assertEquals("10 key max 5 L1 rows", 2, params.mNumRows);
        assertEquals("10 key max 5 L1 left", 0, params.mLeftKeys);
        assertEquals("10 key max 5 L1 right", 5, params.mRightKeys);
        assertEquals("10 key max 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("10 key max 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("10 key max 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("10 key max 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("10 key max 5 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("10 key max 5 L1 [6]", 0, params.getColumnPos(5));
        assertEquals("10 key max 5 L1 [7]", 1, params.getColumnPos(6));
        assertEquals("10 key max 5 L1 [8]", 2, params.getColumnPos(7));
        assertEquals("10 key max 5 L1 [9]", 3, params.getColumnPos(8));
        assertEquals("10 key max 5 L1 [A]", 4, params.getColumnPos(9));
        assertEquals("10 key max 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key max 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!13016588.java!!!	testLayout10KeyMax5L2() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_L2);
        assertEquals("10 key max 5 L2 columns", 5, params.mNumColumns);
        assertEquals("10 key max 5 L2 rows", 2, params.mNumRows);
        assertEquals("10 key max 5 L2 left", 1, params.mLeftKeys);
        assertEquals("10 key max 5 L2 right", 4, params.mRightKeys);
        assertEquals("10 key max 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("10 key max 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("10 key max 5 L2 [3]", -1, params.getColumnPos(2));
        assertEquals("10 key max 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("10 key max 5 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("10 key max 5 L2 [6]", 0, params.getColumnPos(5));
        assertEquals("10 key max 5 L2 [7]", 1, params.getColumnPos(6));
        assertEquals("10 key max 5 L2 [8]", -1, params.getColumnPos(7));
        assertEquals("10 key max 5 L2 [9]", 2, params.getColumnPos(8));
        assertEquals("10 key max 5 L2 [A]", 3, params.getColumnPos(9));
        assertEquals("10 key max 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key max 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13016716.java!!!	testLayout10KeyMax5R0() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_R0);
        assertEquals("10 key max 5 R0 columns", 5, params.mNumColumns);
        assertEquals("10 key max 5 R0 rows", 2, params.mNumRows);
        assertEquals("10 key max 5 R0 left", 4, params.mLeftKeys);
        assertEquals("10 key max 5 R0 right", 1, params.mRightKeys);
        assertEquals("10 key max 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("10 key max 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("10 key max 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("10 key max 5 R0 [4]", -3, params.getColumnPos(3));
        assertEquals("10 key max 5 R0 [5]", -4, params.getColumnPos(4));
        assertEquals("10 key max 5 R0 [6]", 0, params.getColumnPos(5));
        assertEquals("10 key max 5 R0 [7]", -1, params.getColumnPos(6));
        assertEquals("10 key max 5 R0 [8]", -2, params.getColumnPos(7));
        assertEquals("10 key max 5 R0 [9]", -3, params.getColumnPos(8));
        assertEquals("10 key max 5 R0 [A]", -4, params.getColumnPos(9));
        assertEquals("10 key max 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key max 5 R0 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!13016844.java!!!	testLayout10KeyMax5R1() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_R1);
        assertEquals("10 key max 5 R1 columns", 5, params.mNumColumns);
        assertEquals("10 key max 5 R1 rows", 2, params.mNumRows);
        assertEquals("10 key max 5 R1 left", 4, params.mLeftKeys);
        assertEquals("10 key max 5 R1 right", 1, params.mRightKeys);
        assertEquals("10 key max 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("10 key max 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("10 key max 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("10 key max 5 R1 [4]", -3, params.getColumnPos(3));
        assertEquals("10 key max 5 R1 [5]", -4, params.getColumnPos(4));
        assertEquals("10 key max 5 R1 [6]", 0, params.getColumnPos(5));
        assertEquals("10 key max 5 R1 [7]", -1, params.getColumnPos(6));
        assertEquals("10 key max 5 R1 [8]", -2, params.getColumnPos(7));
        assertEquals("10 key max 5 R1 [9]", -3, params.getColumnPos(8));
        assertEquals("10 key max 5 R1 [A]", -4, params.getColumnPos(9));
        assertEquals("10 key max 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key max 5 R1 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!13016972.java!!!	testLayout10KeyMax5R2() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_R2);
        assertEquals("10 key max 5 R2 columns", 5, params.mNumColumns);
        assertEquals("10 key max 5 R2 rows", 2, params.mNumRows);
        assertEquals("10 key max 5 R2 left", 3, params.mLeftKeys);
        assertEquals("10 key max 5 R2 right", 2, params.mRightKeys);
        assertEquals("10 key max 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("10 key max 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("10 key max 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("10 key max 5 R2 [4]", -2, params.getColumnPos(3));
        assertEquals("10 key max 5 R2 [5]", -3, params.getColumnPos(4));
        assertEquals("10 key max 5 R2 [6]", 0, params.getColumnPos(5));
        assertEquals("10 key max 5 R2 [7]", 1, params.getColumnPos(6));
        assertEquals("10 key max 5 R2 [8]", -1, params.getColumnPos(7));
        assertEquals("10 key max 5 R2 [9]", -2, params.getColumnPos(8));
        assertEquals("10 key max 5 R2 [A]", -3, params.getColumnPos(9));
        assertEquals("10 key max 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key max 5 R2 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!13017100.java!!!	testLayout11KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(11, 5, XPOS_M0);
        assertEquals("11 key max 5 M0 columns", 4, params.mNumColumns);
        assertEquals("11 key max 5 M0 rows", 3, params.mNumRows);
        assertEquals("11 key max 5 M0 left", 1, params.mLeftKeys);
        assertEquals("11 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("11 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("11 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("11 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("11 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("11 key max 5 M0 [5]", 0, params.getColumnPos(4));
        assertEquals("11 key max 5 M0 [6]", 1, params.getColumnPos(5));
        assertEquals("11 key max 5 M0 [7]", -1, params.getColumnPos(6));
        assertEquals("11 key max 5 M0 [8]", 2, params.getColumnPos(7));
        assertEquals("11 key max 5 M0 [9]", 0, params.getColumnPos(8));
        assertEquals("11 key max 5 M0 [A]", 1, params.getColumnPos(9));
        assertEquals("11 key max 5 M0 [B]", 2, params.getColumnPos(10));
        assertEquals("11 key max 5 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("11 key max 5 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13017228.java!!!	testLayout12KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(12, 5, XPOS_M0);
        assertEquals("12 key max 5 M0 columns", 4, params.mNumColumns);
        assertEquals("12 key max 5 M0 rows", 3, params.mNumRows);
        assertEquals("12 key max 5 M0 left", 1, params.mLeftKeys);
        assertEquals("12 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("12 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("12 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("12 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("12 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("12 key max 5 M0 [5]", 0, params.getColumnPos(4));
        assertEquals("12 key max 5 M0 [6]", 1, params.getColumnPos(5));
        assertEquals("12 key max 5 M0 [7]", -1, params.getColumnPos(6));
        assertEquals("12 key max 5 M0 [8]", 2, params.getColumnPos(7));
        assertEquals("12 key max 5 M0 [9]", 0, params.getColumnPos(8));
        assertEquals("12 key max 5 M0 [A]", 1, params.getColumnPos(9));
        assertEquals("12 key max 5 M0 [B]", -1, params.getColumnPos(10));
        assertEquals("12 key max 5 M0 [C]", 2, params.getColumnPos(11));
        assertEquals("12 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("12 key max 5 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!13017356.java!!!	testLayout13KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(13, 5, XPOS_M0);
        assertEquals("13 key max 5 M0 columns", 5, params.mNumColumns);
        assertEquals("13 key max 5 M0 rows", 3, params.mNumRows);
        assertEquals("13 key max 5 M0 left", 2, params.mLeftKeys);
        assertEquals("13 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("13 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("13 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("13 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("13 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("13 key max 5 M0 [5]", -2, params.getColumnPos(4));
        assertEquals("13 key max 5 M0 [6]", 0, params.getColumnPos(5));
        assertEquals("13 key max 5 M0 [7]", 1, params.getColumnPos(6));
        assertEquals("13 key max 5 M0 [8]", -1, params.getColumnPos(7));
        assertEquals("13 key max 5 M0 [9]", 2, params.getColumnPos(8));
        assertEquals("13 key max 5 M0 [A]", -2, params.getColumnPos(9));
        assertEquals("13 key max 5 M0 [B]", 0, params.getColumnPos(10));
        assertEquals("13 key max 5 M0 [C]", 1, params.getColumnPos(11));
        assertEquals("13 key max 5 M0 [D]", -1, params.getColumnPos(12));
        assertEquals("13 key max 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("13 key max 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!13017484.java!!!	testLayout14KeyMax5M0() : void
        MoreKeysKeyboardParams params = createParams(14, 5, XPOS_M0);
        assertEquals("13 key max 5 M0 columns", 5, params.mNumColumns);
        assertEquals("13 key max 5 M0 rows", 3, params.mNumRows);
        assertEquals("13 key max 5 M0 left", 2, params.mLeftKeys);
        assertEquals("13 key max 5 M0 right", 3, params.mRightKeys);
        assertEquals("13 key max 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("13 key max 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("13 key max 5 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("13 key max 5 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("13 key max 5 M0 [5]", -2, params.getColumnPos(4));
        assertEquals("13 key max 5 M0 [6]", 0, params.getColumnPos(5));
        assertEquals("13 key max 5 M0 [7]", 1, params.getColumnPos(6));
        assertEquals("13 key max 5 M0 [8]", -1, params.getColumnPos(7));
        assertEquals("13 key max 5 M0 [9]", 2, params.getColumnPos(8));
        assertEquals("13 key max 5 M0 [A]", -2, params.getColumnPos(9));
        assertEquals("13 key max 5 M0 [B]", 0, params.getColumnPos(10));
        assertEquals("13 key max 5 M0 [C]", 1, params.getColumnPos(11));
        assertEquals("13 key max 5 M0 [D]", -1, params.getColumnPos(12));
        assertEquals("13 key max 5 M0 [E]", 2, params.getColumnPos(13));
        assertEquals("13 key max 5 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("13 key max 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
