class LogManager
!!!1719579.java!!!	getLoggingMXBean() : LoggingMXBean
        throw new UnsupportedOperationException();
!!!1719707.java!!!	LogManager()
        loggers = new Hashtable<String, Logger>();
        props = new Properties();
        listeners = new PropertyChangeSupport(this);
        // add shutdown hook to ensure that the associated resource will be
        // freed when JVM exits
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override public void run() {
                reset();
            }
        });
!!!1719963.java!!!	addLogger(inout logger : Logger) : boolean
        String name = logger.getName();
        if (loggers.get(name) != null) {
            return false;
        }
        addToFamilyTree(logger, name);
        loggers.put(name, logger);
        logger.setManager(this);
        return true;
!!!1720091.java!!!	addToFamilyTree(inout logger : Logger, inout name : String) : void
        Logger parent = null;
        // find parent
        int lastSeparator;
        String parentName = name;
        while ((lastSeparator = parentName.lastIndexOf('.')) != -1) {
            parentName = parentName.substring(0, lastSeparator);
            parent = loggers.get(parentName);
            if (parent != null) {
                setParent(logger, parent);
                break;
            } else if (getProperty(parentName + ".level") != null ||
                    getProperty(parentName + ".handlers") != null) {
                parent = Logger.getLogger(parentName);
                setParent(logger, parent);
                break;
            }
        }
        if (parent == null && (parent = loggers.get("")) != null) {
            setParent(logger, parent);
        }

        // find children
        // TODO: performance can be improved here?
        String nameDot = name + '.';
        Collection<Logger> allLoggers = loggers.values();
        for (final Logger child : allLoggers) {
            Logger oldParent = child.getParent();
            if (parent == oldParent && (name.length() == 0 || child.getName().startsWith(nameDot))) {
                final Logger thisLogger = logger;
                child.setParent(thisLogger);
                if (oldParent != null) {
                    // -- remove from old parent as the parent has been changed
                    oldParent.children.remove(child);
                }
            }
        }
!!!1720219.java!!!	getLogger(inout name : String) : Logger
        return loggers.get(name);
!!!1720347.java!!!	getLoggerNames() : Enumeration
        return loggers.keys();
!!!1720475.java!!!	getLogManager() : LogManager
        return manager;
!!!1720603.java!!!	getProperty(inout name : String) : String
        return props.getProperty(name);
!!!1720731.java!!!	readConfiguration() : void
        // check config class
        String configClassName = System.getProperty("java.util.logging.config.class");
        if (configClassName == null || getInstanceByClass(configClassName) == null) {
            // if config class failed, check config file
            String configFile = System.getProperty("java.util.logging.config.file");

            if (configFile == null) {
                // if cannot find configFile, use default logging.properties
                configFile = System.getProperty("java.home") + File.separator + "lib" +
                        File.separator + "logging.properties";
            }

            InputStream input = null;
            try {
                try {
                    input = new FileInputStream(configFile);
                } catch (IOException exception) {
                    // fall back to using the built-in logging.properties file
                    input = LogManager.class.getResourceAsStream("logging.properties");
                    if (input == null) {
                        throw exception;
                    }
                }
                readConfiguration(new BufferedInputStream(input));
            } finally {
                IoUtils.closeQuietly(input);
            }
        }
!!!1720859.java!!!	getInstanceByClass(in className : String) : Object
        try {
            Class<?> clazz = ClassLoader.getSystemClassLoader().loadClass(className);
            return clazz.newInstance();
        } catch (Exception e) {
            try {
                Class<?> clazz = Thread.currentThread().getContextClassLoader().loadClass(className);
                return clazz.newInstance();
            } catch (Exception innerE) {
                System.err.println("Loading class '" + className + "' failed");
                System.err.println(innerE);
                return null;
            }
        }
!!!1720987.java!!!	readConfigurationImpl(inout ins : InputStream) : void
        reset();
        props.load(ins);

        // The RI treats the root logger as special. For compatibility, always
        // update the root logger's handlers.
        Logger root = loggers.get("");
        if (root != null) {
            root.setManager(this);
        }

        // parse property "config" and apply setting
        String configs = props.getProperty("config");
        if (configs != null) {
            StringTokenizer st = new StringTokenizer(configs, " ");
            while (st.hasMoreTokens()) {
                String configerName = st.nextToken();
                getInstanceByClass(configerName);
            }
        }

        // set levels for logger
        Collection<Logger> allLoggers = loggers.values();
        for (Logger logger : allLoggers) {
            String property = props.getProperty(logger.getName() + ".level");
            if (property != null) {
                logger.setLevel(Level.parse(property));
            }
        }
        listeners.firePropertyChange(null, null, null);
!!!1721115.java!!!	readConfiguration(inout ins : InputStream) : void
        checkAccess();
        readConfigurationImpl(ins);
!!!1721243.java!!!	reset() : void
        checkAccess();
        props = new Properties();
        Enumeration<String> names = getLoggerNames();
        while (names.hasMoreElements()) {
            String name = names.nextElement();
            Logger logger = getLogger(name);
            if (logger != null) {
                logger.reset();
            }
        }
        Logger root = loggers.get("");
        if (root != null) {
            root.setLevel(Level.INFO);
        }
!!!1721371.java!!!	addPropertyChangeListener(inout l : PropertyChangeListener) : void
        if (l == null) {
            throw new NullPointerException("l == null");
        }
        checkAccess();
        listeners.addPropertyChangeListener(l);
!!!1721499.java!!!	removePropertyChangeListener(inout l : PropertyChangeListener) : void
        checkAccess();
        listeners.removePropertyChangeListener(l);
!!!1721627.java!!!	getOrCreate(inout name : String, inout resourceBundleName : String) : Logger
        Logger result = getLogger(name);
        if (result == null) {
            result = new Logger(name, resourceBundleName);
            addLogger(result);
        }
        return result;
!!!1721755.java!!!	setParent(inout logger : Logger, inout newParent : Logger) : void
        logger.parent = newParent;

        if (logger.levelObjVal == null) {
            setLevelRecursively(logger, null);
        }
        newParent.children.add(logger);
        logger.updateDalvikLogHandler();
!!!1721883.java!!!	setLevelRecursively(inout logger : Logger, inout newLevel : Level) : void
        int previous = logger.levelIntVal;
        logger.levelObjVal = newLevel;

        if (newLevel == null) {
            logger.levelIntVal = logger.parent != null
                    ? logger.parent.levelIntVal
                    : Level.INFO.intValue();
        } else {
            logger.levelIntVal = newLevel.intValue();
        }

        if (previous != logger.levelIntVal) {
            for (Logger child : logger.children) {
                if (child.levelObjVal == null) {
                    setLevelRecursively(child, null);
                }
            }
        }
