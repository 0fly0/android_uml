class TvCecService
!!!12060940.java!!!	notifyRemoteCallbackScanStarted() : void
        if (DEBUG)
            Log.i(TAG, "@@@cec notifyRemoteCallbackScanStarted");
        Message msg = new Message();
        msg.what = REMOTE_CALLBACK_MSG_SCAN_STARTED;
        mRemoteCallbackHandler.sendMessage(msg);
!!!12061068.java!!!	notifyRemoteCallbackScanCompleted() : void
        if (DEBUG)
            Log.i(TAG, "@@@cec notifyRemoteCallbackScanCompleted");
        Message msg = new Message();
        msg.what = REMOTE_CALLBACK_MSG_SCAN_COMPLETED;
        mRemoteCallbackHandler.sendMessage(msg);
!!!12061196.java!!!	notifyRemoteCallbackScanStopped() : void
        if (DEBUG)
            Log.i(TAG, "@@@cec notifyRemoteCallbackScanStopped");
        Message msg = new Message();
        msg.what = REMOTE_CALLBACK_MSG_SCAN_STOPPED;
        mRemoteCallbackHandler.sendMessage(msg);
!!!12061324.java!!!	notifyRemoteCallbackDeviceUpdated(in arg1 : int, inout obj : Object) : void
        if (DEBUG)
            Log.i(TAG, "@@@cec notifyRemoteCallbackDeviceUpdated");
        Message msg = new Message();
        msg.what = REMOTE_CALLBACK_MSG_DEVICE_UPDATED;
        msg.arg1 = arg1;
        msg.obj = obj;
        mRemoteCallbackHandler.sendMessage(msg);
!!!12061452.java!!!	notifyRemoteCallbackCecEnabled() : void
        if (DEBUG)
            Log.i(TAG, "@@@cec notifyRemoteCallbackCecEnabled");
        Message msg = new Message();
        msg.what = REMOTE_CALLBACK_MSG_CEC_ENABLED;
        mRemoteCallbackHandler.sendMessage(msg);
!!!12061580.java!!!	notifyRemoteCallbackCecDisabled() : void
        if (DEBUG)
            Log.i(TAG, "@@@cec notifyRemoteCallbackCecDisabled");
        Message msg = new Message();
        msg.what = REMOTE_CALLBACK_MSG_CEC_DISABLED;
        mRemoteCallbackHandler.sendMessage(msg);
!!!12065164.java!!!	isOfType(in devTypeId : int) : boolean
        return (mDevTypeId == devTypeId);
!!!12065292.java!!!	isSACEnabled() : boolean
        if (DEBUG) {
            Log.d(TAG, "SAC Status is" + isSacEnabled);
        }
        return isSacEnabled;
!!!12065420.java!!!	setBootUpToken(inout token : boolean) : void
        if (DEBUG) {
            Log.d(TAG, "setBootUptoken " + token);
        }
        bootupToken = token;
!!!12065548.java!!!	getBootUpToken() : boolean
        return bootupToken;
!!!12065676.java!!!	isDevMenuOn() : boolean
        return isDevMenuOn;
!!!12065804.java!!!	setTvMute(inout mute : boolean) : void
        if (DEBUG) {
            Log.d(TAG, mute ? "Mute" : "Unmute"+  " TV");
        }
        isTvMuted = mute;
!!!12065932.java!!!	resetActiveInputDeviceAddress() : void
        activeInputDevAddress = INVALID;
        activeDevPhysicalAddress = "-1";
!!!12066060.java!!!	turnOffTVSpeakers() : void
        if (mContext != null) {
            Intent intent = new Intent(HdmiCecUtils.HDMI_CEC_MUTE_UNMUTE_TV_SPEAKER_ACTION);
            intent.putExtra(HdmiCecUtils.key_sac_mute, 1);
            mContext.sendBroadcast(intent);
        }
!!!12066188.java!!!	turnOnTVSpeakers() : void
        if (mContext != null) {
            Intent intent = new Intent(HdmiCecUtils.HDMI_CEC_MUTE_UNMUTE_TV_SPEAKER_ACTION);
            intent.putExtra(HdmiCecUtils.key_sac_mute, 0);
            mContext.sendBroadcast(intent);
        }
!!!12066316.java!!!	getNativeAudioReference() : void
        if (DEBUG) {
            Log.d(TAG, "Inside getNativeAudioReference method");
        }
!!!12066444.java!!!	sendScanCompletedBroadcast() : void
        if (isDeviceScanInProgress == true) {
            notifyRemoteCallbackScanCompleted();
        }
!!!12066572.java!!!	prepareLocaleMap() : void
        // Create a map for the locale conversion from ISO 639-1 to ISO 639-2
        if (DEBUG) {
            Log.d(TAG, "Preapring the map for the locale mapping");
        }
        localeMap = new HashMap<String, Integer>();
        localeMap.put("en", 1); // english
        localeMap.put("fr", 2); // french
        localeMap.put("es", 3); // spanish
        localeMap.put("it", 4); // italian
        localeMap.put("de", 5); // german
        localeMap.put("zh", 8); // chinese
        localeMap.put("ja", 9); // japanese
        localeMap.put("zh_TW", 10); // traditional chinese
        localeMap.put("ja_JP", 9); // Japan
        localeMap.put("zh_CN", 8); // china
!!!12066700.java!!!	populateDeviceNameMap() : void
        if (DEBUG) {
            Log.d(TAG, "########## Preparing the name map #########");
        }
        if (null == deviceNameMap) {
            deviceNameMap = new HashMap<Integer, String>();
        }
        deviceNameMap.put(new Integer(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV), "Tv");
        deviceNameMap.put(new Integer(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_RECORD),
                          "Recording Device");
        deviceNameMap.put(new Integer(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_RESERVED),
                          "Reserved Device");
        deviceNameMap.put(new Integer(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TUNER),
                          "Tuner Device");
        deviceNameMap.put(new Integer(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_PLAYBACK),
                          "Playback Device");
        deviceNameMap.put(new Integer(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_AUDIOSYSTEM),
                          "Audio System");
        deviceNameMap.put(new Integer(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_SWITCH),
                          "Switch Device");
        deviceNameMap.put(new Integer(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_VIDEO_PROCESSOR),
                          "Video Processor");
!!!12066828.java!!!	getDeviceTypesOfPort(in portNum : int, in logicalAddress : int) : int
        if (DEBUG) {
            Log.d(TAG,
                    "Inside the getDeviceTypesOfPort method(portNum:" +
                    + portNum + " logicalAddress:" + logicalAddress + ")");
        }
        try {
            hdmiDeviceList = getListOfConnectedCECDevices();
            for (int i = 0; i < hdmiDeviceList.size(); i++) {
                int port = hdmiDeviceList.get(i).getPortNumber();
                int devAddress = hdmiDeviceList.get(i).getDeviceAddress();
                if (port == portNum && logicalAddress == devAddress) {
                    if (DEBUG) {
                        Log.d(TAG, "Device type is "
                                + hdmiDeviceList.get(i).getDeviceType());
                    }
                    return hdmiDeviceList.get(i).getDeviceType();
                }
            }
            return -1;
        } catch (Exception e) {
            Log.e(TAG,
                    "Exception in getDeviceTypesOfPort method ---"
                            + e);
            return -1;
        }
!!!12066956.java!!!	setActiveInputDevicePhysicalAddress(in devPhysicalAddress : int) : void
        activeDevPhysicalAddress = Integer.toString(devPhysicalAddress);
        if (DEBUG) {
            Log.d(TAG, "physical address to be written " + devPhysicalAddress);
            Log.d(TAG, "setActiveInputDeviceAddress -- DevAdd = "
                    + devPhysicalAddress);
        }

!!!12067084.java!!!	nativeEventHandler(in event : int, in devAddress : int, in opCode : int, in evtParam : int, in usrParam : int, in usrParam2 : int, in datalength : int) : void
            switch(event) {
                case CecServiceHub.CEC_STOP_BEING_ACTIVE :
                    handleEventWithIntParam(event, 0,0,usrParam);
                    break;
                case CecServiceHub.CEC_START_BEING_ACTIVE :
                    handleEventWithIntParam(event, 0,0,usrParam);
                    break;
                case CecServiceHub.CEC_MUTE_ON_TV_SPEAKER :
                    handleEventWithIntParam(event, devAddress, opCode, 0);
                    break;
                case CecServiceHub.CEC_MUTE_OFF_TV_SPEAKER :
                    handleEventWithIntParam(event, devAddress, opCode, 0);
                    break;
                case CecServiceHub.CEC_DISCOVERY_STARTED :
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_DISCOVERY_IN_PROGRESS :
                    break;
                case CecServiceHub.CEC_DISCOVERY_STOPPED :
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_OSD_DISPLAY_MODE :
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_POWER_STATUS :
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_ACTIVE_INPUT :
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_IMAGE_VIEW_ON :
                    //TODO
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_TEXT_VIEW_ON :
                    //TODO
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_INACTIVE_INPUT :
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_REMOTE_DECK_STATUS :
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_REMOTE_TUNER_STATUS :
                    break;
                case CecServiceHub.CEC_CHANGE_CHANNEL :
                    break;
                case CecServiceHub.CEC_CHANNEL_UP :
                    break;
                case CecServiceHub.CEC_CHANNEL_DOWN :
                    break;
                case CecServiceHub.CEC_VENDOR_COMMAND :
                    //TODO:the real VENDOR_ID shoule be added here when customization
                    //now use SONY VENDOR_ID for test
                    int vendor_ID;
                    vendor_ID = 0x080046;
                    handleEventWithVendorCmdParam(event, devAddress, opCode, 0,
                        vendor_ID, usrParam, usrParam2, datalength);
                    break;
                case CecServiceHub.CEC_DEVICE_MENU_ON :
                    handleEventWithIntParam(event, devAddress, opCode,  0);
                    break;
                case CecServiceHub.CEC_DEVICE_MENU_OFF :
                    handleEventWithIntParam(event, devAddress, opCode, 0);
                    break;
                case CecServiceHub.CEC_USER_KEY :
                    handleEventWithIntParam(event, devAddress, opCode, evtParam);
                    break;
                case CecServiceHub.CEC_AUDIO_STATUS_UPDATE :
                    handleEventWithIntBoolParam(event, devAddress, opCode, evtParam,
                    (usrParam == 1 ? true : false));
                    break;
                case CecServiceHub.CEC_CHANGE_AUDIO_RATE :
                    //handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_SET_MENU_LANG:
                    //TODO: need to update java framework
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_STANDBY:
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_DISC_INSERTION:
                    handleEventWithIntParam(event, devAddress, opCode, usrParam);
                    break;
                case CecServiceHub.CEC_DISCOVERY_COMPLETED:
                    handleEventWithIntParam(event, devAddress, opCode, evtParam);
                    break;
                case CecServiceHub.CEC_AUDIO_DEVICE_ADDED:
                    handleAudioDeviceConnectingChanged(true);
                    break;
                case CecServiceHub.CEC_AUDIO_DEVICE_REMOVED:
                    handleAudioDeviceConnectingChanged(false);
                    break;
                default:
                    break;
            }
            return;
!!!12067212.java!!!	handleEventWithIntParam(in event : int, in devAddress : int, in opCode : int, in eventParam : int) : void
        if (DEBUG) {
            Log.d(TAG,"Inside the call back method of CEC Listener event no:" + event);
            Log.d(TAG,"EventParam = " + eventParam);
        }

        switch(event) {
            case CecServiceHub.CEC_USER_KEY:
                InputManager inputMgr = InputManager.getInstance();
                if (DEBUG) {
                    Log.d(TAG, "CEC_USER_KEY keycode: " + opCode + " eventType: " +
                        eventParam);
                }
                KeyEvent keyup,keydown;
                int keycode = opCode;
                int flags = 0;
                long now = SystemClock.uptimeMillis();
                switch(eventParam){
                    case 0://key up/release
                        keyup = new KeyEvent(now, now, KeyEvent.ACTION_UP, keycode, 0, 0);
                        try {
                            inputMgr.injectInputEvent(keyup,
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                        }catch(Exception exp){
                            exp.printStackTrace();
                        }
                        break;
                    case 1://key down/press
                        keydown = new KeyEvent(now, now, KeyEvent.ACTION_DOWN, keycode, 0, 0);
                        try{
                            inputMgr.injectInputEvent(keydown,
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                        } catch (Exception exp) {
                            exp.printStackTrace();
                        }
                        break;
                    case 2://combo key press and release
                        try {
                            keydown = new KeyEvent(now, now, KeyEvent.ACTION_DOWN, keycode, 0, 0);
                            inputMgr.injectInputEvent(keydown,
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                            keyup = new KeyEvent(now, now, KeyEvent.ACTION_UP, keycode, 0, 0);
                            inputMgr.injectInputEvent(keyup,
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                        } catch (Exception exp) {
                            exp.printStackTrace();
                        }
                        break;
                }
                break;
            case CecServiceHub.CEC_STOP_BEING_ACTIVE:
                break;

            case CecServiceHub.CEC_START_BEING_ACTIVE:
                break;

            case CecServiceHub.CEC_SET_MENU_LANG:
                if (DEBUG) {
                    Log.d(TAG,"Inside CEC Set_MENU_LANGUGAGE");
                    Log.d(TAG,"Requesting menu language: " + eventParam );
                }
                String languageSelection = null;
                String countrySelection = null;
                switch(eventParam) {
                    case CecServiceHub.MENU_LANGUAGE_ENGLISH:
                        languageSelection = "en";
                        countrySelection = "US";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_FRENCH:
                        languageSelection = "fr";
                        countrySelection = "FR";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_SPANISH:
                        languageSelection = "es";
                        countrySelection = "US";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_ITALIAN:
                        languageSelection = "it";
                        countrySelection = "IT";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_GERMAN:
                        languageSelection = "de";
                        countrySelection = "DE";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_DUTCH:
                        languageSelection = "nl";
                        countrySelection = "NL";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_PORTUGUESE:
                        languageSelection = "pt";
                        countrySelection = "PT";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_CHINESE:
                        languageSelection = "zh";
                        countrySelection = "CN";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_JAPANESE:
                        languageSelection = "ja";
                        countrySelection = "JP";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_TRADITIONAL_CHINESE:
                        languageSelection = "zh";
                        countrySelection = "TW";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_BULGARIAN:
                        languageSelection = "bg";
                        countrySelection = "BG";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_CATALAN:
                        languageSelection = "ca";
                        countrySelection = "ES";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_CROATIAN:
                        languageSelection = "hr";
                        countrySelection = "HR";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_CZECH:
                        languageSelection = "cs";
                        countrySelection = "CZ";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_DANISH:
                        languageSelection = "da";
                        countrySelection = "DK";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_FINNISH:
                        languageSelection = "fi";
                        countrySelection = "FI";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_GREEK:
                        languageSelection = "el";
                        countrySelection = "GR";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_HUNGARIAN:
                        languageSelection = "hu";
                        countrySelection = "HU";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_LATVIAN:
                        languageSelection = "lv";
                        countrySelection = "LV";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_LITHUANIAN:
                        languageSelection = "lt";
                        countrySelection = "LT";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_NORWEGIAN:
                        languageSelection = "nb";
                        countrySelection = "NO";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_POLISH:
                        languageSelection = "pl";
                        countrySelection = "PL";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_ROMANIAN:
                        languageSelection = "ro";
                        countrySelection = "RO";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_RUSSIAN:
                        languageSelection = "ru";
                        countrySelection = "RU";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_SLOVAK:
                        languageSelection = "sk";
                        countrySelection = "SK";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_SLOVENIAN:
                        languageSelection = "sl";
                        countrySelection = "SI";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_SWEDISH:
                        languageSelection = "sv";
                        countrySelection = "SE";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_TURKISH:
                        languageSelection = "tr";
                        countrySelection = "TR";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_UKRAINIAN:
                        languageSelection = "uk";
                        countrySelection = "UA";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_VIETNAMESE:
                        languageSelection = "vi";
                        countrySelection = "VN";
                        break;
                    default:
                        //unknown langcode, no change
                        break;
                }

                if (DEBUG) {
                    Log.d(TAG,"Will set menu language to: " +
                        languageSelection + "_" + countrySelection);
                }
                if(languageSelection != null) {
                    Locale newLocale = new Locale(languageSelection, countrySelection);
                    IActivityManager am = ActivityManagerNative.getDefault();
                    try {
                        Configuration config_am = am.getConfiguration();
                        config_am.locale = newLocale;
                        config_am.userSetLocale = true;
                        am.updateConfiguration(config_am);
                    } catch(Exception exp) {
                        exp.printStackTrace();
                    }
                }
                break;

            case CecServiceHub.CEC_STANDBY:
                if (DEBUG) {
                    Log.d(TAG,"Inside CEC_STANDBY");
                }
                Intent intent = new Intent("com.marvell.AppKiller.DO_POWER_OFF");
                intent.putExtra(NEED_CONFIRM_EXTRA, false);
                mContext.sendBroadcast(intent);
                break;

            case CecServiceHub.CEC_DISC_INSERTION:
                if (DEBUG) {
                    Log.d(TAG,"Inside CEC_DISC_INSERTION");
                }
                Intent startBDAppIntent  = new Intent(Intent.ACTION_MAIN, null);
                ComponentName cn = new ComponentName("com.marvell.bdp.application",
                "com.marvell.bdp.application.BDPActivity");
                startBDAppIntent.setComponent(cn);
                startBDAppIntent.setFlags(
                    Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
                try {
                    mContext.startActivity(startBDAppIntent);
                }
                catch (ActivityNotFoundException anf) {
                    anf.printStackTrace();
                    Log.e(TAG, "Blue Disc player app is not found when starting with intent:"
                          + startBDAppIntent);
                }
                break;

            case CecServiceHub.CEC_MUTE_ON_TV_SPEAKER:
                if (DEBUG) {
                    Log.d(TAG, "Received event 0 i.e. EVT_MUTE_ON_TV_SPEAKER");
                }
                turnOffTVSpeakers();
                break;

            case CecServiceHub.CEC_MUTE_OFF_TV_SPEAKER:
                if (DEBUG) {
                    Log.d(TAG, "Received event 1 i.e. EVT_MUTE_OFF_TV_SPEAKER");
                }
                turnOnTVSpeakers();
                break;

            case CecServiceHub.CEC_DISCOVERY_STARTED:
                if (DEBUG) {
                    Log.d(TAG, "Received event 2 i.e. EVT_DISCOVERY_STARTED");
                }
                break;

            case CecServiceHub.CEC_DISCOVERY_COMPLETED:
                if (DEBUG) {
                    Log.d(TAG,
                          "Received event 3 i.e. EVT_DISCOVERY_COMPLETED evtParm:"
                          + eventParam);
                }
                sendScanCompletedBroadcast();
                switch (eventParam) {
                    case HdmiCecUtils.CEC_AVAI_DEVICES_CHANGED:
                    case HdmiCecUtils.CEC_AVAI_DEVICES_ADDED:
                    case HdmiCecUtils.CEC_AVAI_DEVICES_REMOVED:
                        List<CECDevInfo> devList = getListOfConnectedCECDevices();
                        if (DEBUG) {
                            Log.d(TAG,
                                  "Received event 51 i.e. CEC_DEVICE_CHANGED event:"
                                  + eventParam);
                            Log.d(TAG, "The connectedCEC devices are:" + devList);
                        }
                        // if none device is connected, reset activeInputDevAddress to invalid
                        if ((null != devList) && (0 == devList.size())) {
                            activeInputDevAddress = INVALID;
                        }

                        notifyRemoteCallbackDeviceUpdated(eventParam, devList);

                        // besides the callbackinterface, also broadcast out this event
                        Intent broadcastIntent =
                            new Intent(HdmiCecUtils.ACTION_HDMI_CEC_AVAILABLE_DEVICES_CHANGED);
                        broadcastIntent.putExtra(
                            HdmiCecUtils.EXTRA_AVAILABLE_DEVICES_CHANGED_EVENT_TYPE_KEY,
                            event);
                        ArrayList<String> osdNameList = new ArrayList<String>();
                        for (int i = 0; i < 5; i++) {
                            osdNameList.add(new String());
                        }
                        for (CECDevInfo info : devList) {
                            if (DEBUG) {
                                Log.d(TAG, "The OSD Name to be added is " + info.getOsdName());
                            }
                            osdNameList.add(info.getPortNumber(), info.getOsdName());
                        }

                        if (DEBUG) {
                            for (int i = 0; i < 5; i++) {
                                Log.d(TAG, "The " + i + "th OSD Name is " + osdNameList.get(i));
                            }
                        }
                        broadcastIntent.putStringArrayListExtra(
                            HdmiCecUtils.EXTRA_STRING_ARRAY_NEW_AVAILABLE_DEVICES_KEY,
                            osdNameList);
                        mContext.sendBroadcast(broadcastIntent);
                        break;
                }
                break;

            case CecServiceHub.CEC_DISCOVERY_STOPPED:
                if (DEBUG) {
                    Log.d(TAG, "Received event 3 i.e. EVT_DISCOVERY_STOPPED");
                }
                break;

            case CecServiceHub.CEC_ACTIVE_INPUT:
                // ROUTING CONTROL
                if (DEBUG) {
                    Log.d(TAG, "CEC_ACTIVE_INPUT,Device logical "
                        + devAddress + ",physical addess is" + opCode);
                }
                // eventParam is the active portID
                int deviceType = getDeviceTypesOfPort(
                        eventParam, devAddress);
                if (deviceType == DeviceType.AudioDevice) {
                    if (getBootUpToken()) {
                        setBootUpToken(false);
                    }
                }
                // send a switch hdmi source broadcast only when the active source
                // is changed to avoid switching same device multi-times
                if (activeInputDevAddress != devAddress) {
                    activeInputDevAddress = devAddress;
                    // Send a broadcast to the input switcher to SWITCH INPUT to the
                    // active device
                    Intent broadcastIntent = new Intent(HdmiCecUtils.ACTION_HDMI_CEC_ACTIVE_SOURCE);
                    broadcastIntent.putExtra(HdmiCecUtils.EXTRA_HDMI_PORT, eventParam);
                    broadcastIntent.putExtra(HdmiCecUtils.EXTRA_HDMI_DEV_OSDNAME,
                        getOsdNameOfDevice(devAddress));
                    // build a extra Bundle object for potential need
                    Bundle hdmiExtraBundle = new Bundle();
                    hdmiExtraBundle.putInt(HdmiCecUtils.EXTRA_HDMI_PORT, eventParam);
                    hdmiExtraBundle.putInt(HdmiCecUtils.EXTRA_HDMI_LOGICAL_ADDR, devAddress);
                    hdmiExtraBundle.putInt(HdmiCecUtils.EXTRA_HDMI_DEV_TYPE, deviceType);

                    if (DEBUG) {
                        Log.d(TAG, "activeInputDevAddress is " + activeInputDevAddress);
                        Log.d(TAG, "extra part of ACTION_HDMI_CEC_ACTIVE_SOURCE"
                                + "  broadcast Intent ########"
                                + " EXTRA_HDMI_PORT_NO:"
                                +  hdmiExtraBundle.getInt(HdmiCecUtils.EXTRA_HDMI_PORT)
                                + " EXTRA_HDMI_LOGICAL_ADDR:"
                                + hdmiExtraBundle.getInt(HdmiCecUtils.EXTRA_HDMI_LOGICAL_ADDR)
                                + " EXTRA_HDMI_DEV_TYPE:"
                                + hdmiExtraBundle.getInt(HdmiCecUtils.EXTRA_HDMI_DEV_TYPE));
                    }
                    broadcastIntent.putExtra(HdmiCecUtils.EXTRA_HDMI_BUNDLE, hdmiExtraBundle);
                    mContext.sendBroadcast(broadcastIntent);
                }
                break;

            case CecServiceHub.CEC_INACTIVE_INPUT:
                // ROUTING CONTROL
                if (DEBUG) {
                    Log.d(TAG, "@@@@@@@@@@@@@@@@@@@ Received event 7"
                       + " i.e.EVT_INACTIVE_INPUT @@@@@@@@@@@@@@@@@@@ ");
                }
                resetActiveInputDeviceAddress();
                mContext.sendBroadcast(new Intent(HdmiCecUtils.ACTION_HDMI_CEC_INACTIVE_SOURCE));
                break;

            case CecServiceHub.CEC_IMAGE_VIEW_ON:
                // ONE TOUCH CONTROL
                if (DEBUG) {
                    Log.d(TAG, "@@@@@@@@@@@@@@@@@@@ Received event 8 i.e."
                        + " EVT_IMAGE_VIEW_ON @@@@@@@@@@@@@@@@@@@");
                }
                activeInputDevAddress = devAddress;
                break;

            case CecServiceHub.CEC_TEXT_VIEW_ON:
                // ONE TOUCH CONTROL
                if (DEBUG) {
                    Log.d(TAG, "@@@@@@@@@@@@@@@@@@@@@ Received event 9 i.e."
                       + " EVT_TEXT_VIEW_ON @@@@@@@@@@@@@@@@@@@@@@");
                }

                break;
            case CecServiceHub.CEC_REMOTE_DECK_STATUS:
                if (DEBUG)
                Log.i(TAG, "Received event 10 i.e. EVT_REMOTE_DECK_STATUS");
                break;
            case CecServiceHub.CEC_REMOTE_TUNER_STATUS:
                if (DEBUG)
                Log.i(TAG, "Received event 11 i.e. EVT_REMOTE_TUNER_STATUS");
                break;
            case CecServiceHub.CEC_CHANGE_CHANNEL:
                if (DEBUG)
                Log.i(TAG, "Received event 12 i.e. EVT_CHANGE_CHANNEL");
                break;
            case CecServiceHub.CEC_CHANNEL_UP:
                if (DEBUG)
                Log.i(TAG, "Received event 13 i.e. EVT_CHANNEL_UP");
                break;
            case CecServiceHub.CEC_CHANNEL_DOWN:
                if (DEBUG)
                Log.i(TAG, "Received event 14 i.e. EVT_CHANNEL_DOWN");
                break;
            case CecServiceHub.CEC_VENDOR_COMMAND:
                if (DEBUG)
                Log.i(TAG, "Received event 15 i.e. EVT_VENDOR_COMMAND");
                break;
            case CecServiceHub.CEC_DEVICE_MENU_ON:
                if (DEBUG)
                Log.i(TAG, "@@@@@@@@@@@@@@@@@@@@@@@ Received event 16 i.e."
                       + " EVT_DEVICE_MENU_ON @@@@@@@@@@@@@@@@@@@@@@");
                isDevMenuOn = true;
                break;
            case CecServiceHub.CEC_DEVICE_MENU_OFF:
                if (DEBUG)
                Log.i(TAG, "@@@@@@@@@@@@@@@@@@@@@@@@@ Received event 17 i.e."
                       + " EVT_DEVICE_MENU_OFF @@@@@@@@@@@@@@@@@@@@@@");
                isDevMenuOn = false;
                break;
            case CecServiceHub.CEC_OSD_DISPLAY_MODE:

                String osdName = getOSDDisplayString();
                if (DEBUG) {
                    Log.d(TAG, "Received event 18 i.e. EVT_OSD_DISPLAY_MODE,string:"
                        + osdName + ",mode:" + eventParam);
                }
                if (null != osdName && !osdName.isEmpty()) {
                    Intent showOsdIntent = new Intent(
                                HdmiCecUtils.HDMI_CEC_SHOW_OSD_ACTIION);
                    showOsdIntent.putExtra(HdmiCecUtils.EXTRA_HDMI_DEV_OSDNAME, osdName);
                    showOsdIntent.putExtra(HdmiCecUtils.EXTRA_OSD_STRING_DISPLAY_MODE,eventParam);
                    mContext.sendBroadcast(showOsdIntent);
                }
                break;

            case CecServiceHub.CEC_INVALID_STATE:
                if (DEBUG)
                Log.i(TAG, "Received event 20 i.e. INVALID_STATE");
                break;

            default:
                if (DEBUG)
                Log.i(TAG,"default case");
                break;
        }
!!!12067340.java!!!	handleEventWithVendorCmdParam(in event : int, in devAddress : int, in opCode : int, in type : int, in vendorId : int, in data : int, in data2 : int, in dataLen : int) : void
        if (DEBUG) {
            Log.d(TAG, "@@@@@@@@@@@@@@@@@@@@@@@ handleEventWithVendorCmdParam "
                   + " @@@@@@@@@@@@@@@@@@@@@@ ");
            Log.d(TAG,"************ EVENT --- " + event);
            Log.d(TAG,"************ DEV ADDRESS --- " + devAddress);
            Log.d(TAG,"************ OPCODE --- " + opCode);
            Log.d(TAG,"************ TYPE --- " + type);
            Log.d(TAG,"************ VENDOR ID --- " + vendorId);
            Log.d(TAG,"************ DATA --- " + data);
            Log.d(TAG,"************ DATA2 --- " + data2);
            Log.d(TAG,"************ DATA LEN --- " + dataLen);
        }

        switch(opCode)
        {
            case CecServiceHub.CEC_VENDOR_CMD_LAUNCH_APP:
                byte[] bytes = ByteBuffer.allocate(dataLen).putInt(data).array();
                //                for(byte b: bytes)
                //                    Log.i(TAG,"BYTE  " +  b);

                //Make sure the system is in S4 state (if coming from standby)
                Intent intentwakeup = new Intent(ACTION_DO_SONY_WAKE_UP);
                intentwakeup.putExtra(NEED_CONFIRM_EXTRA, false);
                mContext.sendBroadcast(intentwakeup);

                Intent intent = new Intent(ACTION_DO_SONY_CEC_LAUNCH_APP);
                intent.putExtra(CEC_OPERAND_DATA, bytes);
                intent.setFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
                mContext.sendBroadcast(intent);
                break;
            default:
                break;
        }
!!!12067468.java!!!	handleEventWithIntBoolParam(in event : int, in devAddress : int, in opCode : int, in volume : int, inout bMute : boolean) : void

        if (!isSacEnabled) {
            Log.d(TAG,"Sac is not enabled, return directly.");
            return;
        }

        if (DEBUG) Log.i(TAG, "Update audio status,DEV ADDRESS:" + devAddress
                        + ";OPCODE:" + opCode
                        + ";VOLUME:" + volume
                        +";MUTE:" + bMute);

       try {
          Intent intent = new Intent(HdmiCecUtils.HDMI_SAC_AUDIO_STATUS_ACTION);
          Bundle bundle = new Bundle();
          bundle.putInt(HdmiCecUtils.key_sac_devaddr, devAddress);
          bundle.putInt(HdmiCecUtils.key_sac_volume, volume);
          bundle.putBoolean(HdmiCecUtils.key_sac_mute, bMute);
          intent.putExtras(bundle);
          mContext.sendBroadcast(intent);
        } catch (Exception e) {
            Log.i(TAG, "Exception in handleEventWithIntBoolParam -- " + e);
        }

!!!12067596.java!!!	setStreamPath(in deviceID : char) : void
        if (DEBUG) {
            Log.d(TAG, "setStreamPath method called");
        }
!!!12067724.java!!!	getActiveSourceAddress() : int
        return activeInputDevAddress;
!!!12067852.java!!!	disableSacWithoutStateUpdate() : void
        if (DEBUG) {
            Log.d(TAG, "Inside disableSacWithoutStateUpdate method of HDMI CEC Service");
        }
        //isSacEnabled = false;
!!!12067980.java!!!	setActiveInputDeviceLogicAddress(in devLogicAddress : int) : void
        activeInputDevAddress = devLogicAddress;
!!!12068108.java!!!	setCecShutdownStatusInternal(inout bIsInStandByMode : boolean) : void
        try {
            if (DEBUG) {
                Log.d(TAG, "Inside setCECShutdownStatus method with bIsInStandByMode ---"
                            + bIsInStandByMode);
            }
            if (bIsInStandByMode) {
                isTvInStandbyMode = true;
                resetActiveInputDeviceAddress();
                // Broadcasting the callback that the HDMI CEC service has been
                // disabled
                notifyRemoteCallbackCecDisabled();

            } else {
                isTvInStandbyMode = false;
            }
        } catch (Exception e) {
            Log.e(TAG, "Exception in setCECShutdownStatus method ---" + e);
        }
!!!12068236.java!!!	getSACEnabledIntent() : Intent
        return new Intent(HdmiCecUtils.SAC_ENABLED_ACTION);
!!!12068364.java!!!	getSACDisabledIntent() : Intent
        return new Intent(HdmiCecUtils.SAC_DISABLED_ACTION);
!!!12068492.java!!!	sendSACEnabled() : void
        if (DEBUG) {
            Log.d(TAG, "Inside the SendSACenabled method");
        }
        try {
            mContext.sendBroadcast(getSACEnabledIntent());
        } catch (Exception e) {
            Log.i(TAG, "Exception in sendSACEnabled method e->" + e);
        }
!!!12068620.java!!!	sendSACDisabled() : void
        if (DEBUG)
        Log.d(TAG, "Inside the sendSACDisabled method");
        try {
            mContext.sendBroadcast(getSACDisabledIntent());
        } catch (Exception e) {
            Log.e(TAG, "Exception in SetSACdisabled method ---" + e);
        }
!!!12069004.java!!!	TvCecService(inout context : Context)
        mContext = context;
        mCECfeatureSet.add("OTP");
        mCECfeatureSet.add("OSD Display");

        mCecEvtReceiver = new CecEvtReceiver();
        IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
        filter.addAction(HdmiCecUtils.ACTION_SYSTEM_STANDBY);
        filter.addAction(HdmiCecUtils.ACTION_SEND_SPECIFIED_STANDBY);
        filter.addAction(HdmiCecUtils.ACTION_SYSTEM_SUSPEND);
        filter.addAction(HdmiCecUtils.ACTION_SYSTEM_RESUMED);
        filter.addAction(HdmiCecUtils.ACTION_SET_STREAM_PATH);
        context.registerReceiver(mCecEvtReceiver, filter);
        prepareLocaleMap();
        populateDeviceNameMap();
        // Get the language used by the system
        currentLocale = Locale.getDefault().getLanguage();
        if (DEBUG) {
            Log.d(TAG, "CURRENT LOCALE = " + currentLocale);
        }


        initNative(this);
!!!12069132.java!!!	finalize() : void
 nativeFinalize();
!!!12069260.java!!!	enableCEC(inout isOnBoot : boolean) : boolean
        if (DEBUG) {
            Log.d(TAG, "Inside the enableCEC method of HDMI TvCecService");
        }
        isCECOnBoot = isOnBoot;
        if (null == mHdmiCecScanStatusCallback) {
            Log.i(TAG, "Creating and registering a call back with this service"
                    + "itself to reset the devDiscProgress flag");
            mHdmiCecScanStatusCallback = new CecCallbacksBN();
        }
        registerCecCallBack(mHdmiCecScanStatusCallback);
        if (0 != enableCECNative(true)) {
            Log.e(TAG, "Enable cec failed in enableCECNative()!");
            return false;
        }
        serviceStatus = true;

        /* Send a system level broadcast saying CEC is enabled */
        mContext.sendBroadcast(new Intent(HdmiCecUtils.CEC_ENABLED_ACTION));

        /* Broadcasting the callback that the HDMI CEC service has been enabled */
        notifyRemoteCallbackCecEnabled();
        return true;
!!!12069388.java!!!	disableCEC() : boolean
        if (DEBUG) {
            Log.d(TAG, "Inside the disableCEC method of HDMI CEC Service");
        }
        isCECOnBoot = false;
        // Disabling the System Audio Control and update the DB
        if (DEBUG) {
            Log.d(TAG, "DEACTIVATING THE SYSTEM AUDIO CONTROL");
        }
        disableSAC();

        setTvMute(false);
        mCachedAudioDevLogAddr = INVALID;
        mCachedAudioDevPhyAddr = INVALID;

        // Unregistering the call back for this service itself to set the
        // devDiscProgress flag
        if (null != mHdmiCecScanStatusCallback) {
            if (DEBUG) {
                Log.d(TAG, "Unregistering the mHdmiCecScanStatusCallback with this"
                       + " service itself to reset the devDiscProgress flag");
            }
            stopCECDeviceDiscovery();
            unregisterCecCallBack(mHdmiCecScanStatusCallback);
            mHdmiCecScanStatusCallback = null;
        }

        resetActiveInputDeviceAddress();
        int returnCode = enableCECNative(false);

        if (DEBUG) {
            Log.d(TAG, "RETURN CODE FOR DISABLE OF CEC SERVICE -- "
                    + returnCode);
        }

        // Send a system level broadcast that CEC has been diasbled
        mContext.sendBroadcast(new Intent(HdmiCecUtils.CEC_DISABLED_ACTION));

        // Broadcasting the callback that the HDMI CEC service has been disabled
        notifyRemoteCallbackCecDisabled();
        serviceStatus = false;
        return true;
!!!12069516.java!!!	isTvSpeakerMute() : boolean
        return isTvMuted;
!!!12069644.java!!!	setActiveSource() : boolean
        return (0 == setActiveSourceNative());
!!!12069772.java!!!	getListOfConnectedCECDevices() : CECDevInfo
        return getConnectedCecDeviceListNative();
!!!12069900.java!!!	startCECDeviceDiscovery() : int
        isDeviceScanInProgress = true;
        if (!serviceStatus) {
            return 0;
        }

        // Call the middle layer cec service signalling the start of device scan
        int stDevDiscRet = startDevDiscoveryNative(CEC_DISCOVERY_POLLING_INTERVAL, true);
        if (DEBUG) {
            Log.d(TAG, "return status of startDevDiscoveryNative() is " + stDevDiscRet);
        }
        // Send a broadcast to the callback implementations by invoking the
        // onHDMIScanStarted on that object
        notifyRemoteCallbackScanStarted();

        if (DEBUG) {
            Log.d(TAG, "Device discoverying is in progress");
        }
        return 1;
!!!12070028.java!!!	stopCECDeviceDiscovery() : int
        // Calling the middle layer cec service to stop the device discovery
        stopDevDiscoveryNative();

        notifyRemoteCallbackScanStopped();
        isDeviceScanInProgress = false;
        return 1;
!!!12070156.java!!!	isCECEnabled() : boolean
        return isCecEnabledNative();
!!!12070284.java!!!	sendRoutingChange(in newDevAddr : int, in oldDevAddr : int) : boolean
        return (0 == sendRoutingChangeNative(newDevAddr, oldDevAddr));
!!!12070412.java!!!	registerCecCallBack(inout cb : ICecServiceCallbacksInterface) : void
        if (DEBUG) {
            Log.d(TAG, "Inside the registerCallback method of HDMI CEC Service");
        }
        if (cb != null) {
            if (DEBUG) {
                Log.d(TAG, "Registering the call back object");
            }
            rcbl.register(cb);
        }
!!!12070540.java!!!	unregisterCecCallBack(inout cb : ICecServiceCallbacksInterface) : void
        if (DEBUG) {
            Log.d(TAG, "Inside the unregisterCallback method of HDMI CEC Service");
        }
        if (cb != null) {
            if (DEBUG) {
                Log.d(TAG, "Inside the unreg method");
            }
            rcbl.unregister(cb);
        }
!!!12070668.java!!!	activateCECDevice(in devAddress : int) : int
        try {
            if (DEBUG) {
                Log.d(TAG, "Inside activateCECDevice method of HDMI CEC Service ---- "
                                + devAddress);
            }
            int result = selectActiveSourceNative(devAddress);
            if (DEBUG) {
                Log.d(TAG, "activateCECDevice returns " + result);
            }
            return result;
        } catch (Exception e) {
            Log.e(TAG, "Exception in activateCECDevice method ---" + e);
            return -1;
        }
!!!12070796.java!!!	getActiveInputPort() : int
        return getActiveInputPortNative();
!!!12070924.java!!!	getOsdNameOfDevice(in devAddress : int) : String
        return getOSDStringNative(devAddress);
!!!12071052.java!!!	getDeckStatus(in devAddress : int) : int
        if (DEBUG) {
            Log.d(TAG, "Inside the GetDeckStatus method");
        }
        return 1;
!!!12071180.java!!!	setDeviceOsdName(in osdName : String) : int
        if (DEBUG) {
            Log.d(TAG, "Inside the setDeviceOsdName method!");
        }
        return 1;
!!!12071308.java!!!	getNumberOfHdmiCecDevices() : int
        return getNumberOfHdmiCecDevicesNative();
!!!12071436.java!!!	getCurrentActiveCECDeviceAddress() : int
        if (DEBUG) {
            Log.d(TAG,"Inside the getCurrentActiveCECDeviceAddress");
        }
        return -1;
!!!12071564.java!!!	sendTargetDeviceToStandy(in targetAddr : int) : void
        sendDeviceStandbyNative(targetAddr);
!!!12071692.java!!!	sendAbort(in opCode : int, in type : int) : int
        if (DEBUG) {
            Log.d(TAG, "Inside the sendAbort method of GTV HDMI CEC Service");
        }
        return 1;
!!!12071820.java!!!	sendPlayMode(in devAddress : int, in playMode : int) : void
        sendPlayModeNative(devAddress, playMode);
!!!12071948.java!!!	sendVendorCommand(in devAddress : int, inout vendorCmd : CECVendorCmd) : int
        if (DEBUG) {
            Log.d(TAG, "Inside the sendVendorCommand method!");
        }
        return 1;
!!!12072076.java!!!	getSupportedAudioDescriptors() : List<String>
        if (DEBUG) {
            Log.d(TAG, "Inside the GetSupportedAudioDescriptors method of HDMI"
                   + " CEC Service");
        }
        return null;
!!!12072204.java!!!	setTunerStatus(inout tunerChannel : CECTunerChannelInfo) : int
        if (DEBUG) {
            Log.d(TAG, "Inside the setTunerStatus method!");
        }
        return 1;
!!!12072332.java!!!	getConnectedAudioDeviceInfo() : CECDevInfo
        if (DEBUG) {
            Log.d(TAG, "Inside the getConnectedAudioDeviceInfo method"
                   + " TvCecService");
        }
        hdmiDeviceList = getListOfConnectedCECDevices();
        if (hdmiDeviceList == null) {
            return null;
        }
        for (CECDevInfo it : hdmiDeviceList) {
            if (DeviceType.AudioDevice == it.getDeviceType()) {
                if (DEBUG) {
                    Log.d(TAG, "@@@@@@@@@@ There is an audio device " + it);
                }
                return it;
            }
        }
        return null;
!!!12072460.java!!!	setARCStatus(inout bEnable : boolean, in audioDevLogiAddr : int, in audioDevPhyAddr : int) : int
        if (DEBUG) {
            Log.d(TAG, "Inside the setSACStatus method");
        }
        int returnCode = setARCStatusNative(bEnable, audioDevLogiAddr,
                audioDevPhyAddr);
        if (bEnable) {
            isSacEnabled = true;
        } else {
            isSacEnabled = false;
            turnOnTVSpeakers();
            setTvMute(false);
        }
        return returnCode;
!!!12072588.java!!!	getCurrentInput() : int
        if (DEBUG) {
            Log.i(TAG, "getCurrentInputPort() mCurrentInputPort:" + mCurrentInputPort);
        }
        return mCurrentInputPort;
!!!12072716.java!!!	setCurrentInput(in inputPort : int) : int
        int result = 0;
        if (0 == setCurrentInputNative(inputPort)) {
            mCurrentInputPort = inputPort;
        }
        resetActiveInputDeviceAddress();
        return result;
!!!12072844.java!!!	enableSACInternal(inout enable : boolean) : int
        synchronized (this) {
            int audioDevLogiAddr = INVALID;
            int portID = INVALID;
            int audioDevPhyAddr = INVALID;
            CECDevInfo audioDevice = null;

            if (DEBUG) {
                Log.i(TAG, "Inside the enableSACInternal:" + enable);
            }

            audioDevice = getConnectedAudioDeviceInfo();

            if (audioDevice != null) {
                audioDevLogiAddr = audioDevice.getDeviceAddress();
                portID = audioDevice.getPortNumber();
                audioDevPhyAddr = audioDevice.getDevicePhysicalAddress();
                Log.d(TAG,"Audio System:audioDevLogiAddr:"+audioDevLogiAddr
                    +","+audioDevPhyAddr+","+portID);
            }
            //enable SAC
            if (enable && audioDevice != null) {
                if ((portID == PORT_ID_SUPPORT_ARC) || (portID == mCurrentInputPort)) {
                    boolean result = enableSystemAudioMode(audioDevLogiAddr, audioDevPhyAddr);
                    return result ?
                            CecServiceHub.Result.SUCCESS : CecServiceHub.Result.FAILED;

                }
                if (DEBUG) {
                    Log.d(TAG,
                          "enableSAC fail, device port="
                          + portID
                          + ",active input port="
                          + mCurrentInputPort);
                }
                return CecServiceHub.Result.TARGET_PORT_NOT_SUPPORT_ARC;
            } else if (!enable) {
                if(audioDevice == null) {
                    audioDevLogiAddr = mCachedAudioDevLogAddr;
                    audioDevPhyAddr = mCachedAudioDevPhyAddr;
                }
                if (audioDevLogiAddr == INVALID || audioDevPhyAddr == INVALID) {
                    return CecServiceHub.Result.FAILED;
                }
                boolean result = disableSystemAudioMode(audioDevLogiAddr, audioDevPhyAddr);
                return result ?
                        CecServiceHub.Result.SUCCESS : CecServiceHub.Result.FAILED;
            } else {
                Log.d(TAG,"Not found audio device.");
                return CecServiceHub.Result.FAILED;
            }
        }
!!!12072972.java!!!	enableSAC() : int
        return enableSACInternal(true);
!!!12073100.java!!!	disableSAC() : int
        return enableSACInternal(false);
!!!12073228.java!!!	enableARCInternal(inout enable : boolean) : int
        synchronized (this) {
            if (DEBUG) {
                Log.d(TAG, "Inside the disableARC method of CECManager");
            }
            // since there is no audio device dismiss the VolumeBar
            CECDevInfo audioDevice = getConnectedAudioDeviceInfo();
            if (null == audioDevice) {
                // dismissVolumeBar();
                if (DEBUG) {
                    Log.d(TAG,
                          "############# No Audio Device Found ##############");
                }
                return CecServiceHub.Result.AUDIO_DEVICE_NOT_AVAILABLE;
            } else {
                int audioDevLogiAddr = audioDevice.getDeviceAddress();
                int portID = audioDevice.getPortNumber();
                int audioDevPhyAddr = audioDevice.getDevicePhysicalAddress();
                int result = setARCStatus(enable, audioDevLogiAddr, audioDevPhyAddr);
                return (0 == result) ?
                        CecServiceHub.Result.SUCCESS : CecServiceHub.Result.FAILED;
            }
        }
!!!12073356.java!!!	enableARC() : int
        return enableARCInternal(true);
!!!12073484.java!!!	disableARC() : int
        return enableARCInternal(false);
!!!12073612.java!!!	handleAudioDeviceConnectingChanged(inout connecting : boolean) : void
        CECDevInfo audioDevice = null;
        int port = 0;
        boolean sacUserSetting = CecManager.isSystemAudioModeEnabled(mContext);

        Log.d(TAG,"Audio device connected? " + connecting
            + ",sac user setting? " + sacUserSetting
            + ",sac has enabled? "+isSacEnabled
            + ",active port? " + mCurrentInputPort);

        if (!sacUserSetting) {
            if (isSacEnabled) {
                //if sac user setting is OFF,but sac is still enabled,try to disable sac;
                enableSACInternal(false);
                turnOnTVSpeakers();
            }
            return;
        }
        if (connecting) {
            audioDevice = getConnectedAudioDeviceInfo();
            if (audioDevice == null) {
                Log.d(TAG,"No audio device");
                return;
            }
            port = audioDevice.getPortNumber();
            if (isSacEnabled && (port != PORT_ID_SUPPORT_ARC)
                && (mCurrentInputPort != port)) {
                //if sac is already enabled, but audio device is not at ARC port
                //and active source port is not same as audio device port,
                //try to disable sac and enable tv speaker;
                enableSACInternal(false);
                turnOnTVSpeakers();

            } else if ((isSacEnabled == false) && ((port == PORT_ID_SUPPORT_ARC)
                || (mCurrentInputPort == port))) {
                //if sac is still not enabled, but audio device is at ARC port
                //or current active device port is same audio device port, try to enable sac.
                enableSACInternal(true);
            } else {
                Log.d(TAG,"Nothing to do");
            }

        } else if (isSacEnabled) {
            //if audio device is removed and sac already enabled, try to disable sac
            //and enable tv speaker;
            enableSACInternal(false);
            turnOnTVSpeakers();
        } else {
            Log.d(TAG,"Nothing to do");
        }

!!!12073740.java!!!	sendDeckControl(in devAddress : int, in deckCtrl : int) : int
        return sendDeckControlNative(devAddress, deckCtrl);
!!!12073868.java!!!	sendUserControl(in devAddress : int, in userKeyMode : int, in userKeyCode : int) : int
        return sendUserControlNative(devAddress, userKeyMode, userKeyCode);
!!!12073996.java!!!	sendMenuCommand(in devAddress : int, inout bActivate : boolean) : int
        if (DEBUG) {
            Log.d(TAG, "Inside SendMenuCommand method of GTV HDMICECImpl");
        }
        return 1;
!!!12074124.java!!!	setCECShutdownStatus(inout bIsInStandByMode : boolean) : void
        setCecShutdownStatusInternal(bIsInStandByMode);
!!!12074252.java!!!	setTvPowerStatus(in powerStatus : int) : void
        mPowerStatus = powerStatus;
!!!12074380.java!!!	getPowerStatus(in devAddr : int) : int
        return mPowerStatus;
!!!12074508.java!!!	requestActiveSource() : int
        return requestActiveSourceNative();
!!!12074636.java!!!	enableSystemAudioMode(in devLogicAddress : int, in devPhyAddress : int) : boolean
        if (DEBUG) {
            Log.d(TAG, "Inside setSystemAudioModeOn method of HDMI CEC");
        }
        mCachedAudioDevLogAddr = devLogicAddress;
        mCachedAudioDevPhyAddr = devPhyAddress;

        int returnCode = setSystemAudioModeOnNative(devLogicAddress, devPhyAddress);
        if (DEBUG) {
            Log.d(TAG, "setSystemAudioModeOnNative Result" + returnCode);
        }
        if (0 != returnCode) {
            return false;
        }
        returnCode = setARCStatus(true, devLogicAddress, devPhyAddress);
        if (DEBUG) {
            Log.d(TAG, "setSACStatus Result" + returnCode);
        }
        return (0 == returnCode);
!!!12074764.java!!!	disableSystemAudioMode(in devAddress : int, in devPhyAddress : int) : boolean
        if (DEBUG) {
            Log.d(TAG, "Inside setSystemAudioModeOn method of HDMI CEC");
        }
        int returnCode = setSystemAudioModeOffNative(devAddress, devPhyAddress);
        if (DEBUG) {
            Log.d(TAG, "setSystemAudioModeOff Result" + returnCode);
        }
        returnCode = setARCStatus(false, devAddress, devPhyAddress);
        if (DEBUG) {
            Log.i(TAG, "setSACStatus Result" + returnCode);
        }
        return (0 == returnCode);
!!!12074892.java!!!	enableTVAutoPowerOn() : boolean
        setTvAutoPowerOnNative(1);
        return true;
!!!12075020.java!!!	disableTVAutoPowerOn() : boolean
        setTvAutoPowerOnNative(0);
        return true;
!!!12075148.java!!!	enableDeviceAutoPowerOff() : boolean
        // TODO: implement this
        return true;
!!!12075276.java!!!	disableDeviceAutoPowerOff() : boolean
        // TODO: implement this
        return true;
!!!12075404.java!!!	getOSDDisplayString() : String
        return getOSDDisplayStringNative();
!!!12075532.java!!!	getWakeUpSource() : int
        return getWakeUpSourceNative();
!!!12075660.java!!!	broadcastNewMenuLanguage(in ISO639_1_lngcode : String) : void
        int convertedLocale = localeMap.get(ISO639_1_lngcode);
        if (DEBUG) {
            Log.d(TAG, "Inside broadcastNewMenuLanguage() The convertedLocale:" + convertedLocale);
        }
        broadcastNewMenuLanguageNative(convertedLocale);
!!!12075788.java!!!	getSupportedCECFeatureSet() : List<String>
        List<String> cecFeatureList = new ArrayList<String>();
        cecFeatureList.add("OTP");
        cecFeatureList.add("GET_OSD_NAME");
        cecFeatureList.add("USER_CONTROL");
        cecFeatureList.add("DECK_CONTROL");
        /* TODO: add more feature */
        return cecFeatureList;
