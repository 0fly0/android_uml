class AccessibilityInjectorTest
!!!6167692.java!!!	AccessibilityInjectorTest()
        super(AccessibilityInjectorTestActivity.class);
!!!6167820.java!!!	setUp() : void
        super.setUp();
        mWorker = new Worker();
        sInstance = this;
        if (sExecutedTestCount == 0) {
            // until JUnit4 comes to play with @BeforeTest
            disableAccessibilityAndMockAccessibilityService();
            enableAccessibilityAndMockAccessibilityService();
            injectTestWebContentKeyBindings();
        }
!!!6167948.java!!!	tearDown() : void
        if (mWorker != null) {
            mWorker.stop();
        }
        if (sExecutedTestCount == TEST_CASE_COUNT) {
            // until JUnit4 comes to play with @AfterTest
            disableAccessibilityAndMockAccessibilityService();
            restoreDefaultWebContentKeyBindings();
        }
        super.tearDown();
!!!6168076.java!!!	testNavigationByCharacter() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<html>" +
               "<head>" +
               "</head>" +
               "<body>" +
                   "<p>" +
                      "a<b>b</b>c" +
                   "</p>" +
                   "<p>" +
                     "d" +
                   "<p/>" +
                   "e" +
               "</body>" +
             "</html>";

        WebView webView = loadHTML(html);

        // change navigation axis to word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, META_STATE_ALT_LEFT_ON);
        assertSelectionString("1"); // expect the word navigation axis

        // change navigation axis to character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, META_STATE_ALT_LEFT_ON);
        assertSelectionString("0"); // expect the character navigation axis

        // go to the first character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("a");

        // go to the second character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<b>b</b>");

        // go to the third character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("c");

        // go to the fourth character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("d");

        // go to the fifth character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("e");

        // try to go past the last character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the fifth character (reverse)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("e");

        // go to the fourth character (reverse)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("d");

        // go to the third character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("c");

        // go to the second character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<b>b</b>");

        // go to the first character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("a");

        // try to go before the first character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("a");

        // go to the second character (reverse again)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<b>b</b>");
!!!6168204.java!!!	testNavigationByWord() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<html>" +
               "<head>" +
               "</head>" +
               "<body>" +
                   "<p>" +
                      "This is <b>a</b> sentence" +
                   "</p>" +
                   "<p>" +
                     " scattered " +
                     "<p/>" +
                     " all over " +
                   "</p>" +
                   "<div>" +
                     "<p>the place.</p>" +
                   "</div>" +
               "</body>" +
             "</html>";

        WebView webView = loadHTML(html);

        // change navigation axis to word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, META_STATE_ALT_LEFT_ON);
        assertSelectionString("1"); // expect the word navigation axis

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("This");

        // go to the second word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("is");

        // go to the third word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<b>a</b>");

        // go to the fourth word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("sentence");

        // go to the fifth word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("scattered");

        // go to the sixth word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("all");

        // go to the seventh word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("over");

        // go to the eight word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("the");

        // go to the ninth word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("place");

        // NOTE: WebKit selection returns the dot as a word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(".");

        // try to go past the last word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the last word (reverse)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("place.");

        // go to the eight word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("the");

        // go to the seventh word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("over");

        // go to the sixth word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("all");

        // go to the fifth word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("scattered");

        // go to the fourth word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("sentence");

        // go to the third word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<b>a</b>");

        // go to the second word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("is");

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("This");

        // try to go before the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("This");

        // go to the second word (reverse again)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("is");
!!!6168332.java!!!	testNavigationBySentence() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<div>" +
                  "<p>" +
                    "This is the first sentence of the first paragraph and has an <b>inline bold tag</b>." +
                    "This is the second sentence of the first paragraph." +
                  "</p>" +
                  "<h1>This is a heading</h1>" +
                  "<p>" +
                    "This is the first sentence of the second paragraph." +
                    "This is the second sentence of the second paragraph." +
                  "</p>" +
                "</div>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // Sentence axis is the default

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("This is the first sentence of the first paragraph and has an "
                + "<b>inline bold tag</b>.");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("This is the second sentence of the first paragraph.");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("This is a heading");

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("This is the first sentence of the second paragraph.");

        // go to the fifth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("This is the second sentence of the second paragraph.");

        // try to go past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the fifth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("This is the second sentence of the second paragraph.");

        // go to the fourth sentence (reverse)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("This is the first sentence of the second paragraph.");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("This is a heading");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("This is the second sentence of the first paragraph.");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("This is the first sentence of the first paragraph and has an "
                + "<b>inline bold tag</b>.");

        // try to go before the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("This is the first sentence of the first paragraph and has an "
                + "<b>inline bold tag</b>.");

        // go to the second sentence (reverse again)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("This is the second sentence of the first paragraph.");
!!!6168460.java!!!	testNavigationByHeading() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<h1>Heading one</h1>" +
                "<p>" +
                  "This is some text" +
                "</p>" +
                "<h2>Heading two</h2>" +
                "<p>" +
                  "This is some text" +
                "</p>" +
                "<h3>Heading three</h3>" +
                "<p>" +
                  "This is some text" +
                "</p>" +
                "<h4>Heading four</h4>" +
                "<p>" +
                  "This is some text" +
                "</p>" +
                "<h5>Heading five</h5>" +
                "<p>" +
                  "This is some text" +
                "</p>" +
                "<h6>Heading six</h6>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // change navigation axis to heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_RIGHT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("3"); // expect the heading navigation axis

        // go to the first heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<h1>Heading one</h1>");

        // go to the second heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<h2>Heading two</h2>");

        // go to the third heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<h3>Heading three</h3>");

        // go to the fourth heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<h4>Heading four</h4>");

        // go to the fifth heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<h5>Heading five</h5>");

        // go to the sixth heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<h6>Heading six</h6>");

        // try to go past the last heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the fifth heading (reverse)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<h5>Heading five</h5>");

        // go to the fourth heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<h4>Heading four</h4>");

        // go to the third heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<h3>Heading three</h3>");

        // go to the second heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<h2>Heading two</h2>");

        // go to the first heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<h1>Heading one</h1>");

        // try to go before the first heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the second heading (reverse again)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<h2>Heading two</h2>");
!!!6168588.java!!!	testNavigationBySibing() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<h1>Heading one</h1>" +
                "<p>" +
                  "This is some text" +
                "</p>" +
                "<div>" +
                  "<button>Input</button>" +
                "</div>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // change navigation axis to heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_RIGHT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("3"); // expect the heading navigation axis

        // change navigation axis to sibling
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_RIGHT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("4"); // expect the sibling navigation axis

        // change navigation axis to parent/first child
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_RIGHT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("5"); // expect the parent/first child navigation axis

        // go to the first child of the body
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<h1>Heading one</h1>");

        // change navigation axis to sibling
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_LEFT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("4"); // expect the sibling navigation axis

        // go to the next sibling
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<p>This is some text</p>");

        // go to the next sibling
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<div><button>Input</button></div>");

        // try to go past the last sibling
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the previous sibling (reverse)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<p>This is some text</p>");

        // go to the previous sibling
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<h1>Heading one</h1>");

        // try to go before the previous sibling
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the next sibling (reverse again)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<p>This is some text</p>");
!!!6168716.java!!!	testNavigationByParentFirstChild() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<div>" +
                  "<button>Input</button>" +
                "</div>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // change navigation axis to document
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_LEFT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("6"); // expect the document navigation axis

        // change navigation axis to parent/first child
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_LEFT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("5"); // expect the parent/first child navigation axis

        // go to the first child
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<div><button>Input</button></div>");

        // go to the first child
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<button>Input</button>");

        // try to go to the first child of a leaf element
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the parent (reverse)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<div><button>Input</button></div>");

        // go to the parent
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<body><div><button>Input</button></div></body>");

        // try to go to the body parent
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first child (reverse again)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<div><button>Input</button></div>");
!!!6168844.java!!!	testNavigationByDocument() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<button>Click</button>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // change navigation axis to document
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_LEFT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("6"); // expect the document navigation axis

        // go to the bottom of the document
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Click");

        // go to the top of the document (reverse)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<body><button>Click</button></body>");

        // go to the bottom of the document (reverse again)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Click");
!!!6168972.java!!!	testSyncBetweenTextAndDomNodeNavigation() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<p>" +
                  "First" +
                "</p>" +
                "<button>Second</button>" +
                "<p>" +
                  "Third" +
                "</p>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // change navigation axis to word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, META_STATE_ALT_LEFT_ON);
        assertSelectionString("1"); // expect the word navigation axis

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");

        // change navigation axis to heading
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_RIGHT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("3"); // expect the heading navigation axis

        // change navigation axis to sibling
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_RIGHT, META_STATE_ALT_LEFT_ON);
        assertSelectionString("4"); // expect the sibling navigation axis

        // go to the next sibling
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<button>Second</button>");

        // change navigation axis to character
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, META_STATE_ALT_LEFT_ON);
        assertSelectionString("0"); // expect the character navigation axis

        // change navigation axis to word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, META_STATE_ALT_LEFT_ON);
        assertSelectionString("1"); // expect the word navigation axis

        // go to the next word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Third");
!!!6169100.java!!!	testEnforceSelectionDoesNotCrossAnchorBoundary1() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<div>First</div>" +
                "<p>" +
                  "<a href=\"\">Second</a> Third" +
                "</p>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<div>First</div>");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<a href=\"\">Second</a>");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Third");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("Third");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<a href=\"\">Second</a>");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("First");

        // go to before the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<div>First</div>");
!!!6169228.java!!!	testEnforceSelectionDoesNotCrossAnchorBoundary2() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<div>First</div>" +
                "<a href=\"#\">Second</a>" +
                "&nbsp;" +
                "<a href=\"#\">Third</a>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<a href=\"#\">Second</a>");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("&nbsp;");

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<a href=\"#\">Third</a>");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<a href=\"#\">Third</a>");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("&nbsp;");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<a href=\"#\">Second</a>");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("First");

        // go to before the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");
!!!6169356.java!!!	testEnforceSelectionDoesNotCrossAnchorBoundary3() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<div>" +
                  "First" +
                "<div>" +
                "<div>" +
                  "<a href=\"#\">Second</a>" +
                "</div>" +
                "<div>" +
                  "Third" +
                "</div>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<a href=\"#\">Second</a>");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Third");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("Third");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<a href=\"#\">Second</a>");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("First");

        // go to before the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");
!!!6169484.java!!!	testSkipVisibilityHidden() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<div>First </div>" +
                "<div style=\"visibility:hidden;\">Second</div>" +
                "<div> Third</div>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // change navigation axis to word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, META_STATE_ALT_LEFT_ON);
        assertSelectionString("1"); // expect the word navigation axis

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");

        // go to the third word (the second is invisible)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Third");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the third word (the second is invisible)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("Third");

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("First");

        // go to before the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");
!!!6169612.java!!!	testSkipDisplayNone() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<div>First</div>" +
                "<div style=\"display: none;\">Second</div>" +
                "<div>Third</div>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // change navigation axis to word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, META_STATE_ALT_LEFT_ON);
        assertSelectionString("1"); // expect the word navigation axis

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");

        // go to the third word (the second is invisible)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Third");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the third word (the second is invisible)
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("Third");

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("First");

        // go to before the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first word
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");
!!!6169740.java!!!	testSelectionTextProceed() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<a href=\"#\">First</a>" +
                "<span><a href=\"#\"><span>Second</span>&nbsp;<small>a</small></a>" +
                "</span>&nbsp;<a href=\"#\">Third</a>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<a href=\"#\">First</a>");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<a href=\"#\"><span>Second&nbsp;<small>a</small></a>");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("&nbsp;");

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<a href=\"#\">Third</a>");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<a href=\"#\">Third</a>");

        // NOTE: Here we are a bit asymmetric around whitespace but we can live with it
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("&nbsp;");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<a href=\"#\"><span>Second&nbsp;<small>a</small></a>");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<a href=\"#\">First</a>");

        // go to before the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<a href=\"#\">First</a>");
!!!6169868.java!!!	testSelectionOfInputElements() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<p>" +
                  "First" +
                "</p>" +
                "<input type=\"text\"/>" +
                "<p>" +
                  "Second" +
                "</p>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"text\">");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Second");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("Second");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"text\">");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("First");

        // go to before the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");
!!!6169996.java!!!	testSelectionOfInputElements2() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<div>" +
                  "First" +
                  "<input type=\"text\"/>" +
                  "<span>" +
                    "<input type=\"text\"/>" +
                  "</span>" +
                  "<button type=\"button\">Click Me!</button>" +
                  "<div>" +
                    "<input type=\"submit\"/>" +
                  "</div>" +
                  "<p>" +
                    "Second" +
                  "</p>" +
                "</div>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"text\">");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"text\">");

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<button type=\"button\">Click Me!</button>");

        // go to the fifth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"submit\">");

        // go to the sixth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Second");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the sixth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("Second");

        // go to the fifth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"submit\">");

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<button type=\"button\">Click Me!</button>");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"text\">");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"text\">");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("First");
!!!6170124.java!!!	testSelectionOfInputElements3() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<input type=\"text\"/>" +
                "<button type=\"button\">Click Me!</button>" +
                "<select>" +
                  "<option value=\"volvo\">Volvo</option>" +
                  "<option value=\"saab\">Saab</option>" +
                "</select>" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"text\">");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<button type=\"button\">Click Me!</button>");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<select><option value=\"volvo\">Volvo</option>" +
                "<option value=\"saab\">Saab</option></select>");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<select><option value=\"volvo\">Volvo</option>" +
                "<option value=\"saab\">Saab</option></select>");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<button type=\"button\">Click Me!</button>");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"text\">");

        // go to before the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"text\">");
!!!6170252.java!!!	testSelectionOfInputElements4() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "Start" +
                "<span>" +
                  "<span>" +
                    "<input type=\"submit\">" +
                  "</span>" +
                "</span>" +
                "<input type=\"text\" size=\"30\">" +
                "<span>" +
                  "<span>" +
                    "<input type=\"submit\" size=\"30\">" +
                  "</span>" +
                "</span>" +
                "End" +
              "</body>" +
            "</html>";

        WebView webView = loadHTML(html);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Start");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"submit\">");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"text\" size=\"30\">");

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"submit\" size=\"30\">");

        // go to the fifth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("End");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the fifth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("End");

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"submit\" size=\"30\">");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"text\" size=\"30\">");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"submit\">");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("Start");

        // go to before the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Start");
!!!6170380.java!!!	testSelectionOfInputElements5() : void
        // a bit ugly but helps detect beginning and end of all tests so accessibility
        // and the mock service are not toggled on every test (expensive)
        sExecutedTestCount++;

        String html =
            "<!DOCTYPE html>" +
            "<html>" +
              "<head>" +
              "</head>" +
              "<body>" +
                "<div>" +
                  "First" +
                  "<input type=\"hidden\">" +
                  "<input type=\"hidden\">" +
                  "<input type=\"hidden\">" +
                  "<input type=\"hidden\">" +
                  "<input type=\"text\">" +
                  "<span>" +
                    "<span>" +
                      "<input type=\"submit\">" +
                    "</span>" +
                  "</span>" +
                "</div>" +
              "</body>" +
              "Second" +
            "</html>";

        WebView webView = loadHTML(html);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"text\">");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("<input type=\"submit\">");

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("Second");

        // go to past the last sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString(null);

        // go to the fourth sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("Second");

        // go to the third sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"submit\">");

        // go to the second sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("<input type=\"text\">");

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString("First");

        // go to before the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_UP, 0);
        assertSelectionString(null);

        // go to the first sentence
        sendKeyEvent(webView, KeyEvent.KEYCODE_DPAD_DOWN, 0);
        assertSelectionString("First");
!!!6170508.java!!!	enableAccessibilityAndMockAccessibilityService() : void
        // make sure the manager is instantiated so the system initializes it
        AccessibilityManager.getInstance(getActivity());

        // enable accessibility and the mock accessibility service
        Settings.Secure.putInt(getActivity().getContentResolver(),
                Settings.Secure.ACCESSIBILITY_ENABLED, 1);
        String enabledServices = new ComponentName(getActivity().getPackageName(),
                MockAccessibilityService.class.getName()).flattenToShortString();
        Settings.Secure.putString(getActivity().getContentResolver(),
                Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES, enabledServices);

        // poll within a timeout and let be interrupted in case of success
        long incrementStep = TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE / 5;
        long start = SystemClock.uptimeMillis();
        while (SystemClock.uptimeMillis() - start < TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE &&
                !sIsAccessibilityServiceReady) {
            synchronized (sTestLock) {
                try {
                    sTestLock.wait(incrementStep);
                } catch (InterruptedException ie) {
                    /* ignore */
                }
            }
        }

        if (!sIsAccessibilityServiceReady) {
            throw new IllegalStateException("MockAccessibilityService not ready. Did you add " +
                    "tests and forgot to update AccessibilityInjectorTest#TEST_CASE_COUNT?");
        }
!!!6170636.java!!!	scrubClass(inout testCaseClass : Class<?>) : void
        /* do nothing - avoid superclass behavior */
!!!6170764.java!!!	stripAppleSpanFromMarkup(in markup : String) : String
        StringBuilder stripped = new StringBuilder(markup);
        int prefixBegIdx = stripped.indexOf(APPLE_SPAN_PREFIX);
        while (prefixBegIdx >= 0) {
            int prefixEndIdx = stripped.indexOf(">", prefixBegIdx) + 1;
            stripped.replace(prefixBegIdx, prefixEndIdx, "");
            int suffixBegIdx = stripped.lastIndexOf(APPLE_SPAN_SUFFIX);
            int suffixEndIdx = suffixBegIdx + APPLE_SPAN_SUFFIX.length();
            stripped.replace(suffixBegIdx, suffixEndIdx, "");
            prefixBegIdx = stripped.indexOf(APPLE_SPAN_PREFIX);
        }
        return stripped.toString();
!!!6170892.java!!!	disableAccessibilityAndMockAccessibilityService() : void
        // disable accessibility and the mock accessibility service
        Settings.Secure.putInt(getActivity().getContentResolver(),
                Settings.Secure.ACCESSIBILITY_ENABLED, 0);
        Settings.Secure.putString(getActivity().getContentResolver(),
                Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES, "");
!!!6171020.java!!!	assertSelectionString(in expectedSelectionString : String) : void
        assertTrue("MockAccessibilityService not ready", sIsAccessibilityServiceReady);

        long incrementStep = TIMEOUT_WAIT_FOR_SELECTION_STRING / 5;
        long start = SystemClock.uptimeMillis();
        while (SystemClock.uptimeMillis() - start < TIMEOUT_WAIT_FOR_SELECTION_STRING &&
                sReceivedSelectionString == SELECTION_STRING_UNKNOWN) {
            synchronized (sTestLock) {
                try {
                    sTestLock.wait(incrementStep);
                } catch (InterruptedException ie) {
                    /* ignore */
                }
            }
        }
        try {
            if (sReceivedSelectionString == SELECTION_STRING_UNKNOWN) {
                fail("No selection string received. Expected: " + expectedSelectionString);
            }
            assertEquals(expectedSelectionString, sReceivedSelectionString);
        } finally {
            sReceivedSelectionString = SELECTION_STRING_UNKNOWN;
        }
!!!6171148.java!!!	sendKeyEvent(inout webView : WebView, in keyCode : int, in metaState : int) : void
        webView.onKeyDown(keyCode, new KeyEvent(0, 0, KeyEvent.ACTION_DOWN, keyCode, 1, metaState));
        webView.onKeyUp(keyCode, new KeyEvent(0, 0, KeyEvent.ACTION_UP, keyCode, 1, metaState));
!!!6171276.java!!!	loadHTML(in html : String) : WebView
        mWorker.getHandler().post(new Runnable() {
            public void run() {
                if (mWebView == null) {
                    mWebView = getActivity().getWebView();
                    mWebView.setWebViewClient(new WebViewClient() {
                        @Override
                        public void onPageFinished(WebView view, String url) {
                            mWorker.getHandler().post(new Runnable() {
                                public void run() {
                                    synchronized (sTestLock) {
                                        sTestLock.notifyAll();
                                    }
                                }
                            });
                        }
                    });
                }
                mWebView.loadData(html, "text/html", null);
            }
        });
        synchronized (sTestLock) {
            try {
                sTestLock.wait();
            } catch (InterruptedException ie) {
                /* ignore */
            }
        }
        return mWebView;
!!!6171404.java!!!	injectTestWebContentKeyBindings() : void
        ContentResolver contentResolver = getActivity().getContentResolver();
        sDefaultKeyBindings = Settings.Secure.getString(contentResolver,
                Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS);
        Settings.Secure.putString(contentResolver,
                Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS, TEST_KEY_DINDINGS);
!!!6171532.java!!!	restoreDefaultWebContentKeyBindings() : void
        Settings.Secure.putString(getActivity().getContentResolver(),
                Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS,
                sDefaultKeyBindings);
