class Mesh
!!!6556940.java!!!	Mesh(in id : int, inout rs : RenderScript)
        super(id, rs);
!!!6557068.java!!!	getVertexAllocationCount() : int
        if(mVertexBuffers == null) {
            return 0;
        }
        return mVertexBuffers.length;
!!!6557196.java!!!	getVertexAllocation(in slot : int) : Allocation
        return mVertexBuffers[slot];
!!!6557324.java!!!	getPrimitiveCount() : int
        if(mIndexBuffers == null) {
            return 0;
        }
        return mIndexBuffers.length;
!!!6557452.java!!!	getIndexSetAllocation(in slot : int) : Allocation
        return mIndexBuffers[slot];
!!!6557580.java!!!	getPrimitive(in slot : int) : Primitive
        return mPrimitives[slot];
!!!6557708.java!!!	updateFromNative() : void
        super.updateFromNative();
        int vtxCount = mRS.nMeshGetVertexBufferCount(getID(mRS));
        int idxCount = mRS.nMeshGetIndexCount(getID(mRS));

        int[] vtxIDs = new int[vtxCount];
        int[] idxIDs = new int[idxCount];
        int[] primitives = new int[idxCount];

        mRS.nMeshGetVertices(getID(mRS), vtxIDs, vtxCount);
        mRS.nMeshGetIndices(getID(mRS), idxIDs, primitives, idxCount);

        mVertexBuffers = new Allocation[vtxCount];
        mIndexBuffers = new Allocation[idxCount];
        mPrimitives = new Primitive[idxCount];

        for(int i = 0; i < vtxCount; i ++) {
            if(vtxIDs[i] != 0) {
                mVertexBuffers[i] = new Allocation(vtxIDs[i], mRS, null, Allocation.USAGE_SCRIPT);
                mVertexBuffers[i].updateFromNative();
            }
        }

        for(int i = 0; i < idxCount; i ++) {
            if(idxIDs[i] != 0) {
                mIndexBuffers[i] = new Allocation(idxIDs[i], mRS, null, Allocation.USAGE_SCRIPT);
                mIndexBuffers[i].updateFromNative();
            }
            mPrimitives[i] = Primitive.values()[primitives[i]];
        }
