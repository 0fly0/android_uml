class GestureOverlayView
!!!3370764.java!!!	GestureOverlayView(inout context : Context)
        super(context);
        init();
!!!3370892.java!!!	GestureOverlayView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.gestureOverlayViewStyle);
!!!3371020.java!!!	GestureOverlayView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        TypedArray a = context.obtainStyledAttributes(attrs,
                R.styleable.GestureOverlayView, defStyle, 0);

        mGestureStrokeWidth = a.getFloat(R.styleable.GestureOverlayView_gestureStrokeWidth,
                mGestureStrokeWidth);
        mInvalidateExtraBorder = Math.max(1, ((int) mGestureStrokeWidth) - 1);
        mCertainGestureColor = a.getColor(R.styleable.GestureOverlayView_gestureColor,
                mCertainGestureColor);
        mUncertainGestureColor = a.getColor(R.styleable.GestureOverlayView_uncertainGestureColor,
                mUncertainGestureColor);
        mFadeDuration = a.getInt(R.styleable.GestureOverlayView_fadeDuration, (int) mFadeDuration);
        mFadeOffset = a.getInt(R.styleable.GestureOverlayView_fadeOffset, (int) mFadeOffset);
        mGestureStrokeType = a.getInt(R.styleable.GestureOverlayView_gestureStrokeType,
                mGestureStrokeType);
        mGestureStrokeLengthThreshold = a.getFloat(
                R.styleable.GestureOverlayView_gestureStrokeLengthThreshold,
                mGestureStrokeLengthThreshold);
        mGestureStrokeAngleThreshold = a.getFloat(
                R.styleable.GestureOverlayView_gestureStrokeAngleThreshold,
                mGestureStrokeAngleThreshold);
        mGestureStrokeSquarenessTreshold = a.getFloat(
                R.styleable.GestureOverlayView_gestureStrokeSquarenessThreshold,
                mGestureStrokeSquarenessTreshold);
        mInterceptEvents = a.getBoolean(R.styleable.GestureOverlayView_eventsInterceptionEnabled,
                mInterceptEvents);
        mFadeEnabled = a.getBoolean(R.styleable.GestureOverlayView_fadeEnabled,
                mFadeEnabled);
        mOrientation = a.getInt(R.styleable.GestureOverlayView_orientation, mOrientation);

        a.recycle();

        init();
!!!3371148.java!!!	init() : void
        setWillNotDraw(false);

        final Paint gesturePaint = mGesturePaint;
        gesturePaint.setAntiAlias(GESTURE_RENDERING_ANTIALIAS);
        gesturePaint.setColor(mCertainGestureColor);
        gesturePaint.setStyle(Paint.Style.STROKE);
        gesturePaint.setStrokeJoin(Paint.Join.ROUND);
        gesturePaint.setStrokeCap(Paint.Cap.ROUND);
        gesturePaint.setStrokeWidth(mGestureStrokeWidth);
        gesturePaint.setDither(DITHER_FLAG);

        mCurrentColor = mCertainGestureColor;
        setPaintAlpha(255);
!!!3371276.java!!!	getCurrentStroke() : GesturePoint
        return mStrokeBuffer;
!!!3371404.java!!!	getOrientation() : int
        return mOrientation;
!!!3371532.java!!!	setOrientation(in orientation : int) : void
        mOrientation = orientation;
!!!3371660.java!!!	setGestureColor(in color : int) : void
        mCertainGestureColor = color;
!!!3371788.java!!!	setUncertainGestureColor(in color : int) : void
        mUncertainGestureColor = color;
!!!3371916.java!!!	getUncertainGestureColor() : int
        return mUncertainGestureColor;
!!!3372044.java!!!	getGestureColor() : int
        return mCertainGestureColor;
!!!3372172.java!!!	getGestureStrokeWidth() : float
        return mGestureStrokeWidth;
!!!3372300.java!!!	setGestureStrokeWidth(in gestureStrokeWidth : float) : void
        mGestureStrokeWidth = gestureStrokeWidth;
        mInvalidateExtraBorder = Math.max(1, ((int) gestureStrokeWidth) - 1);
        mGesturePaint.setStrokeWidth(gestureStrokeWidth);
!!!3372428.java!!!	getGestureStrokeType() : int
        return mGestureStrokeType;
!!!3372556.java!!!	setGestureStrokeType(in gestureStrokeType : int) : void
        mGestureStrokeType = gestureStrokeType;
!!!3372684.java!!!	getGestureStrokeLengthThreshold() : float
        return mGestureStrokeLengthThreshold;
!!!3372812.java!!!	setGestureStrokeLengthThreshold(in gestureStrokeLengthThreshold : float) : void
        mGestureStrokeLengthThreshold = gestureStrokeLengthThreshold;
!!!3372940.java!!!	getGestureStrokeSquarenessTreshold() : float
        return mGestureStrokeSquarenessTreshold;
!!!3373068.java!!!	setGestureStrokeSquarenessTreshold(in gestureStrokeSquarenessTreshold : float) : void
        mGestureStrokeSquarenessTreshold = gestureStrokeSquarenessTreshold;
!!!3373196.java!!!	getGestureStrokeAngleThreshold() : float
        return mGestureStrokeAngleThreshold;
!!!3373324.java!!!	setGestureStrokeAngleThreshold(in gestureStrokeAngleThreshold : float) : void
        mGestureStrokeAngleThreshold = gestureStrokeAngleThreshold;
!!!3373452.java!!!	isEventsInterceptionEnabled() : boolean
        return mInterceptEvents;
!!!3373580.java!!!	setEventsInterceptionEnabled(inout enabled : boolean) : void
        mInterceptEvents = enabled;
!!!3373708.java!!!	isFadeEnabled() : boolean
        return mFadeEnabled;
!!!3373836.java!!!	setFadeEnabled(inout fadeEnabled : boolean) : void
        mFadeEnabled = fadeEnabled;
!!!3373964.java!!!	getGesture() : Gesture
        return mCurrentGesture;
!!!3374092.java!!!	setGesture(inout gesture : Gesture) : void
        if (mCurrentGesture != null) {
            clear(false);
        }

        setCurrentColor(mCertainGestureColor);
        mCurrentGesture = gesture;

        final Path path = mCurrentGesture.toPath();
        final RectF bounds = new RectF();
        path.computeBounds(bounds, true);

        // TODO: The path should also be scaled to fit inside this view
        mPath.rewind();
        mPath.addPath(path, -bounds.left + (getWidth() - bounds.width()) / 2.0f,
                -bounds.top + (getHeight() - bounds.height()) / 2.0f);

        mResetGesture = true;

        invalidate();
!!!3374220.java!!!	getGesturePath() : Path
        return mPath;
!!!3374348.java!!!	getGesturePath(inout path : Path) : Path
        path.set(mPath);
        return path;
!!!3374476.java!!!	isGestureVisible() : boolean
        return mGestureVisible;
!!!3374604.java!!!	setGestureVisible(inout visible : boolean) : void
        mGestureVisible = visible;
!!!3374732.java!!!	getFadeOffset() : long
        return mFadeOffset;
!!!3374860.java!!!	setFadeOffset(in fadeOffset : long) : void
        mFadeOffset = fadeOffset;
!!!3374988.java!!!	addOnGestureListener(inout listener : OnGestureListener) : void
        mOnGestureListeners.add(listener);
!!!3375116.java!!!	removeOnGestureListener(inout listener : OnGestureListener) : void
        mOnGestureListeners.remove(listener);
!!!3375244.java!!!	removeAllOnGestureListeners() : void
        mOnGestureListeners.clear();
!!!3375372.java!!!	addOnGesturePerformedListener(inout listener : OnGesturePerformedListener) : void
        mOnGesturePerformedListeners.add(listener);
        if (mOnGesturePerformedListeners.size() > 0) {
            mHandleGestureActions = true;
        }
!!!3375500.java!!!	removeOnGesturePerformedListener(inout listener : OnGesturePerformedListener) : void
        mOnGesturePerformedListeners.remove(listener);
        if (mOnGesturePerformedListeners.size() <= 0) {
            mHandleGestureActions = false;
        }
!!!3375628.java!!!	removeAllOnGesturePerformedListeners() : void
        mOnGesturePerformedListeners.clear();
        mHandleGestureActions = false;
!!!3375756.java!!!	addOnGesturingListener(inout listener : OnGesturingListener) : void
        mOnGesturingListeners.add(listener);
!!!3375884.java!!!	removeOnGesturingListener(inout listener : OnGesturingListener) : void
        mOnGesturingListeners.remove(listener);
!!!3376012.java!!!	removeAllOnGesturingListeners() : void
        mOnGesturingListeners.clear();
!!!3376140.java!!!	isGesturing() : boolean
        return mIsGesturing;
!!!3376268.java!!!	setCurrentColor(in color : int) : void
        mCurrentColor = color;
        if (mFadingHasStarted) {
            setPaintAlpha((int) (255 * mFadingAlpha));
        } else {
            setPaintAlpha(255);
        }
        invalidate();
!!!3376396.java!!!	getGesturePaint() : Paint
        return mGesturePaint;
!!!3376524.java!!!	draw(inout canvas : Canvas) : void
        super.draw(canvas);

        if (mCurrentGesture != null && mGestureVisible) {
            canvas.drawPath(mPath, mGesturePaint);
        }
!!!3376652.java!!!	setPaintAlpha(in alpha : int) : void
        alpha += alpha >> 7;
        final int baseAlpha = mCurrentColor >>> 24;
        final int useAlpha = baseAlpha * alpha >> 8;
        mGesturePaint.setColor((mCurrentColor << 8 >>> 8) | (useAlpha << 24));
!!!3376780.java!!!	clear(inout animated : boolean) : void
        clear(animated, false, true);
!!!3376908.java!!!	clear(inout animated : boolean, inout fireActionPerformed : boolean, inout immediate : boolean) : void
        setPaintAlpha(255);
        removeCallbacks(mFadingOut);
        mResetGesture = false;
        mFadingOut.fireActionPerformed = fireActionPerformed;
        mFadingOut.resetMultipleStrokes = false;

        if (animated && mCurrentGesture != null) {
            mFadingAlpha = 1.0f;
            mIsFadingOut = true;
            mFadingHasStarted = false;
            mFadingStart = AnimationUtils.currentAnimationTimeMillis() + mFadeOffset;

            postDelayed(mFadingOut, mFadeOffset);
        } else {
            mFadingAlpha = 1.0f;
            mIsFadingOut = false;
            mFadingHasStarted = false;

            if (immediate) {
                mCurrentGesture = null;
                mPath.rewind();
                invalidate();
            } else if (fireActionPerformed) {
                postDelayed(mFadingOut, mFadeOffset);
            } else if (mGestureStrokeType == GESTURE_STROKE_TYPE_MULTIPLE) {
                mFadingOut.resetMultipleStrokes = true;
                postDelayed(mFadingOut, mFadeOffset);
            } else {
                mCurrentGesture = null;
                mPath.rewind();
                invalidate();
            }
        }
!!!3377036.java!!!	cancelClearAnimation() : void
        setPaintAlpha(255);
        mIsFadingOut = false;
        mFadingHasStarted = false;
        removeCallbacks(mFadingOut);
        mPath.rewind();
        mCurrentGesture = null;
!!!3377164.java!!!	cancelGesture() : void
        mIsListeningForGestures = false;

        // add the stroke to the current gesture
        mCurrentGesture.addStroke(new GestureStroke(mStrokeBuffer));

        // pass the event to handlers
        final long now = SystemClock.uptimeMillis();
        final MotionEvent event = MotionEvent.obtain(now, now,
                MotionEvent.ACTION_CANCEL, 0.0f, 0.0f, 0);

        final ArrayList<OnGestureListener> listeners = mOnGestureListeners;
        int count = listeners.size();
        for (int i = 0; i < count; i++) {
            listeners.get(i).onGestureCancelled(this, event);
        }

        event.recycle();

        clear(false);
        mIsGesturing = false;
        mPreviousWasGesturing = false;
        mStrokeBuffer.clear();

        final ArrayList<OnGesturingListener> otherListeners = mOnGesturingListeners;
        count = otherListeners.size();
        for (int i = 0; i < count; i++) {
            otherListeners.get(i).onGesturingEnded(this);
        }
!!!3377292.java!!!	onDetachedFromWindow() : void
        cancelClearAnimation();
!!!3377420.java!!!	dispatchTouchEvent(inout event : MotionEvent) : boolean
        if (isEnabled()) {
            final boolean cancelDispatch = (mIsGesturing || (mCurrentGesture != null &&
                    mCurrentGesture.getStrokesCount() > 0 && mPreviousWasGesturing)) &&
                    mInterceptEvents;

            processEvent(event);

            if (cancelDispatch) {
                event.setAction(MotionEvent.ACTION_CANCEL);
            }

            super.dispatchTouchEvent(event);

            return true;
        }

        return super.dispatchTouchEvent(event);
!!!3377548.java!!!	processEvent(inout event : MotionEvent) : boolean
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                touchDown(event);
                invalidate();
                return true;
            case MotionEvent.ACTION_MOVE:
                if (mIsListeningForGestures) {
                    Rect rect = touchMove(event);
                    if (rect != null) {
                        invalidate(rect);
                    }
                    return true;
                }
                break;
            case MotionEvent.ACTION_UP:
                if (mIsListeningForGestures) {
                    touchUp(event, false);
                    invalidate();
                    return true;
                }
                break;
            case MotionEvent.ACTION_CANCEL:
                if (mIsListeningForGestures) {
                    touchUp(event, true);
                    invalidate();
                    return true;
                }
        }

        return false;
!!!3377676.java!!!	touchDown(inout event : MotionEvent) : void
        mIsListeningForGestures = true;

        float x = event.getX();
        float y = event.getY();

        mX = x;
        mY = y;

        mTotalLength = 0;
        mIsGesturing = false;

        if (mGestureStrokeType == GESTURE_STROKE_TYPE_SINGLE || mResetGesture) {
            if (mHandleGestureActions) setCurrentColor(mUncertainGestureColor);
            mResetGesture = false;
            mCurrentGesture = null;
            mPath.rewind();
        } else if (mCurrentGesture == null || mCurrentGesture.getStrokesCount() == 0) {
            if (mHandleGestureActions) setCurrentColor(mUncertainGestureColor);
        }

        // if there is fading out going on, stop it.
        if (mFadingHasStarted) {
            cancelClearAnimation();
        } else if (mIsFadingOut) {
            setPaintAlpha(255);
            mIsFadingOut = false;
            mFadingHasStarted = false;
            removeCallbacks(mFadingOut);
        }

        if (mCurrentGesture == null) {
            mCurrentGesture = new Gesture();
        }

        mStrokeBuffer.add(new GesturePoint(x, y, event.getEventTime()));
        mPath.moveTo(x, y);

        final int border = mInvalidateExtraBorder;
        mInvalidRect.set((int) x - border, (int) y - border, (int) x + border, (int) y + border);

        mCurveEndX = x;
        mCurveEndY = y;

        // pass the event to handlers
        final ArrayList<OnGestureListener> listeners = mOnGestureListeners;
        final int count = listeners.size();
        for (int i = 0; i < count; i++) {
            listeners.get(i).onGestureStarted(this, event);
        }
!!!3377804.java!!!	touchMove(inout event : MotionEvent) : Rect
        Rect areaToRefresh = null;

        final float x = event.getX();
        final float y = event.getY();

        final float previousX = mX;
        final float previousY = mY;

        final float dx = Math.abs(x - previousX);
        final float dy = Math.abs(y - previousY);

        if (dx >= GestureStroke.TOUCH_TOLERANCE || dy >= GestureStroke.TOUCH_TOLERANCE) {
            areaToRefresh = mInvalidRect;

            // start with the curve end
            final int border = mInvalidateExtraBorder;
            areaToRefresh.set((int) mCurveEndX - border, (int) mCurveEndY - border,
                    (int) mCurveEndX + border, (int) mCurveEndY + border);

            float cX = mCurveEndX = (x + previousX) / 2;
            float cY = mCurveEndY = (y + previousY) / 2;

            mPath.quadTo(previousX, previousY, cX, cY);

            // union with the control point of the new curve
            areaToRefresh.union((int) previousX - border, (int) previousY - border,
                    (int) previousX + border, (int) previousY + border);

            // union with the end point of the new curve
            areaToRefresh.union((int) cX - border, (int) cY - border,
                    (int) cX + border, (int) cY + border);

            mX = x;
            mY = y;

            mStrokeBuffer.add(new GesturePoint(x, y, event.getEventTime()));

            if (mHandleGestureActions && !mIsGesturing) {
                mTotalLength += (float) Math.sqrt(dx * dx + dy * dy);

                if (mTotalLength > mGestureStrokeLengthThreshold) {
                    final OrientedBoundingBox box =
                            GestureUtils.computeOrientedBoundingBox(mStrokeBuffer);

                    float angle = Math.abs(box.orientation);
                    if (angle > 90) {
                        angle = 180 - angle;
                    }

                    if (box.squareness > mGestureStrokeSquarenessTreshold ||
                            (mOrientation == ORIENTATION_VERTICAL ?
                                    angle < mGestureStrokeAngleThreshold :
                                    angle > mGestureStrokeAngleThreshold)) {

                        mIsGesturing = true;
                        setCurrentColor(mCertainGestureColor);

                        final ArrayList<OnGesturingListener> listeners = mOnGesturingListeners;
                        int count = listeners.size();
                        for (int i = 0; i < count; i++) {
                            listeners.get(i).onGesturingStarted(this);
                        }
                    }
                }
            }

            // pass the event to handlers
            final ArrayList<OnGestureListener> listeners = mOnGestureListeners;
            final int count = listeners.size();
            for (int i = 0; i < count; i++) {
                listeners.get(i).onGesture(this, event);
            }
        }

        return areaToRefresh;
!!!3377932.java!!!	touchUp(inout event : MotionEvent, inout cancel : boolean) : void
        mIsListeningForGestures = false;

        // A gesture wasn't started or was cancelled
        if (mCurrentGesture != null) {
            // add the stroke to the current gesture
            mCurrentGesture.addStroke(new GestureStroke(mStrokeBuffer));

            if (!cancel) {
                // pass the event to handlers
                final ArrayList<OnGestureListener> listeners = mOnGestureListeners;
                int count = listeners.size();
                for (int i = 0; i < count; i++) {
                    listeners.get(i).onGestureEnded(this, event);
                }

                clear(mHandleGestureActions && mFadeEnabled, mHandleGestureActions && mIsGesturing,
                        false);
            } else {
                cancelGesture(event);

            }
        } else {
            cancelGesture(event);
        }

        mStrokeBuffer.clear();
        mPreviousWasGesturing = mIsGesturing;
        mIsGesturing = false;

        final ArrayList<OnGesturingListener> listeners = mOnGesturingListeners;
        int count = listeners.size();
        for (int i = 0; i < count; i++) {
            listeners.get(i).onGesturingEnded(this);
        }
!!!3378060.java!!!	cancelGesture(inout event : MotionEvent) : void
        // pass the event to handlers
        final ArrayList<OnGestureListener> listeners = mOnGestureListeners;
        final int count = listeners.size();
        for (int i = 0; i < count; i++) {
            listeners.get(i).onGestureCancelled(this, event);
        }

        clear(false);
!!!3378188.java!!!	fireOnGesturePerformed() : void
        final ArrayList<OnGesturePerformedListener> actionListeners = mOnGesturePerformedListeners;
        final int count = actionListeners.size();
        for (int i = 0; i < count; i++) {
            actionListeners.get(i).onGesturePerformed(GestureOverlayView.this, mCurrentGesture);
        }
