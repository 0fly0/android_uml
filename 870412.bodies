class SystemService
!!!3941004.java!!!	start(in name : String) : void
        SystemProperties.set("ctl.start", name);
!!!3941132.java!!!	stop(in name : String) : void
        SystemProperties.set("ctl.stop", name);
!!!3941260.java!!!	restart(in name : String) : void
        SystemProperties.set("ctl.restart", name);
!!!3941388.java!!!	getState(in service : String) : State
        final String rawState = SystemProperties.get("init.svc." + service);
        final State state = sStates.get(rawState);
        if (state != null) {
            return state;
        } else {
            return State.STOPPED;
        }
!!!3941516.java!!!	isStopped(in service : String) : boolean
        return State.STOPPED.equals(getState(service));
!!!3941644.java!!!	isRunning(in service : String) : boolean
        return State.RUNNING.equals(getState(service));
!!!3941772.java!!!	waitForState(in service : String, inout state : State, in timeoutMillis : long) : void
        final long endMillis = SystemClock.elapsedRealtime() + timeoutMillis;
        while (true) {
            synchronized (sPropertyLock) {
                final State currentState = getState(service);
                if (state.equals(currentState)) {
                    return;
                }

                if (SystemClock.elapsedRealtime() >= endMillis) {
                    throw new TimeoutException("Service " + service + " currently " + currentState
                            + "; waited " + timeoutMillis + "ms for " + state);
                }

                try {
                    sPropertyLock.wait(timeoutMillis);
                } catch (InterruptedException e) {
                }
            }
        }
!!!3941900.java!!!	waitForAnyStopped(inout  : String...services) : void
        while (true) {
            synchronized (sPropertyLock) {
                for (String service : services) {
                    if (State.STOPPED.equals(getState(service))) {
                        return;
                    }
                }

                try {
                    sPropertyLock.wait();
                } catch (InterruptedException e) {
                }
            }
        }
