class GtvMediaPlayer
!!!13203468.java!!!	GtvMediaPlayer()
        Looper looper;
        if ((looper = Looper.myLooper()) != null) {
            mEventHandler = new EventHandler(this, looper);
        } else if ((looper = Looper.getMainLooper()) != null) {
            mEventHandler = new EventHandler(this, looper);
        } else {
            mEventHandler = null;
        }
        mOnTimedTextListener = null;

        /* Native setup requires a weak reference to our object.
         * It's easier to create it here than in C++.
         */
        native_setup(new WeakReference<GtvMediaPlayer>(this));
!!!13203596.java!!!	setDataSource(inout source : MediaSource) : void
        setDataSource(source.getNativeSource());
        tryEnableGtvExtension();
        if (!mIsGtvExtensionEnabled) {
            throw new IllegalStateException();
        }
!!!13203852.java!!!	setDataSource(inout fd : FileDescriptor, in offset : long, in length : long) : void
        super.setDataSource(fd, offset, length);
        tryEnableGtvExtension();
        if (!mIsGtvExtensionEnabled) {
            Log.i(TAG, "TV extensions are not available.");
        }
!!!13203980.java!!!	setDataSource(in path : String) : void
        super.setDataSource(path);
        tryEnableGtvExtension();
        if (!mIsGtvExtensionEnabled) {
            Log.i(TAG, "TV extensions are not available.");
        }
!!!13204108.java!!!	setDataSource(in path : String, inout headers : Map<String, String>) : void
        super.setDataSource(path, headers);
        tryEnableGtvExtension();
        if (!mIsGtvExtensionEnabled) {
            Log.i(TAG, "TV extensions are not available.");
        }
!!!13204236.java!!!	setDataSource(inout context : Context, inout uri : Uri, inout headers : Map<String, String>) : void
        super.setDataSource(context, uri, headers);
        tryEnableGtvExtension();
        if (!mIsGtvExtensionEnabled) {
            Log.i(TAG, "TV extensions are not available.");
        }
!!!13204364.java!!!	tryEnableGtvExtension() : void
        Parcel request = Parcel.obtain();
        Parcel reply   = Parcel.obtain();

        request.writeInterfaceToken(IMEDIA_PLAYER);
        request.writeInt(INVOKE_ID_NOTIFY_ENABLE_GTV_EXTENSION);

        boolean isEnabled = true;
        try {
            invoke(request, reply);
        } catch (RuntimeException ex) {
            isEnabled = false;
        } finally {
            request.recycle();
            reply.recycle();
        }
        mIsGtvExtensionEnabled = isEnabled;
!!!13204492.java!!!	getBufferedMediaSize() : int
        if (!mIsGtvExtensionEnabled) {
            Log.e(TAG, "getBufferedMediaSize() is not available at native level.");
            throw new IllegalStateException();
        }
        Parcel request = Parcel.obtain();
        Parcel reply   = Parcel.obtain();

        request.writeInterfaceToken(IMEDIA_PLAYER);
        request.writeInt(INVOKE_ID_GET_USED_STREAMING_BUFFER_SIZE);

        int ret = 0;
        try {
            invoke(request, reply);
            ret = reply.readInt();
        } catch (RuntimeException ex) {
            throw new IllegalStateException();
        } finally {
            request.recycle();
            reply.recycle();
        }

        return ret;
!!!13204620.java!!!	getBufferedMediaDurationMs() : int
        if (!mIsGtvExtensionEnabled) {
            Log.e(TAG, "getBufferedMediaDurationMs() is not available at native level.");
            throw new IllegalStateException();
        }
        Parcel request = Parcel.obtain();
        Parcel reply   = Parcel.obtain();

        request.writeInterfaceToken(IMEDIA_PLAYER);
        request.writeInt(INVOKE_ID_GET_BUFFERED_MEDIA_DURATION_MS);

        int ret = 0;
        try {
            invoke(request, reply);
            ret = reply.readInt();
        } catch (RuntimeException ex) {
            throw new IllegalStateException();
        } finally {
            request.recycle();
            reply.recycle();
        }

        return ret;
!!!13205004.java!!!	getTrackInfo() : TrackInfo
        android.media.MediaPlayer.TrackInfo[] trackInfo = super.getTrackInfo();
        if (trackInfo == null) {
            return null;
        }

        TrackInfo[] ret = new TrackInfo[trackInfo.length];
        for (int i = 0; i < trackInfo.length; ++i) {
            if (trackInfo[i] == null) continue;
            ret[i] = TrackInfo.from(trackInfo[i]);
        }
        return ret;
!!!13205132.java!!!	getExtendedTrackInfo() : ExtendedTrackInfo
        Parcel request = Parcel.obtain();
        Parcel reply = Parcel.obtain();
        ExtendedTrackInfo[] metaList = null;
        try {
            request.writeInterfaceToken(IMEDIA_PLAYER);
            request.writeInt(INVOKE_ID_GET_EXTENDED_TRACK_INFO);
            invoke(request, reply);
            int size = reply.readInt();
            metaList = new ExtendedTrackInfo[size];
            for (int i = 0; i < size; ++i) {
                metaList[i] = new ExtendedTrackInfo();
                metaList[i].fromParcel(reply);
            }
        } catch (RuntimeException ex) {
            // Native player doesn't support this function. ex) AwesomePlayer
            metaList = null;
        } finally {
            request.recycle();
            reply.recycle();
        }
        return metaList;
!!!13205260.java!!!	addTimedTextSource(in path : String, in mimeType : String) : void
        super.addTimedTextSource(path, mimeType);
!!!13205388.java!!!	addTimedTextSource(inout context : Context, inout uri : Uri, in mimeType : String) : void
        super.addTimedTextSource(context, uri, mimeType);
!!!13205516.java!!!	addTimedTextSource(inout fd : FileDescriptor, in mimeType : String) : void
        super.addTimedTextSource(fd, mimeType);
!!!13205644.java!!!	addTimedTextSource(inout fd : FileDescriptor, in offset : long, in length : long, in mimeType : String) : void
        super.addTimedTextSource(fd, offset, length, mimeType);
!!!13205772.java!!!	selectTrack(in index : int) : void
        super.selectTrack(index);
!!!13205900.java!!!	deselectTrack(in index : int) : void
        super.deselectTrack(index);
!!!13206028.java!!!	setMinMediaBitrateForAbr(in kbps : int) : boolean
        boolean returnValue = false;
        Parcel request = Parcel.obtain();
        Parcel reply = Parcel.obtain();
        try {
            request.writeInterfaceToken(IMEDIA_PLAYER);
            request.writeInt(INVOKE_ID_SET_MIN_MEDIA_BITRATE_FOR_ABR);
            request.writeInt(kbps);
            invoke(request, reply);
            returnValue = (reply.readInt() != 0);
        } catch (RuntimeException ex) {
            // Native player doesn't support this function. ex) AwesomePlayer
            returnValue = false;
        } finally {
            request.recycle();
            reply.recycle();
        }
        return returnValue;
!!!13206156.java!!!	setLowLatencyMode(inout lowLatencyMode : boolean) : boolean
        boolean ret = true;
        Parcel request = Parcel.obtain();
        Parcel reply = Parcel.obtain();
        try {
            request.writeInterfaceToken(IMEDIA_PLAYER);
            request.writeInt(INVOKE_ID_SET_LOW_LATENCY_MODE);
            request.writeInt(lowLatencyMode ? 1 : 0);
            invoke(request, reply);
            if (reply.readInt() == 0) {
                throw new IllegalStateException();
            }
        } catch (IllegalStateException ex) {
            throw ex;
        } catch (RuntimeException ex) {
            // Native player doesn't support this function. ex) AwesomePlayer
            ret = false;
        } finally {
            request.recycle();
            reply.recycle();
        }
        return ret;
!!!13206284.java!!!	setBufferingDurationMs(in durationMs : int) : boolean
        boolean ret = true;
        Parcel request = Parcel.obtain();
        Parcel reply = Parcel.obtain();
        try {
            request.writeInterfaceToken(IMEDIA_PLAYER);
            request.writeInt(INVOKE_ID_SET_BUFFERING_DURATION_MS);
            request.writeInt(durationMs);
            invoke(request, reply);
            ret = (reply.readInt() != 0);
        } catch (RuntimeException ex) {
            // Native player doesn't support this function.
            ret = false;
        } finally {
            request.recycle();
            reply.recycle();
        }
        return ret;
!!!13206412.java!!!	setFinalWindowSize(inout mp : MediaPlayer, in width : int, in height : int) : boolean
        Parcel request = Parcel.obtain();
        Parcel reply = Parcel.obtain();

        request.writeInterfaceToken(IMEDIA_PLAYER);
        request.writeInt(INVOKE_ID_SET_FINAL_WINDOW_SIZE);
        request.writeInt(width);
        request.writeInt(height);

        boolean ret = false;
        try {
            mp.invoke(request, reply);
            ret = reply.readInt() != 0;
        } finally {
            request.recycle();
            reply.recycle();
        }

        return ret;
!!!13206540.java!!!	getOnInfoMetadata() : OnInfoMetadata
        return mOnInfoMetadata;
!!!13207180.java!!!	postEventFromNative(inout mediaplayer_ref : Object, in what : int, in arg1 : int, in arg2 : int, inout obj : Object) : void
        Log.d(TAG, "postEventFromNative: what " + what + " arg1 " + arg1 + " arg2 " + arg2);
        GtvMediaPlayer gmp = (GtvMediaPlayer)((WeakReference) mediaplayer_ref).get();
        if (gmp == null || gmp.mEventHandler == null) {
            return;
        }

        Message m = gmp.mEventHandler.obtainMessage(what, arg1, arg2, obj);
        gmp.mEventHandler.sendMessage(m);
!!!13207436.java!!!	setOnTimedTextListener(inout listener : OnTimedTextListener) : void
        mOnTimedTextListener = listener;
!!!13207564.java!!!	setOnInfoListener(inout listener : OnInfoListener) : void
        mOnInfoListener = listener;
