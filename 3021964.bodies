class TVBaseDialog
!!!12363404.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        mContext = getApplicationContext();
        mReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(final Context context, final Intent intent) {
                if (intent.getAction().equals("CLOSE_APP")) {
                    Log.d(TAG, "receive intent CLOSE_APP");
                    finish();
                }
            }
        };
        final IntentFilter filter = new IntentFilter();
        filter.addAction("CLOSE_APP");
        registerReceiver(mReceiver, filter);
!!!12363532.java!!!	onResume() : void
        super.onResume();
        startTimeOut();
!!!12363660.java!!!	onPause() : void
        super.onPause();
        stopTimeOut();
!!!12363788.java!!!	onDestroy() : void
        super.onDestroy();
        unregisterReceiver(mReceiver);
!!!12363916.java!!!	setTimeOut(in value : int) : void
        mTimeOutValue = value;
!!!12364044.java!!!	getTimeOut() : int
        return mTimeOutValue;
!!!12364172.java!!!	setTimeOutRunnable(inout r : Runnable) : void
        stopTimeOut();
        mTimeOutRunnable = r;
!!!12364300.java!!!	getTimeOutRunnable() : Runnable
        return mTimeOutRunnable;
!!!12364428.java!!!	startTimeOut() : void
        isTimeOutStarted = true;
        refreshTimeOut();
!!!12364556.java!!!	stopTimeOut() : void
        isTimeOutStarted = false;
        if (getTimeOutRunnable() != null) {
            mTimeOutHandler.removeCallbacks(getTimeOutRunnable());
        }
!!!12364684.java!!!	refreshTimeOut() : void
        if (isTimeOutStarted && getTimeOutRunnable() != null && getTimeOut() != 0) {

            // Remove any pending posts of Runnable that are in the message
            // queue.
            mTimeOutHandler.removeCallbacks(getTimeOutRunnable());

            /*
             * Causes the Runnable to be added to the message queue, to be run
             * after the specified amount of time elapses. The runnable will be
             * run on the thread to which this handler is attached.
             */
            mTimeOutHandler.postDelayed(getTimeOutRunnable(), getTimeOut());
        }
!!!12364812.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        refreshTimeOut();
        return super.dispatchKeyEvent(event);
!!!12364940.java!!!	onPreparePanel(in featureId : int, inout view : View, inout menu : Menu) : boolean
        // TODO Auto-generated method stub
        return false;
!!!12365068.java!!!	onKeyDown(in keyCode : int, in event : KeyEvent) : boolean

        Log.d(TAG, "onKeyDown() KeyCode : " + keyCode);
        Log.d(TAG, "onKeyDown() KeyCode : " + event);

        if (event.getScanCode() == EXIT_KEY) {
            Utils.exitFromApp(mContext);
        }

        return super.onKeyDown(keyCode, event);
