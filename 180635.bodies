class IntBuffer
!!!680603.java!!!	allocate(in capacity : int) : IntBuffer
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        return new IntArrayBuffer(new int[capacity]);
!!!680731.java!!!	wrap(inout array : int) : IntBuffer
        return wrap(array, 0, array.length);
!!!680859.java!!!	wrap(inout array : int, in start : int, in intCount : int) : IntBuffer
        Arrays.checkOffsetAndCount(array.length, start, intCount);
        IntBuffer buf = new IntArrayBuffer(array);
        buf.position = start;
        buf.limit = start + intCount;
        return buf;
!!!680987.java!!!	IntBuffer(in capacity : int)
        super(2, capacity, null);
!!!681115.java!!!	array() : int
        return protectedArray();
!!!681243.java!!!	arrayOffset() : int
        return protectedArrayOffset();
!!!681627.java!!!	compareTo(inout otherBuffer : IntBuffer) : int
        int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining()
                : otherBuffer.remaining();
        int thisPos = position;
        int otherPos = otherBuffer.position;
        int thisInt, otherInt;
        while (compareRemaining > 0) {
            thisInt = get(thisPos);
            otherInt = otherBuffer.get(otherPos);
            if (thisInt != otherInt) {
                return thisInt < otherInt ? -1 : 1;
            }
            thisPos++;
            otherPos++;
            compareRemaining--;
        }
        return remaining() - otherBuffer.remaining();
!!!681883.java!!!	equals(inout other : Object) : boolean
        if (!(other instanceof IntBuffer)) {
            return false;
        }
        IntBuffer otherBuffer = (IntBuffer) other;

        if (remaining() != otherBuffer.remaining()) {
            return false;
        }

        int myPosition = position;
        int otherPosition = otherBuffer.position;
        boolean equalSoFar = true;
        while (equalSoFar && (myPosition < limit)) {
            equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);
        }

        return equalSoFar;
!!!682139.java!!!	get(inout dst : int) : IntBuffer
        return get(dst, 0, dst.length);
!!!682267.java!!!	get(inout dst : int, in dstOffset : int, in intCount : int) : IntBuffer
        Arrays.checkOffsetAndCount(dst.length, dstOffset, intCount);
        if (intCount > remaining()) {
            throw new BufferUnderflowException();
        }
        for (int i = dstOffset; i < dstOffset + intCount; ++i) {
            dst[i] = get();
        }
        return this;
!!!682523.java!!!	hasArray() : boolean
        return protectedHasArray();
!!!682651.java!!!	hashCode() : int
        int myPosition = position;
        int hash = 0;
        while (myPosition < limit) {
            hash = hash + get(myPosition++);
        }
        return hash;
!!!683547.java!!!	put(inout src : int) : IntBuffer
        return put(src, 0, src.length);
!!!683675.java!!!	put(inout src : int, in srcOffset : int, in intCount : int) : IntBuffer
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);
        if (intCount > remaining()) {
            throw new BufferOverflowException();
        }
        for (int i = srcOffset; i < srcOffset + intCount; ++i) {
            put(src[i]);
        }
        return this;
!!!683803.java!!!	put(inout src : IntBuffer) : IntBuffer
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        if (src == this) {
            throw new IllegalArgumentException("src == this");
        }
        if (src.remaining() > remaining()) {
            throw new BufferOverflowException();
        }
        int[] contents = new int[src.remaining()];
        src.get(contents);
        put(contents);
        return this;
