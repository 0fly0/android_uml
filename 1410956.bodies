class UsbService
!!!8697868.java!!!	getSettingsForUser(in userId : int) : UsbSettingsManager
        synchronized (mLock) {
            UsbSettingsManager settings = mSettingsByUser.get(userId);
            if (settings == null) {
                settings = new UsbSettingsManager(mContext, new UserHandle(userId));
                mSettingsByUser.put(userId, settings);
            }
            return settings;
        }
!!!8697996.java!!!	UsbService(inout context : Context)
        mContext = context;

        final PackageManager pm = mContext.getPackageManager();
        if (pm.hasSystemFeature(PackageManager.FEATURE_USB_HOST)) {
            mHostManager = new UsbHostManager(context);
        }
        if (new File("/sys/class/android_usb").exists()) {
            mDeviceManager = new UsbDeviceManager(context);
        }

        setCurrentUser(UserHandle.USER_OWNER);

        final IntentFilter userFilter = new IntentFilter();
        userFilter.addAction(Intent.ACTION_USER_SWITCHED);
        userFilter.addAction(Intent.ACTION_USER_STOPPED);
        mContext.registerReceiver(mUserReceiver, userFilter, null, null);
!!!8698124.java!!!	setCurrentUser(in userId : int) : void
        final UsbSettingsManager userSettings = getSettingsForUser(userId);
        if (mHostManager != null) {
            mHostManager.setCurrentSettings(userSettings);
        }
        if (mDeviceManager != null) {
            mDeviceManager.setCurrentSettings(userSettings);
        }
!!!8698252.java!!!	systemReady() : void
        if (mDeviceManager != null) {
            mDeviceManager.systemReady();
        }
        if (mHostManager != null) {
            mHostManager.systemReady();
        }
!!!8698380.java!!!	getDeviceList(inout devices : Bundle) : void
        if (mHostManager != null) {
            mHostManager.getDeviceList(devices);
        }
!!!8698508.java!!!	openDevice(in deviceName : String) : ParcelFileDescriptor
        if (mHostManager != null) {
            return mHostManager.openDevice(deviceName);
        } else {
            return null;
        }
!!!8698636.java!!!	getCurrentAccessory() : UsbAccessory
        if (mDeviceManager != null) {
            return mDeviceManager.getCurrentAccessory();
        } else {
            return null;
        }
!!!8698764.java!!!	openAccessory(inout accessory : UsbAccessory) : ParcelFileDescriptor
        if (mDeviceManager != null) {
            return mDeviceManager.openAccessory(accessory);
        } else {
            return null;
        }
!!!8698892.java!!!	setDevicePackage(inout device : UsbDevice, in packageName : String, in userId : int) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        getSettingsForUser(userId).setDevicePackage(device, packageName);
!!!8699020.java!!!	setAccessoryPackage(inout accessory : UsbAccessory, in packageName : String, in userId : int) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        getSettingsForUser(userId).setAccessoryPackage(accessory, packageName);
!!!8699148.java!!!	hasDevicePermission(inout device : UsbDevice) : boolean
        final int userId = UserHandle.getCallingUserId();
        return getSettingsForUser(userId).hasPermission(device);
!!!8699276.java!!!	hasAccessoryPermission(inout accessory : UsbAccessory) : boolean
        final int userId = UserHandle.getCallingUserId();
        return getSettingsForUser(userId).hasPermission(accessory);
!!!8699404.java!!!	requestDevicePermission(inout device : UsbDevice, in packageName : String, inout pi : PendingIntent) : void
        final int userId = UserHandle.getCallingUserId();
        getSettingsForUser(userId).requestPermission(device, packageName, pi);
!!!8699532.java!!!	requestAccessoryPermission(inout accessory : UsbAccessory, in packageName : String, inout pi : PendingIntent) : void
        final int userId = UserHandle.getCallingUserId();
        getSettingsForUser(userId).requestPermission(accessory, packageName, pi);
!!!8699660.java!!!	grantDevicePermission(inout device : UsbDevice, in uid : int) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        final int userId = UserHandle.getUserId(uid);
        getSettingsForUser(userId).grantDevicePermission(device, uid);
!!!8699788.java!!!	grantAccessoryPermission(inout accessory : UsbAccessory, in uid : int) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        final int userId = UserHandle.getUserId(uid);
        getSettingsForUser(userId).grantAccessoryPermission(accessory, uid);
!!!8699916.java!!!	hasDefaults(in packageName : String, in userId : int) : boolean
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        return getSettingsForUser(userId).hasDefaults(packageName);
!!!8700044.java!!!	clearDefaults(in packageName : String, in userId : int) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        getSettingsForUser(userId).clearDefaults(packageName);
!!!8700172.java!!!	setCurrentFunction(in function : String, inout makeDefault : boolean) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        if (mDeviceManager != null) {
            mDeviceManager.setCurrentFunctions(function, makeDefault);
        } else {
            throw new IllegalStateException("USB device mode not supported");
        }
!!!8700300.java!!!	setMassStorageBackingFile(in path : String) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        if (mDeviceManager != null) {
            mDeviceManager.setMassStorageBackingFile(path);
        } else {
            throw new IllegalStateException("USB device mode not supported");
        }
!!!8700428.java!!!	allowUsbDebugging(inout alwaysAllow : boolean, in publicKey : String) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        mDeviceManager.allowUsbDebugging(alwaysAllow, publicKey);
!!!8700556.java!!!	denyUsbDebugging() : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_USB, null);
        mDeviceManager.denyUsbDebugging();
!!!8700684.java!!!	dump(inout fd : FileDescriptor, inout writer : PrintWriter, inout args : String) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, TAG);
        final IndentingPrintWriter pw = new IndentingPrintWriter(writer, "  ");

        pw.println("USB Manager State:");
        if (mDeviceManager != null) {
            mDeviceManager.dump(fd, pw);
        }
        if (mHostManager != null) {
            mHostManager.dump(fd, pw);
        }

        synchronized (mLock) {
            for (int i = 0; i < mSettingsByUser.size(); i++) {
                final int userId = mSettingsByUser.keyAt(i);
                final UsbSettingsManager settings = mSettingsByUser.valueAt(i);
                pw.increaseIndent();
                pw.println("Settings for user " + userId + ":");
                settings.dump(fd, pw);
                pw.decreaseIndent();
            }
        }
        pw.decreaseIndent();
