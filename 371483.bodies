class OpenSSLX509CRLEntry
!!!2481179.java!!!	OpenSSLX509CRLEntry(in ctx : long)
        mContext = ctx;
!!!2481307.java!!!	getCriticalExtensionOIDs() : Set
        String[] critOids =
                NativeCrypto.get_X509_REVOKED_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_CRITICAL);

        /*
         * This API has a special case that if there are no extensions, we
         * should return null. So if we have no critical extensions, we'll check
         * non-critical extensions.
         */
        if ((critOids.length == 0)
                && (NativeCrypto.get_X509_REVOKED_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_NON_CRITICAL).length == 0)) {
            return null;
        }

        return new HashSet<String>(Arrays.asList(critOids));
!!!2481435.java!!!	getExtensionValue(inout oid : String) : byte
        return NativeCrypto.X509_REVOKED_get_ext_oid(mContext, oid);
!!!2481563.java!!!	getNonCriticalExtensionOIDs() : Set
        String[] critOids =
                NativeCrypto.get_X509_REVOKED_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_NON_CRITICAL);

        /*
         * This API has a special case that if there are no extensions, we
         * should return null. So if we have no non-critical extensions, we'll
         * check critical extensions.
         */
        if ((critOids.length == 0)
                && (NativeCrypto.get_X509_REVOKED_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_CRITICAL).length == 0)) {
            return null;
        }

        return new HashSet<String>(Arrays.asList(critOids));
!!!2481691.java!!!	hasUnsupportedCriticalExtension() : boolean
        final String[] criticalOids =
                NativeCrypto.get_X509_REVOKED_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_CRITICAL);
        for (String oid : criticalOids) {
            final long extensionRef = NativeCrypto.X509_REVOKED_get_ext(mContext, oid);
            if (NativeCrypto.X509_supported_extension(extensionRef) != 1) {
                return true;
            }
        }

        return false;
!!!2481819.java!!!	getEncoded() : byte
        return NativeCrypto.i2d_X509_REVOKED(mContext);
!!!2481947.java!!!	getSerialNumber() : BigInteger
        return new BigInteger(NativeCrypto.X509_REVOKED_get_serialNumber(mContext));
!!!2482075.java!!!	getRevocationDate() : Date
        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        calendar.set(Calendar.MILLISECOND, 0);
        NativeCrypto.ASN1_TIME_to_Calendar(NativeCrypto.get_X509_REVOKED_revocationDate(mContext),
                calendar);
        return calendar.getTime();
!!!2482203.java!!!	hasExtensions() : boolean
        return (NativeCrypto.get_X509_REVOKED_ext_oids(mContext,
                NativeCrypto.EXTENSION_TYPE_NON_CRITICAL).length != 0)
                || (NativeCrypto.get_X509_REVOKED_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_CRITICAL).length != 0);
!!!2482331.java!!!	toString() : String
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        long bioCtx = NativeCrypto.create_BIO_OutputStream(os);
        try {
            NativeCrypto.X509_REVOKED_print(bioCtx, mContext);
            return os.toString();
        } finally {
            NativeCrypto.BIO_free(bioCtx);
        }
