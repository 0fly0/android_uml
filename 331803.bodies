class DerOutputStream
!!!2174235.java!!!	DerOutputStream(inout asn1 : ASN1Type, inout object : Object)
        content = object;
        index = -1;
        asn1.setEncodingContent(this);
        encoded = new byte[asn1.getEncodedLength(this)];
        index = 0;
        asn1.encodeASN(this);
!!!2174363.java!!!	encodeChoice(inout choice : ASN1Choice) : void
        ASN1Type type = (ASN1Type) val[index][0];
        content = val[index][1];
        index++;
        type.encodeASN(this);
!!!2174491.java!!!	encodeExplicit(inout explicit : ASN1Explicit) : void
        content = val[index][0];
        length = len[index][0];
        index++;
        explicit.type.encodeASN(this);
!!!2174619.java!!!	encodeSequence(inout sequence : ASN1Sequence) : void
        ASN1Type[] type = sequence.type;

        Object[] values = val[index];
        int[] compLens = len[index];

        index++;
        for (int i = 0; i < type.length; i++) {
            if (values[i] == null) {
                continue;
            }

            content = values[i];
            length = compLens[i];

            type[i].encodeASN(this);
        }
!!!2174747.java!!!	encodeSequenceOf(inout sequenceOf : ASN1SequenceOf) : void
        encodeValueCollection(sequenceOf);
!!!2174875.java!!!	encodeSetOf(inout setOf : ASN1SetOf) : void
        encodeValueCollection(setOf);
!!!2175003.java!!!	encodeValueCollection(inout collection : ASN1ValueCollection) : void
        Object[] values = val[index];
        int[] compLens = len[index];

        index++;
        for (int i = 0; i < values.length; i++) {
            content = values[i];
            length = compLens[i];
            collection.type.encodeASN(this);
        }
!!!2175131.java!!!	push(inout lengths : int, inout values : Object) : void
        index++;
        if (index == val.length) {

            int[][] newLen = new int[val.length * 2][];
            System.arraycopy(len, 0, newLen, 0, val.length);
            len = newLen;

            Object[][] newVal = new Object[val.length * 2][];
            System.arraycopy(val, 0, newVal, 0, val.length);
            val = newVal;
        }
        len[index] = lengths;
        val[index] = values;
!!!2175259.java!!!	getChoiceLength(inout choice : ASN1Choice) : void
        int i = choice.getIndex(content);
        content = choice.getObjectToEncode(content);

        Object[] values = new Object[] { choice.type[i], content };

        push(null, values);

        choice.type[i].setEncodingContent(this);

        // in case if we get content bytes while getting its length
        // FIXME what about remove it: need redesign
        values[1] = content;
!!!2175387.java!!!	getExplicitLength(inout explicit : ASN1Explicit) : void
        Object[] values = new Object[1];
        int[] compLens = new int[1];

        values[0] = content;

        push(compLens, values);

        explicit.type.setEncodingContent(this);

        // in case if we get content bytes while getting its length
        // FIXME what about remove it: need redesign
        values[0] = content;
        compLens[0] = length;

        length = explicit.type.getEncodedLength(this);
!!!2175515.java!!!	getSequenceLength(inout sequence : ASN1Sequence) : void
        ASN1Type[] type = sequence.type;

        Object[] values = new Object[type.length];
        int[] compLens = new int[type.length];

        sequence.getValues(content, values);

        push(compLens, values);

        int seqLen = 0;
        for (int i = 0; i < type.length; i++) {
            // check optional types
            if (values[i] == null) {
                if (sequence.OPTIONAL[i]) {
                    continue;
                } else {
                    throw new RuntimeException();//FIXME type & message
                }
            }

            if (Objects.equal(sequence.DEFAULT[i], values[i])) {
                values[i] = null;
                continue;
            }

            content = values[i];

            type[i].setEncodingContent(this);

            compLens[i] = length;

            // in case if we get content bytes while getting its length
            // FIXME what about remove it: need redesign
            values[i] = content;

            seqLen += type[i].getEncodedLength(this);
        }
        length = seqLen;
!!!2175643.java!!!	getSequenceOfLength(inout sequence : ASN1SequenceOf) : void
        getValueOfLength(sequence);
!!!2175771.java!!!	getSetOfLength(inout setOf : ASN1SetOf) : void
        getValueOfLength(setOf);
!!!2175899.java!!!	getValueOfLength(inout collection : ASN1ValueCollection) : void
        //FIXME what about another way?
        Object[] cv = collection.getValues(content).toArray();

        Object[] values = new Object[cv.length];
        int[] compLens = new int[values.length];

        push(compLens, values);
        int seqLen = 0;
        for (int i = 0; i < values.length; i++) {

            content = cv[i];

            collection.type.setEncodingContent(this);

            compLens[i] = length;

            // in case if we get content bytes while getting its length
            // FIXME what about remove it: need redesign
            values[i] = content;

            seqLen += collection.type.getEncodedLength(this);
        }
        length = seqLen;
