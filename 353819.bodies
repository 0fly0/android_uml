class SSLSessionImpl
!!!2504347.java!!!	SSLSessionImpl(inout cipher_suite : CipherSuite, inout secureRandom : SecureRandom)
        creationTime = System.currentTimeMillis();
        lastAccessedTime = creationTime;
        if (cipher_suite == null) {
            this.cipherSuite = CipherSuite.SSL_NULL_WITH_NULL_NULL;
            id = EmptyArray.BYTE;
            isServer = false;
            isValid = false;
        } else {
            this.cipherSuite = cipher_suite;
            id = new byte[32];
            secureRandom.nextBytes(id);
            long time = creationTime / 1000;
            id[28] = (byte) ((time & 0xFF000000) >>> 24);
            id[29] = (byte) ((time & 0x00FF0000) >>> 16);
            id[30] = (byte) ((time & 0x0000FF00) >>> 8);
            id[31] = (byte) ((time & 0x000000FF));
            isServer = true;
        }

!!!2504475.java!!!	SSLSessionImpl(inout secureRandom : SecureRandom)
        this(null, secureRandom);
!!!2504603.java!!!	getApplicationBufferSize() : int
        return SSLRecordProtocol.MAX_DATA_LENGTH;
!!!2504731.java!!!	getCipherSuite() : String
        return cipherSuite.getName();
!!!2504859.java!!!	getCreationTime() : long
        return creationTime;
!!!2504987.java!!!	getId() : byte
        return id;
!!!2505115.java!!!	getLastAccessedTime() : long
        return lastAccessedTime;
!!!2505243.java!!!	getLocalCertificates() : Certificate
        return localCertificates;
!!!2505371.java!!!	getLocalPrincipal() : Principal
        if (localCertificates != null && localCertificates.length > 0) {
            return localCertificates[0].getSubjectX500Principal();
        }
        return null;
!!!2505499.java!!!	getPacketBufferSize() : int
        return SSLRecordProtocol.MAX_SSL_PACKET_SIZE;
!!!2505627.java!!!	getPeerCertificateChain() : X509Certificate
        if (peerCertificates == null) {
            throw new SSLPeerUnverifiedException("No peer certificate");
        }
        javax.security.cert.X509Certificate[] certs = new javax.security.cert.X509Certificate[peerCertificates.length];
        for (int i = 0; i < certs.length; i++) {
            try {
                certs[i] = javax.security.cert.X509Certificate.getInstance(peerCertificates[i]
                        .getEncoded());
            } catch (javax.security.cert.CertificateException ignored) {
            } catch (CertificateEncodingException ignored) {
            }
        }
        return certs;
!!!2505755.java!!!	getPeerCertificates() : Certificate
        if (peerCertificates == null) {
            throw new SSLPeerUnverifiedException("No peer certificate");
        }
        return peerCertificates;
!!!2505883.java!!!	getPeerHost() : String
        return peerHost;
!!!2506011.java!!!	getPeerPort() : int
        return peerPort;
!!!2506139.java!!!	getPeerPrincipal() : Principal
        if (peerCertificates == null) {
            throw new SSLPeerUnverifiedException("No peer certificate");
        }
        return peerCertificates[0].getSubjectX500Principal();
!!!2506267.java!!!	getProtocol() : String
        return (protocol == null) ? "NONE" : protocol.name;
!!!2506395.java!!!	getSessionContext() : SSLSessionContext
        return context;
!!!2506523.java!!!	getValue(inout name : String) : Object
        if (name == null) {
            throw new IllegalArgumentException("name == null");
        }
        return values.get(name);
!!!2506651.java!!!	getValueNames() : String
        return values.keySet().toArray(new String[values.size()]);
!!!2506779.java!!!	invalidate() : void
        isValid = false;
        context = null;
!!!2506907.java!!!	isValid() : boolean
        if (isValid && context != null && context.getSessionTimeout() != 0
                && lastAccessedTime + context.getSessionTimeout() > System.currentTimeMillis()) {
            isValid = false;
        }
        return isValid;
!!!2507035.java!!!	putValue(inout name : String, inout value : Object) : void
        if (name == null || value == null) {
            throw new IllegalArgumentException("name == null || value == null");
        }
        Object old = values.put(name, value);
        if (value instanceof SSLSessionBindingListener) {
            ((SSLSessionBindingListener) value).valueBound(new SSLSessionBindingEvent(this, name));
        }
        if (old instanceof SSLSessionBindingListener) {
            ((SSLSessionBindingListener) old).valueUnbound(new SSLSessionBindingEvent(this, name));
        }

!!!2507163.java!!!	removeValue(inout name : String) : void
        if (name == null) {
            throw new IllegalArgumentException("name == null");
        }
        Object old = values.remove(name);
        if (old instanceof SSLSessionBindingListener) {
            SSLSessionBindingListener listener = (SSLSessionBindingListener) old;
            listener.valueUnbound(new SSLSessionBindingEvent(this, name));
        }
!!!2507291.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!2507419.java!!!	setPeer(inout peerHost : String, in peerPort : int) : void
        this.peerHost = peerHost;
        this.peerPort = peerPort;
