class OpenSSLCipher
!!!2399515.java!!!	OpenSSLCipher(inout mode : Mode, inout padding : Padding)
        this.mode = mode;
        this.padding = padding;
        blockSize = getCipherBlockSize();
!!!2400283.java!!!	supportsVariableSizeKey() : boolean
        return false;
!!!2400411.java!!!	engineSetMode(inout modeStr : String) : void
        final Mode mode;
        try {
            mode = Mode.valueOf(modeStr.toUpperCase(Locale.US));
        } catch (IllegalArgumentException e) {
            NoSuchAlgorithmException newE = new NoSuchAlgorithmException("No such mode: "
                    + modeStr);
            newE.initCause(e);
            throw newE;
        }
        checkSupportedMode(mode);
        this.mode = mode;
!!!2400539.java!!!	engineSetPadding(inout paddingStr : String) : void
        final String paddingStrUpper = paddingStr.toUpperCase(Locale.US);
        final Padding padding;
        try {
            padding = Padding.valueOf(paddingStrUpper);
        } catch (IllegalArgumentException e) {
            NoSuchPaddingException newE = new NoSuchPaddingException("No such padding: "
                    + paddingStr);
            newE.initCause(e);
            throw newE;
        }
        checkSupportedPadding(padding);
        this.padding = padding;
!!!2400667.java!!!	engineGetBlockSize() : int
        return blockSize;
!!!2400795.java!!!	getOutputSize(in inputLen : int) : int
        if (modeBlockSize == 1) {
            return inputLen;
        } else {
            final int buffered = NativeCrypto.get_EVP_CIPHER_CTX_buf_len(cipherCtx.getContext());
            if (padding == Padding.NOPADDING) {
                return buffered + inputLen;
            } else {
                final int totalLen = inputLen + buffered + modeBlockSize;
                return totalLen - (totalLen % modeBlockSize);
            }
        }
!!!2400923.java!!!	engineGetOutputSize(in inputLen : int) : int
        return getOutputSize(inputLen);
!!!2401051.java!!!	engineGetIV() : byte
        return iv;
!!!2401179.java!!!	engineGetParameters() : AlgorithmParameters
        return null;
!!!2401307.java!!!	engineInitInternal(in opmode : int, inout key : Key, inout iv : byte) : void
        if (opmode == Cipher.ENCRYPT_MODE || opmode == Cipher.WRAP_MODE) {
            encrypting = true;
        } else if (opmode == Cipher.DECRYPT_MODE || opmode == Cipher.UNWRAP_MODE) {
            encrypting = false;
        } else {
            throw new InvalidParameterException("Unsupported opmode " + opmode);
        }

        if (!(key instanceof SecretKey)) {
            throw new InvalidKeyException("Only SecretKey is supported");
        }

        final byte[] encodedKey = key.getEncoded();
        if (encodedKey == null) {
            throw new InvalidKeyException("key.getEncoded() == null");
        }

        checkSupportedKeySize(encodedKey.length);

        final long cipherType = NativeCrypto.EVP_get_cipherbyname(getCipherName(encodedKey.length,
                mode));
        if (cipherType == 0) {
            throw new InvalidAlgorithmParameterException("Cannot find name for key length = "
                    + (encodedKey.length * 8) + " and mode = " + mode);
        }

        final int ivLength = NativeCrypto.EVP_CIPHER_iv_length(cipherType);
        if (iv == null) {
            iv = new byte[ivLength];
        } else if (iv.length != ivLength) {
            throw new InvalidAlgorithmParameterException("expected IV length of " + ivLength);
        }

        this.iv = iv;

        if (supportsVariableSizeKey()) {
            NativeCrypto.EVP_CipherInit_ex(cipherCtx.getContext(), cipherType, null, null,
                    encrypting);
            NativeCrypto.EVP_CIPHER_CTX_set_key_length(cipherCtx.getContext(), encodedKey.length);
            NativeCrypto.EVP_CipherInit_ex(cipherCtx.getContext(), 0, encodedKey, iv, encrypting);
        } else {
            NativeCrypto.EVP_CipherInit_ex(cipherCtx.getContext(), cipherType, encodedKey, iv,
                    encrypting);
        }

        // OpenSSL only supports PKCS5 Padding.
        NativeCrypto.EVP_CIPHER_CTX_set_padding(cipherCtx.getContext(),
                padding == Padding.PKCS5PADDING);
        modeBlockSize = NativeCrypto.EVP_CIPHER_CTX_block_size(cipherCtx.getContext());
        calledUpdate = false;
!!!2401435.java!!!	engineInit(in opmode : int, inout key : Key, inout random : SecureRandom) : void
        try {
            engineInitInternal(opmode, key, null);
        } catch (InvalidAlgorithmParameterException e) {
            throw new RuntimeException(e);
        }
!!!2401563.java!!!	engineInit(in opmode : int, inout key : Key, inout params : AlgorithmParameterSpec, inout random : SecureRandom) : void
        final byte[] iv;
        if (params instanceof IvParameterSpec) {
            IvParameterSpec ivParams = (IvParameterSpec) params;
            iv = ivParams.getIV();
        } else {
            iv = null;
        }

        engineInitInternal(opmode, key, iv);
!!!2401691.java!!!	engineInit(in opmode : int, inout key : Key, inout params : AlgorithmParameters, inout random : SecureRandom) : void
        final AlgorithmParameterSpec spec;
        try {
            spec = params.getParameterSpec(IvParameterSpec.class);
        } catch (InvalidParameterSpecException e) {
            throw new InvalidAlgorithmParameterException(e);
        }

        engineInit(opmode, key, spec, random);
!!!2401819.java!!!	updateInternal(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte, in outputOffset : int, in maximumLen : int) : int
        final int intialOutputOffset = outputOffset;

        final int bytesLeft = output.length - outputOffset;
        if (bytesLeft < maximumLen) {
            throw new ShortBufferException("output buffer too small during update: " + bytesLeft
                    + " < " + maximumLen);
        }

        outputOffset += NativeCrypto.EVP_CipherUpdate(cipherCtx.getContext(), output, outputOffset,
                input, inputOffset, inputLen);

        calledUpdate = true;

        return outputOffset - intialOutputOffset;
!!!2401947.java!!!	engineUpdate(inout input : byte, in inputOffset : int, in inputLen : int) : byte
        final int maximumLen = getOutputSize(inputLen);

        /* See how large our output buffer would need to be. */
        final byte[] output;
        if (maximumLen > 0) {
            output = new byte[maximumLen];
        } else {
            output = EmptyArray.BYTE;
        }

        final int bytesWritten;
        try {
            bytesWritten = updateInternal(input, inputOffset, inputLen, output, 0, maximumLen);
        } catch (ShortBufferException e) {
            /* This shouldn't happen. */
            throw new RuntimeException("calculated buffer size was wrong: " + maximumLen);
        }

        if (output.length == bytesWritten) {
            return output;
        } else if (bytesWritten == 0) {
            return EmptyArray.BYTE;
        } else {
            return Arrays.copyOfRange(output, 0, bytesWritten);
        }
!!!2402075.java!!!	engineUpdate(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte, in outputOffset : int) : int
        final int maximumLen = getOutputSize(inputLen);
        return updateInternal(input, inputOffset, inputLen, output, outputOffset, maximumLen);
!!!2402203.java!!!	reset() : void
        NativeCrypto.EVP_CipherInit_ex(cipherCtx.getContext(), 0, null, null, encrypting);
        calledUpdate = false;
!!!2402331.java!!!	doFinalInternal(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte, in outputOffset : int, in maximumLen : int) : int
        /* Remember this so we can tell how many characters were written. */
        final int initialOutputOffset = outputOffset;

        if (inputLen > 0) {
            final int updateBytesWritten = updateInternal(input, inputOffset, inputLen, output,
                    outputOffset, maximumLen);
            outputOffset += updateBytesWritten;
            maximumLen -= updateBytesWritten;
        }

        /*
         * If we're decrypting and haven't had any input, we should return null.
         * Otherwise OpenSSL will complain if we call final.
         */
        if (!encrypting && !calledUpdate) {
            return 0;
        }

        /* Allow OpenSSL to pad if necessary and clean up state. */
        final int bytesLeft = output.length - outputOffset;
        final int writtenBytes;
        if (bytesLeft >= maximumLen) {
            writtenBytes = NativeCrypto.EVP_CipherFinal_ex(cipherCtx.getContext(), output,
                    outputOffset);
        } else {
            final byte[] lastBlock = new byte[maximumLen];
            writtenBytes = NativeCrypto.EVP_CipherFinal_ex(cipherCtx.getContext(), lastBlock, 0);
            if (writtenBytes > bytesLeft) {
                throw new ShortBufferException("buffer is too short: " + writtenBytes + " > "
                        + bytesLeft);
            } else if (writtenBytes > 0) {
                System.arraycopy(lastBlock, 0, output, outputOffset, writtenBytes);
            }
        }
        outputOffset += writtenBytes;

        reset();

        return outputOffset - initialOutputOffset;
!!!2402459.java!!!	engineDoFinal(inout input : byte, in inputOffset : int, in inputLen : int) : byte
        /*
         * Other implementations return null if we've never called update()
         * while decrypting.
         */
        if (!encrypting && !calledUpdate && inputLen == 0) {
            reset();
            return null;
        }

        final int maximumLen = getOutputSize(inputLen);
        /* Assume that we'll output exactly on a byte boundary. */
        final byte[] output = new byte[maximumLen];
        final int bytesWritten;
        try {
            bytesWritten = doFinalInternal(input, inputOffset, inputLen, output, 0, maximumLen);
        } catch (ShortBufferException e) {
            /* This should not happen since we sized our own buffer. */
            throw new RuntimeException("our calculated buffer was too small", e);
        }

        if (bytesWritten == output.length) {
            return output;
        } else if (bytesWritten == 0) {
            return EmptyArray.BYTE;
        } else {
            return Arrays.copyOfRange(output, 0, bytesWritten);
        }
!!!2402587.java!!!	engineDoFinal(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte, in outputOffset : int) : int
        if (output == null) {
            throw new NullPointerException("output == null");
        }

        final int maximumLen = getOutputSize(inputLen);
        return doFinalInternal(input, inputOffset, inputLen, output, outputOffset, maximumLen);
!!!2402715.java!!!	engineWrap(inout key : Key) : byte
        try {
            byte[] encoded = key.getEncoded();
            return engineDoFinal(encoded, 0, encoded.length);
        } catch (BadPaddingException e) {
            IllegalBlockSizeException newE = new IllegalBlockSizeException();
            newE.initCause(e);
            throw newE;
        }
!!!2402843.java!!!	engineUnwrap(inout wrappedKey : byte, inout wrappedKeyAlgorithm : String, in wrappedKeyType : int) : Key
        try {
            byte[] encoded = engineDoFinal(wrappedKey, 0, wrappedKey.length);
            if (wrappedKeyType == Cipher.PUBLIC_KEY) {
                KeyFactory keyFactory = KeyFactory.getInstance(wrappedKeyAlgorithm);
                return keyFactory.generatePublic(new X509EncodedKeySpec(encoded));
            } else if (wrappedKeyType == Cipher.PRIVATE_KEY) {
                KeyFactory keyFactory = KeyFactory.getInstance(wrappedKeyAlgorithm);
                return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(encoded));
            } else if (wrappedKeyType == Cipher.SECRET_KEY) {
                return new SecretKeySpec(encoded, wrappedKeyAlgorithm);
            } else {
                throw new UnsupportedOperationException("wrappedKeyType == " + wrappedKeyType);
            }
        } catch (IllegalBlockSizeException e) {
            throw new InvalidKeyException(e);
        } catch (BadPaddingException e) {
            throw new InvalidKeyException(e);
        } catch (InvalidKeySpecException e) {
            throw new InvalidKeyException(e);
        }
