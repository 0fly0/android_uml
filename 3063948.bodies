class TrackElementParser
!!!12670732.java!!!	parseStartTag(inout parser : XmlPullParser) : ElementBase
            mElement = new TrackElement();

            String value;
            try {
                // Required fields.

                // This is required but it might be missed. Calculate this manually.
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_INDEX);
                if (value != null) {
                    mElement.setIndex(Integer.parseInt(value));
                }

                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_BITRATE);
                if (value != null) {
                    mElement.setBitrate(Integer.parseInt(value));
                } else {
                    throw new SmoothStreamingMissingFieldException(
                            SmoothStreamingConstants.KEY_BITRATE);
                }

                // Evaluate[video] this later.
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_MAX_WIDTH);
                if (value != null) {
                    mElement.setMaxWidth(Integer.parseInt(value));
                }

                // Evaluate[video] this later.
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_MAX_HEIGHT);
                if (value != null) {
                    mElement.setMaxHeight(Integer.parseInt(value));
                }

                // Evaluate[video|audio] this later.
                value = parser.getAttributeValue(
                        null, SmoothStreamingConstants.KEY_CODEC_PRIVATE_DATA);
                if (value != null) {
                    mElement.setCodecPrivateData(value);
                }

                // Evaluate[audio] this later.
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_SAMPLING_RATE);
                if (value != null) {
                    mElement.setSamplingRate(Integer.parseInt(value));
                }

                // Evaluate[audio] this later.
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_CHANNELS);
                if (value != null) {
                    mElement.setChannels(Integer.parseInt(value));
                }

                // Evaluate[audio] this later.
                value = parser.getAttributeValue(
                        null, SmoothStreamingConstants.KEY_BITS_PER_SAMPLE);
                if (value != null) {
                    mElement.setBitPerSample(Integer.parseInt(value));
                }

                // Evaluate[audio] this later.
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_PACKET_SIZE);
                if (value != null) {
                    mElement.setPacketSize(Integer.parseInt(value));
                }

                // Evaluate[audio] this later.
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_AUDIO_TAG);
                if (value != null) {
                    mElement.setAudioTag(Integer.parseInt(value));
                }

                // Evaluate[audio] this later.
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_FOUR_CC);
                if (value != null) {
                    mElement.setFourCC(value);
                }

                value = parser.getAttributeValue(
                        null, SmoothStreamingConstants.KEY_NAL_UNIT_LENGTH_FIELD);
                if (value != null) {
                    mElement.setNalUnitLengthField(Integer.parseInt(value));
                }
            } catch (NumberFormatException e) {
                throw new SmoothStreamingParseException(e);
            }

            return mElement;
!!!12670860.java!!!	parseText(inout parser : XmlPullParser) : void
            mElement.setContent(parser.getText());
!!!12670988.java!!!	parseEndTag(inout parser : XmlPullParser) : ElementBase
            return mElement;
