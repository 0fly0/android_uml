class Device
!!!13221004.java!!!	Device(in packageName : String, in id : String)
        mPackageName = packageName;
        validateId(id);
        mId = id;
        mType = DeviceType.GENERIC;
        mLabel = NO_LABEL;
        mSummary = NO_SUMMARY;
        mManufacturer = NO_MANUFACTURER;
        mModel = NO_MODEL;
        mIsDefault = false;
        mDisabled = false;
        mCapabilities = new Capabilities();
!!!13221132.java!!!	online(inout context : Context, inout device : Device) : void
        DeviceLocator.reportDevice(context, device, true /* online */);
!!!13221260.java!!!	offline(inout context : Context, in id : String) : void
        Device device = new Device(context.getPackageName(), id);
        DeviceLocator.reportDevice(context, device, false /* offline */);
!!!13221388.java!!!	getPackageName() : String
        return mPackageName;
!!!13221516.java!!!	getId() : String
        return mId;
!!!13221644.java!!!	getType() : DeviceType
        return mType;
!!!13221772.java!!!	setType(inout type : DeviceType) : void
        mType = type;
!!!13221900.java!!!	getLabel() : String
        return mLabel;
!!!13222028.java!!!	setLabel(in label : String) : void
        mLabel = label;
!!!13222156.java!!!	getUserLabel() : String
        return mUserLabel;
!!!13222284.java!!!	setUserLabel(in userLabel : String) : void
        mUserLabel = userLabel;
!!!13222412.java!!!	getDisplayLabel() : String
        if (!TextUtils.isEmpty(mUserLabel)) {
            return mUserLabel;
        }
        return mLabel;
!!!13222540.java!!!	getSummary() : String
        return mSummary;
!!!13222668.java!!!	setSummary(in summary : String) : void
        mSummary = summary;
!!!13222796.java!!!	getManufacturer() : String
        return mManufacturer;
!!!13222924.java!!!	setManufacturer(in manufacturer : String) : void
        mManufacturer = manufacturer;
!!!13223052.java!!!	getManufacturerUrl() : String
        return mManufacturerUrl;
!!!13223180.java!!!	setManufacturerUrl(in manufacturerUrl : String) : void
        mManufacturerUrl = manufacturerUrl;
!!!13223308.java!!!	getModel() : String
        return mModel;
!!!13223436.java!!!	setModel(in model : String) : void
        mModel = model;
!!!13223564.java!!!	isDefault() : boolean
        return mIsDefault;
!!!13223692.java!!!	setIsDefault(inout isDefault : boolean) : void
        mIsDefault = isDefault;
!!!13223820.java!!!	isDisabled() : boolean
        return mDisabled;
!!!13223948.java!!!	setDisabled(inout disabled : boolean) : void
        mDisabled = disabled;
!!!13224076.java!!!	hasCapability(inout capability : Capability) : boolean
        return mCapabilities.hasCapability(capability);
!!!13224204.java!!!	hasCapability(inout capability : Capability, inout defaultValue : boolean) : boolean
        return mCapabilities.hasCapability(capability, defaultValue);
!!!13224332.java!!!	hasCapabilities(inout  : Capability...capabilities) : boolean
        for (int i = 0; i < capabilities.length; ++i) {
            if (!hasCapability(capabilities[i])) {
                return false;
            }
        }
        return true;
!!!13224460.java!!!	getCapabilities() : Capabilities
        return mCapabilities;
!!!13224588.java!!!	setCapability(inout capability : Capability, inout enabled : boolean) : void
        mCapabilities.setCapability(capability, enabled);
!!!13224716.java!!!	getCapabilityIntValue(inout capability : Capability) : int
        return mCapabilities.getCapabilityIntValue(capability);
!!!13224844.java!!!	getCapabilityStringValue(inout capability : Capability) : String
        return mCapabilities.getCapabilityStringValue(capability);
!!!13224972.java!!!	getCapabilityStringArrayValue(inout capability : Capability) : String
        return mCapabilities.getCapabilityStringArrayValue(capability);
!!!13225100.java!!!	getIcon() : Bitmap
        return mIcon;
!!!13225228.java!!!	setIcon(inout icon : Bitmap) : void
        mIcon = icon;
!!!13225356.java!!!	equals(inout obj : Object) : boolean
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Device)) {
            return false;
        }
        Device that = (Device) obj;
        if (mPackageName == null && that.mPackageName != null) {
            return false;
        }
        if (mId == null && that.mId != null) {
            return false;
        }
        return mPackageName.equals(that.mPackageName) &&
                mId.equals(that.mId);
!!!13225484.java!!!	hashCode() : int
        int result = 7;
        result = result * 31 +
                (mPackageName != null ? mPackageName.hashCode() : 0);
        result = result * 31 + (mId != null ? mId.hashCode() : 0);
        return result;
!!!13225612.java!!!	toString() : String
        return mId;
!!!13225740.java!!!	describeContents() : int
        return 0;
!!!13225868.java!!!	Device(inout parcel : Parcel)
        // Use readValue() which handles nulls
        mPackageName = (String) parcel.readValue(null);
        mId = (String) parcel.readValue(null);
        validateId(mId);
        mType = DeviceType.safeValueOf((String) parcel.readValue(null));
        mLabel = (String) parcel.readValue(null);
        mUserLabel = (String) parcel.readValue(null);
        mSummary = (String) parcel.readValue(null);
        mManufacturer = (String) parcel.readValue(null);
        mManufacturerUrl = (String) parcel.readValue(null);
        mModel = (String) parcel.readValue(null);
        mIsDefault = parcel.readInt() == 1 ? true : false;
        mDisabled = parcel.readInt() == 1 ? true : false;
        mCapabilities = parcel.readParcelable(
                Capabilities.class.getClassLoader());
        if (parcel.readInt() == 1) {
            mIcon = Bitmap.CREATOR.createFromParcel(parcel);
        }
!!!13225996.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        // Use writeValue() which handles nulls
        dest.writeValue(mPackageName);
        dest.writeValue(mId);
        dest.writeValue(mType.name());
        dest.writeValue(mLabel);
        dest.writeValue(mUserLabel);
        dest.writeValue(mSummary);
        dest.writeValue(mManufacturer);
        dest.writeValue(mManufacturerUrl);
        dest.writeValue(mModel);
        dest.writeInt(mIsDefault ? 1 : 0);
        dest.writeInt(mDisabled ? 1 : 0);
        dest.writeParcelable(mCapabilities, 0);
        dest.writeInt(mIcon != null ? 1 : 0);
        if (mIcon != null) {
            mIcon.writeToParcel(dest, 0);
        }
!!!13228300.java!!!	compareTo(inout another : Device) : int
        if (another == null) {
            return -1;
        }
        int value = 0;

        // Internal devices should be at the top.
        if (hasCapability(Capability.IS_INTERNAL)) {
            if (!another.hasCapability(Capability.IS_INTERNAL)) {
                value = -1;
            }
        } else if (another.hasCapability(Capability.IS_INTERNAL)) {
            value = 1;
        }
        if (value != 0) {
            return value;
        }

        // Passthrough devices should go to bottom.
        if (hasCapability(Capability.IS_PASSTHROUGH_ONLY)) {
            if (!another.hasCapability(Capability.IS_PASSTHROUGH_ONLY)) {
                value = 1;
            }
        } else if (another.hasCapability(Capability.IS_PASSTHROUGH_ONLY)) {
            value = -1;
        }
        if (value != 0) {
            return value;
        }

        // Then check label.
        value = getLabel().compareTo(another.getLabel());
        if (value != 0) {
            return value;
        }
        // If that's still the same, check the summary.
        value = getSummary().compareTo(another.getSummary());
        if (value != 0) {
            return value;
        }
        // If that's still the same, check the manufacturer.
        value = getManufacturer().compareTo(another.getManufacturer());
        if (value != 0) {
            return value;
        }
        // If that's still the same, check the model.
        value = getModel().compareTo(another.getModel());
        if (value != 0) {
            return value;
        }
        // Final tie breaker: use the ID.
        value = getId().compareTo(another.getId());
        return value;
!!!13228428.java!!!	validateId(in id : String) : void
        if (id == null) {
            throw new IllegalArgumentException("Invalid device ID: null");
        }
        for (int i = 0; i < id.length(); ++i) {
            char c = id.charAt(i);
            if (!(Character.isLetterOrDigit(c) || (c == '_') || (c == '.') || (c == '-'))) {
                throw new IllegalArgumentException("Invalid device ID: " + id);
            }
        }
