class GeocoderProxy
!!!8528012.java!!!	createAndBind(inout context : Context, inout initialPackageNames : List<String>, in userId : int) : GeocoderProxy
        GeocoderProxy proxy = new GeocoderProxy(context, initialPackageNames, userId);
        if (proxy.bind()) {
            return proxy;
        } else {
            return null;
        }
!!!8528140.java!!!	GeocoderProxy(inout context : Context, inout initialPackageNames : List<String>, in userId : int)
        mContext = context;

        mServiceWatcher = new ServiceWatcher(mContext, TAG, SERVICE_ACTION, initialPackageNames,
                null, null, userId);
!!!8528268.java!!!	bind() : boolean
        return mServiceWatcher.start();
!!!8528396.java!!!	getService() : IGeocodeProvider
        return IGeocodeProvider.Stub.asInterface(mServiceWatcher.getBinder());
!!!8528524.java!!!	getConnectedPackageName() : String
        return mServiceWatcher.getBestPackageName();
!!!8528652.java!!!	getFromLocation(in latitude : double, in longitude : double, in maxResults : int, inout params : GeocoderParams, inout addrs : List<Address>) : String
        IGeocodeProvider provider = getService();
        if (provider != null) {
            try {
                return provider.getFromLocation(latitude, longitude, maxResults, params, addrs);
            } catch (RemoteException e) {
                Log.w(TAG, e);
            }
        }
        return "Service not Available";
!!!8528780.java!!!	getFromLocationName(in locationName : String, in lowerLeftLatitude : double, in lowerLeftLongitude : double, in upperRightLatitude : double, in upperRightLongitude : double, in maxResults : int, inout params : GeocoderParams, inout addrs : List<Address>) : String
        IGeocodeProvider provider = getService();
        if (provider != null) {
            try {
                return provider.getFromLocationName(locationName, lowerLeftLatitude,
                        lowerLeftLongitude, upperRightLatitude, upperRightLongitude,
                        maxResults, params, addrs);
            } catch (RemoteException e) {
                Log.w(TAG, e);
            }
        }
        return "Service not Available";
