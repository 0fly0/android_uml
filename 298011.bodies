class SecureSet
!!!1858203.java!!!	SecureSet(inout perm : AuthPermission)
            permission = perm;
            elements = new LinkedList<SST>();
!!!1858331.java!!!	SecureSet(inout perm : AuthPermission, inout s : Collection)
            this(perm);

            // Subject's constructor receives a Set, we can trusts if a set is from bootclasspath,
            // and not to check whether it contains duplicates or not
            boolean trust = s.getClass().getClassLoader() == null;

            for (SST o : s) {
                verifyElement(o);
                if (trust || !elements.contains(o)) {
                    elements.add(o);
                }
            }
!!!1858459.java!!!	verifyElement(inout o : Object) : void

            if (o == null) {
                throw new NullPointerException("o == null");
            }
            if (permission == _PRINCIPALS && !(Principal.class.isAssignableFrom(o.getClass()))) {
                throw new IllegalArgumentException("Element is not instance of java.security.Principal");
            }
!!!1858587.java!!!	add(inout o : SST) : boolean

            verifyElement(o);

            checkState();

            if (!elements.contains(o)) {
                elements.add(o);
                return true;
            }
            return false;
!!!1858715.java!!!	iterator() : Iterator

            if (permission == _PRIVATE_CREDENTIALS) {
                /*
                 * private credential set requires iterator with additional
                 * security check (PrivateCredentialPermission)
                 */
                return new SecureIterator(elements.iterator()) {
                    /*
                     * checks permission to access next private credential moves
                     * to the next element even SecurityException was thrown
                     */
                    @Override
                    public SST next() {
                        SST obj = iterator.next();
                        return obj;
                    }
                };
            }
            return new SecureIterator(elements.iterator());
!!!1858843.java!!!	retainAll(inout c : Collection) : boolean

            if (c == null) {
                throw new NullPointerException("c == null");
            }
            return super.retainAll(c);
!!!1858971.java!!!	size() : int
            return elements.size();
!!!1859099.java!!!	get(in c : Class) : Set

            if (c == null) {
                throw new NullPointerException("c == null");
            }

            AbstractSet<E> s = new AbstractSet<E>() {
                private LinkedList<E> elements = new LinkedList<E>();

                @Override
                public boolean add(E o) {
                    if (!c.isAssignableFrom(o.getClass())) {
                        throw new IllegalArgumentException("Invalid type: " + o.getClass());
                    }

                    if (elements.contains(o)) {
                        return false;
                    }
                    elements.add(o);
                    return true;
                }

                @Override
                public Iterator<E> iterator() {
                    return elements.iterator();
                }

                @Override
                public boolean retainAll(Collection<?> c) {

                    if (c == null) {
                        throw new NullPointerException("c == null");
                    }
                    return super.retainAll(c);
                }

                @Override
                public int size() {
                    return elements.size();
                }
            };

            // FIXME must have permissions for requested priv. credentials
            for (SST o : this) {
                if (c.isAssignableFrom(o.getClass())) {
                    s.add(c.cast(o));
                }
            }
            return s;
!!!1859227.java!!!	readObject(inout in : ObjectInputStream) : void
            in.defaultReadObject();

            switch (setType) {
            case SET_Principal:
                permission = _PRINCIPALS;
                break;
            case SET_PrivCred:
                permission = _PRIVATE_CREDENTIALS;
                break;
            case SET_PubCred:
                permission = _PUBLIC_CREDENTIALS;
                break;
            default:
                throw new IllegalArgumentException();
            }

            for (SST element : elements) {
                verifyElement(element);
            }
!!!1859355.java!!!	writeObject(inout out : ObjectOutputStream) : void

            if (permission == _PRIVATE_CREDENTIALS) {
                setType = SET_PrivCred;
            } else if (permission == _PRINCIPALS) {
                setType = SET_Principal;
            } else {
                setType = SET_PubCred;
            }

            out.defaultWriteObject();
