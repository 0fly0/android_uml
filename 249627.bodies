class Timer
!!!1383451.java!!!	nextId() : long
        return timerId++;
!!!1383579.java!!!	Timer(inout name : String, inout isDaemon : boolean)
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        this.impl = new TimerImpl(name, isDaemon);
        this.finalizer = new FinalizerHelper(impl);
!!!1383707.java!!!	Timer(inout name : String)
        this(name, false);
!!!1383835.java!!!	Timer(inout isDaemon : boolean)
        this("Timer-" + Timer.nextId(), isDaemon);
!!!1383963.java!!!	Timer()
        this(false);
!!!1384091.java!!!	cancel() : void
        impl.cancel();
!!!1384219.java!!!	purge() : int
        synchronized (impl) {
            return impl.purge();
        }
!!!1384347.java!!!	schedule(inout task : TimerTask, inout when : Date) : void
        if (when.getTime() < 0) {
            throw new IllegalArgumentException("when < 0: " + when.getTime());
        }
        long delay = when.getTime() - System.currentTimeMillis();
        scheduleImpl(task, delay < 0 ? 0 : delay, -1, false);
!!!1384475.java!!!	schedule(inout task : TimerTask, in delay : long) : void
        if (delay < 0) {
            throw new IllegalArgumentException("delay < 0: " + delay);
        }
        scheduleImpl(task, delay, -1, false);
!!!1384603.java!!!	schedule(inout task : TimerTask, in delay : long, in period : long) : void
        if (delay < 0 || period <= 0) {
            throw new IllegalArgumentException();
        }
        scheduleImpl(task, delay, period, false);
!!!1384731.java!!!	schedule(inout task : TimerTask, inout when : Date, in period : long) : void
        if (period <= 0 || when.getTime() < 0) {
            throw new IllegalArgumentException();
        }
        long delay = when.getTime() - System.currentTimeMillis();
        scheduleImpl(task, delay < 0 ? 0 : delay, period, false);
!!!1384859.java!!!	scheduleAtFixedRate(inout task : TimerTask, in delay : long, in period : long) : void
        if (delay < 0 || period <= 0) {
            throw new IllegalArgumentException();
        }
        scheduleImpl(task, delay, period, true);
!!!1384987.java!!!	scheduleAtFixedRate(inout task : TimerTask, inout when : Date, in period : long) : void
        if (period <= 0 || when.getTime() < 0) {
            throw new IllegalArgumentException();
        }
        long delay = when.getTime() - System.currentTimeMillis();
        scheduleImpl(task, delay, period, true);
!!!1385115.java!!!	scheduleImpl(inout task : TimerTask, in delay : long, in period : long, inout fixed : boolean) : void
        synchronized (impl) {
            if (impl.cancelled) {
                throw new IllegalStateException("Timer was canceled");
            }

            long when = delay + System.currentTimeMillis();

            if (when < 0) {
                throw new IllegalArgumentException("Illegal delay to start the TimerTask: " + when);
            }

            synchronized (task.lock) {
                if (task.isScheduled()) {
                    throw new IllegalStateException("TimerTask is scheduled already");
                }

                if (task.cancelled) {
                    throw new IllegalStateException("TimerTask is canceled");
                }

                task.when = when;
                task.period = period;
                task.fixedRate = fixed;
            }

            // insert the newTask into queue
            impl.insertTask(task);
        }
