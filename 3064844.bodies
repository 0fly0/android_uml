class SmoothStreamingSampleReformatter
!!!12687500.java!!!	SmoothStreamingSampleReformatter(inout streamElement : StreamElement)
        this.mStreamElement = streamElement;
!!!12687628.java!!!	reformatSamples(inout track : TrackInfo, inout rawBuffer : ByteBuffer, in fragmentIndex : int, in qualityLevel : int) : SmoothStreamSample
        StreamFragmentElement fragment = mStreamElement.getFragments().get(fragmentIndex);

        long fragmentStartTime = fragment.getFragmentStartTime();
        long timeScale = mStreamElement.getTimeScale();
        long elapsed = 0;
        List<SmoothStreamSample> newSamples = new ArrayList<SmoothStreamSample>(
                track.mSamples.size());
        for (SampleInfo sample : track.mSamples) {
            SmoothStreamSample newSample = SmoothStreamSample.create(sample.mSize);

            // copy buffer.
            rawBuffer.position(sample.mPosition);
            rawBuffer.get(newSample.buffer.array(), 0, sample.mSize);

            newSample.cryptoInfo = sample.mCryptoInfo;

            // calculate start time and duration.
            newSample.startTime = SmoothStreamingUtil.convertTimeInUs(
                    fragmentStartTime + elapsed + sample.mCompositionTimeOffset, timeScale);

            newSample.duration = SmoothStreamingUtil.convertTimeInUs(
                    sample.mDuration, timeScale);
            elapsed += sample.mDuration;

            newSamples.add(newSample);
        }

        return newSamples;
!!!12687756.java!!!	createStartFrame(in currentTrack : int, in fragmentIndex : int) : SmoothStreamSample
        return null;
!!!12688908.java!!!	create(inout s : StreamElement) : SmoothStreamingSampleReformatter
        SmoothStreamingConstants.SourceType type = SmoothStreamingConstants.SourceType
                .fromFourcc(s.getTracks().get(0).getFourCC());
        switch (type) {
            case AVC1:
            case H264:
            case DAVC:
                return new AVCReformatter(s);
            case MPEG2ADTS:
                return new MPEG2ADTSReformatter(s);
            default:
                return new SmoothStreamingSampleReformatter(s);
        }
