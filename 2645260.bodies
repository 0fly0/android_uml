class OmxAmpVP8Port
!!!11130764.cpp!!!	OmxAmpVP8Port(in index : OMX_U32, in dir : OMX_DIRTYPE)
  mDefinition.nPortIndex = index;
  mDefinition.eDir = dir;
  mDefinition.eDomain = OMX_PortDomainVideo;
  getVideoDefinition().eCompressionFormat =
      static_cast<OMX_VIDEO_CODINGTYPE>(OMX_VIDEO_CodingVP8);
  getVideoDefinition().eColorFormat = OMX_COLOR_FormatUnused;
  getVideoDefinition().nFrameWidth = 176;
  getVideoDefinition().nFrameHeight = 144;
  getVideoDefinition().nBitrate = 64000;
  getVideoDefinition().xFramerate = 15<<16;
  updateDomainParameter();
  mFormatHeadSize = sizeof(MRVL_COMMON_PACKAGE_Hdr);
  pVP8Hdr = static_cast<MRVL_COMMON_PACKAGE_Hdr *>(kdMalloc(mFormatHeadSize));
  pVP8Hdr->start_code_1 = 0;
  pVP8Hdr->start_code_2 = 1;
  pVP8Hdr->packet_type = 0x12;
  pVP8Hdr->reserved = 0;
  pVP8Hdr->marker_byte_1 = 0x88;
  pVP8Hdr->marker_byte_2 = 0x88;
  pVP8Hdr->marker_byte_3 = 0x88;
  pVP8Hdr->marker_byte_4 = 0x88;
!!!11130892.cpp!!!	~OmxAmpVP8Port()
  if (NULL != pVP8Hdr) {
    kdFree(pVP8Hdr);
    pVP8Hdr = NULL;
  }
!!!11131020.cpp!!!	formatEsData(inout header : OMX_BUFFERHEADERTYPE, in isPadding : OMX_BOOL) : void
  OMX_U32 length = header->nFilledLen;
  pVP8Hdr->packet_payload_len_msb = SWAPSHORT(length >> 16);
  pVP8Hdr->packet_payload_len_lsb = SWAPSHORT(length & 0xffff);
  OMX_U8 *src = header->pBuffer + header->nOffset;
  kdMemmove(src + mFormatHeadSize, src, length);
  length += mFormatHeadSize;
  if (isPadding) {
    header->nFilledLen = (length + kVP8PaddingLen - 1) & (~(kVP8PaddingLen - 1));
  } else {
    header->nFilledLen = length;
  }
  OMX_U32 padding_size = header->nFilledLen - length;
  pVP8Hdr->packet_padding_len = SWAPSHORT(padding_size & 0xffff);
  kdMemcpy(src, reinterpret_cast<OMX_U8 *>(pVP8Hdr), mFormatHeadSize);
  if (0 != padding_size) {
    kdMemset(src + length, 0x88, padding_size);
  }
  OMX_LOGV("filled %ld, padding %u", header->nFilledLen, padding_size);
