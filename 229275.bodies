class DateFormatSymbols
!!!1120539.java!!!	internalZoneStrings() : String
        if (zoneStrings == null) {
            zoneStrings = TimeZoneNames.getZoneStrings(locale);
        }
        return zoneStrings;
!!!1120667.java!!!	DateFormatSymbols()
        this(Locale.getDefault());
!!!1120795.java!!!	DateFormatSymbols(inout locale : Locale)
        this.locale = locale;
        this.localPatternChars = SimpleDateFormat.PATTERN_CHARS;

        this.localeData = LocaleData.get(locale);
        this.ampms = localeData.amPm;
        this.eras = localeData.eras;
        this.months = localeData.longMonthNames;
        this.shortMonths = localeData.shortMonthNames;
        this.weekdays = localeData.longWeekdayNames;
        this.shortWeekdays = localeData.shortWeekdayNames;
!!!1120923.java!!!	getInstance() : DateFormatSymbols
        return getInstance(Locale.getDefault());
!!!1121051.java!!!	getInstance(inout locale : Locale) : DateFormatSymbols
        if (locale == null) {
            throw new NullPointerException("locale == null");
        }
        return new DateFormatSymbols(locale);
!!!1121179.java!!!	getAvailableLocales() : Locale
        return ICU.getAvailableDateFormatSymbolsLocales();
!!!1121307.java!!!	readObject(inout ois : ObjectInputStream) : void
        ois.defaultReadObject();
        this.localeData = LocaleData.get(locale);
!!!1121435.java!!!	writeObject(inout oos : ObjectOutputStream) : void
        internalZoneStrings();
        oos.defaultWriteObject();
!!!1121563.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }
!!!1121691.java!!!	equals(inout object : Object) : boolean
        if (this == object) {
            return true;
        }
        if (!(object instanceof DateFormatSymbols)) {
            return false;
        }
        DateFormatSymbols rhs = (DateFormatSymbols) object;
        return localPatternChars.equals(rhs.localPatternChars) &&
                Arrays.equals(ampms, rhs.ampms) &&
                Arrays.equals(eras, rhs.eras) &&
                Arrays.equals(months, rhs.months) &&
                Arrays.equals(shortMonths, rhs.shortMonths) &&
                Arrays.equals(shortWeekdays, rhs.shortWeekdays) &&
                Arrays.equals(weekdays, rhs.weekdays) &&
                timeZoneStringsEqual(this, rhs);
!!!1121819.java!!!	timeZoneStringsEqual(inout lhs : DateFormatSymbols, inout rhs : DateFormatSymbols) : boolean
        // Quick check that may keep us from having to load the zone strings.
        // Note that different locales may have the same strings, so the opposite check isn't valid.
        if (lhs.zoneStrings == null && rhs.zoneStrings == null && lhs.locale.equals(rhs.locale)) {
            return true;
        }
        // Make sure zone strings are loaded, then check.
        return Arrays.deepEquals(lhs.internalZoneStrings(), rhs.internalZoneStrings());
!!!1121947.java!!!	toString() : String
        // 'locale' isn't part of the externally-visible state.
        // 'zoneStrings' is so large, we just print a representative value.
        return getClass().getName() +
                "[amPmStrings=" + Arrays.toString(ampms) +
                ",customZoneStrings=" + customZoneStrings +
                ",eras=" + Arrays.toString(eras) +
                ",localPatternChars=" + localPatternChars +
                ",months=" + Arrays.toString(months) +
                ",shortMonths=" + Arrays.toString(shortMonths) +
                ",shortWeekdays=" + Arrays.toString(shortWeekdays) +
                ",weekdays=" + Arrays.toString(weekdays) +
                ",zoneStrings=[" + Arrays.toString(internalZoneStrings()[0]) + "...]" +
                "]";
!!!1122075.java!!!	getAmPmStrings() : String
        return ampms.clone();
!!!1122203.java!!!	getEras() : String
        return eras.clone();
!!!1122331.java!!!	getLocalPatternChars() : String
        return localPatternChars;
!!!1122459.java!!!	getMonths() : String
        return months.clone();
!!!1122587.java!!!	getShortMonths() : String
        return shortMonths.clone();
!!!1122715.java!!!	getShortWeekdays() : String
        return shortWeekdays.clone();
!!!1122843.java!!!	getWeekdays() : String
        return weekdays.clone();
!!!1122971.java!!!	getZoneStrings() : String
        String[][] result = clone2dStringArray(internalZoneStrings());
        // If icu4c doesn't have a name, our array contains a null. TimeZone.getDisplayName
        // knows how to format GMT offsets (and, unlike icu4c, has accurate data). http://b/8128460.
        for (String[] zone : result) {
            String id = zone[0];
            if (zone[1] == null) {
                zone[1] = TimeZone.getTimeZone(id).getDisplayName(false, TimeZone.LONG, locale);
            }
            if (zone[2] == null) {
                zone[2] = TimeZone.getTimeZone(id).getDisplayName(false, TimeZone.SHORT, locale);
            }
            if (zone[3] == null) {
                zone[3] = TimeZone.getTimeZone(id).getDisplayName(true, TimeZone.LONG, locale);
            }
            if (zone[4] == null) {
                zone[4] = TimeZone.getTimeZone(id).getDisplayName(true, TimeZone.SHORT, locale);
            }
        }
        return result;
!!!1123099.java!!!	clone2dStringArray(inout array : String) : String
        String[][] result = new String[array.length][];
        for (int i = 0; i < array.length; ++i) {
            result[i] = array[i].clone();
        }
        return result;
!!!1123227.java!!!	hashCode() : int
        String[][] zoneStrings = internalZoneStrings();
        int hashCode;
        hashCode = localPatternChars.hashCode();
        for (String element : ampms) {
            hashCode += element.hashCode();
        }
        for (String element : eras) {
            hashCode += element.hashCode();
        }
        for (String element : months) {
            hashCode += element.hashCode();
        }
        for (String element : shortMonths) {
            hashCode += element.hashCode();
        }
        for (String element : shortWeekdays) {
            hashCode += element.hashCode();
        }
        for (String element : weekdays) {
            hashCode += element.hashCode();
        }
        for (String[] element : zoneStrings) {
            for (int j = 0; j < element.length; j++) {
                if (element[j] != null) {
                    hashCode += element[j].hashCode();
                }
            }
        }
        return hashCode;
!!!1123355.java!!!	setAmPmStrings(inout data : String) : void
        ampms = data.clone();
!!!1123483.java!!!	setEras(inout data : String) : void
        eras = data.clone();
!!!1123611.java!!!	setLocalPatternChars(inout data : String) : void
        if (data == null) {
            throw new NullPointerException("data == null");
        }
        localPatternChars = data;
!!!1123739.java!!!	setMonths(inout data : String) : void
        months = data.clone();
!!!1123867.java!!!	setShortMonths(inout data : String) : void
        shortMonths = data.clone();
!!!1123995.java!!!	setShortWeekdays(inout data : String) : void
        shortWeekdays = data.clone();
!!!1124123.java!!!	setWeekdays(inout data : String) : void
        weekdays = data.clone();
!!!1124251.java!!!	setZoneStrings(inout zoneStrings : String) : void
        if (zoneStrings == null) {
            throw new NullPointerException("zoneStrings == null");
        }
        for (String[] row : zoneStrings) {
            if (row.length < 5) {
                throw new IllegalArgumentException(Arrays.toString(row) + ".length < 5");
            }
        }
        this.zoneStrings = clone2dStringArray(zoneStrings);
        this.customZoneStrings = true;
