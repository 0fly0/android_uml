class TestAppRS
!!!9294732.java!!!	toggleBlur() : void
        mUseBlur = !mUseBlur;

        mActiveScene.clearRenderPasses();
        initRenderPasses();
        mActiveScene.initRenderPassRS(mRS, mSceneManager);

        // This is just a hardcoded object in the scene that gets turned on and off for the demo
        // to make things look a bit better. This could be deleted in the cleanup
        Renderable plane = (Renderable)mActiveScene.getRenderableByName("pPlaneShape1");
        if (plane != null) {
            plane.setVisible(!mUseBlur);
        }
!!!9294860.java!!!	init(inout rs : RenderScriptGL, inout res : Resources, in width : int, in height : int) : void
        mUseBlur = false;
        mRS = rs;
        mRes = res;
        mWidth = width;
        mHeight = height;

        mTouchHandler = new TouchHandler();

        mSceneManager = SceneManager.getInstance();
        // Initializes all the RS specific scenegraph elements
        mSceneManager.initRS(mRS, mRes, mWidth, mHeight);

        mLoadingScreen = new TestAppLoadingScreen(mRS, mRes);

        // Initi renderscript stuff specific to the app. This will need to be abstracted out later.
        FullscreenBlur.createRenderTargets(mRS, mWidth, mHeight);
        initPaintShaders();

        // Load a scene to render
        mSceneManager.loadModel(mFilePath + modelName, mLoadedCallback);
!!!9294988.java!!!	loadModel(in path : String) : void
        mLoadingScreen.showLoadingScreen(true);
        mActiveScene.destroyRS();
        mSceneManager.loadModel(path, mLoadedCallback);
!!!9295116.java!!!	onActionDown(in x : float, in y : float) : void
        mTouchHandler.onActionDown(x, y);
!!!9295244.java!!!	onActionScale(in scale : float) : void
        mTouchHandler.onActionScale(scale);
!!!9295372.java!!!	onActionMove(in x : float, in y : float) : void
        mTouchHandler.onActionMove(x, y);
!!!9295500.java!!!	createFromResource(in id : int, inout addCubemap : boolean, inout constType : Type) : FragmentShader
        FragmentShader.Builder fb = new FragmentShader.Builder(mRS);
        fb.setShaderConst(constType);
        fb.setShader(mRes, id);
        fb.addTexture(TextureType.TEXTURE_2D, "diffuse");
        if (addCubemap) {
            fb.addShaderTexture(TextureType.TEXTURE_CUBE, "reflection");
        }
        FragmentShader pf = fb.create();
        pf.getProgram().bindSampler(Sampler.WRAP_LINEAR_MIP_LINEAR(mRS), 0);
        if (addCubemap) {
            pf.getProgram().bindSampler(Sampler.CLAMP_LINEAR_MIP_LINEAR(mRS), 1);
        }
        return pf;
!!!9295628.java!!!	initPaintShaders() : void
        mGenericV = SceneManager.getDefaultVS();

        ScriptField_CameraParams camParams = new ScriptField_CameraParams(mRS, 1);
        Type camParamType = camParams.getAllocation().getType();
        ScriptField_LightParams lightParams = new ScriptField_LightParams(mRS, 1);

        mPaintF = createFromResource(R.raw.paintf, true, camParamType);
        // Assign a reflection map
        TextureCube envCube = new TextureCube("sdcard/scenegraph/", "cube_env.png");
        mPaintF.appendSourceParams(new TextureParam("reflection", envCube));

        mAluminumF = createFromResource(R.raw.metal, true, camParamType);
        TextureCube diffCube = new TextureCube("sdcard/scenegraph/", "cube_spec.png");
        mAluminumF.appendSourceParams(new TextureParam("reflection", diffCube));

        mPlasticF = createFromResource(R.raw.plastic, false, camParamType);
        mDiffuseF = createFromResource(R.raw.diffuse, false, camParamType);
        mTextureF = SceneManager.getTextureFS();

        FragmentShader.Builder fb = new FragmentShader.Builder(mRS);
        fb.setObjectConst(lightParams.getAllocation().getType());
        fb.setShader(mRes, R.raw.plastic_lights);
        mLightsF = fb.create();

        fb = new FragmentShader.Builder(mRS);
        fb.setObjectConst(lightParams.getAllocation().getType());
        fb.setShader(mRes, R.raw.diffuse_lights);
        mLightsDiffF = fb.create();

        FullscreenBlur.initShaders(mRes, mRS);
!!!9295756.java!!!	initRenderPasses() : void
        ArrayList<RenderableBase> allDraw = mActiveScene.getRenderables();
        int numDraw = allDraw.size();

        if (mUseBlur) {
            FullscreenBlur.addBlurPasses(mActiveScene, mRS, mTouchHandler.getCamera());
        }

        RenderPass mainPass = new RenderPass();
        mainPass.setClearColor(new Float4(1.0f, 1.0f, 1.0f, 1.0f));
        mainPass.setShouldClearColor(true);
        mainPass.setClearDepth(1.0f);
        mainPass.setShouldClearDepth(true);
        mainPass.setCamera(mTouchHandler.getCamera());
        for (int i = 0; i < numDraw; i ++) {
            mainPass.appendRenderable((Renderable)allDraw.get(i));
        }
        mActiveScene.appendRenderPass(mainPass);

        if (mUseBlur) {
            FullscreenBlur.addCompositePass(mActiveScene, mRS, mTouchHandler.getCamera());
        }
!!!9295884.java!!!	addShadersToScene() : void
        mActiveScene.appendShader(mPaintF);
        mActiveScene.appendShader(mLightsF);
        mActiveScene.appendShader(mLightsDiffF);
        mActiveScene.appendShader(mAluminumF);
        mActiveScene.appendShader(mPlasticF);
        mActiveScene.appendShader(mDiffuseF);
        mActiveScene.appendShader(mTextureF);
!!!9296012.java!!!	prepareToRender(inout s : Scene) : void
        mSceneManager.setActiveScene(s);
        mActiveScene = s;
        mTouchHandler.init(mActiveScene);
        addShadersToScene();
        RenderState plastic = new RenderState(mGenericV, mPlasticF, null, null);
        RenderState diffuse = new RenderState(mGenericV, mDiffuseF, null, null);
        RenderState paint = new RenderState(mGenericV, mPaintF, null, null);
        RenderState aluminum = new RenderState(mGenericV, mAluminumF, null, null);
        RenderState lights = new RenderState(mGenericV, mLightsF, null, null);
        RenderState diff_lights = new RenderState(mGenericV, mLightsDiffF, null, null);
        RenderState diff_lights_no_cull = new RenderState(mGenericV, mLightsDiffF, null,
                                                          ProgramRaster.CULL_NONE(mRS));
        RenderState glassTransp = new RenderState(mGenericV, mPaintF,
                                                  ProgramStore.BLEND_ALPHA_DEPTH_TEST(mRS), null);
        RenderState texState = new RenderState(mGenericV, mTextureF, null, null);

        initRenderPasses();

        mActiveScene.assignRenderState(plastic);

        mActiveScene.assignRenderStateToMaterial(diffuse, "lambert2$");

        mActiveScene.assignRenderStateToMaterial(paint, "^Paint");
        mActiveScene.assignRenderStateToMaterial(paint, "^Carbon");
        mActiveScene.assignRenderStateToMaterial(paint, "^Glass");
        mActiveScene.assignRenderStateToMaterial(paint, "^MainGlass");

        mActiveScene.assignRenderStateToMaterial(aluminum, "^Metal");
        mActiveScene.assignRenderStateToMaterial(aluminum, "^Brake");

        mActiveScene.assignRenderStateToMaterial(glassTransp, "^GlassLight");

        mActiveScene.assignRenderStateToMaterial(lights, "^LightBlinn");
        mActiveScene.assignRenderStateToMaterial(diff_lights, "^LightLambert");
        mActiveScene.assignRenderStateToMaterial(diff_lights_no_cull, "^LightLambertNoCull");
        mActiveScene.assignRenderStateToMaterial(texState, "^TextureOnly");

        Renderable plane = (Renderable)mActiveScene.getRenderableByName("pPlaneShape1");
        if (plane != null) {
            plane.setRenderState(texState);
            plane.setVisible(!mUseBlur);
        }

        long start = System.currentTimeMillis();
        mActiveScene.initRS();
        long end = System.currentTimeMillis();
        Log.v("TIMER", "Scene init time: " + (end - start));

        mLoadingScreen.showLoadingScreen(false);
