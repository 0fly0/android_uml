class SoftInputMethod
!!!13407500.java!!!	handleEditorChange() : void
      ExtractedText extracted;

      if (mInputConnection == null) {
        if (mSoftInputShown) {
          mSoftInputThread.sendDismissSoftKeyboard();
        }
        mSoftInputShown = false;
        return;
      } else if (mSoftInputShown == true) {
        return;
      }

      extracted = setMonitorState(true);

      if (extracted != null && extracted.text != null) {
        mSoftInputThread.sendRequireSoftKeyboard(mEditorInfo);
        mSoftInputShown = true;
        String text = String.valueOf(extracted.text);
        mSoftInputThread.sendSoftInputContent(null, text,
            extracted.selectionStart, extracted.selectionEnd);
      } else {
        mSoftInputThread.sendDismissSoftKeyboard();
        mSoftInputShown = false;
      }
!!!13407628.java!!!	setMonitorState(inout enabled : boolean) : ExtractedText
      ExtractedTextRequest request;
      request = new ExtractedTextRequest();
      request.flags = InputConnection.GET_TEXT_WITH_STYLES;

      enabled &= !isInputTypePassword(mEditorInfo.inputType);

      request.token =
          (enabled ? ExtractedTextToken.REPORTING_ENABLED : ExtractedTextToken.REPORTING_DISABLED)
          .ordinal();

      return mInputConnection.getExtractedText(request,
          InputConnection.GET_EXTRACTED_TEXT_MONITOR);
!!!13407756.java!!!	unbindInput() : void
      mRemoteInput = null;
      mInputConnection = null;
      mEditorInfo = null;
!!!13407884.java!!!	startInput(inout inputConnection : InputConnection, inout editorInfo : EditorInfo) : void
      mEditorInfo = editorInfo;
      mInputConnection = inputConnection;
      handleEditorChange();
!!!13408012.java!!!	showSoftInput(in flags : int, inout receiver : ResultReceiver) : void
      handleEditorChange();
!!!13408140.java!!!	hideSoftInput(in flags : int, inout receiver : ResultReceiver) : void
      mSoftInputThread.sendDismissSoftKeyboard();
!!!13408268.java!!!	restartInput(inout inputConnection : InputConnection, inout editorInfo : EditorInfo) : void
      mInputConnection = inputConnection;
      mEditorInfo = editorInfo;
      handleEditorChange();
!!!13408524.java!!!	bindInput(inout inputBinding : InputBinding) : void
      mInputConnection = inputBinding.getConnection();
      mRemoteInput = new Handler(this);
!!!13408780.java!!!	handleMessage(inout message : Message) : boolean
      SoftInputRequestType request = SoftInputRequestType.values()[message.what];
      boolean sendUpdate = !isInputTypePassword(mEditorInfo.inputType);
      SoftInputUpdateObject object;

      switch (request) {
        case REPLACE:
          /*
           * Clear input field and apply client provided content.
           */
          object = (SoftInputUpdateObject) message.obj;
          if (setMonitorState(false) != null) {
            mInputConnection.deleteSurroundingText(Integer.MAX_VALUE, Integer.MAX_VALUE);
            mInputConnection.commitText(object.text, 0);
            mInputConnection.setSelection(object.selectionStart, object.selectionEnd);

            /*
             * Send notification to everybody except the client who reported the
             * change unless we are editing a secret (password, pin etc).
             */
            if (sendUpdate) {
              mSoftInputThread.sendSoftInputContent(object.origin, object.text,
                  object.selectionStart, object.selectionEnd);
            }
            setMonitorState(true);
          }
          break;

        case UPDATE:
          /*
           * Disable change monitoring while we update local input field.
           * We need that to avoid sending update back to the client who
           * reported it first to avoid looping
           */
          object = (SoftInputUpdateObject) message.obj;
          if (setMonitorState(false) != null) {

            if (object.lengthOld > 0) {
              mInputConnection.setSelection(object.position, object.position);
              mInputConnection.deleteSurroundingText(0, object.lengthOld);
            }

            if (object.text != null) {
              mInputConnection.setSelection(object.position, object.position);
              mInputConnection.commitText(object.text, object.position);
            }

            /*
             * If client reports cursor position or text selection, apply it,
             * too.
             */
            if (object.selectionStart != -1 && object.selectionEnd != -1) {
              mInputConnection.setSelection(object.selectionStart, object.selectionEnd);
            }

            /*
             * Send notification to everybody except the client who reported the
             * change unless we are editing a secret (password, pin etc).
             */
            if (sendUpdate) {
              mSoftInputThread.sendSoftInputUpdate(object.origin, object.text, object.position,
                  object.lengthOld, object.lengthNew, object.selectionStart, object.selectionEnd);
            }
            setMonitorState(true);
          }
          break;

        case EXECUTE:
          int action = ((Integer)message.obj).intValue();
          mInputConnection.performEditorAction(action);
          break;
      }

      return true;
!!!13408908.java!!!	isInputTypePassword(in inputType : int) : boolean
      switch (inputType & EditorInfo.TYPE_MASK_CLASS) {
        case EditorInfo.TYPE_CLASS_TEXT:
          if ((inputType & EditorInfo.TYPE_TEXT_VARIATION_PASSWORD) != 0) {
            return true;
          }
          break;

        case EditorInfo.TYPE_CLASS_NUMBER:
          if ((inputType & EditorInfo.TYPE_NUMBER_VARIATION_PASSWORD) != 0) {
            return true;
          }
          break;
      }
      return false;
