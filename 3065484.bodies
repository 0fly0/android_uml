class SmoothStreamingSessionManager
!!!12691212.java!!!	SmoothStreamingSessionManager(inout handler : Handler)
        this.mHandler = handler;
        mSessionMap = new ConcurrentHashMap<Integer, SmoothStreamingSession>();

        mBandwidthHistory = new LinkedList<BandwidthEntry>();
        mTotalTransferBytes = 0;
        mTotalTransferTimeNs = 0;
!!!12691340.java!!!	handleStreamData(inout req : SmoothStreamingDataRequest, inout data : ByteBuffer) : void
        SmoothStreamingSession session = mSessionMap.get(req.trackId);
        if (session == null) {
            return;
        }

        session.handleFragmentData(req, data);
!!!12691468.java!!!	monitorSessionQueues() : void
        Collection<SmoothStreamingSession> sessions = mSessionMap.values();
        decideBandwidth(sessions);
        for (SmoothStreamingSession session : sessions) {
            session.mayDownloadNext();
        }
!!!12691596.java!!!	wouldBlock() : boolean
        for (SmoothStreamingSession session : mSessionMap.values()) {
            if (!session.isUsed()) {
                continue;
            }
            if (!session.isReceived()) {
                return true;
            }
        }

        return false;
!!!12691724.java!!!	decideBandwidth(inout sessions : Collection<SmoothStreamingSession>) : void
        long bandwidth = getBandwidth();

        List<SmoothStreamingSession> topSessions = new ArrayList<SmoothStreamingSession>();
        List<SmoothStreamingSession> bottomSessions = new ArrayList<SmoothStreamingSession>();

        for (SmoothStreamingSession session : sessions) {
            switch (session.getType()) {
                case STREAM_AUDIO:
                case STREAM_TEXT:
                    topSessions.add(session);
                    break;
                case STREAM_VIDEO:
                    bottomSessions.add(session);
                    break;
                default:
                    Log.e("SmoothStreamingSessionManager", "Invalid type");
            }
        }

        bandwidth = consumeBandwidth(bandwidth, topSessions, false);
        if (bandwidth == 0) {
            consumeBandwidth(bandwidth, topSessions, true);
        }

        consumeBandwidth(bandwidth, bottomSessions, false);
!!!12691852.java!!!	consumeBandwidth(in bandwidth : long, inout sessions : List<SmoothStreamingSession>, inout useLowest : boolean) : long
        for (SmoothStreamingSession session : sessions) {
            bandwidth = session.consumeBandwidth(bandwidth, useLowest);
        }
        return bandwidth;
!!!12691980.java!!!	clearSessions() : void
        mSessionMap.clear();
!!!12692108.java!!!	addNewSession(in trackId : int, inout e : StreamElement) : void
        mSessionMap.put(trackId, new SmoothStreamingSession(e, mHandler));
!!!12692236.java!!!	dequeueSample(in trackId : int) : SmoothStreamSample
        SmoothStreamingSession session = mSessionMap.get(trackId);
        assert(session != null);

        return session.dequeueSample();
!!!12692364.java!!!	useTrack(in trackId : int) : void
        SmoothStreamingSession session = mSessionMap.get(trackId);
        assert(session != null);

        session.setUsed(true);
!!!12692492.java!!!	unuseTrack(in trackId : int) : void
        SmoothStreamingSession session = mSessionMap.get(trackId);
        assert(session != null);

        session.setUsed(false);
!!!12692620.java!!!	notifyNewMeasurement(in duration : long, in size : long) : void
        if (mBandwidthHistory.size() > sMaxHistory) {
            BandwidthEntry oldest = mBandwidthHistory.remove(0);
            mTotalTransferBytes -= oldest.mTransferBytes;
            mTotalTransferTimeNs -= oldest.mTransferTimeUs;
            oldest = null;
        }

        mTotalTransferBytes += size;
        mTotalTransferTimeNs += duration;
        mBandwidthHistory.add(new BandwidthEntry(duration, size));
!!!12692748.java!!!	getBandwidth() : long
        if (mTotalTransferTimeNs == 0) {
            return 0;
        }
        return mTotalTransferBytes * (1000000000l / mTotalTransferTimeNs);
