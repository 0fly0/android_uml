class ASN1NamedBitList
!!!2151963.java!!!	ASN1NamedBitList(in minBits : int)
            this.minBits = minBits;
            this.maxBits = INDEFINITE_SIZE;
!!!2152091.java!!!	getDecodedObject(inout in : BerInputStream) : Object
            boolean[] value;

            int unusedBits = in.buffer[in.contentOffset];
            int bitsNumber = (in.length - 1) * 8 - unusedBits;

            if (maxBits == INDEFINITE_SIZE) {
                if (minBits == INDEFINITE_SIZE) {
                    value = new boolean[bitsNumber];
                } else {
                    if (bitsNumber > minBits) {
                        value = new boolean[bitsNumber];
                    } else {
                        value = new boolean[minBits];
                    }
                }
            } else {
                if (bitsNumber > maxBits) {
                    throw new ASN1Exception("ASN.1 Named Bitstring: size constraints");
                }
                value = new boolean[maxBits];
            }

            if (bitsNumber == 0) {
                // empty bit string
                return value;
            }

            int i = 1;
            int j = 0;
            byte octet = in.buffer[in.contentOffset + i];
            for (int size = in.length - 1; i < size; i++) {
                for (int k = 0; k < 8; k++, j++) {
                    value[j] = (SET_MASK[k] & octet) != 0;
                }
                i++;
                octet = in.buffer[in.contentOffset + i];
            }

            // final octet
            for (int k = 0; k < (8 - unusedBits); k++, j++) {
                value[j] = (SET_MASK[k] & octet) != 0;
            }

            return value;
!!!2152219.java!!!	setEncodingContent(inout out : BerOutputStream) : void
            boolean[] toEncode = (boolean[]) out.content;

            int index = toEncode.length - 1;
            while (index > -1 && !toEncode[index]) {
                index--;
            }

            if (index == -1) {
                out.content = emptyString;
                out.length = 1;
            } else {
                int unusedBits = 7 - index % 8;
                byte[] bytes = new byte[index / 8 + 1];

                int j = 0;
                index = bytes.length - 1;
                for (int i = 0; i < index; i++) {
                    for (int k = 0; k < 8; k++, j++) {
                        if (toEncode[j]) {
                            bytes[i] = (byte) (bytes[i] | SET_MASK[k]);
                        }
                    }
                }

                //final octet
                for (int k = 0; k < (8 - unusedBits); k++, j++) {
                    if (toEncode[j]) {
                        bytes[index] = (byte) (bytes[index] | SET_MASK[k]);
                    }
                }

                out.content = new BitString(bytes, unusedBits);
                out.length = bytes.length + 1;
            }
