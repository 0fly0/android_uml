class OpenSSLSecretKey
!!!2441243.java!!!	OpenSSLSecretKey(inout algorithm : String, inout encoded : byte)
        this.algorithm = algorithm;
        this.encoded = encoded;

        type = NativeCrypto.EVP_PKEY_HMAC;
        key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_mac_key(type, encoded));
!!!2441371.java!!!	OpenSSLSecretKey(inout algorithm : String, inout key : OpenSSLKey)
        this.algorithm = algorithm;
        this.key = key;

        type = NativeCrypto.EVP_PKEY_type(key.getPkeyContext());
        encoded = null;
!!!2441499.java!!!	getInstance(inout key : SecretKey) : OpenSSLKey
        try {
            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_mac_key(NativeCrypto.EVP_PKEY_HMAC,
                    key.getEncoded()));
        } catch (Exception e) {
            throw new InvalidKeyException(e);
        }
!!!2441627.java!!!	getAlgorithm() : String
        return algorithm;
!!!2441755.java!!!	getFormat() : String
        if (key.isEngineBased()) {
            return null;
        }

        return "RAW";
!!!2441883.java!!!	getEncoded() : byte
        if (key.isEngineBased()) {
            return null;
        }

        return encoded;
!!!2442011.java!!!	getOpenSSLKey() : OpenSSLKey
        return key;
!!!2442139.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (!(o instanceof SecretKey)) {
            return false;
        }

        SecretKey other = (SecretKey) o;
        if (!algorithm.equals(other.getAlgorithm())) {
            return false;
        }

        if (o instanceof OpenSSLSecretKey) {
            OpenSSLSecretKey otherOpenSSL = (OpenSSLSecretKey) o;
            return key.equals(otherOpenSSL.getOpenSSLKey());
        } else if (key.isEngineBased()) {
            return false;
        }

        if (!getFormat().equals(other.getFormat())) {
            return false;
        }

        return Arrays.equals(encoded, other.getEncoded());
!!!2442267.java!!!	hashCode() : int
        return key.hashCode();
!!!2442395.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();

        key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_mac_key(type, encoded));
!!!2442523.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        if (getOpenSSLKey().isEngineBased()) {
            throw new NotSerializableException("engine-based keys can not be serialized");
        }

        stream.defaultWriteObject();
