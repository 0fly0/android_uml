class Locale
!!!1334811.java!!!	Locale(inout unused : boolean, inout lowerCaseLanguageCode : String, inout upperCaseCountryCode : String)
        this.languageCode = lowerCaseLanguageCode;
        this.countryCode = upperCaseCountryCode;
        this.variantCode = "";
!!!1334939.java!!!	Locale(inout language : String)
        this(language, "", "");
!!!1335067.java!!!	Locale(inout language : String, inout country : String)
        this(language, country, "");
!!!1335195.java!!!	Locale(inout language : String, inout country : String, inout variant : String)
        if (language == null || country == null || variant == null) {
            throw new NullPointerException("language=" + language +
                                           ",country=" + country +
                                           ",variant=" + variant);
        }
        if (language.isEmpty() && country.isEmpty()) {
            languageCode = "";
            countryCode = "";
            variantCode = variant;
            return;
        }

        languageCode = language.toLowerCase(Locale.US);
        // Map new language codes to the obsolete language
        // codes so the correct resource bundles will be used.
        if (languageCode.equals("he")) {
            languageCode = "iw";
        } else if (languageCode.equals("id")) {
            languageCode = "in";
        } else if (languageCode.equals("yi")) {
            languageCode = "ji";
        }

        countryCode = country.toUpperCase(Locale.US);

        // Work around for be compatible with RI
        variantCode = variant;
!!!1335323.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1335451.java!!!	equals(inout object : Object) : boolean
        if (object == this) {
            return true;
        }
        if (object instanceof Locale) {
            Locale o = (Locale) object;
            return languageCode.equals(o.languageCode)
                    && countryCode.equals(o.countryCode)
                    && variantCode.equals(o.variantCode);
        }
        return false;
!!!1335579.java!!!	getAvailableLocales() : Locale
        return ICU.getAvailableLocales();
!!!1335707.java!!!	getCountry() : String
        return countryCode;
!!!1335835.java!!!	getDefault() : Locale
        return defaultLocale;
!!!1335963.java!!!	getDisplayCountry() : String
        return getDisplayCountry(getDefault());
!!!1336091.java!!!	getDisplayCountry(inout locale : Locale) : String
        if (countryCode.isEmpty()) {
            return "";
        }
        String result = ICU.getDisplayCountryNative(toString(), locale.toString());
        if (result == null) { // TODO: do we need to do this, or does ICU do it for us?
            result = ICU.getDisplayCountryNative(toString(), Locale.getDefault().toString());
        }
        return result;
!!!1336219.java!!!	getDisplayLanguage() : String
        return getDisplayLanguage(getDefault());
!!!1336347.java!!!	getDisplayLanguage(inout locale : Locale) : String
        if (languageCode.isEmpty()) {
            return "";
        }

        // http://b/8049507 --- frameworks/base should use fil_PH instead of tl_PH.
        // Until then, we're stuck covering their tracks, making it look like they're
        // using "fil" when they're not.
        String localeString = toString();
        if (languageCode.equals("tl")) {
            localeString = toNewString("fil", countryCode, variantCode);
        }

        String result = ICU.getDisplayLanguageNative(localeString, locale.toString());
        if (result == null) { // TODO: do we need to do this, or does ICU do it for us?
            result = ICU.getDisplayLanguageNative(localeString, Locale.getDefault().toString());
        }
        return result;
!!!1336475.java!!!	getDisplayName() : String
        return getDisplayName(getDefault());
!!!1336603.java!!!	getDisplayName(inout locale : Locale) : String
        int count = 0;
        StringBuilder buffer = new StringBuilder();
        if (!languageCode.isEmpty()) {
            String displayLanguage = getDisplayLanguage(locale);
            buffer.append(displayLanguage.isEmpty() ? languageCode : displayLanguage);
            ++count;
        }
        if (!countryCode.isEmpty()) {
            if (count == 1) {
                buffer.append(" (");
            }
            String displayCountry = getDisplayCountry(locale);
            buffer.append(displayCountry.isEmpty() ? countryCode : displayCountry);
            ++count;
        }
        if (!variantCode.isEmpty()) {
            if (count == 1) {
                buffer.append(" (");
            } else if (count == 2) {
                buffer.append(",");
            }
            String displayVariant = getDisplayVariant(locale);
            buffer.append(displayVariant.isEmpty() ? variantCode : displayVariant);
            ++count;
        }
        if (count > 1) {
            buffer.append(")");
        }
        return buffer.toString();
!!!1336731.java!!!	getDisplayVariant() : String
        return getDisplayVariant(getDefault());
!!!1336859.java!!!	getDisplayVariant(inout locale : Locale) : String
        if (variantCode.length() == 0) {
            return variantCode;
        }
        String result = ICU.getDisplayVariantNative(toString(), locale.toString());
        if (result == null) { // TODO: do we need to do this, or does ICU do it for us?
            result = ICU.getDisplayVariantNative(toString(), Locale.getDefault().toString());
        }
        return result;
!!!1336987.java!!!	getISO3Country() : String
        String code = ICU.getISO3CountryNative(toString());
        if (!countryCode.isEmpty() && code.isEmpty()) {
            throw new MissingResourceException("No 3-letter country code for locale: " + this, "FormatData_" + this, "ShortCountry");
        }
        return code;
!!!1337115.java!!!	getISO3Language() : String
        String code = ICU.getISO3LanguageNative(toString());
        if (!languageCode.isEmpty() && code.isEmpty()) {
            throw new MissingResourceException("No 3-letter language code for locale: " + this, "FormatData_" + this, "ShortLanguage");
        }
        return code;
!!!1337243.java!!!	getISOCountries() : String
        return ICU.getISOCountries();
!!!1337371.java!!!	getISOLanguages() : String
        return ICU.getISOLanguages();
!!!1337499.java!!!	getLanguage() : String
        return languageCode;
!!!1337627.java!!!	getVariant() : String
        return variantCode;
!!!1337755.java!!!	hashCode() : int
        return countryCode.hashCode() + languageCode.hashCode()
                + variantCode.hashCode();
!!!1337883.java!!!	setDefault(inout locale : Locale) : void
        if (locale == null) {
            throw new NullPointerException("locale == null");
        }
        defaultLocale = locale;
!!!1338011.java!!!	toString() : String
        String result = cachedToStringResult;
        if (result == null) {
            result = cachedToStringResult = toNewString(languageCode, countryCode, variantCode);
        }
        return result;
!!!1338139.java!!!	toNewString(inout languageCode : String, inout countryCode : String, inout variantCode : String) : String
        // The string form of a locale that only has a variant is the empty string.
        if (languageCode.length() == 0 && countryCode.length() == 0) {
            return "";
        }
        // Otherwise, the output format is "ll_cc_variant", where language and country are always
        // two letters, but the variant is an arbitrary length. A size of 11 characters has room
        // for "en_US_POSIX", the largest "common" value. (In practice, the string form is almost
        // always 5 characters: "ll_cc".)
        StringBuilder result = new StringBuilder(11);
        result.append(languageCode);
        if (countryCode.length() > 0 || variantCode.length() > 0) {
            result.append('_');
        }
        result.append(countryCode);
        if (variantCode.length() > 0) {
            result.append('_');
        }
        result.append(variantCode);
        return result.toString();
!!!1338267.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        ObjectOutputStream.PutField fields = stream.putFields();
        fields.put("country", countryCode);
        fields.put("hashcode", -1);
        fields.put("language", languageCode);
        fields.put("variant", variantCode);
        stream.writeFields();
!!!1338395.java!!!	readObject(inout stream : ObjectInputStream) : void
        ObjectInputStream.GetField fields = stream.readFields();
        countryCode = (String) fields.get("country", "");
        languageCode = (String) fields.get("language", "");
        variantCode = (String) fields.get("variant", "");
