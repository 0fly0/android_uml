class TrustedCertificateStore
!!!2523931.java!!!	isSystem(inout alias : String) : boolean
        return alias.startsWith(PREFIX_SYSTEM);
!!!2524059.java!!!	isUser(inout alias : String) : boolean
        return alias.startsWith(PREFIX_USER);
!!!2524187.java!!!	TrustedCertificateStore()
        this(CA_CERTS_DIR_SYSTEM, CA_CERTS_DIR_ADDED, CA_CERTS_DIR_DELETED);
!!!2524315.java!!!	TrustedCertificateStore(inout systemDir : File, inout addedDir : File, inout deletedDir : File)
        this.systemDir = systemDir;
        this.addedDir = addedDir;
        this.deletedDir = deletedDir;
!!!2524443.java!!!	getCertificate(inout alias : String) : Certificate
        return getCertificate(alias, false);
!!!2524571.java!!!	getCertificate(inout alias : String, inout includeDeletedSystem : boolean) : Certificate

        File file = fileForAlias(alias);
        if (file == null || (isUser(alias) && isTombstone(file))) {
            return null;
        }
        X509Certificate cert = readCertificate(file);
        if (cert == null || (isSystem(alias)
                             && !includeDeletedSystem
                             && isDeletedSystemCertificate(cert))) {
            // skip malformed certs as well as deleted system ones
            return null;
        }
        return cert;
!!!2524699.java!!!	fileForAlias(inout alias : String) : File
        if (alias == null) {
            throw new NullPointerException("alias == null");
        }
        File file;
        if (isSystem(alias)) {
            file = new File(systemDir, alias.substring(PREFIX_SYSTEM.length()));
        } else if (isUser(alias)) {
            file = new File(addedDir, alias.substring(PREFIX_USER.length()));
        } else {
            return null;
        }
        if (!file.exists() || isTombstone(file)) {
            // silently elide tombstones
            return null;
        }
        return file;
!!!2524827.java!!!	isTombstone(inout file : File) : boolean
        return file.length() == 0;
!!!2524955.java!!!	readCertificate(inout file : File) : X509Certificate
        if (!file.isFile()) {
            return null;
        }
        InputStream is = null;
        try {
            is = new BufferedInputStream(new FileInputStream(file));
            return (X509Certificate) CERT_FACTORY.generateCertificate(is);
        } catch (IOException e) {
            return null;
        } catch (CertificateException e) {
            // reading a cert while its being installed can lead to this.
            // just pretend like its not available yet.
            return null;
        } finally {
            IoUtils.closeQuietly(is);
        }
!!!2525083.java!!!	writeCertificate(inout file : File, inout cert : X509Certificate) : void
        File dir = file.getParentFile();
        dir.mkdirs();
        dir.setReadable(true, false);
        dir.setExecutable(true, false);
        OutputStream os = null;
        try {
            os = new FileOutputStream(file);
            os.write(cert.getEncoded());
        } finally {
            IoUtils.closeQuietly(os);
        }
        file.setReadable(true, false);
!!!2525211.java!!!	isDeletedSystemCertificate(inout x : X509Certificate) : boolean
        return getCertificateFile(deletedDir, x).exists();
!!!2525339.java!!!	getCreationDate(inout alias : String) : Date
        // containsAlias check ensures the later fileForAlias result
        // was not a deleted system cert.
        if (!containsAlias(alias)) {
            return null;
        }
        File file = fileForAlias(alias);
        if (file == null) {
            return null;
        }
        long time = file.lastModified();
        if (time == 0) {
            return null;
        }
        return new Date(time);
!!!2525467.java!!!	aliases() : Set
        Set<String> result = new HashSet<String>();
        addAliases(result, PREFIX_USER, addedDir);
        addAliases(result, PREFIX_SYSTEM, systemDir);
        return result;
!!!2525595.java!!!	userAliases() : Set
        Set<String> result = new HashSet<String>();
        addAliases(result, PREFIX_USER, addedDir);
        return result;
!!!2525723.java!!!	addAliases(inout result : Set, inout prefix : String, inout dir : File) : void
        String[] files = dir.list();
        if (files == null) {
            return;
        }
        for (String filename : files) {
            String alias = prefix + filename;
            if (containsAlias(alias)) {
                result.add(alias);
            }
        }
!!!2525851.java!!!	allSystemAliases() : Set
        Set<String> result = new HashSet<String>();
        String[] files = systemDir.list();
        if (files == null) {
            return result;
        }
        for (String filename : files) {
            String alias = PREFIX_SYSTEM + filename;
            if (containsAlias(alias, true)) {
                result.add(alias);
            }
        }
        return result;
!!!2525979.java!!!	containsAlias(inout alias : String) : boolean
        return containsAlias(alias, false);
!!!2526107.java!!!	containsAlias(inout alias : String, inout includeDeletedSystem : boolean) : boolean
        return getCertificate(alias, includeDeletedSystem) != null;
!!!2526235.java!!!	getCertificateAlias(inout c : Certificate) : String
        if (c == null || !(c instanceof X509Certificate)) {
            return null;
        }
        X509Certificate x = (X509Certificate) c;
        File user = getCertificateFile(addedDir, x);
        if (user.exists()) {
            return PREFIX_USER + user.getName();
        }
        if (isDeletedSystemCertificate(x)) {
            return null;
        }
        File system = getCertificateFile(systemDir, x);
        if (system.exists()) {
            return PREFIX_SYSTEM + system.getName();
        }
        return null;
!!!2526363.java!!!	isUserAddedCertificate(inout cert : X509Certificate) : boolean
        return getCertificateFile(addedDir, cert).exists();
!!!2526491.java!!!	getCertificateFile(inout dir : File, in x : X509Certificate) : File
        // compare X509Certificate.getEncoded values
        CertSelector selector = new CertSelector() {
            @Override public boolean match(X509Certificate cert) {
                return cert.equals(x);
            }
        };
        return findCert(dir, x.getSubjectX500Principal(), selector, File.class);
!!!2526619.java!!!	isTrustAnchor(in c : X509Certificate) : boolean
        // compare X509Certificate.getPublicKey values
        CertSelector selector = new CertSelector() {
            @Override public boolean match(X509Certificate ca) {
                return ca.getPublicKey().equals(c.getPublicKey());
            }
        };
        boolean user = findCert(addedDir,
                                c.getSubjectX500Principal(),
                                selector,
                                Boolean.class);
        if (user) {
            return true;
        }
        X509Certificate system = findCert(systemDir,
                                          c.getSubjectX500Principal(),
                                          selector,
                                          X509Certificate.class);
        return system != null && !isDeletedSystemCertificate(system);
!!!2526747.java!!!	findIssuer(in c : X509Certificate) : X509Certificate
        // match on verified issuer of Certificate
        CertSelector selector = new CertSelector() {
            @Override public boolean match(X509Certificate ca) {
                try {
                    c.verify(ca.getPublicKey());
                    return true;
                } catch (Exception e) {
                    return false;
                }
            }
        };
        X500Principal issuer = c.getIssuerX500Principal();
        X509Certificate user = findCert(addedDir, issuer, selector, X509Certificate.class);
        if (user != null) {
            return user;
        }
        X509Certificate system = findCert(systemDir, issuer, selector, X509Certificate.class);
        if (system != null && !isDeletedSystemCertificate(system)) {
            return system;
        }
        return null;
!!!2526875.java!!!	getAuthorityKeyIdentifier(inout cert : X509Certificate) : AuthorityKeyIdentifier
        final byte[] akidBytes = cert.getExtensionValue("2.5.29.35");
        if (akidBytes == null) {
            return null;
        }

        try {
            return AuthorityKeyIdentifier.decode(akidBytes);
        } catch (IOException e) {
            return null;
        }
!!!2527003.java!!!	getSubjectKeyIdentifier(inout cert : X509Certificate) : SubjectKeyIdentifier
        final byte[] skidBytes = cert.getExtensionValue("2.5.29.14");
        if (skidBytes == null) {
            return null;
        }

        try {
            return SubjectKeyIdentifier.decode(skidBytes);
        } catch (IOException e) {
            return null;
        }
!!!2527131.java!!!	isSelfSignedCertificate(inout cert : X509Certificate) : boolean
        if (!Objects.equal(cert.getSubjectX500Principal(), cert.getIssuerX500Principal())) {
            return false;
        }

        final AuthorityKeyIdentifier akid = getAuthorityKeyIdentifier(cert);
        if (akid != null) {
            final byte[] akidKeyId = akid.getKeyIdentifier();
            if (akidKeyId != null) {
                final SubjectKeyIdentifier skid = getSubjectKeyIdentifier(cert);
                if (!Arrays.equals(akidKeyId, skid.getKeyIdentifier())) {
                    return false;
                }
            }

            final BigInteger akidSerial = akid.getAuthorityCertSerialNumber();
            if (akidSerial != null && !akidSerial.equals(cert.getSerialNumber())) {
                return false;
            }

            final GeneralNames possibleIssuerNames = akid.getAuthorityCertIssuer();
            if (possibleIssuerNames != null) {
                GeneralName issuerName = null;

                /* Get the first Directory Name (DN) to match how OpenSSL works. */
                for (GeneralName possibleName : possibleIssuerNames.getNames()) {
                    if (possibleName.getTag() == GeneralName.DIR_NAME) {
                        issuerName = possibleName;
                        break;
                    }
                }

                if (issuerName != null) {
                    final String issuerCanonical = ((Name) issuerName.getName())
                            .getName(X500Principal.CANONICAL);

                    try {
                        final String subjectCanonical = new Name(cert.getSubjectX500Principal()
                                .getEncoded()).getName(X500Principal.CANONICAL);
                        if (!issuerCanonical.equals(subjectCanonical)) {
                            return false;
                        }
                    } catch (IOException ignored) {
                    }
                }
            }
        }

        return true;
!!!2527259.java!!!	getCertificateChain(inout leaf : X509Certificate) : List
        final List<X509Certificate> chain = new ArrayList<X509Certificate>();
        chain.add(leaf);

        for (int i = 0; true; i++) {
            X509Certificate cert = chain.get(i);
            if (isSelfSignedCertificate(cert)) {
                break;
            }
            X509Certificate issuer = findIssuer(cert);
            if (issuer == null) {
                break;
            }
            chain.add(issuer);
        }

        return chain;
!!!2527515.java!!!	findCert(inout dir : File, inout subject : X500Principal, inout selector : CertSelector, inout desiredReturnType : Class) : T

        String hash = hash(subject);
        for (int index = 0; true; index++) {
            File file = file(dir, hash, index);
            if (!file.isFile()) {
                // could not find a match, no file exists, bail
                if (desiredReturnType == Boolean.class) {
                    return (T) Boolean.FALSE;
                }
                if (desiredReturnType == File.class) {
                    // we return file so that caller that wants to
                    // write knows what the next available has
                    // location is
                    return (T) file;
                }
                return null;
            }
            if (isTombstone(file)) {
                continue;
            }
            X509Certificate cert = readCertificate(file);
            if (cert == null) {
                // skip problem certificates
                continue;
            }
            if (selector.match(cert)) {
                if (desiredReturnType == X509Certificate.class) {
                    return (T) cert;
                }
                if (desiredReturnType == Boolean.class) {
                    return (T) Boolean.TRUE;
                }
                if (desiredReturnType == File.class) {
                    return (T) file;
                }
                throw new AssertionError();
            }
        }
!!!2527643.java!!!	hash(inout name : X500Principal) : String
        int hash = NativeCrypto.X509_NAME_hash_old(name);
        return IntegralToString.intToHexString(hash, false, 8);
!!!2527771.java!!!	file(inout dir : File, inout hash : String, in index : int) : File
        return new File(dir, hash + '.' + index);
!!!2527899.java!!!	installCertificate(inout cert : X509Certificate) : void
        if (cert == null) {
            throw new NullPointerException("cert == null");
        }
        File system = getCertificateFile(systemDir, cert);
        if (system.exists()) {
            File deleted = getCertificateFile(deletedDir, cert);
            if (deleted.exists()) {
                // we have a system cert that was marked deleted.
                // remove the deleted marker to expose the original
                if (!deleted.delete()) {
                    throw new IOException("Could not remove " + deleted);
                }
                return;
            }
            // otherwise we just have a dup of an existing system cert.
            // return taking no further action.
            return;
        }
        File user = getCertificateFile(addedDir, cert);
        if (user.exists()) {
            // we have an already installed user cert, bail.
            return;
        }
        // install the user cert
        writeCertificate(user, cert);
!!!2528027.java!!!	deleteCertificateEntry(inout alias : String) : void
        if (alias == null) {
            return;
        }
        File file = fileForAlias(alias);
        if (file == null) {
            return;
        }
        if (isSystem(alias)) {
            X509Certificate cert = readCertificate(file);
            if (cert == null) {
                // skip problem certificates
                return;
            }
            File deleted = getCertificateFile(deletedDir, cert);
            if (deleted.exists()) {
                // already deleted system certificate
                return;
            }
            // write copy of system cert to marked as deleted
            writeCertificate(deleted, cert);
            return;
        }
        if (isUser(alias)) {
            // truncate the file to make a tombstone by opening and closing.
            // we need ensure that we don't leave a gap before a valid cert.
            new FileOutputStream(file).close();
            removeUnnecessaryTombstones(alias);
            return;
        }
        // non-existant user cert, nothing to delete
!!!2528155.java!!!	removeUnnecessaryTombstones(inout alias : String) : void
        if (!isUser(alias)) {
            throw new AssertionError(alias);
        }
        int dotIndex = alias.lastIndexOf('.');
        if (dotIndex == -1) {
            throw new AssertionError(alias);
        }

        String hash = alias.substring(PREFIX_USER.length(), dotIndex);
        int lastTombstoneIndex = Integer.parseInt(alias.substring(dotIndex + 1));

        if (file(addedDir, hash, lastTombstoneIndex + 1).exists()) {
            return;
        }
        while (lastTombstoneIndex >= 0) {
            File file = file(addedDir, hash, lastTombstoneIndex);
            if (!isTombstone(file)) {
                break;
            }
            if (!file.delete()) {
                throw new IOException("Could not remove " + file);
            }
            lastTombstoneIndex--;
        }
