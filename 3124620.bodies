class OptionsMessage
!!!13169292.java!!!	OptionsMessage()
    super(PoloMessage.PoloMessageType.OPTIONS);
    
    mProtocolRolePreference = ProtocolRole.UNKNOWN;
    mInputEncodings = new HashSet<EncodingOption>();
    mOutputEncodings = new HashSet<EncodingOption>();
!!!13169420.java!!!	setProtocolRolePreference(inout pref : ProtocolRole) : void
    mProtocolRolePreference = pref;
!!!13169548.java!!!	getProtocolRolePreference() : ProtocolRole
    return mProtocolRolePreference;
!!!13169676.java!!!	addInputEncoding(inout encoding : EncodingOption) : void
    mInputEncodings.add(encoding);
!!!13169804.java!!!	addOutputEncoding(inout encoding : EncodingOption) : void
    mOutputEncodings.add(encoding);
!!!13169932.java!!!	supportsInputEncoding(inout encoding : EncodingOption) : boolean
    return mInputEncodings.contains(encoding);
!!!13170060.java!!!	supportsOutputEncoding(inout encoding : EncodingOption) : boolean
    return mOutputEncodings.contains(encoding);
!!!13170188.java!!!	getInputEncodingSet() : EncodingOption
    return new HashSet<EncodingOption>(mInputEncodings);
!!!13170316.java!!!	getOutputEncodingSet() : EncodingOption
    return new HashSet<EncodingOption>(mOutputEncodings);
!!!13170444.java!!!	getBestConfiguration(inout otherOptions : OptionsMessage) : ConfigurationMessage
    Set<EncodingOption> peerOutputs = otherOptions.getOutputEncodingSet();
    peerOutputs.retainAll(mInputEncodings);
    
    Set<EncodingOption> peerInputs = otherOptions.getInputEncodingSet();
    peerInputs.retainAll(mOutputEncodings);
    
    if (peerOutputs.isEmpty() && peerInputs.isEmpty()) {
      // No configuration possible: no common encodings.
      return null;
    }
    
    EncodingOption encoding;
    ProtocolRole role;
    
    // TODO(mikey): sort list of encodings by preference
    EncodingOption bestInput = null;
    if (!peerInputs.isEmpty()) {
      bestInput = peerInputs.iterator().next();
    }
    EncodingOption bestOutput = null;
    if (!peerOutputs.isEmpty()) {
      bestOutput = peerOutputs.iterator().next();
    }

    if (mProtocolRolePreference == ProtocolRole.DISPLAY_DEVICE) {
      // We prefer to be the display device
      if (bestInput != null) {
        encoding = bestInput;
        role = ProtocolRole.DISPLAY_DEVICE;
      } else {
        encoding = bestOutput;
        role = ProtocolRole.INPUT_DEVICE;
      }
    } else {
      // We prefer to be the input device, or have no preference
      if (!peerOutputs.isEmpty()) {
        encoding = bestOutput;
        role = ProtocolRole.INPUT_DEVICE;
      } else {
        encoding = bestInput;
        role = ProtocolRole.DISPLAY_DEVICE;
      }
    }
    
    return new ConfigurationMessage(encoding, role);
!!!13170572.java!!!	toString() : String
    StringBuilder ret = new StringBuilder();
    ret.append("[" + getType() + " ");
    
    ret.append("inputs=");
    Iterator<EncodingOption> inputIterator = mInputEncodings.iterator();
    while (inputIterator.hasNext()) {
      ret.append(inputIterator.next());
      if (inputIterator.hasNext()) {
        ret.append(",");
      }
    }
    
    ret.append(" outputs=");
    Iterator<EncodingOption> outputIterator = mOutputEncodings.iterator();
    while (outputIterator.hasNext()) {
      ret.append(outputIterator.next());
      if (outputIterator.hasNext()) {
        ret.append(",");
      }
    }
    
    ret.append(" pref=" + mProtocolRolePreference);
    ret.append("]");
    return ret.toString();
!!!13170700.java!!!	equals(inout obj : Object) : boolean
    if (this == obj) {
      return true;
    }

    if (!(obj instanceof OptionsMessage)) {
      return false;
    }

    OptionsMessage other = (OptionsMessage) obj;
    
    if (mProtocolRolePreference == null) {
      if (other.mProtocolRolePreference != null) {
        return false;
      }
    } else if (!mProtocolRolePreference.equals(other.mProtocolRolePreference)) {
        return false;
    }

    return mInputEncodings.equals(other.mInputEncodings) &&
        mOutputEncodings.equals(other.mOutputEncodings);
