class Fields
!!!9637004.java!!!	Fields(in order : String)
            mOrder = order;
!!!9637132.java!!!	getAddress() : String
            String address = get("c", '=');
            if (address == null) {
                return null;
            }
            String[] parts = address.split(" ");
            if (parts.length != 3) {
                return null;
            }
            int slash = parts[2].indexOf('/');
            return (slash < 0) ? parts[2] : parts[2].substring(0, slash);
!!!9637260.java!!!	setAddress(in address : String) : void
            if (address != null) {
                address = (address.indexOf(':') < 0 ? "IN IP4 " : "IN IP6 ") +
                        address;
            }
            set("c", '=', address);
!!!9637388.java!!!	getEncryptionMethod() : String
            String encryption = get("k", '=');
            if (encryption == null) {
                return null;
            }
            int colon = encryption.indexOf(':');
            return (colon == -1) ? encryption : encryption.substring(0, colon);
!!!9637516.java!!!	getEncryptionKey() : String
            String encryption = get("k", '=');
            if (encryption == null) {
                return null;
            }
            int colon = encryption.indexOf(':');
            return (colon == -1) ? null : encryption.substring(0, colon + 1);
!!!9637644.java!!!	setEncryption(in method : String, in key : String) : void
            set("k", '=', (method == null || key == null) ?
                    method : method + ':' + key);
!!!9637772.java!!!	getBandwidthTypes() : String
            return cut("b=", ':');
!!!9637900.java!!!	getBandwidth(in type : String) : int
            String value = get("b=" + type, ':');
            if (value != null) {
                try {
                    return Integer.parseInt(value);
                } catch (NumberFormatException e) { }
                setBandwidth(type, -1);
            }
            return -1;
!!!9638028.java!!!	setBandwidth(in type : String, in value : int) : void
            set("b=" + type, ':', (value < 0) ? null : String.valueOf(value));
!!!9638156.java!!!	getAttributeNames() : String
            return cut("a=", ':');
!!!9638284.java!!!	getAttribute(in name : String) : String
            return get("a=" + name, ':');
!!!9638412.java!!!	setAttribute(in name : String, in value : String) : void
            set("a=" + name, ':', value);
!!!9638540.java!!!	write(inout buffer : StringBuilder) : void
            for (int i = 0; i < mOrder.length(); ++i) {
                char type = mOrder.charAt(i);
                for (String line : mLines) {
                    if (line.charAt(0) == type) {
                        buffer.append(line).append("\r\n");
                    }
                }
            }
!!!9638668.java!!!	parse(in line : String) : void
            char type = line.charAt(0);
            if (mOrder.indexOf(type) == -1) {
                return;
            }
            char delimiter = '=';
            if (line.startsWith("a=rtpmap:") || line.startsWith("a=fmtp:")) {
                delimiter = ' ';
            } else if (type == 'b' || type == 'a') {
                delimiter = ':';
            }
            int i = line.indexOf(delimiter);
            if (i == -1) {
                set(line, delimiter, "");
            } else {
                set(line.substring(0, i), delimiter, line.substring(i + 1));
            }
!!!9638796.java!!!	cut(in prefix : String, in delimiter : char) : String
            String[] names = new String[mLines.size()];
            int length = 0;
            for (String line : mLines) {
                if (line.startsWith(prefix)) {
                    int i = line.indexOf(delimiter);
                    if (i == -1) {
                        i = line.length();
                    }
                    names[length] = line.substring(prefix.length(), i);
                    ++length;
                }
            }
            return Arrays.copyOf(names, length);
!!!9638924.java!!!	find(in key : String, in delimiter : char) : int
            int length = key.length();
            for (int i = mLines.size() - 1; i >= 0; --i) {
                String line = mLines.get(i);
                if (line.startsWith(key) && (line.length() == length ||
                        line.charAt(length) == delimiter)) {
                    return i;
                }
            }
            return -1;
!!!9639052.java!!!	set(in key : String, in delimiter : char, in value : String) : void
            int index = find(key, delimiter);
            if (value != null) {
                if (value.length() != 0) {
                    key = key + delimiter + value;
                }
                if (index == -1) {
                    mLines.add(key);
                } else {
                    mLines.set(index, key);
                }
            } else if (index != -1) {
                mLines.remove(index);
            }
!!!9639180.java!!!	get(in key : String, in delimiter : char) : String
            int index = find(key, delimiter);
            if (index == -1) {
                return null;
            }
            String line = mLines.get(index);
            int length = key.length();
            return (line.length() == length) ? "" : line.substring(length + 1);
