class BigInt
!!!502299.java!!!	finalize() : void
        try {
            if (this.bignum != 0) {
                NativeBN.BN_free(this.bignum);
                this.bignum = 0;
            }
        } finally {
            super.finalize();
        }
!!!502427.java!!!	toString() : String
        return this.decString();
!!!502555.java!!!	getNativeBIGNUM() : int
        return this.bignum;
!!!502683.java!!!	consumeErrors(inout sb : StringBuilder) : int
        int cnt = 0;
        int e, reason;
        while ((e = NativeBN.ERR_get_error()) != 0) {
            reason = e & 255;
            if (reason == 103) {
                throw new ArithmeticException("BigInteger division by zero");
            }
            if (reason == 108) {
                throw new ArithmeticException("BigInteger not invertible");
            }
            if (reason == 65) {
                throw new OutOfMemoryError();
            }
            sb.append(e).append(": ");
            String s = NativeBN.ERR_error_string(e);
            sb.append(s);
            cnt++;
        }
        return cnt;
!!!502811.java!!!	Check(inout success : boolean) : void
        if (!success) {
            StringBuilder sb = new StringBuilder("(openssl)ERR: ");
            int cnt = consumeErrors(sb);
            if (cnt > 0)
                throw new ArithmeticException(sb.toString());
        }
!!!502939.java!!!	makeValid() : void
        if (this.bignum == 0) {
            this.bignum = NativeBN.BN_new();
            Check(this.bignum != 0);
        }
!!!503067.java!!!	newBigInt() : BigInt
        BigInt bi = new BigInt();
        bi.bignum = NativeBN.BN_new();
        Check(bi.bignum != 0);
        return bi;
!!!503195.java!!!	cmp(inout a : BigInt, inout b : BigInt) : int
        return NativeBN.BN_cmp(a.bignum, b.bignum);
!!!503323.java!!!	putCopy(inout from : BigInt) : void
        this.makeValid();
        Check(NativeBN.BN_copy(this.bignum, from.bignum));
!!!503451.java!!!	copy() : BigInt
        BigInt bi = new BigInt();
        bi.putCopy(this);
        return bi;
!!!503579.java!!!	putLongInt(in val : long) : void
        this.makeValid();
        Check(NativeBN.putLongInt(this.bignum, val));
!!!503707.java!!!	putULongInt(in val : long, inout neg : boolean) : void
        this.makeValid();
        Check(NativeBN.putULongInt(this.bignum, val, neg));
!!!503835.java!!!	invalidBigInteger(inout s : String) : NumberFormatException
        throw new NumberFormatException("Invalid BigInteger: " + s);
!!!503963.java!!!	putDecString(inout original : String) : void
        String s = checkString(original, 10);
        this.makeValid();
        int usedLen = NativeBN.BN_dec2bn(this.bignum, s);
        Check((usedLen > 0));
        if (usedLen < s.length()) {
            throw invalidBigInteger(original);
        }
!!!504091.java!!!	putHexString(inout original : String) : void
        String s = checkString(original, 16);
        this.makeValid();
        int usedLen = NativeBN.BN_hex2bn(this.bignum, s);
        Check((usedLen > 0));
        if (usedLen < s.length()) {
            throw invalidBigInteger(original);
        }
!!!504219.java!!!	checkString(inout s : String, in base : int) : String
        if (s == null) {
            throw new NullPointerException("s == null");
        }
        // A valid big integer consists of an optional '-' or '+' followed by
        // one or more digit characters appropriate to the given base,
        // and no other characters.
        int charCount = s.length();
        int i = 0;
        if (charCount > 0) {
            char ch = s.charAt(0);
            if (ch == '+') {
                // Java supports leading +, but OpenSSL doesn't, so we need to strip it.
                s = s.substring(1);
                --charCount;
            } else if (ch == '-') {
                ++i;
            }
        }
        if (charCount - i == 0) {
            throw invalidBigInteger(s);
        }
        boolean nonAscii = false;
        for (; i < charCount; ++i) {
            char ch = s.charAt(i);
            if (Character.digit(ch, base) == -1) {
                throw invalidBigInteger(s);
            }
            if (ch > 128) {
                nonAscii = true;
            }
        }
        return nonAscii ? toAscii(s, base) : s;
!!!504347.java!!!	toAscii(inout s : String, in base : int) : String
        int length = s.length();
        StringBuilder result = new StringBuilder(length);
        for (int i = 0; i < length; ++i) {
            char ch = s.charAt(i);
            int value = Character.digit(ch, base);
            if (value >= 0 && value <= 9) {
                ch = (char) ('0' + value);
            }
            result.append(ch);
        }
        return result.toString();
!!!504475.java!!!	putBigEndian(inout a : byte, inout neg : boolean) : void
        this.makeValid();
        Check(NativeBN.BN_bin2bn(a, a.length, neg, this.bignum));
!!!504603.java!!!	putLittleEndianInts(inout a : int, inout neg : boolean) : void
        this.makeValid();
        Check(NativeBN.litEndInts2bn(a, a.length, neg, this.bignum));
!!!504731.java!!!	putBigEndianTwosComplement(inout a : byte) : void
        this.makeValid();
        Check(NativeBN.twosComp2bn(a, a.length, this.bignum));
!!!504859.java!!!	longInt() : long
        return NativeBN.longInt(this.bignum);
!!!504987.java!!!	decString() : String
        return NativeBN.BN_bn2dec(this.bignum);
!!!505115.java!!!	hexString() : String
        return NativeBN.BN_bn2hex(this.bignum);
!!!505243.java!!!	bigEndianMagnitude() : byte
        return NativeBN.BN_bn2bin(this.bignum);
!!!505371.java!!!	littleEndianIntsMagnitude() : int
        return NativeBN.bn2litEndInts(this.bignum);
!!!505499.java!!!	sign() : int
        return NativeBN.sign(this.bignum);
!!!505627.java!!!	setSign(in val : int) : void
        if (val > 0) {
            NativeBN.BN_set_negative(this.bignum, 0);
        } else {
            if (val < 0) NativeBN.BN_set_negative(this.bignum, 1);
        }
!!!505755.java!!!	twosCompFitsIntoBytes(in desiredByteCount : int) : boolean
        int actualByteCount = (NativeBN.bitLength(this.bignum) + 7) / 8;
        return actualByteCount <= desiredByteCount;
!!!505883.java!!!	bitLength() : int
        return NativeBN.bitLength(this.bignum);
!!!506011.java!!!	isBitSet(in n : int) : boolean
        return NativeBN.BN_is_bit_set(this.bignum, n);
!!!506139.java!!!	shift(inout a : BigInt, in n : int) : BigInt
        BigInt r = newBigInt();
        Check(NativeBN.BN_shift(r.bignum, a.bignum, n));
        return r;
!!!506267.java!!!	shift(in n : int) : void
        Check(NativeBN.BN_shift(this.bignum, this.bignum, n));
!!!506395.java!!!	addPositiveInt(in w : int) : void
        Check(NativeBN.BN_add_word(this.bignum, w));
!!!506523.java!!!	multiplyByPositiveInt(in w : int) : void
        Check(NativeBN.BN_mul_word(this.bignum, w));
!!!506651.java!!!	remainderByPositiveInt(inout a : BigInt, in w : int) : int
        int rem = NativeBN.BN_mod_word(a.bignum, w);
        Check(rem != -1);
        return rem;
!!!506779.java!!!	addition(inout a : BigInt, inout b : BigInt) : BigInt
        BigInt r = newBigInt();
        Check(NativeBN.BN_add(r.bignum, a.bignum, b.bignum));
        return r;
!!!506907.java!!!	add(inout a : BigInt) : void
        Check(NativeBN.BN_add(this.bignum, this.bignum, a.bignum));
!!!507035.java!!!	subtraction(inout a : BigInt, inout b : BigInt) : BigInt
        BigInt r = newBigInt();
        Check(NativeBN.BN_sub(r.bignum, a.bignum, b.bignum));
        return r;
!!!507163.java!!!	gcd(inout a : BigInt, inout b : BigInt) : BigInt
        BigInt r = newBigInt();
        Check(NativeBN.BN_gcd(r.bignum, a.bignum, b.bignum));
        return r;
!!!507291.java!!!	product(inout a : BigInt, inout b : BigInt) : BigInt
        BigInt r = newBigInt();
        Check(NativeBN.BN_mul(r.bignum, a.bignum, b.bignum));
        return r;
!!!507419.java!!!	bigExp(inout a : BigInt, inout p : BigInt) : BigInt
        // Sign of p is ignored!
        BigInt r = newBigInt();
        Check(NativeBN.BN_exp(r.bignum, a.bignum, p.bignum));
        return r;
!!!507547.java!!!	exp(inout a : BigInt, in p : int) : BigInt
        // Sign of p is ignored!
        BigInt power = new BigInt();
        power.putLongInt(p);
        return bigExp(a, power);
        // OPTIONAL:
        // int BN_sqr(BigInteger r, BigInteger a, BN_CTX ctx);
        // int BN_sqr(BIGNUM *r, const BIGNUM *a,BN_CTX *ctx);
!!!507675.java!!!	division(inout dividend : BigInt, inout divisor : BigInt, inout quotient : BigInt, inout remainder : BigInt) : void
        int quot, rem;
        if (quotient != null) {
            quotient.makeValid();
            quot = quotient.bignum;
        } else {
            quot = 0;
        }
        if (remainder != null) {
            remainder.makeValid();
            rem = remainder.bignum;
        } else {
            rem = 0;
        }
        Check(NativeBN.BN_div(quot, rem, dividend.bignum, divisor.bignum));
!!!507803.java!!!	modulus(inout a : BigInt, inout m : BigInt) : BigInt
        // Sign of p is ignored! ?
        BigInt r = newBigInt();
        Check(NativeBN.BN_nnmod(r.bignum, a.bignum, m.bignum));
        return r;
!!!507931.java!!!	modExp(inout a : BigInt, inout p : BigInt, inout m : BigInt) : BigInt
        // Sign of p is ignored!
        BigInt r = newBigInt();
        Check(NativeBN.BN_mod_exp(r.bignum, a.bignum, p.bignum, m.bignum));

        // OPTIONAL:
        // int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
        return r;
!!!508059.java!!!	modInverse(inout a : BigInt, inout m : BigInt) : BigInt
        BigInt r = newBigInt();
        Check(NativeBN.BN_mod_inverse(r.bignum, a.bignum, m.bignum));
        return r;
!!!508187.java!!!	generatePrimeDefault(in bitLength : int) : BigInt
        BigInt r = newBigInt();
        Check(NativeBN.BN_generate_prime_ex(r.bignum, bitLength, false, 0, 0, 0));
        return r;
!!!508315.java!!!	isPrime(in certainty : int) : boolean
        return NativeBN.BN_is_prime_ex(bignum, certainty, 0);
