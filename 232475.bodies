class SubAbstractList
!!!1164315.java!!!	SubAbstractList(inout list : AbstractList, in start : int, in end : int)
            fullList = list;
            modCount = fullList.modCount;
            offset = start;
            size = end - start;
!!!1164443.java!!!	add(in location : int, inout object : E) : void
            if (modCount == fullList.modCount) {
                if (location >= 0 && location <= size) {
                    fullList.add(location + offset, object);
                    size++;
                    modCount = fullList.modCount;
                } else {
                    throw new IndexOutOfBoundsException();
                }
            } else {
                throw new ConcurrentModificationException();
            }
!!!1164571.java!!!	addAll(in location : int, inout collection : Collection) : boolean
            if (modCount == fullList.modCount) {
                if (location >= 0 && location <= size) {
                    boolean result = fullList.addAll(location + offset,
                            collection);
                    if (result) {
                        size += collection.size();
                        modCount = fullList.modCount;
                    }
                    return result;
                }
                throw new IndexOutOfBoundsException();
            }
            throw new ConcurrentModificationException();
!!!1164699.java!!!	addAll(inout collection : Collection) : boolean
            if (modCount == fullList.modCount) {
                boolean result = fullList.addAll(offset + size, collection);
                if (result) {
                    size += collection.size();
                    modCount = fullList.modCount;
                }
                return result;
            }
            throw new ConcurrentModificationException();
!!!1164827.java!!!	get(in location : int) : E
            if (modCount == fullList.modCount) {
                if (location >= 0 && location < size) {
                    return fullList.get(location + offset);
                }
                throw new IndexOutOfBoundsException();
            }
            throw new ConcurrentModificationException();
!!!1164955.java!!!	iterator() : Iterator
            return listIterator(0);
!!!1165083.java!!!	listIterator(in location : int) : ListIterator
            if (modCount == fullList.modCount) {
                if (location >= 0 && location <= size) {
                    return new SubAbstractListIterator<E>(fullList
                            .listIterator(location + offset), this, offset,
                            size);
                }
                throw new IndexOutOfBoundsException();
            }
            throw new ConcurrentModificationException();
!!!1165211.java!!!	remove(in location : int) : E
            if (modCount == fullList.modCount) {
                if (location >= 0 && location < size) {
                    E result = fullList.remove(location + offset);
                    size--;
                    modCount = fullList.modCount;
                    return result;
                }
                throw new IndexOutOfBoundsException();
            }
            throw new ConcurrentModificationException();
!!!1165339.java!!!	removeRange(in start : int, in end : int) : void
            if (start != end) {
                if (modCount == fullList.modCount) {
                    fullList.removeRange(start + offset, end + offset);
                    size -= end - start;
                    modCount = fullList.modCount;
                } else {
                    throw new ConcurrentModificationException();
                }
            }
!!!1165467.java!!!	set(in location : int, inout object : E) : E
            if (modCount == fullList.modCount) {
                if (location >= 0 && location < size) {
                    return fullList.set(location + offset, object);
                }
                throw new IndexOutOfBoundsException();
            }
            throw new ConcurrentModificationException();
!!!1165595.java!!!	size() : int
            if (modCount == fullList.modCount) {
                return size;
            }
            throw new ConcurrentModificationException();
!!!1165723.java!!!	sizeChanged(inout increment : boolean) : void
            if (increment) {
                size++;
            } else {
                size--;
            }
            modCount = fullList.modCount;
