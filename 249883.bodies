class TimerHeap
!!!1381275.java!!!	minimum() : TimerTask
                return timers[0];
!!!1381403.java!!!	isEmpty() : boolean
                return size == 0;
!!!1381531.java!!!	insert(inout task : TimerTask) : void
                if (timers.length == size) {
                    TimerTask[] appendedTimers = new TimerTask[size * 2];
                    System.arraycopy(timers, 0, appendedTimers, 0, size);
                    timers = appendedTimers;
                }
                timers[size++] = task;
                upHeap();
!!!1381659.java!!!	delete(in pos : int) : void
                // posible to delete any position of the heap
                if (pos >= 0 && pos < size) {
                    timers[pos] = timers[--size];
                    timers[size] = null;
                    downHeap(pos);
                }
!!!1381787.java!!!	upHeap() : void
                int current = size - 1;
                int parent = (current - 1) / 2;

                while (timers[current].when < timers[parent].when) {
                    // swap the two
                    TimerTask tmp = timers[current];
                    timers[current] = timers[parent];
                    timers[parent] = tmp;

                    // update pos and current
                    current = parent;
                    parent = (current - 1) / 2;
                }
!!!1381915.java!!!	downHeap(in pos : int) : void
                int current = pos;
                int child = 2 * current + 1;

                while (child < size && size > 0) {
                    // compare the children if they exist
                    if (child + 1 < size
                            && timers[child + 1].when < timers[child].when) {
                        child++;
                    }

                    // compare selected child with parent
                    if (timers[current].when < timers[child].when) {
                        break;
                    }

                    // swap the two
                    TimerTask tmp = timers[current];
                    timers[current] = timers[child];
                    timers[child] = tmp;

                    // update pos and current
                    current = child;
                    child = 2 * current + 1;
                }
!!!1382043.java!!!	reset() : void
                timers = new TimerTask[DEFAULT_HEAP_SIZE];
                size = 0;
!!!1382171.java!!!	adjustMinimum() : void
                downHeap(0);
!!!1382299.java!!!	deleteIfCancelled() : void
                for (int i = 0; i < size; i++) {
                    if (timers[i].cancelled) {
                        deletedCancelledNumber++;
                        delete(i);
                        // re-try this point
                        i--;
                    }
                }
!!!1382427.java!!!	getTask(inout task : TimerTask) : int
                for (int i = 0; i < timers.length; i++) {
                    if (timers[i] == task) {
                        return i;
                    }
                }
                return -1;
