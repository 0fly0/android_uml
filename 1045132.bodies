class AbsActionBarView
!!!5643276.java!!!	AbsActionBarView(inout context : Context)
        super(context);
!!!5643404.java!!!	AbsActionBarView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!5643532.java!!!	AbsActionBarView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
!!!5643660.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        super.onConfigurationChanged(newConfig);

        // Action bar can change size on configuration changes.
        // Reread the desired height from the theme-specified style.
        TypedArray a = getContext().obtainStyledAttributes(null, R.styleable.ActionBar,
                com.android.internal.R.attr.actionBarStyle, 0);
        setContentHeight(a.getLayoutDimension(R.styleable.ActionBar_height, 0));
        a.recycle();
        if (mSplitWhenNarrow) {
            setSplitActionBar(getContext().getResources().getBoolean(
                    com.android.internal.R.bool.split_action_bar_is_narrow));
        }
        if (mActionMenuPresenter != null) {
            mActionMenuPresenter.onConfigurationChanged(newConfig);
        }
!!!5643788.java!!!	setSplitActionBar(inout split : boolean) : void
        mSplitActionBar = split;
!!!5643916.java!!!	setSplitWhenNarrow(inout splitWhenNarrow : boolean) : void
        mSplitWhenNarrow = splitWhenNarrow;
!!!5644044.java!!!	setContentHeight(in height : int) : void
        mContentHeight = height;
        if (mMenuView != null) {
            mMenuView.setMaxItemHeight(mContentHeight);
        }
        requestLayout();
!!!5644172.java!!!	getContentHeight() : int
        return mContentHeight;
!!!5644300.java!!!	setSplitView(inout splitView : ActionBarContainer) : void
        mSplitView = splitView;
!!!5644428.java!!!	getAnimatedVisibility() : int
        if (mVisibilityAnim != null) {
            return mVisAnimListener.mFinalVisibility;
        }
        return getVisibility();
!!!5644556.java!!!	animateToVisibility(in visibility : int) : void
        if (mVisibilityAnim != null) {
            mVisibilityAnim.cancel();
        }
        if (visibility == VISIBLE) {
            if (getVisibility() != VISIBLE) {
                setAlpha(0);
                if (mSplitView != null && mMenuView != null) {
                    mMenuView.setAlpha(0);
                }
            }
            ObjectAnimator anim = ObjectAnimator.ofFloat(this, "alpha", 1);
            anim.setDuration(FADE_DURATION);
            anim.setInterpolator(sAlphaInterpolator);
            if (mSplitView != null && mMenuView != null) {
                AnimatorSet set = new AnimatorSet();
                ObjectAnimator splitAnim = ObjectAnimator.ofFloat(mMenuView, "alpha", 1);
                splitAnim.setDuration(FADE_DURATION);
                set.addListener(mVisAnimListener.withFinalVisibility(visibility));
                set.play(anim).with(splitAnim);
                set.start();
            } else {
                anim.addListener(mVisAnimListener.withFinalVisibility(visibility));
                anim.start();
            }
        } else {
            ObjectAnimator anim = ObjectAnimator.ofFloat(this, "alpha", 0);
            anim.setDuration(FADE_DURATION);
            anim.setInterpolator(sAlphaInterpolator);
            if (mSplitView != null && mMenuView != null) {
                AnimatorSet set = new AnimatorSet();
                ObjectAnimator splitAnim = ObjectAnimator.ofFloat(mMenuView, "alpha", 0);
                splitAnim.setDuration(FADE_DURATION);
                set.addListener(mVisAnimListener.withFinalVisibility(visibility));
                set.play(anim).with(splitAnim);
                set.start();
            } else {
                anim.addListener(mVisAnimListener.withFinalVisibility(visibility));
                anim.start();
            }
        }
!!!5644684.java!!!	setVisibility(in visibility : int) : void
        if (visibility != getVisibility()) {
            if (mVisibilityAnim != null) {
                mVisibilityAnim.end();
            }
            super.setVisibility(visibility);
        }
!!!5644812.java!!!	showOverflowMenu() : boolean
        if (mActionMenuPresenter != null) {
            return mActionMenuPresenter.showOverflowMenu();
        }
        return false;
!!!5644940.java!!!	postShowOverflowMenu() : void
        post(new Runnable() {
            public void run() {
                showOverflowMenu();
            }
        });
!!!5645068.java!!!	hideOverflowMenu() : boolean
        if (mActionMenuPresenter != null) {
            return mActionMenuPresenter.hideOverflowMenu();
        }
        return false;
!!!5645196.java!!!	isOverflowMenuShowing() : boolean
        if (mActionMenuPresenter != null) {
            return mActionMenuPresenter.isOverflowMenuShowing();
        }
        return false;
!!!5645324.java!!!	isOverflowReserved() : boolean
        return mActionMenuPresenter != null && mActionMenuPresenter.isOverflowReserved();
!!!5645452.java!!!	dismissPopupMenus() : void
        if (mActionMenuPresenter != null) {
            mActionMenuPresenter.dismissPopupMenus();
        }
!!!5645580.java!!!	measureChildView(inout child : View, in availableWidth : int, in childSpecHeight : int, in spacing : int) : int
        child.measure(MeasureSpec.makeMeasureSpec(availableWidth, MeasureSpec.AT_MOST),
                childSpecHeight);

        availableWidth -= child.getMeasuredWidth();
        availableWidth -= spacing;

        return Math.max(0, availableWidth);
!!!5645708.java!!!	next(in x : int, in val : int, inout isRtl : boolean) : int
        return isRtl ? x - val : x + val;
!!!5645836.java!!!	positionChild(inout child : View, in x : int, in y : int, in contentHeight : int, inout reverse : boolean) : int
        int childWidth = child.getMeasuredWidth();
        int childHeight = child.getMeasuredHeight();
        int childTop = y + (contentHeight - childHeight) / 2;

        if (reverse) {
            child.layout(x - childWidth, childTop, x, childTop + childHeight);
        } else {
            child.layout(x, childTop, x + childWidth, childTop + childHeight);
        }

        return  (reverse ? -childWidth : childWidth);
