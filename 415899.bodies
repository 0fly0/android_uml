class ReflectionTest
!!!2789531.java!!!	testGenericSuperclassToString() : void
        assertEquals("java.util.ArrayList<" + classA + ">",
                AList.class.getGenericSuperclass().toString());
!!!2789659.java!!!	testClassGetName() : void
        assertEquals("int", int.class.getName());
        assertEquals("[I", int[].class.getName());
        assertEquals("java.lang.String", String.class.getName());
        assertEquals("[Ljava.lang.String;", String[].class.getName());
        assertEquals("libcore.java.lang.reflect.ReflectionTest", getClass().getName());
        assertEquals(getClass().getName() + "$A", A.class.getName());
        assertEquals(getClass().getName() + "$B", B.class.getName());
        assertEquals(getClass().getName() + "$DefinesMember", DefinesMember.class.getName());
!!!2789787.java!!!	testClassGetCanonicalName() : void
        assertEquals("int", int.class.getCanonicalName());
        assertEquals("int[]", int[].class.getCanonicalName());
        assertEquals("java.lang.String", String.class.getCanonicalName());
        assertEquals("java.lang.String[]", String[].class.getCanonicalName());
        assertEquals("libcore.java.lang.reflect.ReflectionTest", getClass().getCanonicalName());
        assertEquals(getClass().getName() + ".A", A.class.getCanonicalName());
        assertEquals(getClass().getName() + ".B", B.class.getCanonicalName());
        assertEquals(getClass().getName() + ".DefinesMember",
                DefinesMember.class.getCanonicalName());
!!!2789915.java!!!	testFieldToString() : void
        Field fieldOne = C.class.getDeclaredField("fieldOne");
        String fieldOneRaw = "public static " + classA + " " + classC + ".fieldOne";
        assertEquals(fieldOneRaw, fieldOne.toString());
        assertEquals(fieldOneRaw, fieldOne.toGenericString());

        Field fieldTwo = C.class.getDeclaredField("fieldTwo");
        assertEquals("private transient volatile java.util.Map " + classC + ".fieldTwo",
                fieldTwo.toString());
        assertEquals("private transient volatile java.util.Map<" + classA + ", java.lang.String> "
                + classC + ".fieldTwo", fieldTwo.toGenericString());

        Field fieldThree = C.class.getDeclaredField("fieldThree");
        String fieldThreeRaw = "protected java.lang.Object[] " + classC + ".fieldThree";
        assertEquals(fieldThreeRaw, fieldThree.toString());
        String fieldThreeGeneric = "protected K[] " + classC + ".fieldThree";
        assertEquals(fieldThreeGeneric, fieldThree.toGenericString());

        Field fieldFour = C.class.getDeclaredField("fieldFour");
        String fieldFourRaw = "java.util.Map " + classC + ".fieldFour";
        assertEquals(fieldFourRaw, fieldFour.toString());
        String fieldFourGeneric = "java.util.Map<? super java.lang.Integer, java.lang.Integer[]> "
                + classC + ".fieldFour";
        assertEquals(fieldFourGeneric, fieldFour.toGenericString());

        Field fieldFive = C.class.getDeclaredField("fieldFive");
        String fieldFiveRaw = "java.lang.String[][][][][] " + classC + ".fieldFive";
        assertEquals(fieldFiveRaw, fieldFive.toString());
        assertEquals(fieldFiveRaw, fieldFive.toGenericString());
!!!2790043.java!!!	testConstructorToString() : void
        Constructor constructorOne = C.class.getDeclaredConstructor(A.class);
        String constructorOneRaw = classC + "(" + classA + ") throws " + classB;
        assertEquals(constructorOneRaw, constructorOne.toString());
        assertEquals(constructorOneRaw, constructorOne.toGenericString());

        Constructor constructorTwo = C.class.getDeclaredConstructor(Map.class, Object.class);
        String constructorTwoRaw = "protected " + classC + "(java.util.Map,java.lang.Object)";
        assertEquals(constructorTwoRaw, constructorTwo.toString());
        String constructorTwoGeneric = "protected <T1> " + classC
                + "(java.util.Map<? super " + classA + ", T1>,K)";
        assertEquals(constructorTwoGeneric, constructorTwo.toGenericString());
!!!2790171.java!!!	testMethodToString() : void
        Method methodOne = C.class.getDeclaredMethod("methodOne", A.class, C.class);
        String methodOneRaw = "protected final synchronized " + classA + " "
                + classC + ".methodOne(" + classA + "," + classC + ") throws " + classB;
        assertEquals(methodOneRaw, methodOne.toString());
        assertEquals(methodOneRaw, methodOne.toGenericString());

        Method methodTwo = C.class.getDeclaredMethod("methodTwo", List.class);
        String methodTwoRaw = "public abstract java.util.Map "
                + classC + ".methodTwo(java.util.List)";
        assertEquals(methodTwoRaw, methodTwo.toString());
        String methodTwoGeneric = "public abstract java.util.Map<" + classA + ", java.lang.String> "
                + classC + ".methodTwo(java.util.List<" + classA + ">)";
        assertEquals(methodTwoGeneric, methodTwo.toGenericString());

        Method methodThree = C.class.getDeclaredMethod("methodThree", A.class, Set.class);
        String methodThreeRaw = "private static java.util.Map "
                + classC + ".methodThree(" + classA + ",java.util.Set)";
        assertEquals(methodThreeRaw, methodThree.toString());
        String methodThreeGeneric = "private static <T1,T2> java.util.Map<T1, ?> "
                + classC + ".methodThree(T1,java.util.Set<? super T2>)";
        assertEquals(methodThreeGeneric, methodThree.toGenericString());

        Method methodFour = C.class.getDeclaredMethod("methodFour", Set.class);
        String methodFourRaw = "public java.lang.Comparable " + classC + ".methodFour(java.util.Set)";
        assertEquals(methodFourRaw, methodFour.toString());
        String methodFourGeneric = "public <T> T " + classC + ".methodFour(java.util.Set<T>)";
        assertEquals(methodFourGeneric, methodFour.toGenericString());
!!!2790299.java!!!	testTypeVariableWithMultipleBounds() : void
        TypeVariable t = C.class.getDeclaredMethod("methodFour", Set.class).getTypeParameters()[0];
        assertEquals("T", t.toString());

        Type[] bounds = t.getBounds();
        ParameterizedType comparableT = (ParameterizedType) bounds[0];
        assertEquals(Comparable.class, comparableT.getRawType());
        assertEquals("T", ((TypeVariable) comparableT.getActualTypeArguments()[0]).getName());
        assertEquals(3, bounds.length);
        assertEquals(Serializable.class, bounds[1]);
        assertEquals(RandomAccess.class, bounds[2]);
!!!2790427.java!!!	testGetFieldNotFound() : void
        try {
            D.class.getField("noField");
            fail();
        } catch (NoSuchFieldException expected) {
        }
!!!2790555.java!!!	testGetDeclaredFieldNotFound() : void
        try {
            D.class.getDeclaredField("noField");
            fail();
        } catch (NoSuchFieldException expected) {
        }
!!!2790683.java!!!	testGetFieldNull() : void
        try {
            D.class.getField(null);
            fail();
        } catch (NullPointerException expected) {
        }
!!!2790811.java!!!	testGetDeclaredFieldNull() : void
        try {
            D.class.getDeclaredField(null);
            fail();
        } catch (NullPointerException expected) {
        }
!!!2790939.java!!!	testGetFieldIsRecursive() : void
        Field field = D.class.getField("fieldOne");
        assertEquals(C.class, field.getDeclaringClass());
!!!2791067.java!!!	testGetDeclaredFieldIsNotRecursive() : void
        try {
            D.class.getDeclaredField("fieldOne");
            fail();
        } catch (NoSuchFieldException expected) {
        }
!!!2791195.java!!!	testGetFieldIsPublicOnly() : void
        C.class.getField("fieldOne"); // public
        try {
            C.class.getField("fieldTwo"); // private
            fail();
        } catch (NoSuchFieldException expected) {
        }
        try {
            C.class.getField("fieldThree"); // protected
            fail();
        } catch (NoSuchFieldException expected) {
        }
        try {
            C.class.getField("fieldFour"); // package-private
            fail();
        } catch (NoSuchFieldException expected) {
        }
!!!2791323.java!!!	testGetDeclaredFieldIsAllVisibilities() : void
        C.class.getDeclaredField("fieldOne"); // public
        C.class.getDeclaredField("fieldTwo"); // private
        C.class.getDeclaredField("fieldThree"); // protected
        C.class.getDeclaredField("fieldFour"); // package-private
!!!2791451.java!!!	testGetFieldViaExtendsThenImplements() : void
        Field field = ExtendsImplementsDefinesMember.class.getField("field");
        assertEquals(DefinesMember.class, field.getDeclaringClass());
!!!2791579.java!!!	testGetFieldViaImplementsThenExtends() : void
        Field field = ImplementsExtendsDefinesMember.class.getField("field");
        assertEquals(DefinesMember.class, field.getDeclaringClass());
!!!2791707.java!!!	testGetFieldsViaExtendsThenImplements() : void
        Field[] fields = ExtendsImplementsDefinesMember.class.getFields();
        assertTrue(names(fields).contains("field"));
!!!2791835.java!!!	testGetFieldsViaImplementsThenExtends() : void
        Field[] fields = ImplementsExtendsDefinesMember.class.getFields();
        assertTrue(names(fields).contains("field"));
!!!2791963.java!!!	testGetMethodViaExtendsThenImplements() : void
        Method method = ExtendsImplementsDefinesMember.class.getMethod("method");
        assertEquals(DefinesMember.class, method.getDeclaringClass());
!!!2792091.java!!!	testGetMethodViaImplementsThenExtends() : void
        Method method = ImplementsExtendsDefinesMember.class.getMethod("method");
        assertEquals(DefinesMember.class, method.getDeclaringClass());
!!!2792219.java!!!	testGetMethodsViaExtendsThenImplements() : void
        Method[] methods = ExtendsImplementsDefinesMember.class.getMethods();
        assertTrue(names(methods).contains("method"));
!!!2792347.java!!!	testGetMethodsViaImplementsThenExtends() : void
        Method[] methods = ImplementsExtendsDefinesMember.class.getMethods();
        assertTrue(names(methods).contains("method"));
!!!2792475.java!!!	testGetMethodsContainsNoDuplicates() : void
        Method[] methods = ExtendsAndImplementsDefinesMember.class.getMethods();
        assertEquals(1, count(names(methods), "method"));
!!!2792603.java!!!	testGetFieldsContainsNoDuplicates() : void
        Field[] fields = ExtendsAndImplementsDefinesMember.class.getFields();
        assertEquals(1, count(names(fields), "field"));
!!!2792731.java!!!	testClassIsEnum() : void
        Class<?> trafficClass = TrafficLights.class;
        Class<?> redClass = TrafficLights.RED.getClass();
        Class<?> yellowClass = TrafficLights.YELLOW.getClass();
        Class<?> greenClass = TrafficLights.GREEN.getClass();
        assertSame(trafficClass, redClass);
        assertNotSame(trafficClass, yellowClass);
        assertNotSame(trafficClass, greenClass);
        assertNotSame(yellowClass, greenClass);
        assertTrue(trafficClass.isEnum());
        assertTrue(redClass.isEnum());
        assertFalse(yellowClass.isEnum());
        assertFalse(greenClass.isEnum());
        assertNotNull(trafficClass.getEnumConstants());
        assertNull(yellowClass.getEnumConstants());
        assertNull(greenClass.getEnumConstants());
!!!2794011.java!!!	names(inout methods : Member) : List
        List<String> result = new ArrayList<String>();
        for (Member method : methods) {
            result.add(method.getName());
        }
        return result;
!!!2794139.java!!!	count(inout list : List, inout element : Object) : int
        int result = 0;
        for (Object o : list) {
            if (o.equals(element)) {
                result++;
            }
        }
        return result;
