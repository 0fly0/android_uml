class OmxVideoProcessor
!!!11170828.cpp!!!	OmxVideoProcessor()
  mIsInputComponent = OMX_TRUE;
!!!11170956.cpp!!!	OmxVideoProcessor(in name : OMX_STRING)
  strncpy(mName, name, OMX_MAX_STRINGNAME_SIZE);
  mIsInputComponent = OMX_TRUE;
!!!11171084.cpp!!!	~OmxVideoProcessor()
  OMX_LOGD("destroyed");
!!!11171212.cpp!!!	initRole() : OMX_ERRORTYPE
  if (strncmp(mName, kCompNamePrefix, kCompNamePrefixLength)) {
    return OMX_ErrorInvalidComponentName;
  }
  char * role_name = mName + kCompNamePrefixLength;
  if (!strncmp(role_name, OMX_ROLE_IV_PROCESSOR_YUV,
      strlen(OMX_ROLE_IV_PROCESSOR_YUV))) {
    addRole(OMX_ROLE_IV_PROCESSOR_YUV);
  } else {
    return OMX_ErrorInvalidComponentName;
  }
  return OMX_ErrorNone;
!!!11171340.cpp!!!	initPort() : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  mInputPort= new OmxAmpVideoPort(kVideoPortStartNumber, OMX_DirInput);
  addPort(mInputPort);
  mOutputPort = new OmxAmpVideoPort(kVideoPortStartNumber + 1, OMX_DirOutput);
  addPort(mOutputPort);
  return err;
!!!11171468.cpp!!!	componentDeInit(in hComponent : OMX_HANDLETYPE) : OMX_ERRORTYPE
  // ASSERT(hComponent != NULL)
  OmxComponent *comp = reinterpret_cast<OmxComponent *>(
      reinterpret_cast<OMX_COMPONENTTYPE *>(hComponent)->pComponentPrivate);
  OmxVideoProcessor *processor = static_cast<OmxVideoProcessor *>(comp);
  delete processor;
  return OMX_ErrorNone;
!!!11171596.cpp!!!	getParameter(in index : OMX_INDEXTYPE, in params : OMX_PTR) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  switch (index) {
    case OMX_IndexParamVideoPortFormat: {
      OMX_VIDEO_PARAM_PORTFORMATTYPE* video_param =
          reinterpret_cast<OMX_VIDEO_PARAM_PORTFORMATTYPE *>(params);
      err = CheckOmxHeader(video_param);
      if (OMX_ErrorNone != err) {
        break;
      }
      OmxPortImpl *port = getPort(video_param->nPortIndex);
      if (NULL == port) {
        err = OMX_ErrorBadPortIndex;
        break;
      }
      if (port->getDomain() == OMX_PortDomainVideo) {
         *video_param = port->getVideoParam();
      }
      break;
    }
    default:
      return OmxComponentImpl::getParameter(index, params);
  }
  return err;
!!!11171852.cpp!!!	getConfig(in index : OMX_INDEXTYPE, in config : OMX_PTR) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  OMX_LOGD("%s, index 0x%x, config %p", __func__, index, config);
  switch (index) {
    case OMX_IndexConfigCommonRotate:
    case OMX_IndexConfigCommonMirror:
    case OMX_IndexConfigCommonInputCrop:
      break;
    default:
      return OmxComponentImpl::getConfig(index, config);
  }
  return err;
!!!11172108.cpp!!!	getVideoPlane() : OMX_S32
  OmxPortImpl *port = getPort(kVideoPortStartNumber + 1);
  OmxComponentImpl *pComp =  static_cast<OmxComponentImpl *>(
      static_cast<OMX_COMPONENTTYPE *>(
          port->getTunnelComponent())->pComponentPrivate);
  if (NULL != strstr(pComp->mName, "video_scheduler") ||
      NULL != strstr(pComp->mName, "iv_renderer")) {
    return static_cast<OmxVoutProxy *>(pComp)->getVideoPlane();
  }
  return -1;
!!!11172236.cpp!!!	createComponent(inout handle : OMX_HANDLETYPE, in componentName : OMX_STRING, in appData : OMX_PTR, inout callBacks : OMX_CALLBACKTYPE) : OMX_ERRORTYPE
  OmxVideoProcessor* comp = new OmxVideoProcessor(componentName);
  *handle = comp->makeComponent(comp);
  comp->setCallbacks(callBacks, appData);
  comp->componentInit();
  return OMX_ErrorNone;
