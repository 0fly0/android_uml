class MathContextTest
!!!2795163.java!!!	testConstructor() : void
        // All the rounding modes.
        for (RoundingMode rm : RoundingMode.values()) {
            MathContext mc = new MathContext("precision=1 roundingMode=" + rm);
            assertEquals(1, mc.getPrecision());
            assertEquals(rm, mc.getRoundingMode());
        }

        // A few precisions.
        for (int p = 0; p < 10; ++p) {
            MathContext mc = new MathContext("precision=" + p + " roundingMode=" + RoundingMode.UP);
            assertEquals(p, mc.getPrecision());
            assertEquals(RoundingMode.UP, mc.getRoundingMode());
        }

        // Case-sensitive keywords.
        new MathContext("precision=1 roundingMode=UP");
        try {
            new MathContext("Precision=1 roundingMode=UP");
            fail();
        } catch (IllegalArgumentException expected) {
        }
        try {
            new MathContext("precision=1 RoundingMode=UP");
            fail();
        } catch (IllegalArgumentException expected) {
        }

        // Case-sensitive rounding modes.
        try {
            new MathContext("precision=1 roundingMode=up");
            fail();
        } catch (IllegalArgumentException expected) {
        }

        // Exactly one space (U+0020).
        try {
            new MathContext("precision=1roundingMode=UP");
            fail();
        } catch (IllegalArgumentException expected) {
        }
        try {
            new MathContext("precision=1  roundingMode=UP");
            fail();
        } catch (IllegalArgumentException expected) {
        }
        try {
            new MathContext("precision=1\troundingMode=UP");
            fail();
        } catch (IllegalArgumentException expected) {
        }

        // No leading or trailing space.
        try {
            new MathContext(" precision=1 roundingMode=UP");
            fail();
        } catch (IllegalArgumentException expected) {
        }
        try {
            new MathContext("precision=1 roundingMode=UP ");
            fail();
        } catch (IllegalArgumentException expected) {
        }
