class SamplingProfiler
!!!15469196.java!!!	SamplingProfiler(in depth : int, inout threadSet : ThreadSet)
        this.depth = depth;
        this.threadSet = threadSet;
        this.threadSampler = findDefaultThreadSampler();
        threadSampler.setDepth(depth);
        hprofData.setFlags(BinaryHprof.ControlSettings.CPU_SAMPLING.bitmask);
        hprofData.setDepth(depth);
!!!15469324.java!!!	findDefaultThreadSampler() : ThreadSampler
        if ("Dalvik Core Library".equals(System.getProperty("java.specification.name"))) {
            String className = "dalvik.system.profiler.DalvikThreadSampler";
            try {
                return (ThreadSampler) Class.forName(className).newInstance();
            } catch (Exception e) {
                System.out.println("Problem creating " + className + ": " + e);
            }
        }
        return new PortableThreadSampler();
!!!15469580.java!!!	newArrayThreadSet(inout  : Thread...threads) : ThreadSet
        return new ArrayThreadSet(threads);
!!!15469964.java!!!	newThreadGroupTheadSet(inout threadGroup : ThreadGroup) : ThreadSet
        return new ThreadGroupThreadSet(threadGroup);
!!!15470476.java!!!	start(in interval : int) : void
        if (interval < 1) {
            throw new IllegalArgumentException("interval < 1");
        }
        if (sampler != null) {
            throw new IllegalStateException("profiling already started");
        }
        sampler = new Sampler();
        hprofData.setStartMillis(System.currentTimeMillis());
        timer.scheduleAtFixedRate(sampler, 0, interval);
!!!15470604.java!!!	stop() : void
        if (sampler == null) {
            return;
        }
        synchronized(sampler) {
            sampler.stop = true;
            while (!sampler.stopped) {
                try {
                    sampler.wait();
                } catch (InterruptedException ignored) {
                }
            }
        }
        sampler = null;
!!!15470732.java!!!	shutdown() : void
        stop();
        timer.cancel();
!!!15470860.java!!!	getHprofData() : HprofData
        if (sampler != null) {
            throw new IllegalStateException("cannot access hprof data while sampling");
        }
        return hprofData;
