class OmxVideoEncoder
!!!11167628.cpp!!!	OmxVideoEncoder(in name : OMX_STRING)
  strncpy(mName, name, OMX_MAX_STRINGNAME_SIZE);
  mEOS = OMX_FALSE;
  mOutputEOS = OMX_FALSE;
  mProfileLevelNum = 0;
!!!11167756.cpp!!!	~OmxVideoEncoder()
  destroyAmpVenc();
!!!11167884.cpp!!!	initRole() : OMX_ERRORTYPE
  if (strncmp(mName, kCompNamePrefix, kCompNamePrefixLength)) {
    return OMX_ErrorInvalidComponentName;
  }
  char *role_name = mName + kCompNamePrefixLength;
  if (!strncmp(role_name, OMX_ROLE_VIDEO_ENCODER_AVC,
               strlen(OMX_ROLE_VIDEO_ENCODER_AVC))) {
    addRole(OMX_ROLE_VIDEO_ENCODER_AVC);
  } else if (!strncmp(role_name, OMX_ROLE_VIDEO_ENCODER_VP8,
                      strlen(OMX_ROLE_VIDEO_ENCODER_VP8))) {
    addRole(OMX_ROLE_VIDEO_ENCODER_VP8);
  } else if (!strncmp(role_name, OMX_ROLE_VIDEO_ENCODER_MPEG4,
                      strlen(OMX_ROLE_VIDEO_ENCODER_MPEG4))) {
    addRole(OMX_ROLE_VIDEO_ENCODER_MPEG4);
  } else if (!strncmp(role_name, OMX_ROLE_VIDEO_ENCODER_H263,
                      strlen(OMX_ROLE_VIDEO_ENCODER_H263))) {
    addRole(OMX_ROLE_VIDEO_ENCODER_H263);
  } else if (!strncmp(role_name, "video_encoder", 13)) {
    addRole(OMX_ROLE_VIDEO_ENCODER_AVC);
    addRole(OMX_ROLE_VIDEO_ENCODER_VP8);
    addRole(OMX_ROLE_VIDEO_ENCODER_H263);
    addRole(OMX_ROLE_VIDEO_ENCODER_MPEG4);
  } else {
    return OMX_ErrorInvalidComponentName;
  }
  return OMX_ErrorNone;
!!!11168012.cpp!!!	initPort() : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  mInputPort = new OmxVideoEncoderInputPort(kVideoPortStartNumber);
  addPort(mInputPort);
  mOutputPort = new OmxVideoEncoderOutputPort(kVideoPortStartNumber + 1);
  addPort(mOutputPort);
  OMX_VIDEO_PORTDEFINITIONTYPE &out_def = mOutputPort->getVideoDefinition();
  OMX_LOGD("role %s", mActiveRole);
  if (!strncmp(mActiveRole, OMX_ROLE_VIDEO_ENCODER_AVC, 17)) {
    out_def.eCompressionFormat = OMX_VIDEO_CodingAVC;
    InitOmxHeader(mCodecParam.avc);
    mCodecParam.avc.eProfile = OMX_VIDEO_AVCProfileBaseline;
    mCodecParam.avc.eLevel = OMX_VIDEO_AVCLevel1;
    mProfileLevelPtr = kAvcEncProfileLevel;
    mProfileLevelNum = NELM(kAvcEncProfileLevel);
  } else  if (!strncmp(mActiveRole, OMX_ROLE_VIDEO_ENCODER_MPEG4, 19)) {
    out_def.eCompressionFormat = OMX_VIDEO_CodingMPEG4;
    InitOmxHeader(mCodecParam.mpeg4);
    mCodecParam.mpeg4.eProfile = OMX_VIDEO_MPEG4ProfileSimple;
    mCodecParam.mpeg4.eLevel = OMX_VIDEO_MPEG4Level0;
    mProfileLevelPtr = kMpeg4EncProfileLevel;
    mProfileLevelNum = NELM(kMpeg4EncProfileLevel);
  } else if (!strncmp(mActiveRole, OMX_ROLE_VIDEO_ENCODER_H263, 18)) {
    out_def.eCompressionFormat = OMX_VIDEO_CodingH263;
    InitOmxHeader(mCodecParam.h263);
    mCodecParam.h263.eProfile = OMX_VIDEO_H263ProfileBaseline;
    mCodecParam.h263.eLevel = OMX_VIDEO_H263Level10;
    mProfileLevelPtr = kH263EncProfileLevel;
    mProfileLevelNum = NELM(kH263EncProfileLevel);
  } else if (!strncmp(mActiveRole, OMX_ROLE_VIDEO_ENCODER_VP8, 17)) {
    out_def.eCompressionFormat = OMX_VIDEO_CodingVP8;
  }
  return err;
!!!11168140.cpp!!!	componentDeInit(in hComponent : OMX_HANDLETYPE) : OMX_ERRORTYPE
  OmxComponent *comp = reinterpret_cast<OmxComponent *>(
      reinterpret_cast<OMX_COMPONENTTYPE *>(hComponent)->pComponentPrivate);
  OmxVideoEncoder *processor = static_cast<OmxVideoEncoder *>(comp);
  delete processor;
  return OMX_ErrorNone;
!!!11168524.cpp!!!	getConfig(in index : OMX_INDEXTYPE, in config : OMX_PTR) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  OMX_LOGD("%s, index 0x%x, config %p", __func__, index, config);
  switch (index) {
    case OMX_IndexConfigVideoFramerate:
    case OMX_IndexConfigVideoBitrate:
      break;
    default:
      return OmxComponentImpl::getConfig(index, config);
  }
  return err;
!!!11168780.cpp!!!	prepare() : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  err = createAmpVenc();
  CHECKAMPERR(err);
  AMP_COMPONENT_CONFIG config;
  kdMemset(&config, 0 ,sizeof(config));
  config._d = AMP_COMPONENT_VENC;
  if (mOutputPort->isTunneled()) {
    config._u.pADEC.mode = AMP_TUNNEL;
  } else {
    config._u.pADEC.mode = AMP_NON_TUNNEL;
  }
  OMX_VIDEO_PORTDEFINITIONTYPE &video_def = mInputPort->getVideoDefinition();
  config._u.pVENC.uiWidth = video_def.nFrameWidth;
  config._u.pVENC.uiHeight = video_def.nFrameHeight;
  config._u.pVENC.uiColorFmt = getAmpColorFormat(video_def.eColorFormat);
  assert(video_def.nFrameWidth != 0);
  assert(video_def.nFrameHeight != 0);
  OMX_LOGD("amp color format %d", config._u.pVENC.uiColorFmt);
  OMX_VIDEO_PORTDEFINITIONTYPE &out_def = mOutputPort->getVideoDefinition();
  config._u.pVENC.uiCodingFmt = getAmpVideoCodecType(out_def.eCompressionFormat);
  config._u.pVENC.uiEncMode = AMP_VENC_MODE_EXPRESS;
  config._u.pVENC.uiInitQp = 10; //[0 ~ 100]
  config._u.pVENC.uiGopSize = 30;
  config._u.pVENC.uiGopType = AMP_RCGOP_IP;
  config._u.pVENC.uiH264Profile = 0; // VENC_PROFILE_MAIN
  config._u.pVENC.uiH264Level = 0; // VENC_LEVEL_4_0
  config._u.pVENC.uiFrameRateNum = 30;
  config._u.pVENC.uiFrameRateDen = 1;
  config._u.pVENC.uiRateCtrlSel = 9;
  config._u.pVENC.uiVBVSize = 0;
  config._u.pVENC.uiHRDBitRate = 0;
  AMP_RPC(err, AMP_VENC_Open, mAmpHandle, &config);
  static_cast<OmxVideoEncoderPort *>(mInputPort)->setAmpHandle(mAmpHandle);
  static_cast<OmxVideoEncoderPort *>(mOutputPort)->setAmpHandle(mAmpHandle);

  if (!mInputPort->isTunneled()) {
    err = AMP_ConnectApp(mAmpHandle, AMP_PORT_INPUT, 0, bufferCb, this);
    CHECKAMPERR(err);
  }
  if (!mOutputPort->isTunneled()) {
    err = AMP_ConnectApp(mAmpHandle, AMP_PORT_OUTPUT, 0, bufferCb, this);
    CHECKAMPERR(err);
  }
  VENC_TRACE("Exit");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11168908.cpp!!!	preroll() : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  return err;
!!!11169036.cpp!!!	start() : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  err = registerBds(static_cast<OmxVideoEncoderPort *>(mInputPort));
  CHECKAMPERR(err);
  err = registerBds(static_cast<OmxVideoEncoderPort *>(mOutputPort));
  CHECKAMPERR(err);
  AMP_RPC(err, AMP_VENC_SetState, mAmpHandle, AMP_EXECUTING);
  CHECKAMPERR(err);
  mAmpState = AMP_EXECUTING;
  VENC_TRACE("Exit");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11169164.cpp!!!	pause() : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VENC_SetState, mAmpHandle, AMP_PAUSED);
  CHECKAMPERR(err);
  mAmpState = AMP_PAUSED;
  VENC_TRACE("Exit");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11169292.cpp!!!	resume() : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VENC_SetState, mAmpHandle, AMP_EXECUTING);
  CHECKAMPERR(err);
  mAmpState = AMP_EXECUTING;
  VENC_TRACE("Exit");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11169420.cpp!!!	stop() : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VENC_SetState, mAmpHandle, AMP_IDLE);
  CHECKAMPERR(err);
  mAmpState = AMP_IDLE;
  err = unregisterBds(static_cast<OmxVideoEncoderPort *>(mInputPort));
  CHECKAMPERR(err);
  err = unregisterBds(static_cast<OmxVideoEncoderPort *>(mOutputPort));
  CHECKAMPERR(err);
  clearPort();
  mEOS = OMX_FALSE;
  mOutputEOS = OMX_FALSE;
  VENC_TRACE("Exit");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11169548.cpp!!!	release() : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  if (!mInputPort->isTunneled()) {
    err = AMP_DisconnectApp(mAmpHandle, AMP_PORT_INPUT, 0, bufferCb);
    CHECKAMPERR(err);
  }
  if (!mOutputPort->isTunneled()) {
    err = AMP_DisconnectApp(mAmpHandle, AMP_PORT_OUTPUT, 0, bufferCb);
    CHECKAMPERR(err);
  }
  AMP_RPC(err, AMP_VENC_Close, mAmpHandle);
  CHECKAMPERR(err);
  err = destroyAmpVenc();
  CHECKAMPERR(err);
  VENC_TRACE("Exit");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11169676.cpp!!!	flush() : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VENC_SetState, mAmpHandle, AMP_IDLE);
  CHECKAMPERR(err);
  AMP_RPC(err, AMP_VENC_SetState, mAmpHandle, mAmpState);
  clearPort();
  VENC_TRACE("EXIT");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11169804.cpp!!!	clearPort() : void
  if (mInputPort->mReturnedBuffer!= NULL) {
    returnBuffer(mInputPort, mInputPort->mReturnedBuffer);
    mInputPort->mReturnedBuffer = NULL;
  }
  if (mOutputPort->mReturnedBuffer!= NULL) {
    returnBuffer(mOutputPort, mOutputPort->mReturnedBuffer);
    mOutputPort->mReturnedBuffer = NULL;
  }
  mOutputPort->mIsExtraDataGot = OMX_FALSE;
  // Waiting for input/output buffers back
  OMX_U32 wait_count = 100;
  while ((mInputPort->mPushedBdNum > mInputPort->mReturnedBdNum
      || mOutputPort->mPushedBdNum > mOutputPort->mReturnedBdNum)
      && wait_count > 0) {
    usleep(5000);
    wait_count--;
  }
  if (!wait_count) {
    OMX_LOGE("There are %u inbuf and %u outbuf have not returned.",
        mInputPort->mPushedBdNum - mInputPort->mReturnedBdNum,
        mOutputPort->mPushedBdNum - mOutputPort->mReturnedBdNum);
  }
  mInputPort->mPushedBdNum = 0;
  mInputPort->mReturnedBdNum = 0;
  mOutputPort->mPushedBdNum = 0;
  mOutputPort->mReturnedBdNum = 0;
!!!11169932.cpp!!!	createComponent(inout handle : OMX_HANDLETYPE, in componentName : OMX_STRING, in appData : OMX_PTR, inout callBacks : OMX_CALLBACKTYPE) : OMX_ERRORTYPE
  OmxVideoEncoder* comp = new OmxVideoEncoder(componentName);
  *handle = comp->makeComponent(comp);
  comp->setCallbacks(callBacks, appData);
  comp->componentInit();
  return OMX_ErrorNone;
!!!11170060.cpp!!!	bufferCb(in component : AMP_COMPONENT, in port_Io : AMP_PORT_IO, in port_idx : UINT32, inout bd : AMP_BD_ST, inout context : void) : HRESULT
  OMX_LOGD("%s, port_IO %d, bd 0x%x, bd.bdid 0x%x, bd.allocva 0x%x",
      __func__, port_Io, bd, bd->uiBDId, bd->uiAllocVA);
  HRESULT err = SUCCESS;
  OMX_BUFFERHEADERTYPE *bufHdr = NULL;
  OMX_BOOL isLastOutFrame = OMX_FALSE;
  OmxVideoEncoder *encoder = static_cast<OmxVideoEncoder *>(context);
  if (AMP_PORT_INPUT == port_Io && 0 == port_idx) {
    OmxVideoEncoderPort *port = encoder->mInputPort;
    bufHdr = port->getBufferHeader(bd);
    if (NULL != bufHdr) {
      if (port->mReturnedBuffer != NULL) {
        encoder->returnBuffer(port, port->mReturnedBuffer);
      }
      port->mReturnedBuffer = bufHdr;
      encoder->mInputPort->mReturnedBdNum++;
      OMX_LOGD("[In] %d/%d",
          encoder->mInputPort->mReturnedBdNum,
          encoder->mInputPort->mPushedBdNum);
    }
  } else if (AMP_PORT_OUTPUT == port_Io && 0 == port_idx) {
    OmxVideoEncoderOutputPort *port = encoder->mOutputPort;
    bufHdr = port->getBufferHeader(bd);
    if (NULL != bufHdr) {
      AmpBuffer *amp_buffer = static_cast<AmpBuffer *>(
          bufHdr->pPlatformPrivate);
      AMP_BDTAG_MEMINFO *mem_info = amp_buffer->getMemInfo();
      if (mem_info->uFlag & AMP_MEMINFO_FLAG_EOS_MASK) {
        OMX_LOGD("[Out] Receive EOS");
        bufHdr->nFlags |= OMX_BUFFERFLAG_EOS;
        mem_info->uFlag = 0;
        encoder->mOutputEOS = OMX_TRUE;
        encoder->postEvent(OMX_EventBufferFlag, bufHdr->nOutputPortIndex,
            OMX_BUFFERFLAG_EOS);
      }
      if (encoder->mMark.hMarkTargetComponent != NULL) {
        bufHdr->hMarkTargetComponent = encoder->mMark.hMarkTargetComponent;
        bufHdr->pMarkData = encoder->mMark.pMarkData;
        encoder->mMark.hMarkTargetComponent = NULL;
        encoder->mMark.pMarkData = NULL;
      }
      AMP_BDTAG_STREAM_INFO *stream_info = amp_buffer->getStreamInfo();
      OMX_LOGD("IsHeader %d, Frame type %d, pts 0x%x - %x",
          stream_info->isHeader,
          stream_info->uType,
          stream_info->uiPtsHigh,
          stream_info->uiPtsLow);
      OMX_TICKS pts_low, pts_high;
      pts_low = static_cast<OMX_TICKS>(stream_info->uiPtsLow);
      pts_high = static_cast<OMX_TICKS>(stream_info->uiPtsHigh);
      if (stream_info->uiPtsHigh & TIME_STAMP_VALID_MASK) {
        bufHdr->nTimeStamp = convert90KtoUs(pts_high, pts_low);
      }
      if (stream_info->isHeader && port->mIsExtraDataGot == OMX_FALSE) {
        bufHdr->nFlags |= OMX_BUFFERFLAG_CODECCONFIG;
        port->mIsExtraDataGot = OMX_TRUE;
      } else if (stream_info->uType == 0) {
         bufHdr->nFlags |= OMX_BUFFERFLAG_SYNCFRAME;
      }
      if (OMX_TRUE == encoder->mOutputEOS) {
        bufHdr->nFilledLen = 0;
      } else {
        bufHdr->nFilledLen = mem_info->uSize;
      }
      // dump_bytes(bufHdr->pBuffer, bufHdr->nFilledLen);
      if (port->mReturnedBuffer != NULL) {
        encoder->returnBuffer(port, port->mReturnedBuffer);
      }
      port->mReturnedBuffer = bufHdr;
      port->mReturnedBdNum++;
      OMX_LOGD("[Out] %d/%d, size %d, pts %lld, flag %x",
          port->mReturnedBdNum, port->mPushedBdNum, bufHdr->nFilledLen,
          bufHdr->nTimeStamp, bufHdr->nFlags);
    }
  } else {
    OMX_LOGE("bd not be used");
    err = ERR_NOTIMPL;
    return err;
  }
  return err;
!!!11170188.cpp!!!	createAmpVenc() : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_FACTORY factory;
  err = AMP_GetFactory(&factory);
  CHECKAMPERR(err);
  AMP_RPC(err, AMP_FACTORY_CreateComponent, factory, AMP_COMPONENT_VENC, 1,
      &mAmpHandle);
  CHECKAMPERR(err);
  VENC_TRACE("Exit");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11170316.cpp!!!	destroyAmpVenc() : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  if (mAmpHandle) {
    AMP_RPC(err, AMP_VENC_Destroy, mAmpHandle);
    CHECKAMPERR(err);
    AMP_FACTORY_Release(mAmpHandle);
    mAmpHandle = NULL;
  }
  VENC_TRACE("Exit");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11170444.cpp!!!	registerBds(inout port : OmxVideoEncoderPort) : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  UINT32 uiPortIdx = 0;
  if (port->isInput()) {
    for (OMX_U32 i = 0; i < port->getBufferCount(); i++) {
      AmpBuffer *amp_buffer = port->getAmpBuffer(i);
      if (NULL != amp_buffer) {
        amp_buffer->addMemInfoTag();
        amp_buffer->addFrameInfoTag();
        AMP_RPC(err, AMP_VENC_RegisterBD, mAmpHandle, AMP_PORT_INPUT,
            uiPortIdx, amp_buffer->getBD());
        CHECKAMPERRLOG(err, "Failed to register BDs at VENC input port");
      }
    }
  } else {
    for (OMX_U32 i = 0; i < port->getBufferCount(); i++) {
      AmpBuffer *amp_buffer = port->getAmpBuffer(i);
      if (NULL != amp_buffer) {
        amp_buffer->addMemInfoTag();
        amp_buffer->addStreamInfoTag();
        AMP_RPC(err, AMP_VENC_RegisterBD, mAmpHandle, AMP_PORT_OUTPUT,
            uiPortIdx, amp_buffer->getBD());
        CHECKAMPERRLOG(err, "Failed to regsiter BDs at VENC output port");
      }
    }
  }
  VENC_TRACE("EXIT");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11170572.cpp!!!	unregisterBds(inout port : OmxVideoEncoderPort) : OMX_ERRORTYPE
  VENC_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_PORT_IO portIo;
  if (port->isInput()) {
    portIo = AMP_PORT_INPUT;
  } else {
    portIo = AMP_PORT_OUTPUT;
  }
  AMP_BD_ST *bd;
  UINT32 uiPortIdx = 0;
  for (OMX_U32 i = 0; i < port->getBufferCount(); i++) {
    bd = port->getBD(i);
    if (NULL != bd) {
      AMP_RPC(err, AMP_VENC_UnregisterBD, mAmpHandle, portIo, uiPortIdx, bd);
      CHECKAMPERRLOG(err, "Failed to regsiter BDs at VENC output port");
    }
  }
  VENC_TRACE("EXIT");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11170700.cpp!!!	pushAmpBd(in port : AMP_PORT_IO, in portindex : UINT32, inout bd : AMP_BD_ST) : OMX_ERRORTYPE
  OMX_LOGV("(%s) pushAmpBd, bd 0x%x, bdid 0x%x, allocva 0x%x",
      port == AMP_PORT_INPUT ? "In":"Out", bd, bd->uiBDId, bd->uiAllocVA);
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VENC_PushBD, mAmpHandle, port, portindex, bd);
  CHECKAMPERRLOG(err, "Failed to push BD to VENC");
  return static_cast<OMX_ERRORTYPE>(err);
