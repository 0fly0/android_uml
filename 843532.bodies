class StringUri
!!!3678604.java!!!	StringUri(in uriString : String)
            if (uriString == null) {
                throw new NullPointerException("uriString");
            }

            this.uriString = uriString;
!!!3678732.java!!!	readFrom(inout parcel : Parcel) : Uri
            return new StringUri(parcel.readString());
!!!3678860.java!!!	describeContents() : int
            return 0;
!!!3678988.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
            parcel.writeInt(TYPE_ID);
            parcel.writeString(uriString);
!!!3679116.java!!!	findSchemeSeparator() : int
            return cachedSsi == NOT_CALCULATED
                    ? cachedSsi = uriString.indexOf(':')
                    : cachedSsi;
!!!3679244.java!!!	findFragmentSeparator() : int
            return cachedFsi == NOT_CALCULATED
                    ? cachedFsi = uriString.indexOf('#', findSchemeSeparator())
                    : cachedFsi;
!!!3679372.java!!!	isHierarchical() : boolean
            int ssi = findSchemeSeparator();

            if (ssi == NOT_FOUND) {
                // All relative URIs are hierarchical.
                return true;
            }

            if (uriString.length() == ssi + 1) {
                // No ssp.
                return false;
            }

            // If the ssp starts with a '/', this is hierarchical.
            return uriString.charAt(ssi + 1) == '/';
!!!3679500.java!!!	isRelative() : boolean
            // Note: We return true if the index is 0
            return findSchemeSeparator() == NOT_FOUND;
!!!3679628.java!!!	getScheme() : String
            @SuppressWarnings("StringEquality")
            boolean cached = (scheme != NOT_CACHED);
            return cached ? scheme : (scheme = parseScheme());
!!!3679756.java!!!	parseScheme() : String
            int ssi = findSchemeSeparator();
            return ssi == NOT_FOUND ? null : uriString.substring(0, ssi);
!!!3679884.java!!!	getSsp() : Part
            return ssp == null ? ssp = Part.fromEncoded(parseSsp()) : ssp;
!!!3680012.java!!!	getEncodedSchemeSpecificPart() : String
            return getSsp().getEncoded();
!!!3680140.java!!!	getSchemeSpecificPart() : String
            return getSsp().getDecoded();
!!!3680268.java!!!	parseSsp() : String
            int ssi = findSchemeSeparator();
            int fsi = findFragmentSeparator();

            // Return everything between ssi and fsi.
            return fsi == NOT_FOUND
                    ? uriString.substring(ssi + 1)
                    : uriString.substring(ssi + 1, fsi);
!!!3680396.java!!!	getAuthorityPart() : Part
            if (authority == null) {
                String encodedAuthority
                        = parseAuthority(this.uriString, findSchemeSeparator());
                return authority = Part.fromEncoded(encodedAuthority);
            }

            return authority;
!!!3680524.java!!!	getEncodedAuthority() : String
            return getAuthorityPart().getEncoded();
!!!3680652.java!!!	getAuthority() : String
            return getAuthorityPart().getDecoded();
!!!3680780.java!!!	getPathPart() : PathPart
            return path == null
                    ? path = PathPart.fromEncoded(parsePath())
                    : path;
!!!3680908.java!!!	getPath() : String
            return getPathPart().getDecoded();
!!!3681036.java!!!	getEncodedPath() : String
            return getPathPart().getEncoded();
!!!3681164.java!!!	getPathSegments() : List<String>
            return getPathPart().getPathSegments();
!!!3681292.java!!!	parsePath() : String
            String uriString = this.uriString;
            int ssi = findSchemeSeparator();

            // If the URI is absolute.
            if (ssi > -1) {
                // Is there anything after the ':'?
                boolean schemeOnly = ssi + 1 == uriString.length();
                if (schemeOnly) {
                    // Opaque URI.
                    return null;
                }

                // A '/' after the ':' means this is hierarchical.
                if (uriString.charAt(ssi + 1) != '/') {
                    // Opaque URI.
                    return null;
                }
            } else {
                // All relative URIs are hierarchical.
            }

            return parsePath(uriString, ssi);
!!!3681420.java!!!	getQueryPart() : Part
            return query == null
                    ? query = Part.fromEncoded(parseQuery()) : query;
!!!3681548.java!!!	getEncodedQuery() : String
            return getQueryPart().getEncoded();
!!!3681676.java!!!	parseQuery() : String
            // It doesn't make sense to cache this index. We only ever
            // calculate it once.
            int qsi = uriString.indexOf('?', findSchemeSeparator());
            if (qsi == NOT_FOUND) {
                return null;
            }

            int fsi = findFragmentSeparator();

            if (fsi == NOT_FOUND) {
                return uriString.substring(qsi + 1);
            }

            if (fsi < qsi) {
                // Invalid.
                return null;
            }

            return uriString.substring(qsi + 1, fsi);
!!!3681804.java!!!	getQuery() : String
            return getQueryPart().getDecoded();
!!!3681932.java!!!	getFragmentPart() : Part
            return fragment == null
                    ? fragment = Part.fromEncoded(parseFragment()) : fragment;
!!!3682060.java!!!	getEncodedFragment() : String
            return getFragmentPart().getEncoded();
!!!3682188.java!!!	parseFragment() : String
            int fsi = findFragmentSeparator();
            return fsi == NOT_FOUND ? null : uriString.substring(fsi + 1);
!!!3682316.java!!!	getFragment() : String
            return getFragmentPart().getDecoded();
!!!3682444.java!!!	toString() : String
            return uriString;
!!!3682572.java!!!	parseAuthority(in uriString : String, in ssi : int) : String
            int length = uriString.length();

            // If "//" follows the scheme separator, we have an authority.
            if (length > ssi + 2
                    && uriString.charAt(ssi + 1) == '/'
                    && uriString.charAt(ssi + 2) == '/') {
                // We have an authority.

                // Look for the start of the path, query, or fragment, or the
                // end of the string.
                int end = ssi + 3;
                LOOP: while (end < length) {
                    switch (uriString.charAt(end)) {
                        case '/': // Start of path
                        case '?': // Start of query
                        case '#': // Start of fragment
                            break LOOP;
                    }
                    end++;
                }

                return uriString.substring(ssi + 3, end);
            } else {
                return null;
            }

!!!3682700.java!!!	parsePath(in uriString : String, in ssi : int) : String
            int length = uriString.length();

            // Find start of path.
            int pathStart;
            if (length > ssi + 2
                    && uriString.charAt(ssi + 1) == '/'
                    && uriString.charAt(ssi + 2) == '/') {
                // Skip over authority to path.
                pathStart = ssi + 3;
                LOOP: while (pathStart < length) {
                    switch (uriString.charAt(pathStart)) {
                        case '?': // Start of query
                        case '#': // Start of fragment
                            return ""; // Empty path.
                        case '/': // Start of path!
                            break LOOP;
                    }
                    pathStart++;
                }
            } else {
                // Path starts immediately after scheme separator.
                pathStart = ssi + 1;
            }

            // Find end of path.
            int pathEnd = pathStart;
            LOOP: while (pathEnd < length) {
                switch (uriString.charAt(pathEnd)) {
                    case '?': // Start of query
                    case '#': // Start of fragment
                        break LOOP;
                }
                pathEnd++;
            }

            return uriString.substring(pathStart, pathEnd);
!!!3682828.java!!!	buildUpon() : Builder
            if (isHierarchical()) {
                return new Builder()
                        .scheme(getScheme())
                        .authority(getAuthorityPart())
                        .path(getPathPart())
                        .query(getQueryPart())
                        .fragment(getFragmentPart());
            } else {
                return new Builder()
                        .scheme(getScheme())
                        .opaquePart(getSsp())
                        .fragment(getFragmentPart());
            }
