class ViewManager
!!!4932108.java!!!	ViewManager(inout w : WebViewClassic)
        mWebView = w;
        DisplayMetrics metrics = w.getWebView().getResources().getDisplayMetrics();
        int pixelArea = metrics.widthPixels * metrics.heightPixels;
        /* set the threshold to be 275% larger than the screen size. The
           percentage is simply an estimation and is not based on anything but
           basic trial-and-error tests run on multiple devices.
         */
        MAX_SURFACE_AREA = (int)(pixelArea * 2.75);
!!!4932236.java!!!	createView() : ChildView
        return new ChildView();
!!!4932364.java!!!	requestLayout(inout v : ChildView) : void

        int width = mWebView.contentToViewDimension(v.width);
        int height = mWebView.contentToViewDimension(v.height);
        int x = mWebView.contentToViewX(v.x);
        int y = mWebView.contentToViewY(v.y);

        AbsoluteLayout.LayoutParams lp;
        ViewGroup.LayoutParams layoutParams = v.mView.getLayoutParams();

        if (layoutParams instanceof AbsoluteLayout.LayoutParams) {
            lp = (AbsoluteLayout.LayoutParams) layoutParams;
            lp.width = width;
            lp.height = height;
            lp.x = x;
            lp.y = y;
        } else {
            lp = new AbsoluteLayout.LayoutParams(width, height, x, y);
        }

        // apply the layout to the view
        v.mView.setLayoutParams(lp);

        if(v.mView instanceof SurfaceView) {

            final SurfaceView sView = (SurfaceView) v.mView;

            if (sView.isFixedSize() && mZoomInProgress) {
                /* If we're already fixed, and we're in a zoom, then do nothing
                   about the size. Just wait until we get called at the end of
                   the zoom session (with mZoomInProgress false) and we'll
                   fixup our size then.
                 */
                return;
            }

            /* Compute proportional fixed width/height if necessary.
             *
             * NOTE: plugins (e.g. Flash) must not explicitly fix the size of
             * their surface. The logic below will result in unexpected behavior
             * for the plugin if they attempt to fix the size of the surface.
             */
            int fixedW = width;
            int fixedH = height;
            if (fixedW > MAX_SURFACE_DIMENSION || fixedH > MAX_SURFACE_DIMENSION) {
                if (v.width > v.height) {
                    fixedW = MAX_SURFACE_DIMENSION;
                    fixedH = v.height * MAX_SURFACE_DIMENSION / v.width;
                } else {
                    fixedH = MAX_SURFACE_DIMENSION;
                    fixedW = v.width * MAX_SURFACE_DIMENSION / v.height;
                }
            }
            if (fixedW * fixedH > MAX_SURFACE_AREA) {
                float area = MAX_SURFACE_AREA;
                if (v.width > v.height) {
                    fixedW = (int)Math.sqrt(area * v.width / v.height);
                    fixedH = v.height * fixedW / v.width;
                } else {
                    fixedH = (int)Math.sqrt(area * v.height / v.width);
                    fixedW = v.width * fixedH / v.height;
                }
            }

            if (fixedW != width || fixedH != height) {
                // if we get here, either our dimensions or area (or both)
                // exeeded our max, so we had to compute fixedW and fixedH
                sView.getHolder().setFixedSize(fixedW, fixedH);
            } else if (!sView.isFixedSize() && mZoomInProgress) {
                // just freeze where we were (view size) until we're done with
                // the zoom progress
                sView.getHolder().setFixedSize(sView.getWidth(),
                                               sView.getHeight());
            } else if (sView.isFixedSize() && !mZoomInProgress) {
                /* The changing of visibility is a hack to get around a bug in
                 * the framework that causes the surface to revert to the size
                 * it was prior to being fixed before it redraws using the
                 * values currently in its layout.
                 *
                 * The surface is destroyed when it is set to invisible and then
                 * recreated at the new dimensions when it is made visible. The
                 * same destroy/create step occurs without the change in
                 * visibility, but then exhibits the behavior described in the
                 * previous paragraph.
                 */
                if (sView.getVisibility() == View.VISIBLE) {
                    sView.setVisibility(View.INVISIBLE);
                    sView.getHolder().setSizeFromLayout();
                    // setLayoutParams() only requests the layout. If we set it
                    // to VISIBLE now, it will use the old dimension to set the
                    // size. Post a message to ensure that it shows the new size.
                    mWebView.mPrivateHandler.post(new Runnable() {
                        public void run() {
                            sView.setVisibility(View.VISIBLE);
                        }
                    });
                } else {
                    sView.getHolder().setSizeFromLayout();
                }
            }
        }
!!!4932492.java!!!	startZoom() : void
        mZoomInProgress = true;
        for (ChildView v : mChildren) {
            requestLayout(v);
        }
!!!4932620.java!!!	endZoom() : void
        mZoomInProgress = false;
        for (ChildView v : mChildren) {
            requestLayout(v);
        }
!!!4932748.java!!!	scaleAll() : void
        for (ChildView v : mChildren) {
            requestLayout(v);
        }
!!!4932876.java!!!	hideAll() : void
        if (mHidden) {
            return;
        }
        for (ChildView v : mChildren) {
            v.mView.setVisibility(View.GONE);
        }
        mHidden = true;
!!!4933004.java!!!	showAll() : void
        if (!mHidden) {
            return;
        }
        for (ChildView v : mChildren) {
            v.mView.setVisibility(View.VISIBLE);
        }
        mHidden = false;
!!!4933132.java!!!	postResetStateAll() : void
        mWebView.mPrivateHandler.post(new Runnable() {
            public void run() {
                mReadyToDraw = false;
            }
        });
!!!4933260.java!!!	postReadyToDrawAll() : void
        mWebView.mPrivateHandler.post(new Runnable() {
            public void run() {
                mReadyToDraw = true;
                for (ChildView v : mChildren) {
                    v.mView.setVisibility(View.VISIBLE);
                }
            }
        });
!!!4933388.java!!!	hitTest(in contentX : int, in contentY : int) : ChildView
        if (mHidden) {
            return null;
        }
        for (ChildView v : mChildren) {
            if (v.mView.getVisibility() == View.VISIBLE) {
                if (contentX >= v.x && contentX < (v.x + v.width)
                        && contentY >= v.y && contentY < (v.y + v.height)) {
                    return v;
                }
            }
        }
        return null;
