class ToRGBFilter
!!!7105036.java!!!	ToRGBFilter(in name : String)
        super(name);
!!!7105164.java!!!	setupPorts() : void
        MutableFrameFormat mask = new MutableFrameFormat(FrameFormat.TYPE_BYTE,
                                                         FrameFormat.TARGET_NATIVE);
        mask.setDimensionCount(2);
        addMaskedInputPort("image", mask);
        addOutputBasedOnInput("image", "image");
!!!7105292.java!!!	getOutputFormat(in portName : String, inout inputFormat : FrameFormat) : FrameFormat
        return getConvertedFormat(inputFormat);
!!!7105420.java!!!	getConvertedFormat(inout format : FrameFormat) : FrameFormat
        MutableFrameFormat result = format.mutableCopy();
        result.setMetaValue(ImageFormat.COLORSPACE_KEY, ImageFormat.COLORSPACE_RGB);
        result.setBytesPerSample(3);
        return result;
!!!7105548.java!!!	createProgram(inout context : FilterContext, inout format : FrameFormat) : void
        mInputBPP = format.getBytesPerSample();
        if (mLastFormat != null && mLastFormat.getBytesPerSample() == mInputBPP) return;
        mLastFormat = format;
        switch (mInputBPP) {
            case 1:
                mProgram = new NativeProgram("filterpack_imageproc", "gray_to_rgb");
                break;
            case 4:
                mProgram = new NativeProgram("filterpack_imageproc", "rgba_to_rgb");
                break;
            default:
                throw new RuntimeException("Unsupported BytesPerPixel: " + mInputBPP + "!");
        }
!!!7105676.java!!!	process(inout context : FilterContext) : void
        // Get input frame
        Frame input = pullInput("image");
        createProgram(context, input.getFormat());

        // Create output frame
        Frame output = context.getFrameManager().newFrame(getConvertedFormat(input.getFormat()));

        // Process
        mProgram.process(input, output);

        // Push output
        pushOutput("image", output);

        // Release pushed frame
        output.release();
