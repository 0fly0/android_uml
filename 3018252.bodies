class InputBannerWidgetProvider
!!!12346380.java!!!	onReceive(in context : Context, inout intent : Intent) : void
        super.onReceive(context, intent);
        mContext = context;
        Log.d(TAG, "action=" + intent.getAction());
        if (intent.getAction().equals(ACTION_SHOW_INPUTBANNER_WIDGET)) {
            final ComponentName componentName = new ComponentName(context.getPackageName(),
                    InputBannerWidgetProvider.class.getName());
            final AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);
            final RemoteViews remoteViews = new RemoteViews(context.getPackageName(),
                    R.layout.input_source_banner);

            Bundle bundle = new Bundle();
            boolean status = false;
            if (intent.getExtras() != null) {
                bundle = intent.getExtras();
                status = bundle.getBoolean(EXTRA_STATUS, false);
            }

            if (!status) {
                remoteViews.setViewVisibility(R.id.layout_sourceinfo, View.GONE);
                mIsVisible = false;
            } else {

                int currentSource = Wrapper.getWrapperInstance().getCurrentSource();
                final String currInputName = PairingDevice.getDeviceNameBySource(mContext,
                        currentSource);
                Log.d(TAG, "currInputName=" + currInputName);
                remoteViews.setTextViewText(R.id.sourceInfo, currInputName);

                final USDTVMessageQueue msgQueue = USDTVMessageQueue.getMsgQueueInstance();
                final TvFramework tvframework = TvFramework.getInstance();
                final ITvRemoteService tvService = Utils.getTvRemoteService();
                final VideoInfoUpdate videoInfo = tvframework.getVideoInfo(tvService);
                if (!tvframework.isTvNoSignal(tvService)
                        && videoInfo != null && videoInfo.getSourceId() == currentSource
                        && videoInfo.getActiveHeight() != 0
                        && videoInfo.getActiveWidth() != 0) {
                    remoteViews.setViewVisibility(R.id.resolutionInfo, View.VISIBLE);
                    int resolutionWidth = videoInfo.getActiveWidth();
                    int resolutionHeight = videoInfo.getActiveHeight();
                    float framerate = videoInfo.getFrameRate();
                    String frameRateString = getFrameRateString(framerate);

                    remoteViews.setTextViewText(R.id.resolutionInfo,
                            (resolutionHeight != 0 || resolutionWidth != 0)
                                    ? Integer.toString(resolutionWidth) + "x"
                                            + Integer.toString(resolutionHeight)
                                            + frameRateString : "");
                } else {
                    remoteViews.setViewVisibility(R.id.resolutionInfo, View.GONE);
                    remoteViews.setTextViewText(R.id.resolutionInfo, "");
                }

                if (mTimerTask != null) {
                    mTimerTask.cancel();
                    mTimerTask = null;
                }

                mTimerTask = new TimerTask() {

                    @Override
                    public void run() {
                        remoteViews.setViewVisibility(R.id.layout_sourceinfo, View.GONE);
                        mIsVisible = false;
                        appWidgetManager.updateAppWidget(componentName, remoteViews);
                        if (mTimer != null) {
                            mTimer.cancel();
                            mTimer.purge();
                            mTimer = null;
                        }
                    }
                };

                if (mTimer != null) {
                    mTimer.cancel();
                    mTimer.purge();
                }
                mTimer = new Timer();
                mTimer.schedule(mTimerTask, TIMEOUT);

                remoteViews.setViewVisibility(R.id.layout_sourceinfo, View.VISIBLE);
                mIsVisible = true;
            }

            appWidgetManager.updateAppWidget(componentName, remoteViews);
        }
!!!12346508.java!!!	getFrameRateString(in frameRate : float) : String
        if (frameRate > 0) {
            int iRate = (int)frameRate;
            if (Float.compare(iRate, frameRate) < 0) {
                return "@" + String.valueOf(frameRate) + "Hz";
            } else {
                return "@" + String.valueOf(iRate) + "Hz";
            }
        } else
            return "";
!!!12346636.java!!!	isVisible() : boolean
        return mIsVisible;
