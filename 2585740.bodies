class AVSettingValue
!!!10971148.cpp!!!	getString() : String8
    CHECK(type == TYPE_STRING);
    return value;
!!!10971276.cpp!!!	getInt() : int
    CHECK(type == TYPE_INT);
    const char* src = value.string();
    return DeserializeT<int>(&src);
!!!10971404.cpp!!!	getFloat() : float
    CHECK(type == TYPE_FLOAT);
    const char* src = value.string();
    return DeserializeT<float>(&src);
!!!10971532.cpp!!!	getBool() : bool
    CHECK(type == TYPE_BOOL);
    const char* src = value.string();
    return DeserializeT<bool>(&src);
!!!10971660.cpp!!!	getRect() : android::Rect
    CHECK(type == TYPE_RECT);
    const char* src = value.string();
    return DeserializeT<android::Rect>(&src);
!!!10971788.cpp!!!	getStringArray() : Vector<String8>
    CHECK(type == TYPE_ARRAY_STRING);
    Vector<String8> array;
    char* token;
    char* buf = new char[value.size() + 1];
    strcpy(buf, value.string());
    token = strtok(buf, SETTINGVALUE_ARRAY_DELIM);
    while(token) {
        ALOGV("getStringArray, parse item %s", token);
        array.push(String8(token));
        token = strtok(NULL, SETTINGVALUE_ARRAY_DELIM);

    }
    delete buf;
    return array;
!!!10971916.cpp!!!	getIntArray() : Vector<int>
    CHECK(type == TYPE_ARRAY_INT);
    Vector<int> array;
    char* token;
    char* buf = new char[value.size() + 1];
    strcpy(buf, value.string());
    token = strtok(buf, SETTINGVALUE_ARRAY_DELIM);
    while(token) {
        const char* pItem = token;
        int item = atoi(pItem);
        ALOGV("getIntArray, parse item %d", item);
        array.push(item);
        token = strtok(NULL, SETTINGVALUE_ARRAY_DELIM);
    }
    delete buf;
    return array;
!!!10972044.cpp!!!	getFloatArray() : Vector<float>
    CHECK(type == TYPE_ARRAY_FLOAT);
    Vector<float> array;
    char* token;
    char* buf = new char[value.size() + 1];
    strcpy(buf, value.string());
    token = strtok(buf, SETTINGVALUE_ARRAY_DELIM);
    while(token) {
        const char* pItem = token;
        float item = (float)atof(pItem);
        ALOGV("getFloatArray, parse item %f", item);
        array.push(item);
        token = strtok(NULL, SETTINGVALUE_ARRAY_DELIM);
    }
    delete buf;
    return array;
!!!10972172.cpp!!!	getBoolArray() : Vector<bool>
    CHECK(type == TYPE_ARRAY_BOOL);
    Vector<bool> array;
    char* token;
    char* buf = new char[value.size() + 1];
    strcpy(buf, value.string());
    token = strtok(buf, SETTINGVALUE_ARRAY_DELIM);
    while(token) {
        const char* pItem = token;
        bool item;
        if (!strcmp(pItem, "true")) {
            item = true;
        } else if (!strcmp(pItem, "false")) {
            item = false;
        } else {
            ALOGE("invalid bool value: %s", pItem);
        }
        ALOGV("getBoolArray, parse item %d", item);
        array.push(item);
        token = strtok(NULL, SETTINGVALUE_ARRAY_DELIM);
    }
    delete buf;
    return array;
!!!10972300.cpp!!!	getRectArray() : Vector<android::Rect>
    CHECK(type == TYPE_ARRAY_RECT);
    Vector<android::Rect> array;
    char* token;
    char* buf = new char[value.size() + 1];
    strcpy(buf, value.string());
    ALOGV("buf %s", buf);
    token = strtok(buf, SETTINGVALUE_ARRAY_DELIM);
    while(token) {
        ALOGV("token %s", token);
        const char* pItem = token;
        android::Rect item;
        ParseRect(String8(pItem), &item);
        ALOGV("getRectArray, parse item (%d %d %d %d)",
                item.left, item.top, item.right, item.bottom);
        array.push(item);
        token = strtok(NULL, SETTINGVALUE_ARRAY_DELIM);
    }
    delete buf;
    return array;
!!!10972428.cpp!!!	setString(in val : String8) : void
    ALOGV("setString, val %s", val.string());
    type = TYPE_STRING;
    value = val;
!!!10972556.cpp!!!	setInt(in val : int) : void
    ALOGV("setInt, val %d", val);
    type = TYPE_INT;
    value.setTo(reinterpret_cast<char*>(&val), sizeof(val));
!!!10972684.cpp!!!	setFloat(in val : float) : void
    ALOGV("setFloat, val %f", val);
    type = TYPE_FLOAT;
    value.setTo(reinterpret_cast<char*>(&val), sizeof(val));
!!!10972812.cpp!!!	setBool(in val : bool) : void
    ALOGV("setBool, val %d", val);
    type = TYPE_BOOL;
    value.setTo(reinterpret_cast<char*>(&val), sizeof(val));
!!!10972940.cpp!!!	setRect(in val : android::Rect) : void
    ALOGV("setRect, val (%d %d %d %d)",
            val.left, val.top, val.right, val.bottom);
    type = TYPE_RECT;
    value.setTo(reinterpret_cast<const char*>(&val), sizeof(val));
!!!10973068.cpp!!!	setStringArray(in vals : Vector<String8>) : void
    type = TYPE_ARRAY_STRING;
    value.clear();
    for (unsigned int i = 0; i < vals.size(); i++) {
        ALOGV("setStringArray, val[%d] = %s", i, vals.itemAt(i).string());
        value.append(vals.itemAt(i));
        value.append(SETTINGVALUE_ARRAY_DELIM);
        ALOGV("setStringArray, value %s", value.string());
    }
    ALOGV("setStringArray, value %s", value.string());
!!!10973196.cpp!!!	setIntArray(in vals : Vector<int>) : void
    type = TYPE_ARRAY_INT;
    char buf[MAX_VALUE_ITEM_LEN];
    value.clear();
    for (unsigned int i = 0; i < vals.size(); i++) {
        int val = vals.itemAt(i);
        ALOGV("setIntArray, val[%d] = %d", i, val);
        memset(buf, 0, MAX_VALUE_ITEM_LEN);
        snprintf(buf, sizeof(buf), "%d", val);
        value.append(buf);
        value.append(SETTINGVALUE_ARRAY_DELIM);
    }
    ALOGV("setIntArray, value %s", value.string());
!!!10973324.cpp!!!	setFloatArray(in vals : Vector<float>) : void
    type = TYPE_ARRAY_FLOAT;
    char buf[MAX_VALUE_ITEM_LEN];
    value.clear();
    for (unsigned int i = 0; i < vals.size(); i++) {
        float val = vals.itemAt(i);
        ALOGV("setFloatArray, val[%d] = %f", i, val);
        memset(buf, 0, MAX_VALUE_ITEM_LEN);
        snprintf(buf, sizeof(buf), "%f", val);
        value.append(buf);
        value.append(SETTINGVALUE_ARRAY_DELIM);
    }
    ALOGV("setFloatArray, value %s", value.string());
!!!10973452.cpp!!!	setBoolArray(in vals : Vector<bool>) : void
    type = TYPE_ARRAY_BOOL;
    value.clear();
    for (unsigned int i = 0; i < vals.size(); i++) {
        bool val = vals.itemAt(i);
        ALOGV("setBoolArray, val[%d] = %d", i, val);
        value.append(val ? "true" : "false");
        value.append(SETTINGVALUE_ARRAY_DELIM);
    }
    ALOGV("setBoolArray, value %s", value.string());
!!!10973580.cpp!!!	setRectArray(in vals : Vector<android::Rect>) : void
    type = TYPE_ARRAY_RECT;
    char buf[MAX_VALUE_ITEM_LEN];
    value.clear();
    for (unsigned int i = 0; i < vals.size(); i++) {
        ALOGV("setRectArray, val[%d] = (%d %d %d %d)", i,
                vals.itemAt(i).left, vals.itemAt(i).top,
                vals.itemAt(i).right, vals.itemAt(i).bottom);
        memset(buf, 0, MAX_VALUE_ITEM_LEN);
        snprintf(buf, sizeof(buf), "%d %d %d %d",
                vals.itemAt(i).left,
                vals.itemAt(i).top,
                vals.itemAt(i).right,
                vals.itemAt(i).bottom);
        value.append(buf);
        value.append(SETTINGVALUE_ARRAY_DELIM);
    }
    ALOGV("setRectArray, value %s", value.string());
!!!10973836.cpp!!!	getFormattedValue() : String8
    char item[MAX_VALUE_ITEM_LEN];
    String8 ret;
    android::Rect rect;
    Vector<int> int_vals;
    Vector<float> float_vals;
    Vector<bool> bool_vals;
    Vector<android::Rect> rect_vals;
    switch (type) {
        case TYPE_STRING:
        case TYPE_ARRAY_STRING:
            ret = value;
            break;

        case TYPE_INT:
            snprintf(item, sizeof(item), "%d", getInt());
            ret = String8(item);
            break;

        case TYPE_FLOAT:
            snprintf(item, sizeof(item), "%f", getFloat());
            ret = String8(item);
            break;

        case TYPE_BOOL:
            ret = String8(getBool()? "true" : "false");
            break;

        case TYPE_RECT:
            // Same as Java Rect flatternToString(): "left top right bottom"
            rect = getRect();
            snprintf(item, sizeof(item), "%d %d %d %d",
                    rect.left, rect.top, rect.right, rect.bottom);
            ret = String8(item);
            break;

        case TYPE_ARRAY_INT:
            int_vals = getIntArray();
            for (unsigned int i = 0; i < int_vals.size(); i++) {
                snprintf(item, sizeof(item), "%d", int_vals.itemAt(i));
                ret.append(item);
                ret.append(SETTINGVALUE_ARRAY_DELIM);
            }
            break;

        case TYPE_ARRAY_FLOAT:
            float_vals = getFloatArray();
            for (unsigned int i = 0; i < float_vals.size(); i++) {
                snprintf(item, sizeof(item), "%f", float_vals.itemAt(i));
                ret.append(item);
                ret.append(SETTINGVALUE_ARRAY_DELIM);
            }
            break;

        case TYPE_ARRAY_BOOL:
            bool_vals = getBoolArray();
            for (unsigned int i = 0; i < bool_vals.size(); i++) {
                ret.append(bool_vals.itemAt(i)? "true" : "false");
                ret.append(SETTINGVALUE_ARRAY_DELIM);
            }
            break;

        case TYPE_ARRAY_RECT:
            rect_vals = getRectArray();
            for (unsigned int i = 0; i < rect_vals.size(); i++) {
                snprintf(item, sizeof(item), "%d %d %d %d",
                        rect_vals.itemAt(i).left,
                        rect_vals.itemAt(i).top,
                        rect_vals.itemAt(i).right,
                        rect_vals.itemAt(i).bottom);
                ret.append(item);
                ret.append(SETTINGVALUE_ARRAY_DELIM);
            }
            break;

        case TYPE_NO_VALUE:
            break;

        default:
            ALOGE("getFormattedValue: no format for type %d", type);
            break;
    }
    ALOGV("getFormattedValue, return %s", ret.string());
    return ret;
!!!10973964.cpp!!!	setRawValue(in val_type : int, in raw_val : char) : void
    android::Rect rect;
    Vector<String8> items;
    Vector<int> int_vals;
    Vector<float> float_vals;
    Vector<bool> bool_vals;
    Vector<android::Rect> rect_vals;

    ALOGD("setRawValue, type %d value %s", val_type, raw_val);
    type = ValueType(val_type);
    switch (type) {
        case TYPE_STRING:
            setString(String8(raw_val));
            break;

        case TYPE_INT:
            setInt(atoi(raw_val));
            break;

        case TYPE_FLOAT:
            setFloat((float)atof(raw_val));
            break;

        case TYPE_BOOL:
            if (!strcmp(raw_val, "true")) {
                setBool(true);
            } else if (!strcmp(raw_val, "false")) {
                setBool(false);
            } else {
                ALOGE("invalid bool value: %s", raw_val);
            }
            break;

        case TYPE_RECT:
            ParseRect(String8(raw_val), &rect);
            setRect(rect);
            break;

        case TYPE_ARRAY_STRING:
            ParseArray(String8(raw_val), &items);
            setStringArray(items);
            break;

        case TYPE_ARRAY_INT:
            ParseArray(String8(raw_val), &items);
            for (unsigned int i = 0; i < items.size(); i++) {
                int int_val = atoi(items.itemAt(i).string());
                int_vals.push(int_val);
            }
            setIntArray(int_vals);
            break;

        case TYPE_ARRAY_FLOAT:
            ParseArray(String8(raw_val), &items);
            for (unsigned int i = 0; i < items.size(); i++) {
                float float_val = (float)atof(items.itemAt(i).string());
                float_vals.push(float_val);
            }
            setFloatArray(float_vals);
            break;

        case TYPE_ARRAY_BOOL:
            ParseArray(String8(raw_val), &items);
            for (unsigned int i = 0; i < items.size(); i++) {
                const char* val = items.itemAt(i).string();
                if (!strcmp(val, "true")) {
                    bool_vals.push(true);
                } else if (!strcmp(val, "false")) {
                    bool_vals.push(false);
                } else {
                    ALOGE("invalid bool value: %s", val);
                }
            }
            setBoolArray(bool_vals);
            break;

        case TYPE_ARRAY_RECT:
            ParseArray(String8(raw_val), &items);
            for (unsigned int i = 0; i < items.size(); i++) {
                const char* val = items.itemAt(i).string();
                ParseRect(String8(val), &rect);
                rect_vals.push(rect);
            }
            setRectArray(rect_vals);
            break;

        case TYPE_NO_VALUE:
            setNoValue();
            break;

        default:
            ALOGE("setRawValue: invalid type %d", type);
            break;
    }
!!!10974092.cpp!!!	readFromParcel(in src : Parcel) : void
    type = static_cast<ValueType>(src->readInt32());
    value = src->readString8();
!!!10974220.cpp!!!	writeToParcel(inout dst : Parcel) : void
    dst->writeInt32(type);
    dst->writeString8(value);
!!!10974348.cpp!!!	ParseRect(in str : String8, inout rect : android::Rect) : void
    ALOGV("ParseRect str %s", str.string());
    // Format as Java Rect flatternToString(): "left top right bottom"
    Vector<String8> items;
    char *start, *last_start;
    char *buf = new char[str.size() + 1];
    char item[MAX_VALUE_ITEM_LEN];
    strcpy(buf, str.string());
    start = buf;
    do {
        last_start = start;
        start = strstr(start, RECT_ITEM_DELIM);
        memset(item, 0, MAX_VALUE_ITEM_LEN);
        if (start != NULL) {
            strncpy(item, last_start, start - last_start);
            start += 1;
        } else {
            // No delim found, only the last item
            strcpy(item, last_start);
        }
        ALOGV("ParseRect, item %s", item);
        items.push(String8(item));
    } while (start && *start != '\0');
    delete buf;
    CHECK(items.size() == 4);
    rect->left = atoi(items.itemAt(0).string());
    rect->top = atoi(items.itemAt(1).string());
    rect->right = atoi(items.itemAt(2).string());
    rect->bottom = atoi(items.itemAt(3).string());
    ALOGV("ParseRect rect (%d %d %d %d)",
            rect->left, rect->top, rect->right, rect->bottom);
!!!10974476.cpp!!!	ParseArray(in input : String8, inout output : Vector<String8>) : void
    ALOGV("ParseArray input %s", input.string());
    char* token;
    ALOGD("input.size() %d", input.size());
    char* buf = new char[input.size() + 1];
    strcpy(buf, input.string());
    token = strtok(buf, SETTINGVALUE_ARRAY_DELIM);
    while(token) {
        ALOGD("token %s", token);
        output->push(String8(token));
        token = strtok(NULL, SETTINGVALUE_ARRAY_DELIM);
    }
    delete buf;
    for (unsigned int i = 0; i < output->size(); i++) {
        ALOGV("ParseArray, array[%d] = %s", i, output->itemAt(i).string());
    }
