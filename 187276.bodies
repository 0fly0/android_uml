class ABitReader
!!!425612.cpp!!!	getBits(in n : size_t) : uint32_t
    CHECK_LE(n, 32u);

    uint32_t result = 0;
    while (n > 0) {
        if (mNumBitsLeft == 0) {
            fillReservoir();
        }

        size_t m = n;
        if (m > mNumBitsLeft) {
            m = mNumBitsLeft;
        }

        result = (result << m) | (mReservoir >> (32 - m));
        mReservoir <<= m;
        mNumBitsLeft -= m;

        n -= m;
    }

    return result;
!!!425740.cpp!!!	skipBits(in n : size_t) : void
    while (n > 32) {
        getBits(32);
        n -= 32;
    }

    if (n > 0) {
        getBits(n);
    }
!!!425868.cpp!!!	putBits(in x : uint32_t, in n : size_t) : void
    CHECK_LE(n, 32u);

    while (mNumBitsLeft + n > 32) {
        mNumBitsLeft -= 8;
        --mData;
        ++mSize;
    }

    mReservoir = (mReservoir >> n) | (x << (32 - n));
    mNumBitsLeft += n;
!!!425996.cpp!!!	numBitsLeft() : size_t
    return mSize * 8 + mNumBitsLeft;
!!!426124.cpp!!!	data() : uint8_t
    return mData - (mNumBitsLeft + 7) / 8;
!!!426252.cpp!!!	fillReservoir() : void
    CHECK_GT(mSize, 0u);

    mReservoir = 0;
    size_t i;
    for (i = 0; mSize > 0 && i < 4; ++i) {
        mReservoir = (mReservoir << 8) | *mData;

        ++mData;
        --mSize;
    }

    mNumBitsLeft = 8 * i;
    mReservoir <<= 32 - mNumBitsLeft;
