class AutoScanActivity
!!!12574220.java!!!	onCreate(in savedInstanceState : Bundle) : void

        super.onCreate(savedInstanceState);

        /******************** Initialize variables ******************/
        mContext = getApplicationContext();
        Wrapper.getWrapperInstance().setContext(mContext);
        mRes = getResources();
        POWER_KEY = mRes.getInteger(R.integer.key_power);
        mScanHandler = new Handler();

        mTuner = TvFramework.getInstance().getTunerInstance();
        mTunerMode = mTuner.getTunerMode(mContext);

        setContentView(R.layout.auto_scan);
        setTimeOut(0); // no timeout during scanning

        mHeaderTextView = (TextView) findViewById(R.id.headertext);
        mScanStatusTextView = (TextView) findViewById(R.id.scanstatustext);
        mProgressBar = (ProgressBar) findViewById(R.id.progressbar);
        mProgressTextView = (TextView) findViewById(R.id.progressview);

        mNumAnalogChannel = 0;
        mNumDigitalChannel = 0;

        Bundle bundle = getIntent().getExtras();
        if (bundle != null) {
            isOOBE = bundle.getBoolean(EXTRA_LAUNCH_FROM_OOBE);
        }

        /******************** Start Scan ******************/
        if (mTunerMode == InputSourceType.CABLE_INPUT) {
            updateScanStatusText(1, CABLE_DIGITAL_FREQ, mNumAnalogChannel, mNumDigitalChannel, 0);
        } else {
            updateScanStatusText(2, ANTENNA_DIGITAL_FREQ, mNumAnalogChannel, mNumDigitalChannel, 0);
        }

        // Setting OFF the ClosedCaption before AutoScan, to avoid any CC
        // residue on the window
        Wrapper.getWrapperInstance().pauseCC();

        startScan();

        /******************** Test code for Emulator ******************/
        if (TvFramework.getInstance().isPrototyping()) {
            mRunnable2 = new Runnable() {
                int progress = 0;
                int chNum = 0;
                int numOfServices = 0;
                int curFrequency = 0;
                int searchType = 2;
                int searchMessage = 0;

                @Override
                public void run() {
                    scanStatusUpdate(progress++, chNum, numOfServices, curFrequency, searchType,
                            searchMessage);
                    if (progress <= 100) {
                        mScanHandler.postDelayed(mRunnable2, 250);

                        if (progress == 100)
                            searchMessage = ScanStatus.SCAN_FINISHED.ordinal();
                    } else {
                        return;
                    }
                }

            };
            mScanHandler.postDelayed(mRunnable2, 250);
        }
!!!12574348.java!!!	onStop() : void
        super.onStop();
        Log.d(TAG, "onStop()");

        final int rtnValue = mTuner.stopScan();
        if (rtnValue == ErrorCodes.FAILURE) {
            Log.d(TAG, "Stopping Auto Scan Failed");
        } else if (rtnValue == ErrorCodes.SUCCESS) {
            Log.d(TAG, "Stopping Auto scan SUCCESSED");
        } else {
            Log.d(TAG, "Unknown");
        }

        // Starting the CC ON if it was previously running
        Wrapper.getWrapperInstance().resumeCC();

        stopTimeOut();

        cleanup();
!!!12574476.java!!!	onDestroy() : void
        Log.d(TAG, "onDestroy()");

        super.onDestroy();
!!!12574604.java!!!	scanStatusUpdate(in progress : int, in chNum : int, in numOfServices : int, in curFrequency : int, in searchType : int, in searchMessage : int) : void

        Log.d(TAG, "scanStatusUpdate progress=" + progress);
        if (searchType == ChannelSearchType.SEARCH_ANALOG.ordinal()) {
            if (numOfServices > 0)
                mNumAnalogChannel = numOfServices;
            Log.d(TAG, "Search Type is Analog");

        } else if (searchType == ChannelSearchType.SEARCH_DIGITAL.ordinal()) {
            if (numOfServices > 0)
                mNumDigitalChannel = numOfServices;
            Log.d(TAG, "Search Type is Digital");

        } else {
            Log.d(TAG, "Search Type is Invalid");
        }

        mScanHandler.post(new Runnable() {

            @Override
            public void run() {
                Log.d(TAG, "Handle Message..................");
                final float currentFrequency = (float) (curFrequency / 1000000.0);
                String strFrequency = ((Float) currentFrequency).toString();
                if (curFrequency == 0 && mTunerMode == InputSourceType.CABLE_INPUT
                        && searchType == ChannelSearchType.SEARCH_ANALOG.ordinal()) {
                    strFrequency = CABLE_ANALOG_FREQ;
                } else if (curFrequency == 0 && mTunerMode == InputSourceType.CABLE_INPUT
                        && searchType == ChannelSearchType.SEARCH_DIGITAL.ordinal()) {
                    strFrequency = CABLE_DIGITAL_FREQ;
                }

                if (searchMessage != ScanStatus.SCAN_FINISHED.ordinal()) {
                    if (progress >= SCAN_HALF_PERCENT
                            && !(mHeaderTextView.getText().equals(mRes
                                    .getString(R.string.ANALOG_AUTO_SCAN)))
                            && searchType == ChannelSearchType.SEARCH_ANALOG.ordinal()) {
                        mHeaderTextView.setText(R.string.ANALOG_AUTO_SCAN);
                    } else if (progress < SCAN_HALF_PERCENT
                            && !mHeaderTextView.getText().equals(
                                    mRes.getString(R.string.DIGITAL_AUTO_SCAN))
                            && searchType == ChannelSearchType.SEARCH_DIGITAL.ordinal()) {
                        mHeaderTextView.setText(R.string.DIGITAL_AUTO_SCAN);
                    }

                    updateScanStatusText(chNum, strFrequency, mNumAnalogChannel,
                            mNumDigitalChannel, progress);
                } else {
                    sendDisabledKeyBroadcast(false);

                    Wrapper.getWrapperInstance().updateChanneListToGTVDb(0);

                    mHeaderTextView.setText(R.string.AUTOSCAN_COMPLETE);
                    updateScanStatusText(chNum, strFrequency, mNumAnalogChannel,
                            mNumDigitalChannel, SCAN_COMPLETE_PERCENT);
                    scanFinished = true;
                    cleanup();

                    if (mNumAnalogChannel == 0 && mNumDigitalChannel == 0) {
                        new ToastCreator(mContext, mRes.getString(R.string.no_service_found),
                                R.drawable.info)
                                .showToast();
                    }

                    setTimeOut(3000); // enable timeout after scan complete
                    startTimeOut();

                    if (isOOBE) {
                        mLiveTv.startCurrentSource(InputSourceType.NON_TV_INPUT.ordinal());
                        mTuner.setTunerMode(InputSourceType.NON_TV_INPUT, mContext);
                    }
                }
            }
        });
!!!12574732.java!!!	sendDisabledKeyBroadcast(inout disabled : boolean) : void
        Log.d(TAG, "sendDisabledKeyBroadcast disabled=" + disabled);
        Intent i = new Intent(TvIntents.ACTION_CHANNEL_SCAN_DISABLEDKEY);
        i.putExtra(TvIntents.EXTRA_DISABLE_KEY, disabled);
        mContext.sendBroadcast(i);

!!!12574860.java!!!	startScan() : void
        // Make a call to start auto scan and catch the return value
        // listener to register to get the scan status updates
        final int rtnValue = mTuner.startFullScan(ChannelSearchType.SEARCH_DIGITAL_AND_ANALOG,
                mTunerMode, this, isOOBE);
        if (rtnValue != ErrorCodes.SUCCESS) {
            final String text = mRes.getString(R.string.AUTOSCAN_FAIL);
            final ToastCreator toast = new ToastCreator(mContext, text, R.drawable.info);
            toast.showToast();
            finishSelf();
        } else {
            sendDisabledKeyBroadcast(true);
        }
!!!12574988.java!!!	stopScan() : void
        final int stpScan = mTuner.stopScan();
        if (stpScan != ErrorCodes.SUCCESS) {
            final String text = mRes.getString(R.string.STOP_AUTOSCAN_FAIL);
            final ToastCreator toast = new ToastCreator(mContext, text, R.drawable.info);
            toast.showToast();
            return;
        }
        // Display progress dialog to the user
        mDialog = ProgressDialog.show(this, "", mRes.getString(R.string.scan_wait));
        mDialog.setContentView(R.layout.progress_dialog_view);
        mDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
            @Override
            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                return true;
            }
        });
!!!12575116.java!!!	isChannelScaned() : boolean
        if (mNumAnalogChannel > 0 || mNumDigitalChannel > 0) {
            return true;
        }
        return false;
!!!12575244.java!!!	onKeyUp(in keyCode : int, in event : KeyEvent) : boolean
        Log.d(TAG, "keyCode = " + keyCode);
        if ((keyCode == KeyEvent.KEYCODE_ESCAPE || keyCode == KeyEvent.KEYCODE_BACK)) {
            if (!scanFinished) {
                stopScan();
                if (mRunnable2 != null)
                {
                    mScanHandler.removeCallbacks(mRunnable2);
                    finishSelf();
                }

                if (isChannelScaned()) {
                    cancelReceiver(); // don't exit itself now by exitFromApp
                    WidgetManager.exitFromApp(getApplicationContext());
                }

                if (isOOBE) {
                    mLiveTv.startCurrentSource(InputSourceType.NON_TV_INPUT.ordinal());
                    mTuner.setTunerMode(InputSourceType.NON_TV_INPUT, mContext);
                }
                return false;
            } else {
                Log.d(TAG, "scanFinished=" + scanFinished);
                finishSelf();
            }
        }
        return true;
!!!12575372.java!!!	onKeyDown(in keyCode : int, in event : KeyEvent) : boolean
        // Check whether this is power key (check with unique/scan code)
        if (event.getScanCode() == POWER_KEY) {
            return super.onKeyUp(keyCode, event);
        }
        return true;
!!!12575500.java!!!	updateScanStatusText(in chnum : int, in freq : String, in numAnalog : int, in numDigital : int, in progress : int) : void
        String statusMessage = "\n\n" + mRes.getString(R.string.CHANNEL_NUMBER) + "      : "
                + chnum
                + "\n\n" + mRes.getString(R.string.FREQUENCY) + "                   : "
                + freq + " " + mRes.getString(R.string.MHZ)
                + "\n\n" + mRes.getString(R.string.ANALOG_CHANNELS) + "    : " + numAnalog
                + "\n\n" + mRes.getString(R.string.DIGITAL_CHANNELS) + "     : " + numDigital;
        mScanStatusTextView.setText(statusMessage);
        Log.d(TAG, "statusMessage=" + statusMessage);

        mProgressTextView.setText("\n\0" + progress + "%");
        mProgressBar.setProgress(progress);
!!!12575628.java!!!	cleanup() : void
        /* To Dismiss the dialog and removing it from the screen */
        if (mDialog != null) {
            mDialog.dismiss();
        }
!!!12575756.java!!!	finishSelf() : void
        Log.d(TAG, "finishSelf()");
        super.finishSelf();
