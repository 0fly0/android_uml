class DatatypeFactory
!!!1891867.java!!!	newInstance() : DatatypeFactory
        try {
            return (DatatypeFactory) FactoryFinder.find(
                    /* The default property name according to the JAXP spec */
                    DATATYPEFACTORY_PROPERTY,
                    /* The fallback implementation class name */
                    DATATYPEFACTORY_IMPLEMENTATION_CLASS);
        }
        catch (FactoryFinder.ConfigurationError e) {
            throw new DatatypeConfigurationException(e.getMessage(), e.getException());
        }
!!!1891995.java!!!	newInstance(inout factoryClassName : String, inout classLoader : ClassLoader) : DatatypeFactory
        if (factoryClassName == null) {
            throw new DatatypeConfigurationException("factoryClassName == null");
        }
        if (classLoader == null) {
            classLoader = Thread.currentThread().getContextClassLoader();
        }
        try {
            Class<?> type = classLoader != null
                    ? classLoader.loadClass(factoryClassName)
                    : Class.forName(factoryClassName);
            return (DatatypeFactory) type.newInstance();
        } catch (ClassNotFoundException e) {
            throw new DatatypeConfigurationException(e);
        } catch (InstantiationException e) {
            throw new DatatypeConfigurationException(e);
        } catch (IllegalAccessException e) {
            throw new DatatypeConfigurationException(e);
        }
!!!1892507.java!!!	newDuration(in isPositive : boolean, in years : int, in months : int, in days : int, in hours : int, in minutes : int, in seconds : int) : Duration

        // years may not be set
        BigInteger realYears = (years != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) years) : null;

        // months may not be set
        BigInteger realMonths = (months != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) months) : null;

        // days may not be set
        BigInteger realDays = (days != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) days) : null;

        // hours may not be set
        BigInteger realHours = (hours != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) hours) : null;

        // minutes may not be set
        BigInteger realMinutes = (minutes != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) minutes) : null;

        // seconds may not be set
        BigDecimal realSeconds = (seconds != DatatypeConstants.FIELD_UNDEFINED) ? BigDecimal.valueOf((long) seconds) : null;

        return newDuration(
                isPositive,
                realYears,
                realMonths,
                realDays,
                realHours,
                realMinutes,
                realSeconds
        );
!!!1892635.java!!!	newDurationDayTime(in lexicalRepresentation : String) : Duration
        if (lexicalRepresentation == null) {
            throw new NullPointerException("lexicalRepresentation == null");
        }
        // The lexical representation must match the pattern [^YM]*(T.*)?
        int pos = lexicalRepresentation.indexOf('T');
        int length = (pos >= 0) ? pos : lexicalRepresentation.length();
        for (int i = 0; i < length; ++i) {
            char c = lexicalRepresentation.charAt(i);
            if (c == 'Y' || c == 'M') {
                throw new IllegalArgumentException("Invalid dayTimeDuration value: " + lexicalRepresentation);
            }
        }
        return newDuration(lexicalRepresentation);
!!!1892763.java!!!	newDurationDayTime(in durationInMilliseconds : long) : Duration
        long _durationInMilliseconds = durationInMilliseconds;
        if (_durationInMilliseconds == 0) {
            return newDuration(true, DatatypeConstants.FIELD_UNDEFINED,
                    DatatypeConstants.FIELD_UNDEFINED, 0, 0, 0, 0);
        }
        boolean tooLong = false;
        final boolean isPositive;
        if (_durationInMilliseconds < 0) {
            isPositive = false;
            if (_durationInMilliseconds == Long.MIN_VALUE) {
                _durationInMilliseconds++;
                tooLong = true;
            }
            _durationInMilliseconds *= -1;
        }
        else {
            isPositive = true;
        }

        long val = _durationInMilliseconds;
        int milliseconds = (int) (val % 60000L); // 60000 milliseconds per minute
        if (tooLong) {
            ++milliseconds;
        }
        if (milliseconds % 1000 == 0) {
            int seconds = milliseconds / 1000;
            val = val / 60000L;
            int minutes = (int) (val % 60L); // 60 minutes per hour
            val = val / 60L;
            int hours = (int) (val % 24L); // 24 hours per day
            long days = val / 24L;
            if (days <= ((long) Integer.MAX_VALUE)) {
                return newDuration(isPositive, DatatypeConstants.FIELD_UNDEFINED,
                        DatatypeConstants.FIELD_UNDEFINED, (int) days, hours, minutes, seconds);
            }
            else {
                return newDuration(isPositive, null, null,
                        BigInteger.valueOf(days), BigInteger.valueOf(hours),
                        BigInteger.valueOf(minutes), BigDecimal.valueOf(milliseconds, 3));
            }
        }

        BigDecimal seconds = BigDecimal.valueOf(milliseconds, 3);
        val = val / 60000L;
        BigInteger minutes = BigInteger.valueOf(val % 60L); // 60 minutes per hour
        val = val / 60L;
        BigInteger hours = BigInteger.valueOf(val % 24L); // 24 hours per day
        val = val / 24L;
        BigInteger days = BigInteger.valueOf(val);
        return newDuration(isPositive, null, null, days, hours, minutes, seconds);
!!!1892891.java!!!	newDurationDayTime(in isPositive : boolean, in day : BigInteger, in hour : BigInteger, in minute : BigInteger, in second : BigInteger) : Duration

        return newDuration(
                isPositive,
                null,  // years
                null, // months
                day,
                hour,
                minute,
                (second != null)? new BigDecimal(second):null
        );
!!!1893019.java!!!	newDurationDayTime(in isPositive : boolean, in day : int, in hour : int, in minute : int, in second : int) : Duration
        return newDuration(isPositive,
                DatatypeConstants.FIELD_UNDEFINED, DatatypeConstants.FIELD_UNDEFINED,
                day, hour, minute, second);
!!!1893147.java!!!	newDurationYearMonth(in lexicalRepresentation : String) : Duration
        if (lexicalRepresentation == null) {
            throw new NullPointerException("lexicalRepresentation == null");
        }
        // The lexical representation must match the pattern [^DT]*.
        int length = lexicalRepresentation.length();
        for (int i = 0; i < length; ++i) {
            char c = lexicalRepresentation.charAt(i);
            if (c == 'D' || c == 'T') {
                throw new IllegalArgumentException("Invalid yearMonthDuration value: " + lexicalRepresentation);
            }
        }
        return newDuration(lexicalRepresentation);
!!!1893275.java!!!	newDurationYearMonth(in durationInMilliseconds : long) : Duration

        return newDuration(durationInMilliseconds);
!!!1893403.java!!!	newDurationYearMonth(in isPositive : boolean, in year : BigInteger, in month : BigInteger) : Duration

        return newDuration(
                isPositive,
                year,
                month,
                null, // days
                null, // hours
                null, // minutes
                null  // seconds
        );
!!!1893531.java!!!	newDurationYearMonth(in isPositive : boolean, in year : int, in month : int) : Duration
        return newDuration(isPositive, year, month,
                DatatypeConstants.FIELD_UNDEFINED, DatatypeConstants.FIELD_UNDEFINED,
                DatatypeConstants.FIELD_UNDEFINED, DatatypeConstants.FIELD_UNDEFINED);
!!!1894171.java!!!	newXMLGregorianCalendar(in year : int, in month : int, in day : int, in hour : int, in minute : int, in second : int, in millisecond : int, in timezone : int) : XMLGregorianCalendar

        // year may be undefined
        BigInteger realYear = (year != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) year) : null;

        // millisecond may be undefined
        // millisecond must be >= 0 millisecond <= 1000
        BigDecimal realMillisecond = null; // undefined value
        if (millisecond != DatatypeConstants.FIELD_UNDEFINED) {
            if (millisecond < 0 || millisecond > 1000) {
                throw new IllegalArgumentException(
                        "javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendar("
                        + "int year, int month, int day, int hour, int minute, int second, int millisecond, int timezone)"
                        + "with invalid millisecond: " + millisecond
                );
            }
            realMillisecond = BigDecimal.valueOf((long) millisecond, 3);
        }

        return newXMLGregorianCalendar(
                realYear,
                month,
                day,
                hour,
                minute,
                second,
                realMillisecond,
                timezone
        );
!!!1894299.java!!!	newXMLGregorianCalendarDate(in year : int, in month : int, in day : int, in timezone : int) : XMLGregorianCalendar

        return newXMLGregorianCalendar(
                year,
                month,
                day,
                DatatypeConstants.FIELD_UNDEFINED, // hour
                DatatypeConstants.FIELD_UNDEFINED, // minute
                DatatypeConstants.FIELD_UNDEFINED, // second
                DatatypeConstants.FIELD_UNDEFINED, // millisecond
                timezone);
!!!1894427.java!!!	newXMLGregorianCalendarTime(in hours : int, in minutes : int, in seconds : int, in timezone : int) : XMLGregorianCalendar

        return newXMLGregorianCalendar(
                DatatypeConstants.FIELD_UNDEFINED, // Year
                DatatypeConstants.FIELD_UNDEFINED, // Month
                DatatypeConstants.FIELD_UNDEFINED, // Day
                hours,
                minutes,
                seconds,
                DatatypeConstants.FIELD_UNDEFINED, //Millisecond
                timezone);
!!!1894555.java!!!	newXMLGregorianCalendarTime(in hours : int, in minutes : int, in seconds : int, in fractionalSecond : BigDecimal, in timezone : int) : XMLGregorianCalendar

        return newXMLGregorianCalendar(
                null, // year
                DatatypeConstants.FIELD_UNDEFINED, // month
                DatatypeConstants.FIELD_UNDEFINED, // day
                hours,
                minutes,
                seconds,
                fractionalSecond,
                timezone);
!!!1894683.java!!!	newXMLGregorianCalendarTime(in hours : int, in minutes : int, in seconds : int, in milliseconds : int, in timezone : int) : XMLGregorianCalendar

        // millisecond may be undefined
        // millisecond must be >= 0 millisecond <= 1000
        BigDecimal realMilliseconds = null; // undefined value
        if (milliseconds != DatatypeConstants.FIELD_UNDEFINED) {
            if (milliseconds < 0 || milliseconds > 1000) {
                throw new IllegalArgumentException(
                        "javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendarTime("
                        + "int hours, int minutes, int seconds, int milliseconds, int timezone)"
                        + "with invalid milliseconds: " + milliseconds
                );
            }
            realMilliseconds = BigDecimal.valueOf((long) milliseconds, 3);
        }

        return newXMLGregorianCalendarTime(
                hours,
                minutes,
                seconds,
                realMilliseconds,
                timezone
        );
