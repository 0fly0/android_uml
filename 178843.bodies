class URLHandler
!!!634651.java!!!	URLHandler(inout url : URL)
            this.url = url;
            this.codeSourceUrl = url;
!!!634779.java!!!	findResources(inout name : String, inout resources : ArrayList) : void
            URL res = findResource(name);
            if (res != null && !resources.contains(res)) {
                resources.add(res);
            }
!!!634907.java!!!	findClass(inout packageName : String, inout name : String, inout origName : String) : Class
            URL resURL = targetURL(url, name);
            if (resURL != null) {
                try {
                    InputStream is = resURL.openStream();
                    return createClass(is, packageName, origName);
                } catch (IOException e) {
                }
            }
            return null;
!!!635035.java!!!	createClass(inout is : InputStream, inout packageName : String, inout origName : String) : Class
            if (is == null) {
                return null;
            }
            byte[] clBuf;
            try {
                clBuf = Streams.readFully(is);
            } catch (IOException e) {
                return null;
            }
            if (packageName != null) {
                String packageDotName = packageName.replace('/', '.');
                Package packageObj = getPackage(packageDotName);
                if (packageObj == null) {
                    definePackage(packageDotName, null, null,
                            null, null, null, null, null);
                } else {
                    if (packageObj.isSealed()) {
                        throw new SecurityException("Package is sealed");
                    }
                }
            }
            return defineClass(origName, clBuf, 0, clBuf.length, new CodeSource(codeSourceUrl, (Certificate[]) null));
!!!635163.java!!!	findResource(inout name : String) : URL
            URL resURL = targetURL(url, name);
            if (resURL != null) {
                try {
                    URLConnection uc = resURL.openConnection();
                    uc.getInputStream().close();
                    // HTTP can return a stream on a non-existent file
                    // So check for the return code;
                    if (!resURL.getProtocol().equals("http")) {
                        return resURL;
                    }
                    int code;
                    if ((code = ((HttpURLConnection) uc).getResponseCode()) >= 200
                            && code < 300) {
                        return resURL;
                    }
                } catch (SecurityException e) {
                    return null;
                } catch (IOException e) {
                    return null;
                }
            }
            return null;
!!!635291.java!!!	targetURL(inout base : URL, inout name : String) : URL
            try {
                StringBuilder fileBuilder = new StringBuilder();
                fileBuilder.append(base.getFile());
                URI.PATH_ENCODER.appendEncoded(fileBuilder, name);
                String file = fileBuilder.toString();

                return new URL(base.getProtocol(), base.getHost(), base.getPort(), file, null);
            } catch (MalformedURLException e) {
                return null;
            }
