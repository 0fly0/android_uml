class Utils
!!!12414604.java!!!	updatePreferenceToSpecificActivityOrRemove(inout context : Context, inout parentPreferenceGroup : PreferenceGroup, in preferenceKey : String, in flags : int) : boolean

        Preference preference = parentPreferenceGroup.findPreference(preferenceKey);
        if (preference == null) {
            return false;
        }

        Intent intent = preference.getIntent();
        if (intent != null) {
            // Find the activity that is in the system image
            PackageManager pm = context.getPackageManager();
            List<ResolveInfo> list = pm.queryIntentActivities(intent, 0);
            int listSize = list.size();
            for (int i = 0; i < listSize; i++) {
                ResolveInfo resolveInfo = list.get(i);
                if ((resolveInfo.activityInfo.applicationInfo.flags
                & ApplicationInfo.FLAG_SYSTEM) != 0) {

                    // Replace the intent with this specific activity
                    preference.setIntent(new Intent().setClassName(
                            resolveInfo.activityInfo.packageName,
                            resolveInfo.activityInfo.name));

                    if ((flags & UPDATE_PREFERENCE_FLAG_SET_TITLE_TO_MATCHING_ACTIVITY) != 0) {
                        // Set the preference title to the activity's label
                        preference.setTitle(resolveInfo.loadLabel(pm));
                    }

                    return true;
                }
            }
        }

        // Did not find a matching activity, so remove the preference
        parentPreferenceGroup.removePreference(preference);

        return true;
!!!12414732.java!!!	isMonkeyRunning() : boolean
        return ActivityManager.isUserAMonkey();
!!!12414860.java!!!	reboot(inout context : Context) : void

        // Do not reboot if on Mokey run.
        if (isMonkeyRunning()) {
            return;
        }

        Intent rebootIntent = new Intent(Intent.ACTION_REBOOT);
        // Flags that are required for WatchDog to not ignore the intent.
        rebootIntent.putExtra("nowait", 1);
        rebootIntent.putExtra("interval", 1);
        rebootIntent.putExtra("window", 0);
        context.sendBroadcast(rebootIntent);
!!!12414988.java!!!	isWifiOnly() : boolean
        return false;
!!!12415116.java!!!	isValidIpAddress(in ipAddress : String, inout allowEmptyValue : boolean) : boolean
        if (ipAddress == null || ipAddress.length() == 0) {
            return allowEmptyValue;
        }

        int dotCount = 0;
        for (int i = 0; i < ipAddress.length(); i++) {
            if ('.' == ipAddress.charAt(i)) {
                dotCount++;
            }
        }

        if (dotCount != 3) {
            return false;
        }

        try {
            InetAddress.getByName(ipAddress);
            return true;
        } catch (Throwable ex) {
            return false;
        }
!!!12415244.java!!!	isNetworkActive(inout manager : ConnectivityManager, in connectionType : int) : boolean
        if (manager == null) {
            Log.e(TAG, "Connectivity Manager is null!");
            return false;
        } else {
            NetworkInfo networkInfo = manager.getActiveNetworkInfo();

            if (networkInfo == null) {
                return false;
            }

            if (connectionType == networkInfo.getType()) {
                if (networkInfo.getState() == State.CONNECTED) {
                    return true;
                }
            }
            return false;
        }
!!!12415372.java!!!	isNetworkConnected(inout manager : ConnectivityManager, in connectionType : int) : boolean
        if (manager == null) {
            Log.e(TAG, "Connectivity Manager is null!");
            return false;
        } else {
            NetworkInfo networkInfo = manager.getNetworkInfo(connectionType);
            if (networkInfo == null) {
                return false;
            }

            return networkInfo.isConnected();
        }
!!!12415500.java!!!	getNetWorkType(inout manager : ConnectivityManager) : int
        if (manager == null) {
            Log.e(TAG, "Connectivity Manager is null!");
            return -1;
        } else {
            NetworkInfo networkInfo = manager.getActiveNetworkInfo();

            if (networkInfo == null) {
                return -1;
            }

            if (networkInfo.getState() == State.CONNECTED) {
                return networkInfo.getType();
            }
            return -1;
        }
!!!12415628.java!!!	CreateObjectByClass(in className : String) : Object
        Object obj = null;
        if (!className.isEmpty()) {
            try {
                Class<?> c = Class.forName(className);
                obj = c.newInstance();
            } catch (Exception e) {
                Log.w(TAG, "CreateObjectByClass reflection exception " + e);
            }
        }
        return obj;
!!!12415756.java!!!	GetClassTypeByClassName(in className : String) : Class<?>
        Class<?> c = null;
        if (!className.isEmpty()) {
            try {
                c = Class.forName(className);
            } catch (Exception e) {
                Log.w(TAG, "GetClassTypeByClassName reflection exception " + e);
            }
        }
        return c;
!!!12415884.java!!!	getValueByAPI(inout API_obj : Object, in API_name : String) : int
        int retVal = 0;
        if (!Utils.isPrototyping()) {

            Class<?> iClass = API_obj.getClass();
            try {
                Method getMethod = iClass.getMethod("get" + API_name);
                retVal = (Integer) getMethod.invoke(API_obj);
                Log.v(TAG, "getValueByAPI " + API_name + " return:" + retVal);
            } catch (Exception e) {
                Log.w(TAG, "getValueByAPI reflection exception " + e);
            }
        }
        return retVal;
!!!12416012.java!!!	setValueByAPI(inout API_obj : Object, in API_name : String, in val : int) : void
        if (!Utils.isPrototyping()) {

            Class<?> iClass = API_obj.getClass();
            try {
                Method setMethod = iClass.getMethod("set" + API_name, new Class[] {
                        int.class
                });
                Log.v(TAG, "setValueByAPI " + API_name + " value:" + val);
                setMethod.invoke(API_obj, val);
            } catch (Exception e) {
                Log.w(TAG, "API_name=" + API_name + " setValueByAPI " + API_name + " exception "
                        + e);
            }
        }
!!!12416140.java!!!	invokeStaticMethod(in className : String, in methodName : String, inout args : Object) : Object
        if (!className.isEmpty()) {
            try {
                Class<?> c = Class.forName(className);
                Class<?>[] argsClass = new Class[args.length];

                for (int i = 0, j = args.length; i < j; i++) {
                    argsClass[i] = args[i].getClass();
                }

                Method method = c.getMethod(methodName, argsClass);
                return method.invoke(null, args);
            } catch (Exception e) {
                Log.w(TAG, "invokeStaticMethod reflection exception " + e);
            }
        }

        return null;
!!!12416268.java!!!	isServiceAlive(inout context : Context, in serviceName : String) : boolean
        ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        List<ActivityManager.RunningServiceInfo> services = am.getRunningServices(30);
        for (ActivityManager.RunningServiceInfo service : services) {
            String name = service.service.getClassName();
            if (name.equals(serviceName)) {
                return true;
            }
        }
        return false;
!!!12416396.java!!!	getStringValueByAPI(inout API_obj : Object, in API_name : String) : String
        String retVal = "";
        Class<?> iClass = API_obj.getClass();
        try {
            Method getMethod = iClass.getMethod("get" + API_name);
            retVal = (String) getMethod.invoke(API_obj);
            Log.v(TAG, "getValueByAPI " + API_name + " return:" + retVal);
        } catch (Exception e) {
            Log.w(TAG, "getValueByAPI reflection exception " + e);
        }
        return retVal;
!!!12416524.java!!!	setValueByAPI(inout API_obj : Object, in API_name : String, in mode : int, in val : int) : int
        Class<?> iClass = API_obj.getClass();
        int result = 0;
        try {
            Method setMethod = iClass.getMethod("set" + API_name, new Class[] {
                    int.class, int.class
            });
            Log.v(TAG, "setValueByAPI " + API_name + " value:" + val + "  mode=" + mode);
            result = (Integer) setMethod.invoke(API_obj, new Object[] {
                    mode, val
            });
        } catch (Exception e) {
            Log.w(TAG, "setValueByAPI reflection exception " + e);
        }
        return result;
!!!12416652.java!!!	getValueByAPI(inout API_obj : Object, in API_name : String, in mode : int) : int
        int retVal = 0;
        Class<?> iClass = API_obj.getClass();
        try {
            Method getMethod = iClass.getMethod("get" + API_name, new Class[] {
                    int.class
            });
            retVal = (Integer) getMethod.invoke(API_obj, new Object[] {
                    mode
            });
            Log.v(TAG, "getValueByAPI " + API_name + " return:" + retVal);
        } catch (Exception e) {
            Log.w(TAG, "getValueByAPI reflection exception " + e);
        }
        return retVal;
!!!12416780.java!!!	isPrototyping() : boolean
        return Build.BRAND.toLowerCase().indexOf("generic") != -1
                && Build.MODEL.toLowerCase().indexOf("sdk") != -1;
!!!12417036.java!!!	getMsgQueueHandler() : Handler
        if (mHandler == null) {
            mHandlerThread = new HandlerThread("HandlerThread");
            mHandlerThread.start();
            // This statment is added to make sure the Looper is not null.
            while (!mHandlerThread.isAlive()) {
            }
            mHandler = new Handler(mHandlerThread.getLooper());
        }
        return mHandler;
!!!12417164.java!!!	startOrStopService(inout context : Context, in action : String) : void
        Intent i = new Intent();
        i.setAction(action);
        context.startService(i);
!!!12417292.java!!!	exitFromApp(in context : Context) : void
        Log.d(TAG,
                "exitFromApp() called from class:"
                        + new Throwable().getStackTrace()[1].getClassName()
                        + " from method :" + new Throwable().getStackTrace()[1].getMethodName()
                        + " at line number " + new Throwable().getStackTrace()[1].getLineNumber());
        final Intent closeAppIntent = new Intent("CLOSE_APP");
        context.sendBroadcast(closeAppIntent);
