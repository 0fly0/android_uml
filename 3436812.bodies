class BaseMachine
!!!14805004.java!!!	BaseMachine(inout prototype : Prototype)
        if (prototype == null) {
            throw new NullPointerException("prototype == null");
        }

        this.prototype = prototype;
        args = new TypeBearer[10];
        results = new TypeBearer[6];
        clearArgs();
!!!14805132.java!!!	getPrototype() : Prototype
        return prototype;
!!!14805260.java!!!	clearArgs() : void
        argCount = 0;
        auxType = null;
        auxInt = 0;
        auxCst = null;
        auxTarget = 0;
        auxCases = null;
        auxInitValues = null;
        localIndex = -1;
        localInfo = false;
        localTarget = null;
        resultCount = -1;
!!!14805388.java!!!	popArgs(inout frame : Frame, in count : int) : void
        ExecutionStack stack = frame.getStack();

        clearArgs();

        if (count > args.length) {
            // Grow args, and add a little extra room to grow even more.
            args = new TypeBearer[count + 10];
        }

        for (int i = count - 1; i >= 0; i--) {
            args[i] = stack.pop();
        }

        argCount = count;
!!!14805516.java!!!	popArgs(inout frame : Frame, inout prototype : Prototype) : void
        StdTypeList types = prototype.getParameterTypes();
        int size = types.size();

        // Use the above method to do the actual popping...
        popArgs(frame, size);

        // ...and then verify the popped types.

        for (int i = 0; i < size; i++) {
            if (! Merger.isPossiblyAssignableFrom(types.getType(i), args[i])) {
                throw new SimException("at stack depth " + (size - 1 - i) +
                        ", expected type " + types.getType(i).toHuman() +
                        " but found " + args[i].getType().toHuman());
            }
        }
!!!14805644.java!!!	popArgs(inout frame : Frame, inout type : Type) : void
        // Use the above method to do the actual popping...
        popArgs(frame, 1);

        // ...and then verify the popped type.
        if (! Merger.isPossiblyAssignableFrom(type, args[0])) {
            throw new SimException("expected type " + type.toHuman() +
                    " but found " + args[0].getType().toHuman());
        }
!!!14805772.java!!!	popArgs(inout frame : Frame, inout type1 : Type, inout type2 : Type) : void
        // Use the above method to do the actual popping...
        popArgs(frame, 2);

        // ...and then verify the popped types.

        if (! Merger.isPossiblyAssignableFrom(type1, args[0])) {
            throw new SimException("expected type " + type1.toHuman() +
                    " but found " + args[0].getType().toHuman());
        }

        if (! Merger.isPossiblyAssignableFrom(type2, args[1])) {
            throw new SimException("expected type " + type2.toHuman() +
                    " but found " + args[1].getType().toHuman());
        }
!!!14805900.java!!!	popArgs(inout frame : Frame, inout type1 : Type, inout type2 : Type, inout type3 : Type) : void
        // Use the above method to do the actual popping...
        popArgs(frame, 3);

        // ...and then verify the popped types.

        if (! Merger.isPossiblyAssignableFrom(type1, args[0])) {
            throw new SimException("expected type " + type1.toHuman() +
                    " but found " + args[0].getType().toHuman());
        }

        if (! Merger.isPossiblyAssignableFrom(type2, args[1])) {
            throw new SimException("expected type " + type2.toHuman() +
                    " but found " + args[1].getType().toHuman());
        }

        if (! Merger.isPossiblyAssignableFrom(type3, args[2])) {
            throw new SimException("expected type " + type3.toHuman() +
                    " but found " + args[2].getType().toHuman());
        }
!!!14806028.java!!!	localArg(inout frame : Frame, in idx : int) : void
        clearArgs();
        args[0] = frame.getLocals().get(idx);
        argCount = 1;
        localIndex = idx;
!!!14806156.java!!!	localInfo(inout local : boolean) : void
        localInfo = local;
!!!14806284.java!!!	auxType(inout type : Type) : void
        auxType = type;
!!!14806412.java!!!	auxIntArg(in value : int) : void
        auxInt = value;
!!!14806540.java!!!	auxCstArg(inout cst : Constant) : void
        if (cst == null) {
            throw new NullPointerException("cst == null");
        }

        auxCst = cst;
!!!14806668.java!!!	auxTargetArg(in target : int) : void
        auxTarget = target;
!!!14806796.java!!!	auxSwitchArg(inout cases : SwitchList) : void
        if (cases == null) {
            throw new NullPointerException("cases == null");
        }

        auxCases = cases;
!!!14806924.java!!!	auxInitValues(inout initValues : ArrayList<Constant>) : void
        auxInitValues = initValues;
!!!14807052.java!!!	localTarget(in idx : int, inout type : Type, inout local : LocalItem) : void
        localTarget = RegisterSpec.makeLocalOptional(idx, type, local);
!!!14807180.java!!!	argCount() : int
        return argCount;
!!!14807308.java!!!	argWidth() : int
        int result = 0;

        for (int i = 0; i < argCount; i++) {
            result += args[i].getType().getCategory();
        }

        return result;
!!!14807436.java!!!	arg(in n : int) : TypeBearer
        if (n >= argCount) {
            throw new IllegalArgumentException("n >= argCount");
        }

        try {
            return args[n];
        } catch (ArrayIndexOutOfBoundsException ex) {
            // Translate the exception.
            throw new IllegalArgumentException("n < 0");
        }
!!!14807564.java!!!	getAuxType() : Type
        return auxType;
!!!14807692.java!!!	getAuxInt() : int
        return auxInt;
!!!14807820.java!!!	getAuxCst() : Constant
        return auxCst;
!!!14807948.java!!!	getAuxTarget() : int
        return auxTarget;
!!!14808076.java!!!	getAuxCases() : SwitchList
        return auxCases;
!!!14808204.java!!!	getInitValues() : Constant
        return auxInitValues;
!!!14808332.java!!!	getLocalIndex() : int
        return localIndex;
!!!14808460.java!!!	getLocalInfo() : boolean
        return localInfo;
!!!14808588.java!!!	getLocalTarget(inout isMove : boolean) : RegisterSpec
        if (localTarget == null) {
            return null;
        }

        if (resultCount != 1) {
            throw new SimException("local target with " +
                    ((resultCount == 0) ? "no" : "multiple") + " results");
        }

        TypeBearer result = results[0];
        Type resultType = result.getType();
        Type localType = localTarget.getType();

        if (resultType == localType) {
            /*
             * If this is to be a move operation and the result is a
             * known value, make the returned localTarget embody that
             * value.
             */
            if (isMove) {
                return localTarget.withType(result);
            } else {
                return localTarget;
            }
        }

        if (! Merger.isPossiblyAssignableFrom(localType, resultType)) {
            // The result and local types are inconsistent. Complain!
            throwLocalMismatch(resultType, localType);
            return null;
        }

        if (localType == Type.OBJECT) {
            /*
             * The result type is more specific than the local type,
             * so use that instead.
             */
            localTarget = localTarget.withType(result);
        }

        return localTarget;
!!!14808716.java!!!	clearResult() : void
        resultCount = 0;
!!!14808844.java!!!	setResult(inout result : TypeBearer) : void
        if (result == null) {
            throw new NullPointerException("result == null");
        }

        results[0] = result;
        resultCount = 1;
!!!14808972.java!!!	addResult(inout result : TypeBearer) : void
        if (result == null) {
            throw new NullPointerException("result == null");
        }

        results[resultCount] = result;
        resultCount++;
!!!14809100.java!!!	resultCount() : int
        if (resultCount < 0) {
            throw new SimException("results never set");
        }

        return resultCount;
!!!14809228.java!!!	resultWidth() : int
        int width = 0;

        for (int i = 0; i < resultCount; i++) {
            width += results[i].getType().getCategory();
        }

        return width;
!!!14809356.java!!!	result(in n : int) : TypeBearer
        if (n >= resultCount) {
            throw new IllegalArgumentException("n >= resultCount");
        }

        try {
            return results[n];
        } catch (ArrayIndexOutOfBoundsException ex) {
            // Translate the exception.
            throw new IllegalArgumentException("n < 0");
        }
!!!14809484.java!!!	storeResults(inout frame : Frame) : void
        if (resultCount < 0) {
            throw new SimException("results never set");
        }

        if (resultCount == 0) {
            // Nothing to do.
            return;
        }

        if (localTarget != null) {
            /*
             * Note: getLocalTarget() doesn't necessarily return
             * localTarget directly.
             */
            frame.getLocals().set(getLocalTarget(false));
        } else {
            ExecutionStack stack = frame.getStack();
            for (int i = 0; i < resultCount; i++) {
                if (localInfo) {
                    stack.setLocal();
                }
                stack.push(results[i]);
            }
        }
!!!14809612.java!!!	throwLocalMismatch(inout found : TypeBearer, inout local : TypeBearer) : void
        throw new SimException("local variable type mismatch: " +
                "attempt to set or access a value of type " +
                found.toHuman() +
                " using a local variable of type " +
                local.toHuman() +
                ". This is symptomatic of .class transformation tools " +
                "that ignore local variable information.");
