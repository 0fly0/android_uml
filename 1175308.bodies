class AllocationAdapter
!!!6521996.java!!!	AllocationAdapter(in id : int, inout rs : RenderScript, inout alloc : Allocation)
        super(id, rs, alloc.mType, alloc.mUsage);
        mAdaptedAllocation = alloc;
!!!6522124.java!!!	getID(inout rs : RenderScript) : int
        throw new RSInvalidStateException(
            "This operation is not supported with adapters at this time.");
!!!6522252.java!!!	subData(in xoff : int, inout fp : FieldPacker) : void
        super.setFromFieldPacker(xoff, fp);
!!!6522380.java!!!	subElementData(in xoff : int, in component_number : int, inout fp : FieldPacker) : void
        super.setFromFieldPacker(xoff, component_number, fp);
!!!6522508.java!!!	subData1D(in off : int, in count : int, inout d : int) : void
        super.copy1DRangeFrom(off, count, d);
!!!6522636.java!!!	subData1D(in off : int, in count : int, inout d : short) : void
        super.copy1DRangeFrom(off, count, d);
!!!6522764.java!!!	subData1D(in off : int, in count : int, inout d : byte) : void
        super.copy1DRangeFrom(off, count, d);
!!!6522892.java!!!	subData1D(in off : int, in count : int, inout d : float) : void
        super.copy1DRangeFrom(off, count, d);
!!!6523020.java!!!	subData2D(in xoff : int, in yoff : int, in w : int, in h : int, inout d : int) : void
        super.copy2DRangeFrom(xoff, yoff, w, h, d);
!!!6523148.java!!!	subData2D(in xoff : int, in yoff : int, in w : int, in h : int, inout d : float) : void
        super.copy2DRangeFrom(xoff, yoff, w, h, d);
!!!6523276.java!!!	readData(inout d : int) : void
        super.copyTo(d);
!!!6523404.java!!!	readData(inout d : float) : void
        super.copyTo(d);
!!!6523532.java!!!	initLOD(in lod : int) : void
        if (lod < 0) {
            throw new RSIllegalArgumentException("Attempting to set negative lod (" + lod + ").");
        }

        int tx = mAdaptedAllocation.mType.getX();
        int ty = mAdaptedAllocation.mType.getY();
        int tz = mAdaptedAllocation.mType.getZ();

        for (int ct=0; ct < lod; ct++) {
            if ((tx==1) && (ty == 1) && (tz == 1)) {
                throw new RSIllegalArgumentException("Attempting to set lod (" + lod + ") out of range.");
            }

            if (tx > 1) tx >>= 1;
            if (ty > 1) ty >>= 1;
            if (tz > 1) tz >>= 1;
        }

        mCurrentDimX = tx;
        mCurrentDimY = ty;
        mCurrentDimZ = tz;
        mCurrentCount = mCurrentDimX;
        if (mCurrentDimY > 1) {
            mCurrentCount *= mCurrentDimY;
        }
        if (mCurrentDimZ > 1) {
            mCurrentCount *= mCurrentDimZ;
        }
        mSelectedY = 0;
        mSelectedZ = 0;
!!!6523660.java!!!	setLOD(in lod : int) : void
        if (!mAdaptedAllocation.getType().hasMipmaps()) {
            throw new RSInvalidStateException("Cannot set LOD when the allocation type does not include mipmaps.");
        }
        if (!mConstrainedLOD) {
            throw new RSInvalidStateException("Cannot set LOD when the adapter includes mipmaps.");
        }

        initLOD(lod);
!!!6523788.java!!!	setFace(inout cf : CubemapFace) : void
        if (!mAdaptedAllocation.getType().hasFaces()) {
            throw new RSInvalidStateException("Cannot set Face when the allocation type does not include faces.");
        }
        if (!mConstrainedFace) {
            throw new RSInvalidStateException("Cannot set LOD when the adapter includes mipmaps.");
        }
        if (cf == null) {
            throw new RSIllegalArgumentException("Cannot set null face.");
        }

        mSelectedFace = cf;
!!!6523916.java!!!	setY(in y : int) : void
        if (mAdaptedAllocation.getType().getY() == 0) {
            throw new RSInvalidStateException("Cannot set Y when the allocation type does not include Y dim.");
        }
        if (mAdaptedAllocation.getType().getY() <= y) {
            throw new RSInvalidStateException("Cannot set Y greater than dimension of allocation.");
        }
        if (!mConstrainedY) {
            throw new RSInvalidStateException("Cannot set Y when the adapter includes Y.");
        }

        mSelectedY = y;
!!!6524044.java!!!	setZ(in z : int) : void
        if (mAdaptedAllocation.getType().getZ() == 0) {
            throw new RSInvalidStateException("Cannot set Z when the allocation type does not include Z dim.");
        }
        if (mAdaptedAllocation.getType().getZ() <= z) {
            throw new RSInvalidStateException("Cannot set Z greater than dimension of allocation.");
        }
        if (!mConstrainedZ) {
            throw new RSInvalidStateException("Cannot set Z when the adapter includes Z.");
        }

        mSelectedZ = z;
!!!6524172.java!!!	create1D(inout rs : RenderScript, inout a : Allocation) : AllocationAdapter
        rs.validate();
        AllocationAdapter aa = new AllocationAdapter(0, rs, a);
        aa.mConstrainedLOD = true;
        aa.mConstrainedFace = true;
        aa.mConstrainedY = true;
        aa.mConstrainedZ = true;
        aa.initLOD(0);
        return aa;
!!!6524300.java!!!	create2D(inout rs : RenderScript, inout a : Allocation) : AllocationAdapter
        android.util.Log.e("rs", "create2d " + a);
        rs.validate();
        AllocationAdapter aa = new AllocationAdapter(0, rs, a);
        aa.mConstrainedLOD = true;
        aa.mConstrainedFace = true;
        aa.mConstrainedY = false;
        aa.mConstrainedZ = true;
        aa.initLOD(0);
        return aa;
!!!6524428.java!!!	resize(in dimX : int) : void
        throw new RSInvalidStateException("Resize not allowed for Adapters.");
