class Surface
!!!4589452.java!!!	Surface()
        checkHeadless();

        mCloseGuard.open("release");
!!!4589580.java!!!	Surface(inout session : SurfaceSession, in name : String, in w : int, in h : int, in format : int, in flags : int)
        if (session == null) {
            throw new IllegalArgumentException("session must not be null");
        }
        if (name == null) {
            throw new IllegalArgumentException("name must not be null");
        }

        if ((flags & HIDDEN) == 0) {
            Log.w(TAG, "Surfaces should always be created with the HIDDEN flag set "
                    + "to ensure that they are not made visible prematurely before "
                    + "all of the surface's properties have been configured.  "
                    + "Set the other properties and make the surface visible within "
                    + "a transaction.  New surface name: " + name,
                    new Throwable());
        }

        checkHeadless();

        mName = name;
        mWidth = w;
        mHeight = h;
        nativeCreate(session, name, w, h, format, flags);

        mCloseGuard.open("release");
!!!4589708.java!!!	Surface(inout surfaceTexture : SurfaceTexture)
        if (surfaceTexture == null) {
            throw new IllegalArgumentException("surfaceTexture must not be null");
        }

        checkHeadless();

        mName = surfaceTexture.toString();
        try {
            nativeCreateFromSurfaceTexture(surfaceTexture);
        } catch (OutOfResourcesException ex) {
            // We can't throw OutOfResourcesException because it would be an API change.
            throw new RuntimeException(ex);
        }

        mCloseGuard.open("release");
!!!4589836.java!!!	finalize() : void
        try {
            if (mCloseGuard != null) {
                mCloseGuard.warnIfOpen();
            }
            nativeRelease();
        } finally {
            super.finalize();
        }
!!!4589964.java!!!	release() : void
        nativeRelease();
        mCloseGuard.close();
!!!4590092.java!!!	destroy() : void
        nativeDestroy();
        mCloseGuard.close();
!!!4590220.java!!!	isValid() : boolean
        return nativeIsValid();
!!!4590348.java!!!	getGenerationId() : int
        return mGenerationId;
!!!4590476.java!!!	isConsumerRunningBehind() : boolean
        return nativeIsConsumerRunningBehind();
!!!4590604.java!!!	lockCanvas(inout dirty : Rect) : Canvas
        return nativeLockCanvas(dirty);
!!!4590732.java!!!	unlockCanvasAndPost(inout canvas : Canvas) : void
        nativeUnlockCanvasAndPost(canvas);
!!!4590860.java!!!	unlockCanvas(inout canvas : Canvas) : void
        throw new UnsupportedOperationException();
!!!4590988.java!!!	setCompatibilityTranslator(inout translator : Translator) : void
        if (translator != null) {
            float appScale = translator.applicationScale;
            mCompatibleMatrix = new Matrix();
            mCompatibleMatrix.setScale(appScale, appScale);
        }
!!!4591116.java!!!	screenshot(in width : int, in height : int) : Bitmap
        // TODO: should take the display as a parameter
        IBinder displayToken = getBuiltInDisplay(BUILT_IN_DISPLAY_ID_MAIN);
        return nativeScreenshot(displayToken, width, height, 0, 0, true);
!!!4591244.java!!!	screenshot(in width : int, in height : int, in minLayer : int, in maxLayer : int) : Bitmap
        // TODO: should take the display as a parameter
        IBinder displayToken = getBuiltInDisplay(BUILT_IN_DISPLAY_ID_MAIN);
        return nativeScreenshot(displayToken, width, height, minLayer, maxLayer, false);
!!!4591372.java!!!	openTransaction() : void
        nativeOpenTransaction();
!!!4591500.java!!!	closeTransaction() : void
        nativeCloseTransaction();
!!!4591628.java!!!	setAnimationTransaction() : void
        nativeSetAnimationTransaction();
!!!4591756.java!!!	setLayer(in zorder : int) : void
        nativeSetLayer(zorder);
!!!4591884.java!!!	setPosition(in x : int, in y : int) : void
        nativeSetPosition(x, y);
!!!4592012.java!!!	setPosition(in x : float, in y : float) : void
        nativeSetPosition(x, y);
!!!4592140.java!!!	setSize(in w : int, in h : int) : void
        mWidth = w;
        mHeight = h;
        nativeSetSize(w, h);
!!!4592268.java!!!	getWidth() : int
        return mWidth;
!!!4592396.java!!!	getHeight() : int
        return mHeight;
!!!4592524.java!!!	hide() : void
        nativeSetFlags(SURFACE_HIDDEN, SURFACE_HIDDEN);
!!!4592652.java!!!	show() : void
        nativeSetFlags(0, SURFACE_HIDDEN);
!!!4592780.java!!!	setTransparentRegionHint(inout region : Region) : void
        nativeSetTransparentRegionHint(region);
!!!4592908.java!!!	setAlpha(in alpha : float) : void
        nativeSetAlpha(alpha);
!!!4593036.java!!!	setMatrix(in dsdx : float, in dtdx : float, in dsdy : float, in dtdy : float) : void
        nativeSetMatrix(dsdx, dtdx, dsdy, dtdy);
!!!4593164.java!!!	setFlags(in flags : int, in mask : int) : void
        nativeSetFlags(flags, mask);
!!!4593292.java!!!	setWindowCrop(inout crop : Rect) : void
        nativeSetWindowCrop(crop);
!!!4593420.java!!!	setLayerStack(in layerStack : int) : void
        nativeSetLayerStack(layerStack);
!!!4593548.java!!!	getBuiltInDisplay(in builtInDisplayId : int) : IBinder
        return nativeGetBuiltInDisplay(builtInDisplayId);
!!!4593676.java!!!	createDisplay(in name : String, inout secure : boolean) : IBinder
        if (name == null) {
            throw new IllegalArgumentException("name must not be null");
        }
        return nativeCreateDisplay(name, secure);
!!!4593804.java!!!	setDisplaySurface(inout displayToken : IBinder, inout surface : Surface) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeSetDisplaySurface(displayToken, surface);
!!!4593932.java!!!	setDisplayLayerStack(inout displayToken : IBinder, in layerStack : int) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeSetDisplayLayerStack(displayToken, layerStack);
!!!4594060.java!!!	setDisplayProjection(inout displayToken : IBinder, in orientation : int, inout layerStackRect : Rect, inout displayRect : Rect) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        if (layerStackRect == null) {
            throw new IllegalArgumentException("layerStackRect must not be null");
        }
        if (displayRect == null) {
            throw new IllegalArgumentException("displayRect must not be null");
        }
        nativeSetDisplayProjection(displayToken, orientation, layerStackRect, displayRect);
!!!4594188.java!!!	getDisplayInfo(inout displayToken : IBinder, inout outInfo : PhysicalDisplayInfo) : boolean
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        if (outInfo == null) {
            throw new IllegalArgumentException("outInfo must not be null");
        }
        return nativeGetDisplayInfo(displayToken, outInfo);
!!!4594316.java!!!	blankDisplay(inout displayToken : IBinder) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeBlankDisplay(displayToken);
!!!4594444.java!!!	unblankDisplay(inout displayToken : IBinder) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeUnblankDisplay(displayToken);
!!!4594572.java!!!	copyFrom(inout other : Surface) : void
        if (other == null) {
            throw new IllegalArgumentException("other must not be null");
        }
        if (other != this) {
            nativeCopyFrom(other);
        }
!!!4594700.java!!!	transferFrom(inout other : Surface) : void
        if (other == null) {
            throw new IllegalArgumentException("other must not be null");
        }
        if (other != this) {
            nativeTransferFrom(other);
        }
!!!4594828.java!!!	describeContents() : int
        return 0;
!!!4594956.java!!!	readFromParcel(inout source : Parcel) : void
        if (source == null) {
            throw new IllegalArgumentException("source must not be null");
        }

        mName = source.readString();
        nativeReadFromParcel(source);
!!!4595084.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        if (dest == null) {
            throw new IllegalArgumentException("dest must not be null");
        }

        dest.writeString(mName);
        nativeWriteToParcel(dest);
        if ((flags & Parcelable.PARCELABLE_WRITE_RETURN_VALUE) != 0) {
            release();
        }
!!!4595212.java!!!	toString() : String
        return "Surface(name=" + mName + ", identity=" + nativeGetIdentity() + ")";
!!!4595340.java!!!	checkHeadless() : void
        if (HEADLESS) {
            throw new UnsupportedOperationException("Device is headless");
        }
