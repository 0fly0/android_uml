class LongArrayBuffer
!!!740379.java!!!	LongArrayBuffer(inout array : long)
    this(array.length, array, 0, false);
!!!740507.java!!!	LongArrayBuffer(in capacity : int, inout backingArray : long, in arrayOffset : int, inout isReadOnly : boolean)
    super(capacity);
    this.backingArray = backingArray;
    this.arrayOffset = arrayOffset;
    this.isReadOnly = isReadOnly;
!!!740635.java!!!	copy(inout other : LongArrayBuffer, in markOfOther : int, inout isReadOnly : boolean) : LongArrayBuffer
    LongArrayBuffer buf = new LongArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly);
    buf.limit = other.limit;
    buf.position = other.position();
    buf.mark = markOfOther;
    return buf;
!!!740763.java!!!	asReadOnlyBuffer() : LongBuffer
    return copy(this, mark, true);
!!!740891.java!!!	compact() : LongBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    System.arraycopy(backingArray, position + arrayOffset, backingArray, arrayOffset, remaining());
    position = limit - position;
    limit = capacity;
    mark = UNSET_MARK;
    return this;
!!!741019.java!!!	duplicate() : LongBuffer
    return copy(this, mark, isReadOnly);
!!!741147.java!!!	slice() : LongBuffer
    return new LongArrayBuffer(remaining(), backingArray, arrayOffset + position, isReadOnly);
!!!741275.java!!!	isReadOnly() : boolean
    return isReadOnly;
!!!741403.java!!!	protectedArray() : long
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return backingArray;
!!!741531.java!!!	protectedArrayOffset() : int
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return arrayOffset;
!!!741659.java!!!	protectedHasArray() : boolean
    if (isReadOnly) {
      return false;
    }
    return true;
!!!741787.java!!!	get() : long
    if (position == limit) {
      throw new BufferUnderflowException();
    }
    return backingArray[arrayOffset + position++];
!!!741915.java!!!	get(in index : int) : long
    checkIndex(index);
    return backingArray[arrayOffset + index];
!!!742043.java!!!	get(inout dst : long, in dstOffset : int, in longCount : int) : LongBuffer
    if (longCount > remaining()) {
      throw new BufferUnderflowException();
    }
    System.arraycopy(backingArray, arrayOffset + position, dst, dstOffset, longCount);
    position += longCount;
    return this;
!!!742171.java!!!	isDirect() : boolean
    return false;
!!!742299.java!!!	order() : ByteOrder
    return ByteOrder.nativeOrder();
!!!742427.java!!!	put(in c : long) : LongBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (position == limit) {
      throw new BufferOverflowException();
    }
    backingArray[arrayOffset + position++] = c;
    return this;
!!!742555.java!!!	put(in index : int, in c : long) : LongBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index);
    backingArray[arrayOffset + index] = c;
    return this;
!!!742683.java!!!	put(inout src : long, in srcOffset : int, in longCount : int) : LongBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (longCount > remaining()) {
      throw new BufferOverflowException();
    }
    System.arraycopy(src, srcOffset, backingArray, arrayOffset + position, longCount);
    position += longCount;
    return this;
