class SerializationHandleMap
!!!266267.java!!!	SerializationHandleMap()
        this.size = 0;
        this.threshold = 21; // Copied from IdentityHashMap.
        int arraySize = (int) (((long) threshold * 10000) / LOAD_FACTOR);
        resizeArrays(arraySize);
!!!266395.java!!!	resizeArrays(in newSize : int) : void
        Object[] oldKeys = keys;
        int[] oldValues = values;

        this.keys = new Object[newSize];
        this.values = new int[newSize];

        if (oldKeys != null) {
            for (int i = 0; i < oldKeys.length; ++i) {
                Object key = oldKeys[i];
                int value = oldValues[i];
                int index = findIndex(key, keys);
                keys[index] = key;
                values[index] = value;
            }
        }
!!!266523.java!!!	get(inout key : Object) : int
        int index = findIndex(key, keys);
        if (keys[index] == key) {
            return values[index];
        }
        return -1;
!!!266651.java!!!	findIndex(inout key : Object, inout array : Object) : int
        int length = array.length;
        int index = getModuloHash(key, length);
        int last = (index + length - 1) % length;
        while (index != last) {
            if (array[index] == key || array[index] == null) {
                /*
                 * Found the key, or the next empty spot (which means key is not
                 * in the table)
                 */
                break;
            }
            index = (index + 1) % length;
        }
        return index;
!!!266779.java!!!	getModuloHash(inout key : Object, in length : int) : int
        return (System.identityHashCode(key) & 0x7FFFFFFF) % length;
!!!266907.java!!!	put(inout key : Object, in value : int) : int
        Object _key = key;
        int _value = value;

        int index = findIndex(_key, keys);

        // if the key doesn't exist in the table
        if (keys[index] != _key) {
            if (++size > threshold) {
                rehash();
                index = findIndex(_key, keys);
            }
            // insert the key and assign the value to -1 initially
            keys[index] = _key;
            values[index] = -1;
        }

        // insert value to where it needs to go, return the old value
        int result = values[index];
        values[index] = _value;
        return result;
!!!267035.java!!!	rehash() : void
        int newSize = keys.length * 2;
        resizeArrays(newSize);
        threshold = (int) ((long) (keys.length) * LOAD_FACTOR / 10000);
!!!267163.java!!!	remove(inout key : Object) : int
        boolean hashedOk;
        int index, next, hash;
        int result;
        Object object;
        index = next = findIndex(key, keys);

        if (keys[index] != key) {
            return -1;
        }

        // store the value for this key
        result = values[index];

        // shift the following elements up if needed
        // until we reach an empty spot
        int length = keys.length;
        while (true) {
            next = (next + 2) % length;
            object = keys[next];
            if (object == null) {
                break;
            }

            hash = getModuloHash(object, length);
            hashedOk = hash > index;
            if (next < index) {
                hashedOk = hashedOk || (hash <= next);
            } else {
                hashedOk = hashedOk && (hash <= next);
            }
            if (!hashedOk) {
                keys[index] = object;
                values[index] = values[next];
                index = next;
            }
        }
        size--;

        // clear both the key and the value
        keys[index] = null;
        values[index] = -1;

        return result;
!!!267291.java!!!	isEmpty() : boolean
        return size == 0;
