class InetAddress
!!!565019.java!!!	InetAddress(in family : int, inout ipaddress : byte, inout hostName : String)
        this.family = family;
        this.ipaddress = ipaddress;
        this.hostName = hostName;
!!!565147.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof InetAddress)) {
            return false;
        }
        return Arrays.equals(this.ipaddress, ((InetAddress) obj).ipaddress);
!!!565275.java!!!	getAddress() : byte
        return ipaddress.clone();
!!!565403.java!!!	bytesToInetAddresses(inout rawAddresses : byte, inout hostName : String) : InetAddress
        // Convert the byte arrays to InetAddresses.
        InetAddress[] returnedAddresses = new InetAddress[rawAddresses.length];
        for (int i = 0; i < rawAddresses.length; i++) {
            returnedAddresses[i] = makeInetAddress(rawAddresses[i], hostName);
        }
        return returnedAddresses;
!!!565531.java!!!	getAllByName(inout host : String) : InetAddress
        return getAllByNameImpl(host).clone();
!!!565659.java!!!	getAllByNameImpl(inout host : String) : InetAddress
        if (host == null || host.isEmpty()) {
            return loopbackAddresses();
        }

        // Is it a numeric address?
        InetAddress result = parseNumericAddressNoThrow(host);
        if (result != null) {
            result = disallowDeprecatedFormats(host, result);
            if (result == null) {
                throw new UnknownHostException("Deprecated IPv4 address format: " + host);
            }
            return new InetAddress[] { result };
        }

        return lookupHostByName(host).clone();
!!!565787.java!!!	makeInetAddress(inout bytes : byte, inout hostName : String) : InetAddress
        if (bytes.length == 4) {
            return new Inet4Address(bytes, hostName);
        } else if (bytes.length == 16) {
            return new Inet6Address(bytes, hostName, 0);
        } else {
            throw badAddressLength(bytes);
        }
!!!565915.java!!!	disallowDeprecatedFormats(inout address : String, inout inetAddress : InetAddress) : InetAddress
        // Only IPv4 addresses are problematic.
        if (!(inetAddress instanceof Inet4Address) || address.indexOf(':') != -1) {
            return inetAddress;
        }
        // If inet_pton(3) can't parse it, it must have been a deprecated format.
        // We need to return inet_pton(3)'s result to ensure that numbers assumed to be octal
        // by getaddrinfo(3) are reinterpreted by inet_pton(3) as decimal.
        return Libcore.os.inet_pton(AF_INET, address);
!!!566043.java!!!	parseNumericAddressNoThrow(inout address : String) : InetAddress
        // Accept IPv6 addresses (only) in square brackets for compatibility.
        if (address.startsWith("[") && address.endsWith("]") && address.indexOf(':') != -1) {
            address = address.substring(1, address.length() - 1);
        }
        StructAddrinfo hints = new StructAddrinfo();
        hints.ai_flags = AI_NUMERICHOST;
        InetAddress[] addresses = null;
        try {
            addresses = Libcore.os.getaddrinfo(address, hints);
        } catch (GaiException ignored) {
        }
        return (addresses != null) ? addresses[0] : null;
!!!566171.java!!!	getByName(inout host : String) : InetAddress
        return getAllByNameImpl(host)[0];
!!!566299.java!!!	getHostAddress() : String
        return Libcore.os.getnameinfo(this, NI_NUMERICHOST); // Can't throw.
!!!566427.java!!!	getHostName() : String
        if (hostName == null) {
            try {
                hostName = getHostByAddrImpl(this).hostName;
            } catch (UnknownHostException ex) {
                hostName = getHostAddress();
            }
        }
        return hostName;
!!!566555.java!!!	getCanonicalHostName() : String
        try {
            return getHostByAddrImpl(this).hostName;
        } catch (UnknownHostException ex) {
            return getHostAddress();
        }
!!!566683.java!!!	getLocalHost() : InetAddress
        String host = Libcore.os.uname().nodename;
        return lookupHostByName(host)[0];
!!!566811.java!!!	hashCode() : int
        return Arrays.hashCode(ipaddress);
!!!566939.java!!!	lookupHostByName(inout host : String) : InetAddress
        BlockGuard.getThreadPolicy().onNetwork();
        // Do we have a result cached?
        Object cachedResult = addressCache.get(host);
        if (cachedResult != null) {
            if (cachedResult instanceof InetAddress[]) {
                // A cached positive result.
                return (InetAddress[]) cachedResult;
            } else {
                // A cached negative result.
                throw new UnknownHostException((String) cachedResult);
            }
        }
        try {
            StructAddrinfo hints = new StructAddrinfo();
            hints.ai_flags = AI_ADDRCONFIG;
            hints.ai_family = AF_UNSPEC;
            // If we don't specify a socket type, every address will appear twice, once
            // for SOCK_STREAM and one for SOCK_DGRAM. Since we do not return the family
            // anyway, just pick one.
            hints.ai_socktype = SOCK_STREAM;
            InetAddress[] addresses = Libcore.os.getaddrinfo(host, hints);
            // TODO: should getaddrinfo set the hostname of the InetAddresses it returns?
            for (InetAddress address : addresses) {
                address.hostName = host;
            }
            addressCache.put(host, addresses);
            return addresses;
        } catch (GaiException gaiException) {
            // If the failure appears to have been a lack of INTERNET permission, throw a clear
            // SecurityException to aid in debugging this common mistake.
            // http://code.google.com/p/android/issues/detail?id=15722
            if (gaiException.getCause() instanceof ErrnoException) {
                if (((ErrnoException) gaiException.getCause()).errno == EACCES) {
                    throw new SecurityException("Permission denied (missing INTERNET permission?)", gaiException);
                }
            }
            // Otherwise, throw an UnknownHostException.
            String detailMessage = "Unable to resolve host \"" + host + "\": " + Libcore.os.gai_strerror(gaiException.error);
            addressCache.putUnknownHost(host, detailMessage);
            throw gaiException.rethrowAsUnknownHostException(detailMessage);
        }
!!!567067.java!!!	clearDnsCache() : void
        addressCache.clear();
!!!567195.java!!!	getHostByAddrImpl(inout address : InetAddress) : InetAddress
        BlockGuard.getThreadPolicy().onNetwork();
        try {
            String hostname = Libcore.os.getnameinfo(address, NI_NAMEREQD);
            return makeInetAddress(address.ipaddress.clone(), hostname);
        } catch (GaiException gaiException) {
            throw gaiException.rethrowAsUnknownHostException();
        }
!!!567323.java!!!	toString() : String
        return (hostName == null ? "" : hostName) + "/" + getHostAddress();
!!!567451.java!!!	isNumeric(inout address : String) : boolean
        InetAddress inetAddress = parseNumericAddressNoThrow(address);
        return inetAddress != null && disallowDeprecatedFormats(address, inetAddress) != null;
!!!567579.java!!!	parseNumericAddress(inout numericAddress : String) : InetAddress
        if (numericAddress == null || numericAddress.isEmpty()) {
            return Inet6Address.LOOPBACK;
        }
        InetAddress result = parseNumericAddressNoThrow(numericAddress);
        result = disallowDeprecatedFormats(numericAddress, result);
        if (result == null) {
            throw new IllegalArgumentException("Not a numeric address: " + numericAddress);
        }
        return result;
!!!567707.java!!!	loopbackAddresses() : InetAddress
        return new InetAddress[] { Inet6Address.LOOPBACK, Inet4Address.LOOPBACK };
!!!567835.java!!!	getLoopbackAddress() : InetAddress
        return Inet6Address.LOOPBACK;
!!!567963.java!!!	isAnyLocalAddress() : boolean
        return false;
!!!568091.java!!!	isLinkLocalAddress() : boolean
        return false;
!!!568219.java!!!	isLoopbackAddress() : boolean
        return false;
!!!568347.java!!!	isMCGlobal() : boolean
        return false;
!!!568475.java!!!	isMCLinkLocal() : boolean
        return false;
!!!568603.java!!!	isMCNodeLocal() : boolean
        return false;
!!!568731.java!!!	isMCOrgLocal() : boolean
        return false;
!!!568859.java!!!	isMCSiteLocal() : boolean
        return false;
!!!568987.java!!!	isMulticastAddress() : boolean
        return false;
!!!569115.java!!!	isSiteLocalAddress() : boolean
        return false;
!!!569243.java!!!	isReachable(in timeout : int) : boolean
        return isReachable(null, 0, timeout);
!!!569371.java!!!	isReachable(inout networkInterface : NetworkInterface, in ttl : int, in timeout : int) : boolean
        if (ttl < 0 || timeout < 0) {
            throw new IllegalArgumentException("ttl < 0 || timeout < 0");
        }

        // The simple case.
        if (networkInterface == null) {
            return isReachable(this, null, timeout);
        }

        // Try each NetworkInterface in parallel.
        // Use a thread pool Executor?
        List<InetAddress> sourceAddresses = Collections.list(networkInterface.getInetAddresses());
        if (sourceAddresses.isEmpty()) {
            return false;
        }
        final InetAddress destinationAddress = this;
        final CountDownLatch latch = new CountDownLatch(sourceAddresses.size());
        final AtomicBoolean isReachable = new AtomicBoolean(false);
        for (final InetAddress sourceAddress : sourceAddresses) {
            new Thread() {
                @Override public void run() {
                    try {
                        if (isReachable(destinationAddress, sourceAddress, timeout)) {
                            isReachable.set(true);
                            // Wake the main thread so it can return success without
                            // waiting for any other threads to time out.
                            while (latch.getCount() > 0) {
                                latch.countDown();
                            }
                        }
                    } catch (IOException ignored) {
                    }
                    latch.countDown();
                }
            }.start();
        }
        try {
            latch.await();
        } catch (InterruptedException ignored) {
            Thread.currentThread().interrupt(); // Leave the interrupted bit set.
        }
        return isReachable.get();
!!!569499.java!!!	isReachable(inout destination : InetAddress, inout source : InetAddress, in timeout : int) : boolean
        // TODO: try ICMP first (http://code.google.com/p/android/issues/detail?id=20106)
        FileDescriptor fd = IoBridge.socket(true);
        boolean reached = false;
        try {
            if (source != null) {
                IoBridge.bind(fd, source, 0);
            }
            IoBridge.connect(fd, destination, 7, timeout);
            reached = true;
        } catch (IOException e) {
            if (e.getCause() instanceof ErrnoException) {
                // "Connection refused" means the IP address was reachable.
                reached = (((ErrnoException) e.getCause()).errno == ECONNREFUSED);
            }
        }

        IoBridge.closeSocket(fd);

        return reached;
!!!569627.java!!!	getByAddress(inout ipAddress : byte) : InetAddress
        return getByAddress(null, ipAddress, 0);
!!!569755.java!!!	getByAddress(inout hostName : String, inout ipAddress : byte) : InetAddress
        return getByAddress(hostName, ipAddress, 0);
!!!569883.java!!!	getByAddress(inout hostName : String, inout ipAddress : byte, in scopeId : int) : InetAddress
        if (ipAddress == null) {
            throw new UnknownHostException("ipAddress == null");
        }
        if (ipAddress.length == 4) {
            return new Inet4Address(ipAddress.clone(), hostName);
        } else if (ipAddress.length == 16) {
            // First check to see if the address is an IPv6-mapped
            // IPv4 address. If it is, then we can make it a IPv4
            // address, otherwise, we'll create an IPv6 address.
            if (isIPv4MappedAddress(ipAddress)) {
                return new Inet4Address(ipv4MappedToIPv4(ipAddress), hostName);
            } else {
                return new Inet6Address(ipAddress.clone(), hostName, scopeId);
            }
        } else {
            throw badAddressLength(ipAddress);
        }
!!!570011.java!!!	badAddressLength(inout bytes : byte) : UnknownHostException
        throw new UnknownHostException("Address is neither 4 or 16 bytes: " + Arrays.toString(bytes));
!!!570139.java!!!	isIPv4MappedAddress(inout ipAddress : byte) : boolean
        // Check if the address matches ::FFFF:d.d.d.d
        // The first 10 bytes are 0. The next to are -1 (FF).
        // The last 4 bytes are varied.
        if (ipAddress == null || ipAddress.length != 16) {
            return false;
        }
        for (int i = 0; i < 10; i++) {
            if (ipAddress[i] != 0) {
                return false;
            }
        }
        if (ipAddress[10] != -1 || ipAddress[11] != -1) {
            return false;
        }
        return true;
!!!570267.java!!!	ipv4MappedToIPv4(inout mappedAddress : byte) : byte
        byte[] ipv4Address = new byte[4];
        for (int i = 0; i < 4; i++) {
            ipv4Address[i] = mappedAddress[12 + i];
        }
        return ipv4Address;
!!!570395.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        ObjectOutputStream.PutField fields = stream.putFields();
        if (ipaddress == null) {
            fields.put("address", 0);
        } else {
            fields.put("address", Memory.peekInt(ipaddress, 0, ByteOrder.BIG_ENDIAN));
        }
        fields.put("family", family);
        fields.put("hostName", hostName);

        stream.writeFields();
!!!570523.java!!!	readObject(inout stream : ObjectInputStream) : void
        ObjectInputStream.GetField fields = stream.readFields();
        int addr = fields.get("address", 0);
        ipaddress = new byte[4];
        Memory.pokeInt(ipaddress, 0, addr, ByteOrder.BIG_ENDIAN);
        hostName = (String) fields.get("hostName", null);
        family = fields.get("family", 2);
!!!570651.java!!!	readResolve() : Object
        return new Inet4Address(ipaddress, hostName);
