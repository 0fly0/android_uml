class WaveHeader
!!!4151308.java!!!	WaveHeader(in format : short, in numChannels : short, in sampleRate : int, in bitsPerSample : short, in numBytes : int)
        mFormat = format;
        mSampleRate = sampleRate;
        mNumChannels = numChannels;
        mBitsPerSample = bitsPerSample;
        mNumBytes = numBytes;
!!!4151436.java!!!	getFormat() : short
        return mFormat;
!!!4151564.java!!!	setFormat(in format : short) : WaveHeader
        mFormat = format;
        return this;
!!!4151692.java!!!	getNumChannels() : short
        return mNumChannels;
!!!4151820.java!!!	setNumChannels(in numChannels : short) : WaveHeader
        mNumChannels = numChannels;
        return this;
!!!4151948.java!!!	getSampleRate() : int
        return mSampleRate;
!!!4152076.java!!!	setSampleRate(in sampleRate : int) : WaveHeader
        mSampleRate = sampleRate;
        return this;
!!!4152204.java!!!	getBitsPerSample() : short
        return mBitsPerSample;
!!!4152332.java!!!	setBitsPerSample(in bitsPerSample : short) : WaveHeader
        mBitsPerSample = bitsPerSample;
        return this;
!!!4152460.java!!!	getNumBytes() : int
        return mNumBytes;
!!!4152588.java!!!	setNumBytes(in numBytes : int) : WaveHeader
        mNumBytes = numBytes;
        return this;
!!!4152716.java!!!	read(inout in : InputStream) : int
        /* RIFF header */
        readId(in, "RIFF");
        int numBytes = readInt(in) - 36;
        readId(in, "WAVE");

        /* fmt chunk */
        readId(in, "fmt ");
        if (16 != readInt(in)) throw new IOException("fmt chunk length not 16");
        mFormat = readShort(in);
        mNumChannels = readShort(in);
        mSampleRate = readInt(in);
        int byteRate = readInt(in);
        short blockAlign = readShort(in);
        mBitsPerSample = readShort(in);
        if (byteRate != mNumChannels * mSampleRate * mBitsPerSample / 8) {
            throw new IOException("fmt.ByteRate field inconsistent");
        }
        if (blockAlign != mNumChannels * mBitsPerSample / 8) {
            throw new IOException("fmt.BlockAlign field inconsistent");
        }

        /* data chunk */
        readId(in, "data");
        mNumBytes = readInt(in);
        
        return HEADER_LENGTH;
!!!4152844.java!!!	readId(inout in : InputStream, in id : String) : void
        for (int i = 0; i < id.length(); i++) {
            if (id.charAt(i) != in.read()) throw new IOException( id + " tag not present");
        }
!!!4152972.java!!!	readInt(inout in : InputStream) : int
        return in.read() | (in.read() << 8) | (in.read() << 16) | (in.read() << 24);
!!!4153100.java!!!	readShort(inout in : InputStream) : short
        return (short)(in.read() | (in.read() << 8));
!!!4153228.java!!!	write(inout out : OutputStream) : int
        /* RIFF header */
        writeId(out, "RIFF");
        writeInt(out, 36 + mNumBytes);
        writeId(out, "WAVE");

        /* fmt chunk */
        writeId(out, "fmt ");
        writeInt(out, 16);
        writeShort(out, mFormat);
        writeShort(out, mNumChannels);
        writeInt(out, mSampleRate);
        writeInt(out, mNumChannels * mSampleRate * mBitsPerSample / 8);
        writeShort(out, (short)(mNumChannels * mBitsPerSample / 8));
        writeShort(out, mBitsPerSample);

        /* data chunk */
        writeId(out, "data");
        writeInt(out, mNumBytes);
        
        return HEADER_LENGTH;
!!!4153356.java!!!	writeId(inout out : OutputStream, in id : String) : void
        for (int i = 0; i < id.length(); i++) out.write(id.charAt(i));
!!!4153484.java!!!	writeInt(inout out : OutputStream, in val : int) : void
        out.write(val >> 0);
        out.write(val >> 8);
        out.write(val >> 16);
        out.write(val >> 24);
!!!4153612.java!!!	writeShort(inout out : OutputStream, in val : short) : void
        out.write(val >> 0);
        out.write(val >> 8);
!!!4153740.java!!!	toString() : String
        return String.format(
                "WaveHeader format=%d numChannels=%d sampleRate=%d bitsPerSample=%d numBytes=%d",
                mFormat, mNumChannels, mSampleRate, mBitsPerSample, mNumBytes);
