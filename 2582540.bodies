class AmpAudioLoopbackService
!!!10918668.cpp!!!	instantiate() : int
    // Register error callback
    AudioSystem::setErrorCallback(audioFlingerErrorCallback);

    const sp<IAudioFlinger>& sf = AudioSystem::get_audio_flinger();
    if (sf == NULL) {
        SLOGE("could not get AudioFlinger");
        return -1;
    }

    const sp<AmpAudioLoopbackService::AmpAudioPlayer>& ap = audioPlayer();
    if (ap == NULL) {
        SLOGE("could not get AmpAudioPlayer");
        return -1;
    }

    // Now register us to service manager
    sp<AmpAudioLoopbackService> self = instance();
    defaultServiceManager()->addService(String16(getServiceName()), self);
    return 0;
!!!10918796.cpp!!!	instance() : sp<AmpAudioLoopbackService>
    if (mInstance == NULL)
        mInstance = new AmpAudioLoopbackService();
    return mInstance;
!!!10919180.cpp!!!	startPlay() : status_t
    const sp<AmpAudioLoopbackService::AmpAudioPlayer>& ap = audioPlayer();
    if (ap == NULL)
        return PERMISSION_DENIED;
    return ap->play();
!!!10919308.cpp!!!	stopPlay() : status_t
    const sp<AmpAudioLoopbackService::AmpAudioPlayer>& ap = audioPlayer();
    if (ap == NULL)
        return PERMISSION_DENIED;
    return ap->stop();
!!!10919436.cpp!!!	startRecord(in fileName : char) : status_t
    return PERMISSION_DENIED;
!!!10920588.cpp!!!	audioFlingerErrorCallback(in err : status_t) : void
    if (err == DEAD_OBJECT) {
        SLOGE("AudioFlinger died");
        if (mPlayer != NULL) {
            mPlayer->stop();
            mPlayer.clear();
        }
        exit(1);
    }
!!!10920716.cpp!!!	audioPlayer() : sp<AmpAudioLoopbackService::AmpAudioPlayer>
    if (mPlayer == NULL)
        mPlayer = new AmpAudioLoopbackService::AmpAudioPlayer();
    return mPlayer;
