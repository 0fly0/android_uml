class SmHandler
!!!12150284.java!!!	handleMessage(inout msg : Message) : void
			if (mDbg)
				Log.d(TAG, "handleMessage: E msg.what=" + msg.what);

			/** Save the current message */
			mMsg = msg;

			/**
			 * Check that construction was completed
			 */
			if (!mIsConstructionCompleted) {
				Log.e(TAG, "The start method not called, ignore msg: " + msg);
				return;
			}

			/**
			 * Process the message abiding by the hierarchical semantics and
			 * perform any requested transitions.
			 */
			processMsg(msg);
			performTransitions();

			if (mDbg)
				Log.d(TAG, "handleMessage: X");
!!!12150412.java!!!	performTransitions() : void
			/**
			 * If transitionTo has been called, exit and then enter the
			 * appropriate states. We loop on this to allow enter and exit
			 * methods to use transitionTo.
			 */
			State destState = null;
			while (mDestState != null) {
				if (mDbg)
					Log.d(TAG, "handleMessage: new destination call exit");

				/**
				 * Save mDestState locally and set to null to know if enter/exit
				 * use transitionTo.
				 */
				destState = mDestState;
				mDestState = null;

				/**
				 * Determine the states to exit and enter and return the common
				 * ancestor state of the enter/exit states. Then invoke the exit
				 * methods then the enter methods.
				 */
				StateInfo commonStateInfo = setupTempStateStackWithStatesToEnter(destState);
				invokeExitMethods(commonStateInfo);
				int stateStackEnteringIndex = moveTempStateStackToStateStack();
				invokeEnterMethods(stateStackEnteringIndex);

				/**
				 * Since we have transitioned to a new state we need to have any
				 * deferred messages moved to the front of the message queue so
				 * they will be processed before any other messages in the
				 * message queue.
				 */
				moveDeferredMessageAtFrontOfQueue();
			}

			/**
			 * After processing all transitions check and see if the last
			 * transition was to quit or halt.
			 */
			if (destState != null) {
				if (destState == mQuittingState) {
					cleanupAfterQuitting();

				} else if (destState == mHaltingState) {
					/**
					 * Call halting() if we've transitioned to the halting
					 * state. All subsequent messages will be processed in in
					 * the halting state which invokes
					 * haltedProcessMessage(msg);
					 */
					mSm.halting();
				}
			}
!!!12150540.java!!!	cleanupAfterQuitting() : void
			mSm.quitting();
			if (mSm.mSmThread != null) {
				// If we made the thread then quit looper which stops the
				// thread.
				getLooper().quit();
				mSm.mSmThread = null;
			}

			mSm.mSmHandler = null;
			mSm = null;
			mMsg = null;
			mProcessedMessages.cleanup();
			mStateStack = null;
			mTempStateStack = null;
			mStateInfo.clear();
			mInitialState = null;
			mDestState = null;
			mDeferredMessages.clear();
!!!12150668.java!!!	completeConstruction() : void
			if (mDbg)
				Log.d(TAG, "completeConstruction: E");

			/**
			 * Determine the maximum depth of the state hierarchy so we can
			 * allocate the state stacks.
			 */
			int maxDepth = 0;
			for (StateInfo si : mStateInfo.values()) {
				int depth = 0;
				for (StateInfo i = si; i != null; depth++) {
					i = i.parentStateInfo;
				}
				if (maxDepth < depth) {
					maxDepth = depth;
				}
			}
			if (mDbg)
				Log.d(TAG, "completeConstruction: maxDepth=" + maxDepth);

			mStateStack = new StateInfo[maxDepth];
			mTempStateStack = new StateInfo[maxDepth];
			setupInitialStateStack();

			/**
			 * Construction is complete call all enter methods starting at the
			 * first entry.
			 */
			mIsConstructionCompleted = true;
			mMsg = obtainMessage(SM_INIT_CMD);
			invokeEnterMethods(0);

			/**
			 * Perform any transitions requested by the enter methods
			 */
			performTransitions();

			if (mDbg)
				Log.d(TAG, "completeConstruction: X");
!!!12150796.java!!!	processMsg(inout msg : Message) : void
			StateInfo curStateInfo = mStateStack[mStateStackTopIndex];
			if (mDbg) {
				Log.d(TAG, "processMsg: " + curStateInfo.state.getName());
			}
			while (!curStateInfo.state.processMessage(msg)) {
				/**
				 * Not processed
				 */
				curStateInfo = curStateInfo.parentStateInfo;
				if (curStateInfo == null) {
					/**
					 * No parents left so it's not handled
					 */
					mSm.unhandledMessage(msg);
					if (isQuit(msg)) {
						transitionTo(mQuittingState);
					}
					break;
				}
				if (mDbg) {
					Log.d(TAG, "processMsg: " + curStateInfo.state.getName());
				}
			}

			/**
			 * Record that we processed the message
			 */
			if (curStateInfo != null) {
				State orgState = mStateStack[mStateStackTopIndex].state;
				mProcessedMessages.add(msg, curStateInfo.state, orgState);
			} else {
				mProcessedMessages.add(msg, null, null);
			}
!!!12150924.java!!!	invokeExitMethods(inout commonStateInfo : StateInfo) : void
			while ((mStateStackTopIndex >= 0) && (mStateStack[mStateStackTopIndex] != commonStateInfo)) {
				State curState = mStateStack[mStateStackTopIndex].state;
				if (mDbg)
					Log.d(TAG, "invokeExitMethods: " + curState.getName());
				curState.exit();
				mStateStack[mStateStackTopIndex].active = false;
				mStateStackTopIndex -= 1;
			}
!!!12151052.java!!!	invokeEnterMethods(in stateStackEnteringIndex : int) : void
			for (int i = stateStackEnteringIndex; i <= mStateStackTopIndex; i++) {
				if (mDbg)
					Log.d(TAG, "invokeEnterMethods: " + mStateStack[i].state.getName());
				mStateStack[i].state.enter();
				mStateStack[i].active = true;
			}
!!!12151180.java!!!	moveDeferredMessageAtFrontOfQueue() : void
			/**
			 * The oldest messages on the deferred list must be at the front of
			 * the queue so start at the back, which as the most resent message
			 * and end with the oldest messages at the front of the queue.
			 */
			for (int i = mDeferredMessages.size() - 1; i >= 0; i--) {
				Message curMsg = mDeferredMessages.get(i);
				if (mDbg)
					Log.d(TAG, "moveDeferredMessageAtFrontOfQueue; what=" + curMsg.what);
				sendMessageAtFrontOfQueue(curMsg);
			}
			mDeferredMessages.clear();
!!!12151308.java!!!	moveTempStateStackToStateStack() : int
			int startingIndex = mStateStackTopIndex + 1;
			int i = mTempStateStackCount - 1;
			int j = startingIndex;
			while (i >= 0) {
				if (mDbg)
					Log.d(TAG, "moveTempStackToStateStack: i=" + i + ",j=" + j);
				mStateStack[j] = mTempStateStack[i];
				j += 1;
				i -= 1;
			}

			mStateStackTopIndex = j - 1;
			if (mDbg) {
				Log.d(TAG, "moveTempStackToStateStack: X mStateStackTop=" + mStateStackTopIndex + ",startingIndex="
						+ startingIndex + ",Top=" + mStateStack[mStateStackTopIndex].state.getName());
			}
			return startingIndex;
!!!12151436.java!!!	setupTempStateStackWithStatesToEnter(inout destState : State) : StateInfo
			/**
			 * Search up the parent list of the destination state for an active
			 * state. Use a do while() loop as the destState must always be
			 * entered even if it is active. This can happen if we are
			 * exiting/entering the current state.
			 */
			mTempStateStackCount = 0;
			StateInfo curStateInfo = mStateInfo.get(destState);
			do {
				mTempStateStack[mTempStateStackCount++] = curStateInfo;
				curStateInfo = curStateInfo.parentStateInfo;
			} while ((curStateInfo != null) && !curStateInfo.active);

			if (mDbg) {
				Log.d(TAG, "setupTempStateStackWithStatesToEnter: X mTempStateStackCount=" + mTempStateStackCount
						+ ",curStateInfo: " + curStateInfo);
			}
			return curStateInfo;
!!!12151564.java!!!	setupInitialStateStack() : void
			if (mDbg) {
				Log.d(TAG, "setupInitialStateStack: E mInitialState=" + mInitialState.getName());
			}

			StateInfo curStateInfo = mStateInfo.get(mInitialState);
			for (mTempStateStackCount = 0; curStateInfo != null; mTempStateStackCount++) {
				mTempStateStack[mTempStateStackCount] = curStateInfo;
				curStateInfo = curStateInfo.parentStateInfo;
			}

			// Empty the StateStack
			mStateStackTopIndex = -1;

			moveTempStateStackToStateStack();
!!!12151692.java!!!	getCurrentMessage() : Message
			return mMsg;
!!!12151820.java!!!	getCurrentState() : IState
			return mStateStack[mStateStackTopIndex].state;
!!!12151948.java!!!	addState(inout state : State, inout parent : State) : StateInfo
			if (mDbg) {
				Log.d(TAG,
						"addStateInternal: E state=" + state.getName() + ",parent="
								+ ((parent == null) ? "" : parent.getName()));
			}
			StateInfo parentStateInfo = null;
			if (parent != null) {
				parentStateInfo = mStateInfo.get(parent);
				if (parentStateInfo == null) {
					// Recursively add our parent as it's not been added yet.
					parentStateInfo = addState(parent, null);
				}
			}
			StateInfo stateInfo = mStateInfo.get(state);
			if (stateInfo == null) {
				stateInfo = new StateInfo();
				mStateInfo.put(state, stateInfo);
			}

			// Validate that we aren't adding the same state in two different
			// hierarchies.
			if ((stateInfo.parentStateInfo != null) && (stateInfo.parentStateInfo != parentStateInfo)) {
				throw new RuntimeException("state already added");
			}
			stateInfo.state = state;
			stateInfo.parentStateInfo = parentStateInfo;
			stateInfo.active = false;
			if (mDbg)
				Log.d(TAG, "addStateInternal: X stateInfo: " + stateInfo);
			return stateInfo;
!!!12152076.java!!!	SmHandler(inout looper : Looper, inout sm : StateMachine)
			super(looper);
			mSm = sm;

			addState(mHaltingState, null);
			addState(mQuittingState, null);
!!!12152204.java!!!	setInitialState(inout initialState : State) : void
			if (mDbg)
				Log.d(TAG, "setInitialState: initialState" + initialState.getName());
			mInitialState = initialState;
!!!12152332.java!!!	transitionTo(inout destState : IState) : void
			mDestState = (State) destState;
			if (mDbg)
				Log.d(TAG, "StateMachine.transitionTo EX destState" + mDestState.getName());
!!!12152460.java!!!	deferMessage(inout msg : Message) : void
			if (mDbg)
				Log.d(TAG, "deferMessage: msg=" + msg.what);

			/* Copy the "msg" to "newMsg" as "msg" will be recycled */
			Message newMsg = obtainMessage();
			newMsg.copyFrom(msg);

			mDeferredMessages.add(newMsg);
!!!12152588.java!!!	quit() : void
			if (mDbg)
				Log.d(TAG, "quit:");
			sendMessage(obtainMessage(SM_QUIT_CMD, mQuitObj));
!!!12152716.java!!!	isQuit(inout msg : Message) : boolean
			return (msg.what == SM_QUIT_CMD) && (msg.obj == mQuitObj);
!!!12152844.java!!!	isDbg() : boolean
			return mDbg;
!!!12152972.java!!!	setDbg(inout dbg : boolean) : void
			mDbg = dbg;
!!!12153100.java!!!	setProcessedMessagesSize(in maxSize : int) : void
			mProcessedMessages.setSize(maxSize);
!!!12153228.java!!!	getProcessedMessagesSize() : int
			return mProcessedMessages.size();
!!!12153356.java!!!	getProcessedMessagesCount() : int
			return mProcessedMessages.count();
!!!12153484.java!!!	getProcessedMessageInfo(in index : int) : ProcessedMessageInfo
			return mProcessedMessages.get(index);
