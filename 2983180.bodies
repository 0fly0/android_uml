class WFDSinkActivity
!!!12136588.java!!!	dismissAlertDialog() : void
		if (alertDialog != null && alertDialog.isShowing()) {
			alertDialog.dismiss();
			alertDialog = null;
		}
!!!12136716.java!!!	showAlertDialog() : void
		if (alertDialog != null && alertDialog.isShowing()) {
			alertDialog.dismiss();
		}

		builder = new AlertDialog.Builder(this);
		builder.setTitle("Wifi p2p is not enabled.");
		builder.setPositiveButton("Enable", new OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int mode) {
				mWifiManager.setWifiEnabled(true);
			}
		});
		builder.setNegativeButton("Quit", new OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				finish();
			}
		});

		builder.setCancelable(false);
		alertDialog = builder.show();
!!!12136844.java!!!	showP2pRestartDialog() : void
		if (alertDialog != null && alertDialog.isShowing()) {
			alertDialog.dismiss();
		}

		builder = new AlertDialog.Builder(this);
		builder.setTitle("Need to restart P2P for the changes to take effect.");
		builder.setPositiveButton("Confirm", new OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int mode) {
				mWifiManager.setWifiEnabled(false);
				mWifiManager.setWifiEnabled(true);
			}
		});
		builder.setNegativeButton("Later", new OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// Nothing
			}
		});

		builder.setCancelable(false);
		builder.show();
!!!12136972.java!!!	setWifiP2pEnabled(inout enabled : boolean) : void
		this.isWifiP2pEnabled = enabled;
		if (enabled) {
			resetData();
		}
!!!12137100.java!!!	onCreate(inout savedInstanceState : Bundle) : void

		Log.d(TAG, "onCreate WFDSinkActivity");
		super.onCreate(savedInstanceState);
		setContentView(R.layout.sink_main);
		mself = this;

		intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);
		intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);
		intentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);
		intentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);

		mWifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);

		this.bindService(new Intent(WFDSinkActivity.this, WFDSinkService.class), mConnection, Context.BIND_AUTO_CREATE);

		mWifiP2pManager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE);
		channel = mWifiP2pManager.initialize(this, getMainLooper(), null);

		receiver = new WFDSinkActivityReceiver(this);

		getActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM, ActionBar.DISPLAY_SHOW_CUSTOM);
!!!12137228.java!!!	onStart() : void
		Log.d(TAG, "onStart WFDSinkActivity");
		super.onStart();
!!!12137356.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
		super.onConfigurationChanged(newConfig);
!!!12137484.java!!!	showSourcelist(in option : int) : void

		int LVisible, DVisible, PVisible;
		if(option == WFD_SINK_OFF){
			LVisible = View.GONE;
			DVisible = View.GONE;
			PVisible = View.VISIBLE;
		}else if(option == WFD_SINK_ON_ACTIVE_SCAN_OFF){
			LVisible = View.GONE;
			DVisible = View.VISIBLE;
			PVisible = View.GONE;
		}else{
			LVisible = View.VISIBLE;
			DVisible = View.GONE;
			PVisible = View.GONE;
		}

		WFDSinkPromptFragment prompt = (WFDSinkPromptFragment) getFragmentManager().findFragmentById(R.id.frag_prompt);
		if (prompt!= null) {
			prompt.getView().setVisibility(PVisible);
		}
		WFDSinkListFragment peerList = (WFDSinkListFragment) getFragmentManager().findFragmentById(R.id.frag_list);
		if (peerList != null) {
			peerList.getView().setVisibility(LVisible);
		}
		WFDSinkDetailFragment sinkInfo = (WFDSinkDetailFragment) getFragmentManager().findFragmentById(R.id.frag_detail);
		if (sinkInfo != null) {
			sinkInfo.getView().setVisibility(DVisible);
		}

!!!12137612.java!!!	onResume() : void
		Log.d(TAG, "onResume WFDSinkActivity");
		super.onResume();
        // Skip the WIFI STA BG scan.
        Settings.System.putInt(getContentResolver(), "skip_sta_scan_in_p2p_ui", 1);
		if (mWFDSinkService != null) {
			registerReceiver(receiver, intentFilter);
		}
		if (!isWifiP2pEnabled) {
			if(mWifiManager.getWifiState() != WifiManager.WIFI_STATE_ENABLED){
				mWifiManager.setWifiEnabled(true);
				isWifiP2pEnabled = true;
				Toast.makeText(WFDSinkActivity.this, R.string.wifi_on_warning, Toast.LENGTH_LONG).show();
			}else{
				isWifiP2pEnabled = true;
			}
		} else if (WFDDeviceCapability.settingP2Prestart) {
			WFDDeviceCapability.settingP2Prestart = false;
			showP2pRestartDialog();
		}

		SharedPreferences sharedata = getSharedPreferences("preferences", 0);
		boolean wfdSinkOn = sharedata.getBoolean("SinkEnable", true);
		if(wfdSinkOn == false){
			showSourcelist(WFD_SINK_OFF);
		}else{
			if(WFDDeviceCapability.activeConnection)
				showSourcelist(WFD_SINK_ON_ACTIVE_SCAN_ON);
			else
				showSourcelist(WFD_SINK_ON_ACTIVE_SCAN_OFF);
		}
!!!12137740.java!!!	onPause() : void
		Log.d(TAG, "onPause WFDSinkActivity");
		super.onPause();
        // Recover the WIFI STA BG scan.
        Settings.System.putInt(getContentResolver(), "skip_sta_scan_in_p2p_ui", 0);

		unregisterReceiver(receiver);
		if (mWifiP2pManager != null && channel != null) {
			mWifiP2pManager.stopPeerDiscovery(channel, null);
		}
!!!12137868.java!!!	onStop() : void
		Log.d(TAG, "onStop WFDSinkActivity");
		super.onStop();
!!!12137996.java!!!	onDestroy() : void
		Log.d(TAG, "onDestroy WFDSinkActivity");
		if (mWFDSinkService != null) {
			mWFDSinkService.registerWFDDeviceInfo(false);
		}
		this.unbindService(mConnection);
		super.onDestroy();
!!!12138124.java!!!	onCreateOptionsMenu(inout menu : Menu) : boolean
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.sink_action_items, menu);
		return true;
!!!12138252.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
		switch (item.getItemId()) {
		case R.id.atn_direct_discover:
			if (!isWifiP2pEnabled) {
				Toast.makeText(WFDSinkActivity.this, R.string.p2p_off_warning, Toast.LENGTH_SHORT).show();
			} else if (mWifiP2pManager != null && channel != null) {
				mWifiP2pManager.discoverPeers(channel, new WifiP2pManager.ActionListener() {
					@Override
					public void onSuccess() {
						Log.i(TAG, "Discovery initiated.");
					}

					@Override
					public void onFailure(int reasonCode) {
						Log.e(TAG, "Discovery failed. " + reasonCode);
					}
				});
			}
			return true;
		case R.id.atn_direct_setting:
			if (!isWifiP2pEnabled) {
				Toast.makeText(WFDSinkActivity.this, R.string.p2p_off_warning, Toast.LENGTH_SHORT).show();
			} else {
				Intent intent = new Intent(this, WFDPreferenceActivity.class);
				intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
				this.startActivity(intent);
			}
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
!!!12138380.java!!!	resetData() : void
		WFDSinkListFragment peerList = (WFDSinkListFragment) getFragmentManager().findFragmentById(R.id.frag_list);
		if (peerList != null) {
			peerList.clearPeers();
		}
!!!12138508.java!!!	onChannelDisconnected() : void
		Log.e(TAG, "P2p Channel is lost, quit");
		finish();
!!!12138636.java!!!	getCurrentState() : String
		if (mWFDSinkStateMachine == null) {
			return null;
		}
		return mWFDSinkStateMachine.getState().getName();
!!!12138764.java!!!	notifyPinChanged(in pin : String) : void
		Log.i(TAG, "Notify p2p service the pin code changed: " + pin);
		if (pin != null) {
			// mWifiP2pManager.notifyPinChanged(channel, pin);
		}
!!!12138892.java!!!	requestPeers() : void
		SharedPreferences sharedata = getSharedPreferences("preferences", 0);
		boolean wfdSinkOn = sharedata.getBoolean("SinkEnable", true);

		if(!wfdSinkOn || !WFDDeviceCapability.activeConnection)
			return;

		if (mWifiP2pManager != null && channel != null) {
			mWifiP2pManager.requestPeers(channel, (PeerListListener) getFragmentManager().findFragmentById(R.id.frag_list));
		}
!!!12139020.java!!!	connect(in device : WifiP2pDevice) : void
		builder = new AlertDialog.Builder(this);
		LayoutInflater factory = LayoutInflater.from(this);
		mView = factory.inflate(R.layout.sink_pin_dialog, null);
		mSecurity = ((Spinner) mView.findViewById(R.id.security));
		// Set WPS method to PBC as default.
		mSecurity.setSelection(0);
		mSecurity.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
				wps_method = position;
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// nothing
			}
		});

		builder.setIcon(R.drawable.sink);
		builder.setTitle("Connect");
		builder.setView(mView);
		builder.setPositiveButton("Confirm", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {
				mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.USER_START_CONNECT, new WFDSinkConnectTicket(
						device.deviceAddress, null, wps_method));
			}
		});
		builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {
			}
		});
		builder.setCancelable(false);
		alertDialog = builder.show();
!!!12139148.java!!!	disconnect() : void
		builder = new AlertDialog.Builder(this);
		builder.setTitle("Disconnect");
		builder.setPositiveButton("Confirm", new OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int mode) {
				mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.USER_CANCEL_CONNECT);
			}
		});
		builder.setNegativeButton("Back", new OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
			}
		});
		builder.setCancelable(false);
		alertDialog = builder.show();
!!!12139276.java!!!	onSourceListItemClick(inout device : WifiP2pDevice) : void
		if (mWFDSinkStateMachine.getState().getName().equals("EnabledState")) {
			connect(device);
		} else {
			disconnect();
		}
