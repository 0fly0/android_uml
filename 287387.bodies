class CipherInputStream
!!!1784347.java!!!	CipherInputStream(inout is : InputStream, inout c : Cipher)
        super(is);
        this.cipher = c;
!!!1784475.java!!!	CipherInputStream(inout is : InputStream)
        this(is, new NullCipher());
!!!1784603.java!!!	read() : int
        if (finished) {
            return (outputIndex == outputLength) ? -1 : outputBuffer[outputIndex++] & 0xFF;
        }
        if (outputIndex < outputLength) {
            return outputBuffer[outputIndex++] & 0xFF;
        }
        outputIndex = 0;
        outputLength = 0;
        while (outputLength == 0) {
            // check output size on each iteration since pending state
            // in the cipher can cause this to vary from call to call
            int outputSize = cipher.getOutputSize(inputBuffer.length);
            if ((outputBuffer == null) || (outputBuffer.length < outputSize)) {
                this.outputBuffer = new byte[outputSize];
            }
            int byteCount = in.read(inputBuffer);
            if (byteCount == -1) {
                try {
                    outputLength = cipher.doFinal(outputBuffer, 0);
                } catch (Exception e) {
                    throw new IOException(e.getMessage());
                }
                finished = true;
                break;
            }
            try {
                outputLength = cipher.update(inputBuffer, 0, byteCount, outputBuffer, 0);
            } catch (ShortBufferException e) {
                throw new AssertionError(e);  // should not happen since we sized with getOutputSize
            }
        }
        return read();
!!!1784731.java!!!	read(inout buf : byte, in off : int, in len : int) : int
        if (in == null) {
            throw new NullPointerException("in == null");
        }

        int i;
        for (i = 0; i < len; ++i) {
            int b = read();
            if (b == -1) {
                return (i == 0) ? -1 : i;
            }
            if (buf != null) {
                buf[off+i] = (byte) b;
            }
        }
        return i;
!!!1784859.java!!!	skip(in byteCount : long) : long
        return Streams.skipByReading(this, byteCount);
!!!1784987.java!!!	available() : int
        return 0;
!!!1785115.java!!!	close() : void
        in.close();
        try {
            cipher.doFinal();
        } catch (GeneralSecurityException ignore) {
            //do like RI does
        }

!!!1785243.java!!!	markSupported() : boolean
        return false;
