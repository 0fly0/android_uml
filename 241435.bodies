class FormatSpecifierParser
!!!1284891.java!!!	FormatSpecifierParser(inout format : String)
            this.format = format;
            this.length = format.length();
!!!1285019.java!!!	parseFormatToken(in offset : int) : FormatToken
            this.startIndex = offset;
            this.i = offset;
            return parseArgumentIndexAndFlags(new FormatToken());
!!!1285147.java!!!	getFormatSpecifierText() : String
            return format.substring(startIndex, i);
!!!1285275.java!!!	peek() : int
            return (i < length) ? format.charAt(i) : -1;
!!!1285403.java!!!	advance() : char
            if (i >= length) {
                throw unknownFormatConversionException();
            }
            return format.charAt(i++);
!!!1285531.java!!!	unknownFormatConversionException() : UnknownFormatConversionException
            throw new UnknownFormatConversionException(getFormatSpecifierText());
!!!1285659.java!!!	parseArgumentIndexAndFlags(inout token : FormatToken) : FormatToken
            // Parse the argument index, if there is one.
            int position = i;
            int ch = peek();
            if (Character.isDigit(ch)) {
                int number = nextInt();
                if (peek() == '$') {
                    // The number was an argument index.
                    advance(); // Swallow the '$'.
                    if (number == FormatToken.UNSET) {
                        throw new MissingFormatArgumentException(getFormatSpecifierText());
                    }
                    // k$ stands for the argument whose index is k-1 except that
                    // 0$ and 1$ both stand for the first element.
                    token.setArgIndex(Math.max(0, number - 1));
                } else {
                    if (ch == '0') {
                        // The digit zero is a format flag, so reparse it as such.
                        i = position;
                    } else {
                        // The number was a width. This means there are no flags to parse.
                        return parseWidth(token, number);
                    }
                }
            } else if (ch == '<') {
                token.setArgIndex(FormatToken.LAST_ARGUMENT_INDEX);
                advance();
            }

            // Parse the flags.
            while (token.setFlag(peek())) {
                advance();
            }

            // What comes next?
            ch = peek();
            if (Character.isDigit(ch)) {
                return parseWidth(token, nextInt());
            } else if (ch == '.') {
                return parsePrecision(token);
            } else {
                return parseConversionType(token);
            }
!!!1285787.java!!!	parseWidth(inout token : FormatToken, in width : int) : FormatToken
            token.setWidth(width);
            int ch = peek();
            if (ch == '.') {
                return parsePrecision(token);
            } else {
                return parseConversionType(token);
            }
!!!1285915.java!!!	parsePrecision(inout token : FormatToken) : FormatToken
            advance(); // Swallow the '.'.
            int ch = peek();
            if (Character.isDigit(ch)) {
                token.setPrecision(nextInt());
                return parseConversionType(token);
            } else {
                // The precision is required but not given by the format string.
                throw unknownFormatConversionException();
            }
!!!1286043.java!!!	parseConversionType(inout token : FormatToken) : FormatToken
            char conversionType = advance(); // A conversion type is mandatory.
            token.setConversionType(conversionType);
            if (conversionType == 't' || conversionType == 'T') {
                char dateSuffix = advance(); // A date suffix is mandatory for 't' or 'T'.
                token.setDateSuffix(dateSuffix);
            }
            return token;
!!!1286171.java!!!	nextInt() : int
            long value = 0;
            while (i < length && Character.isDigit(format.charAt(i))) {
                value = 10 * value + (format.charAt(i++) - '0');
                if (value > Integer.MAX_VALUE) {
                    return failNextInt();
                }
            }
            return (int) value;
!!!1286299.java!!!	failNextInt() : int
            while (Character.isDigit(peek())) {
                advance();
            }
            return FormatToken.UNSET;
