class MediaBufferPuller
!!!483724.cpp!!!	MediaBufferPuller(in source : sp<MediaSource>)

    androidCreateThread(acquireThreadStart, this);
    androidCreateThread(releaseThreadStart, this);
!!!483852.cpp!!!	~MediaBufferPuller()
    stop();
!!!483980.cpp!!!	start() : void
    Mutex::Autolock autolock(mLock);
    mAskToStart = true;
    mAcquireCond.signal();
    mReleaseCond.signal();
!!!484108.cpp!!!	stop() : void
    Mutex::Autolock autolock(mLock);
    mAskToStop = true;
    mAcquireCond.signal();
    mReleaseCond.signal();
    while (!mAcquireStopped || !mReleaseStopped) {
        mUserCond.wait(mLock);
    }

    // Release remaining buffers
    for (size_t i = 0; i < mBuffers.size(); i++) {
        mBuffers.itemAt(i)->release();
    }

    for (size_t i = 0; i < mReleaseBuffers.size(); i++) {
        mReleaseBuffers.itemAt(i)->release();
    }

    mBuffers.clear();
    mReleaseBuffers.clear();
!!!484236.cpp!!!	getBufferBlocking() : MediaBuffer
    Mutex::Autolock autolock(mLock);
    while (mBuffers.empty() && !mAcquireStopped) {
        mUserCond.wait(mLock);
    }

    if (mBuffers.empty()) {
        return NULL;
    } else {
        MediaBuffer* b = mBuffers.itemAt(0);
        mBuffers.removeAt(0);
        return b;
    }
!!!484364.cpp!!!	getBufferNonBlocking() : MediaBuffer
    Mutex::Autolock autolock(mLock);
    if (mBuffers.empty()) {
        return NULL;
    } else {
        MediaBuffer* b = mBuffers.itemAt(0);
        mBuffers.removeAt(0);
        return b;
    }
!!!484492.cpp!!!	putBuffer(inout buffer : MediaBuffer) : void
    Mutex::Autolock autolock(mLock);
    mReleaseBuffers.push(buffer);
    mReleaseCond.signal();
!!!484620.cpp!!!	hasMediaSourceReturnedError() : bool
    Mutex::Autolock autolock(mLock);
    return ((mSourceError != OK) ? true : false);
!!!484748.cpp!!!	acquireThreadStart(inout arg : void) : int
    MediaBufferPuller* self = (MediaBufferPuller*)arg;
    self->acquireThreadFunc();
    return 0;
!!!484876.cpp!!!	acquireThreadFunc() : void
    mLock.lock();

    // Wait for the start signal
    while (!mAskToStart && !mAskToStop) {
        mAcquireCond.wait(mLock);
    }

    // Loop until we are asked to stop, or there is nothing more to read
    while (!mAskToStop) {
        MediaBuffer* pBuffer;
        mLock.unlock();
        status_t result = mSource->read(&pBuffer, NULL);
        mLock.lock();
        mSourceError = result;
        if (result != OK) {
            break;
        }
        mBuffers.push(pBuffer);
        mUserCond.signal();
    }

    mAcquireStopped = true;
    mUserCond.signal();
    mLock.unlock();
!!!485004.cpp!!!	releaseThreadStart(inout arg : void) : int
    MediaBufferPuller* self = (MediaBufferPuller*)arg;
    self->releaseThreadFunc();
    return 0;
!!!485132.cpp!!!	releaseThreadFunc() : void
    mLock.lock();

    // Wait for the start signal
    while (!mAskToStart && !mAskToStop) {
        mReleaseCond.wait(mLock);
    }

    // Loop until we are asked to stop
    while (1) {
        if (mReleaseBuffers.empty()) {
            if (mAskToStop) {
                break;
            } else {
                mReleaseCond.wait(mLock);
                continue;
            }
        }
        MediaBuffer* pBuffer = mReleaseBuffers.itemAt(0);
        mReleaseBuffers.removeAt(0);
        mLock.unlock();
        pBuffer->release();
        mLock.lock();
    }

    mReleaseStopped = true;
    mUserCond.signal();
    mLock.unlock();
