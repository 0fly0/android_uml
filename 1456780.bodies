class AbstractResult
!!!9052044.java!!!	compareTo(inout another : AbstractResult) : int
        return getRelativePath().compareTo(another.getRelativePath());
!!!9052172.java!!!	setAdditionalTextOutputString(in additionalTextOutputString : String) : void
        mAdditionalTextOutputString = additionalTextOutputString;
!!!9052300.java!!!	getAdditionalTextOutputString() : String
        return mAdditionalTextOutputString;
!!!9052428.java!!!	getBytes() : byte
        ByteArrayOutputStream baos = null;
        ObjectOutputStream oos = null;
        try {
            try {
                baos = new ByteArrayOutputStream();
                oos = new ObjectOutputStream(baos);
                oos.writeObject(this);
            } finally {
                if (baos != null) {
                    baos.close();
                }
                if (oos != null) {
                    oos.close();
                }
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "Unable to serialize result: " + getRelativePath(), e);
        }

        return baos == null ? null : baos.toByteArray();
!!!9052556.java!!!	create(inout bytes : byte) : AbstractResult
        ByteArrayInputStream bais = null;
        ObjectInputStream ois = null;
        AbstractResult result = null;
        try {
            try {
                bais = new ByteArrayInputStream(bytes);
                ois = new ObjectInputStream(bais);
                result = (AbstractResult)ois.readObject();
            } finally {
                if (bais != null) {
                    bais.close();
                }
                if (ois != null) {
                    ois.close();
                }
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "Unable to deserialize result!", e);
        } catch (ClassNotFoundException e) {
            Log.e(LOG_TAG, "Unable to deserialize result!", e);
        }
        return result;
!!!9052684.java!!!	clearResults() : void
        mAdditionalTextOutputString = null;
!!!9054476.java!!!	didPass() : boolean
        // Tests that crash can't have timed out or have an actual result.
        assert !(didCrash() && didTimeOut());
        assert !(didCrash() && getResultCode() != ResultCode.NO_ACTUAL_RESULT);
        return !didCrash() && !didTimeOut() && getResultCode() == ResultCode.RESULTS_MATCH;
