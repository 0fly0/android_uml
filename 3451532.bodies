class Section
!!!15043596.java!!!	Section(inout name : String, in position : int, in limit : int)
            this.name = name;
            this.position = this.initialPosition = position;
            this.limit = limit;
!!!15043724.java!!!	Section(in position : int)
            this("section", position, data.length);
!!!15043852.java!!!	getPosition() : int
            return position;
!!!15043980.java!!!	readInt() : int
            int result = (data[position] & 0xff)
                    | (data[position + 1] & 0xff) << 8
                    | (data[position + 2] & 0xff) << 16
                    | (data[position + 3] & 0xff) << 24;
            position += 4;
            return result;
!!!15044108.java!!!	readShort() : short
            int result = (data[position] & 0xff)
                    | (data[position + 1] & 0xff) << 8;
            position += 2;
            return (short) result;
!!!15044236.java!!!	readUnsignedShort() : int
            return readShort() & 0xffff;
!!!15044364.java!!!	readByte() : byte
            return (byte) (data[position++] & 0xff);
!!!15044492.java!!!	readByteArray(in length : int) : byte
            byte[] result = Arrays.copyOfRange(data, position, position + length);
            position += length;
            return result;
!!!15044620.java!!!	readShortArray(in length : int) : short
            short[] result = new short[length];
            for (int i = 0; i < length; i++) {
                result[i] = readShort();
            }
            return result;
!!!15044748.java!!!	readUleb128() : int
            return Leb128Utils.readUnsignedLeb128(this);
!!!15044876.java!!!	readUleb128p1() : int
            return Leb128Utils.readUnsignedLeb128(this) - 1;
!!!15045004.java!!!	readSleb128() : int
            return Leb128Utils.readSignedLeb128(this);
!!!15045132.java!!!	readTypeList() : TypeList
            int size = readInt();
            short[] types = new short[size];
            for (int i = 0; i < size; i++) {
                types[i] = readShort();
            }
            alignToFourBytes();
            return new TypeList(DexBuffer.this, types);
!!!15045260.java!!!	readString() : String
            int offset = readInt();
            int savedPosition = position;
            position = offset;
            try {
                int expectedLength = readUleb128();
                String result = Mutf8.decode(this, new char[expectedLength]);
                if (result.length() != expectedLength) {
                    throw new DexException("Declared length " + expectedLength
                            + " doesn't match decoded length of " + result.length());
                }
                return result;
            } catch (UTFDataFormatException e) {
                throw new DexException(e);
            } finally {
                position = savedPosition;
            }
!!!15045388.java!!!	readFieldId() : FieldId
            int declaringClassIndex = readUnsignedShort();
            int typeIndex = readUnsignedShort();
            int nameIndex = readInt();
            return new FieldId(DexBuffer.this, declaringClassIndex, typeIndex, nameIndex);
!!!15045516.java!!!	readMethodId() : MethodId
            int declaringClassIndex = readUnsignedShort();
            int protoIndex = readUnsignedShort();
            int nameIndex = readInt();
            return new MethodId(DexBuffer.this, declaringClassIndex, protoIndex, nameIndex);
!!!15045644.java!!!	readProtoId() : ProtoId
            int shortyIndex = readInt();
            int returnTypeIndex = readInt();
            int parametersOffset = readInt();
            return new ProtoId(DexBuffer.this, shortyIndex, returnTypeIndex, parametersOffset);
!!!15045772.java!!!	readClassDef() : ClassDef
            int offset = getPosition();
            int type = readInt();
            int accessFlags = readInt();
            int supertype = readInt();
            int interfacesOffset = readInt();
            int sourceFileIndex = readInt();
            int annotationsOffset = readInt();
            int classDataOffset = readInt();
            int staticValuesOffset = readInt();
            return new ClassDef(DexBuffer.this, offset, type, accessFlags, supertype,
                    interfacesOffset, sourceFileIndex, annotationsOffset, classDataOffset,
                    staticValuesOffset);
!!!15045900.java!!!	readCode() : Code
            int registersSize = readUnsignedShort();
            int insSize = readUnsignedShort();
            int outsSize = readUnsignedShort();
            int triesSize = readUnsignedShort();
            int debugInfoOffset = readInt();
            int instructionsSize = readInt();
            short[] instructions = readShortArray(instructionsSize);
            Try[] tries;
            CatchHandler[] catchHandlers;
            if (triesSize > 0) {
                if (instructions.length % 2 == 1) {
                    readShort(); // padding
                }

                /*
                 * We can't read the tries until we've read the catch handlers.
                 * Unfortunately they're in the opposite order in the dex file
                 * so we need to read them out-of-order.
                 */
                Section triesSection = open(position);
                skip(triesSize * SizeOf.TRY_ITEM);
                catchHandlers = readCatchHandlers();
                tries = triesSection.readTries(triesSize, catchHandlers);
            } else {
                tries = new Try[0];
                catchHandlers = new CatchHandler[0];
            }
            return new Code(registersSize, insSize, outsSize, debugInfoOffset, instructions,
                    tries, catchHandlers);
!!!15046028.java!!!	readCatchHandlers() : CatchHandler
            int baseOffset = position;
            int catchHandlersSize = readUleb128();
            CatchHandler[] result = new CatchHandler[catchHandlersSize];
            for (int i = 0; i < catchHandlersSize; i++) {
                int offset = position - baseOffset;
                result[i] = readCatchHandler(offset);
            }
            return result;
!!!15046156.java!!!	readTries(in triesSize : int, inout catchHandlers : CatchHandler) : Try
            Try[] result = new Try[triesSize];
            for (int i = 0; i < triesSize; i++) {
                int startAddress = readInt();
                int instructionCount = readUnsignedShort();
                int handlerOffset = readUnsignedShort();
                int catchHandlerIndex = findCatchHandlerIndex(catchHandlers, handlerOffset);
                result[i] = new Try(startAddress, instructionCount, catchHandlerIndex);
            }
            return result;
!!!15046284.java!!!	findCatchHandlerIndex(inout catchHandlers : CatchHandler, in offset : int) : int
            for (int i = 0; i < catchHandlers.length; i++) {
                CatchHandler catchHandler = catchHandlers[i];
                if (catchHandler.getOffset() == offset) {
                    return i;
                }
            }
            throw new IllegalArgumentException();
!!!15046412.java!!!	readCatchHandler(in offset : int) : CatchHandler
            int size = readSleb128();
            int handlersCount = Math.abs(size);
            int[] typeIndexes = new int[handlersCount];
            int[] addresses = new int[handlersCount];
            for (int i = 0; i < handlersCount; i++) {
                typeIndexes[i] = readUleb128();
                addresses[i] = readUleb128();
            }
            int catchAllAddress = size <= 0 ? readUleb128() : -1;
            return new CatchHandler(typeIndexes, addresses, catchAllAddress, offset);
!!!15046540.java!!!	readClassData() : ClassData
            int staticFieldsSize = readUleb128();
            int instanceFieldsSize = readUleb128();
            int directMethodsSize = readUleb128();
            int virtualMethodsSize = readUleb128();
            ClassData.Field[] staticFields = readFields(staticFieldsSize);
            ClassData.Field[] instanceFields = readFields(instanceFieldsSize);
            ClassData.Method[] directMethods = readMethods(directMethodsSize);
            ClassData.Method[] virtualMethods = readMethods(virtualMethodsSize);
            return new ClassData(staticFields, instanceFields, directMethods, virtualMethods);
!!!15046668.java!!!	readFields(in count : int) : Field
            ClassData.Field[] result = new ClassData.Field[count];
            int fieldIndex = 0;
            for (int i = 0; i < count; i++) {
                fieldIndex += readUleb128(); // field index diff
                int accessFlags = readUleb128();
                result[i] = new ClassData.Field(fieldIndex, accessFlags);
            }
            return result;
!!!15046796.java!!!	readMethods(in count : int) : Method
            ClassData.Method[] result = new ClassData.Method[count];
            int methodIndex = 0;
            for (int i = 0; i < count; i++) {
                methodIndex += readUleb128(); // method index diff
                int accessFlags = readUleb128();
                int codeOff = readUleb128();
                result[i] = new ClassData.Method(methodIndex, accessFlags, codeOff);
            }
            return result;
!!!15046924.java!!!	readAnnotation() : Annotation
            byte visibility = readByte();
            int typeIndex = readUleb128();
            int size = readUleb128();
            int[] names = new int[size];
            EncodedValue[] values = new EncodedValue[size];
            for (int i = 0; i < size; i++) {
                names[i] = readUleb128();
                values[i] = readEncodedValue();
            }
            return new Annotation(DexBuffer.this, visibility, typeIndex, names, values);
!!!15047052.java!!!	readEncodedValue() : EncodedValue
            int start = position;
            new EncodedValueReader(this).readValue();
            int end = position;
            return new EncodedValue(Arrays.copyOfRange(data, start, end));
!!!15047180.java!!!	readEncodedArray() : EncodedValue
            int start = position;
            new EncodedValueReader(this).readArray();
            int end = position;
            return new EncodedValue(Arrays.copyOfRange(data, start, end));
!!!15047308.java!!!	ensureCapacity(in size : int) : void
            if (position + size > limit) {
                throw new DexException("Section limit " + limit + " exceeded by " + name);
            }
!!!15047436.java!!!	skip(in count : int) : void
            if (count < 0) {
                throw new IllegalArgumentException();
            }
            ensureCapacity(count);
            position += count;
!!!15047564.java!!!	alignToFourBytes() : void
            int unalignedCount = position;
            position = DexBuffer.fourByteAlign(position);
            for (int i = unalignedCount; i < position; i++) {
                data[i] = 0;
            }
!!!15047692.java!!!	assertFourByteAligned() : void
            if ((position & 3) != 0) {
                throw new IllegalStateException("Not four byte aligned!");
            }
!!!15047820.java!!!	write(inout bytes : byte) : void
            ensureCapacity(bytes.length);
            System.arraycopy(bytes, 0, data, position, bytes.length);
            position += bytes.length;
!!!15047948.java!!!	writeByte(in b : int) : void
            ensureCapacity(1);
            data[position++] = (byte) b;
!!!15048076.java!!!	writeShort(in i : short) : void
            ensureCapacity(2);
            data[position    ] = (byte) i;
            data[position + 1] = (byte) (i >>> 8);
            position += 2;
!!!15048204.java!!!	writeUnsignedShort(in i : int) : void
            short s = (short) i;
            if (i != (s & 0xffff)) {
                throw new IllegalArgumentException("Expected an unsigned short: " + i);
            }
            writeShort(s);
!!!15048332.java!!!	write(inout shorts : short) : void
            for (short s : shorts) {
                writeShort(s);
            }
!!!15048460.java!!!	writeInt(in i : int) : void
            ensureCapacity(4);
            data[position    ] = (byte) i;
            data[position + 1] = (byte) (i >>>  8);
            data[position + 2] = (byte) (i >>> 16);
            data[position + 3] = (byte) (i >>> 24);
            position += 4;
!!!15048588.java!!!	writeUleb128(in i : int) : void
            try {
                Leb128Utils.writeUnsignedLeb128(this, i);
                ensureCapacity(0);
            } catch (ArrayIndexOutOfBoundsException e) {
                throw new DexException("Section limit " + limit + " exceeded by " + name);
            }
!!!15048716.java!!!	writeUleb128p1(in i : int) : void
            writeUleb128(i + 1);
!!!15048844.java!!!	writeSleb128(in i : int) : void
            try {
                Leb128Utils.writeSignedLeb128(this, i);
                ensureCapacity(0);
            } catch (ArrayIndexOutOfBoundsException e) {
                throw new DexException("Section limit " + limit + " exceeded by " + name);
            }
!!!15048972.java!!!	writeStringData(inout value : String) : void
            try {
                int length = value.length();
                writeUleb128(length);
                write(Mutf8.encode(value));
                writeByte(0);
            } catch (UTFDataFormatException e) {
                throw new AssertionError();
            }
!!!15049100.java!!!	writeTypeList(inout typeList : TypeList) : void
            short[] types = typeList.getTypes();
            writeInt(types.length);
            for (short type : types) {
                writeShort(type);
            }
            alignToFourBytes();
!!!15049228.java!!!	remaining() : int
            return limit - position;
!!!15049356.java!!!	used() : int
            return position - initialPosition;
