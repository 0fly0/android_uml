format 74
"sql" // _unknown::java::sql
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/sql/"
  java_package "java.sql"
  classview 132507 "sql"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 219931 "Array"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Java representation of the SQL {@code ARRAY} type."
      operation 959899 "getArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of the SQL {@code ARRAY} value as a Java array
object.

@return A Java array containing the elements of this Array
@throws SQLException
            if there is a database error."
      end

      operation 960027 "getArray"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns part of the SQL {@code ARRAY} associated with this array,
starting at a particular {@code index} and comprising up to {@code count}
successive elements of the SQL array.

@param index
           the start position in the array where the values are
           retrieved.
@param count
           the number of elements to retrieve.
@return A Java array containing the desired set of elements from this Array
@throws SQLException
            if there is a database error."
      end

      operation 960155 "getArray"
	public return_type class_ref 3401484 // Object
	nparams 3
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns part of the SQL {@code ARRAY} associated with this array,
starting at a particular {@code index} and comprising up to {@code count}
successive elements of the SQL array.

@param index
           the start position in the array where the values are
           retrieved.
@param count
           the number of elements to retrieve.
@param map
           the map defining the correspondence between SQL type names
           and Java types.
@return A Java array containing the desired set of elements from this Array
@throws SQLException
            if there is a database error."
      end

      operation 960283 "getArray"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the data from the underlying SQL {@code ARRAY} as a Java array.

@param map
           the map defining the correspondence between SQL type names
           and Java types.
@return A Java array containing the elements of this array
@throws SQLException
            if there is a database error."
      end

      operation 960411 "getBaseType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JDBC type of the entries in this array's underlying
SQL array.

@return An integer constant from the {@code java.sql.Types} class
@throws SQLException
            if there is a database error."
      end

      operation 960539 "getBaseTypeName"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the SQL type name of the entries in this array's underlying
SQL array.

@return The database specific name or a fully-qualified SQL type name.
@throws SQLException
             if there is a database error."
      end

      operation 960667 "getResultSet"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a ResultSet object which holds the entries of the SQL {@code
ARRAY} associated with this array.

@return the elements of the array as a {@code ResultSet}.
@throws SQLException
            if there is a database error."
      end

      operation 960795 "getResultSet"
	public return_type class_ref 220187 // ResultSet
	nparams 2
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code ResultSet} object that holds the entries of a subarray,
beginning at a particular index and comprising up to {@code count}
successive entries.

@param index
           the start position in the array where the values are
           retrieved.
@param count
           the number of elements to retrieve.
@return the elements of the array as a {@code ResultSet}.
@throws SQLException
            if there is a database error."
      end

      operation 960923 "getResultSet"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param in name "index" explicit_type "long"
	  param in name "count" explicit_type "int"
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code ResultSet} object that holds the entries of a subarray,
beginning at a particular index and comprising up to {@code count}
successive entries.

@param index
           the start position in the array where the values are
           retrieved.
@param count
           the number of elements to retrieve.
@param map
           the map defining the correspondence between SQL type names
           and Java types.
@return the {@code ResultSet} the array's custom type values. if a
        database error has occurred.
@throws SQLException
            if there is a database error."
      end

      operation 961051 "getResultSet"
	public return_type class_ref 220187 // ResultSet
	nparams 1
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code ResultSet} object which holds the entries of the SQL
{@code ARRAY} associated with this array.

@param map
           the map defining the correspondence between SQL type names
           and Java types.
@return the array as a {@code ResultSet}.
@throws SQLException
            if there is a database error."
      end

      operation 961179 "free"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Frees any resources held by this array. After {@code free} is called, calling
method other than {@code free} will throw {@code SQLException} (calling {@code free}
repeatedly will do nothing).
@throws SQLException"
      end
    end

    class 220059 "SQLException"
      visibility public 
      nactuals 1
      actual class class_ref 155675 // Iterable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception that indicates a failed JDBC operation.
It provides the following information about problems encountered with
database access:
<ul>
  <li>A message string.</li>
  <li>A {@code SQLState} error description string following either
<a href=\"http://en.wikipedia.org/wiki/SQL:1999\">SQL 99</a> or X/OPEN {@code SQLState}
conventions. {@link DatabaseMetaData#getSQLStateType} exposes the specific convention in
use.</li>
  <li>A database-specific error code.</li>
  <li>The next exception in the chain.</li>
</ul>

@see DatabaseMetaData"
      classrelation 331163 // <generalisation>
	relation 331163 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 331163 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      classrelation 331291 // <realization>
	relation 331291 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 331291 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      classrelation 331419 // <realization>
	relation 331419 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 331419 // <realization>
	  b parent class_ref 155675 // Iterable
      end

      attribute 265755 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2135244094396331484L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 331547 // SQLState (<unidirectional association>)
	relation 331547 --->
	  a role_name "SQLState" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 331547 // SQLState (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 265883 "vendorCode"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 331675 // next (<unidirectional association>)
	relation 331675 --->
	  a role_name "next" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 331675 // next (<unidirectional association>)
	  b parent class_ref 220059 // SQLException
      end

      operation 961307 "SQLException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code SQLException} object. The reason string is set to
{@code null}, the {@code SQLState} string is set to {@code null} and the
error code is set to 0."
      end

      operation 961435 "SQLException"
	public explicit_return_type ""
	nparams 1
	  param inout name "theReason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code SQLException} object. The reason string is set to the given
reason string, the {@code SQLState} string is set to {@code null} and the error code is
set to 0.

@param theReason
           the string to use as the Reason string"
      end

      operation 961563 "SQLException"
	public explicit_return_type ""
	nparams 2
	  param inout name "theReason" type class_ref 3399692 // String
	  param inout name "theSQLState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code SQLException} object. The reason string is set to the
given reason string, the {@code SQLState} string is set to the given
{@code SQLState} string and the error code is set to 0.

@param theReason
           the string to use as the reason string.
@param theSQLState
           the string to use as the {@code SQLState} string."
      end

      operation 961691 "SQLException"
	public explicit_return_type ""
	nparams 3
	  param inout name "theReason" type class_ref 3399692 // String
	  param inout name "theSQLState" type class_ref 3399692 // String
	  param in name "theErrorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code SQLException} object. The reason string is set to the
given reason string, the {@code SQLState} string is set to the given
{@code SQLState} string and the error code is set to the given error code
value.

@param theReason
           the string to use as the reason string.
@param theSQLState
           the string to use as the {@code SQLState} string.
@param theErrorCode
           the integer value for the error code."
      end

      operation 961819 "SQLException"
	public explicit_return_type ""
	nparams 1
	  param inout name "theCause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLException object. The Reason string is set to the null if
cause == null or cause.toString() if cause!=null,and the cause Throwable
object is set to the given cause Throwable object.

@param theCause
           the Throwable object for the underlying reason this
           SQLException

@since 1.6"
      end

      operation 961947 "SQLException"
	public explicit_return_type ""
	nparams 2
	  param inout name "theReason" type class_ref 3399692 // String
	  param inout name "theCause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLException object. The Reason string is set to the given and
the cause Throwable object is set to the given cause Throwable object.

@param theReason
           the string to use as the Reason string
@param theCause
           the Throwable object for the underlying reason this
           SQLException

@since 1.6"
      end

      operation 962075 "SQLException"
	public explicit_return_type ""
	nparams 3
	  param inout name "theReason" type class_ref 3399692 // String
	  param inout name "theSQLState" type class_ref 3399692 // String
	  param inout name "theCause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLException object. The Reason string is set to the given
reason string, the SQLState string is set to the given SQLState string
and the cause Throwable object is set to the given cause Throwable
object.

@param theReason
           the string to use as the Reason string
@param theSQLState
           the string to use as the SQLState string
@param theCause
           the Throwable object for the underlying reason this
           SQLException
@since 1.6"
      end

      operation 962203 "SQLException"
	public explicit_return_type ""
	nparams 4
	  param inout name "theReason" type class_ref 3399692 // String
	  param inout name "theSQLState" type class_ref 3399692 // String
	  param in name "theErrorCode" explicit_type "int"
	  param inout name "theCause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLException object. The Reason string is set to the given
reason string, the SQLState string is set to the given SQLState string ,
the Error Code is set to the given error code value, and the cause
Throwable object is set to the given cause Throwable object.

@param theReason
           the string to use as the Reason string
@param theSQLState
           the string to use as the SQLState string
@param theErrorCode
           the integer value for the error code
@param theCause
           the Throwable object for the underlying reason this
           SQLException
@since 1.6"
      end

      operation 962331 "getErrorCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the integer error code for this {@code SQLException}.

@return The integer error code for this {@code SQLException}. The meaning
        of the code is specific to the vendor of the database."
      end

      operation 962459 "getNextException"
	public return_type class_ref 220059 // SQLException
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the {@code SQLException} chained to this {@code SQLException},
if any.

@return The {@code SQLException} chained to this {@code SQLException}.
        {@code null} if there is no {@code SQLException} chained to this
        {@code SQLException}."
      end

      operation 962587 "getSQLState"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the {@code SQLState} description string for this {@code
SQLException} object.

@return The {@code SQLState} string for this {@code SQLException} object.
        This is an error description string which follows either the SQL
        99 conventions or the X/OPEN {@code SQLstate} conventions. The
        potential values of the {@code SQLState} string are described in
        each of the specifications. Which of the conventions is being
        used by the {@code SQLState} string can be discovered by using
        the {@code getSQLStateType} method of the {@code
        DatabaseMetaData} interface."
      end

      operation 962715 "setNextException"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obsolete. Appends {@code ex} to the end of this chain."
      end

      operation 962843 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Throwable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obsolete. {@link #getCause()} should be used instead of this iterator. Returns an iterator
over the exceptions added with {@link #setNextException}."
      end

      class 220443 "InternalIterator"
	visibility private 
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 331803 // <realization>
	  relation 331803 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 331803 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 331931 // current (<unidirectional association>)
	  relation 331931 --->
	    a role_name "current" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 331931 // current (<unidirectional association>)
	    b parent class_ref 220059 // SQLException
	end

	operation 962971 "InternalIterator"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "e" type class_ref 220059 // SQLException
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 963099 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 963227 "next"
	  public return_type class_ref 134683 // Throwable
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 963355 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 220187 "ResultSet"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface for an object which represents a database table entry, returned
as the result of the query to the database.
<p>
{@code ResultSet}s have a cursor which points to the current data table row.
When the {@code ResultSet} is created, the cursor's location is one position
ahead of the first row. To move the cursor to the first and consecutive rows,
use the {@code next} method. The {@code next} method returns {@code true} as
long as there are more rows in the {@code ResultSet}, otherwise it returns
{@code false}.
<p>
The default type of {@code ResultSet} can not be updated and its cursor can
only advance forward through the rows of data. This means that it is only
possible to read through it once. However, other kinds of {@code ResultSet}
are implemented: an <i>updatable</i> type and also types where the cursor can
be <i>scrolled</i> forward and backward through the rows of data. How such a
{@code ResultSet} is created is demonstrated in the following example:
<ul>
<dd>
        {@code Connection con;}</dd>
<dd>{@code Statement aStatement = con.createStatement(
ResultSet.TYPE_SCROLL_SENSITIVE,}{@code ResultSet.CONCUR_UPDATABLE );}</dd>
<dd>{@code ResultSet theResultSet =
theStatement.executeQuery(\"SELECT price, quantity FROM STOCKTABLE\");}</dd>
<dd>{@code // theResultSet is both scrollable and updatable}</dd> </ul>
<p>
The {@code ResultSet} interface provides a series of methods for retrieving
data from columns in the current row, such as {@code getDate} and {@code
getFloat}. The columns are retrieved either by their index number (starting
at 1) or by their name - there are separate methods for both techniques of
column addressing. The column names are case insensitive. If several columns
have the same name, then the getter methods use the first matching column.
This means that if column names are used, it is not possible to guarantee
that the name will retrieve data from the intended column - for certainty it
is better to use column indexes. Ideally the columns should be read
left-to-right and read once only, since not all databases are optimized to
handle other techniques of reading the data.
<p>
When reading data via the appropriate getter methods, the JDBC driver maps
the SQL data retrieved from the database to the Java type implied by the
method invoked by the application. The JDBC specification has a table for the
mappings from SQL types to Java types.
<p>
There are also methods for writing data into the {@code ResultSet}, such as
{@code updateInt} and {@code updateString}. The update methods can be used
either to modify the data of an existing row or to insert new data rows into
the {@code ResultSet} . Modification of existing data involves moving the
cursor to the row which needs modification and then using the update methods
to modify the data, followed by calling the {@code ResultSet.updateRow}
method. For insertion of new rows, the cursor is first moved to a special row
called the <i>Insert Row</i>, data is added using the update methods,
followed by calling the {@code ResultSet.insertRow} method.
<p>
A {@code ResultSet} is closed if the statement which generated it closes, the
statement is executed again, or the same statement's next {@code ResultSet}
is retrieved (if the statement returned of multiple results)."
      classrelation 336027 // <generalisation>
	relation 336027 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 336027 // <generalisation>
	  b parent class_ref 221083 // Wrapper
      end

      classrelation 336155 // <generalisation>
	relation 336155 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 336155 // <generalisation>
	  b parent class_ref 132123 // AutoCloseable
      end

      attribute 278811 "CLOSE_CURSORS_AT_COMMIT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate that a {@code ResultSet} object must be
closed when the method {@code Connection.commit} is invoked.
"
      end

      attribute 278939 "HOLD_CURSORS_OVER_COMMIT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate that a {@code ResultSet} object must not be
closed when the method {@code Connection.commit} is invoked.
"
      end

      attribute 279067 "CONCUR_READ_ONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1007"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate the concurrency mode for a {@code ResultSet}
object that cannot be updated.
"
      end

      attribute 279195 "CONCUR_UPDATABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1008"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate the concurrency mode for a {@code ResultSet}
object that can be updated.
"
      end

      attribute 279323 "FETCH_FORWARD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate processing of the rows of a {@code ResultSet}
in the forward direction, first to last.
"
      end

      attribute 279451 "FETCH_REVERSE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate processing of the rows of a {@code ResultSet}
in the reverse direction, last to first.
"
      end

      attribute 279579 "FETCH_UNKNOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate that the order of processing of the rows of a
{@code ResultSet} is unknown.
"
      end

      attribute 279707 "TYPE_FORWARD_ONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1003"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate a {@code ResultSet} object whose cursor can
only move forward.
"
      end

      attribute 279835 "TYPE_SCROLL_INSENSITIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1004"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate a {@code ResultSet} object which is
scrollable but is insensitive to changes made by others.
"
      end

      attribute 279963 "TYPE_SCROLL_SENSITIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1005"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant used to indicate a {@code ResultSet} object which is
scrollable and sensitive to changes made by others.
"
      end

      operation 1036187 "absolute"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "row" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to a specified row number in the {@code ResultSet}.

@param row
           the index of the row starting at index 1. Index {@code -1}
           returns the last row.
@return {@code true} if the new cursor position is on the {@code
        ResultSet}, {@code false} otherwise.
@throws SQLException
            if a database error happens."
      end

      operation 1036315 "afterLast"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the end of the {@code ResultSet}, after the last row.

@throws SQLException
            if a database error happens."
      end

      operation 1036443 "beforeFirst"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the start of the {@code ResultSet}, before the first
row.

@throws SQLException
            if a database error happens."
      end

      operation 1036571 "cancelRowUpdates"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels any updates made to the current row in the {@code ResultSet}.

@throws SQLException
            if a database error happens."
      end

      operation 1036699 "clearWarnings"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all warnings related to this {@code ResultSet}.

@throws SQLException
            if a database error happens."
      end

      operation 1036827 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this {@code ResultSet}'s database and JDBC resources. You are
strongly advised to use this method rather than relying on the release
being done when the {@code ResultSet}'s finalize method is called during
garbage collection process. Note that the {@code close()} method might
take some time to complete since it is dependent on the behavior of the
connection to the database and the database itself.

@throws SQLException
            if a database error happens."
      end

      operation 1036955 "deleteRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes the current row from the {@code ResultSet} and from the
underlying database.

@throws SQLException
            if a database error happens."
      end

      operation 1037083 "findColumn"
	public explicit_return_type "int"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the index number for a column in the {@code ResultSet} from the
provided column name.

@param columnName
           the column name.
@return the column's index in the {@code ResultSet} identified by column
        name.
@throws SQLException
            if a database error happens."
      end

      operation 1037211 "first"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shifts the cursor position to the first row in the {@code ResultSet}.

@return {@code true} if the position is in a legitimate row, {@code
        false} if the {@code ResultSet} contains no rows.
@throws SQLException
            if a database error happens."
      end

      operation 1037339 "getArray"
	public return_type class_ref 219931 // Array
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the content of a column specified by column index in the current row
of this {@code ResultSet} as a {@code java.sql.Array}.

@param columnIndex
           the index of the column to read
@return a {@code java.sql.Array} with the data from the column.
@throws SQLException
            if a database error happens."
      end

      operation 1037467 "getArray"
	public return_type class_ref 219931 // Array
	nparams 1
	  param inout name "colName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a {@code
java.sql.Array}.

@param colName
           the name of the column to read.
@return a {@code java.sql.Array} with the data from the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1037595 "getAsciiStream"
	public return_type class_ref 131867 // InputStream
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as an ASCII
character stream.

@param columnIndex
           the index of the column to read.
@return an {@code InputStream} with the data from the column.
@throws SQLException
            if a database error happens."
      end

      operation 1037723 "getAsciiStream"
	public return_type class_ref 131867 // InputStream
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as an ASCII character
stream.

@param columnName
           the name of the column to read
@return an {@code InputStream} with the data from the column.
@throws SQLException
            if a database error happens."
      end

      operation 1037851 "getBigDecimal"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.math.BigDecimal}.

@param columnIndex
           the index of the column to read.
@return a {@code BigDecimal} with the value of the column.
@throws SQLException
            if a database error happens."
      end

      operation 1037979 "getBigDecimal"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.math.BigDecimal}.

@deprecated use {@link #getBigDecimal(int)} or
            {@link #getBigDecimal(String)}
@param columnIndex
           the index of the column to read.
@param scale
           the number of digits after the decimal point
@return a {@code BigDecimal} with the value of the column.
@throws SQLException
            if a database error happens."
      end

      operation 1038107 "getBigDecimal"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a {@code
java.math.BigDecimal}.

@param columnName
           the name of the column to read.
@return a BigDecimal with value of the column.
@throws SQLException
            if a database error happens."
      end

      operation 1038235 "getBigDecimal"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Gets the value of a column specified by column name, as a {@code
java.math.BigDecimal}.

@deprecated use {@link #getBigDecimal(int)} or
            {@link #getBigDecimal(String)}
@param columnName
           the name of the column to read.
@param scale
           the number of digits after the decimal point
@return a BigDecimal with value of the column.
@throws SQLException
            if a database error happens."
      end

      operation 1038363 "getBinaryStream"
	public return_type class_ref 131867 // InputStream
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a binary
stream.
<p>
This method can be used to read {@code LONGVARBINARY} values. All of the
data in the {@code InputStream} should be read before getting data from
any other column. A further call to a getter method will implicitly close
the {@code InputStream}.

@param columnIndex
           the index of the column to read.
@return an {@code InputStream} with the data from the column. If the
        column value is SQL {@code NULL}, {@code null} is returned.
@throws SQLException
            if a database error happens."
      end

      operation 1038491 "getBinaryStream"
	public return_type class_ref 131867 // InputStream
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a binary stream.
<p>
This method can be used to read {@code LONGVARBINARY} values. All of the
data in the {@code InputStream} should be read before getting data from
any other column. A further call to a getter method will implicitly close
the {@code InputStream}.

@param columnName
           the name of the column to read.
@return an {@code InputStream} with the data from the column if the
        column value is SQL {@code NULL}, {@code null} is returned.
@throws SQLException
            if a database error happens."
      end

      operation 1038619 "getBlob"
	public return_type class_ref 220571 // Blob
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.sql.Blob} object.

@param columnIndex
           the index of the column to read.
@return a {@code java.sql.Blob} with the value of the column.
@throws SQLException
            if a database error happens."
      end

      operation 1038747 "getBlob"
	public return_type class_ref 220571 // Blob
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a {@code
java.sql.Blob} object.

@param columnName
           the name of the column to read.
@return a {@code java.sql.Blob} with the value of the column.
@throws SQLException
            if a database error happens."
      end

      operation 1038875 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code boolean}
.

@param columnIndex
           the index of the column to read.
@return a {@code boolean} value from the column. If the column is SQL
        {@code NULL}, {@code false} is returned.
@throws SQLException
            if a database error happens."
      end

      operation 1039003 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a {@code boolean}
.

@param columnName
           the name of the column to read.
@return a {@code boolean} value from the column. If the column is SQL
        {@code NULL}, {@code false} is returned.
@throws SQLException
            if a database error happens."
      end

      operation 1039131 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code byte}.

@param columnIndex
           the index of the column to read.
@return a {@code byte} equal to the value of the column. 0 if the value
        is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1039259 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a {@code byte}.

@param columnName
           the name of the column to read.
@return a {@code byte} equal to the value of the column. 0 if the value
        is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1039387 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a byte array.

@param columnIndex
           the index of the column to read.
@return a byte array containing the value of the column. {@code null} if
        the column contains SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1039515 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a byte array.

@param columnName
           the name of the column to read.
@return a byte array containing the value of the column. {@code null} if
        the column contains SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1039643 "getCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.io.Reader} object.

@param columnIndex
           the index of the column to read.
@return a {@code Reader} holding the value of the column. {@code null} if
        the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens.
@see java.io.Reader"
      end

      operation 1039771 "getCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a {@code
java.io.Reader} object.

@param columnName
           the name of the column to read.
@return a {@code Reader} holding the value of the column. {@code null} if
        the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1039899 "getClob"
	public return_type class_ref 221723 // Clob
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.sql.Clob}.

@param columnIndex
           the index of the column to read.
@return a {@code Clob} object representing the value in the column.
        {@code null} if the value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1040027 "getClob"
	public return_type class_ref 221723 // Clob
	nparams 1
	  param inout name "colName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a {@code
java.sql.Clob}.

@param colName
           the name of the column to read.
@return a {@code Clob} object representing the value in the column.
        {@code null} if the value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1040155 "getConcurrency"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the concurrency mode of this {@code ResultSet}.

@return the concurrency mode - one of: {@code ResultSet.CONCUR_READ_ONLY}
        , {@code ResultSet.CONCUR_UPDATABLE}.
@throws SQLException
            if a database error happens."
      end

      operation 1040283 "getCursorName"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the SQL cursor of this {@code ResultSet}.

@return the SQL cursor name.
@throws SQLException
            if a database error happens."
      end

      operation 1040411 "getDate"
	public return_type class_ref 221851 // Date
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.sql.Date}.

@param columnIndex
           the index of the column to read.
@return a {@code java.sql.Date} matching the column value. {@code null}
        if the column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1040539 "getDate"
	public return_type class_ref 221851 // Date
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.sql.Date}. This method uses a supplied calendar to compute the Date.

@param columnIndex
           the index of the column to read.
@param cal
           a {@code java.util.Calendar} to use in constructing the Date.
@return a {@code java.sql.Date} matching the column value. {@code null}
        if the column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1040667 "getDate"
	public return_type class_ref 221851 // Date
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a {@code
java.sql.Date}.

@param columnName
           the name of the column to read.
@return a {@code java.sql.Date} matching the column value. {@code null}
        if the column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1040795 "getDate"
	public return_type class_ref 221851 // Date
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a {@code
java.sql.Date} object.

@param columnName
           the name of the column to read.
@param cal
           {@code java.util.Calendar} to use in constructing the Date.
@return a {@code java.sql.Date} matching the column value. {@code null}
        if the column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1040923 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code double}
value.

@param columnIndex
           the index of the column to read.
@return a {@code double} equal to the column value. {@code 0.0} if the
        column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1041051 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a {@code double}
value.

@param columnName
           the name of the column to read.
@return a {@code double} equal to the column value. {@code 0.0} if the
        column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1041179 "getFetchDirection"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the direction in which rows are fetched for this {@code ResultSet}
object.

@return the fetch direction. Will be one of:
        <ul>
        <li>ResultSet.FETCH_FORWARD</li><li>ResultSet.FETCH_REVERSE</li>
        <li>ResultSet.FETCH_UNKNOWN</li>
        </ul>
@throws SQLException
            if a database error happens."
      end

      operation 1041307 "getFetchSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the fetch size (in number of rows) for this {@code ResultSet}.

@return the fetch size as an int
@throws SQLException
            if a database error happens."
      end

      operation 1041435 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code float}
value.

@param columnIndex
           the index of the column to read.
@return a {@code float} equal to the column value. {@code 0.0} if the
        column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1041563 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a {@code float}
value.

@param columnName
           the name of the column to read.
@return a {@code float} equal to the column value. {@code 0.0} if the
        column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1041691 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as an {@code int}
value.

@param columnIndex
           the index of the column to read.
@return an {@code int} equal to the column value. {@code 0} if the
        column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1041819 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as an {@code int}
value.

@param columnName
           the name of the column to read.
@return an {@code int} equal to the column value. {@code 0} if the
        column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1041947 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code long}
value.

@param columnIndex
           the index of the column to read.
@return a {@code long} equal to the column value. {@code 0} if the
        column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1042075 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a {@code long}
value.

@param columnName
           the name of the column to read.
@return a {@code long} equal to the column value. {@code 0} if the
        column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1042203 "getMetaData"
	public return_type class_ref 221467 // ResultSetMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the metadata for this {@code ResultSet}. This defines the number,
types and properties of the columns in the {@code ResultSet}.

@return a {@code ResultSetMetaData} object with information about this
        {@code ResultSet}.
@throws SQLException
            if a database error happens."
      end

      operation 1042331 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified column as a Java {@code Object}. The type
of the returned object will be the default according to the column's SQL
type, following the JDBC specification for built-in types.
<p>
For SQL User Defined Types, if a column value is Structured or Distinct,
this method behaves the same as a call to: {@code
getObject(columnIndex,this.getStatement().getConnection().getTypeMap())}

@param columnIndex
           the index of the column to read.
@return an {@code Object} containing the value of the column. {@code
        null} if the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1042459 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a Java {@code
Object}.
<p>
The type of the Java object will be determined by the supplied Map to
perform the mapping of SQL {@code Struct} or Distinct types into Java
objects.

@param columnIndex
           the index of the column to read.
@param map
           a {@code java.util.Map} containing a mapping from SQL Type
           names to Java classes.
@return an {@code Object} containing the value of the column. {@code
        null} if the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1042587 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified column as a Java {@code Object}. The type
of the returned object will be the default according to the column's SQL
type, following the JDBC specification for built-in types.
<p>
For SQL User Defined Types, if a column value is structured or distinct,
this method behaves the same as a call to: {@code
getObject(columnIndex,this.getStatement().getConnection().getTypeMap())}

@param columnName
           the name of the column to read.
@return an {@code Object} containing the value of the column. {@code
        null} if the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1042715 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a Java {@code
Object}.
<p>
The type of the Java object will be determined by the supplied Map to
perform the mapping of SQL Struct or Distinct types into Java objects.

@param columnName
           the name of the column to read.
@param map
           a {@code java.util.Map} containing a mapping from SQL Type names to
           Java classes.
@return an {@code Object} containing the value of the column. {@code
        null} if the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1042843 "getRef"
	public return_type class_ref 222107 // Ref
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a Java {@code
java.sql.Ref}.

@param columnIndex
           the index of the column to read.
@return a Ref representing the value of the SQL REF in the column
@throws SQLException
            if a database error happens."
      end

      operation 1042971 "getRef"
	public return_type class_ref 222107 // Ref
	nparams 1
	  param inout name "colName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a Java {@code
java.sql.Ref}.

@param colName
           the name of the column to read.
@return a Ref representing the value of the SQL {@code REF} in the column
@throws SQLException
            if a database error happens."
      end

      operation 1043099 "getRow"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of the current row in the {@code ResultSet}. Row numbers
start at 1 for the first row.

@return the index number of the current row. {@code 0} is returned if
        there is no current row.
@throws SQLException
            if a database error happens."
      end

      operation 1043227 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a short value.

@param columnIndex
           the index of the column to read.
@return a short value equal to the value of the column. {@code 0} if
        the value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1043355 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a short value.

@param columnName
           the name of the column to read.
@return a short value equal to the value of the column. {@code 0} if
        the value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1043483 "getStatement"
	public return_type class_ref 220955 // Statement
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the statement that produced this {@code ResultSet}. If the {@code
ResultSet} was not created by a statement (i.e. because it was returned
from one of the {@link DatabaseMetaData} methods), {@code null} is
returned.

@return the Statement which produced this {@code ResultSet}, or {@code
        null} if the {@code ResultSet} was not created by a Statement.
@throws SQLException
            if a database error happens."
      end

      operation 1043611 "getString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a String.

@param columnIndex
           the index of the column to read.
@return the String representing the value of the column, {@code null} if
        the column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1043739 "getString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a String.

@param columnName
           the name of the column to read.
@return the String representing the value of the column, {@code null} if
        the column is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1043867 "getTime"
	public return_type class_ref 222235 // Time
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.sql.Time} value.

@param columnIndex
           the index of the column to read.
@return a Time representing the column value, {@code null} if the column
        value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1043995 "getTime"
	public return_type class_ref 222235 // Time
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.sql.Time} value. The supplied {@code Calendar} is used to
map the SQL {@code Time} value to a Java Time value.

@param columnIndex
           the index of the column to read.
@param cal
           a {@code Calendar} to use in creating the Java Time value.
@return a Time representing the column value, {@code null} if the column
        value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1044123 "getTime"
	public return_type class_ref 222235 // Time
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a {@code
java.sql.Time} value.

@param columnName
           the name of the column to read.
@return the column value, {@code null} if the column value is SQL {@code
        NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1044251 "getTime"
	public return_type class_ref 222235 // Time
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index, as a {@code
java.sql.Time} value. The supplied {@code Calendar} is used to
map the SQL {@code Time} value to a Java Time value.

@param columnName
           the name of the column to read.
@param cal
           a {@code Calendar} to use in creating the Java time value.
@return a Time representing the column value, {@code null} if the column
        value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1044379 "getTimestamp"
	public return_type class_ref 222363 // Timestamp
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.sql.Timestamp} value.

@param columnIndex
           the index of the column to read.
@return a timestamp representing the column value, {@code null} if the
        column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1044507 "getTimestamp"
	public return_type class_ref 222363 // Timestamp
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index, as a {@code
java.sql.Timestamp} value. The supplied Calendar is used when mapping
the SQL {@code Timestamp} value to a Java {@code Timestamp} value.

@param columnIndex
           the index of the column to read.
@param cal
           Calendar to use in creating the Java timestamp value.
@return a timestamp representing the column value, {@code null} if the
        column value is SQL NULL.
@throws SQLException
            if a database error happens."
      end

      operation 1044635 "getTimestamp"
	public return_type class_ref 222363 // Timestamp
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a {@code
java.sql.Timestamp} value.

@param columnName
           the name of the column to read.
@return a timestamp representing the column value, {@code null} if the
        column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1044763 "getTimestamp"
	public return_type class_ref 222363 // Timestamp
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name, as a {@code
java.sql.Timestamp} value. The supplied Calendar is used when mapping
the SQL {@code Timestamp} value to a Java {@code Timestamp} value.

@param columnName
           the name of the column to read.
@param cal
           Calendar to use in creating the Java {@code Timestamp} value.
@return a timestamp representing the column value, {@code null} if the
        column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1044891 "getType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the type of the {@code ResultSet}.

@return The {@code ResultSet} type, one of:
        <ul>
        <li>{@code ResultSet.TYPE_FORWARD_ONLY}</li> <li>{@code
        ResultSet.TYPE_SCROLL_INSENSITIVE}</li> <li>{@code
        ResultSet.TYPE_SCROLL_SENSITIVE}</li>
        </ul>
@throws SQLException
            if there is a database error."
      end

      operation 1045019 "getUnicodeStream"
	public return_type class_ref 131867 // InputStream
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Gets the value of the column as an {@code InputStream} of unicode
characters.

@deprecated Use {@link #getCharacterStream}.
@param columnIndex
           the index of the column to read.
@return an {@code InputStream} holding the value of the column. {@code
        null} if the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1045147 "getUnicodeStream"
	public return_type class_ref 131867 // InputStream
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Gets the value of the column as an {@code InputStream} of Unicode
characters.

@deprecated Use {@link #getCharacterStream}
@param columnName
           the name of the column to read.
@return an {@code InputStream} holding the value of the column. {@code
        null} if the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1045275 "getURL"
	public return_type class_ref 140443 // URL
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column index as a {@code
java.net.URL}.

@param columnIndex
           the index of the column to read.
@return a URL. {@code null} if the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1045403 "getURL"
	public return_type class_ref 140443 // URL
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a column specified by column name as a {@code
java.net.URL} object.

@param columnName
           the name of the column to read.
@return the column vaule as a URL. {@code null} if the column value is SQL {@code NULL}.
@throws SQLException
            if a database error happens."
      end

      operation 1045531 "getWarnings"
	public return_type class_ref 221339 // SQLWarning
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the first warning generated by calls on this {@code ResultSet}.
Subsequent warnings on this {@code ResultSet} are chained to the first
one.
<p>
The warnings are cleared when a new Row is read from the {@code
ResultSet}. The warnings returned by this method are only the warnings
generated by {@code ResultSet} method calls - warnings generated by
Statement methods are held by the Statement.
<p>
An {@code SQLException} is generated if this method is called on a closed
{@code ResultSet}.

@return an SQLWarning which is the first warning for this {@code
        ResultSet}. {@code null} if there are no warnings.
@throws SQLException
            if a database error happens."
      end

      operation 1045659 "insertRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert the insert row into the {@code ResultSet} and into the underlying
database. The cursor must be set to the Insert Row before this method is
invoked.

@throws SQLException
            if a database error happens. Particular cases include the
            cursor not being on the Insert Row or if any columns in the
            row do not have a value where the column is declared as
            not-nullable."
      end

      operation 1045787 "isAfterLast"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets if the cursor is after the last row of the {@code ResultSet}.

@return {@code true} if the cursor is after the last row in the {@code
        ResultSet}, {@code false} if the cursor is at any other position
        in the {@code ResultSet}.
@throws SQLException
            if a database error happens."
      end

      operation 1045915 "isBeforeFirst"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets if the cursor is before the first row of the {@code ResultSet}.

@return {@code true} if the cursor is before the first row in the {@code
        ResultSet}, {@code false} if the cursor is at any other position
        in the {@code ResultSet}.
@throws SQLException
            if a database error happens."
      end

      operation 1046043 "isFirst"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets if the cursor is on the first row of the {@code ResultSet}.

@return {@code true} if the cursor is on the first row in the {@code
        ResultSet}, {@code false} if the cursor is at any other position
        in the {@code ResultSet}.
@throws SQLException
            if a database error happens."
      end

      operation 1046171 "isLast"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets if the cursor is on the last row of the {@code ResultSet}

@return {@code true} if the cursor is on the last row in the {@code
        ResultSet}, {@code false} if the cursor is at any other position
        in the {@code ResultSet}.
@throws SQLException
            if a database error happens."
      end

      operation 1046299 "last"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shifts the cursor position to the last row of the {@code ResultSet}.

@return {@code true} if the new position is in a legitimate row, {@code
        false} if the {@code ResultSet} contains no rows.
@throws SQLException
            if there is a database error."
      end

      operation 1046427 "moveToCurrentRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor to the remembered position, namely the
row that was the current row before a call to {@code moveToInsertRow}.
This only applies if the cursor is on the Insert Row.

@throws SQLException
            if a database error happens."
      end

      operation 1046555 "moveToInsertRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor position to the Insert Row. The current position is
remembered and the cursor is positioned at the Insert Row. The columns in
the Insert Row should be filled in with the appropriate update methods,
before calling {@code insertRow} to insert the new row into the database.

@throws SQLException
            if a database error happens."
      end

      operation 1046683 "next"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shifts the cursor position down one row in this {@code ResultSet} object.
<p>
Any input streams associated with the current row are closed and any
warnings are cleared.

@return {@code true} if the updated cursor position is pointing to a
        valid row, {@code false} otherwise (i.e. when the cursor is after
        the last row in the {@code ResultSet}).
@throws SQLException
            if a database error happens."
      end

      operation 1046811 "previous"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Relocates the cursor position to the preceding row in this {@code
ResultSet}.

@return {@code true} if the new position is in a legitimate row, {@code
        false} if the cursor is now before the first row.
@throws SQLException
            if a database error happens."
      end

      operation 1046939 "refreshRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Refreshes the current row with its most up to date value in the database.
Must not be called when the cursor is on the Insert Row.
<p>
If any columns in the current row have been updated but the {@code
updateRow} has not been called, then the updates are lost when this
method is called.

@throws SQLException
            if a database error happens., including if the current row is
            the Insert row."
      end

      operation 1047067 "relative"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the cursor position up or down by a specified number of rows. If
the new position is beyond the start row (or end row), the cursor position is
set before the first row (or, respectively, after the last row).

@param rows
           a number of rows to move the cursor - may be positive or
           negative
@return {@code true} if the new cursor position is on a row, {@code
        false} otherwise
@throws SQLException
            if a database error happens."
      end

      operation 1047195 "rowDeleted"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a row has been deleted. This method depends on whether
the JDBC driver and database can detect deletions.

@return {@code true} if a row has been deleted and if deletions are
        detected, {@code false} otherwise.
@throws SQLException
            if a database error happens."
      end

      operation 1047323 "rowInserted"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the current row has had an insertion operation. This
method depends on whether the JDBC driver and database can detect
insertions.

@return {@code true} if a row has been inserted and if insertions are
        detected, {@code false} otherwise.
@throws SQLException
            if a database error happens."
      end

      operation 1047451 "rowUpdated"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the current row has been updated. This method depends
on whether the JDBC driver and database can detect updates.

@return {@code true} if the current row has been updated and if updates
        can be detected, {@code false} otherwise.
@throws SQLException
            if a database error happens."
      end

      operation 1047579 "setFetchDirection"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates which direction (forward/reverse) will be used to process the
rows of this {@code ResultSet} object. This is treated as a hint by the
JDBC driver.

@param direction
           can be {@code ResultSet.FETCH_FORWARD}, {@code
           ResultSet.FETCH_REVERSE}, or {@code ResultSet.FETCH_UNKNOWN}
@throws SQLException
            if there is a database error."
      end

      operation 1047707 "setFetchSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates the number of rows to fetch from the database when extra rows
are required for this {@code ResultSet}. This used as a hint to the JDBC
driver.

@param rows
           the number of rows to fetch. {@code 0} implies that the JDBC
           driver can make its own decision about the fetch size. The
           number should not be greater than the maximum number of rows
           established by the statement that generated the {@code
           ResultSet}.
@throws SQLException
            if a database error happens."
      end

      operation 1047835 "updateArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 219931 // Array
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code
java.sql.Array} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1047963 "updateArray"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 219931 // Array
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code java.sql.Array}
value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1048091 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with an ASCII stream value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@param length
           the length of the data to write from the stream
@throws SQLException
            if a database error happens."
      end

      operation 1048219 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with an Ascii stream value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@param length
           the length of the data to write from the stream
@throws SQLException
            if a database error happens."
      end

      operation 1048347 "updateBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 166171 // BigDecimal
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code
java.sql.BigDecimal} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1048475 "updateBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 166171 // BigDecimal
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code
java.sql.BigDecimal} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1048603 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a binary stream value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@param length
           the number of bytes to be read from the the stream.
@throws SQLException
            if a database error happens."
      end

      operation 1048731 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a binary stream value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@param length
           he number of bytes to be read from the the stream.
@throws SQLException
            if a database error happens."
      end

      operation 1048859 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 220571 // Blob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code java.sql.Blob}
value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1048987 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 220571 // Blob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code java.sql.Blob}
value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1049115 "updateBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code boolean}
value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1049243 "updateBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code boolean} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1049371 "updateByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code byte} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1049499 "updateByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code byte} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1049627 "updateBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code byte} array
value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1049755 "updateBytes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a byte array value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1049883 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 133019 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a character stream
value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@param length
           the length of data to write from the stream
@throws SQLException
            if a database error happens."
      end

      operation 1050011 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a character stream
value.

@param columnName
           the name of the column to update.
@param reader
           the new value for the specified column.
@param length
           the length of data to write from the Reader
@throws SQLException
            if a database error happens."
      end

      operation 1050139 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 221723 // Clob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code java.sql.Clob}
value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1050267 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 221723 // Clob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code java.sql.Clob}
value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1050395 "updateDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 221851 // Date
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code java.sql.Date}
value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1050523 "updateDate"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 221851 // Date
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code java.sql.Date}
value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1050651 "updateDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code double} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1050779 "updateDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code double} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1050907 "updateFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code float} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1051035 "updateFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code float} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1051163 "updateInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with an {@code int} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1051291 "updateInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with an {@code int} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1051419 "updateLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code long} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column..
@throws SQLException
            if a database error happens."
      end

      operation 1051547 "updateLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code long} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1051675 "updateNull"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code null} value.

@param columnIndex
           the index of the column to update.
@throws SQLException
            if a database error happens."
      end

      operation 1051803 "updateNull"
	public explicit_return_type "void"
	nparams 1
	  param inout name "columnName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code null} value.

@param columnName
           the name of the column to update.
@throws SQLException
            if a database error happens."
      end

      operation 1051931 "updateObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with an {@code Object}
value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1052059 "updateObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 3401484 // Object
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with an {@code Object}
value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@param scale
           for the types {@code java.sql.Types.DECIMAL} or {@code
           java.sql.Types.NUMERIC}, this specifies the number of digits
           after the decimal point.
@throws SQLException
            if a database error happens."
      end

      operation 1052187 "updateObject"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with an {@code Object} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1052315 "updateObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 3401484 // Object
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with an {@code Object} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@param scale
           for the types {@code java.sql.Types.DECIMAL} or {@code
           java.sql.Types.NUMERIC}, this specifies the number of digits
           after the decimal point.
@throws SQLException
            if a database error happens."
      end

      operation 1052443 "updateRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 222107 // Ref
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code java.sql.Ref}
value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1052571 "updateRef"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 222107 // Ref
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code java.sql.Ref}
value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1052699 "updateRow"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the database with the new contents of the current row of this
{@code ResultSet} object.

@throws SQLException
            if a database error happens."
      end

      operation 1052827 "updateShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code short} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1052955 "updateShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code short} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1053083 "updateString"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code String} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1053211 "updateString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code String} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1053339 "updateTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 222235 // Time
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code Time} value.

@param columnIndex
           the index of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1053467 "updateTime"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 222235 // Time
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column name with a {@code Time} value.

@param columnName
           the name of the column to update.
@param x
           the new value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1053595 "updateTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 222363 // Timestamp
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by a column index with a {@code Timestamp}
value.

@param columnIndex
           the index of the column to update.
@param x
           the new timestamp value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1053723 "updateTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 222363 // Timestamp
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates a column specified by column name with a {@code Timestamp} value.

@param columnName
           the name of the column to update.
@param x
           the new timestamp value for the specified column.
@throws SQLException
            if a database error happens."
      end

      operation 1053851 "wasNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the last column read from this {@code ResultSet}
contained SQL {@code NULL}.

@return {@code {@code true} if the last column contained SQL {@code
        NULL}, {@code false} otherwise
@throws SQLException
            if a database error happens."
      end

      operation 1053979 "getRowId"
	public return_type class_ref 222491 // RowId
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code RowId} corresponding to the SQL ROWID at the 1-based {@code columnIndex}.
@throws SQLException"
      end

      operation 1054107 "getRowId"
	public return_type class_ref 222491 // RowId
	nparams 1
	  param inout name "columnLabel" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code RowId} corresponding to the SQL ROWID at the named column.
@throws SQLException"
      end

      operation 1054235 "updateRowId"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "value" type class_ref 222491 // RowId
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1054363 "updateRowId"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "value" type class_ref 222491 // RowId
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1054491 "getHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the holdability of this result set: {@link #HOLD_CURSORS_OVER_COMMIT} or
{@link #CLOSE_CURSORS_AT_COMMIT}.
@throws SQLException"
      end

      operation 1054619 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this result set has been closed, false otherwise.
@throws SQLException"
      end

      operation 1054747 "updateNString"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "nString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1054875 "updateNString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "nString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1055003 "updateNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "nClob" type class_ref 222619 // NClob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1055131 "updateNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "nClob" type class_ref 222619 // NClob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1055259 "getNClob"
	public return_type class_ref 222619 // NClob
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code NClob} corresponding to the value at the 1-based {@code columnIndex}.
@throws SQLException"
      end

      operation 1055387 "getNClob"
	public return_type class_ref 222619 // NClob
	nparams 1
	  param inout name "columnLabel" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code NClob} corresponding to the value in the named column.
@throws SQLException"
      end

      operation 1055515 "getSQLXML"
	public return_type class_ref 222747 // SQLXML
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code SQLXML} corresponding to the value at the 1-based {@code columnIndex}.
@throws SQLException"
      end

      operation 1055643 "getSQLXML"
	public return_type class_ref 222747 // SQLXML
	nparams 1
	  param inout name "columnLabel" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code SQLXML} corresponding to the value in the named column.
@throws SQLException"
      end

      operation 1055771 "updateSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "xmlObject" type class_ref 222747 // SQLXML
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1055899 "updateSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "xmlObject" type class_ref 222747 // SQLXML
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1056027 "getNString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code String} corresponding to the value at the 1-based {@code columnIndex}.
@throws SQLException"
      end

      operation 1056155 "getNString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "columnLabel" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code String} corresponding to the value in the named column.
@throws SQLException"
      end

      operation 1056283 "getNCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 1
	  param in name "columnIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Reader} corresponding to the value at the 1-based {@code columnIndex}.
@throws SQLException"
      end

      operation 1056411 "getNCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 1
	  param inout name "columnLabel" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Reader} corresponding to the value in the named column.
@throws SQLException"
      end

      operation 1056539 "updateNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1056667 "updateNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1056795 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1056923 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1057051 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1057179 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1057307 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1057435 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1057563 "updateBlob"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1057691 "updateBlob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "inputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1057819 "updateClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1057947 "updateClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1058075 "updateNClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "columnIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1058203 "updateNClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1058331 "updateNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1058459 "updateNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1058587 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1058715 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1058843 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "x" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1058971 "updateAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1059099 "updateBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1059227 "updateCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1059355 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1059483 "updateBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "inputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1059611 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1059739 "updateClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1059867 "updateNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value at the 1-based {@code columnIndex}.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end

      operation 1059995 "updateNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "columnLabel" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value in the named column.
The underlying database isn't changed until the next row update or insert operation.
@throws SQLException"
      end
    end

    class 220315 "BatchUpdateException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown if a problem occurs during a batch update operation.
<p>
A {@code BatchUpdateException} provides additional information about the
problem that occurred, compared with a standard {@code SQLException}. It
supplies update counts for successful commands which were executed before the
exception was encountered.
<p>
The element order in the array of update counts matches the order that the
commands were added to the batch operation.
<p>
Once a batch update command fails and a {@code BatchUpdateException} is
thrown, the JDBC driver may continue processing the remaining commands in the
batch. If the driver does process more commands after the problem occurs, the
array returned by {@code BatchUpdateException.getUpdateCounts} has an element
for every command in the batch, not only those that executed successfully. In
this case, the array element for any command which encountered a problem is
set to {@code Statement.EXECUTE_FAILED}."
      classrelation 332059 // <generalisation>
	relation 332059 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 332059 // <generalisation>
	  b parent class_ref 220059 // SQLException
      end

      classrelation 332187 // <realization>
	relation 332187 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 332187 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 266011 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5977529877145521757L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 266139 "updateCounts"
	private explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 963483 "BatchUpdateException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default {@code BatchUpdateException} with the parameters
<i>reason</i>, <i>SQLState</i>, and <i>update counts</i> set to {@code
null} and the <i>vendor code</i> set to 0."
      end

      operation 963611 "BatchUpdateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an BatchUpdateException object. The reason is set to
null if cause == null otherwise to cause.toString(), and the cause
Throwable object is set to the given cause Throwable object.

@param cause the Throwable object for the underlying reason this SQLException

@since 1.6"
      end

      operation 963739 "BatchUpdateException"
	public explicit_return_type ""
	nparams 2
	  param inout name "updateCounts" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an BatchUpdateException object. The Reason string is set to the
null if cause == null otherwise to cause.toString(), and the cause
Throwable object is set to the given cause Throwable object. SQLState is
initialized to null while vendorCode is zero.

@param cause the Throwable object for the underlying reason this SQLException

@since 1.6"
      end

      operation 963867 "BatchUpdateException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "updateCounts" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an BatchUpdateException object. The cause Throwable object is set
to the given cause Throwable object. SQLState is initialized to null
while vendorCode is zero.

@param cause the Throwable object for the underlying reason this SQLException

@since 1.6"
      end

      operation 963995 "BatchUpdateException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "SQLState" type class_ref 3399692 // String
	  param inout name "updateCounts" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an BatchUpdateException object. The cause Throwable object is set
to the given cause Throwable object and the updateCounts array set to the
int array parameter. SQLState is initialized to null while vendorCode is
zero.

@param cause the Throwable object for the underlying reason this SQLException

@since 1.6"
      end

      operation 964123 "BatchUpdateException"
	public explicit_return_type ""
	nparams 5
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "SQLState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "updateCounts" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an BatchUpdateException object. The cause Throwable object is set
to the given cause Throwable object and the updateCounts array set to the
int array parameter. VendorCode is set to the given vendorCode. SQLState
is initialized to null while vendorCode is zero.

@param cause the Throwable object for the underlying reason this SQLException

@since 1.6"
      end

      operation 964251 "BatchUpdateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "updateCounts" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code BatchUpdateException} with the {@code updateCounts} set
to the supplied value. All other fields are set to their
default values.

@param updateCounts
           the array of {@code updateCounts} giving the number of
           successful updates (or another status code) for each command
           in the batch that was attempted."
      end

      operation 964379 "BatchUpdateException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "updateCounts" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code BatchUpdateException} with the {@code updateCounts} and
{@code reason} set to the supplied values. All other fields are set to their
default values.

@param reason
           the message providing information about the source of this
           exception.
@param updateCounts
           the array of {@code updateCounts} giving the number of
           successful updates (or another status code) for each command
           in the batch that was attempted."
      end

      operation 964507 "BatchUpdateException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "SQLState" type class_ref 3399692 // String
	  param inout name "updateCounts" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code BatchUpdateException} with the {@code reason}, {@code
SQLState} and {@code updateCounts} set to the supplied values. All other
fields are set to their default values.

@param reason
           the message providing information about the source of this
           exception.
@param SQLState
           the X/OPEN value to use for the {@code SQLState}
@param updateCounts
           the array of {@code updateCounts} giving the number of
           successful updates (or another status code) for each command
           in the batch that was attempted."
      end

      operation 964635 "BatchUpdateException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "SQLState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "updateCounts" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code BatchUpdateException} for the case where all relevant
information is provided.

@param reason
           the message providing information about the source of this
           exception.
@param SQLState
           the X/OPEN value to use for the {@code SQLState}.
@param vendorCode
           the value to use for the vendor error code.
@param updateCounts
           the array of {@code updateCounts} giving the number of
           successful updates (or another status code) for each command
           in the batch that was attempted."
      end

      operation 964763 "getUpdateCounts"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <i>update count</i> array giving status information for every
command that was attempted in the batch.
<p>
If a batch update command fails and a {@code BatchUpdateException} is
thrown, the JDBC driver may continue processing the remaining commands in
the batch. If the driver does so, the array returned by {@code
BatchUpdateException.getUpdateCounts} has an element for every command in
the batch, not only those that executed successfully. In this case, the
array element for any command which encountered a problem is set to
{@code Statement.EXECUTE_FAILED}.

@return an array that contains the successful update counts, before this
        exception was thrown. Alternatively, if the driver continues to
        process commands following an error, for each successive command
        there is a corresponding element in the array giving one of the
        following status values:
        <ol>
        <li>the number of successful updates</li> <li>{@code
        Statement.SUCCESS_NO_INFO} indicating that the command completed
        successfully, but the amount of altered rows is unknown.</li>
        <li>{@code Statement.EXECUTE_FAILED} indicating that the command
        was unsuccessful.</li>
        </ol>"
      end
    end

    class 220571 "Blob"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Java interface representing the SQL {@code BLOB} type.
<p>
An SQL {@code BLOB} type stores a large array of binary data (bytes) as the
value in a column of a database.
<p>
The {@code java.sql.Blob} interface provides methods for setting and
retrieving data in the {@code Blob}, for querying {@code Blob} data length,
and for searching for data within the {@code Blob}."
      operation 964891 "getBinaryStream"
	public return_type class_ref 131867 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this {@code Blob} object as a binary stream.

@return a binary {@code InputStream} giving access to the {@code Blob}
        data.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 965019 "getBinaryStream"
	public return_type class_ref 131867 // InputStream
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves {@code length} bytes from this {@code Blob}, starting at 1-based
offset {@code pos}, and returns them as a binary stream.

@return a binary {@code InputStream} giving access to the {@code Blob}
        data.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 965147 "getBytes"
	public explicit_return_type "byte"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a portion of the value of this {@code Blob} as an array of bytes.

@param pos
           the position of the first byte in the {@code Blob} to get,
           where the first byte in the {@code Blob} has position 1.
@param length
           the number of bytes to get.
@return a byte array containing the data from the {@code Blob}, starting
        at {@code pos} and is up to {@code length} bytes long.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 965275 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of bytes in this {@code Blob} object.

@return a {@code long} value with the length of the {@code Blob} in
        bytes.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 965403 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "pattern" type class_ref 220571 // Blob
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Search for the position in this {@code Blob} at which a specified pattern
begins, starting at a specified position within the {@code Blob}.

@param pattern
           a {@code Blob} containing the pattern of data to search for in
           this {@code Blob}.
@param start
           the position within this {@code Blob} to start the search,
           where the first position in the {@code Blob} is {@code 1}.
@return a {@code long} value with the position at which the pattern
        begins. Returns {@code -1} if the pattern is not found in this
        {@code Blob}.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 965531 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "pattern" explicit_type "byte"
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Search for the position in this {@code Blob} at which the specified
pattern begins, starting at a specified position within the {@code Blob}.

@param pattern
           a byte array containing the pattern of data to search for in
           this {@code Blob}.
@param start
           the position within this {@code Blob} to start the search,
           where the first position in the {@code Blob} is {@code 1}.
@return a {@code long} value with the position at which the pattern
        begins. Returns {@code -1} if the pattern is not found in this
        {@code Blob}.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 965659 "setBinaryStream"
	public return_type class_ref 132635 // OutputStream
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a stream that can be used to write binary data to this {@code Blob}.

@param pos
           the position within this {@code Blob} at which to start
           writing, where the first position in the {@code Blob} is
           {@code 1}.
@return a binary {@code InputStream} which can be used to write data into
        the {@code Blob} starting at the specified position.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 965787 "setBytes"
	public explicit_return_type "int"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param inout name "theBytes" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a specified array of bytes to this {@code Blob} object, starting
at a specified position. Returns the number of bytes written.

@param pos
           the position within this {@code Blob} at which to start
           writing, where the first position in the {@code Blob} is
           {@code 1}.
@param theBytes
           an array of bytes to write into the {@code Blob}.
@return an integer containing the number of bytes written to the {@code
        Blob}.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 965915 "setBytes"
	public explicit_return_type "int"
	nparams 4
	  param in name "pos" explicit_type "long"
	  param inout name "theBytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a portion of a specified byte array to this {@code Blob}. Returns
the number of bytes written.

@param pos
           the position within this {@code Blob} at which to start
           writing, where the first position in the {@code Blob} is
           {@code 1}.
@param theBytes
           an array of bytes to write into the {@code Blob}.
@param offset
           the offset into the byte array from which to start writing
           data - the first byte in the array has offset {@code 0}.
@param len
           the length of data to write in number of bytes.
@return an integer containing the number of bytes written to the {@code
        Blob}.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 966043 "truncate"
	public explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Truncate the value of this {@code Blob} object to a specified length in
bytes.

@param len
           the length of data in bytes after which this {@code Blob}
           is to be truncated.
@throws SQLException
            if an error occurs accessing the {@code Blob}."
      end

      operation 966171 "free"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Frees any resources held by this blob. After {@code free} is called, calling
method other than {@code free} will throw {@code SQLException} (calling {@code free}
repeatedly will do nothing).

@throws SQLException"
      end
    end

    class 220699 "CallableStatement"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface used to call <i>Stored Procedures</i>.
<p>
The JDBC API provides an SQL escape syntax allowing <i>Stored Procedures</i>
to be called in a standard way for all databases. The JDBC escape syntax has
two forms. One form includes a result parameter. The second form does not
include a result parameter. Where the result parameter is used, it must be
declared as an {@code OUT} parameter. Other parameters can be declared as
{@code IN}, {@code OUT}, or {@code INOUT}. Parameters are referenced either by
name or by a numerical index starting at 1.
<p>
The correct syntax is:
<dd>
<dl>
{ ?= call &lt;procedurename&gt; [( [parameter1,parameter2,...] )] }
</dl>
<dl>
{ call &lt;procedurename&gt; [( [parameter1,parameter2,...] )] }
</dl>
</code></dd>
{@code IN} parameters are set before calling the procedure,
using the setter methods which are inherited from {@code PreparedStatement}.
For {@code OUT} parameters, their type must be registered before executing
the stored procedure. The values are retrieved using the getter methods
defined in the {@code CallableStatement} interface.
<p>
{@code CallableStatement}s can return one or more {@code ResultSets}. In the
event that multiple {@code ResultSets} are returned, they are accessed using
the methods inherited from the {@code Statement} interface."
      classrelation 332699 // <generalisation>
	relation 332699 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 332699 // <generalisation>
	  b parent class_ref 220827 // PreparedStatement
      end

      operation 978715 "getArray"
	public return_type class_ref 219931 // Array
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code ARRAY} parameter as a
{@code java.sql.Array}.

@param parameterIndex
           the parameter index, where the first parameter has
           index 1.
@return a {@code java.sql.Array} containing the parameter value.
@throws SQLException
            if a database error occurs."
      end

      operation 978843 "getArray"
	public return_type class_ref 219931 // Array
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code ARRAY} parameter as a {@code
java.sql.Array}.

@param parameterName
           the desired parameter's name.
@return a {@code java.sql.Array} containing the parameter's value.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 978971 "getBigDecimal"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@link BigDecimal} representation of the JDBC {@code
NUMERIC} parameter specified by the input index.

@param parameterIndex
           the parameter number index where the first parameter has index
           1.
@return a {@code java.math.BigDecimal} representing the value of the
        specified parameter. The value {@code null} is returned if
        the parameter in question is an SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 979099 "getBigDecimal"
	public return_type class_ref 166171 // BigDecimal
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns a new {@link BigDecimal} representation of the JDBC {@code
NUMERIC} parameter specified by the input index. The number of digits
after the decimal point is specified by {@code scale}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param scale
           the number of digits after the decimal point to get.
@return a {@code java.math.BigDecimal} representing the value of the
        specified parameter. The value {@code null} is returned if
        the parameter in question is an SQL {@code NULL}.
@throws SQLException
            if a database error occurs.
@deprecated Use {@link #getBigDecimal(int)} or
            {@link #getBigDecimal(String)}"
      end

      operation 979227 "getBigDecimal"
	public return_type class_ref 166171 // BigDecimal
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@link BigDecimal} representation of the JDBC {@code
NUMERIC} parameter specified by the input name.

@param parameterName
           the desired parameter's name.
@return a {@code java.math.BigDecimal} representing the value of the
        specified parameter. The value {@code null} is returned if
        the parameter in question is an SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 979355 "getBlob"
	public return_type class_ref 220571 // Blob
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code BLOB} parameter as a {@code
java.sql.Blob}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return a {@code java.sql.Blob} representing the value of the
        specified parameter. The value {@code null} is returned if
        the parameter in question is an SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 979483 "getBlob"
	public return_type class_ref 220571 // Blob
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code BLOB} parameter as a {@code
java.sql.Blob}.

@param parameterName
           the desired parameter's name.
@return a {@code java.sql.Blob} representing the value of the
        specified parameter. The value {@code null} is returned if
        the parameter in question is an SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 979611 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code BIT} parameter as a boolean.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return a {@code boolean} representing the parameter value. {@code false}
           is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 979739 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code BIT} parameter as a {@code
boolean}.

@param parameterName
           the desired parameter's name.
@return a {@code boolean} representation of the value of the parameter.
        {@code false} is returned if the SQL value is {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 979867 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code TINYINT} parameter as a {@code
byte}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return a {@code byte} representation of the value of the parameter.
           {@code 0} is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 979995 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code TINYINT} parameter as a Java
{@code byte}.

@param parameterName
           the desired parameter's name.
@return a {@code byte} representation of the value of the parameter.
        {@code 0} is returned if the SQL value is {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 980123 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a byte array representation of the indexed JDBC {@code BINARY} or
{@code VARBINARY} parameter.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return an array of bytes giving the value of the parameter. {@code null}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 980251 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a byte array representation of the named JDBC {@code BINARY} or
{@code VARBINARY} parameter.

@param parameterName
           the name of the parameter.
@return an array of bytes giving the value of the parameter. {@code null}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 980379 "getClob"
	public return_type class_ref 221723 // Clob
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code CLOB} parameter as a {@code
java.sql.Clob}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return a {@code java.sql.Clob} representing the value of the
           parameter. {@code null} is returned if the value is SQL
           {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Clob"
      end

      operation 980507 "getClob"
	public return_type class_ref 221723 // Clob
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code CLOB} parameter as a {@code
java.sql.Clob}.

@param parameterName
           the name of the parameter.
@return a {@code java.sql.Clob} with the value of the parameter. {@code
        null} is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Clob"
      end

      operation 980635 "getDate"
	public return_type class_ref 221851 // Date
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code DATE} parameter as a {@code
java.sql.Date}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return the {@code java.sql.Date} representing the parameter's value.
        {@code null} is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Date"
      end

      operation 980763 "getDate"
	public return_type class_ref 221851 // Date
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code DATE} parameter as a {@code
java.sql.Date}, using the specified {@code Calendar} to construct the date.

<p>The JDBC driver uses the calendar to create the Date using a particular
timezone and locale. The default behavior of the driver is to use the VM defaults.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param cal
           the {@code Calendar} to use to construct the date
@return the {@code java.sql.Date} giving the parameter's value. {@code null}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Date"
      end

      operation 980891 "getDate"
	public return_type class_ref 221851 // Date
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code DATE} parameter as a {@code
java.sql.Date}.

@param parameterName
           the name of the desired parameter.
@return the {@code java.sql.Date} giving the parameter's value. {@code null}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Date"
      end

      operation 981019 "getDate"
	public return_type class_ref 221851 // Date
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code DATE} parameter as a {@code
java.sql.Date}, using the specified {@code Calendar} to construct the date.

<p>The JDBC driver uses the calendar to create the date using a particular
timezone and locale. The default behavior of the driver is to use the VM defaults.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param parameterName
           the name of the desired parameter.
@param cal
           used for creating the returned {@code Date}.
@return the {@code java.sql.Date} giving the parameter's value. {@code null}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Date"
      end

      operation 981147 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code DOUBLE} parameter as a
{@code double}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return the parameter's value as a {@code double}. {@code 0.0}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 981275 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code DOUBLE} parameter as a
{@code double}.

@param parameterName
           the name of the desired parameter.
@return the parameter's value as a {@code double}. {@code 0.0}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 981403 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code FLOAT} parameter as a {@code
float}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return the parameter's value as a {@code float}. {@code 0.0}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 981531 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code FLOAT} parameter as a Java
{@code float}.

@param parameterName
           the name of the desired parameter.
@return the parameter's value as a {@code float}. {@code 0.0}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 981659 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code INTEGER} parameter as an
{@code int}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return the {@code int} giving the parameter's value. {@code 0}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 981787 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code INTEGER} parameter as an
{@code int}.

@param parameterName
           the name of the desired parameter.
@return the {@code int} giving the parameter's value. {@code 0}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 981915 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code BIGINT} parameter as a
{@code long}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return the {@code long} giving the parameter's value. {@code 0}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 982043 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified JDBC {@code BIGINT} parameter as a
{@code long}.

@param parameterName
           the name of the desired parameter.
@return the {@code long} giving the parameter's value. {@code 0}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 982171 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified parameter as a Java {@code Object}.
<p>
The object type returned is the JDBC type registered for the parameter
with a {@code registerOutParameter} call. If a parameter was registered
as a {@code java.sql.Types.OTHER} then it may hold abstract types that
are particular to the connected database.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return an Object holding the value of the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 982299 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified parameter as an {@code Object}. The
{@code Map} gives the correspondence between SQL types and Java classes.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param map
           the {@code Map} giving the correspondence between SQL
           types and Java classes.
@return an Object holding the value of the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 982427 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified parameter as an {@code Object}.
<p>
The object type returned is the JDBC type that was registered for
the parameter by an earlier call to {@link #registerOutParameter}.
If a parameter was registered as a {@code java.sql.Types.OTHER}
then it may hold abstract types that are particular to the
connected database.

@param parameterName
           the parameter name.
@return the Java {@code Object} representation of the value of the
        parameter.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 982555 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified parameter as an {@code Object}. The
actual return type is determined by the {@code Map} parameter which
gives the correspondence between SQL types and Java classes.

@param parameterName
           the parameter name.
@param map
           the {@code Map} of SQL types to their Java counterparts
@return an {@code Object} holding the value of the parameter.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 982683 "getRef"
	public return_type class_ref 222107 // Ref
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified SQL {@code REF(<structured type>)}
parameter as a {@code java.sql.Ref}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return a {@code java.sql.Ref} with the parameter value. {@code null}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 982811 "getRef"
	public return_type class_ref 222107 // Ref
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified SQL {@code REF(<structured type>)}
parameter as a {@code java.sql.Ref}.

@param parameterName
           the desired parameter's name.
@return the parameter's value in the form of a {@code
        java.sql.Ref}. A {@code null} reference is returned if the
        parameter's value is SQL {@code NULL}.
@throws SQLException
            if there is a problem accessing the database.
@see Ref"
      end

      operation 982939 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code SMALLINT} parameter as a
{@code short}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return the parameter's value as a {@code short}. 0 is returned
        if the parameter's value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs."
      end

      operation 983067 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code SMALLINT} parameter as a
{@code short}.

@param parameterName
           the desired parameter's name.
@return the parameter's value as a {@code short}. 0 is returned
        if the parameter's value is SQL {@code NULL}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 983195 "getString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the indexed parameter's value as a {@code String}. The
parameter value must be one of the JDBC types {@code CHAR},
{@code VARCHAR} or {@code LONGVARCHAR}.
<p>
The {@code String} corresponding to a {@code CHAR} of fixed length
will be of identical length to the value in the database inclusive
of padding characters.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return the parameter's value as a {@code String}. {@code null}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 983323 "getString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the named parameter's value as a string. The parameter value must
be one of the JDBC types {@code CHAR}, {@code VARCHAR} or {@code
LONGVARCHAR}.
<p>
The string corresponding to a {@code CHAR} of fixed length will be of
identical length to the value in the database inclusive of padding
characters.

@param parameterName
           the desired parameter's name.
@return the parameter's value as a {@code String}. {@code null}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 983451 "getTime"
	public return_type class_ref 222235 // Time
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code TIME} parameter as a {@code
java.sql.Time}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return the parameter's value as a {@code java.sql.Time}.
        {@code null} is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Time"
      end

      operation 983579 "getTime"
	public return_type class_ref 222235 // Time
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code TIME} parameter as a {@code
java.sql.Time}, using the supplied {@code Calendar} to construct the
time. The JDBC driver uses the calendar to handle specific timezones
and locales in order to determine {@code Time}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param cal
           the calendar to use in constructing {@code Time}.
@return the parameter's value as a {@code java.sql.Time}.
        {@code null} is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Time
@see java.util.Calendar"
      end

      operation 983707 "getTime"
	public return_type class_ref 222235 // Time
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code TIME} parameter as a {@code
java.sql.Time}.

@param parameterName
           the name of the desired parameter.
@return a new {@code java.sql.Time} with the parameter's value. A {@code
        null} reference is returned for an SQL value of {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Time"
      end

      operation 983835 "getTime"
	public return_type class_ref 222235 // Time
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code TIME} parameter as a {@code
java.sql.Time}, using the supplied {@code Calendar} to construct
the time. The JDBC driver uses the calendar to handle specific
timezones and locales when creating {@code Time}.

@param parameterName
           the name of the desired parameter.
@param cal
           used for creating the returned {@code Time}
@return a new {@code java.sql.Time} with the parameter's value. A {@code
        null} reference is returned for an SQL value of {@code NULL}.
@throws SQLException
            if a database error occurs.
@see Time
@see java.util.Calendar"
      end

      operation 983963 "getTimestamp"
	public return_type class_ref 222363 // Timestamp
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the indexed parameter's {@code TIMESTAMP} value as a {@code
java.sql.Timestamp}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1
@return the parameter's value as a {@code java.sql.Timestamp}. A
        {@code null} reference is returned for an SQL value of {@code
        NULL}.
@throws SQLException
            if a database error occurs.
@see Timestamp"
      end

      operation 984091 "getTimestamp"
	public return_type class_ref 222363 // Timestamp
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the indexed parameter's {@code TIMESTAMP} value as a {@code
java.sql.Timestamp}. The JDBC driver uses the supplied {@code Calendar}
to handle specific timezones and locales when creating the result.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1
@param cal
           used for creating the returned {@code Timestamp}
@return the parameter's value as a {@code java.sql.Timestamp}. A
        {@code null} reference is returned for an SQL value of {@code
        NULL}.
@throws SQLException
            if a database error occurs.
@see Timestamp"
      end

      operation 984219 "getTimestamp"
	public return_type class_ref 222363 // Timestamp
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the named parameter's {@code TIMESTAMP} value as a {@code
java.sql.Timestamp}.

@param parameterName
           the name of the desired parameter.
@return the parameter's value as a {@code java.sql.Timestamp}. A
        {@code null} reference is returned for an SQL value of {@code
        NULL}.
@throws SQLException
            if a database error occurs.
@see Timestamp"
      end

      operation 984347 "getTimestamp"
	public return_type class_ref 222363 // Timestamp
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the indexed parameter's {@code TIMESTAMP} value as a {@code
java.sql.Timestamp}. The JDBC driver uses the supplied {@code Calendar}
to handle specific timezones and locales when creating the result.

@param parameterName
           the name of the desired parameter.
@param cal
           used for creating the returned {@code Timestamp}
@return the parameter's value as a {@code java.sql.Timestamp}. A
        {@code null} reference is returned for an SQL value of {@code
        NULL}.
@throws SQLException
            if a database error occurs.
@see Timestamp"
      end

      operation 984475 "getURL"
	public return_type class_ref 140443 // URL
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified JDBC {@code DATALINK} parameter as a
{@code java.net.URL}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@return a {@code URL} giving the parameter's value. {@code null}
        is returned if the value is SQL {@code NULL}.
@throws SQLException
            if a database error occurs.
@see java.net.URL"
      end

      operation 984603 "getURL"
	public return_type class_ref 140443 // URL
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the named parameter's JDBC {@code DATALINK} value in a new Java
{@code java.net.URL}.

@param parameterName
           the name of the desired parameter.
@return a new {@code java.net.URL} encapsulating the parameter value. A
        {@code null} reference is returned for an SQL value of {@code
        NULL}.
@throws SQLException
            if a database error occurs.
@see java.net.URL"
      end

      operation 984731 "registerOutParameter"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines the type of a specified {@code OUT} parameter. All {@code OUT}
parameters must have their type defined before a stored procedure is
executed.
<p>
The type supplied in the {@code sqlType} parameter fixes the
type that will be returned by the getter methods of
{@code CallableStatement}.
If a database specific type is expected for a parameter, the Type {@code
java.sql.Types.OTHER} should be used. Note that there is another variant
of this method for User Defined Types or a {@code REF} type.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1
@param sqlType
           the JDBC type as defined by {@code java.sql.Types}. The JDBC
           types {@code NUMERIC} and {@code DECIMAL} should be defined
           using {@link #registerOutParameter(int, int, int)}.
@throws SQLException
            if a database error occurs.
@see Types"
      end

      operation 984859 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines the Type of a specified {@code OUT} parameter. All {@code OUT}
parameters must have their type defined before a stored procedure is
executed. This version of the {@code registerOutParameter} method, which
has a scale parameter, should be used for the JDBC types {@code NUMERIC}
and {@code DECIMAL}, where there is a need to specify the number of
digits expected after the decimal point.
<p>
The type supplied in the {@code sqlType} parameter fixes the
type that will be returned by the getter methods of
{@code CallableStatement}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1
@param sqlType
           the JDBC type as defined by {@code java.sql.Types}.
@param scale
           the number of digits after the decimal point. Must be greater
           than or equal to 0.
@throws SQLException
            if a database error occurs.
@see Types"
      end

      operation 984987 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param in name "paramIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines the Type of a specified {@code OUT} parameter. This variant
of the method is designed for use with parameters that are
<i>User Defined Types</i> (UDT) or a {@code REF} type, although it
can be used for any type.

@param paramIndex
           the parameter number index, where the first parameter has
           index 1.
@param sqlType
           a JDBC type expressed as a constant from {@link Types}.
@param typeName
           an SQL type name. For a {@code REF} type, this name should be
           the fully qualified name of the referenced type.
@throws SQLException
            if a database error occurs.
@see Ref"
      end

      operation 985115 "registerOutParameter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines the Type of a specified {@code OUT} parameter. All OUT parameters
must have their Type defined before a stored procedure is executed.
<p>
The type supplied in the {@code sqlType} parameter fixes the
type that will be returned by the getter methods of
{@code CallableStatement}.
If a database-specific type is expected for a parameter, the Type {@code
java.sql.Types.OTHER} should be used. Note that there is another variant
of this method for User Defined Types or a {@code REF} type.

@param parameterName
           the parameter name.
@param sqlType
           a JDBC type expressed as a constant from {@link Types}. Types
           {@code NUMERIC} and {@code DECIMAL} should be defined using
           the variant of this method that takes a {@code scale}
           parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 985243 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "sqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines the Type of a specified {@code OUT} parameter. All {@code OUT}
parameters must have their Type defined before a stored procedure is
executed. This version of the {@code registerOutParameter} method, which
has a scale parameter, should be used for the JDBC types {@code NUMERIC}
and {@code DECIMAL}, where there is a need to specify the number of
digits expected after the decimal point.
<p>
The type supplied in the {@code sqlType} parameter fixes the
type that will be returned by the getter methods of
{@code CallableStatement}.

@param parameterName
           the parameter name.
@param sqlType
           a JDBC type expressed as a constant from {@link Types}.
@param scale
           the number of digits after the decimal point. Must be greater
           than or equal to 0.
@throws SQLException
            if a database error occurs."
      end

      operation 985371 "registerOutParameter"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines the Type of a specified {@code OUT} parameter. This variant of
the method is designed for use with parameters that are <i>User Defined
Types</i> (UDT) or a {@code REF} type, although it can be used for any
type.

@param parameterName
           the parameter name
@param sqlType
           a JDBC type expressed as a constant from {@link Types}
@param typeName
           the fully qualified name of an SQL structured type. For a
           {@code REF} type, this name should be the fully qualified name
           of the referenced type.
@throws SQLException
            if a database error occurs."
      end

      operation 985499 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the content of a supplied
{@code InputStream}, which has a specified number of bytes.
<p>
This is a good method for setting an SQL {@code LONGVARCHAR} parameter
where the length of the data is large. Data is read from the {@code
InputStream} until end-of-file is reached or the specified number of
bytes is copied.

@param parameterName
           the parameter name
@param theInputStream
           the ASCII input stream carrying the data to update the
           parameter with.
@param length
           the number of bytes in the {@code InputStream} to copy to the
           parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 985627 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theBigDecimal" type class_ref 166171 // BigDecimal
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.math.BigDecimal} value.

@param parameterName
           the name of the parameter.
@param theBigDecimal
           the {@code java.math.BigInteger} value to set.
@throws SQLException
            if a database error occurs."
      end

      operation 985755 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the content of a supplied
binary {@code InputStream}, which has a specified number of bytes.
<p>
Use this method when a large amount of data needs to be set into a
{@code LONGVARBINARY} parameter.

@param parameterName
           the name of the parameter.
@param theInputStream
           the binary {@code InputStream} carrying the data to update the
           parameter.
@param length
           the number of bytes in the {@code InputStream} to copy to the
           parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 985883 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theBoolean" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code boolean}
value.

@param parameterName
           the parameter name.
@param theBoolean
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 986011 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theByte" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code byte} value.

@param parameterName
           the parameter name.
@param theByte
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 986139 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theBytes" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied array of bytes. The
array is mapped to {@code VARBINARY} or else {@code LONGVARBINARY} in the
connected database.

@param parameterName
           the parameter name.
@param theBytes
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 986267 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the character content of a
{@code Reader} object, with the specified length of character data.

@param parameterName
           the parameter name.
@param reader
           the new value with which to update the parameter.
@param length
           a count of the characters contained in {@code reader}.
@throws SQLException
            if a database error occurs."
      end

      operation 986395 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theDate" type class_ref 221851 // Date
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.Date} value.

@param parameterName
           the parameter name.
@param theDate
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 986523 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theDate" type class_ref 221851 // Date
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.Date} value, using a supplied calendar to map the date. The
calendar allows the application to control the timezone used to compute
the SQL {@code DATE} in the database. In case that no calendar is
supplied, the driver uses the default timezone of the Java virtual
machine.

@param parameterName
           the parameter name.
@param theDate
           the new value with which to update the parameter.
@param cal
           a {@code Calendar} to use to construct the SQL {@code DATE}
           value.
@throws SQLException
            if a database error occurs.
@see java.util.Calendar
@see Date"
      end

      operation 986651 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theDouble" explicit_type "double"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code double}
value.

@param parameterName
           the parameter name.
@param theDouble
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 986779 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theFloat" explicit_type "float"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to to a supplied {@code float}
value.

@param parameterName
           the parameter name.
@param theFloat
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 986907 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theInt" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code int} value.

@param parameterName
           the parameter name.
@param theInt
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 987035 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theLong" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code long} value.

@param parameterName
           the parameter name.
@param theLong
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 987163 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to SQL {@code NULL}. Don't use
this version of {@code setNull} for <i>User Defined Types</i> (UDT) or
for {@code REF} type parameters.

@param parameterName
           the parameter name.
@param sqlType
           a JDBC type expressed as a constant from {@link Types}.
@throws SQLException
            if a database error occurs."
      end

      operation 987291 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to be SQL {@code NULL} where the
parameter type is either {@code REF} or user defined (e.g. {@code STRUCT}
, {@code JAVA_OBJECT} etc).
<p>
For reasons of portability, the caller is expected to supply both the SQL
type code and type name (which is just the parameter name if the type is
user defined, referred to as a {@code UDT}, or the name of the referenced
type in case of a {@code REF} type).

@param parameterName
           the parameter name.
@param sqlType
           a JDBC type expressed as a constant from {@link Types}.
@param typeName
           if the target parameter is a user defined type then this
           should contain the full type name. The fully qualified name of
           a {@code UDT} or {@code REF} type is ignored if the parameter
           is not a {@code UDT}.
@throws SQLException
            if a database error occurs.
@see Types"
      end

      operation 987419 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theObject" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter using a supplied object. Prior to
issuing this request to the connected database {@code theObject} is
transformed to the corresponding SQL type according to the standard Java
to SQL mapping rules.
<p>
If the object's class implements the interface {@code SQLData}, the JDBC
driver calls {@code SQLData.writeSQL} to write it to the SQL data stream.
If {@code theObject} implements any of the following interfaces then the
driver is in charge of mapping the value to the appropriate SQL type.
<ul><li>{@link Ref}</li>
<li>{@link Struct}</li>
<li>{@link Array}</li>
<li>{@link Clob}</li>
<li>{@link Blob}</li> </ul>

@param parameterName
           the parameter name
@param theObject
           the new value with which to update the parameter
@throws SQLException
            if a database error occurs.
@see SQLData"
      end

      operation 987547 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theObject" type class_ref 3401484 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter using a supplied object.
<p>
The parameter {@code theObject} is converted to the given {@code
targetSqlType} before it is sent to the database. If the object has a
custom mapping (its class implements the interface {@code SQLData}), the
JDBC driver calls the method {@code SQLData.writeSQL} to write it to the
SQL data stream. If {@code theObject} is an instance of one of the
following types
<ul>
<li>{@link Ref}</li>
<li>{@link Struct}</li>
<li>{@link Array}</li>
<li>{@link Clob}</li>
<li>{@link Blob}</li>
</ul>
then the driver is in charge of mapping the value to the appropriate
SQL type and deliver it to the database.

@param parameterName
           the parameter name.
@param theObject
           the new value with which to update the parameter.
@param targetSqlType
           a JDBC type expressed as a constant from {@link Types}.
@throws SQLException
            if a database error occurs.
@see SQLData"
      end

      operation 987675 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theObject" type class_ref 3401484 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter using a supplied object.
<p>
The object is converted to the given {@code targetSqlType} before it is
sent to the database. If the object has a custom mapping (its class
implements the interface {@code SQLData}), the JDBC driver calls the
method {@code SQLData.writeSQL} to write it to the SQL data stream. If
{@code theObject} implements any of the following interfaces
<ul>
<li>{@link Ref}</li>
<li>{@link Struct}</li>
<li>{@link Array}</li>
<li>{@link Clob}</li>
<li>{@link Blob}</li>
</ul>
then the driver is charge of mapping the value to the appropriate
SQL type.

@param parameterName
           the parameter name.
@param theObject
           the new value with which to update the parameter.
@param targetSqlType
           a JDBC type expressed as a constant from {@link Types}.
@param scale
           where applicable, the number of digits after the decimal.
           point.
@throws SQLException
            if a database error occurs.
@see SQLData"
      end

      operation 987803 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param in name "theShort" explicit_type "short"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code short}
value.

@param parameterName
           the name of the parameter.
@param theShort
           a short value to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 987931 "setString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code String}.

@param parameterName
           the name of the parameter.
@param theString
           a {@code String} value to update the parameter.
@throws SQLException
            if a database error occurs."
      end

      operation 988059 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theTime" type class_ref 222235 // Time
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the parameter named {@code parameterName} to the value
of the supplied {@code java.sql.Time}.

@param parameterName
           the parameter name.
@param theTime
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs.
@see Time"
      end

      operation 988187 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theTime" type class_ref 222235 // Time
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the parameter named {@code parameterName} to the value
of the supplied {@code java.sql.Time} using the supplied calendar.

<p>The driver uses the supplied {@code Calendar} to create the SQL
{@code TIME} value, which allows it to use a custom timezone -
otherwise the driver uses the VM defaults.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param parameterName
           the parameter name.
@param theTime
           the new value with which to update the parameter.
@param cal
           used for creating the new SQL {@code TIME} value.
@throws SQLException
            if a database error occurs.
@see Time"
      end

      operation 988315 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.Timestamp} value.

@param parameterName
           the parameter name.
@param theTimestamp
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs.
@see Timestamp"
      end

      operation 988443 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.Timestamp} value, using the supplied calendar.

<p>The driver uses the supplied calendar to create the SQL {@code TIMESTAMP}
value, which allows it to use a custom timezone - otherwise the driver
uses the VM defaults.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param parameterName
           the parameter name.
@param theTimestamp
           the new value with which to update the parameter.
@param cal
           used for creating the new SQL {@code TIME} value.
@throws SQLException
            if a database error occurs.
@see Timestamp
@see java.util.Calendar"
      end

      operation 988571 "setURL"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "theURL" type class_ref 140443 // URL
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the supplied {@code
java.net.URL}.

@param parameterName
           the parameter name.
@param theURL
           the new value with which to update the parameter.
@throws SQLException
            if a database error occurs.
@see java.net.URL"
      end

      operation 988699 "wasNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets whether the value of the last {@code OUT} parameter read was SQL
{@code NULL}.

@return true if the last parameter was SQL {@code NULL}, {@code false}
        otherwise.
@throws SQLException
            if a database error occurs."
      end

      operation 988827 "getRowId"
	public return_type class_ref 222491 // RowId
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specified {@code ROWID} parameter as a {@code
java.sql.RowId}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@throws SQLException
            if a database error occurs."
      end

      operation 988955 "getRowId"
	public return_type class_ref 222491 // RowId
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified SQL ROWID parameter as a {@code
java.sql.RowId}.
@param parameterName the parameter name
@throws SQLException if a database error occurs"
      end

      operation 989083 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "rowId" type class_ref 222491 // RowId
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the given {@code rowId}.
@throws SQLException if a database error occurs"
      end

      operation 989211 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "string" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the given {@code string}.
@throws SQLException if a database error occurs"
      end

      operation 989339 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the characters from the given {@code reader}.
@throws SQLException if a database error occurs"
      end

      operation 989467 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "nclob" type class_ref 222619 // NClob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the given {@code nclob}.
@throws SQLException if a database error occurs"
      end

      operation 989595 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the next {@code length} characters from the given {@code reader}.
@throws SQLException if a database error occurs"
      end

      operation 989723 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "inputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the next {@code length} bytes from the given {@code inputStream}.
@throws SQLException if a database error occurs"
      end

      operation 989851 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the next {@code length} characters from the given {@code reader}.
@throws SQLException if a database error occurs"
      end

      operation 989979 "getNClob"
	public return_type class_ref 222619 // NClob
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified SQL NCLOB parameter as a {@code
java.sql.NClob}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@throws SQLException
            if a database error occurs."
      end

      operation 990107 "getNClob"
	public return_type class_ref 222619 // NClob
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified SQL NCLOB parameter as a {@code
java.sql.NClob}.
@param parameterName the parameter name
@throws SQLException if a database error occurs"
      end

      operation 990235 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "sqlXml" type class_ref 222747 // SQLXML
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the given {@code sqlXml}.
@throws SQLException if a database error occurs"
      end

      operation 990363 "getSQLXML"
	public return_type class_ref 222747 // SQLXML
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified SQL XML parameter as a {@code
java.sql.SQLXML}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@throws SQLException
            if a database error occurs."
      end

      operation 990491 "getSQLXML"
	public return_type class_ref 222747 // SQLXML
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified SQL XML parameter as a {@code
java.sql.SQLXML}.
@param parameterName the parameter name
@throws SQLException if a database error occurs"
      end

      operation 990619 "getNString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter as a
{@code java.lang.String}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@throws SQLException
            if a database error occurs."
      end

      operation 990747 "getNString"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter as a {@code
java.lang.String}.
@param parameterName the parameter name
@throws SQLException if a database error occurs"
      end

      operation 990875 "getNCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter
as a {@link Reader}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@throws SQLException
            if a database error occurs."
      end

      operation 991003 "getNCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified SQL NCHAR, NVARCHAR, or LONGNVARCHAR parameter as a {@code
java.io.Reader}.
@param parameterName the parameter name
@throws SQLException if a database error occurs"
      end

      operation 991131 "getCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 1
	  param in name "parameterIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified parameter as a {@code java.io.Reader}.
@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@throws SQLException
            if a database error occurs."
      end

      operation 991259 "getCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 1
	  param inout name "parameterName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified parameter as a {@code java.io.Reader}.
@param parameterName the parameter name
@throws SQLException if a database error occurs"
      end

      operation 991387 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "blob" type class_ref 220571 // Blob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the given {@code blob}.
@throws SQLException if a database error occurs"
      end

      operation 991515 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "clob" type class_ref 221723 // Clob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the given {@code clob}.
@throws SQLException if a database error occurs"
      end

      operation 991643 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the next {@code length} bytes from the given {@code inputStream}.
@throws SQLException if a database error occurs"
      end

      operation 991771 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the bytes from the given {@code reader}.
@throws SQLException if a database error occurs"
      end

      operation 991899 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the next {@code length} bytes from the given {@code inputStream}.
@throws SQLException if a database error occurs"
      end

      operation 992027 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "x" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the bytes from the given {@code reader}.
@throws SQLException if a database error occurs"
      end

      operation 992155 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the next {@code length} characters from the given {@code reader}.
@throws SQLException if a database error occurs"
      end

      operation 992283 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the characters from the given {@code reader}.
@throws SQLException if a database error occurs"
      end

      operation 992411 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "value" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the characters from the given {@code reader}.
@throws SQLException if a database error occurs"
      end

      operation 992539 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the characters from the given {@code reader}.
@throws SQLException if a database error occurs"
      end

      operation 992667 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "inputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the bytes from the given {@code inputStream}.
@throws SQLException if a database error occurs"
      end

      operation 992795 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param inout name "parameterName" type class_ref 3399692 // String
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the named parameter to the characters from the given {@code reader}.
@throws SQLException if a database error occurs"
      end
    end

    class 220827 "PreparedStatement"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface for a precompiled SQL Statement.
<p>
An SQL Statement is put into a {@code PreparedStatement} and is precompiled
so that it can be executed efficiently multiple times.
<p>
Setter methods are supplied in the {@code PreparedStatement} interface for
the setting of {@code IN} parameters for the statement. The setter method
used for each {@code IN} parameter must match the parameter's type."
      classrelation 332571 // <generalisation>
	relation 332571 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 332571 // <generalisation>
	  b parent class_ref 220955 // Statement
      end

      operation 971675 "addBatch"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a set of parameters to the {@code PreparedStatement}'s command batch.

@throws SQLException
            if a database error happens."
      end

      operation 971803 "clearParameters"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clear the current parameter values.
<p>
Typically, parameter values are retained for multiple executions of the
{@code Statement}. Setting a parameter value replaces the previous value. This
method clears the values for all parameters, releasing all resources used
by those parameters.

@throws SQLException
            if a database error happens."
      end

      operation 971931 "execute"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the SQL statement in this {@code PreparedStatement}.
<p>
A {@code PreparedStatement} may return multiple results. The execute
method executes the {@code PreparedStatement} and returns a flag
indicating the kind of result produced by the action. The methods
{@code getResultSet} or {@code getUpdateCount} are used to retrieve
the first result, and the second and subsequent results are
retrieved with {@code getMoreResults}.

@return {@code true} if the result of the execution is a {@code
        ResultSet}, {@code false} if there is no result or if the result
        is an update count.
@throws SQLException
            if a database error happens."
      end

      operation 972059 "executeQuery"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the SQL query in the {@code PreparedStatement} and returns the
{@code ResultSet} generated by the query.

@return the {@code ResultSet} generated by the query, never {@code null}.
@throws SQLException
            if a database error happens or if the SQL statement does not
            produce a {@code ResultSet}."
      end

      operation 972187 "executeUpdate"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes the SQL command contained within the prepared statement. This
must be {@code INSERT}, {@code UPDATE}, {@code DELETE}, or a command that
returns nothing.

@return the number of affected rows for {@code INSERT}, {@code UPDATE} or {@code
        DELETE} statements, {@code 0} for statements that return nothing.
@throws SQLException
            if a database error happens or if the SQL statement returns a
            {@code ResultSet}."
      end

      operation 972315 "getMetaData"
	public return_type class_ref 221467 // ResultSetMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code ResultSetMetaData} describing the {@code
ResultSet} that would be produced by execution of the {@code PreparedStatement}.
<p>
It is possible to know the metadata for the {@code ResultSet} without
executing the {@code PreparedStatement}, because the {@code
PreparedStatement} is precompiled. As a result the metadata can be
queried ahead of time without actually executing the statement.

@return a {@code ResultSetMetaData} object with the information about the
        columns of the {@code ResultSet}, if the driver can return a
        {@code ResultSetMetaData}. {@code null} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 972443 "getParameterMetaData"
	public return_type class_ref 221595 // ParameterMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets information about the parameters of the {@code PreparedStatement}.

@return a {@code ParameterMetaData} object which holds information about
        the number, type, and properties of the parameters of this {@code
        PreparedStatement}.
@throws SQLException
            if a database error happens."
      end

      operation 972571 "setArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theArray" type class_ref 219931 // Array
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the supplied {@code Array}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theArray
           a {@code java.sql.Array} giving the new value of the parameter at {@code
           parameterIndex}.
@throws SQLException
            if a database error happens.
@see Array"
      end

      operation 972699 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the content of a supplied
{@code InputStream}, which has a specified number of bytes.
<p>
This is a good method for setting an SQL {@code LONGVARCHAR} parameter
where the length of the data is large. Data is read from the {@code
InputStream} until end-of-file is reached or the specified number of
bytes is copied.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theInputStream
           the ASCII {@code InputStream} carrying the data to which the
           parameter at {@code parameterIndex} is set.
@param length
           the number of bytes in the {@code InputStream} to copy to the
           parameter.
@throws SQLException
            if a database error happens."
      end

      operation 972827 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theBigDecimal" type class_ref 166171 // BigDecimal
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.math.BigDecimal} value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theBigDecimal
           the value to which the parameter at {@code parameterIndex} is
           set.
@throws SQLException
            if a database error happens.
@see java.math.BigDecimal"
      end

      operation 972955 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the content of a supplied
binary {@code InputStream}, which has a specified number of bytes.
<p>
Use this method when a large amount of data needs to be set into a
{@code LONGVARBINARY} parameter.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theInputStream
           the binary {@code InputStream} carrying the data to update the
           parameter.
@param length
           the number of bytes in the {@code InputStream} to copy to the
           parameter.
@throws SQLException
            if a database error happens."
      end

      operation 973083 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theBlob" type class_ref 220571 // Blob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the given {@code Blob} object.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theBlob
           the {@code java.sql.Blob} to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens.
@see Blob"
      end

      operation 973211 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theBoolean" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code boolean}
value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theBoolean
           the boolean value to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 973339 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theByte" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code byte} value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theByte
           the byte value to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 973467 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theBytes" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied array of bytes. The
array is mapped to a {@code VARBINARY} or {@code LONGVARBINARY} in the
database.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theBytes
           the array of bytes to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 973595 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the character content of a
{@code Reader} object, with the specified length of character data.
<p>
Data is read from the {@code
Reader} until end-of-file is reached or the specified number of
characters are copied.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1
@param reader
           the {@code java.io.Reader} containing the character data.
@param length
           the number of characters to be read.
@throws SQLException
            if a database error happens."
      end

      operation 973723 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theClob" type class_ref 221723 // Clob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to the given {@code Clob} object.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theClob
           a {@code java.sql.Clob} holding the data to which the
           parameter at {@code parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 973851 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theDate" type class_ref 221851 // Date
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.Date} value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theDate
           a {@code java.sql.Date} to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 973979 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theDate" type class_ref 221851 // Date
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.Date} value, using a supplied {@code Calendar} to map the Date.
The {@code Calendar} allows the application to control the timezone used
to compute the SQL {@code DATE} in the database - without the supplied
{@code Calendar}, the driver uses the VM defaults.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theDate
           a {@code java.sql.Date} to which the parameter at {@code
           parameterIndex} is set.
@param cal
           a {@code Calendar} to use to construct the SQL {@code DATE}
           value.
@throws SQLException
            if a database error happens.
@see Date
@see java.util.Calendar"
      end

      operation 974107 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theDouble" explicit_type "double"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code double}
value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theDouble
           the {@code double} value to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 974235 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theFloat" explicit_type "float"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to to a supplied {@code float}
value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theFloat
           the {@code float} value to update the parameter.
@throws SQLException
            if a database error happens."
      end

      operation 974363 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theInt" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code int} value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theInt
           the {@code int} value to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 974491 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theLong" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code long} value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theLong
           the {@code long} value to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 974619 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to SQL {@code NULL}. Don't use
this version of {@code setNull} for <i>User Defined Types</i> (UDT) or
for REF type parameters.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param sqlType
           the SQL type of the parameter, as defined in {@code
           java.sql.Types}.
@throws SQLException
            if a database error happens."
      end

      operation 974747 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param in name "paramIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param inout name "typeName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to SQL {@code NULL}. This version
of {@code setNull} should be used for <i>User Defined Types</i> (UDTs)
and also REF types. UDTs can be {@code STRUCT}, {@code DISTINCT}, {@code
JAVA_OBJECT} and named array types.
<p>
Applications must provide the SQL type code and also a fully qualified
SQL type name when supplying a {@code NULL} UDT or REF. For a UDT, the
type name is the type name of the parameter itself, but for a REF
parameter the type name is the type name of the referenced type.

@param paramIndex
           the parameter number index, where the first parameter has
           index 1.
@param sqlType
           the SQL type of the parameter, as defined in {@code
           java.sql.Types}.
@param typeName
           the fully qualified name of a UDT or REF type - ignored if the
           parameter is not a UDT.
@throws SQLException
            if a database error happens.
@see Types"
      end

      operation 974875 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theObject" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter using a supplied object.
<p>
There is a standard mapping from Java types to SQL types, defined in the
JDBC specification. The passed object is then transformed into the
appropriate SQL type, and then transferred to the database. {@code
setObject} can be used to pass abstract data types unique to the
database, by using a JDBC driver specific Java type. If the object's
class implements the interface {@code SQLData}, the JDBC driver calls
{@code SQLData.writeSQL} to write it to the SQL data stream. If the
object's class implements {@code Ref}, {@code Blob}, {@code Clob},
{@code Struct}, or {@code Array}, the driver passes it to the database as
a value of the corresponding SQL type.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theObject
           the object containing the value to which the parameter at
           {@code parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 975003 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theObject" type class_ref 3401484 // Object
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter using a supplied object.
<p>
The object is converted to the given {@code targetSqlType} before it is
sent to the database. If the object has a custom mapping (its class
implements the interface {@code SQLData}), the JDBC driver will call the method
{@code SQLData.writeSQL} to write it to the SQL data stream. If the
object's class implements {@code Ref}, {@code Blob}, {@code Clob},
{@code Struct}, or {@code Array}, the driver will pass it to the database
in the form of the relevant SQL type.

@param parameterIndex
           the parameter index, where the first parameter has index 1.
@param theObject
           the Object containing the value to which the parameter at
           {@code parameterIndex} is set.
@param targetSqlType
           the SQL type to send to the database, as defined in {@code
           java.sql.Types}.
@throws SQLException
            if a database error happens."
      end

      operation 975131 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theObject" type class_ref 3401484 // Object
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter using a supplied object.
<p>
The object is converted to the given {@code targetSqlType} before it is
sent to the database. If the object has a custom mapping (its class
implements the interface {@code SQLData}), the JDBC driver will call the method
{@code SQLData.writeSQL} to write it to the SQL data stream. If the
object's class implements {@code Ref}, {@code Blob}, {@code Clob},
{@code Struct}, or {@code Array}, the driver will pass it to the database
in the form of the relevant SQL type.

@param parameterIndex
           the parameter index, where the first parameter has index 1.
@param theObject
           the Object containing the value to which the parameter at
           {@code parameterIndex} is set.
@param targetSqlType
           the SQL type to send to the database, as defined in {@code
           java.sql.Types}.
@param scale
           the number of digits after the decimal point - only applies to
           the types {@code java.sql.Types.DECIMAL} and {@code
           java.sql.Types.NUMERIC} - ignored for all other types.
@throws SQLException
            if a database error happens."
      end

      operation 975259 "setRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theRef" type class_ref 222107 // Ref
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
REF(<structured-type>)} value. This is stored as an SQL {@code REF}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theRef
           a {@code java.sql.Ref} value to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens.
@see Ref"
      end

      operation 975387 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "theShort" explicit_type "short"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code short}
value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theShort
           a {@code short} value to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 975515 "setString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied string.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theString
           the value to which the parameter at {@code parameterIndex} is
           set.
@throws SQLException
            if a database error happens."
      end

      operation 975643 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theTime" type class_ref 222235 // Time
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.Time} value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theTime
           a {@code java.sql.Time} value to which the parameter at
           {@code parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 975771 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theTime" type class_ref 222235 // Time
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.Time} value, using a supplied {@code Calendar}.
<p>
The driver uses the supplied {@code Calendar} to create the SQL {@code
TIME} value, which allows it to use a custom timezone - otherwise the
driver uses the VM defaults.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theTime
           a {@code java.sql.Time} value to which the parameter at
           {@code parameterIndex} is set.
@param cal
           a {@code Calendar} to use to construct the SQL {@code TIME}
           value.
@throws SQLException
            if a database error happens.
@see Time
@see java.util.Calendar"
      end

      operation 975899 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied java.sql.Timestamp
value.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theTimestamp
           the java.sql.Timestamp value to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens."
      end

      operation 976027 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	  param inout name "cal" type class_ref 221979 // Calendar
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.Timestamp} value, using the supplied {@code Calendar}.
<p>
The driver uses the supplied {@code Calendar} to create the SQL {@code
TIMESTAMP} value, which allows it to use a custom timezone - otherwise
the driver uses the VM defaults.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theTimestamp
           the {@code java.sql.Timestamp} value to which the parameter at
           {@code parameterIndex} is set.
@param cal
           a {@code Calendar} to use to construct the SQL {@code
           TIMESTAMP} value
@throws SQLException
            if a database error happens.
@see Timestamp
@see java.util.Calendar"
      end

      operation 976155 "setUnicodeStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theInputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the value of a specified parameter to the characters from a supplied
{@code InputStream}, with a specified number of bytes.

@deprecated Use {@link #setCharacterStream(int, Reader, int)}
@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theInputStream
           the {@code InputStream} with the character data to which the
           parameter at {@code parameterIndex} is set.
@param length
           the number of bytes to read from the {@code InputStream}.
@throws SQLException
            if a database error happens."
      end

      operation 976283 "setURL"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theURL" type class_ref 140443 // URL
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.net.URL}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theURL
           the {@code URL} to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException
            if a database error happens.
@see URL"
      end

      operation 976411 "setRowId"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theRowId" type class_ref 222491 // RowId
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied {@code
java.sql.RowId}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theRowId
           the {@code RowId} to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException if a database error happens."
      end

      operation 976539 "setNString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "theString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specified parameter to a supplied string.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param theString
           the {@code String} to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException if a database error happens."
      end

      operation 976667 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the next {@code length} characters
from {@code reader}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param reader the {@code Reader}
@param length character count
@throws SQLException if a database error happens."
      end

      operation 976795 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "value" type class_ref 222619 // NClob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to {@code value}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param value
           the {@code NClob} to which the parameter at {@code
           parameterIndex} is set.
@throws SQLException if a database error happens."
      end

      operation 976923 "setClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the next {@code length} characters
from {@code reader}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param reader the {@code Reader}
@param length character count
@throws SQLException if a database error happens."
      end

      operation 977051 "setBlob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the next {@code length} bytes
from {@code inputStream}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param inputStream the {@code InputStream}
@param length character count
@throws SQLException if a database error happens."
      end

      operation 977179 "setNClob"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the next {@code length} characters
from {@code reader}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param reader the {@code Reader}
@param length character count
@throws SQLException if a database error happens."
      end

      operation 977307 "setSQLXML"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "xmlObject" type class_ref 222747 // SQLXML
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the value of {@code xmlObject}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param xmlObject the {@code SQLXML}
@throws SQLException if a database error happens."
      end

      operation 977435 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the next {@code length} bytes
from {@code inputStream}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param inputStream the {@code InputStream}
@param length character count
@throws SQLException if a database error happens."
      end

      operation 977563 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 131867 // InputStream
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the next {@code length} bytes
from {@code inputStream}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param inputStream the {@code InputStream}
@param length character count
@throws SQLException if a database error happens."
      end

      operation 977691 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the next {@code length} characters
from {@code reader}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param reader the {@code Reader}
@param length character count
@throws SQLException if a database error happens."
      end

      operation 977819 "setAsciiStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the bytes
from {@code inputStream}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param inputStream the {@code InputStream}
@throws SQLException if a database error happens."
      end

      operation 977947 "setBinaryStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the bytes
from {@code inputStream}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param inputStream the {@code InputStream}
@throws SQLException if a database error happens."
      end

      operation 978075 "setCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the characters
from {@code reader}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param reader the {@code Reader}
@throws SQLException if a database error happens."
      end

      operation 978203 "setNCharacterStream"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the characters
from {@code reader}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param reader the {@code Reader}
@throws SQLException if a database error happens."
      end

      operation 978331 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the characters
from {@code reader}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param reader the {@code Reader}
@throws SQLException if a database error happens."
      end

      operation 978459 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "inputStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the bytes
from {@code inputStream}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param inputStream the {@code InputStream}
@throws SQLException if a database error happens."
      end

      operation 978587 "setNClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the specified parameter to the characters
from {@code reader}.

@param parameterIndex
           the parameter number index, where the first parameter has
           index 1.
@param reader the {@code Reader}
@throws SQLException if a database error happens."
      end
    end

    class 220955 "Statement"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface used for executing static SQL statements to retrieve query results.
The resulting table rows are returned as {@code ResultSet}s. For any given
{@code Statement} object, only one {@code ResultSet} can be opened at one
time. A call to any of the execution methods of {@code Statement} will cause
any previously created {@code ResultSet} object for that {@code Statement} to
be closed implicitly.
<p>
To have multiple {@code ResultSet} objects opened concurrently, multiple
{@code Statement} objects must be created and then executed.
<p>
To obtain such an executable statement one needs to invoke {@code
Connection#createStatement}.

@see ResultSet
@see Connection#createStatement"
      classrelation 332315 // <generalisation>
	relation 332315 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 332315 // <generalisation>
	  b parent class_ref 221083 // Wrapper
      end

      classrelation 332443 // <generalisation>
	relation 332443 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 332443 // <generalisation>
	  b parent class_ref 132123 // AutoCloseable
      end

      attribute 266267 "CLOSE_ALL_RESULTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Passing this constant to {@link #getMoreResults} implies that all {@code
ResultSet} objects previously kept open should be closed.
"
      end

      attribute 266395 "CLOSE_CURRENT_RESULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Passing this constant to {@link #getMoreResults} implies that the current
{@code ResultSet} object should be closed.
"
      end

      attribute 266523 "EXECUTE_FAILED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that an error was encountered during execution of a batch
statement.
"
      end

      attribute 266651 "KEEP_CURRENT_RESULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Passing this constant to <i>getMoreResults</i> implies that the current
{@code ResultSet} object should not be closed.
"
      end

      attribute 266779 "NO_GENERATED_KEYS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that generated keys should not be accessible for retrieval.
"
      end

      attribute 266907 "RETURN_GENERATED_KEYS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that generated keys should be accessible for retrieval.
"
      end

      attribute 267035 "SUCCESS_NO_INFO"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a batch statement was executed with a successful result,
but a count of the number of rows it affected is unavailable.
"
      end

      operation 966555 "addBatch"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sql" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a specified SQL command to the list of commands for this {@code
Statement}.
<p>
The list of commands is executed by invoking the {@code executeBatch}
method.

@param sql
           the SQL command as a String. Typically an {@code INSERT} or
           {@code UPDATE} statement.
@throws SQLException
            if an error occurs accessing the database or the database
            does not support batch updates."
      end

      operation 966683 "cancel"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels this statement's execution if both the database and the JDBC
driver support aborting an SQL statement in flight. This method can be
used by one thread to stop a statement that is executed on another
thread.

@throws SQLException
            if an error occurs accessing the database."
      end

      operation 966811 "clearBatch"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the current list of SQL commands for this statement.

@throws SQLException
            if an error occurs accessing the database or the database
            does not support batch updates."
      end

      operation 966939 "clearWarnings"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears all {@code SQLWarnings} from this statement.

@throws SQLException
            if an error occurs accessing the database."
      end

      operation 967067 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this statement's database and JDBC driver resources.
<p>
Using this method to release these resources as soon as possible is
strongly recommended.
<p>
One should not rely on the resources being automatically released when
finalized during garbage collection. Doing so can result in unpredictable
behavior for the application.

@throws SQLException
            if an error occurs accessing the database."
      end

      operation 967195 "execute"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "sql" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a supplied SQL statement. This may return multiple {@code
ResultSet}s.
<p>
Use the {@code getResultSet} or {@code getUpdateCount} methods to get the
first result and {@code getMoreResults} to get any subsequent results.

@param sql
           the SQL statement to execute
@return {@code true} if the first result is a {@code ResultSet}, {@code
        false} if the first result is an update count or if there is no
        result.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 967323 "execute"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "sql" type class_ref 3399692 // String
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a supplied SQL statement. This may return multiple {@code
ResultSet}s. This method allows control of whether auto-generated Keys
should be made available for retrieval, if the SQL statement is an
{@code INSERT} statement.
<p>
Use the {@code getResultSet} or {@code getUpdateCount} methods to get the
first result and {@code getMoreResults} to get any subsequent results.

@param sql
           the SQL statement to execute.
@param autoGeneratedKeys
           a flag indicating whether to make auto generated keys
           available for retrieval. This parameter must be one of {@code
           Statement.NO_GENERATED_KEYS} or {@code
           Statement.RETURN_GENERATED_KEYS}.
@return {@code true} if results exists and the first result is a {@code
        ResultSet}, {@code false} if the first result is an update count
        or if there is no result.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 967451 "execute"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "sql" type class_ref 3399692 // String
	  param inout name "columnIndexes" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the supplied SQL statement. This may return multiple {@code
ResultSet}s. This method allows retrieval of auto generated keys
specified by the supplied array of column indexes, if the SQL statement
is an {@code INSERT} statement.
<p>
Use the {@code getResultSet} or {@code getUpdateCount} methods to get the
first result and {@code getMoreResults} to get any subsequent results.

@param sql
           the SQL statement to execute.
@param columnIndexes
           an array of indexes of the columns in the inserted row which
           should be made available for retrieval via the {@code
           getGeneratedKeys} method.
@return {@code true} if the first result is a {@code ResultSet}, {@code
        false} if the first result is an update count or if there is no
        result.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 967579 "execute"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "sql" type class_ref 3399692 // String
	  param inout name "columnNames" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the supplied SQL statement. This may return multiple {@code
ResultSet}s. This method allows retrieval of auto generated keys
specified by the supplied array of column indexes, if the SQL statement
is an {@code INSERT} statement.
<p>
Use the {@code getResultSet} or {@code getUpdateCount} methods to get the
first result and {@code getMoreResults} to get any subsequent results.

@param sql
           the SQL statement to execute.
@param columnNames
           an array of column names in the inserted row which should be
           made available for retrieval via the {@code getGeneratedKeys}
           method.
@return {@code true} if the first result is a {@code ResultSet}, {@code
        false} if the first result is an update count or if there is no
        result
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 967707 "executeBatch"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a batch of SQL commands to the database. Returns an array of
update counts, if all the commands execute successfully.
<p>
If one of the commands in the batch fails, this method can throw a
{@link BatchUpdateException} and the JDBC driver may or may not process
the remaining commands. The JDBC driver must behave consistently with the
underlying database, following the \"all or nothing\" principle. If the
driver continues processing, the array of results returned contains the
same number of elements as there are commands in the batch, with a
minimum of one of the elements having the {@code EXECUTE_FAILED} value.

@return an array of update counts, with one entry for each command in the
        batch. The elements are ordered according to the order in which
        the commands were added to the batch.
        <p>
        <ol>
        <li>If the value of an element is &ge; 0, the corresponding
        command completed successfully and the value is the <i>update
        count</i> (the number of rows in the database affected by the
        command) for that command.</li>
        <li>If the value is {@code SUCCESS_NO_INFO}, the command
        completed successfully but the number of rows affected is
        unknown.
        <li>
        <li>If the value is {@code EXECUTE_FAILED}, the command failed.
        </ol>
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 967835 "executeQuery"
	public return_type class_ref 220187 // ResultSet
	nparams 1
	  param inout name "sql" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes a supplied SQL statement. Returns a single {@code ResultSet}.

@param sql
           an SQL statement to execute. Typically a {@code SELECT}
           statement
@return a {@code ResultSet} containing the data produced by the SQL
        statement. Never null.
@throws SQLException
            if an error occurs accessing the database or if the statement
            produces anything other than a single {@code ResultSet}."
      end

      operation 967963 "executeUpdate"
	public explicit_return_type "int"
	nparams 1
	  param inout name "sql" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the supplied SQL statement. The statement may be an {@code
INSERT}, {@code UPDATE} or {@code DELETE} statement or a statement which
returns nothing.

@param sql
           an SQL statement to execute - an SQL {@code INSERT}, {@code
           UPDATE}, {@code DELETE} or a statement which returns nothing
@return the count of updated rows, or 0 for a statement that returns
        nothing.
@throws SQLException
            if an error occurs accessing the database or if the statement
            produces a {@code ResultSet}."
      end

      operation 968091 "executeUpdate"
	public explicit_return_type "int"
	nparams 2
	  param inout name "sql" type class_ref 3399692 // String
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the supplied SQL statement. This method allows control of
whether auto-generated Keys should be made available for retrieval.

@param sql
           an SQL statement to execute - an SQL {@code INSERT}, {@code
           UPDATE}, {@code DELETE} or a statement which does not return
           anything.
@param autoGeneratedKeys
           a flag that indicates whether to allow retrieval of auto
           generated keys. Parameter must be one of {@code
           Statement.RETURN_GENERATED_KEYS} or {@code
           Statement.NO_GENERATED_KEYS}
@return the number of updated rows, or 0 if the statement returns
        nothing.
@throws SQLException
            if an error occurs accessing the database or if the statement
            produces a {@code ResultSet}."
      end

      operation 968219 "executeUpdate"
	public explicit_return_type "int"
	nparams 2
	  param inout name "sql" type class_ref 3399692 // String
	  param inout name "columnIndexes" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the supplied SQL statement. This method allows retrieval of auto
generated keys specified by the supplied array of column indexes.

@param sql
           an SQL statement to execute - an SQL {@code INSERT}, {@code
           UPDATE}, {@code DELETE} or a statement which returns nothing
@param columnIndexes
           an array of indexes of the columns in the inserted row which
           should be made available for retrieval via the {@code
           getGeneratedKeys} method.
@return the count of updated rows, or 0 for a statement that returns
        nothing.
@throws SQLException
            if an error occurs accessing the database or if the statement
            produces a {@code ResultSet}."
      end

      operation 968347 "executeUpdate"
	public explicit_return_type "int"
	nparams 2
	  param inout name "sql" type class_ref 3399692 // String
	  param inout name "columnNames" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the supplied SQL statement. This method allows retrieval of auto
generated keys specified by the supplied array of column names.

@param sql
           an SQL statement to execute - an SQL {@code INSERT}, {@code
           UPDATE}, {@code DELETE} or a statement which returns nothing
@param columnNames
           an array of column names in the inserted row which should be
           made available for retrieval via the {@code getGeneratedKeys}
           method.
@return the count of updated rows, or 0 for a statement that returns
        nothing.
@throws SQLException
            if an error occurs accessing the database or if the statement
            produces a {@code ResultSet}."
      end

      operation 968475 "getConnection"
	public return_type class_ref 221211 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code Connection} object which created this statement.

@return the {@code Connection} through which this statement is
        transmitted to the database.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 968603 "getFetchDirection"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the default direction for fetching rows for {@code ResultSet}s
generated from this statement.

@return the default fetch direction, one of:
        <ul>
        <li>ResultSet.FETCH_FORWARD</li> <li>ResultSet.FETCH_REVERSE</li>
        <li>ResultSet.FETCH_UNKNOWN</li>
        </ul>
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 968731 "getFetchSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the default number of rows for a fetch for the {@code ResultSet}
objects returned from this statement.

@return the default fetch size for {@code ResultSet}s produced by this
        statement.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 968859 "getGeneratedKeys"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns auto generated keys created by executing this statement.

@return a {@code ResultSet} containing the auto generated keys - empty if
        no keys are generated by this statement.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 968987 "getMaxFieldSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum number of bytes which can be returned as values from
character and binary type columns in a {@code ResultSet} derived from this
statement. This limit applies to {@code BINARY}, {@code VARBINARY},
{@code LONGVARBINARY}, {@code CHAR}, {@code VARCHAR}, and {@code
LONGVARCHAR} types. Any data exceeding the maximum size is abandoned
without announcement.

@return the current size limit, where {@code 0} means that there is no
        limit.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 969115 "getMaxRows"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum number of rows that a {@code ResultSet} can contain when
produced from this statement. If the limit is exceeded, the excess rows
are discarded silently.

@return the current row limit, where {@code 0} means that there is no
        limit.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 969243 "getMoreResults"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves to this statement's next result. Returns {@code true} if it is a
{@code ResultSet}. Any current {@code ResultSet} objects previously
obtained with {@code getResultSet()} are closed implicitly.

@return {@code true} if the next result is a {@code ResultSet}, {@code
        false} if the next result is not a {@code ResultSet} or if there
        are no more results. Note that if there is no more data, this
        method will return {@code false} and {@code getUpdateCount} will
        return -1.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 969371 "getMoreResults"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "current" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves to this statement's next result. Returns {@code true} if the next
result is a {@code ResultSet}. Any current {@code ResultSet} objects
previously obtained with {@code getResultSet()} are handled as indicated
by a supplied Flag parameter.

@param current
           a flag indicating what to do with existing {@code ResultSet}s.
           This parameter must be one of {@code
           Statement.CLOSE_ALL_RESULTS}, {@code
           Statement.CLOSE_CURRENT_RESULT} or {@code
           Statement.KEEP_CURRENT_RESULT}.
@return {@code true} if the next result exists and is a {@code ResultSet}
        , {@code false} if the next result is not a {@code ResultSet} or
        if there are no more results. Note that if there is no more data,
        this method will return {@code false} and {@code getUpdateCount}
        will return -1.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 969499 "getQueryTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the timeout value for the statement's execution time. The JDBC
driver will wait up to this value for the execution to complete - after
the limit is exceeded an SQL {@code Exception} is thrown.

@return the current query timeout value, where {@code 0} indicates that
        there is no current timeout.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 969627 "getResultSet"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current result. Should only be called once per result.

@return the {@code ResultSet} for the current result. {@code null} if the
        result is an update count or if there are no more results.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 969755 "getResultSetConcurrency"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the concurrency setting for {@code ResultSet} objects generated by
this statement.

@return {@code ResultSet.CONCUR_READ_ONLY} or {@code
        ResultSet.CONCUR_UPDATABLE}.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 969883 "getResultSetHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the cursor hold setting for {@code ResultSet} objects generated by
this statement.

@return {@code ResultSet.HOLD_CURSORS_OVER_COMMIT} or {@code
        ResultSet.CLOSE_CURSORS_AT_COMMIT}
@throws SQLException
            if there is an error while accessing the database."
      end

      operation 970011 "getResultSetType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code ResultSet} type setting for {@code ResultSet}s derived
from this statement.

@return {@code ResultSet.TYPE_FORWARD_ONLY} for a {@code ResultSet} where
        the cursor can only move forwards, {@code
        ResultSet.TYPE_SCROLL_INSENSITIVE} for a {@code ResultSet} which
        is scrollable but is not sensitive to changes made by others,
        {@code ResultSet.TYPE_SCROLL_SENSITIVE} for a {@code ResultSet}
        which is scrollable but is sensitive to changes made by others.
@throws SQLException
            if there is an error accessing the database."
      end

      operation 970139 "getUpdateCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an update count for the current result if it is not a {@code
ResultSet}.

@return the current result as an update count. {@code -1} if the current
        result is a {@code ResultSet} or if there are no more results.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 970267 "getWarnings"
	public return_type class_ref 221339 // SQLWarning
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the first {@code SQLWarning} reported by calls on this
statement. If there are multiple warnings, subsequent warnings are
chained to the first one. The chain of warnings is cleared each time the
statement is executed.
<p>
Warnings associated with reads from the {@code ResultSet} returned from
executing the statement will be attached to the {@code ResultSet}, not the
statement object.

@return an SQLWarning, null if there are no warnings
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 970395 "setCursorName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the SQL cursor name. This name is used by subsequent statement
execute methods.
<p>
Cursor names must be unique within one Connection.
<p>
With the cursor name set, it can then be used in SQL positioned
update or delete statements to determine the current row in a {@code
ResultSet} generated from this statement. The positioned update or delete
must be done with a different statement than this one.

@param name
           the Cursor name as a string,
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 970523 "setEscapeProcessing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets Escape Processing mode.
<p>
If Escape Processing is on, the JDBC driver will do escape substitution
on an SQL statement before sending it for execution. This does not apply
to {@link PreparedStatement}s since they are processed when created,
before this method can be called.

@param enable
           {@code true} to set escape processing mode <i>on</i>, {@code
           false} to turn it <i>off</i>.
@throws SQLException
            if an error occurs accessing the database."
      end

      operation 970651 "setFetchDirection"
	public explicit_return_type "void"
	nparams 1
	  param in name "direction" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the fetch direction - a hint to the JDBC driver about the direction
of processing of rows in {@code ResultSet}s created by this statement.
The default fetch direction is {@code FETCH_FORWARD}.

@param direction
           which fetch direction to use. This parameter should be one of
           <ul>
           <li>{@code ResultSet.FETCH_UNKNOWN}</li>
           <li>{@code ResultSet.FETCH_FORWARD}</li>
           <li>{@code ResultSet.FETCH_REVERSE}</li>
           </ul>
@throws SQLException
            if there is an error while accessing the database or if the
            fetch direction is unrecognized."
      end

      operation 970779 "setFetchSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "rows" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the fetch size. This is a hint to the JDBC driver about how many
rows should be fetched from the database when more are required by
application processing.

@param rows
           the number of rows that should be fetched. {@code 0} tells the driver
           to ignore the hint. Should be less than {@code getMaxRows} for
           this statement. Should not be negative.
@throws SQLException
            if an error occurs accessing the database, or if the rows
            parameter is out of range."
      end

      operation 970907 "setMaxFieldSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of bytes for {@code ResultSet} columns that
contain character or binary values. This applies to {@code BINARY},
{@code VARBINARY}, {@code LONGVARBINARY}, {@code CHAR}, {@code VARCHAR},
and {@code LONGVARCHAR} fields. Any data exceeding the maximum size is
abandoned without announcement.

@param max
           the maximum field size in bytes. {@code 0} means \"no limit\".
@throws SQLException
            if an error occurs accessing the database or the {@code max}
            value is &lt; {@code 0}."
      end

      operation 971035 "setMaxRows"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of rows that any {@code ResultSet} can contain.
If the number of rows exceeds this value, the additional rows are
silently discarded.

@param max
           the maximum number of rows. {@code 0} means \"no limit\".
@throws SQLException
            if an error occurs accessing the database or if max < {@code
            0}."
      end

      operation 971163 "setQueryTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the timeout, in seconds, for queries - how long the driver will
allow for completion of a statement execution. If the timeout is
exceeded, the query will throw an {@code SQLException}.

@param seconds
           timeout in seconds. 0 means no timeout (\"wait forever\")
@throws SQLException
            if an error occurs accessing the database or if seconds <
            {@code 0}."
      end

      operation 971291 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this statement has been closed, false otherwise."
      end

      operation 971419 "setPoolable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "poolable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Hints whether this statement should be pooled. Defaults to false for {@code Statement},
but true for {@code CallableStatement} and {@code PreparedStatement}. Pool manager
implementations may or may not honor this hint."
      end

      operation 971547 "isPoolable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this statement is poolable, false otherwise."
      end
    end

    class 221083 "Wrapper"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is an actual usage of the wrapper pattern for JDBC classes.
Developers can get the delegate instance when the instance may be a proxy
class.

@since 1.6"
      operation 966299 "unwrap"
	public explicit_return_type "T"
	nparams 1
	  param inout name "iface" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that implements the given interface. If the caller is
not a wrapper, a SQLException will be thrown.

@param iface -
           the class that defines the interface
@return - an object that implements the interface
@throws SQLException -
            if there is no object implementing the specific interface"
      end

      operation 966427 "isWrapperFor"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "iface" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the caller is a wrapper of the class or implements the given
interface, the methods return false and vice versa.

@param iface -
           the class that defines the interface
@return - true if the instance implements the interface
@throws SQLException -
            when an error occurs when judges the object"
      end
    end

    class 221211 "Connection"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A connection represents a link from a Java application to a database. All SQL
statements and results are returned within the context of a connection.
Database statements that are executed within this context form a
database session which forms one or more closed transactions. Especially in
distributed applications, multiple concurrent connections may exist accessing
the same values of the database. which may lead to the following phenomena
(referred to as <i>transaction isolation levels</i>):
<ul>
<li><i>dirty reads</i>:<br>
reading values from table rows that are not committed.</br></li>
<li><i>non-repeatable reads</i>:<br>
reading table rows more than once in a transaction but getting back different
data because other transactions have altered the rows between the reads.</br></li>
<li><i>phantom reads</i>:<br>
retrieving additional \"phantom\" rows in the course of repeated table reads
because other transactions have inserted additional rows that satisfy an
SQL {@code WHERE} clause</br></li>
</ul>"
      classrelation 332827 // <generalisation>
	relation 332827 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 332827 // <generalisation>
	  b parent class_ref 221083 // Wrapper
      end

      classrelation 332955 // <generalisation>
	relation 332955 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 332955 // <generalisation>
	  b parent class_ref 132123 // AutoCloseable
      end

      attribute 267675 "TRANSACTION_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that transactions are not supported.
"
      end

      attribute 267803 "TRANSACTION_READ_COMMITTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "No <i>dirty reads</i> are permitted, therefore transactions may not read
a row containing uncommitted values - but does not prevent an application
from <i>non-repeatable reads</i> and <i>phantom reads</i>.
"
      end

      attribute 267931 "TRANSACTION_READ_UNCOMMITTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "In the case that reading uncommitted values is allowed, the following
incidents may happen which may lead to an invalid results:
<ul>
<li><i>dirty reads</i></li>
<li><i>non-repeatable reads</i></li>
<li><i>phantom reads</i></li>
</ul>
"
      end

      attribute 268059 "TRANSACTION_REPEATABLE_READ"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant indicating that <i>dirty reads</i> and <i>non-repeatable
reads</i> are <b>prevented</b> but <i>phantom reads</i> can occur.
"
      end

      attribute 268187 "TRANSACTION_SERIALIZABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant that indicates that the following incidents are <b>all
prevented</b> (the opposite of {@link #TRANSACTION_READ_UNCOMMITTED}):
<ul>
<li><i>dirty reads</i></li>
<li><i>non-repeatable reads</i></li>
<li><i>phantom reads</i></li>
</ul>
"
      end

      operation 994587 "clearWarnings"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Discards all warnings that may have arisen for this connection.
Subsequent calls to {@link #getWarnings()} will return {@code null}
up until a new warning condition occurs.

@throws SQLException
            if there is a problem accessing the database."
      end

      operation 994715 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the instant release of all database and driver connection
resources associated with this object. Any subsequent invocations of this
method have no effect.
<p>
It is strongly recommended that all connections are closed before they
are dereferenced by the application ready for garbage collection.
Although the {@code finalize} method of the connection closes the
connection before garbage collection takes place, it is not advisable to
leave the {@code close} operation to take place in this way. Mainly
because undesired side-effects may appear.

@throws SQLException
            if there is a problem accessing the database."
      end

      operation 994843 "commit"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commits all of the changes made since the last {@code commit} or
{@code rollback} of the associated transaction. All locks in the database
held by this connection are also relinquished. Calling this operation on
connection objects in {@code auto-commit} mode leads to an error.

@throws SQLException
            if there is a problem accessing the database or if the target
            connection instance is in auto-commit mode."
      end

      operation 994971 "createStatement"
	public return_type class_ref 220955 // Statement
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code Statement} for issuing SQL commands to
the remote database.
<p>
{@code ResultSets} generated by the returned statement will default to
type {@code ResultSet.TYPE_FORWARD_ONLY} and concurrency level {@code
ResultSet.CONCUR_READ_ONLY}.

@return a {@code Statement} object with default settings.
@throws SQLException
            if there is a problem accessing the database.
@see ResultSet"
      end

      operation 995099 "createStatement"
	public return_type class_ref 220955 // Statement
	nparams 2
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code Statement} whose associated {@code
ResultSet}s have the characteristics specified in the type and
concurrency arguments.

@param resultSetType
           one of the following type specifiers:
           <ul>
           <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE} </li> <li>
           {@link ResultSet#TYPE_SCROLL_INSENSITIVE} </li> <li>
           {@link ResultSet#TYPE_FORWARD_ONLY}</li>
           </ul>
@param resultSetConcurrency
           one of the following concurrency mode specifiers:
           <ul>
           <li>{@link ResultSet#CONCUR_UPDATABLE}</li> <li>
           {@link ResultSet#CONCUR_READ_ONLY}</li>
           </ul>
@return a new instance of {@code Statement} capable of manufacturing
        {@code ResultSet}s that satisfy the specified {@code
        resultSetType} and {@code resultSetConcurrency} values.
@throws SQLException
            if there is a problem accessing the database"
      end

      operation 995227 "createStatement"
	public return_type class_ref 220955 // Statement
	nparams 3
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	  param in name "resultSetHoldability" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code Statement} whose associated
{@code ResultSet}s will have the characteristics specified in the
type, concurrency and holdability arguments.

@param resultSetType
           one of the following type specifiers:
           <ul>
           <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
           <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
           <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
           </ul>
@param resultSetConcurrency
           one of the following concurrency mode specifiers:
           <ul>
           <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
           <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
           </ul>
@param resultSetHoldability
           one of the following holdability mode specifiers:
           <ul>
           <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li>
           <li>{@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
           </ul>
@return a new instance of {@code Statement} capable of
        manufacturing {@code ResultSet}s that satisfy the
        specified {@code resultSetType},
        {@code resultSetConcurrency} and
        {@code resultSetHoldability} values.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 995355 "getAutoCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code boolean} indicating whether or not this connection is in
the {@code auto-commit} operating mode.

@return {@code true} if {@code auto-commit} is on, otherwise {@code
        false}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 995483 "getCatalog"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets this {@code Connection} object's current catalog name.

@return the catalog name. {@code null} if there is no catalog
        name.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 995611 "getHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the holdability property that any {@code ResultSet} produced by
this instance will have.

@return one of the following holdability mode specifiers:
        <ul>
        <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li> <li>
        {@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
        </ul>
@throws SQLException
            if there is a problem accessing the a database."
      end

      operation 995739 "getMetaData"
	public return_type class_ref 223003 // DatabaseMetaData
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the metadata about the database referenced by this connection. The
returned {@code DatabaseMetaData} describes the database topography,
available stored procedures, SQL syntax and so on.

@return a {@code DatabaseMetaData} object containing the database
        description.
@throws SQLException
            if there is a problem accessing the a database."
      end

      operation 995867 "getTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the transaction isolation level for this connection.

@return the transaction isolation value.
@throws SQLException
            if there is a problem accessing the database.
@see #TRANSACTION_NONE
@see #TRANSACTION_READ_COMMITTED
@see #TRANSACTION_READ_UNCOMMITTED
@see #TRANSACTION_REPEATABLE_READ
@see #TRANSACTION_SERIALIZABLE"
      end

      operation 995995 "getTypeMap"
	public return_type class_ref 129819 // Map
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, Class<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type mapping associated with this {@code Connection} object.
The type mapping must be set on the application level.

@return the Type Map as a {@code java.util.Map}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 996123 "getWarnings"
	public return_type class_ref 221339 // SQLWarning
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the first instance of any {@code SQLWarning} objects that may have
been created in the use of this connection. If at least one warning has
occurred then this operation returns the first one reported. A {@code
null} indicates that no warnings have occurred.
<p>
By invoking the {@link SQLWarning#getNextWarning()} method of the
returned {@code SQLWarning} object it is possible to obtain all of
this connection's warning objects.

@return the first warning as an SQLWarning object (may be {@code null}).
@throws SQLException
            if there is a problem accessing the database or if the call
            has been made on a connection which has been previously
            closed."
      end

      operation 996251 "isClosed"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code boolean} indicating whether or not this connection is in
the {@code closed} state. The {@code closed} state may be entered into as
a consequence of a successful invocation of the {@link #close()} method
or else if an error has occurred that prevents the connection from
functioning normally.

@return {@code true} if closed, otherwise {@code false}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 996379 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code boolean} indicating whether or not this connection is
currently in the {@code read-only} state.

@return {@code true} if in read-only state, otherwise {@code false}.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 996507 "nativeSQL"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "sql" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the input SQL statement
{@code sql} expressed in the underlying system's native SQL
syntax.

@param sql
           the JDBC form of an SQL statement.
@return the SQL statement in native database format.
@throws SQLException
            if there is a problem accessing the database"
      end

      operation 996635 "prepareCall"
	public return_type class_ref 220699 // CallableStatement
	nparams 1
	  param inout name "sql" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code CallableStatement} that may be used for
making stored procedure calls to the database.

@param sql
           the SQL statement that calls the stored function
@return a new instance of {@code CallableStatement} representing the SQL
        statement. {@code ResultSet}s emitted from this {@code
        CallableStatement} will default to type
        {@link ResultSet#TYPE_FORWARD_ONLY} and concurrency
        {@link ResultSet#CONCUR_READ_ONLY}.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 996763 "prepareCall"
	public return_type class_ref 220699 // CallableStatement
	nparams 3
	  param inout name "sql" type class_ref 3399692 // String
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code CallableStatement} that may be used for
making stored procedure calls to the database. {@code ResultSet}s emitted
from this {@code CallableStatement} will satisfy the specified {@code
resultSetType} and {@code resultSetConcurrency} values.

@param sql
           the SQL statement
@param resultSetType
           one of the following type specifiers:
           <ul>
           <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
           <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
           <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
           </ul>
@param resultSetConcurrency
           one of the following concurrency mode specifiers:
           <ul>
           <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
           <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
           </ul>
@return a new instance of {@code CallableStatement} representing the
        precompiled SQL statement. {@code ResultSet}s emitted from this
        {@code CallableStatement} will satisfy the specified {@code
        resultSetType} and {@code resultSetConcurrency} values.
@throws SQLException
            if a problem occurs accessing the database"
      end

      operation 996891 "prepareCall"
	public return_type class_ref 220699 // CallableStatement
	nparams 4
	  param inout name "sql" type class_ref 3399692 // String
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	  param in name "resultSetHoldability" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code CallableStatement} that may be used for
making stored procedure calls to the database. {@code ResultSet}s created
from this {@code CallableStatement} will have characteristics determined
by the specified type, concurrency and holdability arguments.

@param sql
           the SQL statement
@param resultSetType
           one of the following type specifiers:
           <ul>
           <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
           <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
           <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
           </ul>
@param resultSetConcurrency
           one of the following concurrency mode specifiers:
           <ul>
           <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
           <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
           </ul>
@param resultSetHoldability
           one of the following holdability mode specifiers:
           <ul>
           <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li>
           <li>{@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
           </ul>
@return a new instance of {@code CallableStatement} representing the
        precompiled SQL statement. {@code ResultSet}s emitted from this
        {@code CallableStatement} will satisfy the specified {@code
        resultSetType}, {@code resultSetConcurrency} and {@code
        resultSetHoldability} values.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 997019 "prepareStatement"
	public return_type class_ref 220827 // PreparedStatement
	nparams 1
	  param inout name "sql" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code PreparedStatement} that may be used any
number of times to execute parameterized requests on the database server.
<p>
Subject to JDBC driver support, this operation will attempt to send the
precompiled version of the statement to the database. If
the driver does not support precompiled statements, the statement will
not reach the database server until it is executed. This distinction
determines the moment when {@code SQLException}s get raised.
<p>
By default, {@code ResultSet}s from the returned object will be
{@link ResultSet#TYPE_FORWARD_ONLY} type with a
{@link ResultSet#CONCUR_READ_ONLY} mode of concurrency.

@param sql
           the SQL statement.
@return the {@code PreparedStatement} containing the supplied SQL
        statement.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 997147 "prepareStatement"
	public return_type class_ref 220827 // PreparedStatement
	nparams 2
	  param inout name "sql" type class_ref 3399692 // String
	  param in name "autoGeneratedKeys" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default {@code PreparedStatement} that can retrieve
automatically generated keys. Parameter {@code autoGeneratedKeys} may be
used to tell the driver whether such keys should be made accessible.
This is only relevant when the {@code sql} statement is an {@code insert}
statement.
<p>
An SQL statement which may have {@code IN} parameters can be stored and
precompiled in a {@code PreparedStatement}. The {@code PreparedStatement}
can then be then be used to execute the statement multiple times in an
efficient way.
<p>
Subject to JDBC driver support, this operation will attempt to send the
precompiled version of the statement to the database. If
the driver does not support precompiled statements, the statement will
not reach the database server until it is executed. This distinction
determines the moment when {@code SQLException}s get raised.
<p>
By default, {@code ResultSet}s from the returned object will be
{@link ResultSet#TYPE_FORWARD_ONLY} type with a
{@link ResultSet#CONCUR_READ_ONLY} mode of concurrency.

@param sql
           the SQL statement.
@param autoGeneratedKeys
           one of the following generated key options:
           <ul>
           <li>{@link Statement#RETURN_GENERATED_KEYS}</li>
           <li>{@link Statement#NO_GENERATED_KEYS}</li>
           </ul>
@return a new {@code PreparedStatement} instance representing the input
        SQL statement.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 997275 "prepareStatement"
	public return_type class_ref 220827 // PreparedStatement
	nparams 2
	  param inout name "sql" type class_ref 3399692 // String
	  param inout name "columnIndexes" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default {@code PreparedStatement} that can retrieve the
auto-generated keys designated by a supplied array. If {@code sql} is an
SQL {@code INSERT} statement, the parameter {@code columnIndexes} is expected
to hold the index values for each column in the statement's intended
database table containing the autogenerated-keys of interest. Otherwise
{@code columnIndexes} is ignored.
<p>
Subject to JDBC driver support, this operation will attempt to send the
precompiled version of the statement to the database. If
the driver does not support precompiled statements, the statement will
not reach the database server until it is executed. This distinction
determines the moment when {@code SQLException}s get raised.
<p>
By default, {@code ResultSet}s from the returned object will be
{@link ResultSet#TYPE_FORWARD_ONLY} type with a
{@link ResultSet#CONCUR_READ_ONLY} concurrency mode.

@param sql
           the SQL statement.
@param columnIndexes
           the indexes of the columns for which auto-generated keys
           should be made available.
@return the PreparedStatement containing the supplied SQL statement.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 997403 "prepareStatement"
	public return_type class_ref 220827 // PreparedStatement
	nparams 3
	  param inout name "sql" type class_ref 3399692 // String
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PreparedStatement} that generates {@code ResultSet}s
with the specified values of {@code resultSetType} and {@code
resultSetConcurrency}.

@param sql
           the SQL statement. It can contain one or more {@code '?'}
           {@code IN} parameter placeholders.
@param resultSetType
           one of the following type specifiers:
           <ul>
           <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
           <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
           <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
           </ul>
@param resultSetConcurrency
           one of the following concurrency mode specifiers:
           <ul>
           <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
           <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
           </ul>
@return a new instance of {@code PreparedStatement} containing the SQL
        statement {@code sql}. {@code ResultSet}s emitted from this
        {@code PreparedStatement} will satisfy the specified {@code
        resultSetType} and {@code resultSetConcurrency} values.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 997531 "prepareStatement"
	public return_type class_ref 220827 // PreparedStatement
	nparams 4
	  param inout name "sql" type class_ref 3399692 // String
	  param in name "resultSetType" explicit_type "int"
	  param in name "resultSetConcurrency" explicit_type "int"
	  param in name "resultSetHoldability" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PreparedStatement} that generates {@code ResultSet}s
with the specified type, concurrency and holdability

@param sql
           the SQL statement. It can contain one or more {@code '?' IN}
           parameter placeholders.
@param resultSetType
           one of the following type specifiers:
           <ul>
           <li>{@link ResultSet#TYPE_SCROLL_SENSITIVE}</li>
           <li>{@link ResultSet#TYPE_SCROLL_INSENSITIVE}</li>
           <li>{@link ResultSet#TYPE_FORWARD_ONLY}</li>
           </ul>
@param resultSetConcurrency
           one of the following concurrency mode specifiers:
           <ul>
           <li>{@link ResultSet#CONCUR_READ_ONLY}</li>
           <li>{@link ResultSet#CONCUR_UPDATABLE}</li>
           </ul>
@param resultSetHoldability
           one of the following holdability mode specifiers:
           <ul>
           <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li>
           <li>{@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
           </ul>
@return a new instance of {@code PreparedStatement} containing the SQL
        statement {@code sql}. {@code ResultSet}s emitted from this
        {@code PreparedStatement} will satisfy the specified {@code
        resultSetType}, {@code resultSetConcurrency} and {@code
        resultSetHoldability} values.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 997659 "prepareStatement"
	public return_type class_ref 220827 // PreparedStatement
	nparams 2
	  param inout name "sql" type class_ref 3399692 // String
	  param inout name "columnNames" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a default {@code PreparedStatement} that can retrieve the
auto-generated keys designated by a supplied array. If {@code sql} is an
SQL {@code INSERT} statement, {@code columnNames} is expected to hold the
names of each column in the statement's associated database table
containing the autogenerated-keys of interest. Otherwise {@code
columnNames} is ignored.
<p>
Subject to JDBC driver support, this operation will attempt to send the
precompiled version of the statement to the database. Alternatively, if
the driver is not capable of handling precompiled statements, the
statement will not reach the database server until it is executed. This
will have a bearing on precisely <i>when</i> {@code SQLException}
instances get raised.
<p>
By default, ResultSets from the returned object will be
{@link ResultSet#TYPE_FORWARD_ONLY} type with a
{@link ResultSet#CONCUR_READ_ONLY} concurrency mode.

@param sql
           the SQL statement.
@param columnNames
           the names of the columns for which auto-generated keys should
           be made available.
@return the PreparedStatement containing the supplied SQL statement.
@throws SQLException
            if a problem occurs accessing the database."
      end

      operation 997787 "releaseSavepoint"
	public explicit_return_type "void"
	nparams 1
	  param inout name "savepoint" type class_ref 223131 // Savepoint
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases the specified {@code savepoint} from the present transaction. Once removed,
the {@code Savepoint} is considered invalid and should not be referenced
further.

@param savepoint
           the object targeted for removal.
@throws SQLException
            if there is a problem with accessing the database or if
            {@code savepoint} is considered not valid in this
            transaction."
      end

      operation 997915 "rollback"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rolls back all updates made so far in this transaction and
relinquishes all acquired database locks. It is an error to invoke this
operation when in auto-commit mode.

@throws SQLException
            if there is a problem with the database or if the method is
            called while in auto-commit mode of operation."
      end

      operation 998043 "rollback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "savepoint" type class_ref 223131 // Savepoint
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Undoes all changes made after the supplied {@code Savepoint} object was
set. This method should only be used when auto-commit mode is disabled.

@param savepoint
           the Savepoint to roll back to
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 998171 "setAutoCommit"
	public explicit_return_type "void"
	nparams 1
	  param inout name "autoCommit" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this connection's auto-commit mode {@code on} or {@code off}.
<p>
Putting a Connection into auto-commit mode means that all associated SQL
statements are run and committed as separate transactions.
By contrast, setting auto-commit to {@code off} means that associated SQL
statements get grouped into transactions that need to be completed by
explicit calls to either the {@link #commit()} or {@link #rollback()}
methods.
<p>
Auto-commit is the default mode for new connection instances.
<p>
When in this mode, commits will automatically occur upon successful SQL
statement completion or upon successful completion of an execute.
Statements are not considered successfully completed until all associated
{@code ResultSet}s and output parameters have been obtained or closed.
<p>
Calling this operation during an uncommitted transaction will result in
it being committed.

@param autoCommit
           {@code boolean} indication of whether to put the target
           connection into auto-commit mode ({@code true}) or not (
           {@code false}).
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 998299 "setCatalog"
	public explicit_return_type "void"
	nparams 1
	  param inout name "catalog" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the catalog name for this connection. This is used to select a
subspace of the database for future work. If the driver does not support
catalog names, this method is ignored.

@param catalog
           the catalog name to use.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 998427 "setHoldability"
	public explicit_return_type "void"
	nparams 1
	  param in name "holdability" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the holdability of the {@code ResultSet}s created by this Connection.

@param holdability
           one of the following holdability mode specifiers:
           <ul>
           <li>{@link ResultSet#CLOSE_CURSORS_AT_COMMIT}</li>
           <li>{@link ResultSet#HOLD_CURSORS_OVER_COMMIT}</li>
           <li>
           </ul>
@throws SQLException
            if there is a problem accessing the database"
      end

      operation 998555 "setReadOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "readOnly" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this connection to read-only mode.
<p>
This serves as a hint to the driver, which can enable database
optimizations.

@param readOnly
           {@code true} to set the Connection to read only mode. {@code
           false} disables read-only mode.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 998683 "setSavepoint"
	public return_type class_ref 223131 // Savepoint
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an unnamed {@code Savepoint} in the current transaction.

@return a {@code Savepoint} object for this savepoint.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 998811 "setSavepoint"
	public return_type class_ref 223131 // Savepoint
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a named {@code Savepoint} in the current transaction.

@param name
           the name to use for the new {@code Savepoint}.
@return a {@code Savepoint} object for this savepoint.
@throws SQLException
            if there is a problem accessing the database."
      end

      operation 998939 "setTransactionIsolation"
	public explicit_return_type "void"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the transaction isolation level for this Connection.
<p>
If this method is called during a transaction, the results are
implementation defined.

@param level
           the new transaction isolation level to use from the following
           list of possible values:
           <ul>
           <li>{@link #TRANSACTION_READ_COMMITTED}
           <li>{@link #TRANSACTION_READ_UNCOMMITTED}
           <li>{@link #TRANSACTION_REPEATABLE_READ}
           <li>{@link #TRANSACTION_SERIALIZABLE}
           </ul>
@throws SQLException
            if there is a problem with the database or if the value of
            {@code level} is not one of the expected constant values."
      end

      operation 999067 "setTypeMap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code TypeMap} for this connection. The input {@code map}
should contain mappings between complex Java and SQL types.

@param map
           the new type map.
@throws SQLException
            if there is a problem accessing the database or if {@code
            map} is not an instance of {@link Map}."
      end

      operation 999195 "createClob"
	public return_type class_ref 221723 // Clob
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new empty Clob.
@throws SQLException if this connection is closed, or there's a problem creating a new clob."
      end

      operation 999323 "createBlob"
	public return_type class_ref 220571 // Blob
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new empty Blob.
@throws SQLException if this connection is closed, or there's a problem creating a new blob."
      end

      operation 999451 "createNClob"
	public return_type class_ref 222619 // NClob
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new empty NClob.
@throws SQLException if this connection is closed, or there's a problem creating a new nclob."
      end

      operation 999579 "createSQLXML"
	public return_type class_ref 222747 // SQLXML
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new empty SQLXML.
@throws SQLException if this connection is closed, or there's a problem creating a new XML."
      end

      operation 999707 "isValid"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "timeout" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this connection is still open and valid, false otherwise.
@param timeout number of seconds to wait for a response before giving up and returning false,
0 to wait forever
@throws SQLException if {@code timeout < 0}"
      end

      operation 999835 "setClientInfo"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 223259 // SQLClientInfoException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the client info property {@code name} to {@code value}. A value of null clears the
client info property.
@throws SQLClientInfoException if this connection is closed, or there's a problem setting
the property."
      end

      operation 999963 "setClientInfo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "properties" type class_ref 160027 // Properties
	nexceptions 1
	  exception class_ref 223259 // SQLClientInfoException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces all client info properties with the name/value pairs from {@code properties}.
All existing properties are removed. If an exception is thrown, the resulting state of
this connection's client info properties is undefined.
@throws SQLClientInfoException if this connection is closed, or there's a problem setting
a property."
      end

      operation 1000091 "getClientInfo"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value corresponding to the given client info property, or null if unset.
@throws SQLClientInfoException if this connection is closed, or there's a problem getting
the property."
      end

      operation 1000219 "getClientInfo"
	public return_type class_ref 160027 // Properties
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Properties} object containing all client info properties.
@throws SQLClientInfoException if this connection is closed, or there's a problem getting
a property."
      end

      operation 1000347 "createArrayOf"
	public return_type class_ref 219931 // Array
	nparams 2
	  param inout name "typeName" type class_ref 3399692 // String
	  param inout name "elements" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@link Array} containing the given {@code elements}.
@param typeName the SQL name of the type of the array elements
@throws SQLClientInfoException if this connection is closed, or there's a problem creating
the array."
      end

      operation 1000475 "createStruct"
	public return_type class_ref 223387 // Struct
	nparams 2
	  param inout name "typeName" type class_ref 3399692 // String
	  param inout name "attributes" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@link Struct} containing the given {@code attributes}.
@param typeName the SQL name of the type of the struct attributes
@throws SQLClientInfoException if this connection is closed, or there's a problem creating
the array."
      end
    end

    class 221339 "SQLWarning"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception class that holds information about Database access warnings."
      classrelation 333211 // <generalisation>
	relation 333211 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 333211 // <generalisation>
	  b parent class_ref 220059 // SQLException
      end

      classrelation 333339 // <realization>
	relation 333339 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 333339 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 276123 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3917336774604784856L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1022619 "SQLWarning"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code SQLWarning} object. The reason string is set to {@code
null}, the {@code SQLState} string is set to {@code null} and the error
code is set to 0."
      end

      operation 1022747 "SQLWarning"
	public explicit_return_type ""
	nparams 1
	  param inout name "theReason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code SQLWarning} object. The reason string is set to the
given reason string, the {@code SQLState} string is set to {@code null}
and the error code is set to 0.

@param theReason
           the reason why this warning is issued."
      end

      operation 1022875 "SQLWarning"
	public explicit_return_type ""
	nparams 2
	  param inout name "theReason" type class_ref 3399692 // String
	  param inout name "theSQLState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code SQLWarning} object. The reason string is set to the
given reason string, the {@code SQLState} string is set to the given
{@code SQLState} string and the error code is set to 0.

@param theReason
           the reason why this warning is issued.
@param theSQLState
           the string to use as the {@code SQLState} string."
      end

      operation 1023003 "SQLWarning"
	public explicit_return_type ""
	nparams 3
	  param inout name "theReason" type class_ref 3399692 // String
	  param inout name "theSQLState" type class_ref 3399692 // String
	  param in name "theErrorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code SQLWarning} object. The reason string is set to the
given reason string, the {@code SQLState} string is set to the given
{@code SQLState} string and the error code is set to the given error code
value.

@param theReason
           the reason why this warning is issued.
@param theSQLState
           the X/Open standard specifc error code.
@param theErrorCode
           a vendor specific error code."
      end

      operation 1023131 "SQLWarning"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLWarning object. The Reason string is set to null, the
SQLState string is set to null and the Error Code is set to 0, cause is
set to cause.

@since 1.6"
      end

      operation 1023259 "SQLWarning"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLWarning object. The Reason string is set to reason, the
SQLState string is set to null and the Error Code is set to 0, cause is
set to the given cause

@since 1.6"
      end

      operation 1023387 "SQLWarning"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "SQLState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLWarning object. The Reason string is set to reason, the
SQLState string is set to given SQLState and the Error Code is set to 0,
cause is set to the given cause

@since 1.6"
      end

      operation 1023515 "SQLWarning"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "SQLState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLWarning object. The Reason string is set to reason, the
SQLState string is set to given SQLState and the Error Code is set to
vendorCode, cause is set to the given cause

@since 1.6"
      end

      operation 1023643 "getNextWarning"
	public return_type class_ref 221339 // SQLWarning
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the next {@code SQLWarning} chained to this {@code SQLWarning} object.

@return the {@code SQLWarning} chained to this {@code SQLWarning}.
        {@code null} if no {@code SQLWarning} is chained to this {@code
        SQLWarning}."
      end

      operation 1023771 "setNextWarning"
	public explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 221339 // SQLWarning
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Chains a supplied {@code SQLWarning} to this {@code SQLWarning}.

@param w
           the {@code SQLWarning} linked to this {@code SQLWarning}."
      end
    end

    class 221467 "ResultSetMetaData"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides information about the columns returned in a {@code ResultSet}."
      classrelation 336283 // <generalisation>
	relation 336283 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 336283 // <generalisation>
	  b parent class_ref 221083 // Wrapper
      end

      attribute 280091 "columnNoNulls"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a column cannot contain {@code NULL} values.
"
      end

      attribute 280219 "columnNullable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a column can contain {@code NULL} values.
"
      end

      attribute 280347 "columnNullableUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that it is unknown whether a column can contain {@code NULL}s or not.
"
      end

      operation 1060123 "getCatalogName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the title of an indexed column's catalog.

@param column
           the column index, starting at 1.
@return the catalog title.
@throws SQLException
            if there is a database error."
      end

      operation 1060251 "getColumnClassName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fully-qualified type of the class that is produced when
invoking {@code ResultSet.getObject} to recover this column's value.

@param column
           the column index, starting at 1.
@return the fully-qualified class name.
@throws SQLException
            if there is a database error.
@see ResultSet#getObject"
      end

      operation 1060379 "getColumnCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns number of columns contained in the associated result set.

@return the column count.
@throws SQLException
            if there is a database error."
      end

      operation 1060507 "getColumnDisplaySize"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the indexed column's standard maximum width, expressed in number
of characters.

@param column
           the column index, starting at 1.
@return the column's max width.
@throws SQLException
            if there is a database error."
      end

      operation 1060635 "getColumnLabel"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a recommended title for the indexed column, to be used when the
title needs to be displayed.

@param column
           the column index, starting at 1.
@return the column's title.
@throws SQLException
            if there is a database error."
      end

      operation 1060763 "getColumnName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the title of the indexed column.

@param column
           the column index, starting at 1.
@return the column title.
@throws SQLException
            if there is a database error."
      end

      operation 1060891 "getColumnType"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of the indexed column as SQL type code.

@param column
           the column index, starting at 1.
@return the column type code.
@throws SQLException
            if there is a database error.
@see Types"
      end

      operation 1061019 "getColumnTypeName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type name of the indexed column.

@param column
           the column index, starting at 1.
@return the type name.
@throws SQLException
            if there is a database error."
      end

      operation 1061147 "getPrecision"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decimal precision of the indexed column.

@param column
           the column index, starting at 1.
@return the precision.
@throws SQLException
            if there is a database error."
      end

      operation 1061275 "getScale"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of digits to the right of the decimal point of the
indexed column.

@param column
           the column index, starting at 1.
@return number of decimal places.
@throws SQLException
            if there is a database error."
      end

      operation 1061403 "getSchemaName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the indexed columns schema.

@param column
           the column index, starting at 1.
@return the name of the columns schema.
@throws SQLException
            if there is a database error."
      end

      operation 1061531 "getTableName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the title of the indexed columns table.

@param column
           the column index, starting at 1.
@return the table title.
@throws SQLException
            if there is a database error."
      end

      operation 1061659 "isAutoIncrement"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indication of whether the indexed column is automatically
incremented and is therefore read-only.

@param column
           the column index, starting at 1.
@return {@code true} if it is automatically numbered, {@code false}
        otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1061787 "isCaseSensitive"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indication of whether the case of the indexed column is
important.

@param column
           the column index, starting at 1.
@return {@code true} if case matters, {@code false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1061915 "isCurrency"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the indexed column contains a monetary amount.

@param column
           the column index, starting at 1.
@return {@code true} if it is a monetary value, {@code false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1062043 "isDefinitelyWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indication of whether writing to the indexed column is
guaranteed to be successful.

@param column
           the column index, starting at 1.
@return {@code true} if the write is guaranteed, {@code false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1062171 "isNullable"
	public explicit_return_type "int"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the indexed column is nullable.

@param column
           the column index, starting at 1.
@return {@code true} if it is nullable, {@code false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1062299 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indication of whether writing to the indexed column is
guaranteed to be unsuccessful.

@param column
           the column index, starting at 1.
@return {@code true} if the column is read-only, {@code false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1062427 "isSearchable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indication of whether the indexed column is searchable.

@param column
           the column index, starting at 1.
@return {@code true} if the indexed column is searchable, {@code false}
        otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1062555 "isSigned"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indication of whether the values contained in the indexed
column are signed.

@param column
           the column index, starting at 1.
@return {@code true} if they are signed, {@code false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1062683 "isWritable"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "column" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indication of whether writing to the indexed column is
possible.

@param column
           the column index, starting at 1.
@return {@code true} if it is possible to write, {@code false} otherwise.
@throws SQLException
            if there is a database error."
      end
    end

    class 221595 "ParameterMetaData"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface used to get information about the types and properties of
parameters in a {@code PreparedStatement}."
      classrelation 335899 // <generalisation>
	relation 335899 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 335899 // <generalisation>
	  b parent class_ref 221083 // Wrapper
      end

      attribute 277915 "parameterModeIn"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the parameter mode is {@code IN}.
"
      end

      attribute 278043 "parameterModeInOut"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the parameter mode is {@code INOUT}.
"
      end

      attribute 278171 "parameterModeOut"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the parameter mode is {@code OUT}.
"
      end

      attribute 278299 "parameterModeUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that the parameter mode is not known.
"
      end

      attribute 278427 "parameterNoNulls"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a parameter is not permitted to be {@code NULL}.
"
      end

      attribute 278555 "parameterNullable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a parameter is permitted to be {@code NULL}.
"
      end

      attribute 278683 "parameterNullableUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that whether a parameter is allowed to be {@code null} or not
is not known.
"
      end

      operation 1034523 "getParameterClassName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "paramIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the fully-qualified name of the Java class which should be passed as
a parameter to the method {@code PreparedStatement.setObject}.

@param paramIndex
           the index number of the parameter, where the first parameter
           has index 1.
@return the fully qualified Java class name of the parameter with the
        specified index. This class name is used for custom mapping
        between SQL types and Java objects.
@throws SQLException
            if a database error happens."
      end

      operation 1034651 "getParameterCount"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of parameters in the {@code PreparedStatement} for which
this {@code ParameterMetaData} contains information.

@return the number of parameters.
@throws SQLException
            if a database error happens."
      end

      operation 1034779 "getParameterMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "paramIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the mode of the specified parameter. Can be one of:
<ul>
<li>ParameterMetaData.parameterModeIn</li>
<li>ParameterMetaData.parameterModeOut</li>
<li>ParameterMetaData.parameterModeInOut</li>
<li>ParameterMetaData.parameterModeUnknown</li>
</ul>

@param paramIndex
           the index number of the parameter, where the first parameter
           has index 1.
@return the parameter's mode.
@throws SQLException
            if a database error happens."
      end

      operation 1034907 "getParameterType"
	public explicit_return_type "int"
	nparams 1
	  param in name "paramIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the SQL type of a specified parameter.

@param paramIndex
           the index number of the parameter, where the first parameter
           has index 1.
@return the SQL type of the parameter as defined in {@code
        java.sql.Types}.
@throws SQLException
            if a database error happens."
      end

      operation 1035035 "getParameterTypeName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "paramIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the database-specific type name of a specified parameter.

@param paramIndex
           the index number of the parameter, where the first parameter
           has index 1.
@return the type name for the parameter as used by the database. A
        fully-qualified name is returned if the parameter is a <i>User
        Defined Type</i> (UDT).
@throws SQLException
            if a database error happens."
      end

      operation 1035163 "getPrecision"
	public explicit_return_type "int"
	nparams 1
	  param in name "paramIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of decimal digits for a specified parameter.

@param paramIndex
           the index number of the parameter, where the first parameter
           has index 1.
@return the number of decimal digits (\"the precision\") for the parameter.
        {@code 0} if the parameter is not a numeric type.
@throws SQLException
            if a database error happens."
      end

      operation 1035291 "getScale"
	public explicit_return_type "int"
	nparams 1
	  param in name "paramIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of digits after the decimal point for a specified
parameter.

@param paramIndex
           the index number of the parameter, where the first parameter
           has index 1.
@return the number of digits after the decimal point (\"the scale\") for
        the parameter. {@code 0} if the parameter is not a numeric type.
@throws SQLException
            if a database error happens."
      end

      operation 1035419 "isNullable"
	public explicit_return_type "int"
	nparams 1
	  param in name "paramIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets whether {@code null} values are allowed for the specified parameter.
The returned value is one of:
<ul>
<li>ParameterMetaData.parameterNoNulls</li>
<li>ParameterMetaData.parameterNullable</li>
<li>ParameterMetaData.parameterNullableUnknown</li>
</ul>

@param paramIndex
           the index number of the parameter, where the first parameter
           has index 1.
@return the int code indicating the nullability of the parameter.
@throws SQLException
            if a database error is encountered."
      end

      operation 1035547 "isSigned"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "paramIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets whether values for the specified parameter can be signed numbers.

@param paramIndex
           the index number of the parameter, where the first parameter
           has index 1.
@return {@code true} if values can be signed numbers for this parameter,
        {@code false} otherwise.
@throws SQLException
            if a database error happens."
      end
    end

    class 221723 "Clob"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Java interface mapping for the SQL CLOB type.
<p>
An SQL {@code CLOB} type stores a large array of characters as the value in a
column of a database.
<p>
The {@code java.sql.Clob} interface provides methods for setting and
retrieving data in the {@code Clob}, for querying {@code Clob} data length,
for searching for data within the {@code Clob}."
      operation 992923 "getAsciiStream"
	public return_type class_ref 131867 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of this {@code Clob} object as an ASCII stream.

@return an ASCII {@code InputStream} giving access to the
           {@code Clob} data.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 993051 "getCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the data of this {@code Clob} object in a {@code java.io.Reader}.

@return a character stream Reader object giving access to the {@code
        Clob} data.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 993179 "getSubString"
	public return_type class_ref 3399692 // String
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a copy of a specified substring in this {@code Clob}.

@param pos
           the index of the start of the substring in the {@code Clob}.
@param length
           the length of the data to retrieve.
@return A string containing the requested data.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 993307 "length"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of characters in this {@code Clob} object.

@return a long value with the number of character in this {@code Clob}.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 993435 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "searchstr" type class_ref 221723 // Clob
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the character position at which a specified {@code Clob} object
appears in this {@code Clob} object.

@param searchstr
           the specified {@code Clob} to search for.
@param start
           the position within this {@code Clob} to start the search
@return a long value with the position at which the specified {@code
        Clob} occurs within this {@code Clob}.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 993563 "position"
	public explicit_return_type "long"
	nparams 2
	  param inout name "searchstr" type class_ref 3399692 // String
	  param in name "start" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the character position at which a specified substring appears
in this {@code Clob} object.

@param searchstr
           the string to search for.
@param start
           the position at which to start the search within this {@code
           Clob}.
@return a long value with the position at which the specified string
        occurs within this {@code Clob}.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 993691 "setAsciiStream"
	public return_type class_ref 132635 // OutputStream
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream which can be used to write Ascii characters to this
{@code Clob} object, starting at specified position.

@param pos
           the position at which to start the writing.
@return an OutputStream which can be used to write ASCII characters to
        this {@code Clob}.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 993819 "setCharacterStream"
	public return_type class_ref 133531 // Writer
	nparams 1
	  param in name "pos" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a stream which can be used to write a stream of unicode
characters to this {@code Clob} object, at a specified position.

@param pos
           the position at which to start the writing.
@return a Writer which can be used to write unicode characters to this
        {@code Clob}.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 993947 "setString"
	public explicit_return_type "int"
	nparams 2
	  param in name "pos" explicit_type "long"
	  param inout name "str" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a given Java String to this {@code Clob} object at a specified
position.

@param pos
           the position at which to start the writing.
@param str
           the string to write.
@return the number of characters written.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 994075 "setString"
	public explicit_return_type "int"
	nparams 4
	  param in name "pos" explicit_type "long"
	  param inout name "str" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes {@code len} characters of a string, starting at a specified
character offset, to this {@code Clob}.

@param pos
           the position at which to start the writing.
@param str
           the String to write.
@param offset
           the offset within {@code str} to start writing from.
@param len
           the number of characters to write.
@return the number of characters written.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 994203 "truncate"
	public explicit_return_type "void"
	nparams 1
	  param in name "len" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Truncates this {@code Clob} after the specified number of characters.

@param len
           the length in characters giving the place to
           truncate this {@code Clob}.
@throws SQLException
            if an error occurs accessing the {@code Clob}."
      end

      operation 994331 "free"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Frees any resources held by this clob. After {@code free} is called, calling
method other than {@code free} will throw {@code SQLException} (calling {@code free}
repeatedly will do nothing).

@throws SQLException"
      end

      operation 994459 "getCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 2
	  param in name "pos" explicit_type "long"
	  param in name "length" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Reader} that reads {@code length} characters from this clob, starting
at 1-based offset {code pos}."
      end
    end

    class 221851 "Date"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@FindBugsSuppressWarnings(\"NM_SAME_SIMPLE_NAME_AS_SUPERCLASS\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class which can consume and produce dates in SQL {@code Date} format.
<p>
Dates are represented in SQL as {@code yyyy-MM-dd}. Note that this date
format only deals with year, month and day values. There are no values for
hours, minutes, seconds.
<p>
This is unlike the familiar {@code java.util.Date} object, which also includes
values for hours, minutes, seconds, and milliseconds.
<p>
Time points are handled as millisecond values - milliseconds since the Epoch,
January 1st 1970, 00:00:00.000 GMT. Time values passed to the {@code
java.sql.Date} class are \"normalized\" to the time 00:00:00.000 GMT on the
date implied by the time value."
      classrelation 334491 // <generalisation>
	relation 334491 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 334491 // <generalisation>
	  b parent class_ref 171931 // Date
      end

      attribute 277531 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1511598038487230103L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1029787 "Date"
	public explicit_return_type ""
	nparams 3
	  param in name "theYear" explicit_type "int"
	  param in name "theMonth" explicit_type "int"
	  param in name "theDay" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs a {@code Date} object corresponding to the supplied year,
month and day.

@deprecated Use the constructor {@link #Date(long)}.
@param theYear
           the year, specified as the year minus 1900. Must be in the
           range {@code [0,8099]}.
@param theMonth
           the month, specified as a number with 0 = January. Must be in
           the range {@code [0,11]}.
@param theDay
           the day in the month. Must be in the range {@code [1,31]}."
      end

      operation 1029915 "Date"
	public explicit_return_type ""
	nparams 1
	  param in name "theDate" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a date which corresponds to the day determined by the supplied
milliseconds time value {@code theDate}.

@param theDate
           a time value in milliseconds since the epoch - January 1 1970
           00:00:00 GMT. The time value (hours, minutes, seconds,
           milliseconds) stored in the {@code Date} object is adjusted to
           correspond to 00:00:00 GMT on the day determined by the supplied
           time value."
      end

      operation 1030043 "getHours"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. SQL {@code
            Date} values do not have an hours component.
@return does not return anything.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1030171 "getMinutes"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. SQL {@code
            Date} values do not have a minutes component.
@return does not return anything.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1030299 "getSeconds"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. SQL {@code
            Date} values do not have a seconds component.
@return does not return anything.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1030427 "setHours"
	public explicit_return_type "void"
	nparams 1
	  param in name "theHours" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. SQL {@code
            Date} values do not have an hours component.
@param theHours
           the number of hours to set.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1030555 "setMinutes"
	public explicit_return_type "void"
	nparams 1
	  param in name "theMinutes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. SQL {@code
            Date} values do not have a minutes component.
@param theMinutes
           the number of minutes to set.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1030683 "setSeconds"
	public explicit_return_type "void"
	nparams 1
	  param in name "theSeconds" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. SQL {@code
            Date} values do not have a seconds component.
@param theSeconds
           the number of seconds to set.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1030811 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "theTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets this date to a date supplied as a milliseconds value. The date is
set based on the supplied time value and rounded to zero GMT for that day.

@param theTime
           the time in milliseconds since the Epoch."
      end

      operation 1030939 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Produces a string representation of the date in SQL format

@return a string representation of the date in SQL format - {@code \"yyyy-MM-dd\"}."
      end

      classrelation 334619 // PADDING (<unidirectional association>)
	relation 334619 --->
	  a role_name "PADDING" init_value " \"0000\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 334619 // PADDING (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1031067 "format"
	private explicit_return_type "void"
	nparams 3
	  param in name "date" explicit_type "int"
	  param in name "digits" explicit_type "int"
	  param inout name "sb" type class_ref 155163 // StringBuilder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private method to format the time"
      end

      operation 1031195 "valueOf"
	class_operation public return_type class_ref 221851 // Date
	nparams 1
	  param inout name "dateString" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Date} from a string representation of a date in SQL
format.

@param dateString
           the string representation of a date in SQL format - \" {@code yyyy-MM-dd}\".
@return the {@code Date} object.
@throws IllegalArgumentException
            if the format of the supplied string does not match the SQL
            format."
      end

      operation 1031323 "normalizeTime"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "theTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private method which normalizes a Time value, removing all low
significance digits corresponding to milliseconds, seconds, minutes and
hours, so that the returned Time value corresponds to 00:00:00 GMT on a
particular day."
      end
    end

    class 222107 "Ref"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface represents an SQL Ref - a data object containing a cursor
or pointer to a result table.
<p>
The data structure identified by an instance of Ref is held in the
database, so the data is not necessarily read and converted
into a Java object until {@code getObject} is called. However, if
the database supports the {@code Ref} type, it is not typically
necessary to get the underlying object before using it in a method call -
the {@code Ref} object can be used in place of the data structure.
<p>
A {@code Ref} object is stored into the database using the
{@link PreparedStatement#setRef(int, Ref)} method."
      operation 1035675 "getBaseTypeName"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the fully-qualified SQL name of the SQL structured type that this
{@code Ref} references.

@return the fully qualified name of the SQL structured type.
@throws SQLException
            if there is a database error."
      end

      operation 1035803 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the SQL structured type instance referenced by this {@code Ref}.

@return a Java object whose type is defined by the mapping for the SQL
        structured type.
@throws SQLException
            if there is a database error."
      end

      operation 1035931 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "map" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the associated object and uses the relevant mapping to convert it
to a Java type.

@param map
           the mapping for type conversion.
@return a Java object whose type is defined by the mapping for the SQL
        structured type.
@throws SQLException
            if there is a database error."
      end

      operation 1036059 "setObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the structured type that this {@code Ref} references to
a supplied object.

@param value
           the {@code Object} representing the new SQL structured type
           that this {@code Ref} references.
@throws SQLException
            if there is a database error."
      end
    end

    class 222235 "Time"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Java representation of an SQL {@code TIME} value. Provides utilities to
format and parse the time's representation as a String in JDBC escape format."
      classrelation 338587 // <generalisation>
	relation 338587 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 338587 // <generalisation>
	  b parent class_ref 221851 // Date
      end

      attribute 282779 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8397324403548013681L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1086491 "Time"
	public explicit_return_type ""
	nparams 3
	  param in name "theHour" explicit_type "int"
	  param in name "theMinute" explicit_type "int"
	  param in name "theSecond" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Deprecated
"
	
	
	
	comment "Constructs a {@code Time} object using the supplied values for <i>Hour</i>,
<i>Minute</i> and <i>Second</i>. The <i>Year</i>, <i>Month</i> and
<i>Day</i> elements of the {@code Time} object are set to the date
of the Epoch (January 1, 1970).
<p>
Any attempt to access the <i>Year</i>, <i>Month</i> or <i>Day</i>
elements of a {@code Time} object will result in an {@code
IllegalArgumentException}.
<p>
The result is undefined if any argument is out of bounds.

@deprecated Use the constructor {@link #Time(long)}.
@param theHour
           a value in the range {@code [0,23]}.
@param theMinute
           a value in the range {@code [0,59]}.
@param theSecond
           a value in the range {@code [0,59]}."
      end

      operation 1086619 "Time"
	public explicit_return_type ""
	nparams 1
	  param in name "theTime" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code Time} object using a supplied time specified in
milliseconds.

@param theTime
           a {@code Time} specified in milliseconds since the
           <i>Epoch</i> (January 1st 1970, 00:00:00.000)."
      end

      operation 1086747 "getDate"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. An SQL
            {@code Time} object does not have a {@code Date} component.
@return does not return anything.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1086875 "getDay"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. An SQL
            {@code Time} object does not have a <i>Day</i> component.
@return does not return anything.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1087003 "getMonth"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. An SQL
            {@code Time} object does not have a <i>Month</i> component.
@return does not return anything.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1087131 "getYear"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. An SQL
            {@code Time} object does not have a <i>Year</i> component.
@return does not return anything.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1087259 "setDate"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. An SQL
            {@code Time} object does not have a {@code Date} component.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1087387 "setMonth"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. An SQL
            {@code Time} object does not have a <i>Month</i> component.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1087515 "setYear"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Deprecated
    @Override
"
	
	
	
	comment "@deprecated This method is deprecated and must not be used. An SQL
            {@code Time} object does not have a <i>Year</i> component.
@throws IllegalArgumentException
            if this method is called."
      end

      operation 1087643 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "time" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the time for this {@code Time} object to the supplied milliseconds
value.

@param time
           A time value expressed as milliseconds since the <i>Epoch</i>.
           Negative values are milliseconds before the Epoch. The Epoch
           is January 1 1970, 00:00:00.000."
      end

      operation 1087771 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats the {@code Time} as a String in JDBC escape format: {@code
hh:mm:ss}.

@return A String representing the {@code Time} value in JDBC escape
        format: {@code HH:mm:ss}"
      end

      classrelation 338715 // PADDING (<unidirectional association>)
	relation 338715 --->
	  a role_name "PADDING" init_value " \"00\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 338715 // PADDING (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1087899 "format"
	private explicit_return_type "void"
	nparams 3
	  param in name "date" explicit_type "int"
	  param in name "digits" explicit_type "int"
	  param inout name "sb" type class_ref 155163 // StringBuilder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private method to format the time"
      end

      operation 1088027 "valueOf"
	class_operation public return_type class_ref 222235 // Time
	nparams 1
	  param inout name "timeString" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Time} object from a string holding a time represented in
JDBC escape format: {@code hh:mm:ss}.
<p>
An exception occurs if the input string does not comply with this format.

@param timeString
           A String representing the time value in JDBC escape format:
           {@code hh:mm:ss}.
@return The {@code Time} object set to a time corresponding to the given
        time.
@throws IllegalArgumentException
            if the supplied time string is not in JDBC escape format."
      end
    end

    class 222363 "Timestamp"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Java representation of the SQL {@code TIMESTAMP} type. It provides the
capability of representing the SQL {@code TIMESTAMP} nanosecond value, in
addition to the regular date/time value which has millisecond resolution.
<p>
The {@code Timestamp} class consists of a regular date/time value, where only
the integral seconds value is stored, plus a nanoseconds value where the
fractional seconds are stored.
<p>
The addition of the nanosecond value field to the {@code Timestamp} object
makes it significantly different from the {@code java.util.Date} object which
it extends. Users should be aware that {@code Timestamp} objects are not
interchangable with {@code java.util.Date} objects when used outside the
confines of the {@code java.sql} package.

@see Date
@see Time
@see java.util.Date"
      classrelation 338843 // <generalisation>
	relation 338843 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 338843 // <generalisation>
	  b parent class_ref 221851 // Date
      end

      attribute 282907 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2745179027874758501L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 283035 "nanos"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The nanoseconds time value of the Timestamp"
      end

      classrelation 338971 // TIME_FORMAT_REGEX (<unidirectional association>)
	relation 338971 --->
	  a role_name "TIME_FORMAT_REGEX" init_value " \"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.*\"" class_relation const_relation private
	    comment " The regex pattern of yyyy-MM-dd HH:mm:ss
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 338971 // TIME_FORMAT_REGEX (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1088155 "Timestamp"
	public explicit_return_type ""
	nparams 7
	  param in name "theYear" explicit_type "int"
	  param in name "theMonth" explicit_type "int"
	  param in name "theDate" explicit_type "int"
	  param in name "theHour" explicit_type "int"
	  param in name "theMinute" explicit_type "int"
	  param in name "theSecond" explicit_type "int"
	  param in name "theNano" explicit_type "int"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Deprecated
"
	
	
	
	comment "Returns a {@code Timestamp} corresponding to the time specified by the
supplied values for <i>Year</i>, <i>Month</i>, <i>Date</i>, <i>Hour</i>,
<i>Minutes</i>, <i>Seconds</i> and <i>Nanoseconds</i>.

@deprecated Use the constructor {@link #Timestamp(long)}.
@param theYear
           specified as the year minus 1900.
@param theMonth
           specified as an integer in the range [0,11].
@param theDate
           specified as an integer in the range [1,31].
@param theHour
           specified as an integer in the range [0,23].
@param theMinute
           specified as an integer in the range [0,59].
@param theSecond
           specified as an integer in the range [0,59].
@param theNano
           which defines the nanosecond value of the timestamp specified
           as an integer in the range [0,999'999'999]
@throws IllegalArgumentException
            if any of the parameters is out of range."
      end

      operation 1088283 "Timestamp"
	public explicit_return_type ""
	nparams 1
	  param in name "theTime" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Timestamp} object corresponding to the time represented
by a supplied time value.

@param theTime
           a time value in the format of milliseconds since the Epoch
           (January 1 1970 00:00:00.000 GMT)."
      end

      operation 1088411 "after"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this timestamp object is later than the supplied
timestamp, otherwise returns {@code false}.

@param theTimestamp
           the timestamp to compare with this timestamp object.
@return {@code true} if this {@code Timestamp} object is later than the
        supplied timestamp, {@code false} otherwise."
      end

      operation 1088539 "before"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this {@code Timestamp} object is earlier than the
supplied timestamp, otherwise returns {@code false}.

@param theTimestamp
           the timestamp to compare with this {@code Timestamp} object.
@return {@code true} if this {@code Timestamp} object is earlier than the
        supplied timestamp, {@code false} otherwise."
      end

      operation 1088667 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "theObject" type class_ref 221851 // Date
	nexceptions 1
	  exception class_ref 150683 // ClassCastException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this {@code Timestamp} object with a supplied {@code Timestamp}
object.

@param theObject
           the timestamp to compare with this {@code Timestamp} object,
           passed as an {@code Object}.
@return <dd>
        <dl>
        {@code 0} if the two {@code Timestamp} objects are equal in time
        </dl>
        <dl>
        a value {@code < 0} if this {@code Timestamp} object is before
        the supplied {@code Timestamp} and a value
        </dl>
        <dl>
        {@code > 0} if this {@code Timestamp} object is after the
        supplied {@code Timestamp}
        </dl>
        </dd>
@throws ClassCastException
            if the supplied object is not a {@code Timestamp} object."
      end

      operation 1088795 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code Timestamp} object with a supplied {@code Timestamp}
object.

@param theTimestamp
           the timestamp to compare with this {@code Timestamp} object,
           passed in as a {@code Timestamp}.
@return one of the following:
        <ul>
        <li>{@code 0}, if the two {@code Timestamp} objects are
        equal in time</li>
        <li>{@code < 0}, if this {@code Timestamp} object is before the
        supplied {@code Timestamp}</li>
        <li> {@code > 0}, if this {@code Timestamp} object is after the
        supplied {@code Timestamp}</li>
        </ul>"
      end

      operation 1088923 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "theObject" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Tests to see if this timestamp is equal to a supplied object.

@param theObject
           the object to which this timestamp is compared.
@return {@code true} if this {@code Timestamp} object is equal to the
        supplied {@code Timestamp} object<br>{@code false} if the object
        is not a {@code Timestamp} object or if the object is a {@code
        Timestamp} but represents a different instant in time."
      end

      operation 1089051 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests to see if this timestamp is equal to a supplied timestamp.

@param theTimestamp
           the timestamp to compare with this {@code Timestamp} object,
           passed as an {@code Object}.
@return {@code true} if this {@code Timestamp} object is equal to the
        supplied {@code Timestamp} object, {@code false} otherwise."
      end

      operation 1089179 "getNanos"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets this {@code Timestamp}'s nanosecond value

@return The timestamp's nanosecond value, an integer between 0 and
        999,999,999."
      end

      operation 1089307 "getTime"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the time represented by this {@code Timestamp} object, as a long
value containing the number of milliseconds since the Epoch (January 1
1970, 00:00:00.000 GMT).

@return the number of milliseconds that have passed since January 1 1970,
        00:00:00.000 GMT."
      end

      operation 1089435 "setNanos"
	public explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the nanosecond value for this {@code Timestamp}.

@param n
           number of nanoseconds.
@throws IllegalArgumentException
            if number of nanoseconds smaller than 0 or greater than
            999,999,999."
      end

      operation 1089563 "setTime"
	public explicit_return_type "void"
	nparams 1
	  param in name "theTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the time represented by this {@code Timestamp} object to the
supplied time, defined as the number of milliseconds since the Epoch
(January 1 1970, 00:00:00.000 GMT).

@param theTime
           number of milliseconds since the Epoch (January 1 1970,
           00:00:00.000 GMT)."
      end

      operation 1089691 "setTimeImpl"
	private explicit_return_type "void"
	nparams 1
	  param in name "theTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1089819 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
    @Override
"
	
	
	
	comment "Returns the timestamp formatted as a String in the JDBC Timestamp Escape
format, which is {@code \"yyyy-MM-dd HH:mm:ss.nnnnnnnnn\"}.

@return A string representing the instant defined by the {@code
        Timestamp}, in JDBC Timestamp escape format."
      end

      classrelation 339099 // PADDING (<unidirectional association>)
	relation 339099 --->
	  a role_name "PADDING" init_value " \"000000000\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 339099 // PADDING (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1089947 "format"
	private explicit_return_type "void"
	nparams 3
	  param in name "date" explicit_type "int"
	  param in name "digits" explicit_type "int"
	  param inout name "sb" type class_ref 155163 // StringBuilder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private method to format the time"
      end

      operation 1090075 "valueOf"
	class_operation public return_type class_ref 222363 // Timestamp
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Timestamp} object with a time value equal to the time
specified by a supplied String holding the time in JDBC timestamp escape
format, which is {@code \"yyyy-MM-dd HH:mm:ss.nnnnnnnnn}\"

@param s
           the {@code String} containing a time in JDBC timestamp escape
           format.
@return A {@code Timestamp} object with time value as defined by the
        supplied {@code String}.
@throws IllegalArgumentException
            if the provided string is {@code null}."
      end

      operation 1090203 "badTimestampString"
	class_operation private return_type class_ref 128283 // IllegalArgumentException
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 222491 "RowId"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Maps SQL's ROWID type into Java.
@since 1.6"
      operation 1062811 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1062939 "getBytes"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of bytes representing the value of the corresponding SQL ROWID."
      end

      operation 1063067 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1063195 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 222619 "NClob"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 335771 // <generalisation>
	relation 335771 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 335771 // <generalisation>
	  b parent class_ref 221723 // Clob
      end
    end

    class 222747 "SQLXML"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Maps SQL's XML type into Java."
      operation 1084955 "free"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Frees any resources held by this object. After {@code free} is called, calling
method other than {@code free} will throw {@code SQLException} (calling {@code free}
repeatedly will do nothing).
@throws SQLException"
      end

      operation 1085083 "getBinaryStream"
	public return_type class_ref 131867 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream that can be used to read binary data from this SQL {@code XML} object.
@throws SQLException if an error occurs accessing the data"
      end

      operation 1085211 "setBinaryStream"
	public return_type class_ref 132635 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream that can be used to write binary data to this SQL {@code XML} object.
@throws SQLException if an error occurs accessing the data"
      end

      operation 1085339 "getCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reader that can be used to read character data from this SQL {@code XML} object.
@throws SQLException if an error occurs accessing the data"
      end

      operation 1085467 "setCharacterStream"
	public return_type class_ref 133531 // Writer
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a writer that can be used to write character data to this SQL {@code XML} object.
@throws SQLException if an error occurs accessing the data"
      end

      operation 1085595 "getString"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this object's data as an XML string.
@throws SQLException if an error occurs accessing the data"
      end

      operation 1085723 "setString"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this object's data to the given XML string.
@throws SQLException if an error occurs accessing the data"
      end

      operation 1085851 "getSource"
	public explicit_return_type "T"
	nparams 1
	  param inout name "sourceClass" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Source> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Source} for reading this object's data.
@throws SQLException if an error occurs accessing the data"
      end

      operation 1085979 "setResult"
	public explicit_return_type "T"
	nparams 1
	  param inout name "resultClass" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Result> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Result} for writing this object's data.
@throws SQLException if an error occurs accessing the data"
      end
    end

    class 222875 "ClientInfoStatus"
      visibility public stereotype "enum"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An enumeration to describe the reason why a property cannot be set by calling
Connection.setClientInfo.

@since 1.6"
      attribute 267163 "REASON_UNKNOWN"
	public type class_ref 222875 // ClientInfoStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 267291 "REASON_UNKNOWN_PROPERTY"
	public type class_ref 222875 // ClientInfoStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 267419 "REASON_VALUE_INVALID"
	public type class_ref 222875 // ClientInfoStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 267547 "REASON_VALUE_TRUNCATED"
	public type class_ref 222875 // ClientInfoStatus
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 223003 "DatabaseMetaData"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface which provides comprehensive information about the database
management system and its supported features.
<p>
This interface is implemented by JDBC driver vendors in order to provide
information about the underlying database capabilities in association with
the JDBC driver.
<p>
Some of the methods in this interface take string parameters which are
patterns. Within these string patterns, {@code '%'} and {@code '_'}
characters have special meanings. {@code '%'} means
\"match any substring of 0 or more characters\". {@code '_'} means
\"match any character\". Only metadata entries that match the pattern are
returned. If such a search pattern string is set to {@code null}, that
argument's criteria are dropped from the search."
      classrelation 333083 // <generalisation>
	relation 333083 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 333083 // <generalisation>
	  b parent class_ref 221083 // Wrapper
      end

      attribute 268315 "attributeNoNulls"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that it may not be permitted to store {@code NULL} values.
"
      end

      attribute 268443 "attributeNullable"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that {@code NULL} values are definitely permitted.
"
      end

      attribute 268571 "attributeNullableUnknown"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that whether {@code NULL} values are permitted is unknown.
"
      end

      attribute 268699 "bestRowNotPseudo"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States the best row identifier is <em>NOT</em> a pseudo column.
"
      end

      attribute 268827 "bestRowPseudo"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the best row identifier is a pseudo column.
"
      end

      attribute 268955 "bestRowSession"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the remainder of the current session is used as the scope for
the best row identifier.
"
      end

      attribute 269083 "bestRowTemporary"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that best row identifier scope lasts only while the row is being
used.
"
      end

      attribute 269211 "bestRowTransaction"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the remainder of the current transaction is used as the scope
for the best row identifier.
"
      end

      attribute 269339 "bestRowUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the best row identifier may or may not be a pseudo column.
"
      end

      attribute 269467 "columnNoNulls"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the column must not allow {@code NULL} values.
"
      end

      attribute 269595 "columnNullable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the column definitely allows {@code NULL} values.
"
      end

      attribute 269723 "columnNullableUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that it is unknown whether the columns may be nulled.
"
      end

      attribute 269851 "importedKeyCascade"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "For the column {@code UPDATE_RULE}, states that when the primary key is
updated, the foreign key (imported key) is changed accordingly.
"
      end

      attribute 269979 "importedKeyInitiallyDeferred"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the evaluation of foreign key constraints is deferred (delayed
until commit).
"
      end

      attribute 270107 "importedKeyInitiallyImmediate"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the evaluation of foreign key constraint is {@code IMMEDIATE}
.
"
      end

      attribute 270235 "importedKeyNoAction"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "For the columns {@code UPDATE_RULE} and {@code DELETE_RULE}, states that
if the primary key has been imported, it cannot be updated or deleted.
"
      end

      attribute 270363 "importedKeyNotDeferrable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the evaluation of foreign key constraint must not be {@code
DEFERRED}.
"
      end

      attribute 270491 "importedKeyRestrict"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that a primary key must not be updated when imported as a foreign
key by some other table. Used for the column {@code UPDATE_RULE}.
"
      end

      attribute 270619 "importedKeySetDefault"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that when the primary key is modified (updated or deleted) the
foreign (imported) key is changed to its default value. Applies to the
{@code UPDATE_RULE} and {@code DELETE_RULE} columns.
"
      end

      attribute 270747 "importedKeySetNull"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that when the primary key is modified (updated or deleted) the
foreign (imported) key is changed to {@code NULL}. Applies to the {@code
UPDATE_RULE} and {@code DELETE_RULE} columns.
"
      end

      attribute 270875 "procedureColumnIn"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the column stores {@code IN} type parameters.
"
      end

      attribute 271003 "procedureColumnInOut"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that this column stores {@code INOUT} type parameters.
"
      end

      attribute 271131 "procedureColumnOut"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that this column stores {@code OUT} type parameters.
"
      end

      attribute 271259 "procedureColumnResult"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the column stores results.
"
      end

      attribute 271387 "procedureColumnReturn"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the column stores return values.
"
      end

      attribute 271515 "procedureColumnUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that type of the column is unknown.
"
      end

      attribute 271643 "procedureNoNulls"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that {@code NULL} values are not permitted.
"
      end

      attribute 271771 "procedureNoResult"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the procedure does not return a result.
"
      end

      attribute 271899 "procedureNullable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that {@code NULL} values are permitted.
"
      end

      attribute 272027 "procedureNullableUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that it is unknown whether {@code NULL} values are permitted.
"
      end

      attribute 272155 "procedureResultUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that it is unknown whether or not the procedure returns a result.
"
      end

      attribute 272283 "procedureReturnsResult"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the procedure returns a result.
"
      end

      attribute 272411 "sqlStateSQL99"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the value is an SQL99 {@code SQLSTATE} value.
"
      end

      attribute 272539 "sqlStateXOpen"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the value is an SQL {@code CLI SQLSTATE} value as defined by
the X/Open standard.
"
      end

      attribute 272667 "tableIndexClustered"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that this table index is a clustered index.
"
      end

      attribute 272795 "tableIndexHashed"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that this table index is a hashed index.
"
      end

      attribute 272923 "tableIndexOther"
	class_attribute const_attribute public explicit_type "short"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States this table's index is neither a clustered index, not a hashed
index, and not a table statistics index; i.e. it is something else.
"
      end

      attribute 273051 "tableIndexStatistic"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States this column has the table's statistics, and that it is returned in
conjunction with the table's index description.
"
      end

      attribute 273179 "typeNoNulls"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that a {@code NULL} value is <em>NOT</em> permitted for
this data type.
"
      end

      attribute 273307 "typeNullable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that a {@code NULL} value is permitted for this data type.
"
      end

      attribute 273435 "typeNullableUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that it is unknown if a {@code NULL} value is permitted for
this data type.
"
      end

      attribute 273563 "typePredBasic"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that this column shall not be used for {@code WHERE} statements
with a {@code LIKE} clause.
"
      end

      attribute 273691 "typePredChar"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that this column can only be used in a {@code WHERE...LIKE}
statement.
"
      end

      attribute 273819 "typePredNone"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that this column does not support searches.
"
      end

      attribute 273947 "typeSearchable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the column is searchable.
"
      end

      attribute 274075 "versionColumnNotPseudo"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the version column is known to be not a pseudo column.
"
      end

      attribute 274203 "versionColumnPseudo"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that this version column is known to be a pseudo column.
"
      end

      attribute 274331 "versionColumnUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the version column may be a pseudo column or not.
"
      end

      attribute 274459 "sqlStateSQL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the method DatabaseMetaData.getSQLStateType may returns an
SQLSTATE value or not.
"
      end

      attribute 274587 "functionColumnIn"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the parameter or column is an IN parameter
"
      end

      attribute 274715 "functionColumnInOut"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the parameter or column is an INOUT parameter
"
      end

      attribute 274843 "functionColumnOut"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the parameter or column is an OUT parameter
"
      end

      attribute 274971 "functionReturn"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the parameter or column is a return value
"
      end

      attribute 275099 "functionColumnUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the parameter of function is unknown
"
      end

      attribute 275227 "functionColumnResult"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the parameter or column is a column in a result set
"
      end

      attribute 275355 "functionNoNulls"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that NULL values are not allowed
"
      end

      attribute 275483 "functionNullable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that NULL values are allowed
"
      end

      attribute 275611 "functionNullableUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that whether NULL values are allowed is unknown
"
      end

      attribute 275739 "functionResultUnknown"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that it is not known whether the function returns a result or a
table
"
      end

      attribute 275867 "functionNoTable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the function does not return a table
"
      end

      attribute 275995 "functionReturnsTable"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "States that the function returns a table.
"
      end

      operation 1000603 "allProceduresAreCallable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether all procedures returned by {@link #getProcedures} can be
called by the current user.

@return {@code true} if all procedures can be called by the current user,
        {@code false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1000731 "allTablesAreSelectable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether all the tables returned by {@code getTables} can be used
by the current user in a {@code SELECT} statement.

@return {@code true} if all the tables can be used,{@code false}
        otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1000859 "dataDefinitionCausesTransactionCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether a data definition statement in a transaction forces a {@code
commit} of the transaction.

@return {@code true} if the statement forces a commit, {@code false}
        otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1000987 "dataDefinitionIgnoredInTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the database ignores data definition statements within a
transaction.

@return {@code true} if the database ignores a data definition statement,
        {@code false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1001115 "deletesAreDetected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether a visible row delete can be detected by calling
{@link ResultSet#rowDeleted}.

@param type
           the type of the {@code ResultSet} involved: {@code
           ResultSet.TYPE_FORWARD_ONLY}, {@code
           ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
           ResultSet.TYPE_SCROLL_SENSITIVE}
@return {@code true} if the visible row delete can be detected, {@code
        false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1001243 "doesMaxRowSizeIncludeBlobs"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the return value of {@code getMaxRowSize} includes the
SQL data types {@code LONGVARCHAR} and {@code LONGVARBINARY}.

@return {@code true} if the return value includes {@code LONGVARBINARY}
        and {@code LONGVARCHAR}, otherwise {@code false}.
@throws SQLException
            if there is a database error."
      end

      operation 1001371 "getAttributes"
	public return_type class_ref 220187 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "typeNamePattern" type class_ref 3399692 // String
	  param inout name "attributeNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code ResultSet} describing a subset of the attributes of a
specified SQL User Defined Type (UDT) for a specified schema and catalog.
The subset is determined by restricting to those attributes whose
name matches the {@code attributeNamePattern} and whose type name
matches the {@code typeNamePattern}. Each row of the {@code ResultSet}
describes one attribute, and the rows are ordered by the columns {@code TYPE_SCHEM},
{@code TYPE_NAME} and {@code ORDINAL_POSITION}. Inherited attributes
are not included.
<p>
The columns of the returned {@code ResultSet} object have the following
names and meanings:
<ol>
<li>{@code TYPE_CAT} - String - the type catalog name (possibly {@code
null})</li>
<li>{@code TYPE_SCHEM} - String - the type schema name (possibly {@code
null})</li>
<li>{@code TYPE_NAME} - String - the type name</li>
<li>{@code ATTR_NAME} - String - the attribute name</li>
<li>{@code DATA_TYPE} - int - the attribute type as defined in {@code
java.sql.Types}</li>
<li>{@code ATTR_TYPE_NAME} - String - the attribute type name. This
depends on the data source. For a {@code UDT} the name is fully
qualified. For a {@code REF} it is both fully qualified and represents
the target type of the reference.</li>
<li>{@code ATTR_SIZE} - int - the column size. When referring to char and
date types this value is the maximum number of characters. When referring
to numeric types is is the precision.</li>
<li>{@code DECIMAL_DIGITS} - int - how many fractional digits are
supported</li>
<li>{@code NUM_PREC_RADIX} - int - numeric values radix</li>
<li>{@code NULLABLE} - int - whether {@code NULL} is permitted:
<ul>
<li>DatabaseMetaData.attributeNoNulls - {@code NULL} values not permitted</li>
<li>DatabaseMetaData.attributeNullable - {@code NULL} values definitely
permitted</li>
<li>DatabaseMetaData.attributeNullableUnknown - unknown</li>
</ul>
</li>
<li>{@code REMARKS} - String - a comment describing the attribute
(possibly {@code null})</li>
<li>ATTR_DEF - String - Default value for the attribute (possibly {@code
null})</li>
<li>{@code SQL_DATA_TYPE} - int - not used</li>
<li>SQL_DATETIME_SUB - int - not used</li>
<li>CHAR_OCTET_LENGTH - int - for {@code CHAR} types, the max number of
bytes in the column</li>
<li>ORDINAL_POSITION - int - The index of the column in the table (where
the count starts from 1, not 0)</li>
<li>IS_NULLABLE - String - {@code \"NO\"} = the column does not allow {@code
NULL}s, {@code \"YES\"} = the column allows {@code NULL}s, \"\" = status unknown</li>
<li>{@code SCOPE_CATALOG} - String - if the {@code DATA_TYPE} is {@code REF},
this gives the catalog of the table corresponding to the attribute's scope.
NULL if the {@code DATA_TYPE} is not REF.</li>
<li>{@code SCOPE_SCHEMA} - String - if the {@code DATA_TYPE} is {@code REF},
this gives the schema of the table corresponding to the attribute's scope.
NULL if the {@code DATA_TYPE} is not REF.</li>
<li>{@code SCOPE_TABLE} - String - if the {@code DATA_TYPE} is {@code REF},
this gives the name of the table corresponding to the attribute's scope.
NULL if the {@code DATA_TYPE} is not REF.</li>
<li>{@code SOURCE_DATA_TYPE} - String - The source type for a user
generated REF type or for a Distinct type. ({@code NULL} if {@code
DATA_TYPE} is not DISTINCT or a user generated REF)</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schemaPattern
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search by a schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param typeNamePattern
           a type name. This pattern must match the type name stored in
           the database.
@param attributeNamePattern
           an Attribute name. This pattern must match the attribute name as stored in
           the database.
@return a {@code ResultSet}, where each row is an attribute description.
@throws SQLException
            if there is a database error."
      end

      operation 1001499 "getBestRowIdentifier"
	public return_type class_ref 220187 // ResultSet
	nparams 5
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schema" type class_ref 3399692 // String
	  param inout name "table" type class_ref 3399692 // String
	  param in name "scope" explicit_type "int"
	  param inout name "nullable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of a table's optimal set of columns that uniquely
identify the rows. The results are ordered by {@code SCOPE} (see below).
<p>
The results are returned as a table, with one entry for each column, as
follows:
<ol>
<li>{@code SCOPE} - short - the {@code SCOPE} of the result, as follows:
<ul>
<li>{@code DatabaseMetaData.bestRowTemporary} - the result is very temporary,
only valid while on the current row</li>
<li>{@code DatabaseMetaData.bestRowTransaction} - the result is good for remainder of
current transaction</li>
<li>{@code DatabaseMetaData.bestRowSession} - the result is good for remainder of
database session</li>
</ul>
</li>
<li>{@code COLUMN_NAME} - String - the column name</li>
<li>{@code DATA_TYPE} - int - the Type of the data, as defined in {@code
java.sql.Types}</li>
<li>{@code TYPE_NAME} - String - the Name of the type - database dependent.
For UDT types the name is fully qualified</li>
<li>{@code COLUMN_SIZE} - int - the precision of the data in the column</li>
<li>{@code BUFFER_LENGTH} - int - not used</li>
<li>{@code DECIMAL_DIGITS} - short - number of fractional digits</li>
<li>{@code PSEUDO_COLUMN} - short - whether this is a pseudo column (e.g.
an Oracle {@code ROWID}):
<ul>
<li>{@code DatabaseMetaData.bestRowUnknown} - it is not known whether this is
a pseudo column</li>
<li>{@code DatabaseMetaData.bestRowNotPseudo} - the column is not pseudo</li>
<li>{@code DatabaseMetaData.bestRowPseudo} - the column is a pseudo column</li>
</ul>
</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schema
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search by schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param table
           the table name. This must match the name of the table as
           declared in the database.
@param scope
           the {@code SCOPE} of interest, values as defined above.
@param nullable
           {@code true} = include columns that are nullable, {@code
           false} = do not include nullable columns.
@return a {@code ResultSet} where each row is a description of a column
        and the complete set of rows is the optimal set for this table.
@throws SQLException
            if there is a database error."
      end

      operation 1001627 "getCatalogs"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of catalog names available in this database. The set is
returned ordered by catalog name.

@return a {@code ResultSet} containing the catalog names, with each row
        containing one catalog name (as a {@code String}) in the
        single column named {@code TABLE_CAT}.
@throws SQLException
            if there is a database error."
      end

      operation 1001755 "getCatalogSeparator"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the separator that this database uses between a catalog name and
table name.

@return a String containing the separator.
@throws SQLException
            if there is a database error."
      end

      operation 1001883 "getCatalogTerm"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the term that the database vendor prefers term for \"catalog\".

@return a String with the vendor's term for \"catalog\".
@throws SQLException
            if there is a database error."
      end

      operation 1002011 "getColumnPrivileges"
	public return_type class_ref 220187 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schema" type class_ref 3399692 // String
	  param inout name "table" type class_ref 3399692 // String
	  param inout name "columnNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a description of access rights for a table's columns. Only access
rights matching the criteria for the column name are returned.
<p>
The description is returned as a {@code ResultSet} with rows of data for
each access right, with columns as follows:
<ol>
<li>{@code TABLE_CAT} - String - the catalog name (possibly {@code null})</li>
<li>{@code TABLE_SCHEM} - String - the schema name (possibly {@code null})</li>
<li>{@code TABLE_NAME} - String - the table name</li>
<li>{@code COLUMN_NAME} - String - the Column name</li>
<li>{@code GRANTOR} - String - the grantor of access (possibly {@code
null})</li>
<li>{@code PRIVILEGE} - String - Access right - one of SELECT, INSERT,
UPDATE, REFERENCES,...</li>
<li>{@code IS_GRANTABLE} - String - {@code \"YES\"} implies that the
receiver can grant access to others, {@code \"NO\"} if the receiver cannot
grant access to others, {@code null} if unknown.</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schema
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search by schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param table
           the table name. This must match the name of the table as
           declared in the database.
@param columnNamePattern
           the column name. This must match the name of a column in the
           table in the database.
@return a {@code ResultSet} containing the access rights, one row for
        each privilege description.
@throws SQLException
            if there is a database error."
      end

      operation 1002139 "getColumns"
	public return_type class_ref 220187 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "tableNamePattern" type class_ref 3399692 // String
	  param inout name "columnNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a description of table columns available in a specified catalog.
Only descriptions meeting the specified catalog, schema, table, and column
names are returned.
<p>
The descriptions are returned as a {@code ResultSet} conforming to the
following data layout, with one row per table column:
<ol>
<li>{@code TABLE_CAT} - String - the catalog name (possibly {@code null})</li>
<li>{@code TABLE_SCHEM} - String - the schema name (possibly {@code null})</li>
<li>{@code TABLE_NAME} - String - the table name</li>
<li>{@code COLUMN_NAME} - String - the column name</li>
<li>{@code DATA_TYPE} - int - the SQL type as specified in {@code
java.sql.Types}</li>
<li>{@code TYPE_NAME} - String - the name of the data type, (database-dependent,
UDT names are fully qualified)</li>
<li>{@code COLUMN_SIZE} - int - the column size (the precision for numeric
types, max characters for {@code char} and {@code date} types)</li>
<li>{@code BUFFER_LENGTH} - int - Not used</li>
<li>{@code DECIMAL_DIGITS} - int - maximum number of fractional digits</li>
<li>{@code NUM_PREC_RADIX} - int - the radix for numerical types</li>
<li>{@code NULLABLE} - int - whether the column allows {@code null}s:
<ul>
<li>DatabaseMetaData.columnNoNulls = may not allow {@code NULL}s</li>
<li>DatabaseMetaData.columnNullable = does allow {@code NULL}s</li>
<li>DatabaseMetaData.columnNullableUnknown = unknown {@code NULL} status</li>
</ul>
</li>
<li>{@code REMARKS} - String - A description of the column (possibly
{@code null})</li>
<li>{@code COLUMN_DEF} - String - Default value for the column (possibly
{@code null})</li>
<li>{@code SQL_DATA_TYPE} - int - not used</li>
<li>{@code SQL_DATETIME_SUB} - int - not used</li>
<li>{@code CHAR_OCTET_LENGTH} - int - maximum number of bytes in the
{@code char} type columns</li>
<li>{@code ORDINAL_POSITION} - int - the column index in the table (1 based)</li>
<li>{@code IS_NULLABLE} - String - {@code \"NO\"} = column does not allow
NULLs, {@code \"YES\"} = column allows NULLs, \"\" = {@code NULL} status
unknown</li>
<li>{@code SCOPE_CATALOG} - String - if the {@code DATA_TYPE} is {@code REF},
this gives the catalog of the table corresponding to the attribute's scope.
NULL if the {@code DATA_TYPE} is not REF.</li>
<li>{@code SCOPE_SCHEMA} - String - if the {@code DATA_TYPE} is {@code REF},
this gives the schema of the table corresponding to the attribute's scope.
NULL if the {@code DATA_TYPE} is not REF.</li>
<li>{@code SCOPE_TABLE} - String - if the {@code DATA_TYPE} is {@code REF},
this gives the name of the table corresponding to the attribute's scope.
NULL if the {@code DATA_TYPE} is not REF.</li>
<li>{@code SOURCE_DATA_TYPE} - String - The source type for a user
generated REF type or for a Distinct type. ({@code NULL} if {@code
DATA_TYPE} is not DISTINCT or a user generated REF)</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schemaPattern
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search by schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param tableNamePattern
           the table name. This must match the name of the table as
           declared in the database.
@param columnNamePattern
           the column name. This must match the name of a column in the
           table in the database.
@return the descriptions as a {@code ResultSet} with rows in the form
        defined above.
@throws SQLException
            if there is a database error."
      end

      operation 1002267 "getConnection"
	public return_type class_ref 221211 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the database connection that created this metadata.

@return the connection to the database.
@throws SQLException
            if there is a database error."
      end

      operation 1002395 "getCrossReference"
	public return_type class_ref 220187 // ResultSet
	nparams 6
	  param inout name "primaryCatalog" type class_ref 3399692 // String
	  param inout name "primarySchema" type class_ref 3399692 // String
	  param inout name "primaryTable" type class_ref 3399692 // String
	  param inout name "foreignCatalog" type class_ref 3399692 // String
	  param inout name "foreignSchema" type class_ref 3399692 // String
	  param inout name "foreignTable" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of foreign key columns in a given foreign key table that
reference the primary key columns of a supplied primary key table. This
describes how one table imports the key of another table. It would be
expected to return a single foreign key - primary key pair in most cases.
<p>
The descriptions are returned as a {@code ResultSet} with one row for
each foreign key, with the following layout:
<ol>
<li>{@code PKTABLE_CAT} - String - from the primary key table : Catalog
(possibly {@code null})</li>
<li>{@code PKTABLE_SCHEM} - String - from the primary key table : Schema
(possibly {@code null})</li>
<li>{@code PKTABLE_NAME} - String - from the primary key table : name</li>
<li>{@code PKCOLUMN_NAME} - String - from the primary key column : name</li>
<li>{@code FKTABLE_CAT} - String - from the foreign key table : the
catalog name being exported (possibly {@code null})</li>
<li>{@code FKTABLE_SCHEM} - String - from the foreign key table : the schema name
being exported (possibly {@code null})</li>
<li>{@code FKTABLE_NAME} - String - from the foreign key table : the name being
exported</li>
<li>{@code FKCOLUMN_NAME} - String - from the foreign key column : the name being
exported</li>
<li>{@code KEY_SEQ} - short - the sequence number (in the foreign key)</li>
<li>{@code UPDATE_RULE} - short - a value giving the rule for how to treat the corresponding foreign key when a primary
key is updated:
<ul>
<li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the
primary key to be updated if it is imported as a foreign key</li>
<li>{@code DatabaseMetaData.importedKeyCascade} - change the imported key to
match the updated primary key</li>
<li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
{@code null}</li>
<li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
to its default value</li>
<li>{@code DatabaseMetaData.importedKeyRestrict} - same as {@code
importedKeyNoAction}</li>
</ul>
</li>
<li>{@code DELETE_RULE} - short - a value giving the rule for how to treat the foreign key when the corresponding primary
key is deleted:
<ul>
<li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the
primary key to be deleted if it is imported as a foreign key</li>
<li>{@code DatabaseMetaData.importedKeyCascade} - delete those rows that
import a deleted key</li>
<li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
{@code null}</li>
<li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
to its default value</li>
<li>{@code DatabaseMetaData.importedKeyRestrict} - same as
importedKeyNoAction</li>
</ul>
</li>
<li>{@code FK_NAME} - String - the foreign key name (possibly {@code null})</li>
<li>{@code PK_NAME} - String - the primary key name (possibly {@code null})</li>
<li>{@code DEFERRABILITY} - short - whether foreign key constraints can be
deferred until commit (see the SQL92 specification for definitions):
<ul>
<li>{@code DatabaseMetaData.importedKeyInitiallyDeferred}</li>
<li>{@code DatabaseMetaData.importedKeyInitiallyImmediate}</li>
<li>{@code DatabaseMetaData.importedKeyNotDeferrable}</li>
</ul>
</li>
</ol>

@param primaryCatalog
           a catalog name for the primary key table. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param primarySchema
           a schema name for the primary key table. {@code null} is used to imply no narrowing of
           the search by schema name. Otherwise, the name must match a
           schema name in the database, with \"\" used to retrieve those
           without a schema name.
@param primaryTable
           the name of the table which exports the key. It must match the
           name of the table in the database.
@param foreignCatalog
           a catalog name for the foreign key table. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param foreignSchema
           a schema name for the foreign key table. {@code null} is used to imply no narrowing of
           the search by schema name. Otherwise, the name must match a
           schema name in the database, with \"\" used to retrieve those
           without a schema name.
@param foreignTable
           the name of the table importing the key. It must match the
           name of the table in the database.
@return a {@code ResultSet} containing rows with the descriptions of the
        foreign keys laid out according to the format defined above.
@throws SQLException
            if there is a database error."
      end

      operation 1002523 "getDatabaseMajorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the major version number of the database software.

@return the major version number of the database software.
@throws SQLException
            a database error occurred."
      end

      operation 1002651 "getDatabaseMinorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minor version number of the database software.

@return the minor version number of the database software.
@throws SQLException
            a database error occurred."
      end

      operation 1002779 "getDatabaseProductName"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the database software.

@return a {@code String} with the name of the database software.
@throws SQLException
            a database error occurred."
      end

      operation 1002907 "getDatabaseProductVersion"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version number of this database software.

@return a {@code String} with the version number of the database
        software.
@throws SQLException
            a database error occurred."
      end

      operation 1003035 "getDefaultTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default transaction isolation level for this database.

@return the default transaction isolation level. One of the following values:
        <ul>
        <li>{@code TRANSACTION_NONE}</li>
        <li>{@code TRANSACTION_READ_COMMITTED}</li>
        <li>{@code TRANSACTION_READ_UNCOMMITTED}</li>
        <li>{@code TRANSACTION_REPEATABLE_READ}</li>
        <li>{@code TRANSACTION_SERIALIZABLE}</li>
        </ul>
@throws SQLException
            a database error occurred."
      end

      operation 1003163 "getDriverMajorVersion"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JDBC driver's major version number.

@return the driver's major version number."
      end

      operation 1003291 "getDriverMinorVersion"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JDBC driver's minor version number.

@return the driver's minor version number."
      end

      operation 1003419 "getDriverName"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this JDBC driver.

@return a {@code String} containing the name of the JDBC driver
@throws SQLException
            a database error occurred."
      end

      operation 1003547 "getDriverVersion"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version number of this JDBC driver.

@return a {@code String} containing the complete version number of the
        JDBC driver.
@throws SQLException
            a database error occurred."
      end

      operation 1003675 "getExportedKeys"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schema" type class_ref 3399692 // String
	  param inout name "table" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of the foreign key columns that reference the primary key
columns of a specified table (the foreign keys exported by a table).
<p>
The list is returned as a {@code ResultSet} with a row for each of the
foreign key columns, ordered by {@code FKTABLE_CAT}, {@code
FKTABLE_SCHEM}, {@code FKTABLE_NAME}, and {@code KEY_SEQ}, with the
format for each row being:
<ol>
<li>{@code PKTABLE_CAT} - String - from the primary key table : the catalog (possibly
{@code null})</li>
<li>{@code PKTABLE_SCHEM} - String - from the primary key table : the schema (possibly
{@code null})</li>
<li>{@code PKTABLE_NAME} - String - from the primary key table : the name</li>
<li>{@code PKCOLUMN_NAME} - String - from the primary key column : the name</li>
<li>{@code FKTABLE_CAT} - String - from the foreign key table : the catalog name being
exported (possibly {@code null})</li>
<li>{@code FKTABLE_SCHEM} - String - from the foreign key table : the schema name
being exported (possibly {@code null})</li>
<li>{@code FKTABLE_NAME} - String - from the foreign key table : the name being
exported</li>
<li>{@code FKCOLUMN_NAME} - String - from the foreign key column : the name being
exported</li>
<li>{@code KEY_SEQ} - short - the sequence number (in the foreign key)</li>
<li>{@code UPDATE_RULE} - short - a value giving the rule for how to treat the foreign key when the corresponding primary
key is updated:
<ul>
<li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the
primary key to be updated if it is imported as a foreign key</li>
<li>{@code DatabaseMetaData.importedKeyCascade} - change the imported key to
match the primary key update</li>
<li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
{@code null}</li>
<li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
to its default value</li>
<li>{@code DatabaseMetaData.importedKeyRestrict} - same as
importedKeyNoAction</li>
</ul>
</li>
<li>{@code DELETE_RULE} - short - how to treat the foreign key when the corresponding primary
key is deleted:
<ul>
<li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the
primary key to be deleted if it is imported as a foreign key</li>
<li>{@code DatabaseMetaData.importedKeyCascade} - the deletion should
also delete rows that import a deleted key</li>
<li>{@code DatabaseMetaData.importedKeySetNull} - the deletion sets the
imported key to {@code null}</li>
<li>{@code DatabaseMetaData.importedKeySetDefault} - the deletion sets the
imported key to its default value</li>
<li>{@code DatabaseMetaData.importedKeyRestrict} - same as
importedKeyNoAction</li>
</ul>
</li>
<li>{@code FK_NAME} - String - the foreign key name (possibly {@code null})</li>
<li>{@code PK_NAME} - String - the primary key name (possibly {@code null})</li>
<li>{@code DEFERRABILITY} - short - defines whether the foreign key
constraints can be deferred until commit (see the SQL92 specification for
definitions):
<ul>
<li>{@code DatabaseMetaData.importedKeyInitiallyDeferred}</li>
<li>{@code DatabaseMetaData.importedKeyInitiallyImmediate}</li>
<li>{@code DatabaseMetaData.importedKeyNotDeferrable}</li>
</ul>
</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schema
           a schema name. {@code null} is used to imply no narrowing of
           the search by schema name. Otherwise, the name must match a
           schema name in the database, with \"\" used to retrieve those
           without a schema name.
@param table
           a table name, which must match the name of a table in the
           database
@return a {@code ResultSet} containing a row for each of the foreign key
        columns, as defined above
@throws SQLException
            a database error occurred"
      end

      operation 1003803 "getExtraNameCharacters"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string of characters that may be used in unquoted identifier
names. The characters {@code a-z}, {@code A-Z}, {@code 0-9} and {@code _}
are always permitted.

@return a String containing all the additional permitted characters.
@throws SQLException
            a database error occurred."
      end

      operation 1003931 "getIdentifierQuoteString"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string used to quote SQL identifiers. Returns \" \" (space) if
identifier quoting not supported.

@return the String used to quote SQL identifiers.
@throws SQLException
            a database error occurred."
      end

      operation 1004059 "getImportedKeys"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schema" type class_ref 3399692 // String
	  param inout name "table" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list columns in a table that are both primary keys and
referenced by the table's foreign key columns (that is, the primary keys
imported by a table).
<p>
The list returned is a {@code ResultSet} with a row entry for each
primary key column, ordered by {@code PKTABLE_CAT}, {@code PKTABLE_SCHEM},
{@code PKTABLE_NAME}, and {@code KEY_SEQ}, with the following format:
<ol>
<li>{@code PKTABLE_CAT} - String - primary key catalog name being
imported (possibly {@code null})</li>
<li>{@code PKTABLE_SCHEM} - String - primary key schema name being
imported (possibly {@code null})</li>
<li>{@code PKTABLE_NAME} - String - primary key table name being imported
</li>
<li>{@code PKCOLUMN_NAME} - String - primary key column name being
imported</li>
<li>{@code FKTABLE_CAT} - String - foreign key table catalog name
(possibly {@code null})</li>
<li>{@code FKTABLE_SCHEM} - String - foreign key table schema name
(possibly {@code null})</li>
<li>{@code FKTABLE_NAME} - String - foreign key table name</li>
<li>{@code FKCOLUMN_NAME} - String - foreign key column name</li>
<li>{@code KEY_SEQ} - short - sequence number (in the foreign key)</li>
<li>{@code UPDATE_RULE} - short - how to treat the foreign key when the corresponding primary
key is updated:
<ul>
<li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow any update of
the primary key if it is imported as a foreign key</li>
<li>{@code DatabaseMetaData.importedKeyCascade} - change imported key to
match the primary key update</li>
<li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
{@code null}</li>
<li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
to its default value</li>
<li>{@code DatabaseMetaData.importedKeyRestrict} - same as
importedKeyNoAction</li>
</ul>
</li>
<li>{@code DELETE_RULE} - short - how to treat the foreign key when the corresponding primary
key is deleted:
<ul>
<li>{@code DatabaseMetaData.importedKeyNoAction} - don't allow the primary key to be deleted
if it is imported as a foreign key</li>
<li>{@code DatabaseMetaData.importedKeyCascade} - delete those rows that
import a deleted key</li>
<li>{@code DatabaseMetaData.importedKeySetNull} - set the imported key to
{@code null}</li>
<li>{@code DatabaseMetaData.importedKeySetDefault} - set the imported key
to its default value</li>
<li>{@code DatabaseMetaData.importedKeyRestrict} - same as {@code
importedKeyNoAction}</li>
</ul>
</li>
<li>{@code FK_NAME} - String - foreign key name (possibly {@code null})</li>
<li>{@code PK_NAME} - String - primary key name (possibly {@code null})</li>
<li>{@code DEFERRABILITY} - short - defines whether foreign key
constraints can be deferred until commit (see SQL92 specification for
definitions):
<ul>
<li>{@code DatabaseMetaData.importedKeyInitiallyDeferred}</li>
<li>{@code DatabaseMetaData.importedKeyInitiallyImmediate}</li>
<li>{@code DatabaseMetaData.importedKeyNotDeferrable}</li>
</ul>
</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schema
           a schema name. {@code null} is used to imply no narrowing of
           the search by schema name. Otherwise, the name must match a
           schema name in the database, with \"\" used to retrieve those
           without a schema name.
@param table
           a table name, which must match the name of a table in the
           database.
@return a {@code ResultSet} containing the list of primary key columns as
        rows in the format defined above.
@throws SQLException
            a database error occurred."
      end

      operation 1004187 "getIndexInfo"
	public return_type class_ref 220187 // ResultSet
	nparams 5
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schema" type class_ref 3399692 // String
	  param inout name "table" type class_ref 3399692 // String
	  param inout name "unique" explicit_type "boolean"
	  param inout name "approximate" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of indices and statistics for a specified table.
<p>
The list is returned as a {@code ResultSet}, with one row for each index
or statistic. The list is ordered by {@code NON_UNIQUE}, {@code TYPE},
{@code INDEX_NAME}, and {@code ORDINAL_POSITION}. Each row has the
following format:
<ol>
<li>{@code TABLE_CAT} - String - table catalog name (possibly {@code
null})</li>
<li>{@code TABLE_SCHEM} - String - table schema name (possibly {@code
null})</li>
<li>{@code TABLE_NAME} - String - The table name</li>
<li>{@code NON_UNIQUE} - boolean - {@code true} when index values can be
non-unique. Must be {@code false} when the TYPE is tableIndexStatistic</li>
<li>{@code INDEX_QUALIFIER} - String : index catalog name. {@code null}
when the TYPE is 'tableIndexStatistic'</li>
<li>{@code INDEX_NAME} - String : index name. {@code null} when TYPE is
'tableIndexStatistic'</li>
<li>{@code TYPE} - short - the index type. One of:
<ul>
<li>{@code DatabaseMetaData.tableIndexStatistic} - table statistics
returned with Index descriptions</li>
<li>{@code DatabaseMetaData.tableIndexClustered} - a clustered Index</li>
<li>{@code DatabaseMetaData.tableIndexHashed} - a hashed Index</li>
<li>{@code DatabaseMetaData.tableIndexOther} - other style of Index</li>
</ul>
</li>
<li>{@code ORDINAL_POSITION} - short - column sequence within Index. 0
when TYPE is tableIndexStatistic</li>
<li>{@code COLUMN_NAME} - String - the column name. {@code null} when
TYPE is tableIndexStatistic</li>
<li>{@code ASC_OR_DESC} - String - column sort sequence. {@code null} if
sequencing not supported or TYPE is tableIndexStatistic; otherwise \"A\"
means sort ascending and \"D\" means sort descending.</li>
<li>{@code CARDINALITY} - int - Number of unique values in the Index. If
TYPE is tableIndexStatistic, this is number of rows in the table.</li>
<li>{@code PAGES} - int - Number of pages for current Index. If TYPE is
tableIndexStatistic, this is number of pages used for the table.</li>
<li>{@code FILTER_CONDITION} - String - Filter condition. (possibly null)
</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schema
           a schema name. {@code null} is used to imply no narrowing of
           the search by schema name. Otherwise, the name must match a
           schema name in the database, with \"\" used to retrieve those
           without a schema name.
@param table
           a table name, which must match the name of a table in the
           database.
@param unique
           {@code true} means only return indices for unique values,
           {@code false} implies that they can be returned even if not
           unique.
@param approximate
           {@code true} implies that the list can contain approximate or
           \"out of data\" values, {@code false} implies that all values
           must be precisely accurate
@return a {@code ResultSet} containing the list of indices and statistics
        for the table, in the format defined above.
@throws SQLException
            a database error occurred."
      end

      operation 1004315 "getJDBCMajorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this driver's major JDBC version number.

@return the major JDBC version number.
@throws SQLException
            a database error occurred."
      end

      operation 1004443 "getJDBCMinorVersion"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minor JDBC version number for this driver.

@return the Minor JDBC Version Number.
@throws SQLException
            a database error occurred."
      end

      operation 1004571 "getMaxBinaryLiteralLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the maximum number of hex characters in an in-line binary literal for
this database.

@return the maximum number of hex characters in an in-line binary
        literal. If the number is unlimited then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1004699 "getMaxCatalogNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum size of a catalog name in this database.

@return the maximum size in characters for a catalog name. If the limit
        is unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1004827 "getMaxCharLiteralLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum size for a character literal in this database.

@return the maximum size in characters for a character literal. If the
        limit is unknown, or the value is unlimited, then the result is
        zero.
@throws SQLException
            a database error occurred."
      end

      operation 1004955 "getMaxColumnNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum size for a Column name for this database.

@return the maximum number of characters for a Column name. If the limit
        is unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1005083 "getMaxColumnsInGroupBy"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the maximum number of columns in a {@code GROUP BY} clause for this
database.

@return the maximum number of columns in a {@code GROUP BY} clause. If
        the limit is unknown, or the value is unlimited, then the result
        is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1005211 "getMaxColumnsInIndex"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of columns in an Index for this database.

@return the maximum number of columns in an Index. If the limit is
        unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1005339 "getMaxColumnsInOrderBy"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of columns in an {@code ORDER BY} clause for
this database.

@return the maximum number of columns in an {@code ORDER BY} clause. If
        the limit is unknown, or the value is unlimited, then the result
        is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1005467 "getMaxColumnsInSelect"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of columns in a {@code SELECT} list for this
database.

@return the maximum number of columns in a {@code SELECT} list. If the
        limit is unknown, or the value is unlimited, then the result is
        zero.
@throws SQLException
            a database error occurred."
      end

      operation 1005595 "getMaxColumnsInTable"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of columns in a table for this database.

@return the maximum number of columns in a table. If the limit is
        unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1005723 "getMaxConnections"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the database's maximum number of concurrent connections.

@return the maximum number of connections. If the limit is unknown, or
        the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1005851 "getMaxCursorNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum length of a cursor name for this database.

@return the maximum number of characters in a cursor name. If the limit
        is unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1005979 "getMaxIndexLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum length in bytes for an Index for this database. This
covers all the parts of a composite index.

@return the maximum length in bytes for an Index. If the limit is
        unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1006107 "getMaxProcedureNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of characters for a procedure name in this
database.

@return the maximum number of character for a procedure name. If the
        limit is unknown, or the value is unlimited, then the result is
        zero.
@throws SQLException
            a database error occurred."
      end

      operation 1006235 "getMaxRowSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of bytes within a single row for this
database.

@return the maximum number of bytes for a single row. If the limit is
        unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1006363 "getMaxSchemaNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of characters in a schema name for this
database.

@return the maximum number of characters in a schema name. If the limit
        is unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1006491 "getMaxStatementLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of characters in an SQL statement for this
database.

@return the maximum number of characters in an SQL statement. If the
        limit is unknown, or the value is unlimited, then the result is
        zero.
@throws SQLException
            a database error occurred."
      end

      operation 1006619 "getMaxStatements"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the maximum number of simultaneously open active statements for this
database.

@return the maximum number of open active statements. If the limit is
        unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1006747 "getMaxTableNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum size for a table name in the database.

@return the maximum size in characters for a table name. If the limit is
        unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1006875 "getMaxTablesInSelect"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of tables permitted in a {@code SELECT}
statement for the database.

@return the maximum number of tables permitted in a {@code SELECT}
        statement. If the limit is unknown, or the value is unlimited,
        then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1007003 "getMaxUserNameLength"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of characters in a user name for the database.

@return the maximum number of characters in a user name. If the limit is
        unknown, or the value is unlimited, then the result is zero.
@throws SQLException
            a database error occurred."
      end

      operation 1007131 "getNumericFunctions"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of the math functions available with this database. These
are used in the JDBC function escape clause and are the Open Group CLI
math function names.

@return a String which contains the list of math functions as a comma
        separated list.
@throws SQLException
            a database error occurred."
      end

      operation 1007259 "getPrimaryKeys"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schema" type class_ref 3399692 // String
	  param inout name "table" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of the primary key columns of a specified table.
<p>
The list is returned as a {@code ResultSet} with one row for each primary
key column, ordered by {@code COLUMN_NAME}, with each row having the
structure as follows:
<ol>
<li>{@code TABLE_CAT} - String - table catalog name (possibly null)</li>
<li>{@code TABLE_SCHEM} - String - table schema name (possibly null)</li>
<li>{@code TABLE_NAME} - String - The table name</li>
<li>{@code COLUMN_NAME} - String - The column name</li>
<li>{@code KEY_SEQ} - short - the sequence number for this column in the
primary key</li>
<li>{@code PK_NAME} - String - the primary key name (possibly null)</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with the empty string used
           to retrieve those without a catalog name.
@param schema
           a schema name. {@code null} is used to imply no narrowing of
           the search by schema name. Otherwise, the name must match a
           schema name in the database, with the empty string used to
           retrieve those without a schema name.
@param table
           the name of a table, which must match the name of a table in
           the database.
@return a {@code ResultSet} containing the list of keys in the format
        defined above.
@throws SQLException
            a database error occurred."
      end

      operation 1007387 "getProcedureColumns"
	public return_type class_ref 220187 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "procedureNamePattern" type class_ref 3399692 // String
	  param inout name "columnNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of parameter and result columns for the stored procedures
belonging to a specified catalog.
<p>
The list is returned as a {@code ResultSet} with one row for each
parameter or result column. The data is ordered by {@code
PROCEDURE_SCHEM} and {@code PROCEDURE_NAME}, while for each procedure,
the return value (if any) is first, followed by the parameters in the
order they appear in the stored procedure call, followed by {@code
ResultSet} columns in column number order. Each row has the following
structure:
<ol>
<li>{@code PROCEDURE_CAT} - String - the procedure catalog name</li>
<li>{@code PROCEDURE_SCHEM} - String - the procedure schema name
(possibly null)</li>
<li>{@code PROCEDURE_NAME} - String - the procedure name</li>
<li>{@code COLUMN_NAME} - String - the name of the column</li>
<li>{@code COLUMN_TYPE} - short - the kind of column or parameter, as
follows:
<ul>
<li>{@code DatabaseMetaData.procedureColumnUnknown} - type unknown</li>
<li>{@code DatabaseMetaData.procedureColumnIn} - an {@code IN} parameter</li>
<li>{@code DatabaseMetaData.procedureColumnInOut} - an {@code INOUT}
parameter</li>
<li>{@code DatabaseMetaData.procedureColumnOut} - an {@code OUT}
parameter</li>
<li>{@code DatabaseMetaData.procedureColumnReturn} - a return value</li>
<li>{@code DatabaseMetaData.procedureReturnsResult} - a result column in
a result set</li>
</ul>
</li>
<li>{@code DATA_TYPE} - int - the SQL type of the data, as in {@code
java.sql.Types}</li>
<li>{@code TYPE_NAME} - String - the SQL type name, for a UDT it is fully
qualified</li>
<li>{@code PRECISION} - int - the precision</li>
<li>{@code LENGTH} - int - the length of the data in bytes</li>
<li>{@code SCALE} - short - the scale for numeric types</li>
<li>{@code RADIX} - short - the Radix for numeric data (typically 2 or
10)</li>
<li>{@code NULLABLE} - short - can the data contain {@code null}:
<ul>
<li>{@code DatabaseMetaData.procedureNoNulls} - {@code NULL}s not
permitted</li>
<li>{@code DatabaseMetaData.procedureNullable} - {@code NULL}s are
permitted</li>
<li>{@code DatabaseMetaData.procedureNullableUnknown} - {@code NULL}
status unknown</li>
</ul>
</li>
<li>{@code REMARKS} - String - an explanatory comment about the data item
</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schemaPattern
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search by schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param procedureNamePattern
           a pattern that must match the name of the procedure stored in
           the database.
@param columnNamePattern
           a column name pattern. The name must match the column name
           stored in the database.
@return a {@code ResultSet} with the list of parameter and result columns
        in the format defined above.
@throws SQLException
            a database error occurred."
      end

      operation 1007515 "getProcedures"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "procedureNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of the stored procedures available in a specified catalog.
<p>
The list is returned as a {@code ResultSet} with one row for each stored
procedure, ordered by PROCEDURE_SCHEM and PROCEDURE_NAME, with the data
in each row as follows:
<ol>
<li>{@code PROCEDURE_CAT} - String : the procedure catalog name</li>
<li>{@code PROCEDURE_SCHEM} - String : the procedure schema name
(possibly {@code null})</li>
<li>{@code PROCEDURE_NAME} - String : the procedure name</li>
<li>{@code Reserved}</li>
<li>{@code Reserved}</li>
<li>{@code Reserved}</li>
<li>{@code REMARKS} - String - information about the procedure</li>
<li>{@code PROCEDURE_TYPE} - short : one of:
<ul>
<li>{@code DatabaseMetaData.procedureResultUnknown} - procedure may
return a result</li>
<li>{@code DatabaseMetaData.procedureNoResult} - procedure does not
return a result</li>
<li>{@code DatabaseMetaData.procedureReturnsResult} - procedure
definitely returns a result</li>
</ul>
</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schemaPattern
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search by schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param procedureNamePattern
           a procedure name pattern, which must match the procedure name
           stored in the database.
@return a {@code ResultSet} where each row is a description of a stored
        procedure in the format defined above.
@throws SQLException
            a database error occurred."
      end

      operation 1007643 "getProcedureTerm"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the database vendor's preferred name for \"procedure\".

@return a String with the vendor's preferred name for \"procedure\".
@throws SQLException
            a database error occurred."
      end

      operation 1007771 "getResultSetHoldability"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result set's default holdability.

@return one of {@code ResultSet.HOLD_CURSORS_OVER_COMMIT} or {@code
        ResultSet.CLOSE_CURSORS_AT_COMMIT}.
@throws SQLException
            a database error occurred."
      end

      operation 1007899 "getSchemas"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of the schema names in the database. The list is returned
as a {@code ResultSet}, ordered by the schema name, with one row per
schema in the following format:
<ol>
<li>{@code TABLE_SCHEM} - String - the schema name</li> <li>{@code
TABLE_CATALOG} - String - the catalog name (possibly {@code null}) </li>
</ol>

@return a {@code ResultSet} with one row for each schema in the format
        defined above.
@throws SQLException
            a database error occurred."
      end

      operation 1008027 "getSchemaTerm"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the database vendor's preferred term for \"schema\".

@return a String which is the vendor's preferred term for schema.
@throws SQLException
            a database error occurred."
      end

      operation 1008155 "getSearchStringEscape"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string that is used to escape wildcard characters. This
string is used to escape the {@code '_'} and {@code '%'} wildcard
characters in catalog search pattern strings. {@code '_'} is used to represent any single
character while {@code '%'} is used for a sequence of zero or more
characters.

@return a String used to escape the wildcard characters.
@throws SQLException
            a database error occurred."
      end

      operation 1008283 "getSQLKeywords"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of all the SQL keywords that are NOT also SQL92 keywords
for the database.

@return a String containing the list of SQL keywords in a comma separated
        format.
@throws SQLException
            a database error occurred."
      end

      operation 1008411 "getSQLStateType"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "States the type of {@code SQLState} value returned by {@code
SQLException.getSQLState}. This can either be the X/Open (now known as
Open Group) SQL CLI form or the SQL99 form.

@return an integer, which is either {@code
        DatabaseMetaData.sqlStateSQL99} or {@code
        DatabaseMetaData.sqlStateXOpen}.
@throws SQLException
            a database error occurred."
      end

      operation 1008539 "getStringFunctions"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of string functions available with the database. These
functions are used in JDBC function escape clause and follow the Open
Group CLI string function names definition.

@return a String containing the list of string functions in comma
        separated format.
@throws SQLException
            a database error occurred."
      end

      operation 1008667 "getSuperTables"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "tableNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a listing of the hierarchies of tables in a specified schema in
the database.
<p>
The listing only contains entries for tables that have a super table.
Super tables and corresponding subtables must be defined in the same catalog and schema. The
list is returned as a {@code ResultSet}, with one row for each table that
has a super table, in the following format:
<ol>
<li>{@code TABLE_CAT} - String - table catalog name (possibly {@code
null})</li>
<li>{@code TABLE_SCHEM} - String - Table schema name (possibly {@code
null})</li>
<li>{@code TABLE_NAME} - String - The table name</li>
<li>SUPER{@code TABLE_NAME} - String - The super table name</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schemaPattern
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search by schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param tableNamePattern
           a table name, which should match the table name as stored in
           the database. it may be a fully qualified name. If it is fully
           qualified the catalog name and schema name parameters are
           ignored.
@return a {@code ResultSet} with one row for each table which has a super
        table, in the format defined above. An empty {@code ResultSet} is
        returned if the database does not support table hierarchies.
@throws SQLException
            a database error occurred."
      end

      operation 1008795 "getSuperTypes"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "typeNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the User Defined Type (UDT) hierarchies for a given schema. Only
the immediate parent/child relationship is described. If a UDT does not
have a direct supertype, it is not listed.
<p>
The listing is returned as a {@code ResultSet} where there is one row for
a specific UDT which describes its supertype, with the data organized in
columns as follows:
<ol>
<li>{@code TYPE_CAT} - String - the UDT catalog name (possibly {@code
null})</li>
<li>{@code TYPE_SCHEM} - String - the UDT schema name (possibly {@code
null})</li>
<li>{@code TYPE_NAME} - String - the UDT type name</li>
<li>SUPER{@code TYPE_CAT} - String - direct supertype's catalog name
(possibly {@code null})</li>
<li>SUPER{@code TYPE_SCHEM} - String - direct supertype's schema name
(possibly {@code null})</li>
<li>SUPER{@code TYPE_NAME} - String - direct supertype's name</li>
</ol>

@param catalog
           the catalog name. \"\" means get the UDTs without a catalog.
           {@code null} means don't use the catalog name to restrict the
           search.
@param schemaPattern
           the Schema pattern name. \"\" means get the UDT's without a
           schema.
@param typeNamePattern
           the UDT name pattern. This may be a fully qualified name. When
           a fully qualified name is specified, the catalog name and
           schema name parameters are ignored.
@return a {@code ResultSet} in which each row gives information about a
        particular UDT in the format defined above. An empty ResultSet is
        returned for a database that does not support type hierarchies.
@throws SQLException
            a database error occurred."
      end

      operation 1008923 "getSystemFunctions"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of system functions available with the database. These are
names used in the JDBC function escape clause and are Open Group CLI
function names.

@return a String containing the list of system functions in a comma
        separated format.
@throws SQLException
            a database error occurred."
      end

      operation 1009051 "getTablePrivileges"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "tableNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a description of access rights for each table present in a
catalog. Table privileges can apply to one or more columns in the table -
but are not guaranteed to apply to all columns.
<p>
The privileges are returned as a {@code ResultSet}, with one row for each
privilege, ordered by {@code TABLE_SCHEM}, {@code TABLE_NAME}, {@code
PRIVILEGE}, and each row has data as defined in the following column
definitions:
<ol>
<li>{@code TABLE_CAT} - String - table catalog name (possibly {@code
null})</li>
<li>{@code TABLE_SCHEM} - String - Table schema name (possibly {@code
null})</li>
<li>{@code TABLE_NAME} - String - The table name</li>
<li>GRANTOR - String - who granted the access</li>
<li>GRANTEE - String - who received the access grant</li>
<li>PRIVILEGE - String - the type of access granted - one of SELECT,
INSERT, UPDATE, REFERENCES,...</li>
<li>IS_GRANTABLE - String - {@code \"YES\"} implies the grantee can grant
access to others, {@code \"NO\"} implies guarantee cannot grant access to
others, {@code null} means this status is unknown</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schemaPattern
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search by schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param tableNamePattern
           a Table Name, which should match the table name as stored in
           the database.
@return a {@code ResultSet} containing a list with one row for each table
        in the format defined above.
@throws SQLException
            a database error occurred."
      end

      operation 1009179 "getTables"
	public return_type class_ref 220187 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "tableNamePattern" type class_ref 3399692 // String
	  param inout name "types" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a description of the tables in a specified catalog.
<p>
The descriptions are returned as rows in a {@code ResultSet}, one row for
each Table. The ResultSet is ordered by {@code TABLE_TYPE}, {@code
TABLE_SCHEM} and {@code TABLE_NAME}. Each row in the ResultSet consists
of a series of columns as follows:
<ol>
<li>{@code TABLE_CAT} - String - table catalog name (possibly {@code
null})</li>
<li>{@code TABLE_SCHEM} - String - Table schema name (possibly {@code
null})</li>
<li>{@code TABLE_NAME} - String - The table name</li>
<li>{@code TABLE_TYPE} - String - Typical names include \"TABLE\", \"VIEW\",
\"SYSTEM TABLE\", \"ALIAS\", \"SYNONYM\", \"GLOBAL TEMPORARY\"</li>
<li>{@code REMARKS} - String - A comment describing the table</li>
<li>{@code TYPE_CAT} - String - the 'Types' catalog(possibly {@code null}
)</li>
<li>{@code TYPE_SCHEM} - String - the 'Types' schema(possibly {@code
null})</li>
<li>{@code TYPE_NAME} - String - the 'Types' name (possibly {@code null})
</li>
<li>{@code SELF_REFERENCING_COL_NAME} - String - the name of a designated
identifier column in a typed table (possibly {@code null})</li>
<li>REF_GENERATION - String - one of the following values : \"SYSTEM\" |
\"USER\" | \"DERIVED\" - specifies how values in the {@code
SELF_REFERENCING_COL_NAME} are created (possibly {@code null})</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schemaPattern
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search by schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param tableNamePattern
           a table name, which should match the table name as stored in
           the database.
@param types
           a list of table types to include in the list. {@code null}
           implies list all types.
@return a {@code ResultSet} with one row per table in the format defined
        above.
@throws SQLException
            a database error occurred."
      end

      operation 1009307 "getTableTypes"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of table types supported by the database.
<p>
The list is returned as a {@code ResultSet} with one row per table type,
ordered by the table type. The information in the {@code ResultSet} is
structured into a single column per row, as follows:
<ol>
<li>{@code TABLE_TYPE} - String - the table type. Typical names include
{@code \"TABLE\"}, {@code \"VIEW\"}, \"{@code SYSTEM TABLE\"}, {@code \"ALIAS\"},
{@code \"SYNONYM\"}, {@code \"GLOBAL TEMPORARY\"}</li>
</ol>

@return a {@code ResultSet} with one row per table type in the format
        defined above.
@throws SQLException
            a database error occurred."
      end

      operation 1009435 "getTimeDateFunctions"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of time and date functions available for the database.

@return a string containing a comma separated list of the time and date
        functions.
@throws SQLException
            a database error occurred."
      end

      operation 1009563 "getTypeInfo"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a list of the standard SQL types supported by this database. The list
is returned as a {@code ResultSet}, with one row for each type, ordered
by the {@code DATA_TYPE} value, where the data in each row is structured
into the following columns:
<ol>
<li>{@code TYPE_NAME} - String : the type name</li>
<li>{@code DATA_TYPE} - int : the SQL data type value as defined in
{@code java.sql.Types}</li>
<li>{@code PRECISION} - int - the maximum precision of the type</li>
<li>{@code LITERAL_PREFIX} - String : the prefix to be used when quoting
a literal value (possibly {@code null})</li>
<li>{@code LITERAL_SUFFIX} - String : the suffix to be used when quoting
a literal value (possibly {@code null})</li>
<li>{@code CREATE_PARAMS} - String : params used when creating the type
(possibly {@code null})</li>
<li>{@code NULLABLE} - short : shows if the value is nullable:
<ul>
<li>{@code DatabaseMetaData.typeNoNulls} : {@code NULL}s not permitted</li>
<li>{@code DatabaseMetaData.typeNullable} : {@code NULL}s are permitted</li>
<li>{@code DatabaseMetaData.typeNullableUnknown} : {@code NULL} status
unknown</li>
</ul>
</li>
<li>{@code CASE_SENSITIVE} - boolean : true if the type is case sensitive
</li>
<li>{@code SEARCHABLE} - short : how this type can be used with {@code WHERE}
clauses:
<ul>
<li>{@code DatabaseMetaData.typePredNone} - {@code WHERE} clauses cannot be used</li>
<li>{@code DatabaseMetaData.typePredChar} - support for {@code
WHERE...LIKE} only</li>
<li>{@code DatabaseMetaData.typePredBasic} - support except for {@code
WHERE...LIKE}</li>
<li>{@code DatabaseMetaData.typeSearchable} - support for all {@code
WHERE} clauses</li>
</ul>
</li>
<li>{@code UNSIGNED_ATTRIBUTE} - boolean - the type is unsigned or not</li>
<li>{@code FIXED_PREC_SCALE} - boolean - fixed precision = it can be used
as a money value</li>
<li>{@code AUTO_INCREMENT} - boolean - can be used as an auto-increment
value</li>
<li>{@code LOCAL_TYPE_NAME} - String - a localized version of the type
name (possibly {@code null})</li>
<li>{@code MINIMUM_SCALE} - short - the minimum scale supported</li>
<li>{@code MAXIMUM_SCALE} - short - the maximum scale supported</li>
<li>{@code SQL_DATA_TYPE} - int - not used</li>
<li>{@code SQL_DATETIME_SUB} - int - not used</li>
<li>{@code NUM_PREC_RADIX} - int - number radix (typically 2 or 10)</li>
</ol>

@return a {@code ResultSet} which is structured as described above.
@throws SQLException
            a database error occurred."
      end

      operation 1009691 "getUDTs"
	public return_type class_ref 220187 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "typeNamePattern" type class_ref 3399692 // String
	  param inout name "types" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a description of the User Defined Types (UDTs) defined in a given
schema, which includes the types {@code DISTINCT}, {@code STRUCT} and
{@code JAVA_OBJECT}.
<p>
The types matching the supplied the specified catalog, schema, type name
and type are returned as rows in a {@code ResultSet} with columns of
information as follows:
<ol>
<li>{@code TABLE_CAT} - String - catalog name (possibly {@code null})</li>
<li>{@code TABLE_SCHEM} - String - schema name (possibly {@code null})</li>
<li>{@code TABLE_NAME} - String - The table name</li>
<li>{@code CLASS_NAME} - String - The Java class name</li>
<li>{@code DATA_TYPE} - int - The SQL type as specified in {@code
java.sql.Types}. One of DISTINCT, STRUCT, and JAVA_OBJECT</li>
<li>{@code REMARKS} - String - A comment which describes the type</li>
<li>{@code BASE_TYPE} - short - A type code. For a DISTINCT type, the
source type. For a structured type this is the type that implements the
user generated reference type of the {@code SELF_REFERENCING_COLUMN}.
This is defined in {@code java.sql.Types}, and will be {@code null} if
the {@code DATA_TYPE} does not match these criteria.</li>
</ol>
<p>
If the driver does not support UDTs, the {@code ResultSet} is empty.

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search by catalog name. Otherwise, the name must match a
           catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schemaPattern
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search using schema name. Otherwise, the name
           must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param typeNamePattern
           a type name pattern, which should match a type name as stored in the
           database. It may be fully qualified.
@param types
           a list of the UDT types to include in the list - one of
           {@code DISTINCT}, {@code STRUCT} or {@code JAVA_OBJECT}.
@return a {@code ResultSet} in the format described above.
@throws SQLException
            a database error occurred."
      end

      operation 1009819 "getURL"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the URL for this database.

@return the URL for the database. {@code null} if it cannot be generated.
@throws SQLException
            a database error occurred."
      end

      operation 1009947 "getUserName"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine the user name as known by the database.

@return the user name.
@throws SQLException
            a database error occurred."
      end

      operation 1010075 "getVersionColumns"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schema" type class_ref 3399692 // String
	  param inout name "table" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns which of a table's columns are automatically updated when any
value in a row is updated.
<p>
The result is laid-out in the following columns:
<ol>
<li>{@code SCOPE} - short - not used</li>
<li>{@code COLUMN_NAME} - String - Column name</li>
<li>{@code DATA_TYPE} - int - The SQL data type, as defined in {@code
java.sql.Types}</li>
<li>{@code TYPE_NAME} - String - The SQL type name, data source dependent
</li>
<li>{@code COLUMN_SIZE} - int - Precision for numeric types</li>
<li>{@code BUFFER_LENGTH} - int - Length of a column value in bytes</li>
<li>{@code DECIMAL_DIGITS} - short - Number of digits after the decimal
point</li>
<li>{@code PSEUDO_COLUMN} - short - If this is a pseudo-column (for
example, an Oracle {@code ROWID}):
<ul>
<li>{@code DatabaseMetaData.bestRowUnknown} - don't know whether this is
a pseudo column</li>
<li>{@code DatabaseMetaData.bestRowNotPseudo} - column is not pseudo</li>
<li>{@code DatabaseMetaData.bestRowPseudo} - column is a pseudo column</li>
</ul>
</li>
</ol>

@param catalog
           a catalog name. {@code null} is used to imply no narrowing of
           the search using catalog name. Otherwise, the name must match
           a catalog name held in the database, with \"\" used to retrieve
           those without a catalog name.
@param schema
           a schema name pattern. {@code null} is used to imply no
           narrowing of the search using schema names. Otherwise, the
           name must match a schema name in the database, with \"\" used to
           retrieve those without a schema name.
@param table
           a table name. It must match the name of a table in the
           database.
@return a {@code ResultSet} containing the descriptions, one row for each
        column, in the format defined above.
@throws SQLException
            a database error occurred."
      end

      operation 1010203 "insertsAreDetected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a visible row insert can be detected by calling {@code
ResultSet.rowInserted}.

@param type
           the {@code ResultSet} type. This may be one of {@code
           ResultSet.TYPE_SCROLL_SENSITIVE} or {@code
           ResultSet.TYPE_SCROLL_INSENSITIVE} or {@code
           ResultSet.TYPE_FORWARD_ONLY},
@return {@code true} if {@code ResultSet.rowInserted} detects a visible
        row insert otherwise {@code false}.
@throws SQLException
            a database error occurred.
@see ResultSet#rowInserted()"
      end

      operation 1010331 "isCatalogAtStart"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether a fully qualified table name is prefixed or suffixed to
a fully qualified table name.

@return {@code true} if the catalog appears at the start of a fully
        qualified table name, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1010459 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database is in read-only mode.

@return {@code true} if the database is in read-only mode, {@code false}
        otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1010587 "locatorsUpdateCopy"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether updates are made to a copy of, or directly on, Large Objects
({@code LOB}s).

@return {@code true} if updates are made to a copy of the Large Object,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1010715 "nullPlusNonNullIsNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database handles concatenations between {@code NULL} and
non-{@code NULL} values by producing a {@code NULL} output.

@return {@code true} if {@code NULL} to non-{@code NULL} concatenations
        produce a {@code NULL} result, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1010843 "nullsAreSortedAtEnd"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether {@code NULL} values are always sorted to the end of sorted
results regardless of requested sort order. This means that they will
appear at the end of sorted lists whatever other non-{@code NULL} values
may be present.

@return {@code true} if {@code NULL} values are sorted at the end,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1010971 "nullsAreSortedAtStart"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether {@code NULL} values are always sorted at the start of the
sorted list, irrespective of the sort order. This means that they appear
at the start of sorted lists, whatever other values may be present.

@return {@code true} if {@code NULL} values are sorted at the start,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1011099 "nullsAreSortedHigh"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether {@code NULL} values are sorted high - i.e. they are sorted
as if they are higher than any other values.

@return {@code true} if {@code NULL} values are sorted high, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1011227 "nullsAreSortedLow"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether {@code NULL} values are sorted low - i.e. they are sorted as
if they are lower than any other values.

@return {@code true} if {@code NULL} values are sorted low, {@code false}
        otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1011355 "othersDeletesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether deletes made by others are visible, for a specified {@code
ResultSet} type.

@param type
           the type of the {@code ResultSet}. It may be either {@code
           ResultSet.TYPE_FORWARD_ONLY} or {@code
           ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
           ResultSet.TYPE_SCROLL_SENSITIVE})
@return {@code true} if others' deletes are visible, {@code false}
        otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1011483 "othersInsertsAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether inserts made by others are visible, for a specified {@code
ResultSet} type.

@param type
           the type of the {@code ResultSet}. May be {@code
           ResultSet.TYPE_FORWARD_ONLY}, or {@code
           ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
           ResultSet.TYPE_SCROLL_SENSITIVE}
@return {@code true} if others' inserts are visible, otherwise {@code
        false}.
@throws SQLException
            a database error occurred."
      end

      operation 1011611 "othersUpdatesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether updates made by others are visible, for a specified {@code
ResultSet} type.

@param type
           the type of the {@code ResultSet}. May be {@code
           ResultSet.TYPE_FORWARD_ONLY}, or {@code
           ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
           ResultSet.TYPE_SCROLL_SENSITIVE}
@return {@code true} if others' inserts are visible, otherwise {@code
        false}.
@throws SQLException
            a database error occurred."
      end

      operation 1011739 "ownDeletesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a {@code ResultSet} can see its own deletes, for a
specified {@code ResultSet} type.

@param type
           the type of the {@code ResultSet}: {@code
           ResultSet.TYPE_FORWARD_ONLY}, {@code
           ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
           ResultSet.TYPE_SCROLL_SENSITIVE}
@return {@code true} if the deletes are seen by the {@code
        ResultSet} itself, otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1011867 "ownInsertsAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a {@code ResultSet} can see its own inserts, for a
specified {@code ResultSet} type.

@param type
           the type of the {@code ResultSet}: {@code
           ResultSet.TYPE_FORWARD_ONLY}, {@code
           ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
           ResultSet.TYPE_SCROLL_SENSITIVE}
@return {@code true} if the inserts are seen by the {@code
        ResultSet} itself, otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1011995 "ownUpdatesAreVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a {@code ResultSet} can see its own updates, for a
specified {@code ResultSet} type.

@param type
           the type of the {@code ResultSet}: {@code
           ResultSet.TYPE_FORWARD_ONLY}, {@code
           ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
           ResultSet.TYPE_SCROLL_SENSITIVE}
@return {@code true} if the updates are seen by the {@code
        ResultSet} itself, otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1012123 "storesLowerCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database treats SQL identifiers that are in mixed
case (and unquoted) as case insensitive. If {@code true} then the
database stores them in lower case.

@return {@code true} if unquoted SQL identifiers are stored in lower
        case, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1012251 "storesLowerCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database considers mixed case quoted SQL
identifiers as case insensitive and stores them in lower case.

@return {@code true} if quoted SQL identifiers are stored in lower case,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1012379 "storesMixedCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database considers mixed case unquoted SQL
identifiers as case insensitive and stores them in mixed case.

@return {@code true} if unquoted SQL identifiers as stored in mixed case,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1012507 "storesMixedCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database considers identifiers as case insensitive
if they are mixed case quoted SQL. The database stores them in mixed
case.

@return {@code true} if quoted SQL identifiers are stored in mixed case,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1012635 "storesUpperCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database considers mixed case unquoted SQL
identifiers as case insensitive and stores them in upper case.

@return {@code true} if unquoted SQL identifiers are stored in upper
        case, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1012763 "storesUpperCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database considers mixed case quoted SQL
identifiers as case insensitive and stores them in upper case.

@return {@code true} if quoted SQL identifiers are stored in upper case,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1012891 "supportsAlterTableWithAddColumn"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports {@code ALTER TABLE} operation with
{@code ADD COLUMN}.

@return {@code true} if {@code ALTER TABLE} with {@code ADD COLUMN} is
        supported, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1013019 "supportsAlterTableWithDropColumn"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports {@code ALTER TABLE} operation with
{@code DROP COLUMN}.

@return {@code true} if {@code ALTER TABLE} with {@code DROP COLUMN} is
        supported, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1013147 "supportsANSI92EntryLevelSQL"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports the ANSI92 entry level SQL grammar.

@return {@code true} if the ANSI92 entry level SQL grammar is supported,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1013275 "supportsANSI92FullSQL"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports the ANSI92 full SQL grammar.

@return {@code true} if the ANSI92 full SQL grammar is supported, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1013403 "supportsANSI92IntermediateSQL"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports the ANSI92 intermediate SQL Grammar.

@return {@code true} if the ANSI92 intermediate SQL grammar is supported,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1013531 "supportsBatchUpdates"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports batch updates.

@return {@code true} if batch updates are supported, {@code false}
        otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1013659 "supportsCatalogsInDataManipulation"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether catalog names may be used in data manipulation
statements.

@return {@code true} if catalog names can be used in data manipulation
        statements, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1013787 "supportsCatalogsInIndexDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether catalog names can be used in index definition statements.

@return {@code true} if catalog names can be used in index definition
        statements, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1013915 "supportsCatalogsInPrivilegeDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether catalog names can be used in privilege definition
statements.

@return {@code true} if catalog names can be used in privilege definition
        statements, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1014043 "supportsCatalogsInProcedureCalls"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether catalog names can be used in procedure call statements.

@return {@code true} if catalog names can be used in procedure call
        statements.
@throws SQLException
            a database error occurred."
      end

      operation 1014171 "supportsCatalogsInTableDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether catalog names may be used in table definition statements.

@return {@code true} if catalog names can be used in definition
        statements, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1014299 "supportsColumnAliasing"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports column aliasing.
<p>
If aliasing is supported, then the SQL AS clause is used to provide names
for computed columns and provide alias names for columns.

@return {@code true} if column aliasing is supported, {@code false}
        otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1014427 "supportsConvert"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports the {@code CONVERT} operation between
SQL types.

@return {@code true} if the {@code CONVERT} operation is supported,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1014555 "supportsConvert"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "fromType" explicit_type "int"
	  param in name "toType" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports {@code CONVERT} operation for two
supplied SQL types.

@param fromType
           the Type to convert from, as defined by {@code java.sql.Types}
@param toType
           the Type to convert to, as defined by {@code java.sql.Types}
@return {@code true} if the {@code CONVERT} operation is supported for
        these types, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1014683 "supportsCoreSQLGrammar"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports the Core SQL Grammar for ODBC.

@return {@code true} if the Core SQL Grammar is supported, {@code false}
        otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1014811 "supportsCorrelatedSubqueries"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports correlated sub-queries.

@return {@code true} if the database does support correlated sub-queries
        and {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1014939 "supportsDataDefinitionAndDataManipulationTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database allows both data definition and data
manipulation statements inside a transaction.

@return {@code true} if both types of statement are permitted, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1015067 "supportsDataManipulationTransactionsOnly"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database only allows data manipulation statements inside
a transaction.

@return {@code true} if data manipulation statements are permitted only within a transaction,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1015195 "supportsDifferentTableCorrelationNames"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether table correlation names are required to be different from
the names of the tables, when they are supported.

@return {@code true} if correlation names must be different from table
        names, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1015323 "supportsExpressionsInOrderBy"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether expressions in {@code ORDER BY} lists are supported.

@return {@code true} if expressions in {@code ORDER BY} lists are
        supported.
@throws SQLException
            a database error occurred."
      end

      operation 1015451 "supportsExtendedSQLGrammar"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the Extended SQL Grammar for ODBC is supported.

@return {@code true} if the Extended SQL Grammar is supported, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1015579 "supportsFullOuterJoins"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports full nested outer joins.

@return {@code true} if full nested outer joins are supported, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1015707 "supportsGetGeneratedKeys"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether auto generated keys can be returned when a statement
executes.

@return {@code true} if auto generated keys can be returned, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1015835 "supportsGroupBy"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports {@code GROUP BY} clauses.

@return {@code true} if the {@code GROUP BY} clause is supported, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1015963 "supportsGroupByBeyondSelect"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports using a column name in a {@code GROUP
BY} clause not included in the {@code SELECT} statement as long as all of
the columns in the {@code SELECT} statement are used in the {@code GROUP
BY} clause.

@return {@code true} if {@code GROUP BY} clauses can use column names in
        this way, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1016091 "supportsGroupByUnrelated"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports using a column name in a {@code GROUP
BY} clause that is not in the {@code SELECT} statement.

@return {@code true} if {@code GROUP BY} clause can use a column name not
        in the {@code SELECT} statement, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1016219 "supportsIntegrityEnhancementFacility"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports SQL Integrity Enhancement
Facility.

@return {@code true} if the Integrity Enhancement Facility is supported,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1016347 "supportsLikeEscapeClause"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports a {@code LIKE} escape clause.

@return {@code true} if LIKE escape clause is supported, {@code false}
        otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1016475 "supportsLimitedOuterJoins"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database provides limited support for outer join
operations.

@return {@code true} if there is limited support for outer join
        operations, {@code false} otherwise. This will be {@code true} if
        {@code supportsFullOuterJoins} returns {@code true}.
@throws SQLException
            a database error occurred."
      end

      operation 1016603 "supportsMinimumSQLGrammar"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database supports Minimum SQL Grammar for ODBC.

@return {@code true} if the Minimum SQL Grammar is supported, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1016731 "supportsMixedCaseIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database treats mixed case unquoted SQL identifiers as
case sensitive storing them in mixed case.

@return {@code true} if unquoted SQL identifiers are stored in mixed
        case, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1016859 "supportsMixedCaseQuotedIdentifiers"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database considers mixed case quoted SQL
identifiers as case sensitive, storing them in mixed case.

@return {@code true} if quoted SQL identifiers are stored in mixed case,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1016987 "supportsMultipleOpenResults"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether it is possible for a single {@code CallableStatement} to
return multiple {@code ResultSet}s simultaneously.

@return {@code true} if a single {@code CallableStatement} can return
        multiple {@code ResultSet}s simultaneously, {@code false}
        otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1017115 "supportsMultipleResultSets"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether retrieving multiple {@code ResultSet}s from a single
call to the {@code execute} method is supported.

@return {@code true} if multiple {@code ResultSet}s can be retrieved,
        {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1017243 "supportsMultipleTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether multiple simultaneous transactions on
different connections are supported.

@return {@code true} if multiple open transactions are supported, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1017371 "supportsNamedParameters"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether callable statements with named parameters is supported.

@return {@code true} if named parameters can be used with callable
        statements, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1017499 "supportsNonNullableColumns"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether columns in the database can be defined as non-nullable.

@return {@code true} if columns can be defined non-nullable, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1017627 "supportsOpenCursorsAcrossCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether keeping cursors open across commit operations is
supported.

@return {@code true} if cursors can be kept open across commit
        operations, {@code false} if they might get closed.
@throws SQLException
            a database error occurred."
      end

      operation 1017755 "supportsOpenCursorsAcrossRollback"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database can keep cursors open across rollback
operations.

@return {@code true} if cursors can be kept open across rollback
        operations, {@code false} if they might get closed.
@throws SQLException
            a database error occurred."
      end

      operation 1017883 "supportsOpenStatementsAcrossCommit"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether keeping statements open across commit operations is
supported.

@return {@code true} if statements can be kept open, {@code false} if
        they might not.
@throws SQLException
            a database error occurred."
      end

      operation 1018011 "supportsOpenStatementsAcrossRollback"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether keeping statements open across rollback operations is
supported.

@return {@code true} if statements can be kept open, {@code false} if
        they might not.
@throws SQLException
            a database error occurred."
      end

      operation 1018139 "supportsOrderByUnrelated"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether using a column in an {@code ORDER BY} clause that is
not in the {@code SELECT} statement is supported.

@return {@code true} if it is possible to {@code ORDER} using a column
        not in the {@code SELECT}, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1018267 "supportsOuterJoins"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether outer join operations are supported.

@return {@code true} if outer join operations are supported, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1018395 "supportsPositionedDelete"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether positioned {@code DELETE} statements are supported.

@return {@code true} if the database supports positioned {@code DELETE}
        statements.
@throws SQLException
            a database error occurred."
      end

      operation 1018523 "supportsPositionedUpdate"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether positioned {@code UPDATE} statements are supported.

@return {@code true} if the database supports positioned {@code UPDATE}
        statements, {@code false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1018651 "supportsResultSetConcurrency"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "concurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether there is support for a given concurrency style for the
given {@code ResultSet}.

@param type
           the {@code ResultSet} type, as defined in {@code
           java.sql.ResultSet}:
           <ul>
           <li>{@code ResultSet.TYPE_FORWARD_ONLY}</li>
           <li>{@code ResultSet.TYPE_SCROLL_INSENSITIVE}</li>
           <li>{@code ResultSet.TYPE_SCROLL_SENSITIVE}</li>
           </ul>
@param concurrency
           a concurrency type, which may be one of {@code
           ResultSet.CONCUR_READ_ONLY} or {@code
           ResultSet.CONCUR_UPDATABLE}.
@return {@code true} if that concurrency and {@code ResultSet} type
        pairing is supported otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1018779 "supportsResultSetHoldability"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "holdability" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the supplied {@code ResultSet} holdability mode is
supported.

@param holdability
           as specified in {@code java.sql.ResultSet}: {@code
           ResultSet.HOLD_CURSORS_OVER_COMMIT} or {@code
           ResultSet.CLOSE_CURSORS_AT_COMMIT}
@return {@code true} if the given ResultSet holdability is supported and
        if it isn't then {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1018907 "supportsResultSetType"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the supplied {@code ResultSet} type is supported.

@param type
           the {@code ResultSet} type as defined in {@code
           java.sql.ResultSet}: {@code ResultSet.TYPE_FORWARD_ONLY},
           {@code ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
           ResultSet.TYPE_SCROLL_SENSITIVE}
@return {@code true} if the {@code ResultSet} type is supported, {@code
        false} otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1019035 "supportsSavepoints"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether savepoints for transactions are supported.

@return {@code true} if savepoints are supported, {@code false}
        otherwise.
@throws SQLException
            a database error occurred."
      end

      operation 1019163 "supportsSchemasInDataManipulation"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a schema name may be used in a data manipulation
statement.

@return {@code true} if a schema name can be used in a data manipulation,
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1019291 "supportsSchemasInIndexDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a schema name may be used in an index definition
statement.

@return {@code true} if a schema name can be used in an index definition,
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1019419 "supportsSchemasInPrivilegeDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a database schema name can be used in a privilege
definition statement.

@return {@code true} if a database schema name may be used in a privilege
        definition, otherwise {@code false}
@throws SQLException
            a database error occurred."
      end

      operation 1019547 "supportsSchemasInProcedureCalls"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a procedure call statement may be contain in a schema name.

@return {@code true} if a schema name can be used in a procedure call,
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1019675 "supportsSchemasInTableDefinitions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a schema name can be used in a table definition statement.

@return {@code true} if a schema name can be used in a table definition,
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1019803 "supportsSelectForUpdate"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the {@code SELECT FOR UPDATE} statement is supported.

@return {@code true} if {@code SELECT FOR UPDATE} statements are
        supported, otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1019931 "supportsStatementPooling"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether statement pooling is supported.

@return {@code true} of the database does support statement pooling,
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1020059 "supportsStoredProcedures"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether stored procedure calls using the stored procedure
escape syntax is supported.

@return {@code true} if stored procedure calls using the stored procedure
        escape syntax are supported, otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1020187 "supportsSubqueriesInComparisons"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether subqueries in comparison expressions are supported.

@return {@code true} if subqueries are supported in comparison
        expressions.
@throws SQLException
            a database error occurred."
      end

      operation 1020315 "supportsSubqueriesInExists"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether subqueries in {@code EXISTS} expressions are supported.

@return {@code true} if subqueries are supported in {@code EXISTS}
        expressions, otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1020443 "supportsSubqueriesInIns"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether subqueries in {@code IN} statements are supported.

@return {@code true} if subqueries are supported in {@code IN} statements,
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1020571 "supportsSubqueriesInQuantifieds"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether subqueries in quantified expressions are supported.

@return {@code true} if subqueries are supported, otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1020699 "supportsTableCorrelationNames"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the database has table correlation names support.

@return {@code true} if table correlation names are supported, otherwise
        {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1020827 "supportsTransactionIsolationLevel"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a specified transaction isolation level is supported.

@param level
           the transaction isolation level, as specified in {@code
           java.sql.Connection}: {@code TRANSACTION_NONE}, {@code
           TRANSACTION_READ_COMMITTED}, {@code
           TRANSACTION_READ_UNCOMMITTED}, {@code
           TRANSACTION_REPEATABLE_READ}, {@code TRANSACTION_SERIALIZABLE}
@return {@code true} if the specific isolation level is supported,
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1020955 "supportsTransactions"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether transactions are supported.
<p>
If transactions are not supported, then the {@code commit} method does
nothing and the transaction isolation level is always {@code
TRANSACTION_NONE}.

@return {@code true} if transactions are supported, otherwise {@code
        false}.
@throws SQLException
            a database error occurred."
      end

      operation 1021083 "supportsUnion"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the {@code SQL UNION} operation is supported.

@return {@code true} of the database does support {@code UNION}, otherwise
        {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1021211 "supportsUnionAll"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the {@code SQL UNION ALL} operation is supported.

@return {@code true} if the database does support {@code UNION ALL},
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1021339 "updatesAreDetected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the method {@code ResultSet.rowUpdated} can detect a visible
row update for the specified {@code ResultSet} type.

@param type
           {@code ResultSet} type: {@code ResultSet.TYPE_FORWARD_ONLY},
           {@code ResultSet.TYPE_SCROLL_INSENSITIVE}, or {@code
           ResultSet.TYPE_SCROLL_SENSITIVE}
@return {@code true} detecting changes is possible, otherwise {@code
        false}.
@throws SQLException
            a database error occurred."
      end

      operation 1021467 "usesLocalFilePerTable"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this database uses a file for each table.

@return {@code true} if the database uses one file for each table,
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1021595 "usesLocalFiles"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this database uses a local file to store tables.

@return {@code true} if the database stores tables in a local file,
        otherwise {@code false}.
@throws SQLException
            a database error occurred."
      end

      operation 1021723 "autoCommitFailureClosesAllResultSets"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if a SQLException while autoCommit is true indicates that all
open ResultSets are closed, even ones that are holdable

@return true if all open ResultSets are closed
@throws SQLException
            if any error occurs"
      end

      operation 1021851 "getClientInfoProperties"
	public return_type class_ref 220187 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of the client info properties of the driver.

@return a list of the client info
@throws SQLException
            if any error occurs"
      end

      operation 1021979 "getFunctionColumns"
	public return_type class_ref 220187 // ResultSet
	nparams 4
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "functionNamePattern" type class_ref 3399692 // String
	  param inout name "columnNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a description according to the given catalog's system or user
function parameters and return type.

@param catalog
           the given catalong
@param schemaPattern
           the schema pattern
@param functionNamePattern
           the function name pattern
@param columnNamePattern
           the column name pattern
@return a description of user functions
@throws SQLException
            if any error occurs"
      end

      operation 1022107 "getFunctions"
	public return_type class_ref 220187 // ResultSet
	nparams 3
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	  param inout name "functionNamePattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a description of the system and user functions available
according to the given catalog.

@param catalog
           the given catalog
@param schemaPattern
           the schema pattern
@param functionNamePattern
           the function name pattern
@return user functions
@throws SQLException
            if any error occurs"
      end

      operation 1022235 "getRowIdLifetime"
	public return_type class_ref 223515 // RowIdLifetime
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lifetime for which a RowId object remains valid if this data
source supports the SQL ROWID type

@return the time of a RowId object that remains valid.
@throws SQLException
            if any error occurs"
      end

      operation 1022363 "getSchemas"
	public return_type class_ref 220187 // ResultSet
	nparams 2
	  param inout name "catalog" type class_ref 3399692 // String
	  param inout name "schemaPattern" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the schema names ordered by TABLE_CATALOG and TABLE_SCHEMA.

@param catalog
           the catalog
@param schemaPattern
           the schema pattern
@return the schema names
@throws SQLException
            if any error occurs"
      end

      operation 1022491 "supportsStoredFunctionsUsingCallSyntax"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if this database supports invoking user-defined or vendor
functions using the stored procedure escape syntax.

@return true if this database supports invoking user-defined or vendor
        functions using the stored procedure escape syntax.
@throws SQLException
            if any error occurs"
      end
    end

    class 223131 "Savepoint"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A savepoint is an instant during the current transaction that can be utilized
by a rollback via the {@link Connection#rollback} command. Rolling back to a
particular savepoint means that all changes that occurred after that
savepoint are undone."
      operation 1063323 "getSavepointId"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the constructed ID for this savepoint.

@return the ID for this savepoint.
@throws SQLException
            if an error occurrs accessing the database."
      end

      operation 1063451 "getSavepointName"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name for this savepoint.

@return the name of this savepoint.
@throws SQLException
            if an error occurrs accessing the database."
      end
    end

    class 223259 "SQLClientInfoException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception, which is subclass of SQLException, is thrown when one or more
client info properties could not be set on a Connection."
      classrelation 336411 // <generalisation>
	relation 336411 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 336411 // <generalisation>
	  b parent class_ref 220059 // SQLException
      end

      attribute 281115 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4319604256824655880L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 336539 // failedProperties (<unidirectional association>)
	relation 336539 --->
	  a role_name "failedProperties" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, ClientInfoStatus> ${name}${value};
"
	    classrelation_ref 336539 // failedProperties (<unidirectional association>)
	  b parent class_ref 129819 // Map
      end

      operation 1063579 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLClientInfoException object. The Reason string is set to
null, the SQLState string is set to null and the Error Code is set to 0."
      end

      operation 1063707 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 1
	  param inout name "failedProperties" type class_ref 129819 // Map
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String, ClientInfoStatus> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLClientInfoException object. The Reason string is set to the
given reason string, the SQLState string is set to null and the Error
Code is set to 0, and the Map<String,ClientInfoStatus> object is set to
the failed properties.

@param failedProperties
           the Map<String,ClientInfoStatus> object to use as the
           property values"
      end

      operation 1063835 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 2
	  param inout name "failedProperties" type class_ref 129819 // Map
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String, ClientInfoStatus> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLClientInfoException object. The Reason string is set to the
null if cause == null or cause.toString() if cause!=null, the cause
Throwable object is set to the given cause Throwable object, and the Map<String,ClientInfoStatus>
object is set to the failed properties.

@param failedProperties
           the Map<String,ClientInfoStatus> object to use as the
           property values
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1063963 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "failedProperties" type class_ref 129819 // Map
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<String, ClientInfoStatus> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLClientInfoException object. The Reason string is set to
reason, and the Map<String,ClientInfoStatus> object is set to the failed
properties.

@param reason
           the string to use as the Reason string
@param failedProperties
           the Map<String,ClientInfoStatus> object to use as the
           property values"
      end

      operation 1064091 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "failedProperties" type class_ref 129819 // Map
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<String, ClientInfoStatus> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLClientInfoException object. The Reason string is set to
reason, the cause Throwable object is set to the given cause Throwable
object, and the Map<String,ClientInfoStatus> object is set to the failed
properties.

@param reason
           the string to use as the Reason string
@param failedProperties
           the Map<String,ClientInfoStatus> object to use as the
           property values
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1064219 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "failedProperties" type class_ref 129819 // Map
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<String, ClientInfoStatus> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLClientInfoException object. The Reason string is set to
reason, the SQLState string is set to the sqlState, the Error Code is set
to the vendorCode and the Map<String,ClientInfoStatus> object is set to
the failed properties.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param failedProperties
           the Map<String,ClientInfoStatus> object to use as the
           property values
"
      end

      operation 1064347 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 5
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "failedProperties" type class_ref 129819 // Map
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<String, ClientInfoStatus> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLClientInfoException object. The Reason string is set to
reason, the SQLState string is set to the sqlState, the Error Code is set
to the vendorCode the cause Throwable object is set to the given cause
Throwable object, and the Map<String,ClientInfoStatus> object is set to
the failed properties.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param failedProperties
           the Map<String,ClientInfoStatus> object to use as the
           property values
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1064475 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "failedProperties" type class_ref 129819 // Map
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, ClientInfoStatus> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLClientInfoException object. The Reason string is set to
reason, the SQLState string is set to the sqlState, and the Map<String,ClientInfoStatus>
object is set to the failed properties.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param failedProperties
           the Map<String,ClientInfoStatus> object to use as the
           property values"
      end

      operation 1064603 "SQLClientInfoException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "failedProperties" type class_ref 129819 // Map
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, ClientInfoStatus> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLClientInfoException object. The Reason string is set to
reason, the SQLState string is set to the sqlState, the Error Code is set
to the vendorCode, and the Map<String,ClientInfoStatus> object is set to
the failed properties.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param failedProperties
           the Map<String,ClientInfoStatus> object to use as the
           property values
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1064731 "getFailedProperties"
	public return_type class_ref 129819 // Map
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, ClientInfoStatus> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns that the client info properties which could not be set

@return the list of ClientInfoStatus objects indicate client info
        properties"
      end
    end

    class 223387 "Struct"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface which provides facilities for manipulating an SQL structured type
as a Java object. The {@code Struct} object has a value for each attribute of the SQL structured
type."
      operation 1086107 "getSQLTypeName"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the SQL Type name of the SQL structured type that this {@code
Struct} represents.

@return the fully qualified name of SQL structured type.
@throws SQLException
            if a database error occurs."
      end

      operation 1086235 "getAttributes"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the values of the attributes of this SQL structured type. This
method uses the type map associated with the {@link Connection} for
customized type mappings. Where there is no entry in the type mapping
which matches this structured type, the JDBC driver uses the standard
mapping.

@return an {@code Object} array containing the ordered attributes.
@throws SQLException
            if a database error occurs."
      end

      operation 1086363 "getAttributes"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "theMap" type class_ref 129819 // Map
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<String, Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the values of the attributes of this SQL structured type. This
method uses the supplied type mapping to determine how to map SQL types
to their corresponding Java objects. In the
case where there is no entry in the type mapping which matches this
structured type, the JDBC driver uses the default mapping. The {@code
Connection} type map is <i>never</i> utilized by this method.

@param theMap
           a Map describing how SQL Type names are mapped to classes.
@return an Object array containing the ordered attributes,.
@throws SQLException
            if a database error occurs."
      end
    end

    class 223515 "RowIdLifetime"
      visibility public stereotype "enum"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An enumeration to describe the life-time of RowID.

@since 1.6"
      attribute 280475 "ROWID_UNSUPPORTED"
	public type class_ref 223515 // RowIdLifetime
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 280603 "ROWID_VALID_OTHER"
	public type class_ref 223515 // RowIdLifetime
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 280731 "ROWID_VALID_SESSION"
	public type class_ref 223515 // RowIdLifetime
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 280859 "ROWID_VALID_TRANSACTION"
	public type class_ref 223515 // RowIdLifetime
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 280987 "ROWID_VALID_FOREVER"
	public type class_ref 223515 // RowIdLifetime
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 223643 "DataTruncation"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception which is thrown when a JDBC driver unexpectedly truncates a data
value either when reading (resulting in warning), or when writing data
(resulting in an error). The {@code SQLState} error code for truncated data
is {@code 01004}."
      classrelation 333467 // <generalisation>
	relation 333467 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 333467 // <generalisation>
	  b parent class_ref 221339 // SQLWarning
      end

      classrelation 333595 // <realization>
	relation 333595 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 333595 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 276251 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6464298989504059473L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 276379 "index"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 276507 "parameter"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 276635 "read"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 276763 "dataSize"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 276891 "transferSize"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 333723 // THE_REASON (<unidirectional association>)
	relation 333723 --->
	  a role_name "THE_REASON" init_value " \"Data truncation\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 333723 // THE_REASON (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 333851 // THE_SQLSTATE_READ (<unidirectional association>)
	relation 333851 --->
	  a role_name "THE_SQLSTATE_READ" init_value " \"01004\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 333851 // THE_SQLSTATE_READ (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 333979 // THE_SQLSTATE_WRITE (<unidirectional association>)
	relation 333979 --->
	  a role_name "THE_SQLSTATE_WRITE" init_value " \"22001\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 333979 // THE_SQLSTATE_WRITE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 277019 "THE_ERROR_CODE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1023899 "DataTruncation"
	public explicit_return_type ""
	nparams 5
	  param in name "index" explicit_type "int"
	  param inout name "parameter" explicit_type "boolean"
	  param inout name "read" explicit_type "boolean"
	  param in name "dataSize" explicit_type "int"
	  param in name "transferSize" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the {@code DataTruncation} object. The reason is set to {@code
\"Data truncation\"}, the error code is set to the {@code
SQLException} default value, and the other fields are set to the values
supplied as arguments.

@param index
           the Index value of the column value or parameter that was
           truncated.
@param parameter
           {@code true} if it was a parameter value that was truncated,
           {@code false} otherwise.
@param read
           {@code true} if the truncation occurred on a read operation,
           {@code false} otherwise.
@param dataSize
           the original size of the truncated data.
@param transferSize
           the size of the data after truncation."
      end

      operation 1024027 "DataTruncation"
	public explicit_return_type ""
	nparams 6
	  param in name "index" explicit_type "int"
	  param inout name "parameter" explicit_type "boolean"
	  param inout name "read" explicit_type "boolean"
	  param in name "dataSize" explicit_type "int"
	  param in name "transferSize" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DataTruncation. The Reason is set to \"Data truncation\", the
error code is set to the SQLException default value and other fields are
set to the values supplied on this method.

@param index
           the Index value of the column value or parameter that was
           truncated
@param parameter
           true if it was a Parameter value that was truncated, false
           otherwise
@param read
           true if the truncation occurred on a read operation, false
           otherwise
@param dataSize
           the original size of the truncated data
@param transferSize
           the size of the data after truncation
@param cause
           the root reason for this DataTruncation

@since 1.6"
      end

      operation 1024155 "getDataSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of bytes of data that should have been read/written.

@return the number of bytes that should have been read or written. The
        value is set to {@code -1} if the size is unknown."
      end

      operation 1024283 "getIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the index of the column or of the parameter that was truncated.

@return the index number of the column or of the parameter."
      end

      operation 1024411 "getParameter"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets whether the value truncated was a parameter value or a column value.

@return {@code true} if the value truncated was a parameter value,
        {@code false} if it was a column value."
      end

      operation 1024539 "getRead"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets whether the value was truncated on a read operation or a write
operation

@return {@code true} if the value was truncated on a read operation,
        {@code false} otherwise."
      end

      operation 1024667 "getTransferSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of bytes of data that was actually read or written.

@return the number of bytes actually read/written. The value may be set
        to {@code -1} if the size is unknown."
      end
    end

    class 223771 "Driver"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface to a JDBC driver. Instances are returned by {@link DriverManager}.

<p>The JDBC driver uses URLs to specify the location of specific data. URL
format typically takes the form \" {@code xxxx:yyyy:SpecificData}\", where \"
{@code xxxx:yyyy}\" is referred to as the <i>subprotocol</i> and is normally
the same for all of a particular driver. \" {@code SpecificData}\" is a string
which identifies the particular data source that the driver should use.

@see DriverManager"
      operation 1031451 "acceptsURL"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "url" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the driver thinks that it can open a connection to the
given URL.

@param url
           the URL to connect to.
@return {@code true} if the driver thinks that is can open a connection
        to the supplied URL, {@code false} otherwise. Typically, the
        driver will respond {@code true} if it thinks that it can handle
        the subprotocol specified by the driver.
@throws SQLException
         if a database error occurs."
      end

      operation 1031579 "connect"
	public return_type class_ref 221211 // Connection
	nparams 2
	  param inout name "url" type class_ref 3399692 // String
	  param inout name "info" type class_ref 160027 // Properties
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to make a database connection to a data source specified by a
supplied URL.

@param url
           the URL to connect.
@param info
           some properties that should be used in establishing the
           connection. The properties consist of name/value pairs of
           strings. Normally, a connection to a database requires at
           least two properties - for {@code \"user\"} and {@code
           \"password\"} in order to pass authentication to the database.
@return the connection to the database.
@throws SQLException
            if a database error occurs."
      end

      operation 1031707 "getMajorVersion"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the driver's major version number.

@return the major version number of the driver - typically starts at 1."
      end

      operation 1031835 "getMinorVersion"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the driver's minor version number.

@return the minor version number of the driver - typically starts at 0."
      end

      operation 1031963 "getPropertyInfo"
	public return_type class_ref 223899 // DriverPropertyInfo
	nparams 2
	  param inout name "url" type class_ref 3399692 // String
	  param inout name "info" type class_ref 160027 // Properties
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets information about possible properties for this driver.
<p>
This method is intended to provide a listing of possible properties that
the client of the driver must supply in order to establish a connection
to a database. Note that the returned array of properties may change
depending on the supplied list of property values.

@param url
           the URL of the database. An application may call this method
           iteratively as the property list is built up - for example,
           when displaying a dialog to an end-user as part of the
           database login process.
@param info
           a set of tag/value pairs giving data that a user may be
           prompted to provide in order to connect to the database.
@return an array of {@code DriverPropertyInfo} records which provide
        details on which additional properties are required (in addition
        to those supplied in the {@code info} parameter) in order to
        connect to the database.
@throws SQLException
            if a database error occurs."
      end

      operation 1032091 "jdbcCompliant"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports whether this driver is a genuine JDBC CompliantTM driver. The
driver may only return {@code true} if it passes all the JDBC compliance
tests.
<p>
A driver may not be fully compliant if the underlying database has
limited functionality.

@return {@code true} if the driver is fully JDBC compliant, {@code false}
        otherwise."
      end
    end

    class 223899 "DriverPropertyInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class holding information about driver properties of a database connection.
This class is returned by the
{@link Driver#getPropertyInfo(String, java.util.Properties)} method and
allows for the advanced connection handling."
      classrelation 335259 // choices (<unidirectional association>)
	relation 335259 --->
	  a role_name "choices" multiplicity "[]" public
	    comment "
If the value member can be chosen from a set of possible values, they are
contained here. Otherwise choices is {@code null}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 335259 // choices (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 335387 // description (<unidirectional association>)
	relation 335387 --->
	  a role_name "description" public
	    comment "
A description of the property. May be {@code null}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 335387 // description (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 335515 // name (<unidirectional association>)
	relation 335515 --->
	  a role_name "name" public
	    comment "
The name of the property.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 335515 // name (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 277787 "required"
	public explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "{@code true} when the value member must be provided during {@code
Driver.connect}. {@code false} otherwise.
"
      end

      classrelation 335643 // value (<unidirectional association>)
	relation 335643 --->
	  a role_name "value" public
	    comment "
The current value associated with this property. It is depending on the
data gathered by the {@code getPropertyInfo} method, the general Java
environment and the driver's default values.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 335643 // value (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1034395 "DriverPropertyInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code DriverPropertyInfo} instance with the supplied name and
value. Other class members take their default values.

@param name
           The property name.
@param value
           The property value."
      end
    end

    class 224027 "DriverManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides facilities for managing JDBC drivers. The <code>android.database</code> and
<code>android.database.sqlite</code> packages offer a higher-performance alternative for new
code.

<p>Note that Android does not include any JDBC drivers by default; you must provide your own.

<p>The {@code DriverManager} class loads JDBC drivers during its initialization,
from the list of drivers referenced by the system property {@code
\"jdbc.drivers\"}."
      classrelation 334747 // thePrintStream (<unidirectional association>)
	relation 334747 --->
	  a role_name "thePrintStream" class_relation private
	    comment "
Facilities for logging. The Print Stream is deprecated but is maintained
here for compatibility.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 334747 // thePrintStream (<unidirectional association>)
	  b parent class_ref 134939 // PrintStream
      end

      classrelation 334875 // thePrintWriter (<unidirectional association>)
	relation 334875 --->
	  a role_name "thePrintWriter" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 334875 // thePrintWriter (<unidirectional association>)
	  b parent class_ref 135067 // PrintWriter
      end

      attribute 277659 "loginTimeout"
	class_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Login timeout value - by default set to 0 -> \"wait forever\""
      end

      classrelation 335003 // theDrivers (<unidirectional association>)
	relation 335003 --->
	  a role_name "theDrivers" init_value " new ArrayList<Driver>(10)" class_relation const_relation private
	    comment "
Set to hold Registered Drivers - initial capacity 10 drivers (will expand
automatically if necessary.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Driver> ${name}${value};
"
	    classrelation_ref 335003 // theDrivers (<unidirectional association>)
	  b parent class_ref 131483 // List
      end

      classrelation 335131 // logPermission (<unidirectional association>)
	relation 335131 --->
	  a role_name "logPermission" init_value " new SQLPermission(\"setLog\")" class_relation const_relation private
	    comment " Permission for setting log
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 335131 // logPermission (<unidirectional association>)
	  b parent class_ref 224155 // SQLPermission
      end

      extra_member 130587 "initialization"
	
	cpp "" ""
	java "  static {
        loadInitialDrivers();
    }"
	php ""
	python ""
	idl ""
      end

      operation 1032219 "loadInitialDrivers"
	class_operation private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the set of JDBC drivers defined by the Property \"jdbc.drivers\" if
it is defined."
      end

      operation 1032347 "DriverManager"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A private constructor to prevent allocation"
      end

      operation 1032475 "deregisterDriver"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "driver" type class_ref 223771 // Driver
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a driver from the {@code DriverManager}'s registered driver list.
This will only succeed when the caller's class loader loaded the driver
that is to be removed. If the driver was loaded by a different class
loader, the removal of the driver fails silently.
<p>
If the removal succeeds, the {@code DriverManager} will not use this
driver in the future when asked to get a {@code Connection}.

@param driver
           the JDBC driver to remove.
@throws SQLException
            if there is a problem interfering with accessing the
            database."
      end

      operation 1032603 "getConnection"
	class_operation public return_type class_ref 221211 // Connection
	nparams 1
	  param inout name "url" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a connection to the given database URL.

@param url
           a URL string representing the database target to connect with.
@return a {@code Connection} to the database identified by the URL.
        {@code null} if no connection can be established.
@throws SQLException
            if there is an error while attempting to connect to the
            database identified by the URL."
      end

      operation 1032731 "getConnection"
	class_operation public return_type class_ref 221211 // Connection
	nparams 2
	  param inout name "url" type class_ref 3399692 // String
	  param inout name "info" type class_ref 160027 // Properties
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a connection to the given database URL.

@param url
           a URL string representing the database target to connect with
@param info
           a set of properties to use as arguments to set up the
           connection. Properties are arbitrary string/value pairs.
           Normally, at least the properties {@code \"user\"} and {@code
           \"password\"} should be passed, with appropriate settings for
           the user ID and its corresponding password to get access to
           the corresponding database.
@return a {@code Connection} to the database identified by the URL.
        {@code null} if no connection can be established.
@throws SQLException
            if there is an error while attempting to connect to the
            database identified by the URL."
      end

      operation 1032859 "getConnection"
	class_operation public return_type class_ref 221211 // Connection
	nparams 3
	  param inout name "url" type class_ref 3399692 // String
	  param inout name "user" type class_ref 3399692 // String
	  param inout name "password" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a connection to the given database URL.

@param url
           a URL string representing the database target to connect with.
@param user
           a user ID used to login to the database.
@param password
           a password for the user ID to login to the database.
@return a {@code Connection} to the database identified by the URL.
        {@code null} if no connection can be established.
@throws SQLException
            if there is an error while attempting to connect to the
            database identified by the URL."
      end

      operation 1032987 "getDriver"
	class_operation public return_type class_ref 223771 // Driver
	nparams 1
	  param inout name "url" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to find a driver that can interpret the supplied URL.

@param url
           the URL of a database.
@return a {@code Driver} that matches the provided URL. {@code null} if
        no {@code Driver} understands the URL
@throws SQLException
            if there is any kind of problem accessing the database."
      end

      operation 1033115 "getDrivers"
	class_operation public return_type class_ref 145947 // Enumeration
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Driver> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code Enumeration} that contains all of the loaded JDBC
drivers that the current caller can access.

@return An {@code Enumeration} containing all the currently loaded JDBC
        {@code Drivers}."
      end

      operation 1033243 "getLoginTimeout"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the login timeout when connecting to a database in seconds.

@return the login timeout in seconds."
      end

      operation 1033371 "getLogStream"
	class_operation public return_type class_ref 134939 // PrintStream
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Gets the log {@code PrintStream} used by the {@code DriverManager} and
all the JDBC Drivers.

@deprecated use {@link #getLogWriter()} instead.
@return the {@code PrintStream} used for logging activities."
      end

      operation 1033499 "getLogWriter"
	class_operation public return_type class_ref 135067 // PrintWriter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the log writer.

@return A {@code PrintWriter} object used as the log writer. {@code null}
        if no log writer is set."
      end

      operation 1033627 "println"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "message" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a message to the current JDBC log stream. This is either the
{@code PrintWriter} or (deprecated) the {@code PrintStream}, if set.

@param message
           the message to print to the JDBC log stream."
      end

      operation 1033755 "registerDriver"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "driver" type class_ref 223771 // Driver
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a given JDBC driver with the {@code DriverManager}.
<p>
A newly loaded JDBC driver class should register itself with the
{@code DriverManager} by calling this method.

@param driver
           the {@code Driver} to register with the {@code DriverManager}.
@throws SQLException
            if a database access error occurs."
      end

      operation 1033883 "setLoginTimeout"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the login timeout when connecting to a database in seconds.

@param seconds
           seconds until timeout. 0 indicates wait forever."
      end

      operation 1034011 "setLogStream"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 134939 // PrintStream
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the print stream to use for logging data from the {@code
DriverManager} and the JDBC drivers.

@deprecated Use {@link #setLogWriter} instead.
@param out
           the {@code PrintStream} to use for logging."
      end

      operation 1034139 "setLogWriter"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 135067 // PrintWriter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code PrintWriter} that is used by all loaded drivers, and also
the {@code DriverManager}.

@param out
           the {@code PrintWriter} to be used."
      end

      operation 1034267 "isClassFromClassLoader"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "theObject" type class_ref 3401484 // Object
	  param inout name "theClassLoader" type class_ref 138523 // ClassLoader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the supplied object was loaded by the given {@code ClassLoader}.

@param theObject
           the object to check.
@param theClassLoader
           the {@code ClassLoader}.
@return {@code true} if the Object does belong to the {@code ClassLoader}
        , {@code false} otherwise"
      end
    end

    class 224155 "SQLPermission"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Legacy security code; do not use."
      classrelation 337435 // <generalisation>
	relation 337435 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 337435 // <generalisation>
	  b parent class_ref 146075 // BasicPermission
      end

      classrelation 337563 // <realization>
	relation 337563 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 337563 // <realization>
	  b parent class_ref 141595 // Guard
      end

      classrelation 337691 // <realization>
	relation 337691 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 337691 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      operation 1078299 "SQLPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1078427 "SQLPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "actions" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1078555 "getActions"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1078683 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 141467 // Permission
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 224283 "SQLData"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface for the custom mapping of an SQL <i>User Defined Type</i> (UDT)
to a Java class. The Java class object is added to the connection's type map
paired with the SQL name of the corresponding UDT.
<p>
Usually within an implementation of {@code SQLData}, there is a corresponding
field for every attribute of an SQL type, but only one field, if the type is
SQL {@code DISTINCT}. When the UDT is returned within a {@code ResultSet}, it
is accessed with the {@link ResultSet#getObject} method and is returned as an
object which is an instance of the class defined by the {@code SQLData}
mapping. The application can use this object just like any other Java object
and can store changes back into the database using the
{@link PreparedStatement#setObject} method which performs the reverse mapping
into the SQL {@code UDT}.
<p>
Normally the implementation of a custom mapping is generated by
a tool requiring the name of the SQL {@code UDT}, the name
of the class which it is going to be mapped to, and the field names to which
the UDT attributes are mapped. The tool can then implement the {@code
SQLData}, {@code readSQL}, and {@code writeSQL} methods. {@code readSQL} reads
attributes from an {@code SQLInput} object, and {@code writeSQL} writes them.
This is done via {@code SQLInput} and {@code SQLOutput} method calls
respectively.
<p>
Ordinarily an application would not call {@code SQLData} methods directly.
Similarly {@code SQLInput} and {@code SQLOutput} methods are not usually
called directly."
      operation 1064859 "getSQLTypeName"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the SQL name of the <i>User Defined Type</i> (UDT) that this object
represents. This method, usually invoked by the JDBC driver, retrieves
the name of the UDT instance associated with this {@code SQLData} object.

@return a string with UDT type name for this object mapping, passed to
        {@code readSQL} when the object was created.
@throws SQLException
            if a database error occurs."
      end

      operation 1064987 "readSQL"
	public explicit_return_type "void"
	nparams 2
	  param inout name "stream" type class_ref 224411 // SQLInput
	  param inout name "typeName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads data from the database into this object. This method follows these
steps:
<p>
<ul>
<li>Utilize the passed input stream to read the attributes or entries of
the SQL type</li>
<li>This is carried out by reading each entry from the input stream,
ordered as they are in the SQL definition.</li>
<li>Assign the data to the appropriate fields or elements. This is done
by calling the relevant reader method for the type involved (e.g. {@code
SQLInput.readString}, {@code SQLInputreadBigDecimal}). If the type is
distinct, then read its only data entry. For structured types, read every
entry.</li>
</ul>
<p>
The supplied input stream is typically initialized by the calling JDBC
driver with the type map before {@code readSQL} is called.

@param stream
           the {@code SQLInput} stream from which the type map data is
           read for the custom mapping.
@param typeName
           the SQL type name for the type which is being mapped.
@throws SQLException
            if a database error occurs.
@see SQLInput"
      end

      operation 1065115 "writeSQL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 224539 // SQLOutput
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the object to a supplied {@code SQLOutput} data stream, writing it
out as an SQL value to the data source.
<p>
This method follows the following steps:
<ul>
<li>Write each attribute of the SQL type to the output stream.</li>
<li>Write each item by calling a method on the output stream, in the
order they appear in the SQL definition of the type. Use the appropriate
{@code SQLOutput} methods (e.g. {@code writeInt}, {@code writeString}).
Write a single data element for a distinct type. For a structured type,
write a value for each attribute of the the SQL type.</li>
</ul>

@param stream
           the {@code SQLOutput} stream to use to write out the data for
           the custom mapping.
@throws SQLException
            if a database error occurs.
@see SQLOutput"
      end
    end

    class 224411 "SQLInput"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The {@code SQLInput} interface defines operations which apply to a type of
input stream which carries a series of values representing an instance of
an SQL structured type or SQL distinct type.
<p>
This interface is used to define custom mappings of SQL <i>User Defined
Types</i> (UDTs) to Java classes. It is used by JDBC drivers, therefore
application programmers do not normally use the {@code SQLInput} methods
directly. Reader methods such as {@code readLong} and {@code readBytes}
provide means to read values from an {@code SQLInput} stream.
<p>
When the {@code getObject} method is called with an object which implements
the {@code SQLData} interface, the JDBC driver determines the SQL type of the
UDT being mapped by calling the {@code SQLData.getSQLType} method. The driver
creates an instance of an {@code SQLInput} stream, filling the stream with
the attributes of the UDT. The {@code SQLInput} stream is passed to the
{@code SQLData.readSQL} method which then calls the {@code SQLInput} reader
methods to read the attributes.

@see SQLData"
      operation 1068315 "readString"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code String}.

@return the next attribute. {@code null} if the value is SQL {@code NULL}.

@throws SQLException
            if there is a database error."
      end

      operation 1068443 "readBoolean"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code boolean}
.

@return the next attribute as a {@code boolean}. {@code false} if the
        value is SQL {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1068571 "readByte"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code byte}.

@return the next attribute as a {@code byte}. 0 if the value is SQL
        {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1068699 "readShort"
	public explicit_return_type "short"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code short}.

@return the next attribute as a {@code short}. 0 if the value is SQL
        {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1068827 "readInt"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of an {@code int}.

@return the next attribute as an {@code int}. 0 if the value is SQL
        {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1068955 "readLong"
	public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code long}.

@return the next attribute as a {@code long}. 0 if the value is SQL
        {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1069083 "readFloat"
	public explicit_return_type "float"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code float}.

@return the next attribute as a {@code float}. 0 if the value is SQL
        {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1069211 "readDouble"
	public explicit_return_type "double"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code double}.

@return the next attribute as a {@code double}. 0 if the value is SQL
        {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1069339 "readBigDecimal"
	public return_type class_ref 166171 // BigDecimal
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.math.BigDecimal}.

@return the attribute as a {@code java.math.BigDecimal}. {@code null} if
        the read returns SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see java.math.BigDecimal"
      end

      operation 1069467 "readBytes"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a byte array.

@return the attribute as a byte array. {@code null} if the read returns
        SQL {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1069595 "readDate"
	public return_type class_ref 221851 // Date
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.Date}.

@return the next attribute as a {@code java.sql.Date}. {@code null} if
        the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see Date"
      end

      operation 1069723 "readTime"
	public return_type class_ref 222235 // Time
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.Time}.

@return the attribute as a {@code java.sql.Time}. {@code null} if the
        read returns SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see Time"
      end

      operation 1069851 "readTimestamp"
	public return_type class_ref 222363 // Timestamp
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.Timestamp}.

@return the attribute as a {@code java.sql.Timestamp}. {@code null} if
        the read returns SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see Timestamp"
      end

      operation 1069979 "readCharacterStream"
	public return_type class_ref 133019 // Reader
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a Unicode
character stream embodied as a {@code java.io.Reader}.

@return the next attribute as a {@code java.io.Reader}. {@code null} if
        the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see java.io.Reader"
      end

      operation 1070107 "readAsciiStream"
	public return_type class_ref 131867 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of an ASCII
character stream embodied as a {@code java.io.InputStream}.

@return the next attribute as a {@code java.io.InputStream}. {@code null}
        if the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see java.io.InputStream"
      end

      operation 1070235 "readBinaryStream"
	public return_type class_ref 131867 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a stream of bytes
embodied as a {@code java.io.InputStream}.

@return the next attribute as a {@code java.io.InputStream}. {@code null}
        if the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see java.io.InputStream"
      end

      operation 1070363 "readObject"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.lang.Object}.
<p>
The type of the {@code Object} returned is determined by the type mapping
for this JDBC driver, including any customized mappings, if present. A
type map is given to the {@code SQLInput} by the JDBC driver before the
{@code SQLInput} is given to the application.
<p>
If the attribute is an SQL structured or distinct type, its SQL type is
determined. If the stream's type map contains an element for that SQL
type, the driver creates an object for the relevant type and invokes the
method {@code SQLData.readSQL} on it, which reads supplementary data from
the stream using whichever protocol is defined for that method.

@return the next attribute as an Object. {@code null} if the value is SQL
        {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1070491 "readRef"
	public return_type class_ref 222107 // Ref
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.Ref}.

@return the next attribute as a {@code java.sql.Ref}. {@code null} if the
        value is SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see Ref"
      end

      operation 1070619 "readBlob"
	public return_type class_ref 220571 // Blob
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.Blob}.

@return the next attribute as a {@code java.sql.Blob}. {@code null} if
        the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1070747 "readClob"
	public return_type class_ref 221723 // Clob
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.Clob}.

@return the next attribute as a {@code java.sql.Clob}. {@code null} if
        the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see Clob"
      end

      operation 1070875 "readArray"
	public return_type class_ref 219931 // Array
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.Array}.

@return the next attribute as an {@code Array}. {@code null} if the value
        is SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see Array"
      end

      operation 1071003 "wasNull"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports whether the last value read was SQL {@code NULL}.

@return {@code true} if the last value read was SQL {@code NULL}, {@code
        false} otherwise.
@throws SQLException
            if there is a database error."
      end

      operation 1071131 "readURL"
	public return_type class_ref 140443 // URL
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next attribute in the stream (SQL DATALINK value) and returns
it as a {@code java.net.URL} object.

@return the next attribute as a {@code java.net.URL}. {@code null} if the
        value is SQL {@code NULL}.
@throws SQLException
            if there is a database error.
@see java.net.URL"
      end

      operation 1071259 "readNClob"
	public return_type class_ref 222619 // NClob
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.NClob}.

@return the next attribute as a {@code java.sql.NClob}. {@code null} if
        the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1071387 "readNString"
	public return_type class_ref 3399692 // String
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.lang.String}. Used for the NCHAR, NVARCHAR and LONGNVARCHAR types.
See {@link #readString} otherwise.

@return the next attribute as a {@code java.lang.String}. {@code null} if
        the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1071515 "readSQLXML"
	public return_type class_ref 222747 // SQLXML
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.SQLXML}.

@return the next attribute as a {@code java.sql.SQLXML}. {@code null} if
        the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error."
      end

      operation 1071643 "readRowId"
	public return_type class_ref 222491 // RowId
	nparams 0
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next attribute in the stream in the form of a {@code
java.sql.RowId}. Used for the ROWID type.

@return the next attribute as a {@code java.sql.RowId}. {@code null} if
        the value is SQL {@code NULL}.
@throws SQLException
            if there is a database error."
      end
    end

    class 224539 "SQLOutput"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The interface for an output stream used to write attributes of an SQL <i>User
Defined Type</i> (UDT) to the database. This interface is used for custom
mapping of types and is called by the JDBC driver. It is not intended to be
used by applications.
<p>
When an object which implements the {@code SQLData} interface is used as an
argument to an SQL statement, the JDBC driver calls the method {@code
SQLData.getSQLType} to establish the type of the SQL UDT that is being
passed. The driver then creates an {@code SQLOutput} stream and passes it to
the {@code SQLData.writeSQL} method, which in turn uses the appropriate
{@code SQLOutput} writer methods to write the data from the {@code SQLData}
object into the stream according to the defined mapping.

@see SQLData"
      operation 1074843 "writeString"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code String} value into the output stream.

@param theString
           the {@code String} to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1074971 "writeBoolean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theFlag" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code boolean} value into the output stream.

@param theFlag
           the {@code boolean} value to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1075099 "writeByte"
	public explicit_return_type "void"
	nparams 1
	  param in name "theByte" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code byte} value into the output stream.

@param theByte
           the {@code byte} value to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1075227 "writeShort"
	public explicit_return_type "void"
	nparams 1
	  param in name "theShort" explicit_type "short"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code short} value into the output stream.

@param theShort
           the {@code short} value to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1075355 "writeInt"
	public explicit_return_type "void"
	nparams 1
	  param in name "theInt" explicit_type "int"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an {@code int} value into the output stream.

@param theInt
           the {@code int} value to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1075483 "writeLong"
	public explicit_return_type "void"
	nparams 1
	  param in name "theLong" explicit_type "long"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code long} value into the output stream.

@param theLong
           the {@code long} value to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1075611 "writeFloat"
	public explicit_return_type "void"
	nparams 1
	  param in name "theFloat" explicit_type "float"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code float} value into the output stream.

@param theFloat
           the {@code float} value to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1075739 "writeDouble"
	public explicit_return_type "void"
	nparams 1
	  param in name "theDouble" explicit_type "double"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code double} value into the output stream.

@param theDouble
           the {@code double} value to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1075867 "writeBigDecimal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theBigDecimal" type class_ref 166171 // BigDecimal
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code java.math.BigDecimal} value into the output stream.

@param theBigDecimal
           the {@code BigDecimal} value to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1075995 "writeBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theBytes" explicit_type "byte"
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an array of bytes into the output stream.

@param theBytes
           the array of bytes to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1076123 "writeDate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theDate" type class_ref 221851 // Date
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code java.sql.Date} value into the output stream.

@param theDate
           the {@code Date} value to write.
@throws SQLException
            if a database error occurs.
@see Date"
      end

      operation 1076251 "writeTime"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theTime" type class_ref 222235 // Time
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code java.sql.Time} value into the output stream.

@param theTime
           the {@code Time} value to write.
@throws SQLException
            if a database error occurs.
@see Time"
      end

      operation 1076379 "writeTimestamp"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theTimestamp" type class_ref 222363 // Timestamp
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code java.sql.Timestamp} value into the output stream.

@param theTimestamp
           the {@code Timestamp} value to write.
@throws SQLException
            if a database error occurs.
@see Timestamp"
      end

      operation 1076507 "writeCharacterStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theStream" type class_ref 133019 // Reader
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a stream of unicode characters into the output stream.

@param theStream
           the stream of unicode characters to write, as a {@code
           java.io.Reader} object.
@throws SQLException
            if a database error occurs."
      end

      operation 1076635 "writeAsciiStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a stream of ASCII characters into the output stream.

@param theStream
           the stream of ASCII characters to write, as a {@code
           java.io.InputStream} object
@throws SQLException
            if a database error occurs."
      end

      operation 1076763 "writeBinaryStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theStream" type class_ref 131867 // InputStream
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a stream of uninterpreted bytes into the output stream.

@param theStream
           the stream of bytes to write, as a {@code java.io.InputStream}
           object
@throws SQLException
            if a database error occurs."
      end

      operation 1076891 "writeObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theObject" type class_ref 224283 // SQLData
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an {@code SQLData} object into the output stream.
<p>
If the {@code SQLData} object is null, writes {@code NULL} to the stream.
<p>
Otherwise, calls the {@code SQLData.writeSQL} method of the object, which
writes the object's attributes to the stream by calling the appropriate
SQLOutput writer methods for each attribute, in order. The order of the
attributes is the order they are listed in the SQL definition of the User
Defined Type.

@param theObject
           the {@code SQLData} object to write.
@throws SQLException
            if a database error occurs.
@see SQLData"
      end

      operation 1077019 "writeRef"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRef" type class_ref 222107 // Ref
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an SQL {@code Ref} value into the output stream.

@param theRef
           the {@code java.sql.Ref} object to write.
@throws SQLException
            if a database error occurs.
@see Ref"
      end

      operation 1077147 "writeBlob"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theBlob" type class_ref 220571 // Blob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an SQL {@code Blob} value into the output stream.

@param theBlob
           the {@code java.sql.Blob} object to write.
@throws SQLException
            if a database error occurs.
@see Blob"
      end

      operation 1077275 "writeClob"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theClob" type class_ref 221723 // Clob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an SQL {@code Clob} value into the output stream.

@param theClob
           the {@code java.sql.Clob} object to write.
@throws SQLException
            if a database error occurs.
@see Clob"
      end

      operation 1077403 "writeStruct"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theStruct" type class_ref 223387 // Struct
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an SQL {@code Struct} value into the output stream.

@param theStruct
           the {@code java.sql.Struct} object to write.
@throws SQLException
            if a database error occurs.
@see Struct"
      end

      operation 1077531 "writeArray"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theArray" type class_ref 219931 // Array
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write an SQL {@code Array} value into the output stream.

@param theArray
           the {@code java.sql.Array} object to write.
@throws SQLException
            if a database error occurs.
@see Array"
      end

      operation 1077659 "writeURL"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theURL" type class_ref 140443 // URL
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code URL} into the output stream as an SQL DATALINK.

@param theURL
           the datalink value as a {@code java.net.URL} to write.
@throws SQLException
            if a database error occurs.
@see java.net.URL"
      end

      operation 1077787 "writeNString"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theString" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code String} into the output stream as an SQL NCHAR, NVARCHAR,
or LONGNVARCHAR.

@param theString
           the {@code String} to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1077915 "writeNClob"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theNClob" type class_ref 222619 // NClob
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code Clob} into the output stream as an SQL NCLOB.

@param theNClob
           the {@code java.sql.Clob} object to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1078043 "writeRowId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theRowId" type class_ref 222491 // RowId
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code RowId} into the output stream as an SQL ROWID.

@param theRowId
           the {@code java.sql.RowId} object to write.
@throws SQLException
            if a database error occurs."
      end

      operation 1078171 "writeSQLXML"
	public explicit_return_type "void"
	nparams 1
	  param inout name "theXml" type class_ref 222747 // SQLXML
	nexceptions 1
	  exception class_ref 220059 // SQLException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write a {@code SQLXML} into the output stream as an SQL XML.

@param theXml
           the {@code java.sql.SQLXML} object to write.
@throws SQLException
            if a database error occurs."
      end
    end

    class 224667 "SQLDataException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception, which is subclass of SQLException, is thrown when various data
errors arise. These errors including division by 0 and invalid arguments to
functions"
      classrelation 336795 // <generalisation>
	relation 336795 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 336795 // <generalisation>
	  b parent class_ref 224795 // SQLNonTransientException
      end

      attribute 281371 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6889123282670549800L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1066267 "SQLDataException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLDataException object. The Reason string is set to null, the
SQLState string is set to null and the Error Code is set to 0."
      end

      operation 1066395 "SQLDataException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLDataException object. The Reason string is set to the given
reason string, the SQLState string is set to null and the Error Code is
set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1066523 "SQLDataException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLDataException object. The Reason string is set to the given
reason string, the SQLState string is set to the given SQLState string
and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1066651 "SQLDataException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLDataException object. The Reason string is set to the given
reason string, the SQLState string is set to the given SQLState string
and the Error Code is set to the given error code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1066779 "SQLDataException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLDataException object. The Reason string is set to the null
if cause == null or cause.toString() if cause!=null,and the cause
Throwable object is set to the given cause Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1066907 "SQLDataException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLDataException object. The Reason string is set to the given
and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1067035 "SQLDataException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLDataException object. The Reason string is set to the given
reason string, the SQLState string is set to the given SQLState string
and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1067163 "SQLDataException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLDataException object. The Reason string is set to the given
reason string, the SQLState string is set to the given SQLState string ,
the Error Code is set to the given error code value, and the cause
Throwable object is set to the given cause Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 224795 "SQLNonTransientException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 336667 // <generalisation>
	relation 336667 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 336667 // <generalisation>
	  b parent class_ref 220059 // SQLException
      end

      attribute 281243 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9104382843534716547L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1065243 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientException object. The Reason string is set to
null, the SQLState string is set to null and the Error Code is set to 0."
      end

      operation 1065371 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientException object. The Reason string is set to
the given reason string, the SQLState string is set to null and the Error
Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1065499 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1065627 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to the given error code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1065755 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientException object. The Reason string is set to
the null if cause == null or cause.toString() if cause!=null,and the
cause Throwable object is set to the given cause Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1065883 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientException object. The Reason string is set to
the given and the cause Throwable object is set to the given cause
Throwable object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1066011 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1066139 "SQLNonTransientException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string , the Error Code is set to the given error code value, and the
cause Throwable object is set to the given cause Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 224923 "SQLFeatureNotSupportedException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception, which is subclass of SQLNonTransientException, is thrown when
various the JDBC driver does not support an optional JDBC feature."
      classrelation 336923 // <generalisation>
	relation 336923 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 336923 // <generalisation>
	  b parent class_ref 224795 // SQLNonTransientException
      end

      attribute 281499 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1026510870282316051L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1067291 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLFeatureNotSupportedException object. The Reason string is
set to null, the SQLState string is set to null and the Error Code is set
to 0."
      end

      operation 1067419 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLFeatureNotSupportedException object. The Reason string is
set to the given reason string, the SQLState string is set to null and
the Error Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1067547 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLFeatureNotSupportedException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1067675 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLFeatureNotSupportedException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string and the Error Code is set to the given error code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1067803 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLFeatureNotSupportedException object. The Reason string is
set to the null if cause == null or cause.toString() if cause!=null,and
the cause Throwable object is set to the given cause Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1067931 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLFeatureNotSupportedException object. The Reason string is
set to the given and the cause Throwable object is set to the given cause
Throwable object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1068059 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLFeatureNotSupportedException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string and the cause Throwable object is set to the given cause
Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1068187 "SQLFeatureNotSupportedException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLFeatureNotSupportedException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string , the Error Code is set to the given error code value,
and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 225051 "SQLIntegrityConstraintViolationException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception, which is subclass of SQLNonTransientException, is thrown when
various the an integrity constraint (foreign key, primary key or unique key)
has been violated."
      classrelation 337051 // <generalisation>
	relation 337051 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 337051 // <generalisation>
	  b parent class_ref 224795 // SQLNonTransientException
      end

      attribute 281627 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8033405298774849169L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1071771 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLIntegrityConstraintViolationException object. The Reason
string is set to null, the SQLState string is set to null and the Error
Code is set to 0."
      end

      operation 1071899 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLIntegrityConstraintViolationException object. The Reason
string is set to the given reason string, the SQLState string is set to
null and the Error Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1072027 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLIntegrityConstraintViolationException object. The Reason
string is set to the given reason string, the SQLState string is set to
the given SQLState string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1072155 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLIntegrityConstraintViolationException object. The Reason
string is set to the given reason string, the SQLState string is set to
the given SQLState string and the Error Code is set to the given error
code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1072283 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLIntegrityConstraintViolationException object. The Reason
string is set to the null if cause == null or cause.toString() if
cause!=null,and the cause Throwable object is set to the given cause
Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1072411 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLIntegrityConstraintViolationException object. The Reason
string is set to the given and the cause Throwable object is set to the
given cause Throwable object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1072539 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLIntegrityConstraintViolationException object. The Reason
string is set to the given reason string, the SQLState string is set to
the given SQLState string and the cause Throwable object is set to the
given cause Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1072667 "SQLIntegrityConstraintViolationException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLIntegrityConstraintViolationException object. The Reason
string is set to the given reason string, the SQLState string is set to
the given SQLState string , the Error Code is set to the given error code
value, and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 225179 "SQLInvalidAuthorizationSpecException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception, which is subclass of SQLNonTransientException, is thrown when
the authorization credentials presented during connection establishment are
not valid."
      classrelation 337179 // <generalisation>
	relation 337179 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 337179 // <generalisation>
	  b parent class_ref 224795 // SQLNonTransientException
      end

      attribute 281755 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -64105250450891498L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1072795 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLInvalidAuthorizationSpecException object. The Reason string
is set to null, the SQLState string is set to null and the Error Code is
set to 0."
      end

      operation 1072923 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLInvalidAuthorizationSpecException object. The Reason string
is set to the given reason string, the SQLState string is set to null and
the Error Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1073051 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLInvalidAuthorizationSpecException object. The Reason string
is set to the given reason string, the SQLState string is set to the
given SQLState string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1073179 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLInvalidAuthorizationSpecException object. The Reason string
is set to the given reason string, the SQLState string is set to the
given SQLState string and the Error Code is set to the given error code
value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1073307 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLInvalidAuthorizationSpecException object. The Reason string
is set to the null if cause == null or cause.toString() if
cause!=null,and the cause Throwable object is set to the given cause
Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1073435 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLInvalidAuthorizationSpecException object. The Reason string
is set to the given and the cause Throwable object is set to the given
cause Throwable object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1073563 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLInvalidAuthorizationSpecException object. The Reason string
is set to the given reason string, the SQLState string is set to the
given SQLState string and the cause Throwable object is set to the given
cause Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1073691 "SQLInvalidAuthorizationSpecException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLInvalidAuthorizationSpecException object. The Reason string
is set to the given reason string, the SQLState string is set to the
given SQLState string , the Error Code is set to the given error code
value, and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 225307 "SQLNonTransientConnectionException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An exception, which is subclass of SQLException, is thrown when the
connection operation that failed will not succeed when the operation is
retried without the cause of the failure being corrected."
      classrelation 337307 // <generalisation>
	relation 337307 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 337307 // <generalisation>
	  b parent class_ref 224795 // SQLNonTransientException
      end

      attribute 281883 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5852318857474782892L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1073819 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientConnectionException object. The Reason string
is set to null, the SQLState string is set to null and the Error Code is
set to 0."
      end

      operation 1073947 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientConnectionException object. The Reason string
is set to the given reason string, the SQLState string is set to null and
the Error Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1074075 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientConnectionException object. The Reason string
is set to the given reason string, the SQLState string is set to the
given SQLState string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1074203 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientConnectionException object. The Reason string
is set to the given reason string, the SQLState string is set to the
given SQLState string and the Error Code is set to the given error code
value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1074331 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientConnectionException object. The Reason string
is set to the null if cause == null or cause.toString() if
cause!=null,and the cause Throwable object is set to the given cause
Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1074459 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientConnectionException object. The Reason string
is set to the given and the cause Throwable object is set to the given
cause Throwable object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1074587 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientConnectionException object. The Reason string
is set to the given reason string, the SQLState string is set to the
given SQLState string and the cause Throwable object is set to the given
cause Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1074715 "SQLNonTransientConnectionException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLNonTransientConnectionException object. The Reason string
is set to the given reason string, the SQLState string is set to the
given SQLState string , the Error Code is set to the given error code
value, and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 225435 "SQLRecoverableException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 337819 // <generalisation>
	relation 337819 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 337819 // <generalisation>
	  b parent class_ref 220059 // SQLException
      end

      attribute 282011 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4144386502923131579L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1078811 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLRecoverableException object. The Reason string is set to
null, the SQLState string is set to null and the Error Code is set to 0."
      end

      operation 1078939 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLRecoverableException object. The Reason string is set to
the given reason string, the SQLState string is set to null and the Error
Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1079067 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLRecoverableException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1079195 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLRecoverableException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to the given error code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1079323 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLRecoverableException object. The Reason string is set to
the null if cause == null or cause.toString() if cause!=null,and the
cause Throwable object is set to the given cause Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1079451 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLRecoverableException object. The Reason string is set to
the given and the cause Throwable object is set to the given cause
Throwable object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1079579 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLRecoverableException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1079707 "SQLRecoverableException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLRecoverableException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string , the Error Code is set to the given error code value, and the
cause Throwable object is set to the given cause Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 225563 "SQLSyntaxErrorException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 337947 // <generalisation>
	relation 337947 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 337947 // <generalisation>
	  b parent class_ref 224795 // SQLNonTransientException
      end

      attribute 282139 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1843832610477496053L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1079835 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLSyntaxErrorException object. The Reason string is set to
null, the SQLState string is set to null and the Error Code is set to 0."
      end

      operation 1079963 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLSyntaxErrorException object. The Reason string is set to
the given reason string, the SQLState string is set to null and the Error
Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1080091 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLSyntaxErrorException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1080219 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLSyntaxErrorException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to the given error code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1080347 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLSyntaxErrorException object. The Reason string is set to
the null if cause == null or cause.toString() if cause!=null,and the
cause Throwable object is set to the given cause Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1080475 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLSyntaxErrorException object. The Reason string is set to
the given and the cause Throwable object is set to the given cause
Throwable object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1080603 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLSyntaxErrorException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1080731 "SQLSyntaxErrorException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLSyntaxErrorException object. The Reason string is set to
the given reason string, the SQLState string is set to the given SQLState
string , the Error Code is set to the given error code value, and the
cause Throwable object is set to the given cause Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 225691 "SQLTimeoutException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 338203 // <generalisation>
	relation 338203 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 338203 // <generalisation>
	  b parent class_ref 225819 // SQLTransientException
      end

      attribute 282395 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4487171280562520262L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1081883 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTimeoutException object. The Reason string is set to null,
the SQLState string is set to null and the Error Code is set to 0."
      end

      operation 1082011 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTimeoutException object. The Reason string is set to the
given reason string, the SQLState string is set to null and the Error
Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1082139 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTimeoutException object. The Reason string is set to the
given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1082267 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTimeoutException object. The Reason string is set to the
given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to the given error code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1082395 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTimeoutException object. The Reason string is set to the
null if cause == null or cause.toString() if cause!=null,and the cause
Throwable object is set to the given cause Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1082523 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTimeoutException object. The Reason string is set to the
given and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1082651 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTimeoutException object. The Reason string is set to the
given reason string, the SQLState string is set to the given SQLState
string and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1082779 "SQLTimeoutException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTimeoutException object. The Reason string is set to the
given reason string, the SQLState string is set to the given SQLState
string , the Error Code is set to the given error code value, and the
cause Throwable object is set to the given cause Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 225819 "SQLTransientException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 338075 // <generalisation>
	relation 338075 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 338075 // <generalisation>
	  b parent class_ref 220059 // SQLException
      end

      attribute 282267 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9042733978262274539L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1080859 "SQLTransientException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientException object. The Reason string is set to
null, the SQLState string is set to null and the Error Code is set to 0."
      end

      operation 1080987 "SQLTransientException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientException object. The Reason string is set to the
given reason string, the SQLState string is set to null and the Error
Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1081115 "SQLTransientException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientException object. The Reason string is set to the
given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1081243 "SQLTransientException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientException object. The Reason string is set to the
given reason string, the SQLState string is set to the given SQLState
string and the Error Code is set to the given error code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1081371 "SQLTransientException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientException object. The Reason string is set to the
null if cause == null or cause.toString() if cause!=null,and the cause
Throwable object is set to the given cause Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1081499 "SQLTransientException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientException object. The Reason string is set to the
given and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1081627 "SQLTransientException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientException object. The Reason string is set to the
given reason string, the SQLState string is set to the given SQLState
string and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1081755 "SQLTransientException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientException object. The Reason string is set to the
given reason string, the SQLState string is set to the given SQLState
string , the Error Code is set to the given error code value, and the
cause Throwable object is set to the given cause Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 225947 "SQLTransactionRollbackException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 338331 // <generalisation>
	relation 338331 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 338331 // <generalisation>
	  b parent class_ref 225819 // SQLTransientException
      end

      attribute 282523 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5246680841170837229L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1082907 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransactionRollbackException object. The Reason string is
set to null, the SQLState string is set to null and the Error Code is set
to 0."
      end

      operation 1083035 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransactionRollbackException object. The Reason string is
set to the given reason string, the SQLState string is set to null and
the Error Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1083163 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransactionRollbackException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1083291 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransactionRollbackException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string and the Error Code is set to the given error code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1083419 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransactionRollbackException object. The Reason string is
set to the null if cause == null or cause.toString() if cause!=null,and
the cause Throwable object is set to the given cause Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1083547 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransactionRollbackException object. The Reason string is
set to the given and the cause Throwable object is set to the given cause
Throwable object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1083675 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransactionRollbackException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string and the cause Throwable object is set to the given cause
Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1083803 "SQLTransactionRollbackException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransactionRollbackException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string , the Error Code is set to the given error code value,
and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 226075 "SQLTransientConnectionException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 338459 // <generalisation>
	relation 338459 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 338459 // <generalisation>
	  b parent class_ref 225819 // SQLTransientException
      end

      attribute 282651 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2520155553543391200L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1083931 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientConnectionException object. The Reason string is
set to null, the SQLState string is set to null and the Error Code is set
to 0."
      end

      operation 1084059 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientConnectionException object. The Reason string is
set to the given reason string, the SQLState string is set to null and
the Error Code is set to 0.

@param reason
           the string to use as the Reason string"
      end

      operation 1084187 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientConnectionException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string and the Error Code is set to 0.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string"
      end

      operation 1084315 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientConnectionException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string and the Error Code is set to the given error code value.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code"
      end

      operation 1084443 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientConnectionException object. The Reason string is
set to the null if cause == null or cause.toString() if cause!=null,and
the cause Throwable object is set to the given cause Throwable object.

@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1084571 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientConnectionException object. The Reason string is
set to the given and the cause Throwable object is set to the given cause
Throwable object.

@param reason
           the string to use as the Reason string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1084699 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 3
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientConnectionException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string and the cause Throwable object is set to the given cause
Throwable object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end

      operation 1084827 "SQLTransientConnectionException"
	public explicit_return_type ""
	nparams 4
	  param inout name "reason" type class_ref 3399692 // String
	  param inout name "sqlState" type class_ref 3399692 // String
	  param in name "vendorCode" explicit_type "int"
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an SQLTransientConnectionException object. The Reason string is
set to the given reason string, the SQLState string is set to the given
SQLState string , the Error Code is set to the given error code value,
and the cause Throwable object is set to the given cause Throwable
object.

@param reason
           the string to use as the Reason string
@param sqlState
           the string to use as the SQLState string
@param vendorCode
           the integer value for the error code
@param cause
           the Throwable object for the underlying reason this
           SQLException"
      end
    end

    class 226203 "Types"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class which defines constants used to identify generic SQL types, also
called JDBC types. The type constant values are equivalent to those defined
by X/OPEN."
      operation 1090331 "Types"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private constructor to prevent instantiation."
      end

      attribute 283163 "ARRAY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2003"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code ARRAY}.
"
      end

      attribute 283291 "BIGINT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code BIGINT}.
"
      end

      attribute 283419 "BINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code BINARY}.
"
      end

      attribute 283547 "BIT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code BIT}.
"
      end

      attribute 283675 "BLOB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2004"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code BLOB}.
"
      end

      attribute 283803 "BOOLEAN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code BOOLEAN}.
"
      end

      attribute 283931 "CHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code CHAR}.
"
      end

      attribute 284059 "CLOB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2005"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code CLOB}.
"
      end

      attribute 284187 "DATALINK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 70"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code DATALINK}.
"
      end

      attribute 284315 "DATE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 91"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code DATE}.
"
      end

      attribute 284443 "DECIMAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code DECIMAL}.
"
      end

      attribute 284571 "DISTINCT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code DISTINCT}.
"
      end

      attribute 284699 "DOUBLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code DOUBLE}.
"
      end

      attribute 284827 "FLOAT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code FLOAT}.
"
      end

      attribute 284955 "INTEGER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code INTEGER}.
"
      end

      attribute 285083 "JAVA_OBJECT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code JAVA_OBJECT}.
"
      end

      attribute 285211 "LONGVARBINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " -4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code LONGVARBINARY}.
"
      end

      attribute 285339 "LONGVARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code LONGVARCHAR}.
"
      end

      attribute 285467 "NULL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code NULL}.
"
      end

      attribute 285595 "NUMERIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code NUMERIC}.
"
      end

      attribute 285723 "OTHER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1111"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies that the SQL type is database specific and
is mapped to a Java object, accessed via the methods
{@code getObject} and {@code setObject}.
"
      end

      attribute 285851 "REAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code REAL}.
"
      end

      attribute 285979 "REF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2006"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code REF}.
"
      end

      attribute 286107 "SMALLINT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code SMALLINT}.
"
      end

      attribute 286235 "STRUCT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code STRUCT}.
"
      end

      attribute 286363 "TIME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 92"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code TIME}.
"
      end

      attribute 286491 "TIMESTAMP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 93"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code TIMESTAMP}.
"
      end

      attribute 286619 "TINYINT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code TINYINT}.
"
      end

      attribute 286747 "VARBINARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " -3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code VARBINARY}.
"
      end

      attribute 286875 "VARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 12"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type {@code VARCHAR}.
"
      end

      attribute 287003 "ROWID"
	class_attribute const_attribute public explicit_type "int"
	init_value " -8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type ROWID.
"
      end

      attribute 287131 "NCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " -15"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type NCHAR.
"
      end

      attribute 287259 "NVARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " -9"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type NVARCHAR.
"
      end

      attribute 287387 "LONGNVARCHAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " -16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type LONGNVARCHAR.
"
      end

      attribute 287515 "NCLOB"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2011"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type NCLOB.
"
      end

      attribute 287643 "SQLXML"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2009"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type code that identifies the SQL type SQLXML.
"
      end
    end
  end

  deploymentview 130971 "sql"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 203675 "Array"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_classes
	class_ref 219931 // Array
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 203803 "SQLException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Iterator;
import java.util.NoSuchElementException;
${definition}"
      associated_classes
	class_ref 220059 // SQLException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 203931 "BatchUpdateException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_classes
	class_ref 220315 // BatchUpdateException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 204059 "Blob"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.OutputStream;
${definition}"
      associated_classes
	class_ref 220571 // Blob
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 204187 "Wrapper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 221083 // Wrapper
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 204315 "Statement"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 220955 // Statement
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 204443 "PreparedStatement"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.util.Calendar;
${definition}"
      associated_classes
	class_ref 220827 // PreparedStatement
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 204571 "CallableStatement"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.util.Calendar;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 220699 // CallableStatement
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 204699 "ClientInfoStatus"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 222875 // ClientInfoStatus
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 204827 "Clob"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
${definition}"
      associated_classes
	class_ref 221723 // Clob
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 204955 "Connection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import java.util.Properties;
${definition}"
      associated_classes
	class_ref 221211 // Connection
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 205083 "DatabaseMetaData"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 223003 // DatabaseMetaData
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 205211 "SQLWarning"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_classes
	class_ref 221339 // SQLWarning
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 205339 "DataTruncation"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_classes
	class_ref 223643 // DataTruncation
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 205595 "Date"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 221851 // Date
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 205723 "Driver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Properties;
${definition}"
      associated_classes
	class_ref 223771 // Driver
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 205851 "DriverManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.VMStack;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
${definition}"
      associated_classes
	class_ref 224027 // DriverManager
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 205979 "DriverPropertyInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 223899 // DriverPropertyInfo
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 206107 "NClob"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 222619 // NClob
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 206235 "ParameterMetaData"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 221595 // ParameterMetaData
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 206363 "Ref"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_classes
	class_ref 222107 // Ref
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 206491 "ResultSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.util.Calendar;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 220187 // ResultSet
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 206619 "ResultSetMetaData"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 221467 // ResultSetMetaData
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 206747 "RowId"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 222491 // RowId
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 206875 "RowIdLifetime"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 223515 // RowIdLifetime
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 207003 "Savepoint"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 223131 // Savepoint
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 207131 "SQLClientInfoException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.HashMap;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 223259 // SQLClientInfoException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 207259 "SQLData"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 224283 // SQLData
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 207387 "SQLNonTransientException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 224795 // SQLNonTransientException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 207515 "SQLDataException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 224667 // SQLDataException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 207643 "SQLFeatureNotSupportedException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 224923 // SQLFeatureNotSupportedException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 207771 "SQLInput"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
${definition}"
      associated_classes
	class_ref 224411 // SQLInput
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 207899 "SQLIntegrityConstraintViolationException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 225051 // SQLIntegrityConstraintViolationException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 208027 "SQLInvalidAuthorizationSpecException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 225179 // SQLInvalidAuthorizationSpecException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 208155 "SQLNonTransientConnectionException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 225307 // SQLNonTransientConnectionException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 208283 "SQLOutput"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
${definition}"
      associated_classes
	class_ref 224539 // SQLOutput
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 208411 "SQLPermission"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.security.BasicPermission;
import java.security.Guard;
import java.security.Permission;
${definition}"
      associated_classes
	class_ref 224155 // SQLPermission
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 208539 "SQLRecoverableException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 225435 // SQLRecoverableException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 208667 "SQLSyntaxErrorException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 225563 // SQLSyntaxErrorException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 208795 "SQLTransientException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 225819 // SQLTransientException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 208923 "SQLTimeoutException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 225691 // SQLTimeoutException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 209051 "SQLTransactionRollbackException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 225947 // SQLTransactionRollbackException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 209179 "SQLTransientConnectionException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 226075 // SQLTransientConnectionException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 209307 "SQLXML"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
${definition}"
      associated_classes
	class_ref 222747 // SQLXML
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 209435 "Struct"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_classes
	class_ref 223387 // Struct
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 209563 "Time"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Date;
${definition}"
      associated_classes
	class_ref 222235 // Time
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 209691 "Timestamp"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.regex.Pattern;
${definition}"
      associated_classes
	class_ref 222363 // Timestamp
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 209819 "Types"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 226203 // Types
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
