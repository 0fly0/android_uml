class TransliteratorTest
!!!2607771.java!!!	testAll() : void
    for (String id : Transliterator.getAvailableIDs()) {
      System.err.println(id);
      Transliterator t = new Transliterator(id);
      t.transliterate("hello");
    }
!!!2607899.java!!!	test_Unknown() : void
    try {
      Transliterator t = new Transliterator("Unknown");
      fail();
    } catch (RuntimeException expected) {
    }
!!!2608027.java!!!	test_null_id() : void
    try {
      Transliterator t = new Transliterator(null);
      fail();
    } catch (NullPointerException expected) {
    }
!!!2608155.java!!!	test_null_string() : void
    try {
      Transliterator t = new Transliterator("Any-Upper");
      t.transliterate(null);
      fail();
    } catch (NullPointerException expected) {
    }
!!!2608283.java!!!	test_Any_Upper() : void
    Transliterator t = new Transliterator("Any-Upper");
    assertEquals("HELLO WORLD!", t.transliterate("HeLlO WoRlD!"));
    assertEquals("STRASSE", t.transliterate("Straße"));
!!!2608411.java!!!	test_Any_Lower() : void
    Transliterator t = new Transliterator("Any-Lower");
    assertEquals("hello world!", t.transliterate("HeLlO WoRlD!"));
!!!2608539.java!!!	test_Greek_Latin() : void
    String greek = "Καλημέρα κόσμε!";

    // Transliterate Greek to Latin, then to plain ASCII.
    Transliterator t = new Transliterator("Greek-Latin");
    String latin = t.transliterate(greek);
    t = new Transliterator("Latin-Ascii");
    String ascii = t.transliterate(latin);
    assertEquals("Kalēméra kósme!", latin);
    assertEquals("Kalemera kosme!", ascii);

    // Use alternative transliteration variants.
    t = new Transliterator("Greek-Latin/BGN");
    assertEquals("Kaliméra kósme!", t.transliterate(greek));
    t = new Transliterator("Greek-Latin/UNGEGN");
    assertEquals("Kali̱méra kósme!",t.transliterate(greek));
!!!2608667.java!!!	test_Han_Latin() : void
    Transliterator t = new Transliterator("Han-Latin");
    assertEquals("hàn zì/hàn zì", t.transliterate("汉字/漢字"));

    assertEquals("chén", t.transliterate("\u6c88"));
    assertEquals("shěn", t.transliterate("\u700b"));
    assertEquals("jiǎ", t.transliterate("\u8d3e"));

    t = new Transliterator("Han-Latin/Names");
    assertEquals("shěn", t.transliterate("\u6c88"));
    assertEquals("shěn", t.transliterate("\u700b"));
    assertEquals("jǐa", t.transliterate("\u8d3e"));

    t = new Transliterator("Han-Latin/Names; Latin-Ascii; Any-Upper");
    assertEquals("SHEN", t.transliterate("\u6c88"));
    assertEquals("SHEN", t.transliterate("\u700b"));
    assertEquals("JIA", t.transliterate("\u8d3e"));
