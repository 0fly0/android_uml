class Node
!!!1477147.java!!!	Node(inout key : K, inout value : Object, inout next : Node)
            this.key = key;
            this.value = value;
            this.next = next;
!!!1477275.java!!!	Node(inout next : Node)
            this.key = null;
            this.value = this;
            this.next = next;
!!!1477403.java!!!	casValue(inout cmp : Object, inout val : Object) : boolean
            return UNSAFE.compareAndSwapObject(this, valueOffset, cmp, val);
!!!1477531.java!!!	casNext(inout cmp : Node, inout val : Node) : boolean
            return UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);
!!!1477659.java!!!	isMarker() : boolean
            return value == this;
!!!1477787.java!!!	isBaseHeader() : boolean
            return value == BASE_HEADER;
!!!1477915.java!!!	appendMarker(inout f : Node) : boolean
            return casNext(f, new Node<K,V>(f));
!!!1478043.java!!!	helpDelete(inout b : Node, inout f : Node) : void
            /*
             * Rechecking links and then doing only one of the
             * help-out stages per call tends to minimize CAS
             * interference among helping threads.
             */
            if (f == next && this == b.next) {
                if (f == null || f.value != f) // not already marked
                    appendMarker(f);
                else
                    b.casNext(this, f.next);
            }
!!!1478171.java!!!	getValidValue() : V
            Object v = value;
            if (v == this || v == BASE_HEADER)
                return null;
            return (V)v;
!!!1478299.java!!!	createSnapshot() : SimpleImmutableEntry
            V v = getValidValue();
            if (v == null)
                return null;
            return new AbstractMap.SimpleImmutableEntry<K,V>(key, v);
