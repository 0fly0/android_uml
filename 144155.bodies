class Method
!!!479515.java!!!	initGenericTypes() : void
        if (!genericTypesAreInitialized) {
            String signatureAttribute = getSignatureAttribute();
            GenericSignatureParser parser = new GenericSignatureParser(
                    declaringClass.getClassLoader());
            parser.parseForMethod(this, signatureAttribute, exceptionTypes);
            formalTypeParameters = parser.formalTypeParameters;
            genericParameterTypes = parser.parameterTypes;
            genericExceptionTypes = parser.exceptionTypes;
            genericReturnType = parser.returnType;
            genericTypesAreInitialized = true;
        }
!!!479643.java!!!	Method(inout orig : Method)
        this(orig.declaringClass, orig.parameterTypes, orig.exceptionTypes,
                orig.returnType, orig.name, orig.slot);

        // Copy the accessible flag.
        if (orig.flag) {
            this.flag = true;
        }
!!!479771.java!!!	Method(inout declaring : Class, inout paramTypes : Class, inout exceptTypes : Class, inout returnType : Class, inout name : String, in slot : int)
        this.declaringClass = declaring;
        this.name = name;
        this.slot = slot;
        this.parameterTypes = paramTypes;
        this.exceptionTypes = exceptTypes;      // may be null
        this.returnType = returnType;
!!!479899.java!!!	getTypeParameters() : TypeVariable
        initGenericTypes();
        return formalTypeParameters.clone();
!!!480027.java!!!	getSignatureAttribute() : String
        Object[] annotation = getSignatureAnnotation(declaringClass, slot);

        if (annotation == null) {
            return null;
        }

        return StringUtils.combineStrings(annotation);
!!!480283.java!!!	toGenericString() : String
        StringBuilder sb = new StringBuilder(80);

        initGenericTypes();

        // append modifiers if any
        int modifier = getModifiers();
        if (modifier != 0) {
            sb.append(Modifier.toString(modifier & ~(Modifier.BRIDGE +
                    Modifier.VARARGS))).append(' ');
        }
        // append type parameters
        if (formalTypeParameters != null && formalTypeParameters.length > 0) {
            sb.append('<');
            for (int i = 0; i < formalTypeParameters.length; i++) {
                appendGenericType(sb, formalTypeParameters[i]);
                if (i < formalTypeParameters.length - 1) {
                    sb.append(",");
                }
            }
            sb.append("> ");
        }
        // append return type
        appendGenericType(sb, Types.getType(genericReturnType));
        sb.append(' ');
        // append method name
        appendTypeName(sb, getDeclaringClass());
        sb.append(".").append(getName());
        // append parameters
        sb.append('(');
        appendArrayGenericType(sb,
                Types.getClonedTypeArray(genericParameterTypes));
        sb.append(')');
        // append exceptions if any
        Type[] genericExceptionTypeArray = Types.getClonedTypeArray(
                genericExceptionTypes);
        if (genericExceptionTypeArray.length > 0) {
            sb.append(" throws ");
            appendArrayGenericType(sb, genericExceptionTypeArray);
        }
        return sb.toString();
!!!480411.java!!!	getGenericParameterTypes() : Type
        initGenericTypes();
        return Types.getClonedTypeArray(genericParameterTypes);
!!!480539.java!!!	getGenericExceptionTypes() : Type
        initGenericTypes();
        return Types.getClonedTypeArray(genericExceptionTypes);
!!!480667.java!!!	getGenericReturnType() : Type
        initGenericTypes();
        return Types.getType(genericReturnType);
!!!480795.java!!!	getDeclaredAnnotations() : Annotation
        return getDeclaredAnnotations(declaringClass, slot);
!!!481051.java!!!	getAnnotation(inout annotationType : Class) : A
        if (annotationType == null) {
            throw new NullPointerException("annotationType == null");
        }
        return getAnnotation(declaringClass, slot, annotationType);
!!!481307.java!!!	isAnnotationPresent(inout annotationType : Class) : boolean
        if (annotationType == null) {
            throw new NullPointerException("annotationType == null");
        }
        return isAnnotationPresent(declaringClass, slot, annotationType);
!!!481563.java!!!	noAnnotations(in size : int) : Annotation
        Annotation[][] annotations = new Annotation[size][];
        for (int i = 0; i < size; i++) {
            annotations[i] = NO_ANNOTATIONS;
        }
        return annotations;
!!!481691.java!!!	getParameterAnnotations() : Annotation
        Annotation[][] parameterAnnotations
                = getParameterAnnotations(declaringClass, slot);
        if (parameterAnnotations.length == 0) {
            return noAnnotations(parameterTypes.length);
        }
        return parameterAnnotations;
!!!481947.java!!!	isVarArgs() : boolean
        int modifiers = getMethodModifiers(declaringClass, slot);
        return (modifiers & Modifier.VARARGS) != 0;
!!!482075.java!!!	isBridge() : boolean
        int modifiers = getMethodModifiers(declaringClass, slot);
        return (modifiers & Modifier.BRIDGE) != 0;
!!!482203.java!!!	isSynthetic() : boolean
        int modifiers = getMethodModifiers(declaringClass, slot);
        return (modifiers & Modifier.SYNTHETIC) != 0;
!!!482331.java!!!	getDefaultValue() : Object
        return getDefaultValue(declaringClass, slot);
!!!482587.java!!!	equals(inout object : Object) : boolean
        if (this == object) {
            return true;
        }
        if (!(object instanceof Method)) {
            return false;
        }
        Method rhs = (Method) object;
        // We don't compare exceptionTypes because two methods
        // can't differ only by their declared exceptions.
        return declaringClass.equals(rhs.declaringClass) &&
            name.equals(rhs.name) &&
            getModifiers() == rhs.getModifiers() &&
            returnType.equals(rhs.returnType) &&
            Arrays.equals(parameterTypes, rhs.parameterTypes);
!!!482715.java!!!	getDeclaringClass() : Class
        return declaringClass;
!!!482843.java!!!	getExceptionTypes() : Class
        if (exceptionTypes == null) {
            return EmptyArray.CLASS;
        }
        return exceptionTypes.clone();
!!!482971.java!!!	getModifiers() : int
        return getMethodModifiers(declaringClass, slot);
!!!483227.java!!!	getName() : String
        return name;
!!!483355.java!!!	getParameterTypes() : Class
        return parameterTypes.clone();
!!!483483.java!!!	getReturnType() : Class
        return returnType;
!!!483611.java!!!	hashCode() : int
        return name.hashCode();
!!!483739.java!!!	invoke(inout receiver : Object, inout  : Object...args) : Object
        if (args == null) {
            args = EmptyArray.OBJECT;
        }
        return invokeNative(receiver, args, declaringClass, parameterTypes, returnType, slot, flag);
!!!483995.java!!!	toString() : String
        StringBuilder result = new StringBuilder(Modifier.toString(getModifiers()));

        if (result.length() != 0)
            result.append(' ');
        result.append(returnType.getName());
        result.append(' ');
        result.append(declaringClass.getName());
        result.append('.');
        result.append(name);
        result.append("(");
        result.append(toString(parameterTypes));
        result.append(")");
        if (exceptionTypes != null && exceptionTypes.length != 0) {
            result.append(" throws ");
            result.append(toString(exceptionTypes));
        }

        return result.toString();
!!!484123.java!!!	getSignature() : String
        StringBuilder result = new StringBuilder();

        result.append('(');
        for (int i = 0; i < parameterTypes.length; i++) {
            result.append(getSignature(parameterTypes[i]));
        }
        result.append(')');
        result.append(getSignature(returnType));

        return result.toString();
