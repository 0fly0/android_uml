class OMX
!!!644748.cpp!!!	livesLocally(in node : node_id, in pid : pid_t) : bool
    return pid == getpid();
!!!644876.cpp!!!	listNodes(inout list : List<ComponentInfo>) : status_t
    list->clear();

    OMX_U32 index = 0;
    char componentName[256];
    while (mMaster->enumerateComponents(
                componentName, sizeof(componentName), index) == OMX_ErrorNone) {
        list->push_back(ComponentInfo());
        ComponentInfo &info = *--list->end();

        info.mName = componentName;

        Vector<String8> roles;
        OMX_ERRORTYPE err =
            mMaster->getRolesOfComponent(componentName, &roles);

        if (err == OMX_ErrorNone) {
            for (OMX_U32 i = 0; i < roles.size(); ++i) {
                info.mRoles.push_back(roles[i]);
            }
        }

        ++index;
    }

    return OK;
!!!645004.cpp!!!	allocateNode(in name : char, in observer : sp<IOMXObserver>, inout node : node_id) : status_t
    Mutex::Autolock autoLock(mLock);

    *node = 0;

    OMXNodeInstance *instance = new OMXNodeInstance(this, observer);

    OMX_COMPONENTTYPE *handle;
    OMX_ERRORTYPE err = mMaster->makeComponentInstance(
            name, &OMXNodeInstance::kCallbacks,
            instance, &handle);

    if (err != OMX_ErrorNone) {
        ALOGV("FAILED to allocate omx component '%s'", name);

        instance->onGetHandleFailed();

        return UNKNOWN_ERROR;
    }

    *node = makeNodeID(instance);
    mDispatchers.add(*node, new CallbackDispatcher(instance));

    instance->setHandle(*node, handle);

    mLiveNodes.add(observer->asBinder(), instance);
    observer->asBinder()->linkToDeath(this);

    return OK;
!!!645132.cpp!!!	freeNode(in node : node_id) : status_t
    OMXNodeInstance *instance = findInstance(node);

    {
        Mutex::Autolock autoLock(mLock);
        ssize_t index = mLiveNodes.indexOfKey(instance->observer()->asBinder());
        if (index < 0) {
            // This could conceivably happen if the observer dies at roughly the
            // same time that a client attempts to free the node explicitly.
            return OK;
        }
        mLiveNodes.removeItemsAt(index);
    }

    instance->observer()->asBinder()->unlinkToDeath(this);

    status_t err = instance->freeNode(mMaster);

    {
        Mutex::Autolock autoLock(mLock);
        ssize_t index = mDispatchers.indexOfKey(node);
        CHECK(index >= 0);
        mDispatchers.removeItemsAt(index);
    }

    return err;
!!!645260.cpp!!!	sendCommand(in node : node_id, in cmd : OMX_COMMANDTYPE, in param : OMX_S32) : status_t
    return findInstance(node)->sendCommand(cmd, param);
!!!645388.cpp!!!	getParameter(in node : node_id, in index : OMX_INDEXTYPE, inout params : void, in size : size_t) : status_t
    return findInstance(node)->getParameter(
            index, params, size);
!!!645516.cpp!!!	setParameter(in node : node_id, in index : OMX_INDEXTYPE, in params : void, in size : size_t) : status_t
    return findInstance(node)->setParameter(
            index, params, size);
!!!645644.cpp!!!	getConfig(in node : node_id, in index : OMX_INDEXTYPE, inout params : void, in size : size_t) : status_t
    return findInstance(node)->getConfig(
            index, params, size);
!!!645772.cpp!!!	setConfig(in node : node_id, in index : OMX_INDEXTYPE, in params : void, in size : size_t) : status_t
    return findInstance(node)->setConfig(
            index, params, size);
!!!645900.cpp!!!	getState(in node : node_id, inout state : OMX_STATETYPE) : status_t
    return findInstance(node)->getState(
            state);
!!!646028.cpp!!!	enableGraphicBuffers(in node : node_id, in port_index : OMX_U32, in enable : OMX_BOOL) : status_t
    return findInstance(node)->enableGraphicBuffers(port_index, enable);
!!!646156.cpp!!!	getGraphicBufferUsage(in node : node_id, in port_index : OMX_U32, inout usage : OMX_U32) : status_t
    return findInstance(node)->getGraphicBufferUsage(port_index, usage);
!!!646284.cpp!!!	storeMetaDataInBuffers(in node : node_id, in port_index : OMX_U32, in enable : OMX_BOOL) : status_t
    return findInstance(node)->storeMetaDataInBuffers(port_index, enable);
!!!646412.cpp!!!	useBuffer(in node : node_id, in port_index : OMX_U32, in params : sp<IMemory>, inout buffer : buffer_id) : status_t
    return findInstance(node)->useBuffer(
            port_index, params, buffer);
!!!646540.cpp!!!	useGraphicBuffer(in node : node_id, in port_index : OMX_U32, in graphicBuffer : sp<GraphicBuffer>, inout buffer : buffer_id) : status_t
    return findInstance(node)->useGraphicBuffer(
            port_index, graphicBuffer, buffer);
!!!646668.cpp!!!	allocateBuffer(in node : node_id, in port_index : OMX_U32, in size : size_t, inout buffer : buffer_id, inout buffer_data : void) : status_t
    return findInstance(node)->allocateBuffer(
            port_index, size, buffer, buffer_data);
!!!646796.cpp!!!	allocateBufferWithBackup(in node : node_id, in port_index : OMX_U32, in params : sp<IMemory>, inout buffer : buffer_id) : status_t
    return findInstance(node)->allocateBufferWithBackup(
            port_index, params, buffer);
!!!646924.cpp!!!	freeBuffer(in node : node_id, in port_index : OMX_U32, in buffer : buffer_id) : status_t
    return findInstance(node)->freeBuffer(
            port_index, buffer);
!!!647052.cpp!!!	fillBuffer(in node : node_id, in buffer : buffer_id) : status_t
    return findInstance(node)->fillBuffer(buffer);
!!!647180.cpp!!!	emptyBuffer(in node : node_id, in buffer : buffer_id, in range_offset : OMX_U32, in range_length : OMX_U32, in flags : OMX_U32, in timestamp : OMX_TICKS) : status_t
    return findInstance(node)->emptyBuffer(
            buffer, range_offset, range_length, flags, timestamp);
!!!647308.cpp!!!	getExtensionIndex(in node : node_id, in parameter_name : char, inout index : OMX_INDEXTYPE) : status_t
    return findInstance(node)->getExtensionIndex(
            parameter_name, index);
!!!647436.cpp!!!	binderDied(in the_late_who : wp<IBinder>) : void
    OMXNodeInstance *instance;

    {
        Mutex::Autolock autoLock(mLock);

        ssize_t index = mLiveNodes.indexOfKey(the_late_who);
        CHECK(index >= 0);

        instance = mLiveNodes.editValueAt(index);
        mLiveNodes.removeItemsAt(index);

        index = mDispatchers.indexOfKey(instance->nodeID());
        CHECK(index >= 0);
        mDispatchers.removeItemsAt(index);

        invalidateNodeID_l(instance->nodeID());
    }

    instance->onObserverDied(mMaster);
!!!647948.cpp!!!	invalidateNodeID(in node : node_id) : void
    Mutex::Autolock autoLock(mLock);
    invalidateNodeID_l(node);
!!!648076.cpp!!!	~OMX()
    delete mMaster;
    mMaster = NULL;
!!!648204.cpp!!!	makeNodeID(inout instance : OMXNodeInstance) : node_id
    // mLock is already held.

    node_id node = (node_id)++mNodeCounter;
    mNodeIDToInstance.add(node, instance);

    return node;
!!!648332.cpp!!!	findInstance(in node : node_id) : OMXNodeInstance
    Mutex::Autolock autoLock(mLock);

    ssize_t index = mNodeIDToInstance.indexOfKey(node);

    return index < 0 ? NULL : mNodeIDToInstance.valueAt(index);
!!!648460.cpp!!!	findDispatcher(in node : node_id) : sp<CallbackDispatcher>
    Mutex::Autolock autoLock(mLock);

    ssize_t index = mDispatchers.indexOfKey(node);

    return index < 0 ? NULL : mDispatchers.valueAt(index);
!!!648588.cpp!!!	invalidateNodeID_l(in node : node_id) : void
    // mLock is held.
    mNodeIDToInstance.removeItem(node);
