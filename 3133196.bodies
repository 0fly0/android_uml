class Capabilities
!!!13215884.java!!!	Capabilities()
        mDeviceCapabilities = new Bundle();
!!!13216012.java!!!	Capabilities(inout parcel : Parcel)
        mDeviceCapabilities = parcel.readBundle();
!!!13216140.java!!!	setCapability(inout capability : Capability, inout enable : boolean) : void
        mDeviceCapabilities.putBoolean(capability.name(), enable);
!!!13216268.java!!!	hasCapability(inout capability : Capability, inout defaultValue : boolean) : boolean
        Object value = mDeviceCapabilities.get(capability.name());
        if (value == null) {
            return defaultValue;
        } else if (value.getClass() == Boolean.class) {
            return ((Boolean) value).booleanValue();
        } else {
            // Other value types imply "enabled".
            return true;
        }
!!!13216396.java!!!	hasCapability(inout capability : Capability) : boolean
        return hasCapability(capability, capability.isEnabledByDefault());
!!!13216524.java!!!	getCapabilityIntValue(inout capability : Capability) : int
        Object value = mDeviceCapabilities.get(capability.name());
        if ((value != null) && (value.getClass() == Integer.class)) {
            return (Integer) value;
        }
        return 0;
!!!13216652.java!!!	getCapabilityStringValue(inout capability : Capability) : String
        Object value = mDeviceCapabilities.get(capability.name());
        if ((value != null) && (value.getClass() == String.class)) {
            return (String) value;
        }
        return null;
!!!13216780.java!!!	getCapabilityStringArrayValue(inout capability : Capability) : String
        Object value = mDeviceCapabilities.get(capability.name());
        if ((value != null) && (value.getClass() == String[].class)) {
            return (String[]) value;
        }
        return null;
!!!13216908.java!!!	setCapabilityIntValue(inout capability : Capability, in value : int) : void
        mDeviceCapabilities.putInt(capability.name(), value);
!!!13217036.java!!!	setCapabilityStringValue(inout capability : Capability, in value : String) : void
        mDeviceCapabilities.putString(capability.name(), value);
!!!13217164.java!!!	setCapabilityStringArrayValue(inout capability : Capability, inout value : String) : void
        mDeviceCapabilities.putStringArray(capability.name(), value);
!!!13217292.java!!!	toJsonString() : String
        return toJsonObject().toString();
!!!13217420.java!!!	toJsonObject() : JSONObject
        JSONObject returnValue = new JSONObject();
        for (String key : mDeviceCapabilities.keySet()) {
            try {
                Capability capability = Capability.findCapability(key);
                if (capability == null) continue;
                Object value = mDeviceCapabilities.get(key);
                Class clazz = value.getClass();
                if (clazz == Boolean.class) {
                    returnValue.put(key, (Boolean) value);
                } else if (clazz == Integer.class) {
                    returnValue.put(key, (Integer) value);
                } else if (clazz == String.class) {
                    returnValue.put(key, (String) value);
                } else if (clazz == String[].class) {
                    String[] array = (String[]) value;
                    JSONArray jsonArray = new JSONArray();
                    for (int i = 0; i < array.length; ++i) {
                        jsonArray.put(i, array[i]);
                    }
                    returnValue.put(key, jsonArray);
                }
            } catch (JSONException e) {
                Log.w(LOG_TAG, "Error saving capability key " + key);
            }
        }
        return returnValue;
!!!13217548.java!!!	loadFromJsonObject(in jsonString : String) : void
        mDeviceCapabilities.clear();
        JSONObject object;
        try {
            object = new JSONObject(jsonString);
        } catch (JSONException e1) {
            Log.w(LOG_TAG, "Error loading capabilities");
            return;
        }
        Iterator keyIterator = object.keys();
        while (keyIterator.hasNext()) {
            String key = (String) keyIterator.next();
            try {
                Capability capability = Capability.findCapability(key);
                if (capability == null) continue;

                Object value = object.get(key);
                Class clazz = value.getClass();
                if (clazz == Boolean.class) {
                    mDeviceCapabilities.putBoolean(key, (Boolean) value);
                } else if (clazz == Integer.class) {
                    mDeviceCapabilities.putInt(key, (Integer) value);
                } else if (clazz == String.class) {
                    mDeviceCapabilities.putString(key, (String) value);
                } else if (clazz == JSONArray.class) {
                    JSONArray jsonArray = (JSONArray) value;
                    String[] array = new String[jsonArray.length()];
                    for (int i = 0; i < array.length; ++i) {
                        array[i] = jsonArray.getString(i);
                    }
                    mDeviceCapabilities.putStringArray(key, array);
                }
            } catch (JSONException e) {
                Log.w(LOG_TAG, "Error loading capability key " + key);
            }
        }
!!!13217676.java!!!	describeContents() : int
        return 0;
!!!13217804.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeBundle(mDeviceCapabilities);
