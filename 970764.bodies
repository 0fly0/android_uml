class CacheManager
!!!4818060.java!!!	init(inout context : Context) : void
        // This isn't actually where the real cache lives, but where we put files for the
        // purpose of getCacheFile().
        mBaseDir = new File(context.getCacheDir(), "webviewCacheChromiumStaging");
        if (!mBaseDir.exists()) {
            mBaseDir.mkdirs();
        }
!!!4818188.java!!!	getCacheFileBaseDir() : File
        return mBaseDir;
!!!4818316.java!!!	cacheDisabled() : boolean
        return false;
!!!4818444.java!!!	startCacheTransaction() : boolean
        return false;
!!!4818572.java!!!	endCacheTransaction() : boolean
        return false;
!!!4818700.java!!!	getCacheFile(in url : String, inout headers : Map<String, String>) : CacheResult
        return getCacheFile(url, 0, headers);
!!!4818828.java!!!	getCacheFile(in url : String, in postIdentifier : long, inout headers : Map<String, String>) : CacheResult
        CacheResult result = nativeGetCacheResult(url);
        if (result == null) {
            return null;
        }
        // A temporary local file will have been created native side and localPath set
        // appropriately.
        File src = new File(mBaseDir, result.localPath);
        try {
            // Open the file here so that even if it is deleted, the content
            // is still readable by the caller until close() is called.
            result.inStream = new FileInputStream(src);
        } catch (FileNotFoundException e) {
            Log.v(LOGTAG, "getCacheFile(): Failed to open file: " + e);
            // TODO: The files in the cache directory can be removed by the
            // system. If it is gone, what should we do?
            return null;
        }

        // A null value for headers is used by CACHE_MODE_CACHE_ONLY to imply
        // that we should provide the cache result even if it is expired.
        // Note that a negative expires value means a time in the far future.
        if (headers != null && result.expires >= 0
                && result.expires <= System.currentTimeMillis()) {
            if (result.lastModified == null && result.etag == null) {
                return null;
            }
            // Return HEADER_KEY_IFNONEMATCH or HEADER_KEY_IFMODIFIEDSINCE
            // for requesting validation.
            if (result.etag != null) {
                headers.put(HEADER_KEY_IFNONEMATCH, result.etag);
            }
            if (result.lastModified != null) {
                headers.put(HEADER_KEY_IFMODIFIEDSINCE, result.lastModified);
            }
        }

        if (DebugFlags.CACHE_MANAGER) {
            Log.v(LOGTAG, "getCacheFile for url " + url);
        }

        return result;
!!!4818956.java!!!	createCacheFile(in url : String, in statusCode : int, inout headers : Headers, in mimeType : String, inout forceCache : boolean) : CacheResult
        // This method is public but hidden. We break functionality.
        return null;
!!!4819084.java!!!	saveCacheFile(in url : String, inout cacheResult : CacheResult) : void
        saveCacheFile(url, 0, cacheResult);
!!!4819212.java!!!	saveCacheFile(in url : String, in postIdentifier : long, inout cacheRet : CacheResult) : void
        try {
            cacheRet.outStream.close();
        } catch (IOException e) {
            return;
        }

        // This method is exposed in the public API but the API provides no
        // way to obtain a new CacheResult object with a non-null output
        // stream ...
        // - CacheResult objects returned by getCacheFile() have a null
        //   output stream.
        // - new CacheResult objects have a null output stream and no
        //   setter is provided.
        // Since this method throws a null pointer exception in this case,
        // it is effectively useless from the point of view of the public
        // API.
        //
        // With the Chromium HTTP stack we continue to throw the same
        // exception for 'backwards compatibility' with the Android HTTP
        // stack.
        //
        // This method is not used from within this package, and for public API
        // use, we should already have thrown an exception above.
        assert false;
!!!4819340.java!!!	removeAllCacheFiles() : boolean
        // delete cache files in a separate thread to not block UI.
        final Runnable clearCache = new Runnable() {
            public void run() {
                // delete all cache files
                try {
                    String[] files = mBaseDir.list();
                    // if mBaseDir doesn't exist, files can be null.
                    if (files != null) {
                        for (int i = 0; i < files.length; i++) {
                            File f = new File(mBaseDir, files[i]);
                            if (!f.delete()) {
                                Log.e(LOGTAG, f.getPath() + " delete failed.");
                            }
                        }
                    }
                } catch (SecurityException e) {
                    // Ignore SecurityExceptions.
                }
            }
        };
        new Thread(clearCache).start();
        return true;
