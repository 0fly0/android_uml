class Gl20Renderer
!!!4529548.java!!!	Gl20Renderer(inout translucent : boolean)
            super(2, translucent);
!!!4529676.java!!!	createCanvas() : HardwareCanvas
            return mGlCanvas = new GLES20Canvas(mTranslucent);
!!!4529804.java!!!	createManagedContext(inout eglContext : EGLContext) : ManagedEGLContext
            return new Gl20Renderer.Gl20RendererEglContext(mEglContext);
!!!4529932.java!!!	getConfig(inout dirtyRegions : boolean) : int
            return new int[] {
                    EGL_RENDERABLE_TYPE, EGL14.EGL_OPENGL_ES2_BIT,
                    EGL_RED_SIZE, 8,
                    EGL_GREEN_SIZE, 8,
                    EGL_BLUE_SIZE, 8,
                    EGL_ALPHA_SIZE, 8,
                    EGL_DEPTH_SIZE, 0,
                    EGL_CONFIG_CAVEAT, EGL_NONE,
                    // TODO: Find a better way to choose the stencil size
                    EGL_STENCIL_SIZE, mShowOverdraw ? GLES20Canvas.getStencilSize() : 0,
                    EGL_SURFACE_TYPE, EGL_WINDOW_BIT |
                            (dirtyRegions ? EGL14.EGL_SWAP_BEHAVIOR_PRESERVED_BIT : 0),
                    EGL_NONE
            };
!!!4530060.java!!!	initCaches() : void
            GLES20Canvas.initCaches();
!!!4530188.java!!!	canDraw() : boolean
            return super.canDraw() && mGlCanvas != null;
!!!4530316.java!!!	onPreDraw(inout dirty : Rect) : int
            return mGlCanvas.onPreDraw(dirty);
!!!4530444.java!!!	onPostDraw() : void
            mGlCanvas.onPostDraw();
!!!4530572.java!!!	destroy(inout full : boolean) : void
            try {
                super.destroy(full);
            } finally {
                if (full && mGlCanvas != null) {
                    mGlCanvas = null;
                }
            }
!!!4530700.java!!!	setup(in width : int, in height : int) : void
            super.setup(width, height);
            if (mVsyncDisabled) {
                disableVsync();
            }
!!!4530828.java!!!	pushLayerUpdate(inout layer : HardwareLayer) : void
            mGlCanvas.pushLayerUpdate(layer);
!!!4530956.java!!!	createDisplayList(in name : String) : DisplayList
            return new GLES20DisplayList(name);
!!!4531084.java!!!	createHardwareLayer(inout isOpaque : boolean) : HardwareLayer
            return new GLES20TextureLayer(isOpaque);
!!!4531212.java!!!	createHardwareLayer(in width : int, in height : int, inout isOpaque : boolean) : HardwareLayer
            return new GLES20RenderLayer(width, height, isOpaque);
!!!4531340.java!!!	createSurfaceTexture(inout layer : HardwareLayer) : SurfaceTexture
            return ((GLES20TextureLayer) layer).getSurfaceTexture();
!!!4531468.java!!!	setSurfaceTexture(inout layer : HardwareLayer, inout surfaceTexture : SurfaceTexture) : void
            ((GLES20TextureLayer) layer).setSurfaceTexture(surfaceTexture);
!!!4531596.java!!!	safelyRun(inout action : Runnable) : boolean
            boolean needsContext = true;
            if (isEnabled() && checkCurrent() != SURFACE_STATE_ERROR) needsContext = false;

            if (needsContext) {
                Gl20RendererEglContext managedContext =
                        (Gl20RendererEglContext) sEglContextStorage.get();
                if (managedContext == null) return false;
                usePbufferSurface(managedContext.getContext());
            }

            try {
                action.run();
            } finally {
                if (needsContext) {
                    sEgl.eglMakeCurrent(sEglDisplay, EGL_NO_SURFACE,
                            EGL_NO_SURFACE, EGL_NO_CONTEXT);
                }
            }

            return true;
!!!4531724.java!!!	destroyLayers(in view : View) : void
            if (view != null) {
                safelyRun(new Runnable() {
                    @Override
                    public void run() {
                        if (mCanvas != null) {
                            mCanvas.clearLayerUpdates();
                        }
                        destroyHardwareLayer(view);
                        GLES20Canvas.flushCaches(GLES20Canvas.FLUSH_CACHES_LAYERS);
                    }
                });
            }
!!!4531852.java!!!	destroyHardwareLayer(inout view : View) : void
            view.destroyLayer(true);

            if (view instanceof ViewGroup) {
                ViewGroup group = (ViewGroup) view;

                int count = group.getChildCount();
                for (int i = 0; i < count; i++) {
                    destroyHardwareLayer(group.getChildAt(i));
                }
            }
!!!4531980.java!!!	destroyHardwareResources(in view : View) : void
            if (view != null) {
                safelyRun(new Runnable() {
                    @Override
                    public void run() {
                        if (mCanvas != null) {
                            mCanvas.clearLayerUpdates();
                        }
                        destroyResources(view);
                        GLES20Canvas.flushCaches(GLES20Canvas.FLUSH_CACHES_LAYERS);
                    }
                });
            }
!!!4532108.java!!!	destroyResources(inout view : View) : void
            view.destroyHardwareResources();

            if (view instanceof ViewGroup) {
                ViewGroup group = (ViewGroup) view;

                int count = group.getChildCount();
                for (int i = 0; i < count; i++) {
                    destroyResources(group.getChildAt(i));
                }
            }
!!!4532236.java!!!	create(inout translucent : boolean) : HardwareRenderer
            if (GLES20Canvas.isAvailable()) {
                return new Gl20Renderer(translucent);
            }
            return null;
!!!4532364.java!!!	startTrimMemory(in level : int) : void
            if (sEgl == null || sEglConfig == null) return;

            Gl20RendererEglContext managedContext =
                    (Gl20RendererEglContext) sEglContextStorage.get();
            // We do not have OpenGL objects
            if (managedContext == null) {
                return;
            } else {
                usePbufferSurface(managedContext.getContext());
            }

            if (level >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE) {
                GLES20Canvas.flushCaches(GLES20Canvas.FLUSH_CACHES_FULL);
            } else if (level >= ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN) {
                GLES20Canvas.flushCaches(GLES20Canvas.FLUSH_CACHES_MODERATE);
            }
!!!4532492.java!!!	endTrimMemory() : void
            if (sEgl != null && sEglDisplay != null) {
                sEgl.eglMakeCurrent(sEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
            }
!!!4532620.java!!!	usePbufferSurface(inout eglContext : EGLContext) : void
            synchronized (sPbufferLock) {
                // Create a temporary 1x1 pbuffer so we have a context
                // to clear our OpenGL objects
                if (sPbuffer == null) {
                    sPbuffer = sEgl.eglCreatePbufferSurface(sEglDisplay, sEglConfig, new int[] {
                            EGL_WIDTH, 1, EGL_HEIGHT, 1, EGL_NONE
                    });
                }
            }
            sEgl.eglMakeCurrent(sEglDisplay, sPbuffer, sPbuffer, eglContext);
