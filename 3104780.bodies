class MockKeyboardSwitcher
!!!13018380.java!!!	getLayoutId() : int
        return mLayout;
!!!13018508.java!!!	getLayoutName(in layoutId : int) : String
        switch (layoutId) {
        case Constants.ALPHABET_UNSHIFTED: return "ALPHABET_UNSHIFTED";
        case Constants.ALPHABET_MANUAL_SHIFTED: return "ALPHABET_MANUAL_SHIFTED";
        case Constants.ALPHABET_AUTOMATIC_SHIFTED: return "ALPHABET_AUTOMATIC_SHIFTED";
        case Constants.ALPHABET_SHIFT_LOCKED: return "ALPHABET_SHIFT_LOCKED";
        case Constants.ALPHABET_SHIFT_LOCK_SHIFTED: return "ALPHABET_SHIFT_LOCK_SHIFTED";
        case Constants.SYMBOLS_UNSHIFTED: return "SYMBOLS_UNSHIFTED";
        case Constants.SYMBOLS_SHIFTED: return "SYMBOLS_SHIFTED";
        default: return "UNKNOWN<" + layoutId + ">";
        }
!!!13018636.java!!!	setAutoCapsMode(in autoCaps : int) : void
        mAutoCapsMode = autoCaps;
        mAutoCapsState = autoCaps;
!!!13018764.java!!!	expireDoubleTapTimeout() : void
        mIsInDoubleTapTimeout = false;
!!!13018892.java!!!	setAlphabetKeyboard() : void
        mLayout = Constants.ALPHABET_UNSHIFTED;
!!!13019020.java!!!	setAlphabetManualShiftedKeyboard() : void
        mLayout = Constants.ALPHABET_MANUAL_SHIFTED;
!!!13019148.java!!!	setAlphabetAutomaticShiftedKeyboard() : void
        mLayout = Constants.ALPHABET_AUTOMATIC_SHIFTED;
!!!13019276.java!!!	setAlphabetShiftLockedKeyboard() : void
        mLayout = Constants.ALPHABET_SHIFT_LOCKED;
!!!13019404.java!!!	setAlphabetShiftLockShiftedKeyboard() : void
        mLayout = Constants.ALPHABET_SHIFT_LOCK_SHIFTED;
!!!13019532.java!!!	setSymbolsKeyboard() : void
        mLayout = Constants.SYMBOLS_UNSHIFTED;
!!!13019660.java!!!	setSymbolsShiftedKeyboard() : void
        mLayout = Constants.SYMBOLS_SHIFTED;
!!!13019788.java!!!	requestUpdatingShiftState() : void
        mState.onUpdateShiftState(mAutoCapsState);
!!!13019916.java!!!	startDoubleTapTimer() : void
        mIsInDoubleTapTimeout = true;
!!!13020044.java!!!	cancelDoubleTapTimer() : void
        mIsInDoubleTapTimeout = false;
!!!13020172.java!!!	isInDoubleTapTimeout() : boolean
        return mIsInDoubleTapTimeout;
!!!13020300.java!!!	startLongPressTimer(in code : int) : void
        mLongPressTimeoutCode = code;
!!!13020428.java!!!	cancelLongPressTimer() : void
        mLongPressTimeoutCode = 0;
!!!13020556.java!!!	hapticAndAudioFeedback(in code : int) : void
        // Nothing to do.
!!!13020684.java!!!	onLongPressTimeout(in code : int) : void
        // TODO: Handle simultaneous long presses.
        if (mLongPressTimeoutCode == code) {
            mLongPressTimeoutCode = 0;
            mState.onLongPressTimeout(code);
        }
!!!13020812.java!!!	updateShiftState() : void
        mState.onUpdateShiftState(mAutoCapsState);
!!!13020940.java!!!	loadKeyboard(in layoutSwitchBackSymbols : String) : void
        mState.onLoadKeyboard(layoutSwitchBackSymbols);
!!!13021068.java!!!	saveKeyboardState() : void
        mState.onSaveKeyboardState();
!!!13021196.java!!!	onPressKey(in code : int, inout isSinglePointer : boolean) : void
        mState.onPressKey(code, isSinglePointer, mAutoCapsState);
!!!13021324.java!!!	onReleaseKey(in code : int, inout withSliding : boolean) : void
        mState.onReleaseKey(code, withSliding);
        if (mLongPressTimeoutCode == code) {
            mLongPressTimeoutCode = 0;
        }
!!!13021452.java!!!	onCodeInput(in code : int, inout isSinglePointer : boolean) : void
        if (mAutoCapsMode == Constants.CAP_MODE_WORDS) {
            if (Keyboard.isLetterCode(code)) {
                mAutoCapsState = (code == Constants.CODE_AUTO_CAPS_TRIGGER)
                        ? mAutoCapsMode : Constants.CAP_MODE_OFF;
            }
        } else {
            mAutoCapsState = mAutoCapsMode;
        }
        mState.onCodeInput(code, isSinglePointer, mAutoCapsState);
!!!13021580.java!!!	onCancelInput(inout isSinglePointer : boolean) : void
        mState.onCancelInput(isSinglePointer);
