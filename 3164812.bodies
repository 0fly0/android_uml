class RequestReceiverImpl
!!!13414796.java!!!	RequestReceiverImpl(inout context : Context, inout inputBridge : InputBridge)
        mContext = context;
        mInputBridge = inputBridge;
        mKeyCodeTranslator = new KeyCodeTranslator();
        mCurrentVersion = VERSION_UNKNOWN;
        mNotificationManager =
                (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
        HandlerThread uiThread = new HandlerThread("UIHandler");
        uiThread.start();
        mUiHandler = new Handler(uiThread.getLooper()) {
            @Override
            public void handleMessage(Message msg) {
                String messageText = (String) msg.obj;
                switch(msg.what) {
                case MESSAGE_NOTIFICATION:
                    Notification.Builder builder = new Notification.Builder(mContext)
                            .setTicker(messageText)
                            .setContentTitle(messageText)
                            .setContentText(mContext.getResources().getString(
                                    R.string.notification_source))
                            .setSmallIcon(R.drawable.ic_notifications)
                            .setAutoCancel(true);
                    mNotificationManager.notify(0, builder.getNotification());
                    break;
                case MESSAGE_TOAST:
                    Toast.makeText(mContext, messageText, Toast.LENGTH_LONG).show();
                    break;
                default:
                    break;
                }
            }
        };

        DisplayMetrics metrics = new DisplayMetrics();
        WindowManager manager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
        manager.getDefaultDisplay().getMetrics(metrics);

        mMaxTouchX = metrics.widthPixels;
        mMaxTouchY = metrics.heightPixels;
!!!13414924.java!!!	onData(inout token : Token, in type : String, in data : String) : void
        if (type.equals(ProtocolConstants.DATA_TYPE_STRING)) {
            generateKeyEvents(data);
            EventLogger.logKeysPressed(data.length());
        } else if (type.equals(ProtocolConstants.DATA_TYPE_NOTIFICATION)) {
            generateNotification(MESSAGE_NOTIFICATION, data);
        } else if (type.equals(ProtocolConstants.DATA_TYPE_TOAST)) {
            generateNotification(MESSAGE_TOAST, data);
        } else if (type.equals(ProtocolConstants.DATA_TYPE_VOICE)) {
            startVoiceActivity(data);
        } else {
            Log.d(LOG_TAG, "received unknown data type: " + type
                    + ", with data: " + data);
        }
!!!13415180.java!!!	onConnect(inout connectInfo : ConnectInfo) : ConnectInfo
        Log.d(LOG_TAG, "received connect message: "
                + connectInfo.toString());

        if (mCurrentVersion != VERSION_UNKNOWN) {
            // Simple protection against version flipping
            return null;
        }
        if (connectInfo.hasVersionNumber() && connectInfo.getVersionNumber() > VERSION_1) {
            mCurrentVersion = VERSION_2;
            return new ConnectInfo(ProtocolConstants.DEVICE_NAME, VERSION_2);
        }
        mCurrentVersion = VERSION_1;
        return null;
!!!13415308.java!!!	onMouseEvent(in deltaX : int, in deltaY : int) : void
        mInputBridge.sendMouseMovement(deltaX, deltaY);
!!!13415436.java!!!	onMouseWheel(in xScroll : int, in yScroll : int) : void
        // NOTE(olivier): KeyInputQueue scrolls by negative amount,
        // so apply -1 multiplier here as well to scroll by desired
        // amount.
        if (xScroll != 0) {
            generateEvent(InputBridge.EV_REL, InputBridge.REL_HWHEEL, -xScroll);
        }
        if (yScroll != 0) {
            generateEvent(InputBridge.EV_REL, InputBridge.REL_WHEEL, -yScroll);
        }
!!!13415564.java!!!	onKeyEvent(inout code : Code, inout action : Action) : void
        generateEvent(InputBridge.EV_KEY, code.getNumber(), action.getNumber());
        if (Action.UP.equals(action)) {
            switch (code) {
                case KEYCODE_DPAD_UP:
                case KEYCODE_DPAD_DOWN:
                case KEYCODE_DPAD_LEFT:
                case KEYCODE_DPAD_RIGHT:
                    EventLogger.logDpadDirectionPressed();
                    break;

                case KEYCODE_DPAD_CENTER:
                    EventLogger.logDpadOkPressed();
                    break;

                case BTN_MOUSE:
                    EventLogger.logMouseClicked();
                    break;

                default:
                    EventLogger.logKeyPressed();
            }
        }
!!!13415692.java!!!	onURI(in uri : String) : boolean
        if (uri != null) {
            // If uri's scheme is in GSERVICES_SCHEME_ONLY_URI_LIST,
            // the uri can have only scheme except other information (domain, query).
            // GSERVICES_SCHEME_ONLY_URI_LIST example: "nflx://;amzn://"
            String schemeOnlyUriListFromGservices =
                    Gservices.getString(mContext.getContentResolver(),
                            GSERVICES_SCHEME_ONLY_URI_LIST);
            String[] schemeOnlyUriList = null;
            if (!TextUtils.isEmpty(schemeOnlyUriListFromGservices)) {
                String uriScheme = Uri.parse(uri).getScheme() + "://";
                if (schemeOnlyUriListFromGservices.matches("(.*;)*" + uriScheme + "(;.*)*")) {
                    uri = uriScheme;
                    String toastMessage = mContext.getString(R.string.filtered_uri, uri);
                    generateNotification(MESSAGE_TOAST, toastMessage);
                }
            }

            Log.i(LOG_TAG, "Flinging to " + uri);
            try {
                Intent intent = Intent.parseUri(uri, 0);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                mContext.startActivity(intent);
                EventLogger.logUrlFlinged(uri);
                return true;
            } catch (ActivityNotFoundException e) {
                Log.e(LOG_TAG, "Could not fling", e);
            } catch (URISyntaxException e) {
                Log.e(LOG_TAG, "Could not fling", e);
            }
        }
        return false;
!!!13415820.java!!!	onSearchQuery(in text : String) : boolean
        SearchManager manager = (SearchManager) mContext.getSystemService(Context.SEARCH_SERVICE);
        manager.startSearch(text, false,
            new ComponentName(this.getClass().getPackage().getName(), this.getClass().getName()),
            null, true);
        return false;
!!!13416204.java!!!	onTouchEvent(inout touchEvent : List<TouchDescriptor>) : void
        int[] id = new int[touchEvent.size()];
        int[] action = new int[touchEvent.size()];
        int[] x = new int[touchEvent.size()];
        int[] y = new int[touchEvent.size()];
        int[] pressure = new int[touchEvent.size()];

        int index = 0;
        for (TouchDescriptor touch : touchEvent) {
            id[index] = touch.getId();
            action[index] = (touch.isPressAction()) ? InputBridge.ACTION_DOWN :
                    InputBridge.ACTION_UP;

            x[index] = (int) (touch.getX() * mMaxTouchX);
            y[index] = (int) (touch.getY() * mMaxTouchY);

            pressure[index] = (int) (touch.getPressure() * InputBridge.TOUCH_PRESSURE_SCALE);

            index++;
        }

        mInputBridge.sendTouchEvent(touchEvent.size(), id, action, x, y, pressure);
!!!13416332.java!!!	generateEvent(in type : int, in code : int, in action : int) : void
        mInputBridge.sendEvent(type, code, action);
!!!13416460.java!!!	generateKeyEvent(in code : int, in action : int) : void
        generateEvent(InputBridge.EV_KEY, code, action);
!!!13416588.java!!!	generateKeyEvents(inout sequence : CharSequence) : void
        if (sequence != null) {
            for (int i = 0; i < sequence.length(); i++) {
                translateChar(sequence.charAt(i));
            }
        }
!!!13416716.java!!!	generateKeyEventModifier(inout keyCode : Code, inout modifierCode : Code) : void
        if (modifierCode != null) {
            generateKeyEvent(modifierCode.getNumber(), InputBridge.ACTION_DOWN);
        }
        generateKeyEvent(keyCode.getNumber(), InputBridge.ACTION_DOWN);
        generateKeyEvent(keyCode.getNumber(), InputBridge.ACTION_UP);
        if (modifierCode != null) {
            generateKeyEvent(modifierCode.getNumber(), InputBridge.ACTION_UP);
        }
!!!13416844.java!!!	translateChar(in c : char) : void
        Pair<Code, Code> keyModifierPair = mKeyCodeTranslator.translateChar(c);
        if (keyModifierPair != null) {
            generateKeyEventModifier(keyModifierPair.first, keyModifierPair.second);
        } else {
            Log.d(LOG_TAG, "Unsupported character found: " + c);
        }
!!!13416972.java!!!	generateNotification(in messageType : int, in data : String) : void
        if (data != null) {
            Message msg = mUiHandler.obtainMessage(messageType);
            msg.obj = data;
            mUiHandler.sendMessage(msg);
        }
!!!13417100.java!!!	startVoiceActivity(in voiceString : String) : void
        try {
            Intent intent = new Intent("com.google.tv.action.VOICE_TEXT");
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            intent.putExtra("voice_text", voiceString);
            mContext.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            Log.e(LOG_TAG, "Could not start voice action:", e);
            // Start global search instead with the top voice text.
            String topVoiceText = voiceString;
            if (topVoiceText.contains(";")) {
                topVoiceText = topVoiceText.substring(0, topVoiceText.indexOf(';'));
            }
            if (topVoiceText.contains("(")) {
                topVoiceText = voiceString.substring(0, voiceString.indexOf('('));
            }
            onSearchQuery(topVoiceText);
            if (mFirstRun) {
                // Throw a toast for the changed action.
                generateNotification(MESSAGE_TOAST,
                        mContext.getResources().getString(R.string.voice_app_not_found));
                mFirstRun = false;
            }
        }
!!!13417228.java!!!	setRemoteInputListener(inout listener : SoftInputListener) : void
        this.inputListener = listener;
!!!13417356.java!!!	onSoftInputUpdate(in content : String, in cursor : int, in oldLength : int, in newLength : int, in selectStart : int, in selectEnd : int) : void
        if (inputListener != null) {
            inputListener.onSoftInputUpdate(this, content, cursor, oldLength, newLength,
                selectStart, selectEnd);
        }
!!!13417484.java!!!	onSoftInputExecute(in imeAction : int) : void
        if (inputListener != null) {
            inputListener.onSoftInputExecute(imeAction);
        }
!!!13417612.java!!!	onSoftInputContent(in content : String, in selectStart : int, in selectEnd : int) : void
        if (inputListener != null) {
            inputListener.onSoftInputContent(this, content, selectStart, selectEnd);
        }
!!!13417740.java!!!	onQueryDefaultMediaDevice() : String
        String deviceId = null;

        Cursor cursor = mContext.getContentResolver().query(
                Devices.getDevicesUri(), DEVICES_DEVICE_ID_PROJECTION,
                DEFAULT_DEVICE_WHERE_CLAUSE, null, null);
        if (cursor.moveToFirst()) {
            deviceId = cursor.getString(0);
        }
        cursor.close();
        return deviceId;
!!!13417868.java!!!	onQueryAvailableMediaDevices() : List<String>
        ArrayList<String> sources = new ArrayList<String>();

        Cursor deviceCursor = null;
        try {
            deviceCursor = mContext.getContentResolver().query(
                    Devices.getDevicesUri(), DEVICES_DEVICE_ID_PROJECTION,
                    ENABLED_DEVICE_WHERE_CLAUSE, null, null);
        } catch (Exception e) {
            // If the database was not updated with disabled column, then
            // try to query all devices.
            Log.e(LOG_TAG, "Could not query enabled devices. ", e);
            deviceCursor = mContext.getContentResolver().query(
                    Devices.getDevicesUri(), DEVICES_DEVICE_ID_PROJECTION,
                    null, null, null);
        }
        if (deviceCursor != null) {
            while (deviceCursor.moveToNext()) {
                sources.add(deviceCursor.getString(0));
            }
            deviceCursor.close();
        }
        return sources;
!!!13417996.java!!!	onQueryBoxName() : String
        return Build.PRODUCT;
!!!13418124.java!!!	onQueryMacAddress() : String
        String macAddress = "00:00:00:00:00:00";

        try {
            final String interfaceName = SystemProperties.get("wifi.interface", "wlan0");

            IBinder b = ServiceManager.getService(Context.NETWORKMANAGEMENT_SERVICE);
            INetworkManagementService service =
                    INetworkManagementService.Stub.asInterface(b);
            macAddress =  service.getInterfaceConfig(interfaceName).getHardwareAddress();
        } catch (RemoteException ex) {
            Log.w(LOG_TAG, "Exception getting MAC address: " + ex);
        }

        return macAddress;
!!!13418252.java!!!	onQueryMediaDeviceInfo(in deviceId : String) : MediaDeviceInfo
        MediaDeviceInfo mediaDeviceInfo = null;
        Cursor deviceCursor = mContext.getContentResolver().query(
                Devices.getDevicesUri(), DEVICES_PROJECTION,
                new SqlQueryBuilder(20).append(DevicesColumns.DEVICE_ID).append(" = ?").build(),
                new String[] {deviceId} , null);

        String lineupId = null;
        if (deviceCursor.moveToNext()) {
            // Querying for lineup name.
            lineupId = deviceCursor.getString(1);
        }
        deviceCursor.close();
        if (lineupId != null) {
            Cursor lineupCursor = mContext.getContentResolver().query(
                    Lineups.getLineupsUri(), LINEUPS_PROJECTION,
                    new SqlQueryBuilder(20).append(LineupsColumns.LINEUP_ID).append(" = ?").build(),
                    new String[] {lineupId}, null);
            String lineupName = null;
            if (lineupCursor.moveToNext()) {
                lineupName = lineupCursor.getString(0);
            }
            mediaDeviceInfo = new MediaDeviceInfo(deviceId, lineupId, lineupName);
            lineupCursor.close();
        }

        // If device was found, query its enabled channels.
        if(mediaDeviceInfo != null) {
            SqlQueryBuilder query = new SqlQueryBuilder(60);
            query.append(StreamsColumns.DEVICE_ID).append(" = ?")
            .append(" and (")
            .append(StreamsColumns.IS_DISABLED).append(" = 0 or ")
            .append(StreamsColumns.IS_DISABLED).append(" is NULL)")
            .append(" and ")
            .append(StreamsColumns.STREAM_TYPE).append(" = ")
            .append(Streams.STREAM_TYPE_CHANNEL);

            try {
                Cursor channelsCursor = mContext.getContentResolver().query(
                        Streams.STREAMS_URI, CHANNEL_LIST_PROJECTION,
                        query.build(), new String[] { deviceId }, null);

                while (channelsCursor.moveToNext()) {
                    mediaDeviceInfo.addChannel(new MediaDeviceInfo.ChannelInfo(
                            channelsCursor.getString(0), channelsCursor.getString(1),
                            channelsCursor.getString(2), channelsCursor.getString(3),
                            channelsCursor.getString(4)));
                }
                channelsCursor.close();
            } catch (Exception e) {
                Log.e(LOG_TAG, "Could not query channels for device " + deviceId, e);
            }
      }
      return mediaDeviceInfo;
