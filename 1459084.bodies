class Summarizer
!!!9077132.java!!!	Summarizer(in resultsRootDirPath : String, inout context : Context)
        mFileFilter = new FileFilter();
        mResultsRootDirPath = resultsRootDirPath;

        /**
         * We don't run the database I/O in a separate thread to avoid consumer/producer problem
         * and to simplify code.
         */
        mDbHelper = new SummarizerDBHelper(context);
        mDbHelper.open();
!!!9077260.java!!!	getDetailsUri() : URI
        return new File(ManagerService.RESULTS_ROOT_DIR_PATH + File.separator +
                HTML_DETAILS_RELATIVE_PATH).toURI();
!!!9077388.java!!!	appendTest(inout result : AbstractResult) : void
        String relativePath = result.getRelativePath();

        if (result.didCrash()) {
            mCrashedTestsCount++;
        }

        if (result.didPass()) {
            result.clearResults();
            if (mFileFilter.isFail(relativePath)) {
                mUnexpectedPasses.add(result);
            } else {
                mExpectedPasses.add(result);
            }
        } else {
            if (mFileFilter.isFail(relativePath)) {
                mExpectedFailures.add(result);
            } else {
                mUnexpectedFailures.add(result);
            }
        }

        if (++mResultsSinceLastDbAccess == RESULTS_PER_DB_ACCESS) {
            persistLists();
            clearLists();
        }
!!!9077516.java!!!	clearLists() : void
        mUnexpectedFailures.clear();
        mExpectedFailures.clear();
        mUnexpectedPasses.clear();
        mExpectedPasses.clear();
!!!9077644.java!!!	persistLists() : void
        persistListToTable(mUnexpectedFailures, SummarizerDBHelper.UNEXPECTED_FAILURES_TABLE);
        persistListToTable(mExpectedFailures, SummarizerDBHelper.EXPECTED_FAILURES_TABLE);
        persistListToTable(mUnexpectedPasses, SummarizerDBHelper.UNEXPECTED_PASSES_TABLE);
        persistListToTable(mExpectedPasses, SummarizerDBHelper.EXPECTED_PASSES_TABLE);
        mResultsSinceLastDbAccess = 0;
!!!9077772.java!!!	persistListToTable(inout results : List<AbstractResult>, in table : String) : void
        for (AbstractResult abstractResult : results) {
            mDbHelper.insertAbstractResult(abstractResult, table);
        }
!!!9077900.java!!!	setTestsRelativePath(in testsRelativePath : String) : void
        mTestsRelativePath = testsRelativePath;
!!!9078028.java!!!	summarize(inout onFinishMessage : Message) : void
        persistLists();
        clearLists();

        mUnexpectedFailuresCursor =
            mDbHelper.getAbstractResults(SummarizerDBHelper.UNEXPECTED_FAILURES_TABLE);
        mUnexpectedPassesCursor =
            mDbHelper.getAbstractResults(SummarizerDBHelper.UNEXPECTED_PASSES_TABLE);
        mExpectedFailuresCursor =
            mDbHelper.getAbstractResults(SummarizerDBHelper.EXPECTED_FAILURES_TABLE);
        mExpectedPassesCursor =
            mDbHelper.getAbstractResults(SummarizerDBHelper.EXPECTED_PASSES_TABLE);

        String webKitRevision = getWebKitRevision();
        createHtmlDetails(webKitRevision);
        createTxtSummary(webKitRevision);

        clearLists();
        mUnexpectedFailuresCursor.close();
        mUnexpectedPassesCursor.close();
        mExpectedFailuresCursor.close();
        mExpectedPassesCursor.close();

        onFinishMessage.sendToTarget();
!!!9078156.java!!!	reset() : void
        mCrashedTestsCount = 0;
        clearLists();
        mDbHelper.reset();
        mDate = new Date();
!!!9078284.java!!!	dumpHtmlToFile(inout html : StringBuilder, inout append : boolean) : void
        FsUtils.writeDataToStorage(new File(mResultsRootDirPath, HTML_DETAILS_RELATIVE_PATH),
                html.toString().getBytes(), append);
        html.setLength(0);
        mResultsSinceLastHtmlDump = 0;
!!!9078412.java!!!	createTxtSummary(in webKitRevision : String) : void
        StringBuilder txt = new StringBuilder();

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        txt.append("Path: " + mTestsRelativePath + "\n");
        txt.append("Date: " + dateFormat.format(mDate) + "\n");
        txt.append("Build fingerprint: " + Build.FINGERPRINT + "\n");
        txt.append("WebKit version: " + getWebKitVersionFromUserAgentString() + "\n");
        txt.append("WebKit revision: " + webKitRevision + "\n");

        txt.append("TOTAL:                     " + getTotalTestCount() + "\n");
        txt.append("CRASHED (among all tests): " + mCrashedTestsCount + "\n");
        txt.append("UNEXPECTED FAILURES:       " + mUnexpectedFailuresCursor.getCount() + "\n");
        txt.append("UNEXPECTED PASSES:         " + mUnexpectedPassesCursor.getCount() + "\n");
        txt.append("EXPECTED FAILURES:         " + mExpectedFailuresCursor.getCount() + "\n");
        txt.append("EXPECTED PASSES:           " + mExpectedPassesCursor.getCount() + "\n");

        FsUtils.writeDataToStorage(new File(mResultsRootDirPath, TXT_SUMMARY_RELATIVE_PATH),
                txt.toString().getBytes(), false);
!!!9078540.java!!!	createHtmlDetails(in webKitRevision : String) : void
        StringBuilder html = new StringBuilder();

        html.append("<html><head>");
        html.append(CSS);
        html.append(SCRIPT);
        html.append("</head><body>");

        createTopSummaryTable(webKitRevision, html);
        dumpHtmlToFile(html, false);

        createResultsList(html, "Unexpected failures", mUnexpectedFailuresCursor);
        createResultsList(html, "Unexpected passes", mUnexpectedPassesCursor);
        createResultsList(html, "Expected failures", mExpectedFailuresCursor);
        createResultsList(html, "Expected passes", mExpectedPassesCursor);

        html.append("</body></html>");
        dumpHtmlToFile(html, true);
!!!9078668.java!!!	getTotalTestCount() : int
        return mUnexpectedFailuresCursor.getCount() +
                mUnexpectedPassesCursor.getCount() +
                mExpectedPassesCursor.getCount() +
                mExpectedFailuresCursor.getCount();
!!!9078796.java!!!	getWebKitVersionFromUserAgentString() : String
        Resources resources = new Resources(new AssetManager(), new DisplayMetrics(),
                new Configuration());
        String userAgent =
                resources.getString(com.android.internal.R.string.web_user_agent);

        Matcher matcher = Pattern.compile("AppleWebKit/([0-9]+?\\.[0-9])").matcher(userAgent);
        if (matcher.find()) {
            return matcher.group(1);
        }
        return "unknown";
!!!9078924.java!!!	getWebKitRevision() : String
        URL url = null;
        try {
            url = new URL(ForwarderManager.getHostSchemePort(false) + "ThirdPartyProject.prop");
        } catch (MalformedURLException e) {
            assert false;
        }

        String thirdPartyProjectContents = new String(FsUtils.readDataFromUrl(url));
        Matcher matcher = Pattern.compile("^version=([0-9]+)", Pattern.MULTILINE).matcher(
                thirdPartyProjectContents);
        if (matcher.find()) {
            return matcher.group(1);
        }
        return "unknown";
!!!9079052.java!!!	createTopSummaryTable(in webKitRevision : String, inout html : StringBuilder) : void
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        html.append("<h1>" + "Layout tests' results for: " +
                (mTestsRelativePath.equals("") ? "all tests" : mTestsRelativePath) + "</h1>");
        html.append("<h3>" + "Date: " + dateFormat.format(new Date()) + "</h3>");
        html.append("<h3>" + "Build fingerprint: " + Build.FINGERPRINT + "</h3>");
        html.append("<h3>" + "WebKit version: " + getWebKitVersionFromUserAgentString() + "</h3>");

        html.append("<h3>" + "WebKit revision: ");
        html.append("<a href=\"http://trac.webkit.org/browser/trunk?rev=" + webKitRevision +
                "\" target=\"_blank\"><span class=\"path\">" + webKitRevision + "</span></a>");
        html.append("</h3>");

        html.append("<table class=\"summary\">");
        createSummaryTableRow(html, "TOTAL", getTotalTestCount());
        createSummaryTableRow(html, "CRASHED (among all tests)", mCrashedTestsCount);
        createSummaryTableRow(html, "UNEXPECTED FAILURES", mUnexpectedFailuresCursor.getCount());
        createSummaryTableRow(html, "UNEXPECTED PASSES", mUnexpectedPassesCursor.getCount());
        createSummaryTableRow(html, "EXPECTED FAILURES", mExpectedFailuresCursor.getCount());
        createSummaryTableRow(html, "EXPECTED PASSES", mExpectedPassesCursor.getCount());
        html.append("</table>");
!!!9079180.java!!!	createSummaryTableRow(inout html : StringBuilder, in caption : String, in size : int) : void
        html.append("<tr>");
        html.append("    <td>" + caption + "</td>");
        html.append("    <td>" + size + "</td>");
        html.append("</tr>");
!!!9079308.java!!!	createResultsList(inout html : StringBuilder, in title : String, inout cursor : Cursor) : void
        String relativePath;
        String id = "";
        AbstractResult.ResultCode resultCode;

        html.append("<h2>" + title + " [" + cursor.getCount() + "]</h2>");

        if (!cursor.moveToFirst()) {
            return;
        }

        AbstractResult result;
        do {
            result = SummarizerDBHelper.getAbstractResult(cursor);

            relativePath = result.getRelativePath();
            resultCode = result.getResultCode();

            html.append("<h3>");

            /**
             * Technically, two different paths could end up being the same, because
             * ':' is a valid  character in a path. However, it is probably not going
             * to cause any problems in this case
             */
            id = relativePath.replace(File.separator, ":");

            /** Write the test name */
            if (resultCode == AbstractResult.ResultCode.RESULTS_DIFFER) {
                html.append("<a href=\"#\" onClick=\"toggleDisplay('" + id + "');");
                html.append("return false;\">");
                html.append("<span class=\"tri\" id=\"tri." + id + "\">&#x25b6; </span>");
                html.append("<span class=\"path\">" + relativePath + "</span>");
                html.append("</a>");
            } else {
                html.append("<a href=\"" + getViewSourceUrl(result.getRelativePath()).toString() + "\"");
                html.append(" target=\"_blank\">");
                html.append("<span class=\"sqr sqr_" + (result.didPass() ? "pass" : "fail"));
                html.append("\">&#x25a0; </span>");
                html.append("<span class=\"path\">" + result.getRelativePath() + "</span>");
                html.append("</a>");
            }

            if (!result.didPass()) {
                appendTags(html, result);
            }

            html.append("</h3>");
            appendExpectedResultsSources(result, html);

            if (resultCode == AbstractResult.ResultCode.RESULTS_DIFFER) {
                html.append("<div class=\"diff\" style=\"display: none;\" id=\"" + id + "\">");
                html.append(result.getDiffAsHtml());
                html.append("<a href=\"#\" onClick=\"toggleDisplay('" + id + "');");
                html.append("return false;\">Hide</a>");
                html.append(" | ");
                html.append("<a href=\"" + getViewSourceUrl(relativePath).toString() + "\"");
                html.append(" target=\"_blank\">Show source</a>");
                html.append("</div>");
            }

            html.append("<div class=\"space\"></div>");

            if (++mResultsSinceLastHtmlDump == RESULTS_PER_DUMP) {
                dumpHtmlToFile(html, true);
            }

            cursor.moveToNext();
        } while (!cursor.isAfterLast());
!!!9079436.java!!!	appendTags(inout html : StringBuilder, inout result : AbstractResult) : void
        /** Tag tests which crash, time out or where results don't match */
        if (result.didCrash()) {
            html.append(" <span class=\"listItem crashed\">Crashed</span>");
        } else {
            if (result.didTimeOut()) {
                html.append(" <span class=\"listItem timed_out\">Timed out</span>");
            }
            AbstractResult.ResultCode resultCode = result.getResultCode();
            if (resultCode != AbstractResult.ResultCode.RESULTS_MATCH) {
                html.append(" <span class=\"listItem " + resultCode.name() + "\">");
                html.append(resultCode.toString());
                html.append("</span>");
            }
        }

        /** Detect missing LTC function */
        String additionalTextOutputString = result.getAdditionalTextOutputString();
        if (additionalTextOutputString != null &&
                additionalTextOutputString.contains("com.android.dumprendertree") &&
                additionalTextOutputString.contains("has no method")) {
            if (additionalTextOutputString.contains("LayoutTestController")) {
                html.append(" <span class=\"listItem noLtc\">LTC function missing</span>");
            }
            if (additionalTextOutputString.contains("EventSender")) {
                html.append(" <span class=\"listItem noEventSender\">");
                html.append("ES function missing</span>");
            }
        }
!!!9079564.java!!!	appendExpectedResultsSources(inout result : AbstractResult, inout html : StringBuilder) : void
        String textSource = result.getExpectedTextResultPath();
        String imageSource = result.getExpectedImageResultPath();

        if (result.didCrash()) {
            html.append("<span class=\"source\">Did not look for expected results</span>");
            return;
        }

        if (textSource == null) {
            // Show if a text result is missing. We may want to revisit this decision when we add
            // support for image results.
            html.append("<span class=\"source\">Expected textual result missing</span>");
        } else {
            html.append("<span class=\"source\">Expected textual result from: ");
            html.append("<a href=\"" + ForwarderManager.getHostSchemePort(false) + "LayoutTests/" +
                    textSource + "\"");
            html.append(" target=\"_blank\">");
            html.append(textSource + "</a></span>");
        }
        if (imageSource != null) {
            html.append("<span class=\"source\">Expected image result from: ");
            html.append("<a href=\"" + ForwarderManager.getHostSchemePort(false) + "LayoutTests/" +
                    imageSource + "\"");
            html.append(" target=\"_blank\">");
            html.append(imageSource + "</a></span>");
        }
!!!9079692.java!!!	getViewSourceUrl(in relativePath : String) : URL
        URL url = null;
        try {
            url = new URL("http", "localhost", ForwarderManager.HTTP_PORT,
                    "/Tools/DumpRenderTree/android/view_source.php?src=" +
                    relativePath);
        } catch (MalformedURLException e) {
            assert false : "relativePath=" + relativePath;
        }
        return url;
