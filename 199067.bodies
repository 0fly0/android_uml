class LinkedHashMap
!!!1316763.java!!!	LinkedHashMap()
        init();
        accessOrder = false;
!!!1316891.java!!!	LinkedHashMap(in initialCapacity : int)
        this(initialCapacity, DEFAULT_LOAD_FACTOR);
!!!1317019.java!!!	LinkedHashMap(in initialCapacity : int, in loadFactor : float)
        this(initialCapacity, loadFactor, false);
!!!1317147.java!!!	LinkedHashMap(in initialCapacity : int, in loadFactor : float, inout accessOrder : boolean)
        super(initialCapacity, loadFactor);
        init();
        this.accessOrder = accessOrder;
!!!1317275.java!!!	LinkedHashMap(inout map : Map)
        this(capacityForInitSize(map.size()));
        constructorPutAll(map);
!!!1317403.java!!!	init() : void
        header = new LinkedEntry<K, V>();
!!!1317787.java!!!	eldest() : Entry
        LinkedEntry<K, V> eldest = header.nxt;
        return eldest != header ? eldest : null;
!!!1317915.java!!!	addNewEntry(inout key : K, inout value : V, in hash : int, in index : int) : void
        LinkedEntry<K, V> header = this.header;

        // Remove eldest entry if instructed to do so.
        LinkedEntry<K, V> eldest = header.nxt;
        if (eldest != header && removeEldestEntry(eldest)) {
            remove(eldest.key);
        }

        // Create new entry, link it on to list, and put it into table
        LinkedEntry<K, V> oldTail = header.prv;
        LinkedEntry<K, V> newTail = new LinkedEntry<K,V>(
                key, value, hash, table[index], header, oldTail);
        table[index] = oldTail.nxt = header.prv = newTail;
!!!1318043.java!!!	addNewEntryForNullKey(inout value : V) : void
        LinkedEntry<K, V> header = this.header;

        // Remove eldest entry if instructed to do so.
        LinkedEntry<K, V> eldest = header.nxt;
        if (eldest != header && removeEldestEntry(eldest)) {
            remove(eldest.key);
        }

        // Create new entry, link it on to list, and put it into table
        LinkedEntry<K, V> oldTail = header.prv;
        LinkedEntry<K, V> newTail = new LinkedEntry<K,V>(
                null, value, 0, null, header, oldTail);
        entryForNullKey = oldTail.nxt = header.prv = newTail;
!!!1318171.java!!!	constructorNewEntry(inout key : K, inout value : V, in hash : int, inout next : HashMapEntry) : HashMapEntry
        LinkedEntry<K, V> header = this.header;
        LinkedEntry<K, V> oldTail = header.prv;
        LinkedEntry<K, V> newTail
                = new LinkedEntry<K,V>(key, value, hash, next, header, oldTail);
        return oldTail.nxt = header.prv = newTail;
!!!1318299.java!!!	get(inout key : Object) : V
        /*
         * This method is overridden to eliminate the need for a polymorphic
         * invocation in superclass at the expense of code duplication.
         */
        if (key == null) {
            HashMapEntry<K, V> e = entryForNullKey;
            if (e == null)
                return null;
            if (accessOrder)
                makeTail((LinkedEntry<K, V>) e);
            return e.value;
        }

        // Replace with Collections.secondaryHash when the VM is fast enough (http://b/8290590).
        int hash = secondaryHash(key);
        HashMapEntry<K, V>[] tab = table;
        for (HashMapEntry<K, V> e = tab[hash & (tab.length - 1)];
                e != null; e = e.next) {
            K eKey = e.key;
            if (eKey == key || (e.hash == hash && key.equals(eKey))) {
                if (accessOrder)
                    makeTail((LinkedEntry<K, V>) e);
                return e.value;
            }
        }
        return null;
!!!1318427.java!!!	makeTail(inout e : LinkedEntry) : void
        // Unlink e
        e.prv.nxt = e.nxt;
        e.nxt.prv = e.prv;

        // Relink e as tail
        LinkedEntry<K, V> header = this.header;
        LinkedEntry<K, V> oldTail = header.prv;
        e.nxt = header;
        e.prv = oldTail;
        oldTail.nxt = header.prv = e;
        modCount++;
!!!1318555.java!!!	preModify(inout e : HashMapEntry) : void
        if (accessOrder) {
            makeTail((LinkedEntry<K, V>) e);
        }
!!!1318683.java!!!	postRemove(inout e : HashMapEntry) : void
        LinkedEntry<K, V> le = (LinkedEntry<K, V>) e;
        le.prv.nxt = le.nxt;
        le.nxt.prv = le.prv;
        le.nxt = le.prv = null; // Help the GC (for performance)
!!!1318811.java!!!	containsValue(inout value : Object) : boolean
        if (value == null) {
            for (LinkedEntry<K, V> header = this.header, e = header.nxt;
                    e != header; e = e.nxt) {
                if (e.value == null) {
                    return true;
                }
            }
            return false;
        }

        // value is non-null
        for (LinkedEntry<K, V> header = this.header, e = header.nxt;
                e != header; e = e.nxt) {
            if (value.equals(e.value)) {
                return true;
            }
        }
        return false;
!!!1318939.java!!!	clear() : void
        super.clear();

        // Clear all links to help GC
        LinkedEntry<K, V> header = this.header;
        for (LinkedEntry<K, V> e = header.nxt; e != header; ) {
            LinkedEntry<K, V> nxt = e.nxt;
            e.nxt = e.prv = null;
            e = nxt;
        }

        header.nxt = header.prv = header;
