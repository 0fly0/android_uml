class CharsetEncoderICU
!!!798363.java!!!	newInstance(inout cs : Charset, inout icuCanonicalName : String) : CharsetEncoderICU
        // This complexity is necessary to ensure that even if the constructor, superclass
        // constructor, or call to updateCallback throw, we still free the native peer.
        long address = 0;
        try {
            address = NativeConverter.openConverter(icuCanonicalName);
            float averageBytesPerChar = NativeConverter.getAveBytesPerChar(address);
            float maxBytesPerChar = NativeConverter.getMaxBytesPerChar(address);
            byte[] replacement = makeReplacement(icuCanonicalName, address);
            CharsetEncoderICU result = new CharsetEncoderICU(cs, averageBytesPerChar, maxBytesPerChar, replacement, address);
            address = 0; // CharsetEncoderICU has taken ownership; its finalizer will do the free.
            return result;
        } finally {
            if (address != 0) {
                NativeConverter.closeConverter(address);
            }
        }
!!!798491.java!!!	makeReplacement(inout icuCanonicalName : String, in address : long) : byte
        // We have our own map of RI-compatible default replacements (where ICU disagrees)...
        byte[] replacement = DEFAULT_REPLACEMENTS.get(icuCanonicalName);
        if (replacement != null) {
            return replacement.clone();
        }
        // ...but fall back to asking ICU.
        return NativeConverter.getSubstitutionBytes(address);
!!!798619.java!!!	CharsetEncoderICU(inout cs : Charset, in averageBytesPerChar : float, in maxBytesPerChar : float, inout replacement : byte, in address : long)
        super(cs, averageBytesPerChar, maxBytesPerChar, replacement, true);
        // Our native peer needs to know what just happened...
        this.converterHandle = address;
        updateCallback();
!!!798747.java!!!	implReplaceWith(inout newReplacement : byte) : void
        updateCallback();
!!!798875.java!!!	implOnMalformedInput(inout newAction : CodingErrorAction) : void
        updateCallback();
!!!799003.java!!!	implOnUnmappableCharacter(inout newAction : CodingErrorAction) : void
        updateCallback();
!!!799131.java!!!	updateCallback() : void
        NativeConverter.setCallbackEncode(converterHandle, this);
!!!799259.java!!!	implReset() : void
        NativeConverter.resetCharToByte(converterHandle);
        data[INPUT_OFFSET] = 0;
        data[OUTPUT_OFFSET] = 0;
        data[INVALID_CHARS] = 0;
        output = null;
        input = null;
        allocatedInput = null;
        allocatedOutput = null;
        inEnd = 0;
        outEnd = 0;
!!!799387.java!!!	implFlush(inout out : ByteBuffer) : CoderResult
        try {
            // ICU needs to see an empty input.
            input = EmptyArray.CHAR;
            inEnd = 0;
            data[INPUT_OFFSET] = 0;

            data[OUTPUT_OFFSET] = getArray(out);
            data[INVALID_CHARS] = 0; // Make sure we don't see earlier errors.

            int error = NativeConverter.encode(converterHandle, input, inEnd, output, outEnd, data, true);
            if (ICU.U_FAILURE(error)) {
                if (error == ICU.U_BUFFER_OVERFLOW_ERROR) {
                    return CoderResult.OVERFLOW;
                } else if (error == ICU.U_TRUNCATED_CHAR_FOUND) {
                    if (data[INPUT_OFFSET] > 0) {
                        return CoderResult.malformedForLength(data[INPUT_OFFSET]);
                    }
                }
            }
            return CoderResult.UNDERFLOW;
        } finally {
            setPosition(out);
            implReset();
        }
!!!799515.java!!!	encodeLoop(inout in : CharBuffer, inout out : ByteBuffer) : CoderResult
        if (!in.hasRemaining()) {
            return CoderResult.UNDERFLOW;
        }

        data[INPUT_OFFSET] = getArray(in);
        data[OUTPUT_OFFSET]= getArray(out);
        data[INVALID_CHARS] = 0; // Make sure we don't see earlier errors.

        try {
            int error = NativeConverter.encode(converterHandle, input, inEnd, output, outEnd, data, false);
            if (ICU.U_FAILURE(error)) {
                if (error == ICU.U_BUFFER_OVERFLOW_ERROR) {
                    return CoderResult.OVERFLOW;
                } else if (error == ICU.U_INVALID_CHAR_FOUND) {
                    return CoderResult.unmappableForLength(data[INVALID_CHARS]);
                } else if (error == ICU.U_ILLEGAL_CHAR_FOUND) {
                    return CoderResult.malformedForLength(data[INVALID_CHARS]);
                } else {
                    throw new AssertionError(error);
                }
            }
            // Decoding succeeded: give us more data.
            return CoderResult.UNDERFLOW;
        } finally {
            setPosition(in);
            setPosition(out);
        }
!!!799643.java!!!	canEncode(in c : char) : boolean
        return canEncode((int) c);
!!!799771.java!!!	canEncode(in codePoint : int) : boolean
        return NativeConverter.canEncode(converterHandle, codePoint);
!!!799899.java!!!	finalize() : void
        try {
            NativeConverter.closeConverter(converterHandle);
            converterHandle=0;
        } finally {
            super.finalize();
        }
!!!800027.java!!!	getArray(inout out : ByteBuffer) : int
        if (out.hasArray()) {
            output = out.array();
            outEnd = out.arrayOffset() + out.limit();
            return out.arrayOffset() + out.position();
        } else {
            outEnd = out.remaining();
            if (allocatedOutput == null || outEnd > allocatedOutput.length) {
                allocatedOutput = new byte[outEnd];
            }
            // The array's start position is 0
            output = allocatedOutput;
            return 0;
        }
!!!800155.java!!!	getArray(inout in : CharBuffer) : int
        if (in.hasArray()) {
            input = in.array();
            inEnd = in.arrayOffset() + in.limit();
            return in.arrayOffset() + in.position();
        } else {
            inEnd = in.remaining();
            if (allocatedInput == null || inEnd > allocatedInput.length) {
                allocatedInput = new char[inEnd];
            }
            // Copy the input buffer into the allocated array.
            int pos = in.position();
            in.get(allocatedInput, 0, inEnd);
            in.position(pos);
            // The array's start position is 0
            input = allocatedInput;
            return 0;
        }
!!!800283.java!!!	setPosition(inout out : ByteBuffer) : void
        if (out.hasArray()) {
            out.position(out.position() + data[OUTPUT_OFFSET] - out.arrayOffset());
        } else {
            out.put(output, 0, data[OUTPUT_OFFSET]);
        }
        // release reference to output array, which may not be ours
        output = null;
!!!800411.java!!!	setPosition(inout in : CharBuffer) : void
        in.position(in.position() + data[INPUT_OFFSET] - data[INVALID_CHARS]);
        // release reference to input array, which may not be ours
        input = null;
