class WidgetCellLayout
!!!13480204.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        mConfig = new Config(getActivity());
        mExtent = new Slot(new Cell(0, 0), new Area(mConfig.nHorizontal, mConfig.nVertical));
        mContainer = (FrameLayout) inflater.inflate(R.layout.widget_canvas_content, container,
                false);
        return mContainer;
!!!13480332.java!!!	onCreateContextMenu(inout menu : ContextMenu, inout v : View, inout menuInfo : ContextMenuInfo) : void
        MenuInflater inflater = getActivity().getMenuInflater();
        inflater.inflate(R.menu.widget_context, menu);
        mContextWidget = WidgetFrame.forView(getActivity(), v);
!!!13480460.java!!!	onContextItemSelected(inout item : MenuItem) : boolean
        if (mContextWidget == null) {
            // This shouldn't happen, but if it does, just bail.
            return false;
        }
        switch (item.getItemId()) {
            case R.id.menu_delete:
                mListener.onDeleting(mContextWidget.getWrappedView());
                mContextWidget = null;
                return true;
            case R.id.menu_move:
                mContextWidget.setMoving(true);
                mContextWidget.getView().requestFocusFromTouch();
                mContextWidget = null;
                return true;
        }
        return super.onContextItemSelected(item);
!!!13480588.java!!!	setListener(inout listener : Listener) : void
        mListener = listener;
!!!13480716.java!!!	getContext() : Context
        return getActivity();
!!!13480844.java!!!	getCellWidth() : int
        return mConfig.cellWidth;
!!!13480972.java!!!	getCellHeight() : int
        return mConfig.cellHeight;
!!!13481100.java!!!	setEditing(inout editing : boolean) : void
        for (int i = 0; i < mContainer.getChildCount(); ++i) {
            WidgetFrame.forView(getContext(), mContainer.getChildAt(i))
                    .setEditing(editing);
        }
        mEditing = editing;
!!!13481228.java!!!	setVisible(inout visible : boolean) : void
        // Not using visibility because it doesn't act fast enough when animating the window
        // when finishing the HomeActivity.
        mContainer.setAlpha(visible ? 1.0f : 0.0f);
!!!13481356.java!!!	canAddWidget(in minWidth : int, in minHeight : int) : boolean
        Area area = areaForMinimum(minWidth, minHeight);
        Slot slot = findSlot(area);
        return slot != null;
!!!13481484.java!!!	add(inout view : View, in minWidth : int, in minHeight : int) : boolean
        Area area = areaForMinimum(minWidth, minHeight);
        if (!mExtent.getArea().fits(area)) {
            return false;
        }
        Slot slot = findSlot(area);
        if (slot == null || getContext() == null) {
            return false;
        }
        WidgetFrame<Slot> frame = createFrame(view);
        frame.setEditing(mEditing);
        assignSlot(frame, slot);
        mListener.onSized(view,
                slot.getArea().getWidth(), slot.getArea().getHeight());
        mListener.onMoved(view,
                slot.getAnchor().getX(), slot.getAnchor().getY());
        return true;
!!!13481612.java!!!	add(inout view : View, in x : int, in y : int, in width : int, in height : int) : boolean
        Slot slot = new Slot(new Cell(x, y), new Area(width, height));
        if (!mExtent.contains(slot)) {
            return false;
        }
        WidgetFrame<Slot> frame = createFrame(view);
        assignSlot(frame, slot);
        return true;
!!!13481740.java!!!	remove(inout view : View) : void
        WidgetFrame<Slot> frame = WidgetFrame.forView(getContext(), view);
        mContainer.removeView(frame.getView());
!!!13481868.java!!!	removeAll() : void
        mContainer.removeAllViews();
!!!13481996.java!!!	assignSlot(inout frame : WidgetFrame, inout slot : Slot) : void
        frame.setData(slot);
        assignGeometry(frame.getView(),
                slot.getAnchor().getPixelX(), slot.getAnchor().getPixelY(),
                slot.getArea());
!!!13482124.java!!!	assignGeometry(inout wrapper : View, in pixelX : int, in pixelY : int, inout size : Area) : void
        LayoutParams params = new LayoutParams(size.getPixelWidth(),
                size.getPixelHeight());
        params.leftMargin = pixelX;
        params.topMargin = pixelY;
        params.gravity = Gravity.LEFT | Gravity.TOP;
        if (wrapper.getParent() == mContainer) {
            wrapper.setLayoutParams(params);
        } else {
            mContainer.addView(wrapper, params);
        }
!!!13482252.java!!!	createFrame(in view : View) : WidgetFrame
        final WidgetFrame<Slot> frame = WidgetFrame.forView(getContext(), view);
        frame.setOnMoveListener(new WidgetFrame.Listener() {
            public void onMoveRequested(View view,
                    MoveDirection direction) {
                move(frame, direction);
            }
            public void onSetMoving(boolean moving) {
                    setMovingWidget(frame, moving);
            }
        });

        // TODO(justinkoh): HC Port: use new HC APIs for drag and drop.
//        frame.setMoveListener(new DragDropListener() {
//
//            public void onStart() {
//                bringToFront(frame);
//            }
//
//            public void onMove(int deltaX, int deltaY) {
//                moveFree(frame, deltaX, deltaY);
//            }
//
//            public void onDone(int deltaX, int deltaY) {
//                moveConstrained(frame, deltaX, deltaY);
//            }
//        });
        registerForContextMenu(frame.getView());
        // Disable long click because focus issues occur.
        frame.getView().setLongClickable(false);
        return frame;
!!!13482380.java!!!	move(inout frame : WidgetFrame, inout direction : MoveDirection) : boolean
        Slot slot = frame.getData();
        Slot newSlot = findSlotByDirection(slot, direction);
        if (newSlot == null) {
            return false;
        }
        return tryMoveToSlot(frame, newSlot);
!!!13482508.java!!!	setMovingWidget(inout frame : WidgetFrame, inout moving : boolean) : void
        if (moving) {
            if (mMovingWidget != null) {
                mMovingWidget.setMoving(false);
            }
            mMovingWidget = frame;
        } else {
            mMovingWidget = null;
        }
!!!13482636.java!!!	moveConstrained(inout frame : WidgetFrame, in deltaX : int, in deltaY : int) : boolean
        Slot slot = frame.getData();
        Cell anchor = slot.getAnchor();
        Cell newAnchor = mExtent.moveInside(slot, deltaX, deltaY);
        return tryMoveToSlot(frame, new Slot(newAnchor, slot.getArea()));
!!!13482764.java!!!	moveFree(inout frame : WidgetFrame, in deltaX : int, in deltaY : int) : boolean
        Slot slot = frame.getData();
        int x = mExtent.clipX(slot.getAnchor().getPixelX() + deltaX,
                slot.getArea().getPixelWidth());
        int y = mExtent.clipY(slot.getAnchor().getPixelY() + deltaY,
                slot.getArea().getPixelHeight());
        assignGeometry(frame.getView(), x, y, frame.getData().getArea());
        return true;
!!!13482892.java!!!	tryMoveToSlot(inout frame : WidgetFrame, inout slot : Slot) : boolean
        if (!mExtent.contains(slot)) {
            return false;
        }
        View view = frame.getWrappedView();
        bringToFront(frame);
        assignSlot(frame, slot);
        mListener.onMoved(view,
                slot.getAnchor().getX(), slot.getAnchor().getY());
        return true;
!!!13483020.java!!!	bringToFront(inout frame : WidgetFrame) : void
        mContainer.bringChildToFront(frame.getView());
        mListener.onBroughtToFront(frame.getWrappedView());
!!!13483148.java!!!	findSlot(inout area : Area) : Slot
        if (mContainer.getChildCount() == 0) {
            // Put the first view in the top-left corner.
            return new Slot(new Cell(0, 0), area);
        }
        // Scan row by row.
        int endIndexX = mExtent.getArea().getWidth() - area.getWidth();
        int endIndexY = mExtent.getArea().getHeight() - area.getHeight();
        for (int j = 0; j <= endIndexY; ++j) {
            for (int i = 0; i <= endIndexX; ++i) {
                Cell anchor = new Cell(i, j);
                Slot slot = new Slot(anchor, area);
                if (!isSlotOccupied(slot, null /* don't ignore any slots */)) {
                    return slot;
                }
            }
        }
        return null;
!!!13483276.java!!!	findSlotByDirection(inout originalSlot : Slot, inout direction : MoveDirection) : Slot
        // Get the first candidate cell.
        Cell cell = originalSlot.getAnchor();
        Cell nextCell = nextCell(cell, direction);
        // Initialize loop variables.
        int firstIndex = 0;
        int endIndex = 0;
        int constantIndex = 0; // Row or column index, based on value of "constantIsX"
        boolean constantIsX = false;
        boolean increment = true; // Whether to increment or decrement to reach "end"
        if (direction == MoveDirection.RIGHT || direction == MoveDirection.LEFT) {
            firstIndex = nextCell.mX;
            endIndex = direction == MoveDirection.RIGHT ?
                    mExtent.getArea().getWidth() - originalSlot.getArea().getWidth() + 1 : 0;
            constantIndex = cell.mY;
            constantIsX = false;
            increment = direction == MoveDirection.RIGHT;
        } else if (direction == MoveDirection.UP || direction == MoveDirection.DOWN) {
            firstIndex = nextCell.mY;
            endIndex = direction == MoveDirection.DOWN ?
                    mExtent.getArea().getHeight() - originalSlot.getArea().getHeight() + 1 : 0;
            constantIndex = cell.mX;
            constantIsX = true;
            increment = direction == MoveDirection.DOWN;
        }
        int delta = increment ? 1 : -1;
        for (int index = firstIndex; increment ^ (index >= endIndex); index += delta) {
            Cell anchor = constantIsX ? new Cell(constantIndex, index) :
                    new Cell(index, constantIndex);
            Slot slot = new Slot(anchor, originalSlot.getArea());
            if (!isSlotOccupied(slot, originalSlot)) {
                return slot;
            }
        }
        return null;
!!!13483404.java!!!	isSlotOccupied(inout slot : Slot, inout ignoredSlot : Slot) : boolean
        for (int n = 0; n < mContainer.getChildCount(); ++n) {
            View child = mContainer.getChildAt(n);
            WidgetFrame<Slot> frame =
                    WidgetFrame.forView(getContext(), child);
            Slot occupied = frame.getData();
            if (occupied.intersects(slot) && !occupied.equals(ignoredSlot)) {
                return true;
            }
        }
        return false;
!!!13484556.java!!!	nextCell(inout cell : Cell, inout direction : MoveDirection) : Cell
        switch (direction) {
            case DOWN:  return new Cell(cell.mX, cell.mY + 1);
            case LEFT:  return new Cell(cell.mX - 1, cell.mY);
            case RIGHT: return new Cell(cell.mX + 1, cell.mY);
            case UP:    return new Cell(cell.mX, cell.mY - 1);
            default:    throw new IllegalArgumentException("Not a known direction. " + direction);
        }
!!!13485836.java!!!	areaForMinimum(in width : int, in height : int) : Area
        return new Area((int) Math.ceil((double) width / getCellWidth()),
                (int) Math.ceil((double) height / getCellHeight()));
!!!13487884.java!!!	computeCellCoordinate(in coord : int, in deltaPixel : int, in intervalPixel : int, in minCoord : int, in maxCoord : int) : int
        int cellDelta = (int) Math.signum(deltaPixel) *
                closestInt(Math.abs((float) deltaPixel / intervalPixel));
        int newCoord = coord + cellDelta;
        if (newCoord < minCoord) {
            newCoord = minCoord;
        } else if (newCoord > maxCoord) {
            newCoord = maxCoord;
        }
        return newCoord;
!!!13488012.java!!!	closestInt(in value : float) : int
        return (int) Math.floor(value + 0.5f);
