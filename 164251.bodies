class AccessibleObject
!!!461467.java!!!	setAccessible(inout objects : AccessibleObject, inout flag : boolean) : void
        synchronized(AccessibleObject.class) {
            for (AccessibleObject object : objects) {
                object.flag = flag;
            }
        }
!!!461723.java!!!	isAccessible() : boolean
        return flag;
!!!461851.java!!!	setAccessible(inout flag : boolean) : void
        this.flag = flag;
!!!461979.java!!!	isAnnotationPresent(inout annotationType : Class) : boolean
        throw new UnsupportedOperationException();
!!!462107.java!!!	getDeclaredAnnotations() : Annotation
        throw new UnsupportedOperationException();
!!!462235.java!!!	getAnnotations() : Annotation
        // for all but Class, getAnnotations == getDeclaredAnnotations
        return getDeclaredAnnotations();
!!!462363.java!!!	getAnnotation(inout annotationType : Class) : T
        throw new UnsupportedOperationException();
!!!462491.java!!!	getSignature(inout clazz : Class) : String
        String result = "";
        String nextType = clazz.getName();

        if(trans.containsKey(nextType)) {
            result = trans.get(nextType);
        } else {
            if(clazz.isArray()) {
                result = "[" + getSignature(clazz.getComponentType());
            } else {
                result = "L" + nextType + ";";
            }
        }
        return result;
!!!462619.java!!!	toString(inout types : Class) : String
        StringBuilder result = new StringBuilder();

        if (types.length != 0) {
            appendTypeName(result, types[0]);
            for (int i = 1; i < types.length; i++) {
                result.append(',');
                appendTypeName(result, types[i]);
            }
        }

        return result.toString();
!!!462747.java!!!	getSignatureAttribute() : String
        /*
         * Note: This method would have been declared abstract, but the
         * standard API lists this class as concrete.
         */
        throw new UnsupportedOperationException();
!!!462875.java!!!	getClassSignatureAttribute(inout clazz : Class) : String
        Object[] annotation = getClassSignatureAnnotation(clazz);

        if (annotation == null) {
            return null;
        }

        return StringUtils.combineStrings(annotation);
!!!463131.java!!!	appendTypeName(inout out : StringBuilder, inout c : Class) : void
        int dimensions = 0;
        while (c.isArray()) {
            c = c.getComponentType();
            dimensions++;
        }
        out.append(c.getName());
        for (int d = 0; d < dimensions; d++) {
            out.append("[]");
        }
!!!463259.java!!!	appendArrayGenericType(inout sb : StringBuilder, inout types : Type) : void
        if (types.length > 0) {
            appendGenericType(sb, types[0]);
            for (int i = 1; i < types.length; i++) {
                sb.append(',');
                appendGenericType(sb, types[i]);
            }
        }
!!!463387.java!!!	appendGenericType(inout sb : StringBuilder, inout obj : Type) : void
        if (obj instanceof TypeVariable) {
            sb.append(((TypeVariable)obj).getName());
        } else if (obj instanceof ParameterizedType) {
            sb.append(obj.toString());
        } else if (obj instanceof GenericArrayType) { //XXX: is it a working branch?
            Type simplified = ((GenericArrayType)obj).getGenericComponentType();
            appendGenericType(sb, simplified);
            sb.append("[]");
        } else if (obj instanceof Class) {
            Class c = ((Class<?>)obj);
            if (c.isArray()){
                String as[] = c.getName().split("\\[");
                int len = as.length-1;
                if (as[len].length() > 1){
                    sb.append(as[len].substring(1, as[len].length()-1));
                } else {
                    char ch = as[len].charAt(0);
                    if (ch == 'I')
                        sb.append("int");
                    else if (ch == 'B')
                        sb.append("byte");
                    else if (ch == 'J')
                        sb.append("long");
                    else if (ch == 'F')
                        sb.append("float");
                    else if (ch == 'D')
                        sb.append("double");
                    else if (ch == 'S')
                        sb.append("short");
                    else if (ch == 'C')
                        sb.append("char");
                    else if (ch == 'Z')
                        sb.append("boolean");
                    else if (ch == 'V') //XXX: is it a working branch?
                        sb.append("void");
                }
                for (int i = 0; i < len; i++){
                    sb.append("[]");
                }
            } else {
                sb.append(c.getName());
            }
        }
