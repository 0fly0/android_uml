class Matcher
!!!1750555.java!!!	Matcher(inout pattern : Pattern, inout input : CharSequence)
        usePattern(pattern);
        reset(input);
!!!1750683.java!!!	appendReplacement(inout buffer : StringBuffer, inout replacement : String) : Matcher
        buffer.append(input.substring(appendPos, start()));
        appendEvaluated(buffer, replacement);
        appendPos = end();

        return this;
!!!1750811.java!!!	appendEvaluated(inout buffer : StringBuffer, inout s : String) : void
        boolean escape = false;
        boolean dollar = false;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '\\' && !escape) {
                escape = true;
            } else if (c == '$' && !escape) {
                dollar = true;
            } else if (c >= '0' && c <= '9' && dollar) {
                buffer.append(group(c - '0'));
                dollar = false;
            } else {
                buffer.append(c);
                dollar = false;
                escape = false;
            }
        }

        // This seemingly stupid piece of code reproduces a JDK bug.
        if (escape) {
            throw new ArrayIndexOutOfBoundsException(s.length());
        }
!!!1750939.java!!!	reset() : Matcher
        return reset(input, 0, input.length());
!!!1751067.java!!!	reset(inout input : CharSequence) : Matcher
        return reset(input, 0, input.length());
!!!1751195.java!!!	reset(inout input : CharSequence, in start : int, in end : int) : Matcher
        if (input == null) {
            throw new IllegalArgumentException("input == null");
        }

        if (start < 0 || end < 0 || start > input.length() || end > input.length() || start > end) {
            throw new IndexOutOfBoundsException();
        }

        this.input = input.toString();
        this.regionStart = start;
        this.regionEnd = end;
        resetForInput();

        matchFound = false;
        appendPos = 0;

        return this;
!!!1751323.java!!!	usePattern(inout pattern : Pattern) : Matcher
        if (pattern == null) {
            throw new IllegalArgumentException("pattern == null");
        }

        this.pattern = pattern;

        synchronized (this) {
            if (address != 0) {
                closeImpl(address);
                address = 0; // In case openImpl throws.
            }
            address = openImpl(pattern.address);
        }

        if (input != null) {
            resetForInput();
        }

        matchOffsets = new int[(groupCount() + 1) * 2];
        matchFound = false;
        return this;
!!!1751451.java!!!	resetForInput() : void
        synchronized (this) {
            setInputImpl(address, input, regionStart, regionEnd);
            useAnchoringBoundsImpl(address, anchoringBounds);
            useTransparentBoundsImpl(address, transparentBounds);
        }
!!!1751579.java!!!	region(in start : int, in end : int) : Matcher
        return reset(input, start, end);
!!!1751707.java!!!	appendTail(inout buffer : StringBuffer) : StringBuffer
        if (appendPos < regionEnd) {
            buffer.append(input.substring(appendPos, regionEnd));
        }
        return buffer;
!!!1751835.java!!!	replaceFirst(inout replacement : String) : String
        reset();
        StringBuffer buffer = new StringBuffer(input.length());
        if (find()) {
            appendReplacement(buffer, replacement);
        }
        return appendTail(buffer).toString();
!!!1751963.java!!!	replaceAll(inout replacement : String) : String
        reset();
        StringBuffer buffer = new StringBuffer(input.length());
        while (find()) {
            appendReplacement(buffer, replacement);
        }
        return appendTail(buffer).toString();
!!!1752091.java!!!	pattern() : Pattern
        return pattern;
!!!1752219.java!!!	group(in group : int) : String
        ensureMatch();
        int from = matchOffsets[group * 2];
        int to = matchOffsets[(group * 2) + 1];
        if (from == -1 || to == -1) {
            return null;
        } else {
            return input.substring(from, to);
        }
!!!1752347.java!!!	group() : String
        return group(0);
!!!1752475.java!!!	find(in start : int) : boolean
        if (start < 0 || start > input.length()) {
            throw new IndexOutOfBoundsException("start=" + start + "; length=" + input.length());
        }

        synchronized (this) {
            matchFound = findImpl(address, input, start, matchOffsets);
        }
        return matchFound;
!!!1752603.java!!!	find() : boolean
        synchronized (this) {
            matchFound = findNextImpl(address, input, matchOffsets);
        }
        return matchFound;
!!!1752731.java!!!	lookingAt() : boolean
        synchronized (this) {
            matchFound = lookingAtImpl(address, input, matchOffsets);
        }
        return matchFound;
!!!1752859.java!!!	matches() : boolean
        synchronized (this) {
            matchFound = matchesImpl(address, input, matchOffsets);
        }
        return matchFound;
!!!1752987.java!!!	start(in group : int) : int
        ensureMatch();
        return matchOffsets[group * 2];
!!!1753115.java!!!	end(in group : int) : int
        ensureMatch();
        return matchOffsets[(group * 2) + 1];
!!!1753243.java!!!	quoteReplacement(inout s : String) : String
        StringBuilder result = new StringBuilder(s.length());
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '\\' || c == '$') {
                result.append('\\');
            }
            result.append(c);
        }
        return result.toString();
!!!1753371.java!!!	start() : int
        return start(0);
!!!1753499.java!!!	groupCount() : int
        synchronized (this) {
            return groupCountImpl(address);
        }
!!!1753627.java!!!	end() : int
        return end(0);
!!!1753755.java!!!	toMatchResult() : MatchResult
        ensureMatch();
        return new MatchResultImpl(input, matchOffsets);
!!!1753883.java!!!	useAnchoringBounds(inout value : boolean) : Matcher
        synchronized (this) {
            anchoringBounds = value;
            useAnchoringBoundsImpl(address, value);
        }
        return this;
!!!1754011.java!!!	hasAnchoringBounds() : boolean
        return anchoringBounds;
!!!1754139.java!!!	useTransparentBounds(inout value : boolean) : Matcher
        synchronized (this) {
            transparentBounds = value;
            useTransparentBoundsImpl(address, value);
        }
        return this;
!!!1754267.java!!!	ensureMatch() : void
        if (!matchFound) {
            throw new IllegalStateException("No successful match so far");
        }
!!!1754395.java!!!	hasTransparentBounds() : boolean
        return transparentBounds;
!!!1754523.java!!!	regionStart() : int
        return regionStart;
!!!1754651.java!!!	regionEnd() : int
        return regionEnd;
!!!1754779.java!!!	requireEnd() : boolean
        synchronized (this) {
            return requireEndImpl(address);
        }
!!!1754907.java!!!	hitEnd() : boolean
        synchronized (this) {
            return hitEndImpl(address);
        }
!!!1755035.java!!!	finalize() : void
        try {
            synchronized (this) {
                closeImpl(address);
            }
        } finally {
            super.finalize();
        }
