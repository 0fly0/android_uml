class MethodTest
!!!2774555.java!!!	test_invokeExceptions() : void
        Method m = String.class.getMethod("charAt", int.class);
        try {
            m.invoke("hello"); // Wrong number of arguments.
            fail();
        } catch (IllegalArgumentException iae) {
            assertEquals("wrong number of arguments; expected 1, got 0", iae.getMessage());
        }
        try {
            m.invoke("hello", "world"); // Wrong type.
            fail();
        } catch (IllegalArgumentException iae) {
            assertEquals("argument 1 should have type int, got java.lang.String", iae.getMessage());
        }
        try {
            m.invoke("hello", (Object) null); // Null for a primitive argument.
            fail();
        } catch (IllegalArgumentException iae) {
            assertEquals("argument 1 should have type int, got null", iae.getMessage());
        }
        try {
            m.invoke(new Integer(5)); // Wrong type for 'this'.
            fail();
        } catch (IllegalArgumentException iae) {
            assertEquals("expected receiver of type java.lang.String, but got java.lang.Integer", iae.getMessage());
        }
        try {
            m.invoke(null); // Null for 'this'.
            fail();
        } catch (NullPointerException npe) {
            assertEquals("expected receiver of type java.lang.String, but got null",
                    npe.getMessage());
        }
!!!2774683.java!!!	test_getExceptionTypes() : void
        Method method = MethodTestHelper.class.getMethod("m1", new Class[0]);
        Class[] exceptions = method.getExceptionTypes();
        assertEquals(1, exceptions.length);
        assertEquals(IndexOutOfBoundsException.class, exceptions[0]);
        // Check that corrupting our array doesn't affect other callers.
        exceptions[0] = NullPointerException.class;
        exceptions = method.getExceptionTypes();
        assertEquals(1, exceptions.length);
        assertEquals(IndexOutOfBoundsException.class, exceptions[0]);
!!!2774811.java!!!	test_getParameterTypes() : void
        Class[] expectedParameters = new Class[] { Object.class };
        Method method = MethodTestHelper.class.getMethod("m2", expectedParameters);
        Class[] parameters = method.getParameterTypes();
        assertEquals(1, parameters.length);
        assertEquals(expectedParameters[0], parameters[0]);
        // Check that corrupting our array doesn't affect other callers.
        parameters[0] = String.class;
        parameters = method.getParameterTypes();
        assertEquals(1, parameters.length);
        assertEquals(expectedParameters[0], parameters[0]);
!!!2774939.java!!!	testGetMethodWithPrivateMethodAndInterfaceMethod() : void
        assertEquals(InterfaceA.class, Sub.class.getMethod("a").getDeclaringClass());
!!!2775067.java!!!	testGetMethodReturnsIndirectlyImplementedInterface() : void
        assertEquals(InterfaceA.class, ImplementsC.class.getMethod("a").getDeclaringClass());
        assertEquals(InterfaceA.class, ExtendsImplementsC.class.getMethod("a").getDeclaringClass());
!!!2775195.java!!!	testGetDeclaredMethodReturnsIndirectlyImplementedInterface() : void
        try {
            ImplementsC.class.getDeclaredMethod("a").getDeclaringClass();
            fail();
        } catch (NoSuchMethodException expected) {
        }
        try {
            ExtendsImplementsC.class.getDeclaredMethod("a").getDeclaringClass();
            fail();
        } catch (NoSuchMethodException expected) {
        }
!!!2775323.java!!!	testGetMethodWithConstructorName() : void
        try {
            MethodTestHelper.class.getMethod("<init>");
            fail();
        } catch (NoSuchMethodException expected) {
        }
!!!2775451.java!!!	testGetMethodWithNullName() : void
        try {
            MethodTestHelper.class.getMethod(null);
            fail();
        } catch (NullPointerException expected) {
        }
!!!2775579.java!!!	testGetMethodWithNullArgumentsArray() : void
        Method m1 = MethodTestHelper.class.getMethod("m1", (Class[]) null);
        assertEquals(0, m1.getParameterTypes().length);
!!!2775707.java!!!	testGetMethodWithNullArgument() : void
        try {
            MethodTestHelper.class.getMethod("m2", new Class[] { null });
            fail();
        } catch (NoSuchMethodException expected) {
        }
!!!2775835.java!!!	testGetMethodReturnsInheritedStaticMethod() : void
        Method b = Sub.class.getMethod("b");
        assertEquals(void.class, b.getReturnType());
!!!2775963.java!!!	testGetDeclaredMethodReturnsPrivateMethods() : void
        Method method = Super.class.getDeclaredMethod("a");
        assertEquals(void.class, method.getReturnType());
!!!2776091.java!!!	testGetDeclaredMethodDoesNotReturnSuperclassMethods() : void
        try {
            Sub.class.getDeclaredMethod("a");
            fail();
        } catch (NoSuchMethodException expected) {
        }
!!!2776219.java!!!	testGetDeclaredMethodDoesNotReturnImplementedInterfaceMethods() : void
        try {
            InterfaceB.class.getDeclaredMethod("a");
            fail();
        } catch (NoSuchMethodException expected) {
        }
!!!2776347.java!!!	testImplementedInterfaceMethodOfAnonymousClass() : void
        Object anonymous = new InterfaceA() {
            @Override public void a() {
            }
        };
        Method method = anonymous.getClass().getMethod("a");
        assertEquals(anonymous.getClass(), method.getDeclaringClass());
!!!2776475.java!!!	testPublicMethodOfAnonymousClass() : void
        Object anonymous = new Object() {
            public void a() {
            }
        };
        Method method = anonymous.getClass().getMethod("a");
        assertEquals(anonymous.getClass(), method.getDeclaringClass());
!!!2776603.java!!!	testGetMethodDoesNotReturnPrivateMethodOfAnonymousClass() : void
        Object anonymous = new Object() {
            private void a() {
            }
        };
        try {
            anonymous.getClass().getMethod("a");
            fail();
        } catch (NoSuchMethodException expected) {
        }
!!!2776731.java!!!	testGetDeclaredMethodReturnsPrivateMethodOfAnonymousClass() : void
        Object anonymous = new Object() {
            private void a() {
            }
        };
        Method method = anonymous.getClass().getDeclaredMethod("a");
        assertEquals(anonymous.getClass(), method.getDeclaringClass());
!!!2776859.java!!!	testMethodToString() : void
        assertEquals("public final native void java.lang.Object.notify()",
                Object.class.getMethod("notify", new Class[] { }).toString());
        assertEquals("public java.lang.String java.lang.Object.toString()",
                Object.class.getMethod("toString", new Class[] { }).toString());
        assertEquals("public final native void java.lang.Object.wait(long,int)"
                + " throws java.lang.InterruptedException",
                Object.class.getMethod("wait", new Class[] { long.class, int.class }).toString());
        assertEquals("public boolean java.lang.Object.equals(java.lang.Object)",
                Object.class.getMethod("equals", new Class[] { Object.class }).toString());
        assertEquals("public static java.lang.String java.lang.String.valueOf(char[])",
                String.class.getMethod("valueOf", new Class[] { char[].class }).toString());
        assertEquals( "public java.lang.Process java.lang.Runtime.exec(java.lang.String[])"
                + " throws java.io.IOException",
                Runtime.class.getMethod("exec", new Class[] { String[].class }).toString());
