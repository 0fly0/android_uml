class GtvVideoViewTest
!!!12658572.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.video_activity);

        Window w = getWindow();
        w.setBackgroundDrawable(new ColorDrawable(0));

        mVideoView  = (MyVideoView) findViewById(R.id.video);
        mVideoView.setOnPreparedListener(new PrepareListener());

        GtvMediaController c = new GtvMediaController(this, false);
        mVideoView.setMediaController(c);
        mVideoView.setOwner(this);

        mTimedTextView = new TtmlTimedTextView(this);
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT);
        addContentView(mTimedTextView, layoutParams);

        mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mp) {
                playNextMediaInPlayList();
            }
        });

        mVideoView.setOnInfoListener(new InfoListener());
        mVideoView.setOnVideoSizeChangedListener(new VideoSizeChangedListener());
        mVideoView.setOnTimedTextListener(mTimedTextView);

        mUpdateHandler = new Handler();
        mUpdateRunnable = new ProgressUpdater();

        Intent intent = getIntent();
        String errorString = processIntent(intent);

        if (errorString != null) {
            ShowErrorDialog(errorString);
        }
        if (mContentList != null) {
            mContentPlayListIterator = mContentList.iterator();
            playNextMediaInPlayList();
        }
!!!12658700.java!!!	processIntent(inout intent : Intent) : String
        if (intent == null) return "Invalid intent";

        mLooping = intent.getBooleanExtra(LOOPING_EXTRA_NAME, false);
        mIntentUri = intent.getData();

        if((intent.getStringArrayListExtra(PLAYLIST)) != null) {
            mContentList = intent.getStringArrayListExtra(PLAYLIST);
        } else {
            mContentList = new ArrayList<String>();
        }

        if (mIntentUri != null && mIntentUri.isAbsolute()) {
            mContentList.add(mIntentUri.toString());
        }

        if (mContentList == null) return "Invalid content";

        return null;
!!!12658828.java!!!	playMedia(inout contentUri : Uri) : void
        String fileName = null;
        fileName = contentUri.getLastPathSegment();

        if (fileName != null && fileName.endsWith(".url")) {
            // This is a url file, fetch it then play it
            mDownload = (FileDownloadTask) new FileDownloadTask().execute(contentUri);
        } else if (fileName != null && fileName.endsWith(".jle")) {
            // This is a jle file, fetch it then play it
            // TODO(sungsoo): extends the '.url' type and launch the JLE
            // by the contents of the URL file
            mJleDownload = (JleFileDownloadTask) new JleFileDownloadTask().execute(contentUri);
        } else {
            mContentUri = contentUri.toString();
            HashMap<String, String> headers = new HashMap<String, String>();
            headers.put("X-Gtv-TestHeader", "Some value");
            // This is an undocumented method that will be un-hidden
            // in ICS.  For now if we need customer headers in media
            // requests, we need to call this.
            mVideoView.setVideoURI(contentUri, headers);
        }

        if (fileName == null) {
            fileName = mContentUri.toString();
            Log.i(TAG, "contentUri.getLastPathSegment() returned null");
        }

        mStatus = new Status(fileName);
!!!12658956.java!!!	playNextMediaInPlayList() : void
        if (!mContentPlayListIterator.hasNext() && mLooping && mContentList.size() > 1) {
            mContentPlayListIterator = mContentList.iterator();
        }
        if (mContentPlayListIterator.hasNext()) {
            Uri nextContentUri;
            nextContentUri = Uri.parse((String)mContentPlayListIterator.next());
            playMedia(nextContentUri);
        }
!!!12659084.java!!!	onResume() : void
        super.onResume();
        showInfo(true);
!!!12659212.java!!!	onPause() : void
        // TODO: To get the QOS data in the background causes Exception, need to check.
        showInfo(false);
        super.onPause();
!!!12659340.java!!!	onBackPressed() : void
       setResult(RESULT_BACKPRESSED);
       finish();
       super.onBackPressed();
!!!12659468.java!!!	ShowErrorDialog(in errorMessage : String) : void
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Playback error");
        builder.setMessage(errorMessage);
        builder.create().show();
!!!12660236.java!!!	getSmoothStreamingBaseUrl(in manifestUrl : String) : String
        String lowerCaseUrl = manifestUrl.toLowerCase();
        int index = lowerCaseUrl.lastIndexOf(".ism/manifest");
        if (index > 0) {
            return manifestUrl.substring(0, index + 4);
        } else {
            return manifestUrl;
        }
!!!12660876.java!!!	sendSoapAction(in serverUrl : String, in request : String, in action : String) : String
        // TODO: Remove this.
        //StrictMode.setThreadPolicy(StrictMode.ThreadPolicy.LAX);

        StringBuffer buf = new StringBuffer();
        HttpURLConnection urlConnection = null;
        try {
            urlConnection = (HttpURLConnection) new URL(serverUrl).openConnection();
            urlConnection.setDoOutput(true);
            urlConnection.setChunkedStreamingMode(0);
            urlConnection.setRequestProperty("Content-Type", "text/xml");
            urlConnection.setRequestProperty("SOAPAction", action);

            OutputStream out = new BufferedOutputStream(urlConnection.getOutputStream());
            out.write(request.getBytes());
            out.close();

            InputStream in = new BufferedInputStream(urlConnection.getInputStream());
            int c;
            while ((c = in.read()) != -1) {
                buf.append((char) c);
            }
            in.close();
        } catch (IOException e) {
            Log.e(TAG, "sendSoapAction: " + e);
            e.printStackTrace();
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
        return buf.toString();
!!!12661004.java!!!	executeProcessDrmInfo(inout drmClient : DrmManagerClient, inout drmInfo : DrmInfo) : int
        final int kWaitTimeMs = 30000; // 30 secs max
        final ConditionVariable processDrmInfoDone = new ConditionVariable();
        final int[] statusCodes = new int[1];
        statusCodes[0] = DrmInfoStatus.STATUS_ERROR;

        drmClient.setOnEventListener(new DrmManagerClient.OnEventListener() {
            @Override
            public void onEvent(DrmManagerClient client, DrmEvent event) {
                switch (event.getType()) {
                // In case of TYPE_RIGHTS_ACQUISITION_PROGRESS_INFO, the event type will be -1.
                // See DrmManagerClient.getEventType().
                case -1:
                case DrmEvent.TYPE_DRM_INFO_PROCESSED:
                    Log.d(TAG, "processDrmInfo() completed");
                    DrmInfoStatus drmInfoStatus = (DrmInfoStatus) event.getAttribute(
                            DrmEvent.DRM_INFO_STATUS_OBJECT);
                    statusCodes[0] = drmInfoStatus.statusCode;
                    break;
                default:
                    Log.d(TAG, "Unkown event: " + event.getType());
                    break;
                }
                processDrmInfoDone.open();
            }
        });

        if (DrmManagerClient.ERROR_NONE != drmClient.processDrmInfo(drmInfo)) {
            return DrmInfoStatus.STATUS_ERROR;
        }
        processDrmInfoDone.block(kWaitTimeMs);

        return statusCodes[0];
!!!12661900.java!!!	toggleInfo() : void
        mInfoShowing = !mInfoShowing;
        showInfo(mInfoShowing);
!!!12662028.java!!!	showInfo(inout show : boolean) : void
        if (show) {
            mUpdateHandler.postDelayed(mUpdateRunnable, mUpdateInterval);
        } else {
            mUpdateHandler.removeCallbacks(mUpdateRunnable);
            mStatus.setVisibility(false);
        }
