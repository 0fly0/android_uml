class VideoEditorVideoEncoderSource
!!!1808396.cpp!!!	Create(in format : sp<MetaData>) : sp<VideoEditorVideoEncoderSource>

    sp<VideoEditorVideoEncoderSource> aSource =
        new VideoEditorVideoEncoderSource(format);
    return aSource;
!!!1808524.cpp!!!	start(inout meta : MetaData = NULL) : status_t
    status_t err = OK;

    ALOGV("VideoEditorVideoEncoderSource::start() begin");

    if( CREATED != mState ) {
        ALOGV("VideoEditorVideoEncoderSource::start: invalid state %d", mState);
        return UNKNOWN_ERROR;
    }
    mState = STARTED;

    ALOGV("VideoEditorVideoEncoderSource::start() END (0x%x)", err);
    return err;
!!!1808652.cpp!!!	stop() : status_t
    status_t err = OK;

    ALOGV("VideoEditorVideoEncoderSource::stop() begin");

    if( STARTED != mState ) {
        ALOGV("VideoEditorVideoEncoderSource::stop: invalid state %d", mState);
        return UNKNOWN_ERROR;
    }

    // Release the buffer chain
    int32_t i = 0;
    MediaBufferChain* tmpLink = NULL;
    while( mFirstBufferLink ) {
        i++;
        tmpLink = mFirstBufferLink;
        mFirstBufferLink = mFirstBufferLink->nextLink;
        delete tmpLink;
    }
    ALOGV("VideoEditorVideoEncoderSource::stop : %d buffer remained", i);
    mFirstBufferLink = NULL;
    mLastBufferLink = NULL;

    mState = CREATED;

    ALOGV("VideoEditorVideoEncoderSource::stop() END (0x%x)", err);
    return err;
!!!1808780.cpp!!!	getFormat() : sp<MetaData>

    ALOGV("VideoEditorVideoEncoderSource::getFormat");
    return mEncFormat;
!!!1808908.cpp!!!	read(inout buffer : MediaBuffer, in options : ReadOptions = NULL) : status_t
    Mutex::Autolock autolock(mLock);
    MediaSource::ReadOptions readOptions;
    status_t err = OK;
    MediaBufferChain* tmpLink = NULL;

    ALOGV("VideoEditorVideoEncoderSource::read() begin");

    if ( STARTED != mState ) {
        ALOGV("VideoEditorVideoEncoderSource::read: invalid state %d", mState);
        return UNKNOWN_ERROR;
    }

    while (mFirstBufferLink == NULL && !mIsEOS) {
        mBufferCond.wait(mLock);
    }

    // End of stream?
    if (mFirstBufferLink == NULL) {
        *buffer = NULL;
        ALOGV("VideoEditorVideoEncoderSource::read : EOS");
        return ERROR_END_OF_STREAM;
    }

    // Get a buffer from the chain
    *buffer = mFirstBufferLink->buffer;
    tmpLink = mFirstBufferLink;
    mFirstBufferLink = mFirstBufferLink->nextLink;

    if ( NULL == mFirstBufferLink ) {
        mLastBufferLink = NULL;
    }
    delete tmpLink;
    mNbBuffer--;

    ALOGV("VideoEditorVideoEncoderSource::read() END (0x%x)", err);
    return err;
!!!1809036.cpp!!!	storeBuffer(inout buffer : MediaBuffer) : int32_t
    Mutex::Autolock autolock(mLock);
    status_t err = OK;

    ALOGV("VideoEditorVideoEncoderSource::storeBuffer() begin");

    if( NULL == buffer ) {
        ALOGV("VideoEditorVideoEncoderSource::storeBuffer : reached EOS");
        mIsEOS = true;
    } else {
        MediaBufferChain* newLink = new MediaBufferChain;
        newLink->buffer = buffer;
        newLink->nextLink = NULL;
        if( NULL != mLastBufferLink ) {
            mLastBufferLink->nextLink = newLink;
        } else {
            mFirstBufferLink = newLink;
        }
        mLastBufferLink = newLink;
        mNbBuffer++;
    }
    mBufferCond.signal();
    ALOGV("VideoEditorVideoEncoderSource::storeBuffer() end");
    return mNbBuffer;
!!!1809164.cpp!!!	getNumberOfBuffersInQueue() : int32_t
    Mutex::Autolock autolock(mLock);
    return mNbBuffer;
!!!1809292.cpp!!!	~VideoEditorVideoEncoderSource()

    // Safety clean up
    if( STARTED == mState ) {
        stop();
    }
!!!1809420.cpp!!!	VideoEditorVideoEncoderSource(in format : sp<MetaData>)
    ALOGV("VideoEditorVideoEncoderSource::VideoEditorVideoEncoderSource");
