class Path
!!!6394380.java!!!	Path()
        mNativePath = init1();
        mDetectSimplePaths = HardwareRenderer.isAvailable();
!!!6394508.java!!!	Path(inout src : Path)
        int valNative = 0;
        if (src != null) {
            valNative = src.mNativePath;
            isSimplePath = src.isSimplePath;
            if (src.rects != null) {
                rects = new Region(src.rects);
            }
        }
        mNativePath = init2(valNative);
        mDetectSimplePaths = HardwareRenderer.isAvailable();
!!!6394636.java!!!	reset() : void
        isSimplePath = true;
        if (mDetectSimplePaths) {
            mLastDirection = null;
            if (rects != null) rects.setEmpty();
        }
        native_reset(mNativePath);
!!!6394764.java!!!	rewind() : void
        isSimplePath = true;
        if (mDetectSimplePaths) {
            mLastDirection = null;
            if (rects != null) rects.setEmpty();
        }
        native_rewind(mNativePath);
!!!6394892.java!!!	set(inout src : Path) : void
        if (this != src) {
            isSimplePath = src.isSimplePath;
            native_set(mNativePath, src.mNativePath);
        }
!!!6395148.java!!!	getFillType() : FillType
        return sFillTypeArray[native_getFillType(mNativePath)];
!!!6395276.java!!!	setFillType(inout ft : FillType) : void
        native_setFillType(mNativePath, ft.nativeInt);
!!!6395404.java!!!	isInverseFillType() : boolean
        final int ft = native_getFillType(mNativePath);
        return (ft & 2) != 0;
!!!6395532.java!!!	toggleInverseFillType() : void
        int ft = native_getFillType(mNativePath);
        ft ^= 2;
        native_setFillType(mNativePath, ft);
!!!6395660.java!!!	isEmpty() : boolean
        return native_isEmpty(mNativePath);
!!!6395788.java!!!	isRect(inout rect : RectF) : boolean
        return native_isRect(mNativePath, rect);
!!!6395916.java!!!	computeBounds(inout bounds : RectF, inout exact : boolean) : void
        native_computeBounds(mNativePath, bounds);
!!!6396044.java!!!	incReserve(in extraPtCount : int) : void
        native_incReserve(mNativePath, extraPtCount);
!!!6396172.java!!!	moveTo(in x : float, in y : float) : void
        native_moveTo(mNativePath, x, y);
!!!6396300.java!!!	rMoveTo(in dx : float, in dy : float) : void
        native_rMoveTo(mNativePath, dx, dy);
!!!6396428.java!!!	lineTo(in x : float, in y : float) : void
        isSimplePath = false;
        native_lineTo(mNativePath, x, y);
!!!6396556.java!!!	rLineTo(in dx : float, in dy : float) : void
        isSimplePath = false;
        native_rLineTo(mNativePath, dx, dy);
!!!6396684.java!!!	quadTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float) : void
        isSimplePath = false;
        native_quadTo(mNativePath, x1, y1, x2, y2);
!!!6396812.java!!!	rQuadTo(in dx1 : float, in dy1 : float, in dx2 : float, in dy2 : float) : void
        isSimplePath = false;
        native_rQuadTo(mNativePath, dx1, dy1, dx2, dy2);
!!!6396940.java!!!	cubicTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        isSimplePath = false;
        native_cubicTo(mNativePath, x1, y1, x2, y2, x3, y3);
!!!6397068.java!!!	rCubicTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        isSimplePath = false;
        native_rCubicTo(mNativePath, x1, y1, x2, y2, x3, y3);
!!!6397196.java!!!	arcTo(inout oval : RectF, in startAngle : float, in sweepAngle : float, inout forceMoveTo : boolean) : void
        isSimplePath = false;
        native_arcTo(mNativePath, oval, startAngle, sweepAngle, forceMoveTo);
!!!6397324.java!!!	arcTo(inout oval : RectF, in startAngle : float, in sweepAngle : float) : void
        isSimplePath = false;
        native_arcTo(mNativePath, oval, startAngle, sweepAngle, false);
!!!6397452.java!!!	close() : void
        isSimplePath = false;
        native_close(mNativePath);
!!!6397708.java!!!	detectSimplePath(in left : float, in top : float, in right : float, in bottom : float, inout dir : Direction) : void
        if (mDetectSimplePaths) {
            if (mLastDirection == null) {
                mLastDirection = dir;
            }
            if (mLastDirection != dir) {
                isSimplePath = false;
            } else {
                if (rects == null) rects = new Region();
                rects.op((int) left, (int) top, (int) right, (int) bottom, Region.Op.UNION);
            }
        }
!!!6397836.java!!!	addRect(inout rect : RectF, inout dir : Direction) : void
        if (rect == null) {
            throw new NullPointerException("need rect parameter");
        }
        detectSimplePath(rect.left, rect.top, rect.right, rect.bottom, dir);
        native_addRect(mNativePath, rect, dir.nativeInt);
!!!6397964.java!!!	addRect(in left : float, in top : float, in right : float, in bottom : float, inout dir : Direction) : void
        detectSimplePath(left, top, right, bottom, dir);
        native_addRect(mNativePath, left, top, right, bottom, dir.nativeInt);
!!!6398092.java!!!	addOval(inout oval : RectF, inout dir : Direction) : void
        if (oval == null) {
            throw new NullPointerException("need oval parameter");
        }
        isSimplePath = false;
        native_addOval(mNativePath, oval, dir.nativeInt);
!!!6398220.java!!!	addCircle(in x : float, in y : float, in radius : float, inout dir : Direction) : void
        isSimplePath = false;
        native_addCircle(mNativePath, x, y, radius, dir.nativeInt);
!!!6398348.java!!!	addArc(inout oval : RectF, in startAngle : float, in sweepAngle : float) : void
        if (oval == null) {
            throw new NullPointerException("need oval parameter");
        }
        isSimplePath = false;
        native_addArc(mNativePath, oval, startAngle, sweepAngle);
!!!6398476.java!!!	addRoundRect(inout rect : RectF, in rx : float, in ry : float, inout dir : Direction) : void
        if (rect == null) {
            throw new NullPointerException("need rect parameter");
        }
        isSimplePath = false;
        native_addRoundRect(mNativePath, rect, rx, ry, dir.nativeInt);
!!!6398604.java!!!	addRoundRect(inout rect : RectF, inout radii : float, inout dir : Direction) : void
        if (rect == null) {
            throw new NullPointerException("need rect parameter");
        }
        if (radii.length < 8) {
            throw new ArrayIndexOutOfBoundsException("radii[] needs 8 values");
        }
        isSimplePath = false;
        native_addRoundRect(mNativePath, rect, radii, dir.nativeInt);
!!!6398732.java!!!	addPath(inout src : Path, in dx : float, in dy : float) : void
        isSimplePath = false;
        native_addPath(mNativePath, src.mNativePath, dx, dy);
!!!6398860.java!!!	addPath(inout src : Path) : void
        isSimplePath = false;
        native_addPath(mNativePath, src.mNativePath);
!!!6398988.java!!!	addPath(inout src : Path, inout matrix : Matrix) : void
        if (!src.isSimplePath) isSimplePath = false;
        native_addPath(mNativePath, src.mNativePath, matrix.native_instance);
!!!6399116.java!!!	offset(in dx : float, in dy : float, inout dst : Path) : void
        int dstNative = 0;
        if (dst != null) {
            dstNative = dst.mNativePath;
            dst.isSimplePath = false;
        }
        native_offset(mNativePath, dx, dy, dstNative);
!!!6399244.java!!!	offset(in dx : float, in dy : float) : void
        isSimplePath = false;
        native_offset(mNativePath, dx, dy);
!!!6399372.java!!!	setLastPoint(in dx : float, in dy : float) : void
        isSimplePath = false;
        native_setLastPoint(mNativePath, dx, dy);
!!!6399500.java!!!	transform(inout matrix : Matrix, inout dst : Path) : void
        int dstNative = 0;
        if (dst != null) {
            dst.isSimplePath = false;
            dstNative = dst.mNativePath;
        }
        native_transform(mNativePath, matrix.native_instance, dstNative);
!!!6399628.java!!!	transform(inout matrix : Matrix) : void
        isSimplePath = false;
        native_transform(mNativePath, matrix.native_instance);
!!!6399756.java!!!	finalize() : void
        try {
            finalizer(mNativePath);
        } finally {
            super.finalize();
        }
!!!6399884.java!!!	ni() : int
        return mNativePath;
