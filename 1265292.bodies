class MediaPlayerApiTest
!!!7216396.java!!!	MediaPlayerApiTest()
       super("com.android.mediaframeworktest", MediaFrameworkTest.class);
       isWMAEnable = MediaProfileReader.getWMAEnable();
       isWMVEnable = MediaProfileReader.getWMVEnable();
!!!7216524.java!!!	setUp() : void
       //Insert a 2 second before launching the test activity. This is
       //the workaround for the race condition of requesting the updated surface.
       Thread.sleep(2000);
       getActivity();
       super.setUp();
!!!7216652.java!!!	verifyDuration(in duration : int, in expectedDuration : int) : boolean
      if ((duration > expectedDuration * 1.1) || (duration < expectedDuration * 0.9))
         return false;
      else
        return true;
!!!7216780.java!!!	testMP3CBRGetDuration() : void
      int duration = CodecTest.getDuration(MediaNames.MP3CBR);
      duratoinWithinTolerence = verifyDuration(duration, MediaNames.MP3CBR_LENGTH);
      assertTrue("MP3CBR getDuration", duratoinWithinTolerence);  
!!!7216908.java!!!	testMP3VBRGetDuration() : void
      int duration = CodecTest.getDuration(MediaNames.MP3VBR);
      Log.v(TAG, "getDuration");
      duratoinWithinTolerence = verifyDuration(duration, MediaNames.MP3VBR_LENGTH);
      assertTrue("MP3VBR getDuration", duratoinWithinTolerence);  
!!!7217036.java!!!	testMIDIGetDuration() : void
      int duration = CodecTest.getDuration(MediaNames.MIDI);  
      duratoinWithinTolerence = verifyDuration(duration, MediaNames.MIDI_LENGTH);
      assertTrue("MIDI getDuration", duratoinWithinTolerence);  
!!!7217164.java!!!	testAMRGetDuration() : void
      int duration = CodecTest.getDuration(MediaNames.AMR);  
      duratoinWithinTolerence = verifyDuration(duration, MediaNames.AMR_LENGTH);
      assertTrue("AMR getDuration", duratoinWithinTolerence);  
!!!7217292.java!!!	testMP3CBRGetCurrentPosition() : void
      boolean currentPosition = CodecTest.getCurrentPosition(MediaNames.MP3CBR);       
      assertTrue("MP3CBR GetCurrentPosition", currentPosition);  
!!!7217420.java!!!	testMP3VBRGetCurrentPosition() : void
      boolean currentPosition = CodecTest.getCurrentPosition(MediaNames.MP3VBR);  
      assertTrue("MP3VBR GetCurrentPosition", currentPosition);  
!!!7217548.java!!!	testMIDIGetCurrentPosition() : void
      boolean currentPosition = CodecTest.getCurrentPosition(MediaNames.MIDI);  
      assertTrue("MIDI GetCurrentPosition", currentPosition);  
!!!7217676.java!!!	testAMRGetCurrentPosition() : void
      boolean currentPosition = CodecTest.getCurrentPosition(MediaNames.AMR);  
      assertTrue("AMR GetCurrentPosition", currentPosition);  
!!!7217804.java!!!	testMP3CBRPause() : void
      boolean isPaused = CodecTest.pause(MediaNames.MP3CBR);       
      assertTrue("MP3CBR Pause", isPaused);  
!!!7217932.java!!!	testMP3VBRPause() : void
      boolean isPaused = CodecTest.pause(MediaNames.MP3VBR);  
      assertTrue("MP3VBR Pause", isPaused);  
!!!7218060.java!!!	testMIDIPause() : void
      boolean isPaused = CodecTest.pause(MediaNames.MIDI);  
      assertTrue("MIDI Pause", isPaused);  
!!!7218188.java!!!	testAMRPause() : void
      boolean isPaused = CodecTest.pause(MediaNames.AMR);  
      assertTrue("AMR Pause", isPaused);  
!!!7218316.java!!!	testMP3CBRPrepareStopRelease() : void
      CodecTest.prepareStopRelease(MediaNames.MP3CBR);       
      assertTrue("MP3CBR prepareStopRelease", true);  
!!!7218444.java!!!	testMIDIPrepareStopRelease() : void
      CodecTest.prepareStopRelease(MediaNames.MIDI);  
      assertTrue("MIDI prepareStopRelease", true);  
!!!7218572.java!!!	testMP3CBRSeekBeforeStart() : void
      boolean seekBeforePlay = CodecTest.seektoBeforeStart(MediaNames.MP3CBR);       
      assertTrue("MP3CBR SeekBeforePlay", seekBeforePlay);  
!!!7218700.java!!!	testMP3CBRSetLooping() : void
      boolean isLoop = CodecTest.setLooping(MediaNames.MP3CBR);     
      assertTrue("MP3CBR setLooping", isLoop);  
!!!7218828.java!!!	testMP3VBRSetLooping() : void
      boolean isLoop = CodecTest.setLooping(MediaNames.MP3VBR);
      Log.v(TAG, "setLooping");
      assertTrue("MP3VBR setLooping", isLoop);  
!!!7218956.java!!!	testMIDISetLooping() : void
      boolean isLoop = CodecTest.setLooping(MediaNames.MIDI);  
      assertTrue("MIDI setLooping", isLoop);  
!!!7219084.java!!!	testAMRSetLooping() : void
      boolean isLoop = CodecTest.setLooping(MediaNames.AMR);  
      assertTrue("AMR setLooping", isLoop);  
!!!7219212.java!!!	testMP3CBRSeekTo() : void
      boolean isLoop = CodecTest.seekTo(MediaNames.MP3CBR);     
      assertTrue("MP3CBR seekTo", isLoop);  
!!!7219340.java!!!	testMP3VBRSeekTo() : void
      boolean isLoop = CodecTest.seekTo(MediaNames.MP3VBR);
      Log.v(TAG, "seekTo");
      assertTrue("MP3VBR seekTo", isLoop);  
!!!7219468.java!!!	testMIDISeekTo() : void
      boolean isLoop = CodecTest.seekTo(MediaNames.MIDI);  
      assertTrue("MIDI seekTo", isLoop);  
!!!7219596.java!!!	testAMRSeekTo() : void
      boolean isLoop = CodecTest.seekTo(MediaNames.AMR);  
      assertTrue("AMR seekTo", isLoop);  
!!!7219724.java!!!	testMP3CBRSeekToEnd() : void
      boolean isEnd = CodecTest.seekToEnd(MediaNames.MP3CBR);     
      assertTrue("MP3CBR seekToEnd", isEnd);  
!!!7219852.java!!!	testMP3VBRSeekToEnd() : void
      boolean isEnd = CodecTest.seekToEnd(MediaNames.MP3VBR);
      Log.v(TAG, "seekTo");
      assertTrue("MP3VBR seekToEnd", isEnd);  
!!!7219980.java!!!	testMIDISeekToEnd() : void
      boolean isEnd = CodecTest.seekToEnd(MediaNames.MIDI);  
      assertTrue("MIDI seekToEnd", isEnd);  
!!!7220108.java!!!	testAMRSeekToEnd() : void
      boolean isEnd = CodecTest.seekToEnd(MediaNames.AMR);  
      assertTrue("AMR seekToEnd", isEnd);  
!!!7220236.java!!!	testWAVSeekToEnd() : void
        boolean isEnd = CodecTest.seekToEnd(MediaNames.WAV);
        assertTrue("WAV seekToEnd", isEnd);
!!!7220364.java!!!	testLargeVideoHeigth() : void
      int height = 0;
      height = CodecTest.videoHeight(MediaNames.VIDEO_LARGE_SIZE_3GP);
      Log.v(TAG, "Video height = " +  height);
      assertEquals("streaming video height", 240, height);           
!!!7220492.java!!!	testLargeVideoWidth() : void
      int width = 0;
      width = CodecTest.videoWidth(MediaNames.VIDEO_LARGE_SIZE_3GP);
      Log.v(TAG, "Video width = " +  width);
      assertEquals("streaming video width", 320, width);           
!!!7220620.java!!!	testVideoMP4SeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_MP4);
      assertTrue("Local MP4 SeekTo", isSeek);          
!!!7220748.java!!!	testVideoH263AACSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_H263_AAC);
      assertTrue("H263AAC SeekTo", isSeek);         
!!!7220876.java!!!	testVideoH263AMRSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_H263_AMR);
      assertTrue("H263AMR SeekTo", isSeek);         
!!!7221004.java!!!	testVideoH264AACSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_H264_AAC);
      assertTrue("H264AAC SeekTo", isSeek);         
!!!7221132.java!!!	testVideoH264AMRSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_H264_AMR);
      assertTrue("H264AMR SeekTo", isSeek);         
!!!7221260.java!!!	testVideoWebmSeekTo() : void
      boolean isSeek = CodecTest.videoSeekTo(MediaNames.VIDEO_WEBM);
      assertTrue("WEBM SeekTo", isSeek);
!!!7221388.java!!!	testSoundRecord() : void
      boolean isRecordered = CodecTest.mediaRecorderRecord(MediaNames.RECORDER_OUTPUT);
      assertTrue("Recorder", isRecordered);         
!!!7221516.java!!!	testGetThumbnail() : void
      boolean getThumbnail = CodecTest.getThumbnail(MediaNames.VIDEO_H264_AAC, MediaNames.GOLDEN_THUMBNAIL_OUTPUT);
      assertTrue("Get Thumbnail", getThumbnail);         
!!!7221644.java!!!	testMidiResources() : void
      boolean midiResources = CodecTest.resourcesPlayback(MediaFrameworkTest.midiafd,16000);
      assertTrue("Play midi from resources", midiResources);         
!!!7221772.java!!!	testMp3Resources() : void
      boolean mp3Resources = CodecTest.resourcesPlayback(MediaFrameworkTest.mp3afd,25000);
      assertTrue("Play mp3 from resources", mp3Resources);         
!!!7221900.java!!!	testPrepareAsyncReset() : void
      //assertTrue(MediaFrameworkTest.checkStreamingServer());
      boolean isReset = CodecTest.prepareAsyncReset(MediaNames.STREAM_MP3);
      assertTrue("PrepareAsync Reset", isReset);         
!!!7222028.java!!!	testIsLooping() : void
        boolean isLooping = CodecTest.isLooping(MediaNames.AMR);
        assertTrue("isLooping", isLooping);
!!!7222156.java!!!	testIsLoopingAfterReset() : void
        boolean isLooping = CodecTest.isLoopingAfterReset(MediaNames.AMR);
        assertTrue("isLooping after reset", isLooping);
!!!7222284.java!!!	testLocalMp3PrepareAsyncCallback() : void
        boolean onPrepareSuccess = 
            CodecTest.prepareAsyncCallback(MediaNames.MP3CBR, false);
        assertTrue("LocalMp3prepareAsyncCallback", onPrepareSuccess);
!!!7222412.java!!!	testLocalH263AMRPrepareAsyncCallback() : void
        boolean onPrepareSuccess =
            CodecTest.prepareAsyncCallback(MediaNames.VIDEO_H263_AMR, false);
        assertTrue("testLocalH263AMRPrepareAsyncCallback", onPrepareSuccess);
!!!7222540.java!!!	testStreamPrepareAsyncCallback() : void
        //assertTrue(MediaFrameworkTest.checkStreamingServer());
        boolean onPrepareSuccess = 
            CodecTest.prepareAsyncCallback(MediaNames.STREAM_H264_480_360_1411k, false);
        assertTrue("StreamH264PrepareAsyncCallback", onPrepareSuccess);
!!!7222668.java!!!	testStreamPrepareAsyncCallbackReset() : void
        //assertTrue(MediaFrameworkTest.checkStreamingServer());
        boolean onPrepareSuccess = 
            CodecTest.prepareAsyncCallback(MediaNames.STREAM_H264_480_360_1411k, true);
        assertTrue("StreamH264PrepareAsyncCallback", onPrepareSuccess);
