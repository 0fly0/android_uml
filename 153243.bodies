class BasicLruCache
!!!1989787.java!!!	BasicLruCache(in maxSize : int)
        if (maxSize <= 0) {
            throw new IllegalArgumentException("maxSize <= 0");
        }
        this.maxSize = maxSize;
        this.map = new LinkedHashMap<K, V>(0, 0.75f, true);
!!!1989915.java!!!	get(inout key : K) : V
        if (key == null) {
            throw new NullPointerException("key == null");
        }

        V result = map.get(key);
        if (result != null) {
            return result;
        }

        result = create(key);

        if (result != null) {
            map.put(key, result);
            trimToSize(maxSize);
        }
        return result;
!!!1990043.java!!!	put(inout key : K, inout value : V) : V
        if (key == null) {
            throw new NullPointerException("key == null");
        } else if (value == null) {
            throw new NullPointerException("value == null");
        }

        V previous = map.put(key, value);
        trimToSize(maxSize);
        return previous;
!!!1990171.java!!!	trimToSize(in maxSize : int) : void
        while (map.size() > maxSize) {
            Map.Entry<K, V> toEvict = map.eldest();

            K key = toEvict.getKey();
            V value = toEvict.getValue();
            map.remove(key);

            entryEvicted(key, value);
        }
!!!1990427.java!!!	create(inout key : K) : V
        return null;
!!!1990555.java!!!	snapshot() : Map
        return new LinkedHashMap<K, V>(map);
!!!1990683.java!!!	evictAll() : void
        trimToSize(0);
