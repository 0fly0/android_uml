class InputMapper
!!!1296396.cpp!!!	populateDeviceInfo(inout info : InputDeviceInfo) : void
    info->addSource(getSources());
!!!1297164.cpp!!!	getKeyCodeState(in sourceMask : uint32_t, in keyCode : int32_t) : int32_t
    return AKEY_STATE_UNKNOWN;
!!!1297292.cpp!!!	getScanCodeState(in sourceMask : uint32_t, in scanCode : int32_t) : int32_t
    return AKEY_STATE_UNKNOWN;
!!!1297420.cpp!!!	getSwitchState(in sourceMask : uint32_t, in switchCode : int32_t) : int32_t
    return AKEY_STATE_UNKNOWN;
!!!1297548.cpp!!!	markSupportedKeyCodes(in sourceMask : uint32_t, in numCodes : size_t, in keyCodes : int32_t, inout outFlags : uint8_t) : bool
    return false;
!!!1297932.cpp!!!	getMetaState() : int32_t
    return 0;
!!!1298188.cpp!!!	getAbsoluteAxisInfo(in axis : int32_t, inout axisInfo : RawAbsoluteAxisInfo) : status_t
    return getEventHub()->getAbsoluteAxisInfo(getDeviceId(), axis, axisInfo);
!!!1298316.cpp!!!	bumpGeneration() : void
    mDevice->bumpGeneration();
!!!1298444.cpp!!!	dumpRawAbsoluteAxisInfo(inout dump : String8, in axis : RawAbsoluteAxisInfo, in name : char) : void
    if (axis.valid) {
        dump.appendFormat(INDENT4 "%s: min=%d, max=%d, flat=%d, fuzz=%d, resolution=%d\n",
                name, axis.minValue, axis.maxValue, axis.flat, axis.fuzz, axis.resolution);
    } else {
        dump.appendFormat(INDENT4 "%s: unknown range\n", name);
    }
