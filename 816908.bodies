class Camera
!!!3388172.java!!!	getCameraInfo(in cameraId : int, inout cameraInfo : CameraInfo) : void
        _getCameraInfo(cameraId, cameraInfo);
        IBinder b = ServiceManager.getService(Context.AUDIO_SERVICE);
        IAudioService audioService = IAudioService.Stub.asInterface(b);
        try {
            if (audioService.isCameraSoundForced()) {
                // Only set this when sound is forced; otherwise let native code
                // decide.
                cameraInfo.canDisableShutterSound = false;
            }
        } catch (RemoteException e) {
            Log.e(TAG, "Audio service is unavailable for queries");
        }
!!!3388428.java!!!	open(in cameraId : int) : Camera
        return new Camera(cameraId);
!!!3388556.java!!!	open() : Camera
        int numberOfCameras = getNumberOfCameras();
        CameraInfo cameraInfo = new CameraInfo();
        for (int i = 0; i < numberOfCameras; i++) {
            getCameraInfo(i, cameraInfo);
            if (cameraInfo.facing == CameraInfo.CAMERA_FACING_BACK) {
                return new Camera(i);
            }
        }
        return null;
!!!3388684.java!!!	Camera(in cameraId : int)
        mShutterCallback = null;
        mRawImageCallback = null;
        mJpegCallback = null;
        mPreviewCallback = null;
        mPostviewCallback = null;
        mZoomListener = null;

        Looper looper;
        if ((looper = Looper.myLooper()) != null) {
            mEventHandler = new EventHandler(this, looper);
        } else if ((looper = Looper.getMainLooper()) != null) {
            mEventHandler = new EventHandler(this, looper);
        } else {
            mEventHandler = null;
        }

        native_setup(new WeakReference<Camera>(this), cameraId);
!!!3388940.java!!!	finalize() : void
        release();
!!!3389324.java!!!	release() : void
        native_release();
        mFaceDetectionRunning = false;
!!!3389836.java!!!	setPreviewDisplay(inout holder : SurfaceHolder) : void
        if (holder != null) {
            setPreviewDisplay(holder.getSurface());
        } else {
            setPreviewDisplay((Surface)null);
        }
!!!3390476.java!!!	stopPreview() : void
        _stopPreview();
        mFaceDetectionRunning = false;

        mShutterCallback = null;
        mRawImageCallback = null;
        mPostviewCallback = null;
        mJpegCallback = null;
        synchronized (mAutoFocusCallbackLock) {
            mAutoFocusCallback = null;
        }
        mAutoFocusMoveCallback = null;
!!!3390860.java!!!	setPreviewCallback(inout cb : PreviewCallback) : void
        mPreviewCallback = cb;
        mOneShot = false;
        mWithBuffer = false;
        // Always use one-shot mode. We fake camera preview mode by
        // doing one-shot preview continuously.
        setHasPreviewCallback(cb != null, false);
!!!3390988.java!!!	setOneShotPreviewCallback(inout cb : PreviewCallback) : void
        mPreviewCallback = cb;
        mOneShot = true;
        mWithBuffer = false;
        setHasPreviewCallback(cb != null, false);
!!!3391244.java!!!	setPreviewCallbackWithBuffer(inout cb : PreviewCallback) : void
        mPreviewCallback = cb;
        mOneShot = false;
        mWithBuffer = true;
        setHasPreviewCallback(cb != null, true);
!!!3391372.java!!!	addCallbackBuffer(inout callbackBuffer : byte) : void
        _addCallbackBuffer(callbackBuffer, CAMERA_MSG_PREVIEW_FRAME);
!!!3391500.java!!!	addRawImageCallbackBuffer(inout callbackBuffer : byte) : void
        addCallbackBuffer(callbackBuffer, CAMERA_MSG_RAW_IMAGE);
!!!3391628.java!!!	addCallbackBuffer(inout callbackBuffer : byte, in msgType : int) : void
        // CAMERA_MSG_VIDEO_FRAME may be allowed in the future.
        if (msgType != CAMERA_MSG_PREVIEW_FRAME &&
            msgType != CAMERA_MSG_RAW_IMAGE) {
            throw new IllegalArgumentException(
                            "Unsupported message type: " + msgType);
        }

        _addCallbackBuffer(callbackBuffer, msgType);
!!!3392140.java!!!	postEventFromNative(inout camera_ref : Object, in what : int, in arg1 : int, in arg2 : int, inout obj : Object) : void
        Camera c = (Camera)((WeakReference)camera_ref).get();
        if (c == null)
            return;

        if (c.mEventHandler != null) {
            Message m = c.mEventHandler.obtainMessage(what, arg1, arg2, obj);
            c.mEventHandler.sendMessage(m);
        }
!!!3392396.java!!!	autoFocus(inout cb : AutoFocusCallback) : void
        synchronized (mAutoFocusCallbackLock) {
            mAutoFocusCallback = cb;
        }
        native_autoFocus();
!!!3392652.java!!!	cancelAutoFocus() : void
        synchronized (mAutoFocusCallbackLock) {
            mAutoFocusCallback = null;
        }
        native_cancelAutoFocus();
        // CAMERA_MSG_FOCUS should be removed here because the following
        // scenario can happen:
        // - An application uses the same thread for autoFocus, cancelAutoFocus
        //   and looper thread.
        // - The application calls autoFocus.
        // - HAL sends CAMERA_MSG_FOCUS, which enters the looper message queue.
        //   Before event handler's handleMessage() is invoked, the application
        //   calls cancelAutoFocus and autoFocus.
        // - The application gets the old CAMERA_MSG_FOCUS and thinks autofocus
        //   has been completed. But in fact it is not.
        //
        // As documented in the beginning of the file, apps should not use
        // multiple threads to call autoFocus and cancelAutoFocus at the same
        // time. It is HAL's responsibility not to send a CAMERA_MSG_FOCUS
        // message after native_cancelAutoFocus is called.
        mEventHandler.removeMessages(CAMERA_MSG_FOCUS);
!!!3393036.java!!!	setAutoFocusMoveCallback(inout cb : AutoFocusMoveCallback) : void
        mAutoFocusMoveCallback = cb;
        enableFocusMoveCallback((mAutoFocusMoveCallback != null) ? 1 : 0);
!!!3393548.java!!!	takePicture(inout shutter : ShutterCallback, inout raw : PictureCallback, inout jpeg : PictureCallback) : void
        takePicture(shutter, raw, null, jpeg);
!!!3393804.java!!!	takePicture(inout shutter : ShutterCallback, inout raw : PictureCallback, inout postview : PictureCallback, inout jpeg : PictureCallback) : void
        mShutterCallback = shutter;
        mRawImageCallback = raw;
        mPostviewCallback = postview;
        mJpegCallback = jpeg;

        // If callback is not set, do not send me callbacks.
        int msgType = 0;
        if (mShutterCallback != null) {
            msgType |= CAMERA_MSG_SHUTTER;
        }
        if (mRawImageCallback != null) {
            msgType |= CAMERA_MSG_RAW_IMAGE;
        }
        if (mPostviewCallback != null) {
            msgType |= CAMERA_MSG_POSTVIEW_FRAME;
        }
        if (mJpegCallback != null) {
            msgType |= CAMERA_MSG_COMPRESSED_IMAGE;
        }

        native_takePicture(msgType);
        mFaceDetectionRunning = false;
!!!3394316.java!!!	enableShutterSound(inout enabled : boolean) : boolean
        if (!enabled) {
            IBinder b = ServiceManager.getService(Context.AUDIO_SERVICE);
            IAudioService audioService = IAudioService.Stub.asInterface(b);
            try {
                if (audioService.isCameraSoundForced()) return false;
            } catch (RemoteException e) {
                Log.e(TAG, "Audio service is unavailable for queries");
            }
        }
        return _enableShutterSound(enabled);
!!!3394700.java!!!	setZoomChangeListener(inout listener : OnZoomChangeListener) : void
        mZoomListener = listener;
!!!3394956.java!!!	setFaceDetectionListener(inout listener : FaceDetectionListener) : void
        mFaceListener = listener;
!!!3395084.java!!!	startFaceDetection() : void
        if (mFaceDetectionRunning) {
            throw new RuntimeException("Face detection is already running");
        }
        _startFaceDetection(CAMERA_FACE_DETECTION_HW);
        mFaceDetectionRunning = true;
!!!3395212.java!!!	stopFaceDetection() : void
        _stopFaceDetection();
        mFaceDetectionRunning = false;
!!!3395852.java!!!	setErrorCallback(inout cb : ErrorCallback) : void
        mErrorCallback = cb;
!!!3396236.java!!!	setParameters(inout params : Parameters) : void
        native_setParameters(params.flatten());
!!!3396364.java!!!	getParameters() : Parameters
        Parameters p = new Parameters();
        String s = native_getParameters();
        p.unflatten(s);
        return p;
!!!3396492.java!!!	getEmptyParameters() : Parameters
        Camera camera = new Camera();
        return camera.new Parameters();
