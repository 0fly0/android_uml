class Vector
!!!1372699.java!!!	Vector()
        this(DEFAULT_SIZE, 0);
!!!1372827.java!!!	Vector(in capacity : int)
        this(capacity, 0);
!!!1372955.java!!!	Vector(in capacity : int, in capacityIncrement : int)
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        elementData = newElementArray(capacity);
        elementCount = 0;
        this.capacityIncrement = capacityIncrement;
!!!1373083.java!!!	Vector(inout collection : Collection)
        this(collection.size(), 0);
        Iterator<? extends E> it = collection.iterator();
        while (it.hasNext()) {
            elementData[elementCount++] = it.next();
        }
!!!1373211.java!!!	newElementArray(in size : int) : E
        return (E[]) new Object[size];
!!!1373339.java!!!	add(in location : int, inout object : E) : void
        insertElementAt(object, location);
!!!1373467.java!!!	add(inout object : E) : boolean
        if (elementCount == elementData.length) {
            growByOne();
        }
        elementData[elementCount++] = object;
        modCount++;
        return true;
!!!1373595.java!!!	addAll(in location : int, inout collection : Collection) : boolean
        if (location >= 0 && location <= elementCount) {
            int size = collection.size();
            if (size == 0) {
                return false;
            }
            int required = size - (elementData.length - elementCount);
            if (required > 0) {
                growBy(required);
            }
            int count = elementCount - location;
            if (count > 0) {
                System.arraycopy(elementData, location, elementData, location
                        + size, count);
            }
            Iterator<? extends E> it = collection.iterator();
            while (it.hasNext()) {
                elementData[location++] = it.next();
            }
            elementCount += size;
            modCount++;
            return true;
        }
        throw arrayIndexOutOfBoundsException(location, elementCount);
!!!1373723.java!!!	addAll(inout collection : Collection) : boolean
        return addAll(elementCount, collection);
!!!1373851.java!!!	addElement(inout object : E) : void
        if (elementCount == elementData.length) {
            growByOne();
        }
        elementData[elementCount++] = object;
        modCount++;
!!!1373979.java!!!	capacity() : int
        return elementData.length;
!!!1374107.java!!!	clear() : void
        removeAllElements();
!!!1374235.java!!!	clone() : Object
        try {
            Vector<E> vector = (Vector<E>) super.clone();
            vector.elementData = elementData.clone();
            return vector;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1374363.java!!!	contains(inout object : Object) : boolean
        return indexOf(object, 0) != -1;
!!!1374491.java!!!	containsAll(inout collection : Collection) : boolean
        return super.containsAll(collection);
!!!1374619.java!!!	copyInto(inout elements : Object) : void
        System.arraycopy(elementData, 0, elements, 0, elementCount);
!!!1374747.java!!!	elementAt(in location : int) : E
        if (location < elementCount) {
            return (E) elementData[location];
        }
        throw arrayIndexOutOfBoundsException(location, elementCount);
!!!1374875.java!!!	elements() : Enumeration
        return new Enumeration<E>() {
            int pos = 0;

            public boolean hasMoreElements() {
                return pos < elementCount;
            }

            @SuppressWarnings("unchecked")
            public E nextElement() {
                synchronized (Vector.this) {
                    if (pos < elementCount) {
                        return (E) elementData[pos++];
                    }
                }
                throw new NoSuchElementException();
            }
        };
!!!1375003.java!!!	ensureCapacity(in minimumCapacity : int) : void
        if (elementData.length < minimumCapacity) {
            int next = (capacityIncrement <= 0 ? elementData.length
                    : capacityIncrement)
                    + elementData.length;
            grow(minimumCapacity > next ? minimumCapacity : next);
        }
!!!1375131.java!!!	equals(inout object : Object) : boolean
        if (this == object) {
            return true;
        }
        if (object instanceof List) {
            List<?> list = (List<?>) object;
            if (list.size() != elementCount) {
                return false;
            }

            int index = 0;
            Iterator<?> it = list.iterator();
            while (it.hasNext()) {
                Object e1 = elementData[index++], e2 = it.next();
                if (!(e1 == null ? e2 == null : e1.equals(e2))) {
                    return false;
                }
            }
            return true;
        }
        return false;
!!!1375259.java!!!	firstElement() : E
        if (elementCount > 0) {
            return (E) elementData[0];
        }
        throw new NoSuchElementException();
!!!1375387.java!!!	get(in location : int) : E
        return elementAt(location);
!!!1375515.java!!!	grow(in newCapacity : int) : void
        E[] newData = newElementArray(newCapacity);
        // Assumes elementCount is <= newCapacity
        // assert elementCount <= newCapacity;
        System.arraycopy(elementData, 0, newData, 0, elementCount);
        elementData = newData;
!!!1375643.java!!!	growByOne() : void
        int adding = 0;
        if (capacityIncrement <= 0) {
            if ((adding = elementData.length) == 0) {
                adding = 1;
            }
        } else {
            adding = capacityIncrement;
        }

        E[] newData = newElementArray(elementData.length + adding);
        System.arraycopy(elementData, 0, newData, 0, elementCount);
        elementData = newData;
!!!1375771.java!!!	growBy(in required : int) : void
        int adding = 0;
        if (capacityIncrement <= 0) {
            if ((adding = elementData.length) == 0) {
                adding = required;
            }
            while (adding < required) {
                adding += adding;
            }
        } else {
            adding = (required / capacityIncrement) * capacityIncrement;
            if (adding < required) {
                adding += capacityIncrement;
            }
        }
        E[] newData = newElementArray(elementData.length + adding);
        System.arraycopy(elementData, 0, newData, 0, elementCount);
        elementData = newData;
!!!1375899.java!!!	hashCode() : int
        int result = 1;
        for (int i = 0; i < elementCount; i++) {
            result = (31 * result)
                    + (elementData[i] == null ? 0 : elementData[i].hashCode());
        }
        return result;
!!!1376027.java!!!	indexOf(inout object : Object) : int
        return indexOf(object, 0);
!!!1376155.java!!!	indexOf(inout object : Object, in location : int) : int
        if (object != null) {
            for (int i = location; i < elementCount; i++) {
                if (object.equals(elementData[i])) {
                    return i;
                }
            }
        } else {
            for (int i = location; i < elementCount; i++) {
                if (elementData[i] == null) {
                    return i;
                }
            }
        }
        return -1;
!!!1376283.java!!!	insertElementAt(inout object : E, in location : int) : void
        if (location >= 0 && location <= elementCount) {
            if (elementCount == elementData.length) {
                growByOne();
            }
            int count = elementCount - location;
            if (count > 0) {
                System.arraycopy(elementData, location, elementData,
                        location + 1, count);
            }
            elementData[location] = object;
            elementCount++;
            modCount++;
        } else {
            throw arrayIndexOutOfBoundsException(location, elementCount);
        }
!!!1376411.java!!!	isEmpty() : boolean
        return elementCount == 0;
!!!1376539.java!!!	lastElement() : E
        try {
            return (E) elementData[elementCount - 1];
        } catch (IndexOutOfBoundsException e) {
            throw new NoSuchElementException();
        }
!!!1376667.java!!!	lastIndexOf(inout object : Object) : int
        return lastIndexOf(object, elementCount - 1);
!!!1376795.java!!!	lastIndexOf(inout object : Object, in location : int) : int
        if (location < elementCount) {
            if (object != null) {
                for (int i = location; i >= 0; i--) {
                    if (object.equals(elementData[i])) {
                        return i;
                    }
                }
            } else {
                for (int i = location; i >= 0; i--) {
                    if (elementData[i] == null) {
                        return i;
                    }
                }
            }
            return -1;
        }
        throw arrayIndexOutOfBoundsException(location, elementCount);
!!!1376923.java!!!	remove(in location : int) : E
        if (location < elementCount) {
            E result = (E) elementData[location];
            elementCount--;
            int size = elementCount - location;
            if (size > 0) {
                System.arraycopy(elementData, location + 1, elementData,
                        location, size);
            }
            elementData[elementCount] = null;
            modCount++;
            return result;
        }
        throw arrayIndexOutOfBoundsException(location, elementCount);
!!!1377051.java!!!	remove(inout object : Object) : boolean
        return removeElement(object);
!!!1377179.java!!!	removeAll(inout collection : Collection) : boolean
        return super.removeAll(collection);
!!!1377307.java!!!	removeAllElements() : void
        for (int i = 0; i < elementCount; i++) {
            elementData[i] = null;
        }
        modCount++;
        elementCount = 0;
!!!1377435.java!!!	removeElement(inout object : Object) : boolean
        int index;
        if ((index = indexOf(object, 0)) == -1) {
            return false;
        }
        removeElementAt(index);
        return true;
!!!1377563.java!!!	removeElementAt(in location : int) : void
        if (location >= 0 && location < elementCount) {
            elementCount--;
            int size = elementCount - location;
            if (size > 0) {
                System.arraycopy(elementData, location + 1, elementData,
                        location, size);
            }
            elementData[elementCount] = null;
            modCount++;
        } else {
            throw arrayIndexOutOfBoundsException(location, elementCount);
        }
!!!1377691.java!!!	removeRange(in start : int, in end : int) : void
        if (start >= 0 && start <= end && end <= elementCount) {
            if (start == end) {
                return;
            }
            if (end != elementCount) {
                System.arraycopy(elementData, end, elementData, start,
                        elementCount - end);
                int newCount = elementCount - (end - start);
                Arrays.fill(elementData, newCount, elementCount, null);
                elementCount = newCount;
            } else {
                Arrays.fill(elementData, start, elementCount, null);
                elementCount = start;
            }
            modCount++;
        } else {
            throw new IndexOutOfBoundsException();
        }
!!!1377819.java!!!	retainAll(inout collection : Collection) : boolean
        return super.retainAll(collection);
!!!1377947.java!!!	set(in location : int, inout object : E) : E
        if (location < elementCount) {
            E result = (E) elementData[location];
            elementData[location] = object;
            return result;
        }
        throw arrayIndexOutOfBoundsException(location, elementCount);
!!!1378075.java!!!	setElementAt(inout object : E, in location : int) : void
        if (location < elementCount) {
            elementData[location] = object;
        } else {
            throw arrayIndexOutOfBoundsException(location, elementCount);
        }
!!!1378203.java!!!	arrayIndexOutOfBoundsException(in index : int, in size : int) : ArrayIndexOutOfBoundsException
        throw new ArrayIndexOutOfBoundsException(size, index);
!!!1378331.java!!!	setSize(in length : int) : void
        if (length == elementCount) {
            return;
        }
        ensureCapacity(length);
        if (elementCount > length) {
            Arrays.fill(elementData, length, elementCount, null);
        }
        elementCount = length;
        modCount++;
!!!1378459.java!!!	size() : int
        return elementCount;
!!!1378587.java!!!	subList(in start : int, in end : int) : List
        return new Collections.SynchronizedRandomAccessList<E>(super.subList(
                start, end), this);
!!!1378715.java!!!	toArray() : Object
        Object[] result = new Object[elementCount];
        System.arraycopy(elementData, 0, result, 0, elementCount);
        return result;
!!!1378843.java!!!	toArray(inout contents : T) : T
        if (elementCount > contents.length) {
            Class<?> ct = contents.getClass().getComponentType();
            contents = (T[]) Array.newInstance(ct, elementCount);
        }
        System.arraycopy(elementData, 0, contents, 0, elementCount);
        if (elementCount < contents.length) {
            contents[elementCount] = null;
        }
        return contents;
!!!1378971.java!!!	toString() : String
        if (elementCount == 0) {
            return "[]";
        }
        int length = elementCount - 1;
        StringBuilder buffer = new StringBuilder(elementCount * 16);
        buffer.append('[');
        for (int i = 0; i < length; i++) {
            if (elementData[i] == this) {
                buffer.append("(this Collection)");
            } else {
                buffer.append(elementData[i]);
            }
            buffer.append(", ");
        }
        if (elementData[length] == this) {
            buffer.append("(this Collection)");
        } else {
            buffer.append(elementData[length]);
        }
        buffer.append(']');
        return buffer.toString();
!!!1379099.java!!!	trimToSize() : void
        if (elementData.length != elementCount) {
            grow(elementCount);
        }
!!!1379227.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        stream.defaultWriteObject();
