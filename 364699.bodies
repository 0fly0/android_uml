class OpenSSLECKeyPairGenerator
!!!2421403.java!!!	OpenSSLECKeyPairGenerator()
        super(ALGORITHM);
!!!2421531.java!!!	generateKeyPair() : KeyPair
        if (group == null) {
            final String curveName = SIZE_TO_CURVE_NAME.get(DEFAULT_KEY_SIZE);
            group = OpenSSLECGroupContext.getCurveByName(curveName);
        }

        final OpenSSLKey key = new OpenSSLKey(NativeCrypto.EC_KEY_generate_key(group.getContext()));
        return new KeyPair(new OpenSSLECPublicKey(group, key), new OpenSSLECPrivateKey(group, key));
!!!2421659.java!!!	initialize(in keysize : int, inout random : SecureRandom) : void
        final String name = SIZE_TO_CURVE_NAME.get(keysize);
        if (name == null) {
            throw new InvalidParameterException("unknown key size " + keysize);
        }

        /*
         * Store the group in a temporary variable until we know this is a valid
         * group.
         */
        final OpenSSLECGroupContext possibleGroup = OpenSSLECGroupContext.getCurveByName(name);
        if (possibleGroup == null) {
            throw new InvalidParameterException("unknown curve " + name);
        }

        group = possibleGroup;
!!!2421787.java!!!	initialize(inout param : AlgorithmParameterSpec, inout random : SecureRandom) : void
        if (param instanceof ECParameterSpec) {
            ECParameterSpec ecParam = (ECParameterSpec) param;

            group = OpenSSLECGroupContext.getInstance(ecParam);
        } else if (param instanceof ECGenParameterSpec) {
            ECGenParameterSpec ecParam = (ECGenParameterSpec) param;

            final String curveName = ecParam.getName();

            /*
             * Store the group in a temporary variable until we know this is a
             * valid group.
             */
            final OpenSSLECGroupContext possibleGroup = OpenSSLECGroupContext
                    .getCurveByName(curveName);
            if (possibleGroup == null) {
                throw new InvalidAlgorithmParameterException("unknown curve name: " + curveName);
            }

            group = possibleGroup;
        } else {
            throw new InvalidAlgorithmParameterException(
                    "parameter must be ECParameterSpec or ECGenParameterSpec");
        }
