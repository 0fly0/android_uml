class InputMethodManager
!!!2869388.java!!!	InputMethodManager(inout service : IInputMethodManager, inout looper : Looper)
        mService = service;
        mMainLooper = looper;
        mH = new H(looper);
        mIInputContext = new ControlledInputConnectionWrapper(looper,
                mDummyInputConnection, this);
        
        if (mInstance == null) {
            mInstance = this;
        }
!!!2869516.java!!!	getInstance(inout context : Context) : InputMethodManager
        return getInstance(context.getMainLooper());
!!!2869644.java!!!	getInstance(inout mainLooper : Looper) : InputMethodManager
        synchronized (mInstanceSync) {
            if (mInstance != null) {
                return mInstance;
            }
            IBinder b = ServiceManager.getService(Context.INPUT_METHOD_SERVICE);
            IInputMethodManager service = IInputMethodManager.Stub.asInterface(b);
            mInstance = new InputMethodManager(service, mainLooper);
        }
        return mInstance;
!!!2869772.java!!!	peekInstance() : InputMethodManager
        return mInstance;
!!!2869900.java!!!	getClient() : IInputMethodClient
        return mClient;
!!!2870028.java!!!	getInputContext() : IInputContext
        return mIInputContext;
!!!2870156.java!!!	getInputMethodList() : InputMethodInfo
        try {
            return mService.getInputMethodList();
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2870284.java!!!	getEnabledInputMethodList() : InputMethodInfo
        try {
            return mService.getEnabledInputMethodList();
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2870412.java!!!	getEnabledInputMethodSubtypeList(inout imi : InputMethodInfo, inout allowsImplicitlySelectedSubtypes : boolean) : InputMethodSubtype
        try {
            return mService.getEnabledInputMethodSubtypeList(imi, allowsImplicitlySelectedSubtypes);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2870540.java!!!	showStatusIcon(inout imeToken : IBinder, in packageName : String, in iconId : int) : void
        try {
            mService.updateStatusIcon(imeToken, packageName, iconId);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2870668.java!!!	hideStatusIcon(inout imeToken : IBinder) : void
        try {
            mService.updateStatusIcon(imeToken, null, 0);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2870796.java!!!	setImeWindowStatus(inout imeToken : IBinder, in vis : int, in backDisposition : int) : void
        try {
            mService.setImeWindowStatus(imeToken, vis, backDisposition);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2870924.java!!!	setFullscreenMode(inout fullScreen : boolean) : void
        mFullscreenMode = fullScreen;
!!!2871052.java!!!	registerSuggestionSpansForNotification(inout spans : SuggestionSpan) : void
        try {
            mService.registerSuggestionSpansForNotification(spans);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2871180.java!!!	notifySuggestionPicked(inout span : SuggestionSpan, in originalString : String, in index : int) : void
        try {
            mService.notifySuggestionPicked(span, originalString, index);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2871308.java!!!	isFullscreenMode() : boolean
        return mFullscreenMode;
!!!2871436.java!!!	isActive(inout view : View) : boolean
        checkFocus();
        synchronized (mH) {
            return (mServedView == view
                    || (mServedView != null
                            && mServedView.checkInputConnectionProxy(view)))
                    && mCurrentTextBoxAttribute != null;
        }
!!!2871564.java!!!	isActive() : boolean
        checkFocus();
        synchronized (mH) {
            return mServedView != null && mCurrentTextBoxAttribute != null;
        }
!!!2871692.java!!!	isAcceptingText() : boolean
        checkFocus();
        return mServedInputConnection != null;
!!!2871820.java!!!	clearBindingLocked() : void
        clearConnectionLocked();
        mBindSequence = -1;
        mCurId = null;
        mCurMethod = null;
!!!2871948.java!!!	clearConnectionLocked() : void
        mCurrentTextBoxAttribute = null;
        mServedInputConnection = null;
        if (mServedInputConnectionWrapper != null) {
            mServedInputConnectionWrapper.deactivate();
            mServedInputConnectionWrapper = null;
        }
!!!2872076.java!!!	finishInputLocked() : void
        mCurRootView = null;
        mNextServedView = null;
        if (mServedView != null) {
            if (DEBUG) Log.v(TAG, "FINISH INPUT: " + mServedView);
            
            if (mCurrentTextBoxAttribute != null) {
                try {
                    mService.finishInput(mClient);
                } catch (RemoteException e) {
                }
            }
            
            notifyInputConnectionFinished();
            
            mServedView = null;
            mCompletions = null;
            mServedConnecting = false;
            clearConnectionLocked();
        }
!!!2872204.java!!!	notifyInputConnectionFinished() : void
        if (mServedView != null && mServedInputConnection != null) {
            // We need to tell the previously served view that it is no
            // longer the input target, so it can reset its state.  Schedule
            // this call on its window's Handler so it will be on the correct
            // thread and outside of our lock.
            ViewRootImpl viewRootImpl = mServedView.getViewRootImpl();
            if (viewRootImpl != null) {
                // This will result in a call to reportFinishInputConnection() below.
                viewRootImpl.dispatchFinishInputConnection(mServedInputConnection);
            }
        }
!!!2872332.java!!!	reportFinishInputConnection(inout ic : InputConnection) : void
        if (mServedInputConnection != ic) {
            ic.finishComposingText();
            // To avoid modifying the public InputConnection interface
            if (ic instanceof BaseInputConnection) {
                ((BaseInputConnection) ic).reportFinish();
            }
        }
!!!2872460.java!!!	displayCompletions(inout view : View, inout completions : CompletionInfo) : void
        checkFocus();
        synchronized (mH) {
            if (mServedView != view && (mServedView == null
                            || !mServedView.checkInputConnectionProxy(view))) {
                return;
            }
            
            mCompletions = completions;
            if (mCurMethod != null) {
                try {
                    mCurMethod.displayCompletions(mCompletions);
                } catch (RemoteException e) {
                }
            }
        }
!!!2872588.java!!!	updateExtractedText(inout view : View, in token : int, inout text : ExtractedText) : void
        checkFocus();
        synchronized (mH) {
            if (mServedView != view && (mServedView == null
                    || !mServedView.checkInputConnectionProxy(view))) {
                return;
            }
            
            if (mCurMethod != null) {
                try {
                    mCurMethod.updateExtractedText(token, text);
                } catch (RemoteException e) {
                }
            }
        }
!!!2872716.java!!!	showSoftInput(inout view : View, in flags : int) : boolean
        return showSoftInput(view, flags, null);
!!!2872844.java!!!	showSoftInput(inout view : View, in flags : int, inout resultReceiver : ResultReceiver) : boolean
        checkFocus();
        synchronized (mH) {
            if (mServedView != view && (mServedView == null
                    || !mServedView.checkInputConnectionProxy(view))) {
                return false;
            }

            try {
                return mService.showSoftInput(mClient, flags, resultReceiver);
            } catch (RemoteException e) {
            }
            
            return false;
        }
!!!2872972.java!!!	showSoftInputUnchecked(in flags : int, inout resultReceiver : ResultReceiver) : void
        try {
            mService.showSoftInput(mClient, flags, resultReceiver);
        } catch (RemoteException e) {
        }
!!!2873100.java!!!	hideSoftInputFromWindow(inout windowToken : IBinder, in flags : int) : boolean
        return hideSoftInputFromWindow(windowToken, flags, null);
!!!2873228.java!!!	hideSoftInputFromWindow(inout windowToken : IBinder, in flags : int, inout resultReceiver : ResultReceiver) : boolean
        checkFocus();
        synchronized (mH) {
            if (mServedView == null || mServedView.getWindowToken() != windowToken) {
                return false;
            }

            try {
                return mService.hideSoftInput(mClient, flags, resultReceiver);
            } catch (RemoteException e) {
            }
            return false;
        }
!!!2873356.java!!!	toggleSoftInputFromWindow(inout windowToken : IBinder, in showFlags : int, in hideFlags : int) : void
        synchronized (mH) {
            if (mServedView == null || mServedView.getWindowToken() != windowToken) {
                return;
            }
            if (mCurMethod != null) {
                try {
                    mCurMethod.toggleSoftInput(showFlags, hideFlags);
                } catch (RemoteException e) {
                }
            }
        }
!!!2873484.java!!!	toggleSoftInput(in showFlags : int, in hideFlags : int) : void
        if (mCurMethod != null) {
            try {
                mCurMethod.toggleSoftInput(showFlags, hideFlags);
            } catch (RemoteException e) {
            }
        }
!!!2873612.java!!!	restartInput(inout view : View) : void
        checkFocus();
        synchronized (mH) {
            if (mServedView != view && (mServedView == null
                    || !mServedView.checkInputConnectionProxy(view))) {
                return;
            }
            
            mServedConnecting = true;
        }
        
        startInputInner(null, 0, 0, 0);
!!!2873740.java!!!	startInputInner(inout windowGainingFocus : IBinder, in controlFlags : int, in softInputMode : int, in windowFlags : int) : boolean
        final View view;
        synchronized (mH) {
            view = mServedView;
            
            // Make sure we have a window token for the served view.
            if (DEBUG) Log.v(TAG, "Starting input: view=" + view);
            if (view == null) {
                if (DEBUG) Log.v(TAG, "ABORT input: no served view!");
                return false;
            }
        }
        
        // Now we need to get an input connection from the served view.
        // This is complicated in a couple ways: we can't be holding our lock
        // when calling out to the view, and we need to make sure we call into
        // the view on the same thread that is driving its view hierarchy.
        Handler vh = view.getHandler();
        if (vh == null) {
            // If the view doesn't have a handler, something has changed out
            // from under us, so just close the current input.
            // If we don't close the current input, the current input method can remain on the
            // screen without a connection.
            if (DEBUG) Log.v(TAG, "ABORT input: no handler for view! Close current input.");
            closeCurrentInput();
            return false;
        }
        if (vh.getLooper() != Looper.myLooper()) {
            // The view is running on a different thread than our own, so
            // we need to reschedule our work for over there.
            if (DEBUG) Log.v(TAG, "Starting input: reschedule to view thread");
            vh.post(new Runnable() {
                public void run() {
                    startInputInner(null, 0, 0, 0);
                }
            });
            return false;
        }
        
        // Okay we are now ready to call into the served view and have it
        // do its stuff.
        // Life is good: let's hook everything up!
        EditorInfo tba = new EditorInfo();
        tba.packageName = view.getContext().getPackageName();
        tba.fieldId = view.getId();
        InputConnection ic = view.onCreateInputConnection(tba);
        if (DEBUG) Log.v(TAG, "Starting input: tba=" + tba + " ic=" + ic);

        synchronized (mH) {
            // Now that we are locked again, validate that our state hasn't
            // changed.
            if (mServedView != view || !mServedConnecting) {
                // Something else happened, so abort.
                if (DEBUG) Log.v(TAG, 
                        "Starting input: finished by someone else (view="
                        + mServedView + " conn=" + mServedConnecting + ")");
                return false;
            }

            // If we already have a text box, then this view is already
            // connected so we want to restart it.
            if (mCurrentTextBoxAttribute == null) {
                controlFlags |= CONTROL_START_INITIAL;
            }
            
            // Hook 'em up and let 'er rip.
            mCurrentTextBoxAttribute = tba;
            mServedConnecting = false;
            // Notify the served view that its previous input connection is finished
            notifyInputConnectionFinished();
            mServedInputConnection = ic;
            ControlledInputConnectionWrapper servedContext;
            if (ic != null) {
                mCursorSelStart = tba.initialSelStart;
                mCursorSelEnd = tba.initialSelEnd;
                mCursorCandStart = -1;
                mCursorCandEnd = -1;
                mCursorRect.setEmpty();
                servedContext = new ControlledInputConnectionWrapper(vh.getLooper(), ic, this);
            } else {
                servedContext = null;
            }
            if (mServedInputConnectionWrapper != null) {
                mServedInputConnectionWrapper.deactivate();
            }
            mServedInputConnectionWrapper = servedContext;
            
            try {
                if (DEBUG) Log.v(TAG, "START INPUT: " + view + " ic="
                        + ic + " tba=" + tba + " controlFlags=#"
                        + Integer.toHexString(controlFlags));
                InputBindResult res;
                if (windowGainingFocus != null) {
                    res = mService.windowGainedFocus(mClient, windowGainingFocus,
                            controlFlags, softInputMode, windowFlags,
                            tba, servedContext);
                } else {
                    res = mService.startInput(mClient,
                            servedContext, tba, controlFlags);
                }
                if (DEBUG) Log.v(TAG, "Starting input: Bind result=" + res);
                if (res != null) {
                    if (res.id != null) {
                        mBindSequence = res.sequence;
                        mCurMethod = res.method;
                        mCurId = res.id;
                    } else if (mCurMethod == null) {
                        // This means there is no input method available.
                        if (DEBUG) Log.v(TAG, "ABORT input: no input method!");
                        return true;
                    }
                }
                if (mCurMethod != null && mCompletions != null) {
                    try {
                        mCurMethod.displayCompletions(mCompletions);
                    } catch (RemoteException e) {
                    }
                }
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
            }
        }

        return true;
!!!2873868.java!!!	windowDismissed(inout appWindowToken : IBinder) : void
        checkFocus();
        synchronized (mH) {
            if (mServedView != null &&
                    mServedView.getWindowToken() == appWindowToken) {
                finishInputLocked();
            }
        }
!!!2873996.java!!!	focusIn(inout view : View) : void
        synchronized (mH) {
            focusInLocked(view);
        }
!!!2874124.java!!!	focusInLocked(inout view : View) : void
        if (DEBUG) Log.v(TAG, "focusIn: " + view);
        
        if (mCurRootView != view.getRootView()) {
            // This is a request from a window that isn't in the window with
            // IME focus, so ignore it.
            if (DEBUG) Log.v(TAG, "Not IME target window, ignoring");
            return;
        }
        
        mNextServedView = view;
        scheduleCheckFocusLocked(view);
!!!2874252.java!!!	focusOut(inout view : View) : void
        synchronized (mH) {
            if (DEBUG) Log.v(TAG, "focusOut: " + view
                    + " mServedView=" + mServedView
                    + " winFocus=" + view.hasWindowFocus());
            if (mServedView != view) {
                // The following code would auto-hide the IME if we end up
                // with no more views with focus.  This can happen, however,
                // whenever we go into touch mode, so it ends up hiding
                // at times when we don't really want it to.  For now it
                // seems better to just turn it all off.
                if (false && view.hasWindowFocus()) {
                    mNextServedView = null;
                    scheduleCheckFocusLocked(view);
                }
            }
        }
!!!2874380.java!!!	scheduleCheckFocusLocked(inout view : View) : void
        ViewRootImpl viewRootImpl = view.getViewRootImpl();
        if (viewRootImpl != null) {
            viewRootImpl.dispatchCheckFocus();
        }
!!!2874508.java!!!	checkFocus() : void
        if (checkFocusNoStartInput(false, true)) {
            startInputInner(null, 0, 0, 0);
        }
!!!2874636.java!!!	checkFocusNoStartInput(inout forceNewFocus : boolean, inout finishComposingText : boolean) : boolean
        // This is called a lot, so short-circuit before locking.
        if (mServedView == mNextServedView && !forceNewFocus) {
            return false;
        }

        InputConnection ic = null;
        synchronized (mH) {
            if (mServedView == mNextServedView && !forceNewFocus) {
                return false;
            }
            if (DEBUG) Log.v(TAG, "checkFocus: view=" + mServedView
                    + " next=" + mNextServedView
                    + " forceNewFocus=" + forceNewFocus
                    + " package="
                    + (mServedView != null ? mServedView.getContext().getPackageName() : "<none>"));

            if (mNextServedView == null) {
                finishInputLocked();
                // In this case, we used to have a focused view on the window,
                // but no longer do.  We should make sure the input method is
                // no longer shown, since it serves no purpose.
                closeCurrentInput();
                return false;
            }

            ic = mServedInputConnection;

            mServedView = mNextServedView;
            mCurrentTextBoxAttribute = null;
            mCompletions = null;
            mServedConnecting = true;
        }

        if (finishComposingText && ic != null) {
            ic.finishComposingText();
        }

        return true;
!!!2874764.java!!!	closeCurrentInput() : void
        try {
            mService.hideSoftInput(mClient, HIDE_NOT_ALWAYS, null);
        } catch (RemoteException e) {
        }
!!!2874892.java!!!	onWindowFocus(inout rootView : View, inout focusedView : View, in softInputMode : int, inout first : boolean, in windowFlags : int) : void
        boolean forceNewFocus = false;
        synchronized (mH) {
            if (DEBUG) Log.v(TAG, "onWindowFocus: " + focusedView
                    + " softInputMode=" + softInputMode
                    + " first=" + first + " flags=#"
                    + Integer.toHexString(windowFlags));
            if (mHasBeenInactive) {
                if (DEBUG) Log.v(TAG, "Has been inactive!  Starting fresh");
                mHasBeenInactive = false;
                forceNewFocus = true;
            }
            focusInLocked(focusedView != null ? focusedView : rootView);
        }

        int controlFlags = 0;
        if (focusedView != null) {
            controlFlags |= CONTROL_WINDOW_VIEW_HAS_FOCUS;
            if (focusedView.onCheckIsTextEditor()) {
                controlFlags |= CONTROL_WINDOW_IS_TEXT_EDITOR;
            }
        }
        if (first) {
            controlFlags |= CONTROL_WINDOW_FIRST;
        }
        
        if (checkFocusNoStartInput(forceNewFocus, true)) {
            // We need to restart input on the current focus view.  This
            // should be done in conjunction with telling the system service
            // about the window gaining focus, to help make the transition
            // smooth.
            if (startInputInner(rootView.getWindowToken(),
                    controlFlags, softInputMode, windowFlags)) {
                return;
            }
        }
        
        // For some reason we didn't do a startInput + windowFocusGain, so
        // we'll just do a window focus gain and call it a day.
        synchronized (mH) {
            try {
                if (DEBUG) Log.v(TAG, "Reporting focus gain, without startInput");
                mService.windowGainedFocus(mClient, rootView.getWindowToken(),
                        controlFlags, softInputMode, windowFlags, null, null);
            } catch (RemoteException e) {
            }
        }
!!!2875020.java!!!	startGettingWindowFocus(inout rootView : View) : void
        synchronized (mH) {
            mCurRootView = rootView;
        }
!!!2875148.java!!!	updateSelection(inout view : View, in selStart : int, in selEnd : int, in candidatesStart : int, in candidatesEnd : int) : void
        checkFocus();
        synchronized (mH) {
            if ((mServedView != view && (mServedView == null
                        || !mServedView.checkInputConnectionProxy(view)))
                    || mCurrentTextBoxAttribute == null || mCurMethod == null) {
                return;
            }
            
            if (mCursorSelStart != selStart || mCursorSelEnd != selEnd
                    || mCursorCandStart != candidatesStart
                    || mCursorCandEnd != candidatesEnd) {
                if (DEBUG) Log.d(TAG, "updateSelection");

                try {
                    if (DEBUG) Log.v(TAG, "SELECTION CHANGE: " + mCurMethod);
                    mCurMethod.updateSelection(mCursorSelStart, mCursorSelEnd,
                            selStart, selEnd, candidatesStart, candidatesEnd);
                    mCursorSelStart = selStart;
                    mCursorSelEnd = selEnd;
                    mCursorCandStart = candidatesStart;
                    mCursorCandEnd = candidatesEnd;
                } catch (RemoteException e) {
                    Log.w(TAG, "IME died: " + mCurId, e);
                }
            }
        }
!!!2875276.java!!!	viewClicked(inout view : View) : void
        final boolean focusChanged = mServedView != mNextServedView;
        checkFocus();
        synchronized (mH) {
            if ((mServedView != view && (mServedView == null
                    || !mServedView.checkInputConnectionProxy(view)))
                    || mCurrentTextBoxAttribute == null || mCurMethod == null) {
                return;
            }
            try {
                if (DEBUG) Log.v(TAG, "onViewClicked: " + focusChanged);
                mCurMethod.viewClicked(focusChanged);
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
            }
        }
!!!2875404.java!!!	isWatchingCursor(inout view : View) : boolean
        return false;
!!!2875532.java!!!	updateCursor(inout view : View, in left : int, in top : int, in right : int, in bottom : int) : void
        checkFocus();
        synchronized (mH) {
            if ((mServedView != view && (mServedView == null
                        || !mServedView.checkInputConnectionProxy(view)))
                    || mCurrentTextBoxAttribute == null || mCurMethod == null) {
                return;
            }
            
            mTmpCursorRect.set(left, top, right, bottom);
            if (!mCursorRect.equals(mTmpCursorRect)) {
                if (DEBUG) Log.d(TAG, "updateCursor");

                try {
                    if (DEBUG) Log.v(TAG, "CURSOR CHANGE: " + mCurMethod);
                    mCurMethod.updateCursor(mTmpCursorRect);
                    mCursorRect.set(mTmpCursorRect);
                } catch (RemoteException e) {
                    Log.w(TAG, "IME died: " + mCurId, e);
                }
            }
        }
!!!2875660.java!!!	sendAppPrivateCommand(inout view : View, in action : String, inout data : Bundle) : void
        checkFocus();
        synchronized (mH) {
            if ((mServedView != view && (mServedView == null
                        || !mServedView.checkInputConnectionProxy(view)))
                    || mCurrentTextBoxAttribute == null || mCurMethod == null) {
                return;
            }
            try {
                if (DEBUG) Log.v(TAG, "APP PRIVATE COMMAND " + action + ": " + data);
                mCurMethod.appPrivateCommand(action, data);
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
            }
        }
!!!2875788.java!!!	setInputMethod(inout token : IBinder, in id : String) : void
        try {
            mService.setInputMethod(token, id);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2875916.java!!!	setInputMethodAndSubtype(inout token : IBinder, in id : String, inout subtype : InputMethodSubtype) : void
        try {
            mService.setInputMethodAndSubtype(token, id, subtype);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2876044.java!!!	hideSoftInputFromInputMethod(inout token : IBinder, in flags : int) : void
        try {
            mService.hideMySoftInput(token, flags);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2876172.java!!!	showSoftInputFromInputMethod(inout token : IBinder, in flags : int) : void
        try {
            mService.showMySoftInput(token, flags);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!2876300.java!!!	dispatchKeyEvent(inout context : Context, in seq : int, inout key : KeyEvent, inout callback : FinishedEventCallback) : void
        boolean handled = false;
        synchronized (mH) {
            if (DEBUG) Log.d(TAG, "dispatchKeyEvent");

            if (mCurMethod != null) {
                if (key.getAction() == KeyEvent.ACTION_DOWN
                        && key.getKeyCode() == KeyEvent.KEYCODE_SYM) {
                    showInputMethodPickerLocked();
                    handled = true;
                } else {
                    try {
                        if (DEBUG) Log.v(TAG, "DISPATCH KEY: " + mCurMethod);
                        final long startTime = SystemClock.uptimeMillis();
                        enqueuePendingEventLocked(startTime, seq, mCurId, callback);
                        mCurMethod.dispatchKeyEvent(seq, key, mInputMethodCallback);
                        return;
                    } catch (RemoteException e) {
                        Log.w(TAG, "IME died: " + mCurId + " dropping: " + key, e);
                    }
                }
            }
        }

        callback.finishedEvent(seq, handled);
!!!2876428.java!!!	dispatchTrackballEvent(inout context : Context, in seq : int, inout motion : MotionEvent, inout callback : FinishedEventCallback) : void
        synchronized (mH) {
            if (DEBUG) Log.d(TAG, "dispatchTrackballEvent");

            if (mCurMethod != null && mCurrentTextBoxAttribute != null) {
                try {
                    if (DEBUG) Log.v(TAG, "DISPATCH TRACKBALL: " + mCurMethod);
                    final long startTime = SystemClock.uptimeMillis();
                    enqueuePendingEventLocked(startTime, seq, mCurId, callback);
                    mCurMethod.dispatchTrackballEvent(seq, motion, mInputMethodCallback);
                    return;
                } catch (RemoteException e) {
                    Log.w(TAG, "IME died: " + mCurId + " dropping trackball: " + motion, e);
                }
            }
        }

        callback.finishedEvent(seq, false);
!!!2876556.java!!!	dispatchGenericMotionEvent(inout context : Context, in seq : int, inout motion : MotionEvent, inout callback : FinishedEventCallback) : void
        synchronized (mH) {
            if (DEBUG) Log.d(TAG, "dispatchGenericMotionEvent");

            if (mCurMethod != null && mCurrentTextBoxAttribute != null) {
                try {
                    if (DEBUG) Log.v(TAG, "DISPATCH GENERIC MOTION: " + mCurMethod);
                    final long startTime = SystemClock.uptimeMillis();
                    enqueuePendingEventLocked(startTime, seq, mCurId, callback);
                    mCurMethod.dispatchGenericMotionEvent(seq, motion, mInputMethodCallback);
                    return;
                } catch (RemoteException e) {
                    Log.w(TAG, "IME died: " + mCurId + " dropping generic motion: " + motion, e);
                }
            }
        }

        callback.finishedEvent(seq, false);
!!!2876684.java!!!	finishedEvent(in seq : int, inout handled : boolean) : void
        final FinishedEventCallback callback;
        synchronized (mH) {
            PendingEvent p = dequeuePendingEventLocked(seq);
            if (p == null) {
                return; // spurious, event already finished or timed out
            }
            mH.removeMessages(MSG_EVENT_TIMEOUT, p);
            callback = p.mCallback;
            recyclePendingEventLocked(p);
        }
        callback.finishedEvent(seq, handled);
!!!2876812.java!!!	timeoutEvent(in seq : int) : void
        final FinishedEventCallback callback;
        synchronized (mH) {
            PendingEvent p = dequeuePendingEventLocked(seq);
            if (p == null) {
                return; // spurious, event already finished or timed out
            }
            long delay = SystemClock.uptimeMillis() - p.mStartTime;
            Log.w(TAG, "Timeout waiting for IME to handle input event after "
                    + delay + "ms: " + p.mInputMethodId);
            callback = p.mCallback;
            recyclePendingEventLocked(p);
        }
        callback.finishedEvent(seq, false);
!!!2876940.java!!!	enqueuePendingEventLocked(in startTime : long, in seq : int, in inputMethodId : String, inout callback : FinishedEventCallback) : void
        PendingEvent p = obtainPendingEventLocked(startTime, seq, inputMethodId, callback);
        p.mNext = mFirstPendingEvent;
        mFirstPendingEvent = p;

        Message msg = mH.obtainMessage(MSG_EVENT_TIMEOUT, seq, 0, p);
        msg.setAsynchronous(true);
        mH.sendMessageDelayed(msg, INPUT_METHOD_NOT_RESPONDING_TIMEOUT);
!!!2877068.java!!!	dequeuePendingEventLocked(in seq : int) : PendingEvent
        PendingEvent p = mFirstPendingEvent;
        if (p == null) {
            return null;
        }
        if (p.mSeq == seq) {
            mFirstPendingEvent = p.mNext;
        } else {
            PendingEvent prev;
            do {
                prev = p;
                p = p.mNext;
                if (p == null) {
                    return null;
                }
            } while (p.mSeq != seq);
            prev.mNext = p.mNext;
        }
        p.mNext = null;
        return p;
!!!2877196.java!!!	obtainPendingEventLocked(in startTime : long, in seq : int, in inputMethodId : String, inout callback : FinishedEventCallback) : PendingEvent
        PendingEvent p = mPendingEventPool;
        if (p != null) {
            mPendingEventPoolSize -= 1;
            mPendingEventPool = p.mNext;
            p.mNext = null;
        } else {
            p = new PendingEvent();
        }

        p.mStartTime = startTime;
        p.mSeq = seq;
        p.mInputMethodId = inputMethodId;
        p.mCallback = callback;
        return p;
!!!2877324.java!!!	recyclePendingEventLocked(inout p : PendingEvent) : void
        p.mInputMethodId = null;
        p.mCallback = null;

        if (mPendingEventPoolSize < MAX_PENDING_EVENT_POOL_SIZE) {
            mPendingEventPoolSize += 1;
            p.mNext = mPendingEventPool;
            mPendingEventPool = p;
        }
!!!2877452.java!!!	showInputMethodPicker() : void
        synchronized (mH) {
            showInputMethodPickerLocked();
        }
!!!2877580.java!!!	showInputMethodPickerLocked() : void
        try {
            mService.showInputMethodPickerFromClient(mClient);
        } catch (RemoteException e) {
            Log.w(TAG, "IME died: " + mCurId, e);
        }
!!!2877708.java!!!	showInputMethodAndSubtypeEnabler(in imiId : String) : void
        synchronized (mH) {
            try {
                mService.showInputMethodAndSubtypeEnablerFromClient(mClient, imiId);
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
            }
        }
!!!2877836.java!!!	getCurrentInputMethodSubtype() : InputMethodSubtype
        synchronized (mH) {
            try {
                return mService.getCurrentInputMethodSubtype();
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
                return null;
            }
        }
!!!2877964.java!!!	setCurrentInputMethodSubtype(inout subtype : InputMethodSubtype) : boolean
        synchronized (mH) {
            try {
                return mService.setCurrentInputMethodSubtype(subtype);
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
                return false;
            }
        }
!!!2878092.java!!!	getShortcutInputMethodsAndSubtypes() : InputMethodInfo
        synchronized (mH) {
            HashMap<InputMethodInfo, List<InputMethodSubtype>> ret =
                    new HashMap<InputMethodInfo, List<InputMethodSubtype>>();
            try {
                // TODO: We should change the return type from List<Object> to List<Parcelable>
                List<Object> info = mService.getShortcutInputMethodsAndSubtypes();
                // "info" has imi1, subtype1, subtype2, imi2, subtype2, imi3, subtype3..in the list
                ArrayList<InputMethodSubtype> subtypes = null;
                final int N = info.size();
                if (info != null && N > 0) {
                    for (int i = 0; i < N; ++i) {
                        Object o = info.get(i);
                        if (o instanceof InputMethodInfo) {
                            if (ret.containsKey(o)) {
                                Log.e(TAG, "IMI list already contains the same InputMethod.");
                                break;
                            }
                            subtypes = new ArrayList<InputMethodSubtype>();
                            ret.put((InputMethodInfo)o, subtypes);
                        } else if (subtypes != null && o instanceof InputMethodSubtype) {
                            subtypes.add((InputMethodSubtype)o);
                        }
                    }
                }
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
            }
            return ret;
        }
!!!2878220.java!!!	switchToLastInputMethod(inout imeToken : IBinder) : boolean
        synchronized (mH) {
            try {
                return mService.switchToLastInputMethod(imeToken);
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
                return false;
            }
        }
!!!2878348.java!!!	switchToNextInputMethod(inout imeToken : IBinder, inout onlyCurrentIme : boolean) : boolean
        synchronized (mH) {
            try {
                return mService.switchToNextInputMethod(imeToken, onlyCurrentIme);
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
                return false;
            }
        }
!!!2878476.java!!!	setAdditionalInputMethodSubtypes(in imiId : String, inout subtypes : InputMethodSubtype) : void
        synchronized (mH) {
            try {
                mService.setAdditionalInputMethodSubtypes(imiId, subtypes);
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
            }
        }
!!!2878604.java!!!	getLastInputMethodSubtype() : InputMethodSubtype
        synchronized (mH) {
            try {
                return mService.getLastInputMethodSubtype();
            } catch (RemoteException e) {
                Log.w(TAG, "IME died: " + mCurId, e);
                return null;
            }
        }
!!!2878732.java!!!	doDump(inout fd : FileDescriptor, inout fout : PrintWriter, inout args : String) : void
        final Printer p = new PrintWriterPrinter(fout);
        p.println("Input method client state for " + this + ":");
        
        p.println("  mService=" + mService);
        p.println("  mMainLooper=" + mMainLooper);
        p.println("  mIInputContext=" + mIInputContext);
        p.println("  mActive=" + mActive
                + " mHasBeenInactive=" + mHasBeenInactive
                + " mBindSequence=" + mBindSequence
                + " mCurId=" + mCurId);
        p.println("  mCurMethod=" + mCurMethod);
        p.println("  mCurRootView=" + mCurRootView);
        p.println("  mServedView=" + mServedView);
        p.println("  mNextServedView=" + mNextServedView);
        p.println("  mServedConnecting=" + mServedConnecting);
        if (mCurrentTextBoxAttribute != null) {
            p.println("  mCurrentTextBoxAttribute:");
            mCurrentTextBoxAttribute.dump(p, "    ");
        } else {
            p.println("  mCurrentTextBoxAttribute: null");
        }
        p.println("  mServedInputConnection=" + mServedInputConnection);
        p.println("  mCompletions=" + mCompletions);
        p.println("  mCursorRect=" + mCursorRect);
        p.println("  mCursorSelStart=" + mCursorSelStart
                + " mCursorSelEnd=" + mCursorSelEnd
                + " mCursorCandStart=" + mCursorCandStart
                + " mCursorCandEnd=" + mCursorCandEnd);
