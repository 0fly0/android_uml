class AudioCache
!!!506636.cpp!!!	AudioCache(in name : char)
    // create ashmem heap
    mHeap = new MemoryHeapBase(kDefaultHeapSize, 0, name);
!!!507660.cpp!!!	latency() : uint32_t
    return 0;
!!!507788.cpp!!!	msecsPerFrame() : float
    return mMsecsPerFrame;
!!!507916.cpp!!!	getPosition(inout position : uint32_t) : status_t
    if (position == 0) return BAD_VALUE;
    *position = mSize;
    return NO_ERROR;
!!!508044.cpp!!!	getFramesWritten(inout written : uint32_t) : status_t
    if (written == 0) return BAD_VALUE;
    *written = mSize;
    return NO_ERROR;
!!!508172.cpp!!!	getSessionId() : int
    return 0;
!!!508300.cpp!!!	open(in sampleRate : uint32_t, in channelCount : int, in channelMask : audio_channel_mask_t, in format : audio_format_t, in bufferCount : int = 1, in cb : AudioCallback = NULL, inout cookie : void = NULL, in flags : audio_output_flags_t = AUDIO_OUTPUT_FLAG_NONE) : status_t
    ALOGV("open(%u, %d, 0x%x, %d, %d)", sampleRate, channelCount, channelMask, format, bufferCount);
    if (mHeap->getHeapID() < 0) {
        return NO_INIT;
    }

    mSampleRate = sampleRate;
    mChannelCount = (uint16_t)channelCount;
    mFormat = format;
    mMsecsPerFrame = 1.e3 / (float) sampleRate;

    if (cb != NULL) {
        mCallbackThread = new CallbackThread(this, cb, cookie);
    }
    return NO_ERROR;
!!!508428.cpp!!!	start() : void
    if (mCallbackThread != NULL) {
        mCallbackThread->run("AudioCache callback");
    }
!!!508556.cpp!!!	write(in buffer : void, in size : size_t) : ssize_t
    ALOGV("write(%p, %u)", buffer, size);
    if ((buffer == 0) || (size == 0)) return size;

    uint8_t* p = static_cast<uint8_t*>(mHeap->getBase());
    if (p == NULL) return NO_INIT;
    p += mSize;
    ALOGV("memcpy(%p, %p, %u)", p, buffer, size);
    if (mSize + size > mHeap->getSize()) {
        ALOGE("Heap size overflow! req size: %d, max size: %d", (mSize + size), mHeap->getSize());
        size = mHeap->getSize() - mSize;
    }
    memcpy(p, buffer, size);
    mSize += size;
    return size;
!!!508684.cpp!!!	stop() : void
    if (mCallbackThread != NULL) {
        mCallbackThread->requestExitAndWait();
    }
!!!509964.cpp!!!	wait() : status_t
    Mutex::Autolock lock(mLock);
    while (!mCommandComplete) {
        mSignal.wait(mLock);
    }
    mCommandComplete = false;

    if (mError == NO_ERROR) {
        ALOGV("wait - success");
    } else {
        ALOGV("wait - error");
    }
    return mError;
!!!510220.cpp!!!	notify(inout cookie : void, in msg : int, in ext1 : int, in ext2 : int, in obj : Parcel) : void
    ALOGV("notify(%p, %d, %d, %d)", cookie, msg, ext1, ext2);
    AudioCache* p = static_cast<AudioCache*>(cookie);

    // ignore buffering messages
    switch (msg)
    {
    case MEDIA_ERROR:
        ALOGE("Error %d, %d occurred", ext1, ext2);
        p->mError = ext1;
        break;
    case MEDIA_PREPARED:
        ALOGV("prepared");
        break;
    case MEDIA_PLAYBACK_COMPLETE:
        ALOGV("playback complete");
        break;
    default:
        ALOGV("ignored");
        return;
    }

    // wake up thread
    Mutex::Autolock lock(p->mLock);
    p->mCommandComplete = true;
    p->mSignal.signal();
!!!510348.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;

    result.append(" AudioCache\n");
    if (mHeap != 0) {
        snprintf(buffer, 255, "  heap base(%p), size(%d), flags(%d), device(%s)\n",
                mHeap->getBase(), mHeap->getSize(), mHeap->getFlags(), mHeap->getDevice());
        result.append(buffer);
    }
    snprintf(buffer, 255, "  msec per frame(%f), channel count(%d), format(%d), frame count(%ld)\n",
            mMsecsPerFrame, mChannelCount, mFormat, mFrameCount);
    result.append(buffer);
    snprintf(buffer, 255, "  sample rate(%d), size(%d), error(%d), command complete(%s)\n",
            mSampleRate, mSize, mError, mCommandComplete?"true":"false");
    result.append(buffer);
    ::write(fd, result.string(), result.size());
    return NO_ERROR;
