class DragView
!!!13622796.java!!!	DragView(inout launcher : Launcher, inout bitmap : Bitmap, in registrationX : int, in registrationY : int, in left : int, in top : int, in width : int, in height : int, in initialScale : float)
        super(launcher);
        mDragLayer = launcher.getDragLayer();
        mInitialScale = initialScale;

        final Resources res = getResources();
        final float offsetX = res.getDimensionPixelSize(R.dimen.dragViewOffsetX);
        final float offsetY = res.getDimensionPixelSize(R.dimen.dragViewOffsetY);
        final float scaleDps = res.getDimensionPixelSize(R.dimen.dragViewScale);
        final float scale = (width + scaleDps) / width;

        // Set the initial scale to avoid any jumps
        setScaleX(initialScale);
        setScaleY(initialScale);

        // Animate the view into the correct position
        mAnim = LauncherAnimUtils.ofFloat(0.0f, 1.0f);
        mAnim.setDuration(150);
        mAnim.addUpdateListener(new AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                final float value = (Float) animation.getAnimatedValue();

                final int deltaX = (int) ((value * offsetX) - mOffsetX);
                final int deltaY = (int) ((value * offsetY) - mOffsetY);

                mOffsetX += deltaX;
                mOffsetY += deltaY;
                setScaleX(initialScale + (value * (scale - initialScale)));
                setScaleY(initialScale + (value * (scale - initialScale)));
                if (sDragAlpha != 1f) {
                    setAlpha(sDragAlpha * value + (1f - value));
                }

                if (getParent() == null) {
                    animation.cancel();
                } else {
                    setTranslationX(getTranslationX() + deltaX);
                    setTranslationY(getTranslationY() + deltaY);
                }
            }
        });

        mBitmap = Bitmap.createBitmap(bitmap, left, top, width, height);
        setDragRegion(new Rect(0, 0, width, height));

        // The point in our scaled bitmap that the touch events are located
        mRegistrationX = registrationX;
        mRegistrationY = registrationY;

        // Force a measure, because Workspace uses getMeasuredHeight() before the layout pass
        int ms = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
        measure(ms, ms);
        mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
!!!13622924.java!!!	getOffsetY() : float
        return mOffsetY;
!!!13623052.java!!!	getDragRegionLeft() : int
        return mDragRegion.left;
!!!13623180.java!!!	getDragRegionTop() : int
        return mDragRegion.top;
!!!13623308.java!!!	getDragRegionWidth() : int
        return mDragRegion.width();
!!!13623436.java!!!	getDragRegionHeight() : int
        return mDragRegion.height();
!!!13623564.java!!!	setDragVisualizeOffset(inout p : Point) : void
        mDragVisualizeOffset = p;
!!!13623692.java!!!	getDragVisualizeOffset() : Point
        return mDragVisualizeOffset;
!!!13623820.java!!!	setDragRegion(inout r : Rect) : void
        mDragRegion = r;
!!!13623948.java!!!	getDragRegion() : Rect
        return mDragRegion;
!!!13624076.java!!!	getInitialScale() : float
        return mInitialScale;
!!!13624204.java!!!	updateInitialScaleToCurrentScale() : void
        mInitialScale = getScaleX();
!!!13624332.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        setMeasuredDimension(mBitmap.getWidth(), mBitmap.getHeight());
!!!13624460.java!!!	onDraw(inout canvas : Canvas) : void
        @SuppressWarnings("all") // suppress dead code warning
        final boolean debug = false;
        if (debug) {
            Paint p = new Paint();
            p.setStyle(Paint.Style.FILL);
            p.setColor(0x66ffffff);
            canvas.drawRect(0, 0, getWidth(), getHeight(), p);
        }

        mHasDrawn = true;
        boolean crossFade = mCrossFadeProgress > 0 && mCrossFadeBitmap != null;
        if (crossFade) {
            int alpha = crossFade ? (int) (255 * (1 - mCrossFadeProgress)) : 255;
            mPaint.setAlpha(alpha);
        }
        canvas.drawBitmap(mBitmap, 0.0f, 0.0f, mPaint);
        if (crossFade) {
            mPaint.setAlpha((int) (255 * mCrossFadeProgress));
            canvas.save();
            float sX = (mBitmap.getWidth() * 1.0f) / mCrossFadeBitmap.getWidth();
            float sY = (mBitmap.getHeight() * 1.0f) / mCrossFadeBitmap.getHeight();
            canvas.scale(sX, sY);
            canvas.drawBitmap(mCrossFadeBitmap, 0.0f, 0.0f, mPaint);
            canvas.restore();
        }
!!!13624588.java!!!	setCrossFadeBitmap(inout crossFadeBitmap : Bitmap) : void
        mCrossFadeBitmap = crossFadeBitmap;
!!!13624716.java!!!	crossFade(in duration : int) : void
        ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
        va.setDuration(duration);
        va.setInterpolator(new DecelerateInterpolator(1.5f));
        va.addUpdateListener(new AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                mCrossFadeProgress = animation.getAnimatedFraction();
            }
        });
        va.start();
!!!13624844.java!!!	setColor(in color : int) : void
        if (mPaint == null) {
            mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
        }
        if (color != 0) {
            mPaint.setColorFilter(new PorterDuffColorFilter(color, PorterDuff.Mode.SRC_ATOP));
        } else {
            mPaint.setColorFilter(null);
        }
        invalidate();
!!!13624972.java!!!	hasDrawn() : boolean
        return mHasDrawn;
!!!13625100.java!!!	setAlpha(in alpha : float) : void
        super.setAlpha(alpha);
        mPaint.setAlpha((int) (255 * alpha));
        invalidate();
!!!13625228.java!!!	show(in touchX : int, in touchY : int) : void
        mDragLayer.addView(this);

        // Start the pick-up animation
        DragLayer.LayoutParams lp = new DragLayer.LayoutParams(0, 0);
        lp.width = mBitmap.getWidth();
        lp.height = mBitmap.getHeight();
        lp.customPosition = true;
        setLayoutParams(lp);
        setTranslationX(touchX - mRegistrationX);
        setTranslationY(touchY - mRegistrationY);
        // Post the animation to skip other expensive work happening on the first frame
        post(new Runnable() {
                public void run() {
                    mAnim.start();
                }
            });
!!!13625356.java!!!	cancelAnimation() : void
        if (mAnim != null && mAnim.isRunning()) {
            mAnim.cancel();
        }
!!!13625484.java!!!	resetLayoutParams() : void
        mOffsetX = mOffsetY = 0;
        requestLayout();
!!!13625612.java!!!	move(in touchX : int, in touchY : int) : void
        setTranslationX(touchX - mRegistrationX + (int) mOffsetX);
        setTranslationY(touchY - mRegistrationY + (int) mOffsetY);
!!!13625740.java!!!	remove() : void
        if (getParent() != null) {
            mDragLayer.removeView(DragView.this);
        }
