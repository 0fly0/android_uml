class DeferredHandler
!!!13612044.java!!!	post(inout runnable : Runnable) : void
        post(runnable, 0);
!!!13612172.java!!!	post(inout runnable : Runnable, in type : int) : void
        synchronized (mQueue) {
            mQueue.add(new Pair<Runnable, Integer>(runnable, type));
            if (mQueue.size() == 1) {
                scheduleNextLocked();
            }
        }
!!!13612300.java!!!	postIdle(in runnable : Runnable) : void
        postIdle(runnable, 0);
!!!13612428.java!!!	postIdle(in runnable : Runnable, in type : int) : void
        post(new IdleRunnable(runnable), type);
!!!13612556.java!!!	cancelRunnable(inout runnable : Runnable) : void
        synchronized (mQueue) {
            while (mQueue.remove(runnable)) { }
        }
!!!13612684.java!!!	cancelAllRunnablesOfType(in type : int) : void
        synchronized (mQueue) {
            ListIterator<Pair<Runnable, Integer>> iter = mQueue.listIterator();
            Pair<Runnable, Integer> p;
            while (iter.hasNext()) {
                p = iter.next();
                if (p.second == type) {
                    iter.remove();
                }
            }
        }
!!!13612812.java!!!	cancel() : void
        synchronized (mQueue) {
            mQueue.clear();
        }
!!!13612940.java!!!	flush() : void
        LinkedList<Pair<Runnable, Integer>> queue = new LinkedList<Pair<Runnable, Integer>>();
        synchronized (mQueue) {
            queue.addAll(mQueue);
            mQueue.clear();
        }
        for (Pair<Runnable, Integer> p : queue) {
            p.first.run();
        }
!!!13613068.java!!!	scheduleNextLocked() : void
        if (mQueue.size() > 0) {
            Pair<Runnable, Integer> p = mQueue.getFirst();
            Runnable peek = p.first;
            if (peek instanceof IdleRunnable) {
                mMessageQueue.addIdleHandler(mHandler);
            } else {
                mHandler.sendEmptyMessage(1);
            }
        }
