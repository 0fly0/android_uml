class DdmServer
!!!15474188.java!!!	registerHandler(in type : int, inout handler : ChunkHandler) : void
        if (handler == null)
            throw new NullPointerException();

        synchronized (mHandlerMap) {
            if (mHandlerMap.get(type) != null)
                throw new RuntimeException("type " + Integer.toHexString(type)
                    + " already registered");

            mHandlerMap.put(type, handler);
        }
!!!15474316.java!!!	unregisterHandler(in type : int) : ChunkHandler
        synchronized (mHandlerMap) {
            return mHandlerMap.remove(type);
        }
!!!15474444.java!!!	registrationComplete() : void
        // sync on mHandlerMap because it's convenient and makes a kind of
        // sense
        synchronized (mHandlerMap) {
            mRegistrationComplete = true;
            mHandlerMap.notifyAll();
        }
!!!15474572.java!!!	sendChunk(inout chunk : Chunk) : void
        nativeSendChunk(chunk.type, chunk.data, chunk.offset, chunk.length);
!!!15474828.java!!!	broadcast(in event : int) : void
        synchronized (mHandlerMap) {
            Collection values = mHandlerMap.values();
            Iterator iter = values.iterator();

            while (iter.hasNext()) {
                ChunkHandler handler = (ChunkHandler) iter.next();
                switch (event) {
                    case CONNECTED:
                        handler.connected();
                        break;
                    case DISCONNECTED:
                        handler.disconnected();
                        break;
                    default:
                        throw new UnsupportedOperationException();
                }
            }
        }
!!!15474956.java!!!	dispatch(in type : int, inout data : byte, in offset : int, in length : int) : Chunk
        ChunkHandler handler;

        synchronized (mHandlerMap) {
            /*
             * If registration hasn't completed, and we haven't timed out
             * waiting for it, wait a bit.
             */
            while (!mRegistrationComplete && !mRegistrationTimedOut) {
                //System.out.println("dispatch() waiting for reg");
                try {
                    mHandlerMap.wait(1000);     // 1.0 sec
                } catch (InterruptedException ie) {
                    continue;
                }

                if (!mRegistrationComplete) {
                    /* timed out, don't wait again */
                    mRegistrationTimedOut = true;
                }
            }

            handler = mHandlerMap.get(type);
        }
        //System.out.println(" dispatch cont");

        if (handler == null) {
            return null;
        }

        Chunk chunk = new Chunk(type, data, offset, length);
        return handler.handleChunk(chunk);
