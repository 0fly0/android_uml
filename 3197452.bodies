class StartupApplicationChooserDialogFragment
!!!13731212.java!!!	onCreateDialog(inout savedInstanceState : Bundle) : Dialog
        final Intent defaultIntent = BootIntentUtils.makeDefault(getActivity());

        final List<ResolveInfo> resolveInfos = getAllApps(defaultIntent);
        CharSequence[] labels = getLabels(resolveInfos, defaultIntent);
        int currentIndex = getCurrentIndex(resolveInfos, defaultIntent);

        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle(R.string.menu_startup_applications)
                .setSingleChoiceItems(labels, currentIndex, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        boolean useNone = !BootIntentUtils.isNone(defaultIntent);
                        Intent bootIntent;
                        if (which == 0) {
                            bootIntent = defaultIntent;
                        } else if (useNone && which == 1) {
                            bootIntent = BootIntentUtils.makeNone();
                        } else {
                            int base = useNone ? 2 : 1;
                            ActivityInfo info = resolveInfos.get(which - base).activityInfo;
                            bootIntent = new Intent(Intent.ACTION_MAIN)
                                    .setClassName(info.packageName, info.name);
                        }
                        BootIntentUtils.save(getActivity(), bootIntent);
                        dismiss();
                    }
                })
                .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                    }
                });

        return builder.create();
!!!13731340.java!!!	getAllApps(inout defaultIntent : Intent) : ResolveInfo
        Intent intent = new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_LAUNCHER);
        PackageManager pm = getActivity().getPackageManager();
        List<ResolveInfo> resolveInfos = pm.queryIntentActivities(intent, 0);

        // Remove info that is duplicate with default intent.
        ComponentName defaultComponent = defaultIntent.getComponent();
        if (defaultComponent != null) {
            Iterator<ResolveInfo> itr = resolveInfos.iterator();
            while (itr.hasNext()) {
                ResolveInfo info = itr.next();
                if (info.activityInfo.packageName.equals(defaultComponent.getPackageName())
                        && info.activityInfo.name.equals(defaultComponent.getClassName())) {
                    itr.remove();
                }
            }
        }

        Collections.sort(resolveInfos, new ResolveInfo.DisplayNameComparator(pm));
        return resolveInfos;
!!!13731468.java!!!	getLabels(inout resolveInfos : List<ResolveInfo>, inout defaultIntent : Intent) : CharSequence
        boolean useNone = !BootIntentUtils.isNone(defaultIntent);
        int base = useNone ? 2 : 1;
        CharSequence[] labels = new CharSequence[base + resolveInfos.size()];

        labels[0] = getActivity().getString(R.string.settings_boot_intent_default);
        if (useNone) {
            labels[1] = getActivity().getString(R.string.settings_boot_intent_none);
        }

        PackageManager pm = getActivity().getPackageManager();
        int i = base;
        for (ResolveInfo info : resolveInfos) {
            labels[i++] = info.loadLabel(pm);
        }
        return labels;
!!!13731596.java!!!	getCurrentIndex(inout resolveInfos : List<ResolveInfo>, inout defaultIntent : Intent) : int
        Intent currentIntent = BootIntentUtils.load(getActivity());
        if (currentIntent == null) {
            currentIntent = defaultIntent;
        }

        boolean useNone = !BootIntentUtils.isNone(defaultIntent);
        if (currentIntent.filterEquals(defaultIntent)) {
            return 0;
        } else if (useNone && BootIntentUtils.isNone(currentIntent)) {
            return 1;
        }

        ComponentName currentComponent = currentIntent.getComponent();
        int i = useNone ? 2 : 1;
        for (ResolveInfo info : resolveInfos) {
            if (currentComponent != null
                    && info.activityInfo.packageName.equals(currentComponent.getPackageName())
                    && info.activityInfo.name.equals(currentComponent.getClassName())) {
                return i;
            }
            i++;
        }
        return -1;
