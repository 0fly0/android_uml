class OldBufferedWriterTest
!!!2641819.java!!!	test_ConstructorLjava_io_Writer() : void
        bw = new BufferedWriter(sw);
        try {
            bw.write("Hi", 0, 2);
            assertTrue("Test 1: Buffering failed.", sw.toString().equals(""));
            bw.flush();
            assertEquals("Test 2: Incorrect value;", "Hi", sw.toString());
        } catch (IOException e) {
            fail("Test 3: Unexpected IOException.");
        }
!!!2641947.java!!!	test_ConstructorLjava_io_WriterI() : void
        try {
            bw = new BufferedWriter(sw, 0);
            fail("Test 1: IllegalArgumentException expected.");
        } catch (IllegalArgumentException expected) {
            // Expected.
        }

        bw = new BufferedWriter(sw, 10);
        try {
            bw.write("Hi", 0, 2);
            assertTrue("Test 2: Buffering failed.", sw.toString().equals(""));
            bw.flush();
            assertEquals("Test 3: Incorrect value;", "Hi", sw.toString());
        } catch (IOException e) {
            fail("Test 4: Unexpected IOException.");
        }
!!!2642075.java!!!	test_close() : void
        // Test for method void java.io.BufferedWriter.close()
        try {
            bw.close();
            bw.write(testString);
            fail("Test 1: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        assertFalse("Test 2: Write after close.", sw.toString().equals(testString));

        bw = new BufferedWriter(ssw);
        try {
            bw.close();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2642203.java!!!	test_flush() : void
        bw.write("This should not cause a flush");
        assertTrue("Test 1: Bytes written without flush.",
                sw.toString().equals(""));
        bw.flush();
        assertEquals("Test 2: Bytes not flushed.",
                "This should not cause a flush", sw.toString());

        bw.close();
        bw = new BufferedWriter(ssw);
        try {
            bw.flush();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2642331.java!!!	test_newLine() : void
        String separator = System.getProperty("line.separator");
        bw.write("Hello");
        bw.newLine();
        bw.write("World");
        bw.flush();
        assertTrue("Test 1: Incorrect string written: " + sw.toString(),
                sw.toString().equals("Hello" + separator + "World"));

        bw.close();
        bw = new BufferedWriter(ssw, 1);
        try {
            bw.newLine();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2642459.java!!!	test_write$CII() : void
        // Test for method void java.io.BufferedWriter.write(char [], int, int)
        try {
            char[] testCharArray = testString.toCharArray();
            bw.write(testCharArray, 500, 1000);
            bw.flush();
            assertTrue("Incorrect string written", sw.toString().equals(
                    testString.substring(500, 1500)));

            int idx = sw.toString().length();
            bw.write(testCharArray, 0, testCharArray.length);
            assertEquals(idx + testCharArray.length, sw.toString().length());
            bw.write(testCharArray, 0, 0);
            assertEquals(idx + testCharArray.length, sw.toString().length());
            bw.write(testCharArray, testCharArray.length, 0);
            assertEquals(idx + testCharArray.length, sw.toString().length());
        } catch (Exception e) {
            fail("Exception during write test");
        }

!!!2642587.java!!!	test_write$CII_Exception() : void
        char[] nullCharArray = null;
        char[] charArray = testString.toCharArray();

        try {
            bw.write(nullCharArray, 0, 1);
            fail("Test 1: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }

        try {
            bw.write(charArray, -1, 0);
            fail("Test 2: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            bw.write(charArray, 0, -1);
            fail("Test 3: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            bw.write(charArray, charArray.length + 1, 0);
            fail("Test 4: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            bw.write(charArray, charArray.length, 1);
            fail("Test 5: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            bw.write(charArray, 0, charArray.length + 1);
            fail("Test 6: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            bw.write(charArray, 1, charArray.length);
            fail("Test 7: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        bw.close();

        try {
            bw.write(charArray, 0, 1);
            fail("Test 7: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }

        bw = new BufferedWriter(ssw, charArray.length / 2);
        try {
            bw.write(charArray, 0, charArray.length);
            fail("Test 8: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2642715.java!!!	test_writeI() : void
        bw.write('T');
        assertTrue("Test 1: Char written without flush.",
                sw.toString().equals(""));
        bw.flush();
        assertEquals("Test 2: Incorrect char written;",
                "T", sw.toString());

        bw.close();
        try {
            bw.write('E');
            fail("Test 3: IOException expected since the target writer is closed.");
        } catch (IOException e) {
            // Expected.
        }

        // IOException should be thrown when the buffer is full and data is
        // written out to the target writer.
        bw = new BufferedWriter(ssw, 1);
        bw.write('S');
        try {
            bw.write('T');
            fail("Test 4: IOException expected since the target writer throws it.");
        } catch (IOException e) {
            // Expected.
        }
!!!2642843.java!!!	test_writeLjava_lang_StringII() : void
        // Test for method void java.io.BufferedWriter.write(java.lang.String,
        // int, int)
        try {
            bw.write(testString);
            bw.flush();
            assertTrue("Incorrect string written", sw.toString().equals(
                    testString));
        } catch (Exception e) {
            fail("Exception during write test");
        }
!!!2642971.java!!!	test_writeLjava_lang_StringII_Exception() : void

        bw.write((String) null , -1, -1);
        bw.write((String) null , -1, 0);
        bw.write((String) null , 0 , -1);
        bw.write((String) null , 0 , 0);

        try {
            bw.write((String) null, 0, 1);
            fail("Test 1: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }

        try {
            bw.write(testString, -1, 1);
            fail("Test 2: StringIndexOutOfBoundsException expected.");
        } catch (StringIndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            bw.write(testString, 1, testString.length());
            fail("Test 3: StringIndexOutOfBoundsException expected.");
        } catch (StringIndexOutOfBoundsException e) {
            // Expected.
        }

        bw.close();

        try {
            bw.write(testString, 0, 1);
            fail("Test 4: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }

        bw = new BufferedWriter(ssw, testString.length() / 2);
        try {
            bw.write(testString, 0, testString.length());
            fail("Test 5: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2643099.java!!!	setUp() : void
        sw = new Support_StringWriter();
        ssw = new Support_ASimpleWriter(true);
        bw = new BufferedWriter(sw, 500);
!!!2643227.java!!!	tearDown() : void
        ssw.throwExceptionOnNextUse = false;
        try {
            bw.close();
        } catch (Exception e) {
        }
