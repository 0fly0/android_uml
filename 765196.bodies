class UserRouteInfo
!!!2845324.java!!!	UserRouteInfo(inout category : RouteCategory)
            super(category);
            mSupportedTypes = ROUTE_TYPE_USER;
            mPlaybackType = PLAYBACK_TYPE_REMOTE;
            mVolumeHandling = PLAYBACK_VOLUME_FIXED;
!!!2845452.java!!!	setName(inout name : CharSequence) : void
            mName = name;
            routeUpdated();
!!!2845580.java!!!	setName(in resId : int) : void
            mNameResId = resId;
            mName = null;
            routeUpdated();
!!!2845708.java!!!	setStatus(inout status : CharSequence) : void
            setStatusInt(status);
!!!2845836.java!!!	setRemoteControlClient(inout rcc : RemoteControlClient) : void
            mRcc = rcc;
            updatePlaybackInfoOnRcc();
!!!2845964.java!!!	getRemoteControlClient() : RemoteControlClient
            return mRcc;
!!!2846092.java!!!	setIconDrawable(inout icon : Drawable) : void
            mIcon = icon;
!!!2846220.java!!!	setIconResource(in resId : int) : void
            setIconDrawable(sStatic.mResources.getDrawable(resId));
!!!2846348.java!!!	setVolumeCallback(inout vcb : VolumeCallback) : void
            mVcb = new VolumeCallbackInfo(vcb, this);
!!!2846476.java!!!	setPlaybackType(in type : int) : void
            if (mPlaybackType != type) {
                mPlaybackType = type;
                setPlaybackInfoOnRcc(RemoteControlClient.PLAYBACKINFO_PLAYBACK_TYPE, type);
            }
!!!2846604.java!!!	setVolumeHandling(in volumeHandling : int) : void
            if (mVolumeHandling != volumeHandling) {
                mVolumeHandling = volumeHandling;
                setPlaybackInfoOnRcc(
                        RemoteControlClient.PLAYBACKINFO_VOLUME_HANDLING, volumeHandling);
            }
!!!2846732.java!!!	setVolume(in volume : int) : void
            volume = Math.max(0, Math.min(volume, getVolumeMax()));
            if (mVolume != volume) {
                mVolume = volume;
                setPlaybackInfoOnRcc(RemoteControlClient.PLAYBACKINFO_VOLUME, volume);
                dispatchRouteVolumeChanged(this);
                if (mGroup != null) {
                    mGroup.memberVolumeChanged(this);
                }
            }
!!!2846860.java!!!	requestSetVolume(in volume : int) : void
            if (mVolumeHandling == PLAYBACK_VOLUME_VARIABLE) {
                if (mVcb == null) {
                    Log.e(TAG, "Cannot requestSetVolume on user route - no volume callback set");
                    return;
                }
                mVcb.vcb.onVolumeSetRequest(this, volume);
            }
!!!2846988.java!!!	requestUpdateVolume(in direction : int) : void
            if (mVolumeHandling == PLAYBACK_VOLUME_VARIABLE) {
                if (mVcb == null) {
                    Log.e(TAG, "Cannot requestChangeVolume on user route - no volumec callback set");
                    return;
                }
                mVcb.vcb.onVolumeUpdateRequest(this, direction);
            }
!!!2847116.java!!!	setVolumeMax(in volumeMax : int) : void
            if (mVolumeMax != volumeMax) {
                mVolumeMax = volumeMax;
                setPlaybackInfoOnRcc(RemoteControlClient.PLAYBACKINFO_VOLUME_MAX, volumeMax);
            }
!!!2847244.java!!!	setPlaybackStream(in stream : int) : void
            if (mPlaybackStream != stream) {
                mPlaybackStream = stream;
                setPlaybackInfoOnRcc(RemoteControlClient.PLAYBACKINFO_USES_STREAM, stream);
            }
!!!2847372.java!!!	updatePlaybackInfoOnRcc() : void
            if ((mRcc != null) && (mRcc.getRcseId() != RemoteControlClient.RCSE_ID_UNREGISTERED)) {
                mRcc.setPlaybackInformation(
                        RemoteControlClient.PLAYBACKINFO_VOLUME_MAX, mVolumeMax);
                mRcc.setPlaybackInformation(
                        RemoteControlClient.PLAYBACKINFO_VOLUME, mVolume);
                mRcc.setPlaybackInformation(
                        RemoteControlClient.PLAYBACKINFO_VOLUME_HANDLING, mVolumeHandling);
                mRcc.setPlaybackInformation(
                        RemoteControlClient.PLAYBACKINFO_USES_STREAM, mPlaybackStream);
                mRcc.setPlaybackInformation(
                        RemoteControlClient.PLAYBACKINFO_PLAYBACK_TYPE, mPlaybackType);
                // let AudioService know whom to call when remote volume needs to be updated
                try {
                    sStatic.mAudioService.registerRemoteVolumeObserverForRcc(
                            mRcc.getRcseId() /* rccId */, mRemoteVolObserver /* rvo */);
                } catch (RemoteException e) {
                    Log.e(TAG, "Error registering remote volume observer", e);
                }
            }
!!!2847500.java!!!	setPlaybackInfoOnRcc(in what : int, in value : int) : void
            if (mRcc != null) {
                mRcc.setPlaybackInformation(what, value);
            }
