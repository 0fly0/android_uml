class BluetoothTetheringDataTracker
!!!3029132.java!!!	BluetoothTetheringDataTracker()
        mNetworkInfo = new NetworkInfo(ConnectivityManager.TYPE_BLUETOOTH, 0, NETWORKTYPE, "");
        mLinkProperties = new LinkProperties();
        mLinkCapabilities = new LinkCapabilities();

        mNetworkInfo.setIsAvailable(false);
        setTeardownRequested(false);
!!!3029260.java!!!	getInstance() : BluetoothTetheringDataTracker
        if (sInstance == null) sInstance = new BluetoothTetheringDataTracker();
        return sInstance;
!!!3029388.java!!!	Clone() : Object
        throw new CloneNotSupportedException();
!!!3029516.java!!!	setTeardownRequested(inout isRequested : boolean) : void
        mTeardownRequested.set(isRequested);
!!!3029644.java!!!	isTeardownRequested() : boolean
        return mTeardownRequested.get();
!!!3029772.java!!!	startMonitoring(inout context : Context, inout target : Handler) : void
        if (DBG) Log.d(TAG, "startMonitoring: target: " + target);
        mContext = context;
        mCsHandler = target;
        if (VDBG) Log.d(TAG, "startMonitoring: mCsHandler: " + mCsHandler);
        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        if (adapter != null) {
            adapter.getProfileProxy(mContext, mProfileServiceListener, BluetoothProfile.PAN);
        }
!!!3029900.java!!!	teardown() : boolean
        mTeardownRequested.set(true);
        if (mBluetoothPan != null) {
            for (BluetoothDevice device: mBluetoothPan.getConnectedDevices()) {
                mBluetoothPan.disconnect(device);
            }
        }
        return true;
!!!3030028.java!!!	captivePortalCheckComplete() : void
        // not implemented
!!!3030156.java!!!	reconnect() : boolean
        mTeardownRequested.set(false);
        //Ignore
        return true;
!!!3030284.java!!!	setRadio(inout turnOn : boolean) : boolean
        return true;
!!!3030412.java!!!	isAvailable() : boolean
        return mNetworkInfo.isAvailable();
!!!3030540.java!!!	startUsingNetworkFeature(in feature : String, in callingPid : int, in callingUid : int) : int
        return -1;
!!!3030668.java!!!	stopUsingNetworkFeature(in feature : String, in callingPid : int, in callingUid : int) : int
        return -1;
!!!3030796.java!!!	setUserDataEnable(inout enabled : boolean) : void
        Log.w(TAG, "ignoring setUserDataEnable(" + enabled + ")");
!!!3030924.java!!!	setPolicyDataEnable(inout enabled : boolean) : void
        Log.w(TAG, "ignoring setPolicyDataEnable(" + enabled + ")");
!!!3031052.java!!!	isPrivateDnsRouteSet() : boolean
        return mPrivateDnsRouteSet.get();
!!!3031180.java!!!	privateDnsRouteSet(inout enabled : boolean) : void
        mPrivateDnsRouteSet.set(enabled);
!!!3031308.java!!!	getNetworkInfo() : NetworkInfo
        return mNetworkInfo;
!!!3031436.java!!!	getLinkProperties() : LinkProperties
        return new LinkProperties(mLinkProperties);
!!!3031564.java!!!	getLinkCapabilities() : LinkCapabilities
        return new LinkCapabilities(mLinkCapabilities);
!!!3031692.java!!!	getDefaultGatewayAddr() : int
        return mDefaultGatewayAddr.get();
!!!3031820.java!!!	isDefaultRouteSet() : boolean
        return mDefaultRouteSet.get();
!!!3031948.java!!!	defaultRouteSet(inout enabled : boolean) : void
        mDefaultRouteSet.set(enabled);
!!!3032076.java!!!	getTcpBufferSizesPropName() : String
        return "net.tcp.buffersize.wifi";
!!!3032204.java!!!	countPrefixLength(inout mask : byte) : short
        short count = 0;
        for (byte b : mask) {
            for (int i = 0; i < 8; ++i) {
                if ((b & (1 << i)) != 0) {
                    ++count;
                }
            }
        }
        return count;
!!!3032332.java!!!	readLinkProperty(in iface : String) : boolean
        String DhcpPrefix = "dhcp." + iface + ".";
        String ip = SystemProperties.get(DhcpPrefix + "ipaddress");
        String dns1 = SystemProperties.get(DhcpPrefix + "dns1");
        String dns2 = SystemProperties.get(DhcpPrefix + "dns2");
        String gateway = SystemProperties.get(DhcpPrefix + "gateway");
        String mask = SystemProperties.get(DhcpPrefix + "mask");
        if(ip.isEmpty() || gateway.isEmpty()) {
            Log.e(TAG, "readLinkProperty, ip: " +  ip + ", gateway: " + gateway + ", can not be empty");
            return false;
        }
        int PrefixLen = countPrefixLength(NetworkUtils.numericToInetAddress(mask).getAddress());
        mLinkProperties.addLinkAddress(new LinkAddress(NetworkUtils.numericToInetAddress(ip), PrefixLen));
        RouteInfo ri = new RouteInfo(NetworkUtils.numericToInetAddress(gateway));
        mLinkProperties.addRoute(ri);
        if(!dns1.isEmpty())
            mLinkProperties.addDns(NetworkUtils.numericToInetAddress(dns1));
        if(!dns2.isEmpty())
            mLinkProperties.addDns(NetworkUtils.numericToInetAddress(dns2));
        mLinkProperties.setInterfaceName(iface);
        return true;
!!!3032460.java!!!	startReverseTether(in iface : String) : void
        mIface = iface;
        if (DBG) Log.d(TAG, "startReverseTether mCsHandler: " + mCsHandler);
         mDhcpThread = new Thread(new Runnable() {
            public void run() {
                //TODO(): Add callbacks for failure and success case.
                //Currently this thread runs independently.
                if (DBG) Log.d(TAG, "startReverseTether mCsHandler: " + mCsHandler);
                String DhcpResultName = "dhcp." + mIface + ".result";;
                String result = "";
                if (VDBG) Log.d(TAG, "waiting for change of sys prop dhcp result: " + DhcpResultName);
                for(int i = 0; i < 30*5; i++) {
                    try { Thread.sleep(200); } catch (InterruptedException ie) { return;}
                    result = SystemProperties.get(DhcpResultName);
                    if (VDBG) Log.d(TAG, "read " + DhcpResultName + ": " + result);
                    if(result.equals("failed")) {
                        Log.e(TAG, "startReverseTether, failed to start dhcp service");
                        return;
                    }
                    if(result.equals("ok")) {
                        if (VDBG) Log.d(TAG, "startReverseTether, dhcp resut: " + result);
                        if(readLinkProperty(mIface)) {

                            mNetworkInfo.setIsAvailable(true);
                            mNetworkInfo.setDetailedState(DetailedState.CONNECTED, null, null);

                            if (VDBG) Log.d(TAG, "startReverseTether mCsHandler: " + mCsHandler);
                            if(mCsHandler != null) {
                                Message msg = mCsHandler.obtainMessage(EVENT_CONFIGURATION_CHANGED, mNetworkInfo);
                                msg.sendToTarget();

                                msg = mCsHandler.obtainMessage(EVENT_STATE_CHANGED, mNetworkInfo);
                                msg.sendToTarget();
                            }
                        }
                        return;
                    }
                }
                Log.e(TAG, "startReverseTether, dhcp failed, resut: " + result);
            }
        });
        mDhcpThread.start();
!!!3032588.java!!!	stopReverseTether() : void
        //NetworkUtils.stopDhcp(iface);
        if(mDhcpThread != null && mDhcpThread.isAlive()) {
            mDhcpThread.interrupt();
            try { mDhcpThread.join(); } catch (InterruptedException ie) { return; }
        }
        mLinkProperties.clear();
        mNetworkInfo.setIsAvailable(false);
        mNetworkInfo.setDetailedState(DetailedState.DISCONNECTED, null, null);

        Message msg = mCsHandler.obtainMessage(EVENT_CONFIGURATION_CHANGED, mNetworkInfo);
        msg.sendToTarget();

        msg = mCsHandler.obtainMessage(EVENT_STATE_CHANGED, mNetworkInfo);
        msg.sendToTarget();
!!!3032716.java!!!	setDependencyMet(inout met : boolean) : void
        // not supported on this network
