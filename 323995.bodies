class JarURLConnectionImpl
!!!2122139.java!!!	JarURLConnectionImpl(inout url : URL)
        super(url);
        jarFileURL = getJarFileURL();
        jarFileURLConnection = jarFileURL.openConnection();
!!!2122267.java!!!	connect() : void
        if (!connected) {
            findJarFile(); // ensure the file can be found
            findJarEntry(); // ensure the entry, if any, can be found
            connected = true;
        }
!!!2122395.java!!!	getJarFile() : JarFile
        connect();
        return jarFile;
!!!2122523.java!!!	findJarFile() : void
        JarFile jar = null;
        if (getUseCaches()) {
            synchronized (jarCache) {
                jarFile = jarCache.get(jarFileURL);
            }
            if (jarFile == null) {
                jar = openJarFile();
                synchronized (jarCache) {
                    jarFile = jarCache.get(jarFileURL);
                    if (jarFile == null) {
                        jarCache.put(jarFileURL, jar);
                        jarFile = jar;
                    } else {
                        jar.close();
                    }
                }
            }
        } else {
            jarFile = openJarFile();
        }

        if (jarFile == null) {
            throw new IOException();
        }
!!!2122651.java!!!	openJarFile() : JarFile
        if (jarFileURL.getProtocol().equals("file")) {
            String decodedFile = UriCodec.decode(jarFileURL.getFile());
            return new JarFile(new File(decodedFile), true, ZipFile.OPEN_READ);
        } else {
            final InputStream is = jarFileURL.openConnection().getInputStream();
            try {
                FileOutputStream fos = null;
                JarFile result = null;
                try {
                    File tempJar = File.createTempFile("hyjar_", ".tmp", null);
                    tempJar.deleteOnExit();
                    fos = new FileOutputStream(tempJar);
                    byte[] buf = new byte[4096];
                    int nbytes = 0;
                    while ((nbytes = is.read(buf)) > -1) {
                        fos.write(buf, 0, nbytes);
                    }
                    fos.close();
                    return new JarFile(tempJar, true, ZipFile.OPEN_READ | ZipFile.OPEN_DELETE);
                } catch (IOException e) {
                    return null;
                } finally {
                    if (fos != null) {
                        try {
                            fos.close();
                        } catch (IOException ex) {
                            return null;
                        }
                    }
                }
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        }
!!!2122779.java!!!	getJarEntry() : JarEntry
        connect();
        return jarEntry;

!!!2122907.java!!!	findJarEntry() : void
        if (getEntryName() == null) {
            return;
        }
        jarEntry = jarFile.getJarEntry(getEntryName());
        if (jarEntry == null) {
            throw new FileNotFoundException(getEntryName());
        }
!!!2123035.java!!!	getInputStream() : InputStream
        if (closed) {
            throw new IllegalStateException("JarURLConnection InputStream has been closed");
        }
        connect();
        if (jarInput != null) {
            return jarInput;
        }
        if (jarEntry == null) {
            throw new IOException("Jar entry not specified");
        }
        return jarInput = new JarURLConnectionInputStream(jarFile
                .getInputStream(jarEntry), jarFile);
!!!2123163.java!!!	getContentType() : String
        if (url.getFile().endsWith("!/")) {
            // the type for jar file itself is always "x-java/jar"
            return "x-java/jar";
        }
        String cType = null;
        String entryName = getEntryName();

        if (entryName != null) {
            // if there is an Jar Entry, get the content type from the name
            cType = guessContentTypeFromName(entryName);
        } else {
            try {
                connect();
                cType = jarFileURLConnection.getContentType();
            } catch (IOException ioe) {
                // Ignore
            }
        }
        if (cType == null) {
            cType = "content/unknown";
        }
        return cType;
!!!2123291.java!!!	getContentLength() : int
        try {
            connect();
            if (jarEntry == null) {
                return jarFileURLConnection.getContentLength();
            }
            return (int) getJarEntry().getSize();
        } catch (IOException e) {
            // Ignored
        }
        return -1;
!!!2123419.java!!!	getContent() : Object
        connect();
        // if there is no Jar Entry, return a JarFile
        if (jarEntry == null) {
            return jarFile;
        }
        return super.getContent();
!!!2123547.java!!!	getPermission() : Permission
        return jarFileURLConnection.getPermission();
!!!2123675.java!!!	getUseCaches() : boolean
        return jarFileURLConnection.getUseCaches();
!!!2123803.java!!!	setUseCaches(inout usecaches : boolean) : void
        jarFileURLConnection.setUseCaches(usecaches);
!!!2123931.java!!!	getDefaultUseCaches() : boolean
        return jarFileURLConnection.getDefaultUseCaches();
!!!2124059.java!!!	setDefaultUseCaches(inout defaultusecaches : boolean) : void
        jarFileURLConnection.setDefaultUseCaches(defaultusecaches);
!!!2124187.java!!!	closeCachedFiles() : void
        Set<Map.Entry<URL, JarFile>> s = jarCache.entrySet();
        synchronized (jarCache) {
            Iterator<Map.Entry<URL, JarFile>> i = s.iterator();
            while (i.hasNext()) {
                try {
                    ZipFile zip = i.next().getValue();
                    if (zip != null) {
                        zip.close();
                    }
                } catch (IOException e) {
                    // Ignored
                }
            }
        }
