class Throwable
!!!159259.java!!!	Throwable()
        fillInStackTrace();
!!!159387.java!!!	Throwable(inout detailMessage : String)
        this();
        this.detailMessage = detailMessage;
!!!159515.java!!!	Throwable(inout detailMessage : String, inout throwable : Throwable)
        this();
        this.detailMessage = detailMessage;
        cause = throwable;
!!!159643.java!!!	Throwable(inout throwable : Throwable)
        this();
        this.detailMessage = throwable == null ? null : throwable.toString();
        cause = throwable;
!!!159771.java!!!	Throwable(inout detailMessage : String, inout throwable : Throwable, inout enableSuppression : boolean)
        this(detailMessage, throwable);
        if (!enableSuppression) {
            this.suppressedExceptions = null;
        }
!!!159899.java!!!	fillInStackTrace() : Throwable
        // Fill in the intermediate representation
        stackState = nativeFillInStackTrace();
        // Mark the full representation as empty
        stackTrace = null;
        return this;
!!!160027.java!!!	getMessage() : String
        return detailMessage;
!!!160155.java!!!	getLocalizedMessage() : String
        return getMessage();
!!!160283.java!!!	getStackTrace() : StackTraceElement
        return getInternalStackTrace().clone();
!!!160411.java!!!	setStackTrace(inout trace : StackTraceElement) : void
        StackTraceElement[] newTrace = trace.clone();
        for (int i = 0; i < newTrace.length; i++) {
            if (newTrace[i] == null) {
                throw new NullPointerException("trace[" + i + "] == null");
            }
        }
        stackTrace = newTrace;
!!!160539.java!!!	printStackTrace() : void
        printStackTrace(System.err);
!!!160667.java!!!	countDuplicates(inout currentStack : StackTraceElement, inout parentStack : StackTraceElement) : int
        int duplicates = 0;
        int parentIndex = parentStack.length;
        for (int i = currentStack.length; --i >= 0 && --parentIndex >= 0;) {
            StackTraceElement parentFrame = parentStack[parentIndex];
            if (parentFrame.equals(currentStack[i])) {
                duplicates++;
            } else {
                break;
            }
        }
        return duplicates;
!!!160795.java!!!	getInternalStackTrace() : StackTraceElement
        if (stackTrace == null) {
            stackTrace = nativeGetStackTrace(stackState);
            stackState = null; // Clean up intermediate representation
        }
        return stackTrace;
!!!160923.java!!!	printStackTrace(inout err : PrintStream) : void
        try {
            printStackTrace(err, "", null);
        } catch (IOException e) {
            // Appendable.append throws IOException but PrintStream.append doesn't.
            throw new AssertionError();
        }
!!!161051.java!!!	printStackTrace(inout err : PrintWriter) : void
        try {
            printStackTrace(err, "", null);
        } catch (IOException e) {
            // Appendable.append throws IOException, but PrintWriter.append doesn't.
            throw new AssertionError();
        }
!!!161179.java!!!	printStackTrace(inout err : Appendable, inout indent : String, inout parentStack : StackTraceElement) : void
        err.append(toString());
        err.append("\n");

        StackTraceElement[] stack = getInternalStackTrace();
        if (stack != null) {
            int duplicates = parentStack != null ? countDuplicates(stack, parentStack) : 0;
            for (int i = 0; i < stack.length - duplicates; i++) {
                err.append(indent);
                err.append("\tat ");
                err.append(stack[i].toString());
                err.append("\n");
            }

            if (duplicates > 0) {
                err.append(indent);
                err.append("\t... ");
                err.append(Integer.toString(duplicates));
                err.append(" more\n");
            }
        }

        // Print suppressed exceptions indented one level deeper.
        if (suppressedExceptions != null) {
            for (Throwable throwable : suppressedExceptions) {
                err.append(indent);
                err.append("\tSuppressed: ");
                throwable.printStackTrace(err, indent + "\t", stack);
            }
        }

        Throwable cause = getCause();
        if (cause != null) {
            err.append(indent);
            err.append("Caused by: ");
            cause.printStackTrace(err, indent, stack);
        }
!!!161307.java!!!	toString() : String
        String msg = getLocalizedMessage();
        String name = getClass().getName();
        if (msg == null) {
            return name;
        }
        return name + ": " + msg;
!!!161435.java!!!	initCause(inout throwable : Throwable) : Throwable
        if (cause != this) {
            throw new IllegalStateException("Cause already initialized");
        }
        if (throwable == this) {
            throw new IllegalArgumentException("throwable == this");
        }
        cause = throwable;
        return this;
!!!161563.java!!!	getCause() : Throwable
        if (cause == this) {
            return null;
        }
        return cause;
!!!161691.java!!!	addSuppressed(inout throwable : Throwable) : void
        if (throwable == this) {
            throw new IllegalArgumentException("throwable == this");
        }
        if (throwable == null) {
            throw new NullPointerException("throwable == null");
        }
        if (suppressedExceptions != null) {
            // suppressed exceptions are enabled
            if (suppressedExceptions.isEmpty()) {
                // ensure we have somewhere to place suppressed exceptions
                suppressedExceptions = new ArrayList<Throwable>(1);
            }
            suppressedExceptions.add(throwable);
        }
!!!161819.java!!!	getSuppressed() : Throwable
        return (suppressedExceptions != null && !suppressedExceptions.isEmpty())
                ? suppressedExceptions.toArray(new Throwable[suppressedExceptions.size()])
                : EmptyArray.THROWABLE;
!!!161947.java!!!	writeObject(inout out : ObjectOutputStream) : void
        // ensure the stackTrace field is initialized
        getInternalStackTrace();
        out.defaultWriteObject();
!!!162075.java!!!	readObject(inout in : ObjectInputStream) : void
        in.defaultReadObject();

        if (suppressedExceptions != null) {
            // the deserialized list may be unmodifiable, so just create a mutable copy
            suppressedExceptions = new ArrayList<Throwable>(suppressedExceptions);
        }
