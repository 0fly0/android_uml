class ConnectionHandler
!!!9087372.java!!!	ConnectionHandler(in remoteMachineIp : String, in port : int, inout fromSocket : Socket, inout toSocket : Socket)
        mRemoteMachineIpAddress = remoteMachineIp;
        mPort = port;

        mFromSocket = fromSocket;
        mToSocket = toSocket;

        try {
            mFromSocketInputStream = mFromSocket.getInputStream();
            mToSocketInputStream = mToSocket.getInputStream();
            mFromSocketOutputStream = mFromSocket.getOutputStream();
            mToSocketOutputStream = mToSocket.getOutputStream();
            AdbUtils.configureConnection(mToSocketInputStream, mToSocketOutputStream,
                    mRemoteMachineIpAddress, mPort);
        } catch (IOException e) {
            Log.e(LOG_TAG, "Unable to start ConnectionHandler", e);
            closeStreams();
            throw e;
        }

        mFromToPipe = new SocketPipeThread(mFromSocketInputStream, mToSocketOutputStream);
        mToFromPipe = new SocketPipeThread(mToSocketInputStream, mFromSocketOutputStream);
!!!9087500.java!!!	registerOnConnectionHandlerFinishedCallback(inout callback : OnFinishedCallback) : void
        mOnFinishedCallback = callback;
!!!9087628.java!!!	closeStreams() : void
        FsUtils.closeInputStream(mFromSocketInputStream);
        FsUtils.closeInputStream(mToSocketInputStream);
        FsUtils.closeOutputStream(mFromSocketOutputStream);
        FsUtils.closeOutputStream(mToSocketOutputStream);
!!!9087756.java!!!	start() : void
        /** We have 2 threads running, one for each pipe, that we start here. */
        mThreadsRunning = 2;
        mFromToPipe.start();
        mToFromPipe.start();
!!!9087884.java!!!	stop() : void
        shutdown(mFromSocket);
        shutdown(mToSocket);
!!!9088012.java!!!	shutdown(inout socket : Socket) : void
        synchronized (mFromToPipe) {
            synchronized (mToFromPipe) {
                /** This will stop the while loop in the run method */
                try {
                    if (!socket.isInputShutdown()) {
                        socket.shutdownInput();
                    }
                } catch (IOException e) {
                    Log.e(LOG_TAG, "mFromToPipe=" + mFromToPipe + " mToFromPipe=" + mToFromPipe, e);
                }
                try {
                    if (!socket.isOutputShutdown()) {
                        socket.shutdownOutput();
                    }
                } catch (IOException e) {
                    Log.e(LOG_TAG, "mFromToPipe=" + mFromToPipe + " mToFromPipe=" + mToFromPipe, e);
                }
                try {
                    if (!socket.isClosed()) {
                        socket.close();
                    }
                } catch (IOException e) {
                    Log.e(LOG_TAG, "mFromToPipe=" + mFromToPipe + " mToFromPipe=" + mToFromPipe, e);
                }
            }
        }
