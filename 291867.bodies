class SecretKeySpec
!!!1814555.java!!!	SecretKeySpec(inout key : byte, inout algorithm : String)
        if (key == null) {
            throw new IllegalArgumentException("key == null");
        }
        if (key.length == 0) {
            throw new IllegalArgumentException("key.length == 0");
        }
        if (algorithm == null) {
            throw new IllegalArgumentException("algorithm == null");
        }

        this.algorithm = algorithm;
        this.key = new byte[key.length];
        System.arraycopy(key, 0, this.key, 0, key.length);
!!!1814683.java!!!	SecretKeySpec(inout key : byte, in offset : int, in len : int, inout algorithm : String)
        if (key == null) {
            throw new IllegalArgumentException("key == null");
        }
        if (key.length == 0) {
            throw new IllegalArgumentException("key.length == 0");
        }
        if (len < 0 || offset < 0) {
            throw new ArrayIndexOutOfBoundsException("len < 0 || offset < 0");
        }
        if (key.length - offset < len) {
            throw new IllegalArgumentException("key too short");
        }
        if (algorithm == null) {
            throw new IllegalArgumentException("algorithm == null");
        }
        this.algorithm = algorithm;
        this.key = new byte[len];
        System.arraycopy(key, offset, this.key, 0, len);
!!!1814811.java!!!	getAlgorithm() : String
        return algorithm;
!!!1814939.java!!!	getFormat() : String
        return "RAW";
!!!1815067.java!!!	getEncoded() : byte
        byte[] result = new byte[key.length];
        System.arraycopy(key, 0, result, 0, key.length);
        return result;
!!!1815195.java!!!	hashCode() : int
        int result = algorithm.length();
        for (byte element : key) {
            result += element;
        }
        return result;
!!!1815323.java!!!	equals(inout obj : Object) : boolean
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof SecretKeySpec)) {
            return false;
        }
        SecretKeySpec ks = (SecretKeySpec) obj;
        return (algorithm.equalsIgnoreCase(ks.algorithm))
            && (Arrays.equals(key, ks.key));
