class WorkerQueue
!!!10108428.cpp!!!	obtain_record(inout p : void, in delay_in_ms : int) : Record
    struct Record *r;
    if (free_list_.size() == 0) {
        r = new Record();
        DBG("WorkerQueue::obtain_record new r=%p", r);
    } else {
        r = free_list_.front();
        DBG("WorkerQueue::obtain_record reuse r=%p", r);
        free_list_.pop_front();
    }
    r->p = p;
    if (delay_in_ms != 0) {
        r->time = android::elapsedRealtime() + delay_in_ms;
    } else {
        r->time = 0;
    }
    return r;
!!!10108556.cpp!!!	release_record(inout r : Record) : void
    DBG("WorkerQueue::release_record r=%p", r);
    free_list_.push_front(r);
!!!10108684.cpp!!!	WorkerQueue()
    DBG("WorkerQueue::WorkerQueue E");
    wqt_ = new WorkerQueueThread();
    DBG("WorkerQueue::WorkerQueue X");
!!!10108812.cpp!!!	~WorkerQueue()
    DBG("WorkerQueue::~WorkerQueue E");
    Stop();

    Record *r;
    pthread_mutex_lock(&wqt_->mutex_);
    while(free_list_.size() != 0) {
        r = free_list_.front();
        free_list_.pop_front();
        DBG("WorkerQueue::~WorkerQueue delete free_list_ r=%p", r);
        delete r;
    }
    while(delayed_q_.size() != 0) {
        r = delayed_q_.top();
        delayed_q_.pop();
        DBG("WorkerQueue::~WorkerQueue delete delayed_q_ r=%p", r);
        delete r;
    }
    pthread_mutex_unlock(&wqt_->mutex_);

    delete wqt_;
    DBG("WorkerQueue::~WorkerQueue X");
!!!10108940.cpp!!!	Run() : int
    return wqt_->Run(this);
!!!10109068.cpp!!!	Stop() : void
    wqt_->Stop();
!!!10109196.cpp!!!	Add(inout p : void) : void
    DBG("WorkerQueue::Add E:");
    pthread_mutex_lock(&wqt_->mutex_);
    struct Record *r = obtain_record(p, 0);
    q_.push_back(r);
    if (q_.size() == 1) {
        pthread_cond_signal(&wqt_->cond_);
    }
    pthread_mutex_unlock(&wqt_->mutex_);
    DBG("WorkerQueue::Add X:");
!!!10109324.cpp!!!	AddDelayed(inout p : void, in delay_in_ms : int) : void
    DBG("WorkerQueue::AddDelayed E:");
    if (delay_in_ms <= 0) {
        Add(p);
    } else {
        pthread_mutex_lock(&wqt_->mutex_);
        struct Record *r = obtain_record(p, delay_in_ms);
        delayed_q_.push(r);
#ifdef WORKER_DEBUG
        int64_t now = android::elapsedRealtime();
        DBG("WorkerQueue::AddDelayed"
            " p=%p delay_in_ms=%d now=%lldms top->p=%p"
            " top->time=%lldms diff=%lldms",
                p, delay_in_ms, now, delayed_q_.top()->p,
                delayed_q_.top()->time, delayed_q_.top()->time - now);
#endif
        if ((q_.size() == 0) && (delayed_q_.top() == r)) {
            // q_ is empty and the new record is at delayed_q_.top
            // so we signal the waiting thread so it can readjust
            // the wait time.
            DBG("WorkerQueue::AddDelayed signal");
            pthread_cond_signal(&wqt_->cond_);
        }
        pthread_mutex_unlock(&wqt_->mutex_);
    }
    DBG("WorkerQueue::AddDelayed X:");
