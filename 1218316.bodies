class MediaItem
!!!6899724.java!!!	MediaItem(inout editor : VideoEditor, in mediaItemId : String, in filename : String, in renderingMode : int)
        if (filename == null) {
            throw new IllegalArgumentException("MediaItem : filename is null");
        }
        File file = new File(filename);
        if (!file.exists()) {
            throw new IOException(filename + " not found ! ");
        }

        /*Compare file_size with 2GB*/
        if (VideoEditor.MAX_SUPPORTED_FILE_SIZE <= file.length()) {
            throw new IllegalArgumentException("File size is more than 2GB");
        }
        mUniqueId = mediaItemId;
        mFilename = filename;
        mRenderingMode = renderingMode;
        mEffects = new ArrayList<Effect>();
        mOverlays = new ArrayList<Overlay>();
        mBeginTransition = null;
        mEndTransition = null;
        mMANativeHelper = ((VideoEditorImpl)editor).getNativeContext();
        mProjectPath = editor.getPath();
        mRegenerateClip = false;
        mGeneratedImageClip = null;
!!!6899852.java!!!	getId() : String
        return mUniqueId;
!!!6899980.java!!!	getFilename() : String
        return mFilename;
!!!6900108.java!!!	setRenderingMode(in renderingMode : int) : void
        switch (renderingMode) {
            case RENDERING_MODE_BLACK_BORDER:
            case RENDERING_MODE_STRETCH:
            case RENDERING_MODE_CROPPING:
                break;

            default:
                throw new IllegalArgumentException("Invalid Rendering Mode");
        }

        mMANativeHelper.setGeneratePreview(true);

        mRenderingMode = renderingMode;
        if (mBeginTransition != null) {
            mBeginTransition.invalidate();
        }

        if (mEndTransition != null) {
            mEndTransition.invalidate();
        }

        for (Overlay overlay : mOverlays) {
            ((OverlayFrame)overlay).invalidateGeneratedFiles();
        }
!!!6900236.java!!!	getRenderingMode() : int
        return mRenderingMode;
!!!6900364.java!!!	setBeginTransition(inout transition : Transition) : void
        mBeginTransition = transition;
!!!6900492.java!!!	getBeginTransition() : Transition
        return mBeginTransition;
!!!6900620.java!!!	setEndTransition(inout transition : Transition) : void
        mEndTransition = transition;
!!!6900748.java!!!	getEndTransition() : Transition
        return mEndTransition;
!!!6901644.java!!!	addEffect(inout effect : Effect) : void

        if (effect == null) {
            throw new IllegalArgumentException("NULL effect cannot be applied");
        }

        if (effect.getMediaItem() != this) {
            throw new IllegalArgumentException("Media item mismatch");
        }

        if (mEffects.contains(effect)) {
            throw new IllegalArgumentException("Effect already exists: " + effect.getId());
        }

        if (effect.getStartTime() + effect.getDuration() > getDuration()) {
            throw new IllegalArgumentException(
            "Effect start time + effect duration > media clip duration");
        }

        mMANativeHelper.setGeneratePreview(true);

        mEffects.add(effect);

        invalidateTransitions(effect.getStartTime(), effect.getDuration());

        if (effect instanceof EffectKenBurns) {
            mRegenerateClip = true;
        }
!!!6901772.java!!!	removeEffect(in effectId : String) : Effect
        for (Effect effect : mEffects) {
            if (effect.getId().equals(effectId)) {
                mMANativeHelper.setGeneratePreview(true);

                mEffects.remove(effect);

                invalidateTransitions(effect.getStartTime(), effect.getDuration());
                if (effect instanceof EffectKenBurns) {
                    if (mGeneratedImageClip != null) {
                        /**
                         *  Delete the file
                         */
                        new File(mGeneratedImageClip).delete();
                        /**
                         *  Invalidate the filename
                         */
                        mGeneratedImageClip = null;
                    }
                    mRegenerateClip = false;
                }
                return effect;
            }
        }
        return null;
!!!6901900.java!!!	setGeneratedImageClip(in generatedFilePath : String) : void
        mGeneratedImageClip = generatedFilePath;
!!!6902028.java!!!	getGeneratedImageClip() : String
        return mGeneratedImageClip;
!!!6902156.java!!!	getEffect(in effectId : String) : Effect
        for (Effect effect : mEffects) {
            if (effect.getId().equals(effectId)) {
                return effect;
            }
        }
        return null;
!!!6902284.java!!!	getAllEffects() : Effect
        return mEffects;
!!!6902412.java!!!	addOverlay(inout overlay : Overlay) : void
        if (overlay == null) {
            throw new IllegalArgumentException("NULL Overlay cannot be applied");
        }

        if (overlay.getMediaItem() != this) {
            throw new IllegalArgumentException("Media item mismatch");
        }

        if (mOverlays.contains(overlay)) {
            throw new IllegalArgumentException("Overlay already exists: " + overlay.getId());
        }

        if (overlay.getStartTime() + overlay.getDuration() > getDuration()) {
            throw new IllegalArgumentException(
            "Overlay start time + overlay duration > media clip duration");
        }

        if (overlay instanceof OverlayFrame) {
            final OverlayFrame frame = (OverlayFrame)overlay;
            final Bitmap bitmap = frame.getBitmap();
            if (bitmap == null) {
                throw new IllegalArgumentException("Overlay bitmap not specified");
            }

            final int scaledWidth, scaledHeight;
            if (this instanceof MediaVideoItem) {
                scaledWidth = getWidth();
                scaledHeight = getHeight();
            } else {
                scaledWidth = ((MediaImageItem)this).getScaledWidth();
                scaledHeight = ((MediaImageItem)this).getScaledHeight();
            }

            /**
             * The dimensions of the overlay bitmap must be the same as the
             * media item dimensions
             */
            if (bitmap.getWidth() != scaledWidth || bitmap.getHeight() != scaledHeight) {
                throw new IllegalArgumentException(
                "Bitmap dimensions must match media item dimensions");
            }

            mMANativeHelper.setGeneratePreview(true);
            ((OverlayFrame)overlay).save(mProjectPath);

            mOverlays.add(overlay);
            invalidateTransitions(overlay.getStartTime(), overlay.getDuration());

        } else {
            throw new IllegalArgumentException("Overlay not supported");
        }
!!!6902540.java!!!	setRegenerateClip(inout flag : boolean) : void
        mRegenerateClip = flag;
!!!6902668.java!!!	getRegenerateClip() : boolean
        return mRegenerateClip;
!!!6902796.java!!!	removeOverlay(in overlayId : String) : Overlay
        for (Overlay overlay : mOverlays) {
            if (overlay.getId().equals(overlayId)) {
                mMANativeHelper.setGeneratePreview(true);

                mOverlays.remove(overlay);
                if (overlay instanceof OverlayFrame) {
                    ((OverlayFrame)overlay).invalidate();
                }
                invalidateTransitions(overlay.getStartTime(), overlay.getDuration());
                return overlay;
            }
        }
        return null;
!!!6902924.java!!!	getOverlay(in overlayId : String) : Overlay
        for (Overlay overlay : mOverlays) {
            if (overlay.getId().equals(overlayId)) {
                return overlay;
            }
        }

        return null;
!!!6903052.java!!!	getAllOverlays() : Overlay
        return mOverlays;
!!!6903564.java!!!	getThumbnailList(in width : int, in height : int, in startMs : long, in endMs : long, in thumbnailCount : int) : Bitmap
        final Bitmap[] bitmaps = new Bitmap[thumbnailCount];
        int[] indices = new int[thumbnailCount];
        for (int i = 0; i < thumbnailCount; i++) {
            indices[i] = i;
        }
        getThumbnailList(width, height, startMs, endMs,
                thumbnailCount, indices, new GetThumbnailListCallback() {
            public void onThumbnail(Bitmap bitmap, int index) {
                bitmaps[index] = bitmap;
            }
        });

        return bitmaps;
!!!6903692.java!!!	equals(inout object : Object) : boolean
        if (!(object instanceof MediaItem)) {
            return false;
        }
        return mUniqueId.equals(((MediaItem)object).mUniqueId);
!!!6903820.java!!!	hashCode() : int
        return mUniqueId.hashCode();
!!!6904204.java!!!	isOverlapping(in startTimeMs1 : long, in durationMs1 : long, in startTimeMs2 : long, in durationMs2 : long) : boolean
        if (startTimeMs1 + durationMs1 <= startTimeMs2) {
            return false;
        } else if (startTimeMs1 >= startTimeMs2 + durationMs2) {
            return false;
        }

        return true;
!!!6904332.java!!!	adjustTransitions() : void
        /**
         *  Check if the duration of transitions need to be adjusted
         */
        if (mBeginTransition != null) {
            final long maxDurationMs = mBeginTransition.getMaximumDuration();
            if (mBeginTransition.getDuration() > maxDurationMs) {
                mBeginTransition.setDuration(maxDurationMs);
            }
        }

        if (mEndTransition != null) {
            final long maxDurationMs = mEndTransition.getMaximumDuration();
            if (mEndTransition.getDuration() > maxDurationMs) {
                mEndTransition.setDuration(maxDurationMs);
            }
        }
!!!6904460.java!!!	getNativeContext() : MediaArtistNativeHelper
        return mMANativeHelper;
!!!6904588.java!!!	initClipSettings(inout clipSettings : ClipSettings) : void
        clipSettings.clipPath = null;
        clipSettings.clipDecodedPath = null;
        clipSettings.clipOriginalPath = null;
        clipSettings.fileType = 0;
        clipSettings.endCutTime = 0;
        clipSettings.beginCutTime = 0;
        clipSettings.beginCutPercent = 0;
        clipSettings.endCutPercent = 0;
        clipSettings.panZoomEnabled = false;
        clipSettings.panZoomPercentStart = 0;
        clipSettings.panZoomTopLeftXStart = 0;
        clipSettings.panZoomTopLeftYStart = 0;
        clipSettings.panZoomPercentEnd = 0;
        clipSettings.panZoomTopLeftXEnd = 0;
        clipSettings.panZoomTopLeftYEnd = 0;
        clipSettings.mediaRendering = 0;
        clipSettings.rgbWidth = 0;
        clipSettings.rgbHeight = 0;
!!!6904716.java!!!	getClipSettings() : ClipSettings
        MediaVideoItem mVI = null;
        MediaImageItem mII = null;
        ClipSettings clipSettings = new ClipSettings();
        initClipSettings(clipSettings);
        if (this instanceof MediaVideoItem) {
            mVI = (MediaVideoItem)this;
            clipSettings.clipPath = mVI.getFilename();
            clipSettings.fileType = mMANativeHelper.getMediaItemFileType(mVI.
                                                                 getFileType());
            clipSettings.beginCutTime = (int)mVI.getBoundaryBeginTime();
            clipSettings.endCutTime = (int)mVI.getBoundaryEndTime();
            clipSettings.mediaRendering = mMANativeHelper.
                                          getMediaItemRenderingMode(mVI
                                          .getRenderingMode());
        } else if (this instanceof MediaImageItem) {
            mII = (MediaImageItem)this;
            clipSettings = mII.getImageClipProperties();
        }
        return clipSettings;
!!!6904844.java!!!	generateBlankFrame(inout clipSettings : ClipSettings) : void
        if (!mBlankFrameGenerated) {
            int mWidth = 64;
            int mHeight = 64;
            mBlankFrameFilename = String.format(mProjectPath + "/" + "ghost.rgb");
            FileOutputStream fl = null;
            try {
                 fl = new FileOutputStream(mBlankFrameFilename);
            } catch (IOException e) {
                /* catch IO exception */
            }
            final DataOutputStream dos = new DataOutputStream(fl);

            final int [] framingBuffer = new int[mWidth];

            ByteBuffer byteBuffer = ByteBuffer.allocate(framingBuffer.length * 4);
            IntBuffer intBuffer;

            byte[] array = byteBuffer.array();
            int tmp = 0;
            while(tmp < mHeight) {
                intBuffer = byteBuffer.asIntBuffer();
                intBuffer.put(framingBuffer,0,mWidth);
                try {
                    dos.write(array);
                } catch (IOException e) {
                    /* catch file write error */
                }
                tmp += 1;
            }

            try {
                fl.close();
            } catch (IOException e) {
                /* file close error */
            }
            mBlankFrameGenerated = true;
        }

        clipSettings.clipPath = mBlankFrameFilename;
        clipSettings.fileType = FileType.JPG;
        clipSettings.beginCutTime = 0;
        clipSettings.endCutTime = 0;
        clipSettings.mediaRendering = MediaRendering.RESIZING;

        clipSettings.rgbWidth = 64;
        clipSettings.rgbHeight = 64;
!!!6904972.java!!!	invalidateBlankFrame() : void
        if (mBlankFrameFilename != null) {
            if (new File(mBlankFrameFilename).exists()) {
                new File(mBlankFrameFilename).delete();
                mBlankFrameFilename = null;
            }
        }
