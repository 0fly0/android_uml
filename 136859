format 74
"transform" // framework::base::opengl::java::javax::xml::transform
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/javax/xml/transform/"
  java_package "javax.xml.transform"
  classview 135451 "transform"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 305435 "ErrorListener"
      abstract visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>To provide customized error handling, implement this interface and
use the <code>setErrorListener</code> method to register an instance of the
implementation with the {@link javax.xml.transform.Transformer}.  The
<code>Transformer</code> then reports all errors and warnings through this
interface.</p>

<p>If an application does <em>not</em> register its own custom
<code>ErrorListener</code>, the default <code>ErrorListener</code>
is used which reports all warnings and errors to <code>System.err</code>
and does not throw any <code>Exception</code>s.
Applications are <em>strongly</em> encouraged to register and use
<code>ErrorListener</code>s that insure proper behavior for warnings and
errors.</p>

<p>For transformation errors, a <code>Transformer</code> must use this
interface instead of throwing an <code>Exception</code>: it is up to the
application to decide whether to throw an <code>Exception</code> for
different types of errors and warnings.  Note however that the
<code>Transformer</code> is not required to continue with the transformation
after a call to {@link #fatalError(TransformerException exception)}.</p>

<p><code>Transformer</code>s may use this mechanism to report XML parsing
errors as well as transformation errors.</p>"
      operation 1916955 "warning"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 305563 // TransformerException
	nexceptions 1
	  exception class_ref 305563 // TransformerException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of a warning.

<p>{@link javax.xml.transform.Transformer} can use this method to report
conditions that are not errors or fatal errors.  The default behavior
is to take no action.</p>

<p>After invoking this method, the Transformer must continue with
the transformation. It should still be possible for the
application to process the document through to the end.</p>

@param exception The warning information encapsulated in a
                 transformer exception.

@throws javax.xml.transform.TransformerException if the application
chooses to discontinue the transformation.

@see javax.xml.transform.TransformerException"
      end

      operation 1917083 "error"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 305563 // TransformerException
	nexceptions 1
	  exception class_ref 305563 // TransformerException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Receive notification of a recoverable error.

<p>The transformer must continue to try and provide normal transformation
after invoking this method.  It should still be possible for the
application to process the document through to the end if no other errors
are encountered.</p>

@param exception The error information encapsulated in a
                 transformer exception.

@throws javax.xml.transform.TransformerException if the application
chooses to discontinue the transformation.

@see javax.xml.transform.TransformerException"
      end

      operation 1917211 "fatalError"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 305563 // TransformerException
	nexceptions 1
	  exception class_ref 305563 // TransformerException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Receive notification of a non-recoverable error.</p>

<p>The <code>Transformer</code> must continue to try and provide normal
transformation after invoking this method.  It should still be possible for the
application to process the document through to the end if no other errors
are encountered, but there is no guarantee that the output will be
useable.</p>

@param exception The error information encapsulated in a
   <code>TransformerException</code>.

@throws javax.xml.transform.TransformerException if the application
chooses to discontinue the transformation.

@see javax.xml.transform.TransformerException"
      end
    end

    class 305563 "TransformerException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class specifies an exceptional condition that occurred
during the transformation process."
      classrelation 543899 // <generalisation>
	relation 543899 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 543899 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      attribute 455195 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 975798773772956428L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Added serialVersionUID to preserve binary compatibility"
      end

      classrelation 544027 // locator (<unidirectional association>)
	relation 544027 --->
	  a role_name "locator" package
	    comment " Field locator specifies where the error occurred 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 544027 // locator (<unidirectional association>)
	  b parent class_ref 306075 // SourceLocator
      end

      operation 1920539 "getLocator"
	public return_type class_ref 306075 // SourceLocator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method getLocator retrieves an instance of a SourceLocator
object that specifies where an error occurred.

@return A SourceLocator object, or null if none was specified."
      end

      operation 1920667 "setLocator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "location" type class_ref 306075 // SourceLocator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method setLocator sets an instance of a SourceLocator
object that specifies where an error occurred.

@param location A SourceLocator object, or null to clear the location."
      end

      classrelation 544155 // containedException (<unidirectional association>)
	relation 544155 --->
	  a role_name "containedException" package
	    comment " Field containedException specifies a wrapped exception.  May be null. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 544155 // containedException (<unidirectional association>)
	  b parent class_ref 134683 // Throwable
      end

      operation 1920795 "getException"
	public return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method retrieves an exception that this exception wraps.

@return An Throwable object, or null.
@see #getCause"
      end

      operation 1920923 "getCause"
	public return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this throwable or <code>null</code> if the
cause is nonexistent or unknown.  (The cause is the throwable that
caused this throwable to get thrown.)"
      end

      operation 1921051 "initCause"
	public return_type class_ref 134683 // Throwable
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the <i>cause</i> of this throwable to the specified value.
(The cause is the throwable that caused this throwable to get thrown.)

<p>This method can be called at most once.  It is generally called from
within the constructor, or immediately after creating the
throwable.  If this throwable was created
with {@link #TransformerException(Throwable)} or
{@link #TransformerException(String,Throwable)}, this method cannot be called
even once.

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@return  a reference to this <code>Throwable</code> instance.
@throws IllegalArgumentException if <code>cause</code> is this
        throwable.  (A throwable cannot
        be its own cause.)
@throws IllegalStateException if this throwable was
        created with {@link #TransformerException(Throwable)} or
        {@link #TransformerException(String,Throwable)}, or this method has already
        been called on this throwable."
      end

      operation 1921179 "TransformerException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new TransformerException.

@param message The error or warning message."
      end

      operation 1921307 "TransformerException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new TransformerException wrapping an existing exception.

@param e The exception to be wrapped."
      end

      operation 1921435 "TransformerException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 3399692 // String
	  param inout name "e" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wrap an existing exception in a TransformerException.

<p>This is used for throwing processor exceptions before
the processing has started.</p>

@param message The error or warning message, or null to
               use the message from the embedded exception.
@param e Any exception"
      end

      operation 1921563 "TransformerException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 3399692 // String
	  param inout name "locator" type class_ref 306075 // SourceLocator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new TransformerException from a message and a Locator.

<p>This constructor is especially useful when an application is
creating its own exception from within a DocumentHandler
callback.</p>

@param message The error or warning message.
@param locator The locator object for the error or warning."
      end

      operation 1921691 "TransformerException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 3399692 // String
	  param inout name "locator" type class_ref 306075 // SourceLocator
	  param inout name "e" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wrap an existing exception in a TransformerException.

@param message The error or warning message, or null to
               use the message from the embedded exception.
@param locator The locator object for the error or warning.
@param e Any exception"
      end

      operation 1921819 "getMessageAndLocation"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the error message with location information
appended.

@return A <code>String</code> representing the error message with
        location information appended."
      end

      operation 1921947 "getLocationAsString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the location information as a string.

@return A string with location info, or null
if there is no location information."
      end

      operation 1922075 "printStackTrace"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print the the trace of methods from where the error
originated.  This will trace all nested exception
objects, as well as this object."
      end

      operation 1922203 "printStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 134939 // PrintStream
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print the the trace of methods from where the error
originated.  This will trace all nested exception
objects, as well as this object.
@param s The stream where the dump will be sent to."
      end

      operation 1922331 "printStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 135067 // PrintWriter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print the the trace of methods from where the error
originated.  This will trace all nested exception
objects, as well as this object.
@param s The writer where the dump will be sent to."
      end
    end

    class 305691 "OutputKeys"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides string constants that can be used to set
output properties for a Transformer, or to retrieve
output properties from a Transformer or Templates object.
<p>All the fields in this class are read-only.</p>

@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>"
      operation 1917339 "OutputKeys"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor is private on purpose.  This class is
only for static variable access, and should never be constructed."
      end

      classrelation 542363 // METHOD (<unidirectional association>)
	relation 542363 --->
	  a role_name "METHOD" init_value " \"method\"" class_relation const_relation public
	    comment "
method = \"xml\" | \"html\" | \"text\" | <var>expanded name</var>.

<p>The value of the method property identifies the overall method that
should be used for outputting the result tree.  Other non-namespaced
values may be used, such as \"xhtml\", but, if accepted, the handling
of such values is implementation defined.  If any of the method values
are not accepted and are not namespace qualified,
then {@link javax.xml.transform.Transformer#setOutputProperty}
or {@link javax.xml.transform.Transformer#setOutputProperties} will
throw a {@link java.lang.IllegalArgumentException}.</p>

@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 542363 // METHOD (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 542491 // VERSION (<unidirectional association>)
	relation 542491 --->
	  a role_name "VERSION" init_value " \"version\"" class_relation const_relation public
	    comment "
version = <var>nmtoken</var>.

<p><code>version</code> specifies the version of the output
method.</p>
<p>When the output method is \"xml\", the version value specifies the
version of XML to be used for outputting the result tree. The default
value for the xml output method is 1.0. When the output method is
\"html\", the version value indicates the version of the HTML.
The default value for the xml output method is 4.0, which specifies
that the result should be output as HTML conforming to the HTML 4.0
Recommendation [HTML].  If the output method is \"text\", the version
property is ignored.</p>
@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 542491 // VERSION (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 542619 // ENCODING (<unidirectional association>)
	relation 542619 --->
	  a role_name "ENCODING" init_value " \"encoding\"" class_relation const_relation public
	    comment "
encoding = <var>string</var>.

<p><code>encoding</code> specifies the preferred character
encoding that the Transformer should use to encode sequences of
characters as sequences of bytes. The value of the encoding property should be
treated case-insensitively. The value must only contain characters in
the range #x21 to #x7E (i.e., printable ASCII characters). The value
should either be a <code>charset</code> registered with the Internet
Assigned Numbers Authority <a href=\"#IANA\">[IANA]</a>,
<a href=\"#RFC2278\">[RFC2278]</a> or start with <code>X-</code>.</p>
@see <a href=\"http://www.w3.org/TR/xslt#output\">
section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 542619 // ENCODING (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 542747 // OMIT_XML_DECLARATION (<unidirectional association>)
	relation 542747 --->
	  a role_name "OMIT_XML_DECLARATION" init_value " \"omit-xml-declaration\"" class_relation const_relation public
	    comment "
omit-xml-declaration = \"yes\" | \"no\".

<p><code>omit-xml-declaration</code> specifies whether the XSLT
processor should output an XML declaration; the value must be
<code>yes</code> or <code>no</code>.</p>
@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 542747 // OMIT_XML_DECLARATION (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 542875 // STANDALONE (<unidirectional association>)
	relation 542875 --->
	  a role_name "STANDALONE" init_value " \"standalone\"" class_relation const_relation public
	    comment "
standalone = \"yes\" | \"no\".

<p><code>standalone</code> specifies whether the Transformer
should output a standalone document declaration; the value must be
<code>yes</code> or <code>no</code>.</p>
@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 542875 // STANDALONE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 543003 // DOCTYPE_PUBLIC (<unidirectional association>)
	relation 543003 --->
	  a role_name "DOCTYPE_PUBLIC" init_value " \"doctype-public\"" class_relation const_relation public
	    comment "
doctype-public = <var>string</var>.
<p>See the documentation for the {@link #DOCTYPE_SYSTEM} property
for a description of what the value of the key should be.</p>

@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 543003 // DOCTYPE_PUBLIC (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 543131 // DOCTYPE_SYSTEM (<unidirectional association>)
	relation 543131 --->
	  a role_name "DOCTYPE_SYSTEM" init_value " \"doctype-system\"" class_relation const_relation public
	    comment "
doctype-system = <var>string</var>.
<p><code>doctype-system</code> specifies the system identifier
to be used in the document type declaration.</p>
<p>If the doctype-system property is specified, the xml output method
should output a document type declaration immediately before the first
element. The name following &lt;!DOCTYPE should be the name of the first
element. If doctype-public property is also specified, then the xml
output method should output PUBLIC followed by the public identifier
and then the system identifier; otherwise, it should output SYSTEM
followed by the system identifier. The internal subset should be empty.
The value of the doctype-public property should be ignored unless the doctype-system
property is specified.</p>
<p>If the doctype-public or doctype-system properties are specified,
then the html output method should output a document type declaration
immediately before the first element. The name following &lt;!DOCTYPE
should be HTML or html. If the doctype-public property is specified,
then the output method should output PUBLIC followed by the specified
public identifier; if the doctype-system property is also specified,
it should also output the specified system identifier following the
public identifier. If the doctype-system property is specified but
the doctype-public property is not specified, then the output method
should output SYSTEM followed by the specified system identifier.</p>

<p><code>doctype-system</code> specifies the system identifier
to be used in the document type declaration.</p>
@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 543131 // DOCTYPE_SYSTEM (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 543259 // CDATA_SECTION_ELEMENTS (<unidirectional association>)
	relation 543259 --->
	  a role_name "CDATA_SECTION_ELEMENTS" init_value "
        \"cdata-section-elements\"" class_relation const_relation public
	    comment "
cdata-section-elements = <var>expanded names</var>.

<p><code>cdata-section-elements</code> specifies a whitespace delimited
list of the names of elements whose text node children should be output
using CDATA sections. Note that these names must use the format
described in the section Qualfied Name Representation in
{@link javax.xml.transform}.</p>

@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation.</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 543259 // CDATA_SECTION_ELEMENTS (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 543387 // INDENT (<unidirectional association>)
	relation 543387 --->
	  a role_name "INDENT" init_value " \"indent\"" class_relation const_relation public
	    comment "
indent = \"yes\" | \"no\".

<p><code>indent</code> specifies whether the Transformer may
add additional whitespace when outputting the result tree; the value
must be <code>yes</code> or <code>no</code>.  </p>
@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 543387 // INDENT (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 543515 // MEDIA_TYPE (<unidirectional association>)
	relation 543515 --->
	  a role_name "MEDIA_TYPE" init_value " \"media-type\"" class_relation const_relation public
	    comment "
media-type = <var>string</var>.

<p><code>media-type</code> specifies the media type (MIME
content type) of the data that results from outputting the result
tree. The <code>charset</code> parameter should not be specified
explicitly; instead, when the top-level media type is
<code>text</code>, a <code>charset</code> parameter should be added
according to the character encoding actually used by the output
method.  </p>
@see <a href=\"http://www.w3.org/TR/xslt#output\">
 section 16 of the XSL Transformations (XSLT) W3C Recommendation</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 543515 // MEDIA_TYPE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end
    end

    class 305819 "Result"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>An object that implements this interface contains the information
needed to build a transformation result tree.</p>

@author <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>"
      classrelation 543643 // PI_DISABLE_OUTPUT_ESCAPING (<unidirectional association>)
	relation 543643 --->
	  a role_name "PI_DISABLE_OUTPUT_ESCAPING" init_value "
        \"javax.xml.transform.disable-output-escaping\"" class_relation const_relation public
	    comment "
The name of the processing instruction that is sent if the
result tree disables output escaping.

<p>Normally, result tree serialization escapes & and < (and
possibly other characters) when outputting text nodes.
This ensures that the output is well-formed XML. However,
it is sometimes convenient to be able to produce output that is
almost, but not quite well-formed XML; for example,
the output may include ill-formed sections that will
be transformed into well-formed XML by a subsequent non-XML aware
process. If a processing instruction is sent with this name,
serialization should be output without any escaping. </p>

<p>Result DOM trees may also have PI_DISABLE_OUTPUT_ESCAPING and
PI_ENABLE_OUTPUT_ESCAPING inserted into the tree.</p>

@see <a href=\"http://www.w3.org/TR/xslt#disable-output-escaping\">disable-output-escaping in XSLT Specification</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 543643 // PI_DISABLE_OUTPUT_ESCAPING (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 543771 // PI_ENABLE_OUTPUT_ESCAPING (<unidirectional association>)
	relation 543771 --->
	  a role_name "PI_ENABLE_OUTPUT_ESCAPING" init_value "
        \"javax.xml.transform.enable-output-escaping\"" class_relation const_relation public
	    comment "
The name of the processing instruction that is sent
if the result tree enables output escaping at some point after having
received a PI_DISABLE_OUTPUT_ESCAPING processing instruction.

@see <a href=\"http://www.w3.org/TR/xslt#disable-output-escaping\">disable-output-escaping in XSLT Specification</a>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 543771 // PI_ENABLE_OUTPUT_ESCAPING (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1917467 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the system identifier for this Result.

<p>If the Result is not to be written to a file, the system identifier is optional.
The application may still want to provide one, however, for use in error messages
and warnings, or to resolve relative output identifiers.</p>

@param systemId The system identifier as a URI string."
      end

      operation 1917595 "getSystemId"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the system identifier that was set with setSystemId.

@return The system identifier that was set with setSystemId,
or null if setSystemId was not called."
      end
    end

    class 305947 "Source"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that implements this interface contains the information
needed to act as source input (XML source or transformation instructions)."
      operation 1917723 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the system identifier for this Source.

<p>The system identifier is optional if the source does not
get its data from a URL, but it may still be useful to provide one.
The application can use a system identifier, for example, to resolve
relative URIs and to include in error messages and warnings.</p>

@param systemId The system identifier as a URL string."
      end

      operation 1917851 "getSystemId"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the system identifier that was set with setSystemId.

@return The system identifier that was set with setSystemId, or null
if setSystemId was not called."
      end
    end

    class 306075 "SourceLocator"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface is primarily for the purposes of reporting where
an error occurred in the XML source or transformation instructions."
      operation 1917979 "getPublicId"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the public identifier for the current document event.

<p>The return value is the public identifier of the document
entity or of the external parsed entity in which the markup that
triggered the event appears.</p>

@return A string containing the public identifier, or
        null if none is available.
@see #getSystemId"
      end

      operation 1918107 "getSystemId"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the system identifier for the current document event.

<p>The return value is the system identifier of the document
entity or of the external parsed entity in which the markup that
triggered the event appears.</p>

<p>If the system identifier is a URL, the parser must resolve it
fully before passing it to the application.</p>

@return A string containing the system identifier, or null
        if none is available.
@see #getPublicId"
      end

      operation 1918235 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the line number where the current document event ends.

<p><strong>Warning:</strong> The return value from the method
is intended only as an approximation for the sake of error
reporting; it is not intended to provide sufficient information
to edit the character content of the original XML document.</p>

<p>The return value is an approximation of the line number
in the document entity or external parsed entity where the
markup that triggered the event appears.</p>

@return The line number, or -1 if none is available.
@see #getColumnNumber"
      end

      operation 1918363 "getColumnNumber"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the character position where the current document event ends.

<p><strong>Warning:</strong> The return value from the method
is intended only as an approximation for the sake of error
reporting; it is not intended to provide sufficient information
to edit the character content of the original XML document.</p>

<p>The return value is an approximation of the column number
in the document entity or external parsed entity where the
markup that triggered the event appears.</p>

@return The column number, or -1 if none is available.
@see #getLineNumber"
      end
    end

    class 306203 "Templates"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that implements this interface is the runtime representation of processed
transformation instructions.

<p>Templates must be thread-safe for a given instance
over multiple threads running concurrently, and may
be used multiple times in a given session.</p>"
      operation 1918491 "newTransformer"
	public return_type class_ref 306331 // Transformer
	nparams 0
	nexceptions 1
	  exception class_ref 306459 // TransformerConfigurationException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new transformation context for this Templates object.

@return A valid non-null instance of a Transformer.

@throws TransformerConfigurationException if a Transformer can not be created."
      end

      operation 1918619 "getOutputProperties"
	public return_type class_ref 160027 // Properties
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the properties corresponding to the effective xsl:output element.
The object returned will
be a clone of the internal values. Accordingly, it can be mutated
without mutating the Templates object, and then handed in to
{@link javax.xml.transform.Transformer#setOutputProperties}.

<p>The properties returned should contain properties set by the stylesheet,
and these properties are \"defaulted\" by default properties specified by
<a href=\"http://www.w3.org/TR/xslt#output\">section 16 of the
XSL Transformations (XSLT) W3C Recommendation</a>.  The properties that
were specifically set by the stylesheet should be in the base
Properties list, while the XSLT default properties that were not
specifically set should be in the \"default\" Properties list.  Thus,
getOutputProperties().getProperty(String key) will obtain any
property in that was set by the stylesheet, <em>or</em> the default
properties, while
getOutputProperties().get(String key) will only retrieve properties
that were explicitly set in the stylesheet.</p>

<p>For XSLT,
<a href=\"http://www.w3.org/TR/xslt#attribute-value-templates\">Attribute
Value Templates</a> attribute values will
be returned unexpanded (since there is no context at this point).  The
namespace prefixes inside Attribute Value Templates will be unexpanded,
so that they remain valid XPath values.</p>

@return A Properties object, never null."
      end
    end

    class 306331 "Transformer"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An instance of this abstract class can transform a
source tree into a result tree.

<p>An instance of this class can be obtained with the
{@link TransformerFactory#newTransformer TransformerFactory.newTransformer}
method. This instance may then be used to process XML from a
variety of sources and write the transformation output to a
variety of sinks.</p>

<p>An object of this class may not be used in multiple threads
running concurrently.  Different Transformers may be used
concurrently by different threads.</p>

<p>A <code>Transformer</code> may be used multiple times.  Parameters and
output properties are preserved across transformations.</p>

@author <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>
@version $Revision: 570103 $, $Date: 2007-08-27 06:24:55 -0700 (Mon, 27 Aug 2007) $"
      operation 1918747 "Transformer"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor is protected on purpose."
      end

      operation 1918875 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Reset this <code>Transformer</code> to its original configuration.</p>

<p><code>Transformer</code> is reset to the same state as when it was created with
{@link TransformerFactory#newTransformer()},
{@link TransformerFactory#newTransformer(Source source)} or
{@link Templates#newTransformer()}.
<code>reset()</code> is designed to allow the reuse of existing <code>Transformer</code>s
thus saving resources associated with the creation of new <code>Transformer</code>s.</p>

<p>The reset <code>Transformer</code> is not guaranteed to have the same {@link URIResolver}
or {@link ErrorListener} <code>Object</code>s, e.g. {@link Object#equals(Object obj)}.
It is guaranteed to have a functionally equal <code>URIResolver</code>
and <code>ErrorListener</code>.</p>

@since 1.5"
      end

      operation 1919003 "transform"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "xmlSource" type class_ref 305947 // Source
	  param inout name "outputTarget" type class_ref 305819 // Result
	nexceptions 1
	  exception class_ref 305563 // TransformerException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Transform the XML <code>Source</code> to a <code>Result</code>.
Specific transformation behavior is determined by the settings of the
<code>TransformerFactory</code> in effect when the
<code>Transformer</code> was instantiated and any modifications made to
the <code>Transformer</code> instance.</p>

<p>An empty <code>Source</code> is represented as an empty document
as constructed by {@link javax.xml.parsers.DocumentBuilder#newDocument()}.
The result of transforming an empty <code>Source</code> depends on
the transformation behavior; it is not always an empty
<code>Result</code>.</p>

@param xmlSource The XML input to transform.
@param outputTarget The <code>Result</code> of transforming the
  <code>xmlSource</code>.

@throws TransformerException If an unrecoverable error occurs
  during the course of the transformation."
      end

      operation 1919131 "setParameter"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a parameter for the transformation.

<p>Pass a qualified name as a two-part string, the namespace URI
enclosed in curly braces ({}), followed by the local name. If the
name has a null URL, the String only contain the local name. An
application can safely check for a non-null URI by testing to see if the
first character of the name is a '{' character.</p>
<p>For example, if a URI and local name were obtained from an element
defined with &lt;xyz:foo
xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/&gt;,
then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\".
Note that no prefix is used.</p>

@param name The name of the parameter, which may begin with a
namespace URI in curly braces ({}).
@param value The value object.  This can be any valid Java object. It is
up to the processor to provide the proper object coercion or to simply
pass the object on for use in an extension.

@throws NullPointerException If value is null."
      end

      operation 1919259 "getParameter"
	abstract public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a parameter that was explicitly set with setParameter.

<p>This method does not return a default parameter value, which
cannot be determined until the node context is evaluated during
the transformation process.

@param name of <code>Object</code> to get
@return A parameter that has been set with setParameter."
      end

      operation 1919387 "clearParameters"
	abstract public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set a list of parameters.</p>

<p>Note that the list of parameters is specified as a
<code>Properties</code> <code>Object</code> which limits the parameter
values to <code>String</code>s.  Multiple calls to
{@link #setParameter(String name, Object value)} should be used when the
desired values are non-<code>String</code> <code>Object</code>s.
The parameter names should conform as specified in
{@link #setParameter(String name, Object value)}.
An <code>IllegalArgumentException</code> is thrown if any names do not
conform.</p>

<p>New parameters in the list are added to any existing parameters.
If the name of a new parameter is equal to the name of an existing
parameter as determined by {@link java.lang.Object#equals(Object obj)},
 the existing parameter is set to the new value.</p>

@param params Parameters to set.

@throws IllegalArgumentException If any parameter names do not conform
  to the naming rules.


Clear all parameters set with setParameter."
      end

      operation 1919515 "setURIResolver"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "resolver" type class_ref 306587 // URIResolver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set an object that will be used to resolve URIs used in
document().

<p>If the resolver argument is null, the URIResolver value will
be cleared and the transformer will no longer have a resolver.</p>

@param resolver An object that implements the URIResolver interface,
or null."
      end

      operation 1919643 "getURIResolver"
	abstract public return_type class_ref 306587 // URIResolver
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an object that will be used to resolve URIs used in
document().

@return An object that implements the URIResolver interface,
or null."
      end

      operation 1919771 "setOutputProperties"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "oformat" type class_ref 160027 // Properties
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the output properties for the transformation.  These
properties will override properties set in the Templates
with xsl:output.

<p>If argument to this function is null, any properties
previously set are removed, and the value will revert to the value
defined in the templates object.</p>

<p>Pass a qualified property key name as a two-part string, the namespace
URI enclosed in curly braces ({}), followed by the local name. If the
name has a null URL, the String only contain the local name. An
application can safely check for a non-null URI by testing to see if the
first character of the name is a '{' character.</p>
<p>For example, if a URI and local name were obtained from an element
defined with &lt;xyz:foo
xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/&gt;,
then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\".
Note that no prefix is used.</p>
An <code>IllegalArgumentException</code> is thrown  if any of the
argument keys are not recognized and are not namespace qualified.

@param oformat A set of output properties that will be
used to override any of the same properties in affect
for the transformation.

@see javax.xml.transform.OutputKeys
@see java.util.Properties
"
      end

      operation 1919899 "getOutputProperties"
	abstract public return_type class_ref 160027 // Properties
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get a copy of the output properties for the transformation.</p>

<p>The properties returned should contain properties set by the user,
and properties set by the stylesheet, and these properties
are \"defaulted\" by default properties specified by
<a href=\"http://www.w3.org/TR/xslt#output\">section 16 of the
XSL Transformations (XSLT) W3C Recommendation</a>.  The properties that
were specifically set by the user or the stylesheet should be in the base
Properties list, while the XSLT default properties that were not
specifically set should be the default Properties list.  Thus,
getOutputProperties().getProperty(String key) will obtain any
property in that was set by {@link #setOutputProperty},
{@link #setOutputProperties}, in the stylesheet, <em>or</em> the default
properties, while
getOutputProperties().get(String key) will only retrieve properties
that were explicitly set by {@link #setOutputProperty},
{@link #setOutputProperties}, or in the stylesheet.</p>

<p>Note that mutation of the Properties object returned will not
effect the properties that the transformer contains.</p>

<p>If any of the argument keys are not recognized and are not
namespace qualified, the property will be ignored and not returned.
In other words the behavior is not orthogonal with
{@link #setOutputProperties setOutputProperties}.</p>

@return A copy of the set of output properties in effect for
  the next transformation.

@see javax.xml.transform.OutputKeys
@see java.util.Properties
@see <a href=\"http://www.w3.org/TR/xslt#output\">
  XSL Transformations (XSLT) Version 1.0</a>"
      end

      operation 1920027 "setOutputProperty"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set an output property that will be in effect for the
transformation.

<p>Pass a qualified property name as a two-part string, the namespace URI
enclosed in curly braces ({}), followed by the local name. If the
name has a null URL, the String only contain the local name. An
application can safely check for a non-null URI by testing to see if the
first character of the name is a '{' character.</p>
<p>For example, if a URI and local name were obtained from an element
defined with &lt;xyz:foo
xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/&gt;,
then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\".
Note that no prefix is used.</p>

<p>The Properties object that was passed to {@link #setOutputProperties}
won't be effected by calling this method.</p>

@param name A non-null String that specifies an output
property name, which may be namespace qualified.
@param value The non-null string value of the output property.

@throws IllegalArgumentException If the property is not supported, and is
not qualified with a namespace.

@see javax.xml.transform.OutputKeys"
      end

      operation 1920155 "getOutputProperty"
	abstract public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an output property that is in effect for the
transformer.  The property specified may be a property
that was set with setOutputProperty, or it may be a
property specified in the stylesheet.

@param name A non-null String that specifies an output
property name, which may be namespace qualified.

@return The string value of the output property, or null
if no property was found.

@throws IllegalArgumentException If the property is not supported.

@see javax.xml.transform.OutputKeys"
      end

      operation 1920283 "setErrorListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 305435 // ErrorListener
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the error event listener in effect for the transformation.

@param listener The new error listener.
@throws IllegalArgumentException if listener is null."
      end

      operation 1920411 "getErrorListener"
	abstract public return_type class_ref 305435 // ErrorListener
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the error event handler in effect for the transformation.
Implementations must provide a default error listener.

@return The current error handler, which should never be null."
      end
    end

    class 306459 "TransformerConfigurationException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Indicates a serious configuration error."
      classrelation 544283 // <generalisation>
	relation 544283 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 544283 // <generalisation>
	  b parent class_ref 305563 // TransformerException
      end

      operation 1922459 "TransformerConfigurationException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>TransformerConfigurationException</code> with no
detail message."
      end

      operation 1922587 "TransformerConfigurationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>TransformerConfigurationException</code> with
the <code>String </code> specified as an error message.

@param msg The error message for the exception."
      end

      operation 1922715 "TransformerConfigurationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>TransformerConfigurationException</code> with a
given <code>Exception</code> base cause of the error.

@param e The exception to be encapsulated in a
TransformerConfigurationException."
      end

      operation 1922843 "TransformerConfigurationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "msg" type class_ref 3399692 // String
	  param inout name "e" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>TransformerConfigurationException</code> with the
given <code>Exception</code> base cause and detail message.

@param e The exception to be encapsulated in a
     TransformerConfigurationException
@param msg The detail message."
      end

      operation 1922971 "TransformerConfigurationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 3399692 // String
	  param inout name "locator" type class_ref 306075 // SourceLocator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new TransformerConfigurationException from a message and a Locator.

<p>This constructor is especially useful when an application is
creating its own exception from within a DocumentHandler
callback.</p>

@param message The error or warning message.
@param locator The locator object for the error or warning."
      end

      operation 1923099 "TransformerConfigurationException"
	public explicit_return_type ""
	nparams 3
	  param inout name "message" type class_ref 3399692 // String
	  param inout name "locator" type class_ref 306075 // SourceLocator
	  param inout name "e" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wrap an existing exception in a TransformerConfigurationException.

@param message The error or warning message, or null to
               use the message from the embedded exception.
@param locator The locator object for the error or warning.
@param e Any exception."
      end
    end

    class 306587 "URIResolver"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>An object that implements this interface that can be called by the processor
to turn a URI used in document(), xsl:import, or xsl:include into a Source object."
      operation 1925915 "resolve"
	public return_type class_ref 305947 // Source
	nparams 2
	  param inout name "href" type class_ref 3399692 // String
	  param inout name "base" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 305563 // TransformerException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the processor when it encounters
an xsl:include, xsl:import, or document() function.

@param href An href attribute, which may be relative or absolute.
@param base The base URI against which the first argument will be made
absolute if the absolute URI is required.

@return A Source object, or null if the href cannot be resolved,
and the processor should try to resolve the URI itself.

@throws TransformerException if an error occurs when trying to
resolve the URI."
      end
    end

    class 306715 "TransformerFactory"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>A TransformerFactory instance can be used to create
{@link javax.xml.transform.Transformer} and
{@link javax.xml.transform.Templates} objects.</p>

<p>The system property that determines which Factory implementation
to create is named <code>\"javax.xml.transform.TransformerFactory\"</code>.
This property names a concrete subclass of the
<code>TransformerFactory</code> abstract class. If the property is not
defined, a platform default is be used.</p>

@author <a href=\"mailto:Jeff.Suttor@Sun.com\">Jeff Suttor</a>"
      operation 1923227 "TransformerFactory"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor is protected on purpose."
      end

      operation 1923355 "newInstance"
	class_operation public return_type class_ref 306715 // TransformerFactory
	nparams 0
	nexceptions 1
	  exception class_ref 306843 // TransformerFactoryConfigurationError
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get current state of canonicalization.</p>

@return current state canonicalization control


public boolean getCanonicalization() {
return canonicalState;
}


<p>Set canonicalization control to <code>true</code> or
</code>false</code>.</p>

@param state of canonicalization


public void setCanonicalization(boolean state) {
canonicalState = state;
}


Returns Android's implementation of {@code TransformerFactory}. Unlike
other Java implementations, this method does not consult system
properties, properties files, or the services API.

@throws TransformerFactoryConfigurationError never. Included for API
    compatibility with other Java implementations."
      end

      operation 1923483 "newInstance"
	class_operation public return_type class_ref 306715 // TransformerFactory
	nparams 2
	  param inout name "factoryClassName" type class_ref 3399692 // String
	  param inout name "classLoader" type class_ref 138523 // ClassLoader
	nexceptions 1
	  exception class_ref 306843 // TransformerFactoryConfigurationError
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an instance of the named implementation of {@code TransformerFactory}.

@throws TransformerFactoryConfigurationError if {@code factoryClassName} is not available or
    cannot be instantiated.
@since 1.6"
      end

      operation 1923611 "newTransformer"
	abstract public return_type class_ref 306331 // Transformer
	nparams 1
	  param inout name "source" type class_ref 305947 // Source
	nexceptions 1
	  exception class_ref 306459 // TransformerConfigurationException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Process the <code>Source</code> into a <code>Transformer</code>
<code>Object</code>.  The <code>Source</code> is an XSLT document that
conforms to <a href=\"http://www.w3.org/TR/xslt\">
XSL Transformations (XSLT) Version 1.0</a>.  Care must
be taken not to use this <code>Transformer</code> in multiple
<code>Thread</code>s running concurrently.
Different <code>TransformerFactories</code> can be used concurrently by
different <code>Thread</code>s.</p>

@param source <code>Source </code> of XSLT document used to create
  <code>Transformer</code>.
  Examples of XML <code>Source</code>s include
  {@link javax.xml.transform.stream.StreamSource StreamSource},
  {@link javax.xml.transform.sax.SAXSource SAXSource} and
  {@link javax.xml.transform.dom.DOMSource DOMSource}.

@return A <code>Transformer</code> object that may be used to perform
  a transformation in a single <code>Thread</code>, never
  <code>null</code>.

@throws TransformerConfigurationException Thrown if there are errors when
   parsing the <code>Source</code> or it is not possible to create a
  <code>Transformer</code> instance.

@see <a href=\"http://www.w3.org/TR/xslt\">
  XSL Transformations (XSLT) Version 1.0</a>"
      end

      operation 1923739 "newTransformer"
	abstract public return_type class_ref 306331 // Transformer
	nparams 0
	nexceptions 1
	  exception class_ref 306459 // TransformerConfigurationException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Create a new <code>Transformer</code> that performs a copy
of the <code>Source</code> to the <code>Result</code>.
i.e. the \"<em>identity transform</em>\".</p>

@return A Transformer object that may be used to perform a transformation
in a single thread, never null.

@exception TransformerConfigurationException Thrown if it is not
  possible to create a <code>Transformer</code> instance."
      end

      operation 1923867 "newTemplates"
	abstract public return_type class_ref 306203 // Templates
	nparams 1
	  param inout name "source" type class_ref 305947 // Source
	nexceptions 1
	  exception class_ref 306459 // TransformerConfigurationException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Process the Source into a Templates object, which is a
a compiled representation of the source. This Templates object
may then be used concurrently across multiple threads.  Creating
a Templates object allows the TransformerFactory to do detailed
performance optimization of transformation instructions, without
penalizing runtime transformation.

@param source An object that holds a URL, input stream, etc.

@return A Templates object capable of being used for transformation
purposes, never null.

@exception TransformerConfigurationException May throw this during the
parse when it is constructing the Templates object and fails."
      end

      operation 1923995 "getAssociatedStylesheet"
	abstract public return_type class_ref 305947 // Source
	nparams 4
	  param inout name "source" type class_ref 305947 // Source
	  param inout name "media" type class_ref 3399692 // String
	  param inout name "title" type class_ref 3399692 // String
	  param inout name "charset" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 306459 // TransformerConfigurationException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the stylesheet specification(s) associated with the
XML <code>Source</code> document via the
<a href=\"http://www.w3.org/TR/xml-stylesheet/\">
xml-stylesheet processing instruction</a> that match the given criteria.
Note that it is possible to return several stylesheets, in which case
they are applied as if they were a list of imports or cascades in a
single stylesheet.</p>

@param source The XML source document.
@param media The media attribute to be matched.  May be null, in which
     case the preferred templates will be used (i.e. alternate = no).
@param title The value of the title attribute to match.  May be null.
@param charset The value of the charset attribute to match.  May be null.

@return A <code>Source</code> <code>Object</code> suitable for passing
  to the <code>TransformerFactory</code>.

@throws TransformerConfigurationException An <code>Exception</code>
  is thrown if an error occurs during parsing of the
  <code>source</code>.

@see <a href=\"http://www.w3.org/TR/xml-stylesheet/\">
  Associating Style Sheets with XML documents Version 1.0</a>"
      end

      operation 1924123 "setURIResolver"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "resolver" type class_ref 306587 // URIResolver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set an object that is used by default during the transformation
to resolve URIs used in document(), xsl:import, or xsl:include.

@param resolver An object that implements the URIResolver interface,
or null."
      end

      operation 1924251 "getURIResolver"
	abstract public return_type class_ref 306587 // URIResolver
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the object that is used by default during the transformation
to resolve URIs used in document(), xsl:import, or xsl:include.

@return The URIResolver that was set with setURIResolver."
      end

      operation 1924379 "setFeature"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 306459 // TransformerConfigurationException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "======= CONFIGURATION METHODS =======

<p>Set a feature for this <code>TransformerFactory</code> and <code>Transformer</code>s
or <code>Template</code>s created by this factory.</p>

<p>
Feature names are fully qualified {@link java.net.URI}s.
Implementations may define their own features.
An {@link TransformerConfigurationException} is thrown if this <code>TransformerFactory</code> or the
<code>Transformer</code>s or <code>Template</code>s it creates cannot support the feature.
It is possible for an <code>TransformerFactory</code> to expose a feature value but be unable to change its state.
</p>

<p>All implementations are required to support the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature.
When the feature is:</p>
<ul>
  <li>
    <code>true</code>: the implementation will limit XML processing to conform to implementation limits
    and behave in a secure fashion as defined by the implementation.
    Examples include resolving user defined style sheets and functions.
    If XML processing is limited for security reasons, it will be reported via a call to the registered
    {@link ErrorListener#fatalError(TransformerException exception)}.
    See {@link  #setErrorListener(ErrorListener listener)}.
  </li>
  <li>
    <code>false</code>: the implementation will processing XML according to the XML specifications without
    regard to possible implementation limits.
  </li>
</ul>

@param name Feature name.
@param value Is feature state <code>true</code> or <code>false</code>.

@throws TransformerConfigurationException if this <code>TransformerFactory</code>
  or the <code>Transformer</code>s or <code>Template</code>s it creates cannot support this feature.
@throws NullPointerException If the <code>name</code> parameter is null."
      end

      operation 1924507 "getFeature"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look up the value of a feature.

<p>
Feature names are fully qualified {@link java.net.URI}s.
Implementations may define their own features.
<code>false</code> is returned if this <code>TransformerFactory</code> or the
<code>Transformer</code>s or <code>Template</code>s it creates cannot support the feature.
It is possible for an <code>TransformerFactory</code> to expose a feature value but be unable to change its state.
</p>

@param name Feature name.

@return The current state of the feature, <code>true</code> or <code>false</code>.

@throws NullPointerException If the <code>name</code> parameter is null."
      end

      operation 1924635 "setAttribute"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 3399692 // String
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the user to set specific attributes on the underlying
implementation.  An attribute in this context is defined to
be an option that the implementation provides.
An <code>IllegalArgumentException</code> is thrown if the underlying
implementation doesn't recognize the attribute.

@param name The name of the attribute.
@param value The value of the attribute."
      end

      operation 1924763 "getAttribute"
	abstract public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the user to retrieve specific attributes on the underlying
implementation.
An <code>IllegalArgumentException</code> is thrown if the underlying
implementation doesn't recognize the attribute.

@param name The name of the attribute.
@return value The value of the attribute."
      end

      operation 1924891 "setErrorListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 305435 // ErrorListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the error event listener for the TransformerFactory, which
is used for the processing of transformation instructions,
and not for the transformation itself.
An <code>IllegalArgumentException</code> is thrown if the
<code>ErrorListener</code> listener is <code>null</code>.

@param listener The new error listener."
      end

      operation 1925019 "getErrorListener"
	abstract public return_type class_ref 305435 // ErrorListener
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the error event handler for the TransformerFactory.

@return The current error handler, which should never be null."
      end
    end

    class 306843 "TransformerFactoryConfigurationError"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a problem with configuration with the Transformer Factories
exists. This error will typically be thrown when the class of a
transformation factory specified in the system properties cannot be found
or instantiated."
      classrelation 544411 // <generalisation>
	relation 544411 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 544411 // <generalisation>
	  b parent class_ref 143643 // Error
      end

      classrelation 544539 // exception (<unidirectional association>)
	relation 544539 --->
	  a role_name "exception" private
	    comment "
<code>Exception</code> for the
 <code>TransformerFactoryConfigurationError</code>.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 544539 // exception (<unidirectional association>)
	  b parent class_ref 132251 // Exception
      end

      operation 1925147 "TransformerFactoryConfigurationError"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>TransformerFactoryConfigurationError</code> with no
detail message."
      end

      operation 1925275 "TransformerFactoryConfigurationError"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>TransformerFactoryConfigurationError</code> with
the <code>String</code> specified as an error message.

@param msg The error message for the exception."
      end

      operation 1925403 "TransformerFactoryConfigurationError"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 132251 // Exception
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>TransformerFactoryConfigurationError</code> with a
given <code>Exception</code> base cause of the error.

@param e The exception to be encapsulated in a
TransformerFactoryConfigurationError."
      end

      operation 1925531 "TransformerFactoryConfigurationError"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 132251 // Exception
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>TransformerFactoryConfigurationError</code> with the
given <code>Exception</code> base cause and detail message.

@param e The exception to be encapsulated in a
TransformerFactoryConfigurationError
@param msg The detail message."
      end

      operation 1925659 "getMessage"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the message (if any) for this error . If there is no
message for the exception and there is an encapsulated
exception then the message of that exception will be returned.

@return The error message."
      end

      operation 1925787 "getException"
	public return_type class_ref 132251 // Exception
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the actual exception (if any) that caused this exception to
be raised.

@return The encapsulated exception, or null if there is none."
      end
    end
  end

  deploymentview 134299 "transform"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 259227 "ErrorListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 305435 // ErrorListener
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: ErrorListener.java 569994 2007-08-27 04:28:57Z mrglavas $"
    end

    artifact 259355 "OutputKeys"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 305691 // OutputKeys
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: OutputKeys.java 569994 2007-08-27 04:28:57Z mrglavas $"
    end

    artifact 259483 "Result"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 305819 // Result
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

  $Id: Result.java 446598 2006-09-15 12:55:40Z jeremias $"
    end

    artifact 259611 "Source"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 305947 // Source
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: Source.java 446598 2006-09-15 12:55:40Z jeremias $"
    end

    artifact 259739 "SourceLocator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 306075 // SourceLocator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: SourceLocator.java 446598 2006-09-15 12:55:40Z jeremias $"
    end

    artifact 259867 "Templates"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Properties;
${definition}"
      associated_classes
	class_ref 306203 // Templates
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: Templates.java 570103 2007-08-27 13:24:55Z mrglavas $"
    end

    artifact 259995 "Transformer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Properties;
${definition}"
      associated_classes
	class_ref 306331 // Transformer
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: Transformer.java 570103 2007-08-27 13:24:55Z mrglavas $"
    end

    artifact 260123 "TransformerException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 305563 // TransformerException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: TransformerException.java 569994 2007-08-27 04:28:57Z mrglavas $"
    end

    artifact 260251 "TransformerConfigurationException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 306459 // TransformerConfigurationException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: TransformerConfigurationException.java 569994 2007-08-27 04:28:57Z mrglavas $"
    end

    artifact 260379 "TransformerFactory"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 306715 // TransformerFactory
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: TransformerFactory.java 884963 2009-11-27 19:11:59Z mrglavas $"
    end

    artifact 260507 "TransformerFactoryConfigurationError"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 306843 // TransformerFactoryConfigurationError
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: TransformerFactoryConfigurationError.java 569994 2007-08-27 04:28:57Z mrglavas $"
    end

    artifact 260635 "URIResolver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 306587 // URIResolver
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: URIResolver.java 446598 2006-09-15 12:55:40Z jeremias $"
    end
  end

  package_ref 136987 // dom

  package_ref 137115 // sax

  package_ref 137371 // stream
end
