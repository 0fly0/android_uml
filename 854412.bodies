class NfcActivityManager
!!!3774732.java!!!	findAppState(inout app : Application) : NfcApplicationState
        for (NfcApplicationState appState : mApps) {
            if (appState.app == app) {
                return appState;
            }
        }
        return null;
!!!3774860.java!!!	registerApplication(inout app : Application) : void
        NfcApplicationState appState = findAppState(app);
        if (appState == null) {
            appState = new NfcApplicationState(app);
            mApps.add(appState);
        }
        appState.register();
!!!3774988.java!!!	unregisterApplication(inout app : Application) : void
        NfcApplicationState appState = findAppState(app);
        if (appState == null) {
            Log.e(TAG, "app was not registered " + app);
            return;
        }
        appState.unregister();
!!!3775500.java!!!	findActivityState(inout activity : Activity) : NfcActivityState
        for (NfcActivityState state : mActivities) {
            if (state.activity == activity) {
                return state;
            }
        }
        return null;
!!!3775628.java!!!	getActivityState(inout activity : Activity) : NfcActivityState
        NfcActivityState state = findActivityState(activity);
        if (state == null) {
            state = new NfcActivityState(activity);
            mActivities.add(state);
        }
        return state;
!!!3775756.java!!!	findResumedActivityState() : NfcActivityState
        for (NfcActivityState state : mActivities) {
            if (state.resumed) {
                return state;
            }
        }
        return null;
!!!3775884.java!!!	destroyActivityState(inout activity : Activity) : void
        NfcActivityState activityState = findActivityState(activity);
        if (activityState != null) {
            activityState.destroy();
            mActivities.remove(activityState);
        }
!!!3776012.java!!!	NfcActivityManager(inout adapter : NfcAdapter)
        mAdapter = adapter;
        mActivities = new LinkedList<NfcActivityState>();
        mApps = new ArrayList<NfcApplicationState>(1);  // Android VM usually has 1 app
        mDefaultEvent = new NfcEvent(mAdapter);
!!!3776140.java!!!	setNdefPushContentUri(inout activity : Activity, inout uris : Uri) : void
        boolean isResumed;
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = getActivityState(activity);
            state.uris = uris;
            isResumed = state.resumed;
        }
        if (isResumed) {
            requestNfcServiceCallback(true);
        }
!!!3776268.java!!!	setNdefPushContentUriCallback(inout activity : Activity, inout callback : CreateBeamUrisCallback) : void
        boolean isResumed;
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = getActivityState(activity);
            state.uriCallback = callback;
            isResumed = state.resumed;
        }
        if (isResumed) {
            requestNfcServiceCallback(true);
        }
!!!3776396.java!!!	setNdefPushMessage(inout activity : Activity, inout message : NdefMessage) : void
        boolean isResumed;
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = getActivityState(activity);
            state.ndefMessage = message;
            isResumed = state.resumed;
        }
        if (isResumed) {
            requestNfcServiceCallback(true);
        }
!!!3776524.java!!!	setNdefPushMessageCallback(inout activity : Activity, inout callback : CreateNdefMessageCallback) : void
        boolean isResumed;
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = getActivityState(activity);
            state.ndefMessageCallback = callback;
            isResumed = state.resumed;
        }
        if (isResumed) {
            requestNfcServiceCallback(true);
        }
!!!3776652.java!!!	setOnNdefPushCompleteCallback(inout activity : Activity, inout callback : OnNdefPushCompleteCallback) : void
        boolean isResumed;
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = getActivityState(activity);
            state.onNdefPushCompleteCallback = callback;
            isResumed = state.resumed;
        }
        if (isResumed) {
            requestNfcServiceCallback(true);
        }
!!!3776780.java!!!	requestNfcServiceCallback(inout request : boolean) : void
        try {
            NfcAdapter.sService.setNdefPushCallback(request ? this : null);
        } catch (RemoteException e) {
            mAdapter.attemptDeadServiceRecovery(e);
        }
!!!3776908.java!!!	createMessage() : NdefMessage
        NfcAdapter.CreateNdefMessageCallback callback;
        NdefMessage message;
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = findResumedActivityState();
            if (state == null) return null;

            callback = state.ndefMessageCallback;
            message = state.ndefMessage;
        }

        // Make callback without lock
        if (callback != null) {
            return callback.createNdefMessage(mDefaultEvent);
        } else {
            return message;
        }
!!!3777036.java!!!	getUris() : Uri
        Uri[] uris;
        NfcAdapter.CreateBeamUrisCallback callback;
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = findResumedActivityState();
            if (state == null) return null;
            uris = state.uris;
            callback = state.uriCallback;
        }
        if (callback != null) {
            uris = callback.createBeamUris(mDefaultEvent);
            if (uris != null) {
                for (Uri uri : uris) {
                    if (uri == null) {
                        Log.e(TAG, "Uri not allowed to be null.");
                        return null;
                    }
                    String scheme = uri.getScheme();
                    if (scheme == null || (!scheme.equalsIgnoreCase("file") &&
                            !scheme.equalsIgnoreCase("content"))) {
                        Log.e(TAG, "Uri needs to have " +
                                "either scheme file or scheme content");
                        return null;
                    }
                }
            }
            return uris;
        } else {
            return uris;
        }
!!!3777164.java!!!	onNdefPushComplete() : void
        NfcAdapter.OnNdefPushCompleteCallback callback;
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = findResumedActivityState();
            if (state == null) return;

            callback = state.onNdefPushCompleteCallback;
        }

        // Make callback without lock
        if (callback != null) {
            callback.onNdefPushComplete(mDefaultEvent);
        }
!!!3777292.java!!!	onActivityCreated(inout activity : Activity, inout savedInstanceState : Bundle) : void
 /* NO-OP */
!!!3777420.java!!!	onActivityStarted(inout activity : Activity) : void
 /* NO-OP */
!!!3777548.java!!!	onActivityResumed(inout activity : Activity) : void
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = findActivityState(activity);
            if (DBG) Log.d(TAG, "onResume() for " + activity + " " + state);
            if (state == null) return;
            state.resumed = true;
        }
        requestNfcServiceCallback(true);
!!!3777676.java!!!	onActivityPaused(inout activity : Activity) : void
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = findActivityState(activity);
            if (DBG) Log.d(TAG, "onPause() for " + activity + " " + state);
            if (state == null) return;
            state.resumed = false;
        }
        requestNfcServiceCallback(false);
!!!3777804.java!!!	onActivityStopped(inout activity : Activity) : void
 /* NO-OP */
!!!3777932.java!!!	onActivitySaveInstanceState(inout activity : Activity, inout outState : Bundle) : void
 /* NO-OP */
!!!3778060.java!!!	onActivityDestroyed(inout activity : Activity) : void
        synchronized (NfcActivityManager.this) {
            NfcActivityState state = findActivityState(activity);
            if (DBG) Log.d(TAG, "onDestroy() for " + activity + " " + state);
            if (state != null) {
                // release all associated references
                destroyActivityState(activity);
            }
        }
