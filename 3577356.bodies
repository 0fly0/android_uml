class BinaryHprofReader
!!!15457676.java!!!	BinaryHprofReader(inout inputStream : InputStream)
        this.in = new DataInputStream(inputStream);
!!!15457804.java!!!	getStrict() : boolean
        return strict;
!!!15457932.java!!!	setStrict(inout strict : boolean) : void
        if (version != null) {
            throw new IllegalStateException("cannot set strict after read()");
        }
        this.strict = strict;
!!!15458060.java!!!	checkRead() : void
        if (version == null) {
            throw new IllegalStateException("data access before read()");
        }
!!!15458188.java!!!	getVersion() : String
        checkRead();
        return version;
!!!15458316.java!!!	getHprofData() : HprofData
        checkRead();
        return hprofData;
!!!15458444.java!!!	read() : void
        parseHeader();
        parseRecords();
!!!15458572.java!!!	parseHeader() : void
        if (TRACE) {
            System.out.println("hprofTag=HEADER");
        }
        parseVersion();
        parseIdSize();
        parseTime();
!!!15458700.java!!!	parseVersion() : void
        String version = BinaryHprof.readMagic(in);
        if (version == null) {
            throw new MalformedHprofException("Could not find HPROF version");
        }
        if (TRACE) {
            System.out.println("\tversion=" + version);
        }
        this.version = version;
!!!15458828.java!!!	parseIdSize() : void
        int idSize = in.readInt();
        if (TRACE) {
            System.out.println("\tidSize=" + idSize);
        }
        if (idSize != BinaryHprof.ID_SIZE) {
            throw new MalformedHprofException("Unsupported identifier size: " + idSize);
        }
!!!15458956.java!!!	parseTime() : void
        long time = in.readLong();
        if (TRACE) {
            System.out.println("\ttime=" + Long.toHexString(time) + " " + new Date(time));
        }
        hprofData.setStartMillis(time);
!!!15459084.java!!!	parseRecords() : void
        while (parseRecord()) {
            ;
        }
!!!15459212.java!!!	parseRecord() : boolean
        int tagOrEOF = in.read();
        if (tagOrEOF == -1) {
            return false;
        }
        byte tag = (byte) tagOrEOF;
        int timeDeltaInMicroseconds = in.readInt();
        int recordLength = in.readInt();
        BinaryHprof.Tag hprofTag = BinaryHprof.Tag.get(tag);
        if (TRACE) {
            System.out.println("hprofTag=" + hprofTag);
        }
        if (hprofTag == null) {
            skipRecord(hprofTag, recordLength);
            return true;
        }
        String error = hprofTag.checkSize(recordLength);
        if (error != null) {
            throw new MalformedHprofException(error);
        }
        switch (hprofTag) {
            case CONTROL_SETTINGS:
                parseControlSettings();
                return true;

            case STRING_IN_UTF8:
                parseStringInUtf8(recordLength);
                return true;

            case START_THREAD:
                parseStartThread();
                return true;
            case END_THREAD:
                parseEndThread();
                return true;

            case LOAD_CLASS:
                parseLoadClass();
                return true;
            case STACK_FRAME:
                parseStackFrame();
                return true;
            case STACK_TRACE:
                parseStackTrace(recordLength);
                return true;

            case CPU_SAMPLES:
                parseCpuSamples(recordLength);
                return true;

            case UNLOAD_CLASS:
            case ALLOC_SITES:
            case HEAP_SUMMARY:
            case HEAP_DUMP:
            case HEAP_DUMP_SEGMENT:
            case HEAP_DUMP_END:
            default:
                skipRecord(hprofTag, recordLength);
                return true;
        }
!!!15459340.java!!!	skipRecord(inout hprofTag : Tag, in recordLength : long) : void
        if (TRACE) {
            System.out.println("\tskipping recordLength=" + recordLength);
        }
        long skipped = in.skip(recordLength);
        if (skipped != recordLength) {
            throw new EOFException("Expected to skip " + recordLength
                                   + " bytes but only skipped " + skipped + " bytes");
        }
!!!15459468.java!!!	parseControlSettings() : void
        int flags = in.readInt();
        short depth = in.readShort();
        if (TRACE) {
            System.out.println("\tflags=" + Integer.toHexString(flags));
            System.out.println("\tdepth=" + depth);
        }
        hprofData.setFlags(flags);
        hprofData.setDepth(depth);
!!!15459596.java!!!	parseStringInUtf8(in recordLength : int) : void
        int stringId = in.readInt();
        byte[] bytes = new byte[recordLength - BinaryHprof.ID_SIZE];
        readFully(in, bytes);
        String string = new String(bytes, "UTF-8");
        if (TRACE) {
            System.out.println("\tstring=" + string);
        }
        String old = idToString.put(stringId, string);
        if (old != null) {
            throw new MalformedHprofException("Duplicate string id: " + stringId);
        }
!!!15459724.java!!!	readFully(inout in : InputStream, inout dst : byte) : void
        int offset = 0;
        int byteCount = dst.length;
        while (byteCount > 0) {
            int bytesRead = in.read(dst, offset, byteCount);
            if (bytesRead < 0) {
                throw new EOFException();
            }
            offset += bytesRead;
            byteCount -= bytesRead;
        }
!!!15459852.java!!!	parseLoadClass() : void
        int classId = in.readInt();
        int classObjectId = readId();
        // serial number apparently not a stack trace id. (int vs ID)
        // we don't use this field.
        int stackTraceSerialNumber = in.readInt();
        String className = readString();
        if (TRACE) {
            System.out.println("\tclassId=" + classId);
            System.out.println("\tclassObjectId=" + classObjectId);
            System.out.println("\tstackTraceSerialNumber=" + stackTraceSerialNumber);
            System.out.println("\tclassName=" + className);
        }
        String old = idToClassName.put(classId, className);
        if (old != null) {
            throw new MalformedHprofException("Duplicate class id: " + classId);
        }
!!!15459980.java!!!	readId() : int
        return in.readInt();
!!!15460108.java!!!	readString() : String
        int id = readId();
        if (id == 0) {
            return null;
        }
        String string = idToString.get(id);
        if (string == null) {
            throw new MalformedHprofException("Unknown string id " + id);
        }
        return string;
!!!15460236.java!!!	readClass() : String
        int id = readId();
        String string = idToClassName.get(id);
        if (string == null) {
            throw new MalformedHprofException("Unknown class id " + id);
        }
        return string;
!!!15460364.java!!!	parseStartThread() : void
        int threadId = in.readInt();
        int objectId = readId();
        // stack trace where thread was created.
        // serial number apparently not a stack trace id. (int vs ID)
        // we don't use this field.
        int stackTraceSerialNumber = in.readInt();
        String threadName = readString();
        String groupName = readString();
        String parentGroupName = readString();
        if (TRACE) {
            System.out.println("\tthreadId=" + threadId);
            System.out.println("\tobjectId=" + objectId);
            System.out.println("\tstackTraceSerialNumber=" + stackTraceSerialNumber);
            System.out.println("\tthreadName=" + threadName);
            System.out.println("\tgroupName=" + groupName);
            System.out.println("\tparentGroupName=" + parentGroupName);
        }
        HprofData.ThreadEvent event
                = HprofData.ThreadEvent.start(objectId, threadId,
                                              threadName, groupName, parentGroupName);
        hprofData.addThreadEvent(event);
!!!15460492.java!!!	parseEndThread() : void
        int threadId = in.readInt();
        if (TRACE) {
            System.out.println("\tthreadId=" + threadId);
        }
        HprofData.ThreadEvent event = HprofData.ThreadEvent.end(threadId);
        hprofData.addThreadEvent(event);
!!!15460620.java!!!	parseStackFrame() : void
        int stackFrameId = readId();
        String methodName = readString();
        String methodSignature = readString();
        String file = readString();
        String className = readClass();
        int line = in.readInt();
        if (TRACE) {
            System.out.println("\tstackFrameId=" + stackFrameId);
            System.out.println("\tclassName=" + className);
            System.out.println("\tmethodName=" + methodName);
            System.out.println("\tmethodSignature=" + methodSignature);
            System.out.println("\tfile=" + file);
            System.out.println("\tline=" + line);
        }
        StackTraceElement stackFrame = new StackTraceElement(className, methodName, file, line);
        StackTraceElement old = idToStackFrame.put(stackFrameId, stackFrame);
        if (old != null) {
            throw new MalformedHprofException("Duplicate stack frame id: " + stackFrameId);
        }
!!!15460748.java!!!	parseStackTrace(in recordLength : int) : void
        int stackTraceId = in.readInt();
        int threadId = in.readInt();
        int frames = in.readInt();
        if (TRACE) {
            System.out.println("\tstackTraceId=" + stackTraceId);
            System.out.println("\tthreadId=" + threadId);
            System.out.println("\tframes=" + frames);
        }
        int expectedLength = 4 + 4 + 4 + (frames * BinaryHprof.ID_SIZE);
        if (recordLength != expectedLength) {
            throw new MalformedHprofException("Expected stack trace record of size "
                                              + expectedLength
                                              + " based on number of frames but header "
                                              + "specified a length of  " + recordLength);
        }
        StackTraceElement[] stackFrames = new StackTraceElement[frames];
        for (int i = 0; i < frames; i++) {
            int stackFrameId = readId();
            StackTraceElement stackFrame = idToStackFrame.get(stackFrameId);
            if (TRACE) {
                System.out.println("\tstackFrameId=" + stackFrameId);
                System.out.println("\tstackFrame=" + stackFrame);
            }
            if (stackFrame == null) {
                throw new MalformedHprofException("Unknown stack frame id " + stackFrameId);
            }
            stackFrames[i] = stackFrame;
        }

        HprofData.StackTrace stackTrace
                = new HprofData.StackTrace(stackTraceId, threadId, stackFrames);
        if (strict) {
            hprofData.addStackTrace(stackTrace, new int[1]);
        } else {
            // The RI can have duplicate stacks, presumably they
            // have a minor race if two samples with the same
            // stack are taken around the same time. if we have a
            // duplicate, just skip adding it to hprofData, but
            // register it locally in idToStackFrame. if it seen
            // in CPU_SAMPLES, we will find a StackTrace is equal
            // to the first, so they will share a countCell.
            int[] countCell = stackTraces.get(stackTrace);
            if (countCell == null) {
                hprofData.addStackTrace(stackTrace, new int[1]);
            }
        }

        HprofData.StackTrace old = idToStackTrace.put(stackTraceId, stackTrace);
        if (old != null) {
            throw new MalformedHprofException("Duplicate stack trace id: " + stackTraceId);
        }

!!!15460876.java!!!	parseCpuSamples(in recordLength : int) : void
        int totalSamples = in.readInt();
        int samplesCount = in.readInt();
        if (TRACE) {
            System.out.println("\ttotalSamples=" + totalSamples);
            System.out.println("\tsamplesCount=" + samplesCount);
        }
        int expectedLength = 4 + 4 + (samplesCount * (4 + 4));
        if (recordLength != expectedLength) {
            throw new MalformedHprofException("Expected CPU samples record of size "
                                              + expectedLength
                                              + " based on number of samples but header "
                                              + "specified a length of  " + recordLength);
        }
        int total = 0;
        for (int i = 0; i < samplesCount; i++) {
            int count = in.readInt();
            int stackTraceId = in.readInt();
            if (TRACE) {
                System.out.println("\tcount=" + count);
                System.out.println("\tstackTraceId=" + stackTraceId);
            }
            HprofData.StackTrace stackTrace = idToStackTrace.get(stackTraceId);
            if (stackTrace == null) {
                throw new MalformedHprofException("Unknown stack trace id " + stackTraceId);
            }
            if (count == 0) {
                throw new MalformedHprofException("Zero sample count for stack trace "
                                                  + stackTrace);
            }
            int[] countCell = stackTraces.get(stackTrace);
            if (strict) {
                if (countCell[0] != 0) {
                    throw new MalformedHprofException("Setting sample count of stack trace "
                                                      + stackTrace + " to " + count
                                                      + " found it was already initialized to "
                                                      + countCell[0]);
                }
            } else {
                // Coalesce counts from duplicate stack traces.
                // For more on this, see comments in parseStackTrace.
                count += countCell[0];
            }
            countCell[0] = count;
            total += count;
        }
        if (strict && totalSamples != total) {
            throw new MalformedHprofException("Expected a total of " + totalSamples
                                              + " samples but saw " + total);
        }
