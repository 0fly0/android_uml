class TwoWayDeviceSelectionFragment
!!!14219148.java!!!	TwoWayDeviceSelectionFragment(inout context : Context)
        super(context);
!!!14219276.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        if (container == null) return null;

        View view = inflater.inflate(R.layout.two_way_device_selection, null);

        mListView = (ListView) view.findViewById(R.id.device_list);
        mProgressBar = (ProgressBar) view.findViewById(R.id.progress_bar);

        mDeviceAdapter = new DeviceAdapter(getActivity(), true /* checkable */,
                false /* showsIcon */);
        mListView.setAdapter(mDeviceAdapter);

        mEmptyView = view.findViewById(R.id.empty);

        mListView.setOnItemClickListener(new OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> parent, View view,
                        int position, long id) {
                    focusNext();
                }
            });

        return view;
!!!14219404.java!!!	onAccept() : boolean
        Device device = null;
        synchronized (mDeviceAdapter) {
            int position = mListView.getCheckedItemPosition();
            device = mDeviceAdapter.getItem(position);
        }
        if (device != null) {
            setProperty(SetupProperties.DEVICE_PROPERTY, device);
            return true;
        } else {
            return false;
        }
!!!14219532.java!!!	onResume() : void
        super.onResume();

        loadSupportedDeviceList();

        setTitleText(getString(R.string.set_up_media_device_title));
        setSubtitleText(getActivity().getString(R.string.select_device_title));
        mListView.setVisibility(View.GONE);
        mProgressBar.setVisibility(View.VISIBLE);
        synchronized (mDeviceAdapter) {
            mDeviceAdapter.clear();
        }
        setNextEnabled(false);

        mHideScanRunnable = new Runnable() {
                @Override
                public void run() {
                    mProgressBar.setVisibility(View.GONE);
                    mListView.setVisibility(View.VISIBLE);

                    if (mDeviceAdapter.isEmpty()) {
                        mListView.setEmptyView(mEmptyView);
                        focusBack();
                    }
                }
            };
        getHandler().postDelayed(mHideScanRunnable, DEVICE_SCAN_PROGRESS_TIMEOUT_MS);
        mDeviceAdapter.clear();
        startDeviceScan();
!!!14219660.java!!!	onPause() : void
        getHandler().removeCallbacks(mHideScanRunnable);
        stopDeviceScan();

        super.onPause();
!!!14219788.java!!!	onCancel() : void
        mDeviceAdapter.clear();
        stopDeviceScan();
!!!14219916.java!!!	startDeviceScan() : void
        stopDeviceScan();

        mDeviceLocator = new DeviceLocator(getActivity(), new DeviceLocator.Listener() {

                @Override
                public void onDeviceOnline(final Device device) {
                    if (TextUtils.isEmpty(device.getId())) {
                        // Don't add any device that has a bad ID.
                        return;
                    }

                    if (device.getType() != DeviceType.TWO_WAY) {
                        // We're only interested in two-way devices.
                        return;
                    }

                    if (!isDeviceSupported(device)) {
                        // Don't add any unsupported devices.
                        return;
                    }

                    synchronized (mDeviceAdapter) {
                        if (DEBUG) Log.d(TAG, "Found a device: " + device
                                + ", manuf: " + device.getManufacturer()
                                + ", model: " + device.getModel());
                        mDeviceAdapter.add(device);
                        mProgressBar.setVisibility(View.GONE);
                        mListView.setVisibility(View.VISIBLE);
                        mListView.setItemChecked(0, true);
                        requestFocusOnView(mListView);
                        setNextEnabled(true);
                    }
                }

                @Override
                public void onDeviceOffline(final Device device) {
                    synchronized (mDeviceAdapter) {
                        int pos = mDeviceAdapter.getPositionByDeviceId(device.getId());
                        if (pos >= 0) {
                            mDeviceAdapter.removeAt(pos);
                        }
                    }
                }
            });
        mDeviceLocator.start();
!!!14220044.java!!!	stopDeviceScan() : void
        if (DEBUG) Log.d(TAG, "stopDeviceScan()");
        if (mDeviceLocator != null) {
            mDeviceLocator.stop();
            mDeviceLocator = null;
        }
!!!14220172.java!!!	isDeviceSupported(inout device : Device) : boolean
        for (SupportedDevice supportedDevice : mSupportedDevices) {
            if (supportedDevice.matches(device)) {
                return true;
            }
        }

        return false;
!!!14220300.java!!!	loadSupportedDeviceList() : void
        if (mSupportedDevices != null) {
            return;
        }

        mSupportedDevices = new ArrayList<SupportedDevice>();

        String value = Gservices.getString(getActivity().getContentResolver(),
                GSERVICES_SUPPORTED_DEVICES);
        if (value == null) return;

        StringTokenizer st = new StringTokenizer(value, ",", false);
        while (st.hasMoreTokens()) {
            String token = st.nextToken();
            StringTokenizer st2 = new StringTokenizer(token, "|", false);
            String manufacturer = null, model = null;

            try {
                if (st2.hasMoreTokens()) {
                    manufacturer = URLDecoder.decode(st2.nextToken(), "UTF-8");
                }
                if (st2.hasMoreTokens()) {
                    model = URLDecoder.decode(st2.nextToken(), "UTF-8");
                }


                if (manufacturer == null) {
                    continue;
                }

                mSupportedDevices.add(new SupportedDevice(manufacturer, model));
            } catch (UnsupportedEncodingException ex) {}
        }
