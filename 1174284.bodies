class Allocation
!!!6512268.java!!!	getIDSafe() : int
        if (mAdaptedAllocation != null) {
            return mAdaptedAllocation.getID(mRS);
        }
        return getID(mRS);
!!!6512396.java!!!	getElement() : Element
        return mType.getElement();
!!!6512524.java!!!	getUsage() : int
        return mUsage;
!!!6512652.java!!!	getBytesSize() : int
        return mType.getCount() * mType.getElement().getBytesSize();
!!!6512780.java!!!	updateCacheInfo(inout t : Type) : void
        mCurrentDimX = t.getX();
        mCurrentDimY = t.getY();
        mCurrentDimZ = t.getZ();
        mCurrentCount = mCurrentDimX;
        if (mCurrentDimY > 1) {
            mCurrentCount *= mCurrentDimY;
        }
        if (mCurrentDimZ > 1) {
            mCurrentCount *= mCurrentDimZ;
        }
!!!6512908.java!!!	Allocation(in id : int, inout rs : RenderScript, inout t : Type, in usage : int)
        super(id, rs);
        if ((usage & ~(USAGE_SCRIPT |
                       USAGE_GRAPHICS_TEXTURE |
                       USAGE_GRAPHICS_VERTEX |
                       USAGE_GRAPHICS_CONSTANTS |
                       USAGE_GRAPHICS_RENDER_TARGET |
                       USAGE_IO_INPUT |
                       USAGE_IO_OUTPUT)) != 0) {
            throw new RSIllegalArgumentException("Unknown usage specified.");
        }

        if ((usage & USAGE_IO_INPUT) != 0) {
            mWriteAllowed = false;

            if ((usage & ~(USAGE_IO_INPUT |
                           USAGE_GRAPHICS_TEXTURE |
                           USAGE_SCRIPT)) != 0) {
                throw new RSIllegalArgumentException("Invalid usage combination.");
            }
        }

        mType = t;
        mUsage = usage;

        if (t != null) {
            updateCacheInfo(t);
        }
!!!6513036.java!!!	validateIsInt32() : void
        if ((mType.mElement.mType == Element.DataType.SIGNED_32) ||
            (mType.mElement.mType == Element.DataType.UNSIGNED_32)) {
            return;
        }
        throw new RSIllegalArgumentException(
            "32 bit integer source does not match allocation type " + mType.mElement.mType);
!!!6513164.java!!!	validateIsInt16() : void
        if ((mType.mElement.mType == Element.DataType.SIGNED_16) ||
            (mType.mElement.mType == Element.DataType.UNSIGNED_16)) {
            return;
        }
        throw new RSIllegalArgumentException(
            "16 bit integer source does not match allocation type " + mType.mElement.mType);
!!!6513292.java!!!	validateIsInt8() : void
        if ((mType.mElement.mType == Element.DataType.SIGNED_8) ||
            (mType.mElement.mType == Element.DataType.UNSIGNED_8)) {
            return;
        }
        throw new RSIllegalArgumentException(
            "8 bit integer source does not match allocation type " + mType.mElement.mType);
!!!6513420.java!!!	validateIsFloat32() : void
        if (mType.mElement.mType == Element.DataType.FLOAT_32) {
            return;
        }
        throw new RSIllegalArgumentException(
            "32 bit float source does not match allocation type " + mType.mElement.mType);
!!!6513548.java!!!	validateIsObject() : void
        if ((mType.mElement.mType == Element.DataType.RS_ELEMENT) ||
            (mType.mElement.mType == Element.DataType.RS_TYPE) ||
            (mType.mElement.mType == Element.DataType.RS_ALLOCATION) ||
            (mType.mElement.mType == Element.DataType.RS_SAMPLER) ||
            (mType.mElement.mType == Element.DataType.RS_SCRIPT) ||
            (mType.mElement.mType == Element.DataType.RS_MESH) ||
            (mType.mElement.mType == Element.DataType.RS_PROGRAM_FRAGMENT) ||
            (mType.mElement.mType == Element.DataType.RS_PROGRAM_VERTEX) ||
            (mType.mElement.mType == Element.DataType.RS_PROGRAM_RASTER) ||
            (mType.mElement.mType == Element.DataType.RS_PROGRAM_STORE)) {
            return;
        }
        throw new RSIllegalArgumentException(
            "Object source does not match allocation type " + mType.mElement.mType);
!!!6513676.java!!!	updateFromNative() : void
        super.updateFromNative();
        int typeID = mRS.nAllocationGetType(getID(mRS));
        if(typeID != 0) {
            mType = new Type(typeID, mRS);
            mType.updateFromNative();
            updateCacheInfo(mType);
        }
!!!6513804.java!!!	getType() : Type
        return mType;
!!!6513932.java!!!	syncAll(in srcLocation : int) : void
        switch (srcLocation) {
        case USAGE_SCRIPT:
        case USAGE_GRAPHICS_CONSTANTS:
        case USAGE_GRAPHICS_TEXTURE:
        case USAGE_GRAPHICS_VERTEX:
            break;
        default:
            throw new RSIllegalArgumentException("Source must be exactly one usage type.");
        }
        mRS.validate();
        mRS.nAllocationSyncAll(getIDSafe(), srcLocation);
!!!6514060.java!!!	ioSend() : void
        if ((mUsage & USAGE_IO_OUTPUT) == 0) {
            throw new RSIllegalArgumentException(
                "Can only send buffer if IO_OUTPUT usage specified.");
        }
        mRS.validate();
        mRS.nAllocationIoSend(getID(mRS));
!!!6514188.java!!!	ioSendOutput() : void
        ioSend();
!!!6514316.java!!!	ioReceive() : void
        if ((mUsage & USAGE_IO_INPUT) == 0) {
            throw new RSIllegalArgumentException(
                "Can only receive if IO_INPUT usage specified.");
        }
        mRS.validate();
        mRS.nAllocationIoReceive(getID(mRS));
!!!6514444.java!!!	copyFrom(inout d : BaseObj) : void
        mRS.validate();
        validateIsObject();
        if (d.length != mCurrentCount) {
            throw new RSIllegalArgumentException("Array size mismatch, allocation sizeX = " +
                                                 mCurrentCount + ", array length = " + d.length);
        }
        int i[] = new int[d.length];
        for (int ct=0; ct < d.length; ct++) {
            i[ct] = d[ct].getID(mRS);
        }
        copy1DRangeFromUnchecked(0, mCurrentCount, i);
!!!6514572.java!!!	validateBitmapFormat(inout b : Bitmap) : void
        Bitmap.Config bc = b.getConfig();
        switch (bc) {
        case ALPHA_8:
            if (mType.getElement().mKind != Element.DataKind.PIXEL_A) {
                throw new RSIllegalArgumentException("Allocation kind is " +
                                                     mType.getElement().mKind + ", type " +
                                                     mType.getElement().mType +
                                                     " of " + mType.getElement().getBytesSize() +
                                                     " bytes, passed bitmap was " + bc);
            }
            break;
        case ARGB_8888:
            if ((mType.getElement().mKind != Element.DataKind.PIXEL_RGBA) ||
                (mType.getElement().getBytesSize() != 4)) {
                throw new RSIllegalArgumentException("Allocation kind is " +
                                                     mType.getElement().mKind + ", type " +
                                                     mType.getElement().mType +
                                                     " of " + mType.getElement().getBytesSize() +
                                                     " bytes, passed bitmap was " + bc);
            }
            break;
        case RGB_565:
            if ((mType.getElement().mKind != Element.DataKind.PIXEL_RGB) ||
                (mType.getElement().getBytesSize() != 2)) {
                throw new RSIllegalArgumentException("Allocation kind is " +
                                                     mType.getElement().mKind + ", type " +
                                                     mType.getElement().mType +
                                                     " of " + mType.getElement().getBytesSize() +
                                                     " bytes, passed bitmap was " + bc);
            }
            break;
        case ARGB_4444:
            if ((mType.getElement().mKind != Element.DataKind.PIXEL_RGBA) ||
                (mType.getElement().getBytesSize() != 2)) {
                throw new RSIllegalArgumentException("Allocation kind is " +
                                                     mType.getElement().mKind + ", type " +
                                                     mType.getElement().mType +
                                                     " of " + mType.getElement().getBytesSize() +
                                                     " bytes, passed bitmap was " + bc);
            }
            break;

        }
!!!6514700.java!!!	validateBitmapSize(inout b : Bitmap) : void
        if((mCurrentDimX != b.getWidth()) || (mCurrentDimY != b.getHeight())) {
            throw new RSIllegalArgumentException("Cannot update allocation from bitmap, sizes mismatch");
        }
!!!6514828.java!!!	copyFromUnchecked(inout d : int) : void
        mRS.validate();
        copy1DRangeFromUnchecked(0, mCurrentCount, d);
!!!6514956.java!!!	copyFromUnchecked(inout d : short) : void
        mRS.validate();
        copy1DRangeFromUnchecked(0, mCurrentCount, d);
!!!6515084.java!!!	copyFromUnchecked(inout d : byte) : void
        mRS.validate();
        copy1DRangeFromUnchecked(0, mCurrentCount, d);
!!!6515212.java!!!	copyFromUnchecked(inout d : float) : void
        mRS.validate();
        copy1DRangeFromUnchecked(0, mCurrentCount, d);
!!!6515340.java!!!	copyFrom(inout d : int) : void
        mRS.validate();
        copy1DRangeFrom(0, mCurrentCount, d);
!!!6515468.java!!!	copyFrom(inout d : short) : void
        mRS.validate();
        copy1DRangeFrom(0, mCurrentCount, d);
!!!6515596.java!!!	copyFrom(inout d : byte) : void
        mRS.validate();
        copy1DRangeFrom(0, mCurrentCount, d);
!!!6515724.java!!!	copyFrom(inout d : float) : void
        mRS.validate();
        copy1DRangeFrom(0, mCurrentCount, d);
!!!6515852.java!!!	copyFrom(inout b : Bitmap) : void
        mRS.validate();
        validateBitmapSize(b);
        validateBitmapFormat(b);
        mRS.nAllocationCopyFromBitmap(getID(mRS), b);
!!!6515980.java!!!	setFromFieldPacker(in xoff : int, inout fp : FieldPacker) : void
        mRS.validate();
        int eSize = mType.mElement.getBytesSize();
        final byte[] data = fp.getData();

        int count = data.length / eSize;
        if ((eSize * count) != data.length) {
            throw new RSIllegalArgumentException("Field packer length " + data.length +
                                               " not divisible by element size " + eSize + ".");
        }
        copy1DRangeFromUnchecked(xoff, count, data);
!!!6516108.java!!!	setFromFieldPacker(in xoff : int, in component_number : int, inout fp : FieldPacker) : void
        mRS.validate();
        if (component_number >= mType.mElement.mElements.length) {
            throw new RSIllegalArgumentException("Component_number " + component_number + " out of range.");
        }
        if(xoff < 0) {
            throw new RSIllegalArgumentException("Offset must be >= 0.");
        }

        final byte[] data = fp.getData();
        int eSize = mType.mElement.mElements[component_number].getBytesSize();
        eSize *= mType.mElement.mArraySizes[component_number];

        if (data.length != eSize) {
            throw new RSIllegalArgumentException("Field packer sizelength " + data.length +
                                               " does not match component size " + eSize + ".");
        }

        mRS.nAllocationElementData1D(getIDSafe(), xoff, mSelectedLOD,
                                     component_number, data, data.length);
!!!6516236.java!!!	data1DChecks(in off : int, in count : int, in len : int, in dataSize : int) : void
        mRS.validate();
        if(off < 0) {
            throw new RSIllegalArgumentException("Offset must be >= 0.");
        }
        if(count < 1) {
            throw new RSIllegalArgumentException("Count must be >= 1.");
        }
        if((off + count) > mCurrentCount) {
            throw new RSIllegalArgumentException("Overflow, Available count " + mCurrentCount +
                                               ", got " + count + " at offset " + off + ".");
        }
        if(len < dataSize) {
            throw new RSIllegalArgumentException("Array too small for allocation type.");
        }
!!!6516364.java!!!	generateMipmaps() : void
        mRS.nAllocationGenerateMipmaps(getID(mRS));
!!!6516492.java!!!	copy1DRangeFromUnchecked(in off : int, in count : int, inout d : int) : void
        int dataSize = mType.mElement.getBytesSize() * count;
        data1DChecks(off, count, d.length * 4, dataSize);
        mRS.nAllocationData1D(getIDSafe(), off, mSelectedLOD, count, d, dataSize);
!!!6516620.java!!!	copy1DRangeFromUnchecked(in off : int, in count : int, inout d : short) : void
        int dataSize = mType.mElement.getBytesSize() * count;
        data1DChecks(off, count, d.length * 2, dataSize);
        mRS.nAllocationData1D(getIDSafe(), off, mSelectedLOD, count, d, dataSize);
!!!6516748.java!!!	copy1DRangeFromUnchecked(in off : int, in count : int, inout d : byte) : void
        int dataSize = mType.mElement.getBytesSize() * count;
        data1DChecks(off, count, d.length, dataSize);
        mRS.nAllocationData1D(getIDSafe(), off, mSelectedLOD, count, d, dataSize);
!!!6516876.java!!!	copy1DRangeFromUnchecked(in off : int, in count : int, inout d : float) : void
        int dataSize = mType.mElement.getBytesSize() * count;
        data1DChecks(off, count, d.length * 4, dataSize);
        mRS.nAllocationData1D(getIDSafe(), off, mSelectedLOD, count, d, dataSize);
!!!6517004.java!!!	copy1DRangeFrom(in off : int, in count : int, inout d : int) : void
        validateIsInt32();
        copy1DRangeFromUnchecked(off, count, d);
!!!6517132.java!!!	copy1DRangeFrom(in off : int, in count : int, inout d : short) : void
        validateIsInt16();
        copy1DRangeFromUnchecked(off, count, d);
!!!6517260.java!!!	copy1DRangeFrom(in off : int, in count : int, inout d : byte) : void
        validateIsInt8();
        copy1DRangeFromUnchecked(off, count, d);
!!!6517388.java!!!	copy1DRangeFrom(in off : int, in count : int, inout d : float) : void
        validateIsFloat32();
        copy1DRangeFromUnchecked(off, count, d);
!!!6517516.java!!!	copy1DRangeFrom(in off : int, in count : int, inout data : Allocation, in dataOff : int) : void
        mRS.nAllocationData2D(getIDSafe(), off, 0,
                              mSelectedLOD, mSelectedFace.mID,
                              count, 1, data.getID(mRS), dataOff, 0,
                              data.mSelectedLOD, data.mSelectedFace.mID);
!!!6517644.java!!!	validate2DRange(in xoff : int, in yoff : int, in w : int, in h : int) : void
        if (mAdaptedAllocation != null) {

        } else {

            if (xoff < 0 || yoff < 0) {
                throw new RSIllegalArgumentException("Offset cannot be negative.");
            }
            if (h < 0 || w < 0) {
                throw new RSIllegalArgumentException("Height or width cannot be negative.");
            }
            if (((xoff + w) > mCurrentDimX) || ((yoff + h) > mCurrentDimY)) {
                throw new RSIllegalArgumentException("Updated region larger than allocation.");
            }
        }
!!!6517772.java!!!	copy2DRangeFrom(in xoff : int, in yoff : int, in w : int, in h : int, inout data : byte) : void
        mRS.validate();
        validate2DRange(xoff, yoff, w, h);
        mRS.nAllocationData2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID,
                              w, h, data, data.length);
!!!6517900.java!!!	copy2DRangeFrom(in xoff : int, in yoff : int, in w : int, in h : int, inout data : short) : void
        mRS.validate();
        validate2DRange(xoff, yoff, w, h);
        mRS.nAllocationData2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID,
                              w, h, data, data.length * 2);
!!!6518028.java!!!	copy2DRangeFrom(in xoff : int, in yoff : int, in w : int, in h : int, inout data : int) : void
        mRS.validate();
        validate2DRange(xoff, yoff, w, h);
        mRS.nAllocationData2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID,
                              w, h, data, data.length * 4);
!!!6518156.java!!!	copy2DRangeFrom(in xoff : int, in yoff : int, in w : int, in h : int, inout data : float) : void
        mRS.validate();
        validate2DRange(xoff, yoff, w, h);
        mRS.nAllocationData2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID,
                              w, h, data, data.length * 4);
!!!6518284.java!!!	copy2DRangeFrom(in xoff : int, in yoff : int, in w : int, in h : int, inout data : Allocation, in dataXoff : int, in dataYoff : int) : void
        mRS.validate();
        validate2DRange(xoff, yoff, w, h);
        mRS.nAllocationData2D(getIDSafe(), xoff, yoff,
                              mSelectedLOD, mSelectedFace.mID,
                              w, h, data.getID(mRS), dataXoff, dataYoff,
                              data.mSelectedLOD, data.mSelectedFace.mID);
!!!6518412.java!!!	copy2DRangeFrom(in xoff : int, in yoff : int, inout data : Bitmap) : void
        mRS.validate();
        validateBitmapFormat(data);
        validate2DRange(xoff, yoff, data.getWidth(), data.getHeight());
        mRS.nAllocationData2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID, data);
!!!6518540.java!!!	copyTo(inout b : Bitmap) : void
        mRS.validate();
        validateBitmapFormat(b);
        validateBitmapSize(b);
        mRS.nAllocationCopyToBitmap(getID(mRS), b);
!!!6518668.java!!!	copyTo(inout d : byte) : void
        validateIsInt8();
        mRS.validate();
        mRS.nAllocationRead(getID(mRS), d);
!!!6518796.java!!!	copyTo(inout d : short) : void
        validateIsInt16();
        mRS.validate();
        mRS.nAllocationRead(getID(mRS), d);
!!!6518924.java!!!	copyTo(inout d : int) : void
        validateIsInt32();
        mRS.validate();
        mRS.nAllocationRead(getID(mRS), d);
!!!6519052.java!!!	copyTo(inout d : float) : void
        validateIsFloat32();
        mRS.validate();
        mRS.nAllocationRead(getID(mRS), d);
!!!6519180.java!!!	resize(in dimX : int) : void
        if ((mType.getY() > 0)|| (mType.getZ() > 0) || mType.hasFaces() || mType.hasMipmaps()) {
            throw new RSInvalidStateException("Resize only support for 1D allocations at this time.");
        }
        mRS.nAllocationResize1D(getID(mRS), dimX);
        mRS.finish();  // Necessary because resize is fifoed and update is async.

        int typeID = mRS.nAllocationGetType(getID(mRS));
        mType = new Type(typeID, mRS);
        mType.updateFromNative();
        updateCacheInfo(mType);
!!!6519308.java!!!	resize(in dimX : int, in dimY : int) : void
        if ((mType.getZ() > 0) || mType.hasFaces() || mType.hasMipmaps()) {
            throw new RSInvalidStateException(
                "Resize only support for 2D allocations at this time.");
        }
        if (mType.getY() == 0) {
            throw new RSInvalidStateException(
                "Resize only support for 2D allocations at this time.");
        }
        mRS.nAllocationResize2D(getID(mRS), dimX, dimY);
        mRS.finish();  // Necessary because resize is fifoed and update is async.

        int typeID = mRS.nAllocationGetType(getID(mRS));
        mType = new Type(typeID, mRS);
        mType.updateFromNative();
        updateCacheInfo(mType);
!!!6519436.java!!!	createTyped(inout rs : RenderScript, inout type : Type, inout mips : MipmapControl, in usage : int) : Allocation
        rs.validate();
        if (type.getID(rs) == 0) {
            throw new RSInvalidStateException("Bad Type");
        }
        int id = rs.nAllocationCreateTyped(type.getID(rs), mips.mID, usage, 0);
        if (id == 0) {
            throw new RSRuntimeException("Allocation creation failed.");
        }
        return new Allocation(id, rs, type, usage);
!!!6519564.java!!!	createTyped(inout rs : RenderScript, inout type : Type, in usage : int) : Allocation
        return createTyped(rs, type, MipmapControl.MIPMAP_NONE, usage);
!!!6519692.java!!!	createTyped(inout rs : RenderScript, inout type : Type) : Allocation
        return createTyped(rs, type, MipmapControl.MIPMAP_NONE, USAGE_SCRIPT);
!!!6519820.java!!!	createSized(inout rs : RenderScript, inout e : Element, in count : int, in usage : int) : Allocation
        rs.validate();
        Type.Builder b = new Type.Builder(rs, e);
        b.setX(count);
        Type t = b.create();

        int id = rs.nAllocationCreateTyped(t.getID(rs), MipmapControl.MIPMAP_NONE.mID, usage, 0);
        if (id == 0) {
            throw new RSRuntimeException("Allocation creation failed.");
        }
        return new Allocation(id, rs, t, usage);
!!!6519948.java!!!	createSized(inout rs : RenderScript, inout e : Element, in count : int) : Allocation
        return createSized(rs, e, count, USAGE_SCRIPT);
!!!6520076.java!!!	elementFromBitmap(inout rs : RenderScript, inout b : Bitmap) : Element
        final Bitmap.Config bc = b.getConfig();
        if (bc == Bitmap.Config.ALPHA_8) {
            return Element.A_8(rs);
        }
        if (bc == Bitmap.Config.ARGB_4444) {
            return Element.RGBA_4444(rs);
        }
        if (bc == Bitmap.Config.ARGB_8888) {
            return Element.RGBA_8888(rs);
        }
        if (bc == Bitmap.Config.RGB_565) {
            return Element.RGB_565(rs);
        }
        throw new RSInvalidStateException("Bad bitmap type: " + bc);
!!!6520204.java!!!	typeFromBitmap(inout rs : RenderScript, inout b : Bitmap, inout mip : MipmapControl) : Type
        Element e = elementFromBitmap(rs, b);
        Type.Builder tb = new Type.Builder(rs, e);
        tb.setX(b.getWidth());
        tb.setY(b.getHeight());
        tb.setMipmaps(mip == MipmapControl.MIPMAP_FULL);
        return tb.create();
!!!6520332.java!!!	createFromBitmap(inout rs : RenderScript, inout b : Bitmap, inout mips : MipmapControl, in usage : int) : Allocation
        rs.validate();
        Type t = typeFromBitmap(rs, b, mips);

        int id = rs.nAllocationCreateFromBitmap(t.getID(rs), mips.mID, b, usage);
        if (id == 0) {
            throw new RSRuntimeException("Load failed.");
        }
        return new Allocation(id, rs, t, usage);
!!!6520460.java!!!	getSurfaceTexture() : SurfaceTexture
        if ((mUsage & USAGE_IO_INPUT) == 0) {
            throw new RSInvalidStateException("Allocation is not a surface texture.");
        }

        int id = mRS.nAllocationGetSurfaceTextureID(getID(mRS));
        SurfaceTexture st = new SurfaceTexture(id);
        mRS.nAllocationGetSurfaceTextureID2(getID(mRS), st);

        return st;
!!!6520588.java!!!	getSurface() : Surface
        return new Surface(getSurfaceTexture());
!!!6520716.java!!!	setSurface(inout sur : Surface) : void
        mRS.validate();
        if ((mUsage & USAGE_IO_OUTPUT) == 0) {
            throw new RSInvalidStateException("Allocation is not USAGE_IO_OUTPUT.");
        }

        mRS.nAllocationSetSurface(getID(mRS), sur);
!!!6520844.java!!!	setSurfaceTexture(inout st : SurfaceTexture) : void
        mRS.validate();
        if ((mUsage & USAGE_IO_OUTPUT) == 0) {
            throw new RSInvalidStateException("Allocation is not USAGE_IO_OUTPUT.");
        }

        Surface s = new Surface(st);
        mRS.nAllocationSetSurface(getID(mRS), s);
!!!6520972.java!!!	createFromBitmap(inout rs : RenderScript, inout b : Bitmap) : Allocation
        return createFromBitmap(rs, b, MipmapControl.MIPMAP_NONE,
                                USAGE_GRAPHICS_TEXTURE);
!!!6521100.java!!!	createCubemapFromBitmap(inout rs : RenderScript, inout b : Bitmap, inout mips : MipmapControl, in usage : int) : Allocation
        rs.validate();

        int height = b.getHeight();
        int width = b.getWidth();

        if (width % 6 != 0) {
            throw new RSIllegalArgumentException("Cubemap height must be multiple of 6");
        }
        if (width / 6 != height) {
            throw new RSIllegalArgumentException("Only square cube map faces supported");
        }
        boolean isPow2 = (height & (height - 1)) == 0;
        if (!isPow2) {
            throw new RSIllegalArgumentException("Only power of 2 cube faces supported");
        }

        Element e = elementFromBitmap(rs, b);
        Type.Builder tb = new Type.Builder(rs, e);
        tb.setX(height);
        tb.setY(height);
        tb.setFaces(true);
        tb.setMipmaps(mips == MipmapControl.MIPMAP_FULL);
        Type t = tb.create();

        int id = rs.nAllocationCubeCreateFromBitmap(t.getID(rs), mips.mID, b, usage);
        if(id == 0) {
            throw new RSRuntimeException("Load failed for bitmap " + b + " element " + e);
        }
        return new Allocation(id, rs, t, usage);
!!!6521228.java!!!	createCubemapFromBitmap(inout rs : RenderScript, inout b : Bitmap) : Allocation
        return createCubemapFromBitmap(rs, b, MipmapControl.MIPMAP_NONE,
                                       USAGE_GRAPHICS_TEXTURE);
!!!6521356.java!!!	createCubemapFromCubeFaces(inout rs : RenderScript, inout xpos : Bitmap, inout xneg : Bitmap, inout ypos : Bitmap, inout yneg : Bitmap, inout zpos : Bitmap, inout zneg : Bitmap, inout mips : MipmapControl, in usage : int) : Allocation
        int height = xpos.getHeight();
        if (xpos.getWidth() != height ||
            xneg.getWidth() != height || xneg.getHeight() != height ||
            ypos.getWidth() != height || ypos.getHeight() != height ||
            yneg.getWidth() != height || yneg.getHeight() != height ||
            zpos.getWidth() != height || zpos.getHeight() != height ||
            zneg.getWidth() != height || zneg.getHeight() != height) {
            throw new RSIllegalArgumentException("Only square cube map faces supported");
        }
        boolean isPow2 = (height & (height - 1)) == 0;
        if (!isPow2) {
            throw new RSIllegalArgumentException("Only power of 2 cube faces supported");
        }

        Element e = elementFromBitmap(rs, xpos);
        Type.Builder tb = new Type.Builder(rs, e);
        tb.setX(height);
        tb.setY(height);
        tb.setFaces(true);
        tb.setMipmaps(mips == MipmapControl.MIPMAP_FULL);
        Type t = tb.create();
        Allocation cubemap = Allocation.createTyped(rs, t, mips, usage);

        AllocationAdapter adapter = AllocationAdapter.create2D(rs, cubemap);
        adapter.setFace(Type.CubemapFace.POSITIVE_X);
        adapter.copyFrom(xpos);
        adapter.setFace(Type.CubemapFace.NEGATIVE_X);
        adapter.copyFrom(xneg);
        adapter.setFace(Type.CubemapFace.POSITIVE_Y);
        adapter.copyFrom(ypos);
        adapter.setFace(Type.CubemapFace.NEGATIVE_Y);
        adapter.copyFrom(yneg);
        adapter.setFace(Type.CubemapFace.POSITIVE_Z);
        adapter.copyFrom(zpos);
        adapter.setFace(Type.CubemapFace.NEGATIVE_Z);
        adapter.copyFrom(zneg);

        return cubemap;
!!!6521484.java!!!	createCubemapFromCubeFaces(inout rs : RenderScript, inout xpos : Bitmap, inout xneg : Bitmap, inout ypos : Bitmap, inout yneg : Bitmap, inout zpos : Bitmap, inout zneg : Bitmap) : Allocation
        return createCubemapFromCubeFaces(rs, xpos, xneg, ypos, yneg,
                                          zpos, zneg, MipmapControl.MIPMAP_NONE,
                                          USAGE_GRAPHICS_TEXTURE);
!!!6521612.java!!!	createFromBitmapResource(inout rs : RenderScript, inout res : Resources, in id : int, inout mips : MipmapControl, in usage : int) : Allocation

        rs.validate();
        Bitmap b = BitmapFactory.decodeResource(res, id);
        Allocation alloc = createFromBitmap(rs, b, mips, usage);
        b.recycle();
        return alloc;
!!!6521740.java!!!	createFromBitmapResource(inout rs : RenderScript, inout res : Resources, in id : int) : Allocation
        return createFromBitmapResource(rs, res, id,
                                        MipmapControl.MIPMAP_NONE,
                                        USAGE_GRAPHICS_TEXTURE);
!!!6521868.java!!!	createFromString(inout rs : RenderScript, in str : String, in usage : int) : Allocation
        rs.validate();
        byte[] allocArray = null;
        try {
            allocArray = str.getBytes("UTF-8");
            Allocation alloc = Allocation.createSized(rs, Element.U8(rs), allocArray.length, usage);
            alloc.copyFrom(allocArray);
            return alloc;
        }
        catch (Exception e) {
            throw new RSRuntimeException("Could not convert string to utf-8.");
        }
