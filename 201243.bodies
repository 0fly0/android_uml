class Identity
!!!844443.java!!!	Identity(inout name : String)
        this.name = name;
!!!844571.java!!!	Identity(inout name : String, inout scope : IdentityScope)
        this(name);
        if (scope != null) {
            scope.addIdentity(this);
            this.scope = scope;
        }
!!!844699.java!!!	addCertificate(inout certificate : Certificate) : void
        PublicKey certPK = certificate.getPublicKey();
        if (publicKey != null) {
            if (!checkKeysEqual(publicKey, certPK)) {
                throw new KeyManagementException("Cert's public key does not match Identity's public key");
            }
        } else {
            publicKey = certPK;
        }
        if (certificates == null) {
            certificates = new Vector<Certificate>();
        }
        certificates.add(certificate);
!!!844827.java!!!	checkKeysEqual(inout pk1 : PublicKey, inout pk2 : PublicKey) : boolean
        // first, they should have the same format
        // second, their encoded form must be the same

        // assert(pk1 != null);
        // assert(pk2 != null);

        String format1 = pk1.getFormat();
        String format2;
        if ((pk2 == null)
                || (((format2 = pk2.getFormat()) != null) ^ (format1 != null))
                || ((format1 != null) && !format1.equals(format2))) {
            return false;
        }

        return Arrays.equals(pk1.getEncoded(), pk2.getEncoded());
!!!844955.java!!!	removeCertificate(inout certificate : Certificate) : void
        if (certificates != null) {
            if (!certificates.contains(certificate)) {
                throw new KeyManagementException("Certificate not found");
            }
            certificates.removeElement(certificate);
        }
!!!845083.java!!!	certificates() : Certificate
        if (certificates == null) {
            return new Certificate[0];
        }
        Certificate[] ret = new Certificate[certificates.size()];
        certificates.copyInto(ret);
        return ret;
!!!845211.java!!!	identityEquals(inout identity : Identity) : boolean
        if (!name.equals(identity.name)) {
            return false;
        }

        if (publicKey == null) {
            return (identity.publicKey == null);
        }

        return checkKeysEqual(publicKey, identity.publicKey);
!!!845339.java!!!	toString(inout detailed : boolean) : String
        String s = toString();
        if (detailed) {
            s += " " + info;
        }
        return s;
!!!845467.java!!!	getScope() : IdentityScope
        return scope;
!!!845595.java!!!	setPublicKey(inout key : PublicKey) : void
        // this check does not always work
        if ((scope != null) && (key != null)) {
            Identity i = scope.getIdentity(key);
            //System.out.println("###DEBUG## Identity: "+i);
            if ((i != null) && (i != this)) {
                throw new KeyManagementException("key already used in scope");
            }
        }
        this.publicKey = key;
        certificates = null;
!!!845723.java!!!	getPublicKey() : PublicKey
        return publicKey;
!!!845851.java!!!	setInfo(inout info : String) : void
        this.info = info;
!!!845979.java!!!	getInfo() : String
        return info;
!!!846107.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof Identity)) {
            return false;
        }
        Identity i = (Identity) obj;
        if (Objects.equal(name, i.name) && (Objects.equal(scope, i.scope))) {
            return true;
        }
        return identityEquals(i);
!!!846235.java!!!	getName() : String
        return name;
!!!846363.java!!!	hashCode() : int
        int hash = 0;
        if (name != null) {
            hash += name.hashCode();
        }
        if (scope != null) {
            hash += scope.hashCode();
        }
        return hash;
!!!846491.java!!!	toString() : String
        String s = (this.name == null ? "" : this.name);
        if (scope != null) {
            s += " [" + scope.getName() + "]";
        }
        return s;
