class VisualDiffUtils
!!!9085964.java!!!	splitDiffsOnNewline(inout diffs : LinkedList<diff_match_patch.Diff>) : LinkedList<diff_match_patch.Diff>
        LinkedList<diff_match_patch.Diff> newDiffs = new LinkedList<diff_match_patch.Diff>();

        String[] parts;
        int lengthMinusOne;
        for (diff_match_patch.Diff diff : diffs) {
            parts = diff.text.split("\n", -1);
            if (parts.length == 1) {
                newDiffs.add(diff);
                continue;
            }

            lengthMinusOne = parts.length - 1;
            for (int i = 0; i < lengthMinusOne; i++) {
                newDiffs.add(new diff_match_patch.Diff(diff.operation, parts[i] + "\n"));
            }
            if (!parts[lengthMinusOne].isEmpty()) {
                newDiffs.add(new diff_match_patch.Diff(diff.operation, parts[lengthMinusOne]));
            }
        }

        return newDiffs;
!!!9086092.java!!!	generateExpectedResultLines(inout diffs : LinkedList<diff_match_patch.Diff>, inout lineNums : LinkedList<Integer>, inout lines : LinkedList<String>) : void
        String delSpan = "<span class=\"del\">";
        String eqlSpan = "<span class=\"eql\">";

        String line = "";
        int i = 1;
        diff_match_patch.Diff diff;
        int size = diffs.size();
        boolean isLastDiff;
        for (int j = 0; j < size; j++) {
            diff = diffs.get(j);
            isLastDiff = j == size - 1;
            switch (diff.operation) {
                case DELETE:
                    line = processDiff(diff, lineNums, lines, line, i, delSpan, isLastDiff);
                    if (line.equals("")) {
                        i++;
                    }
                    break;

                case INSERT:
                    // If the line is currently empty and this insertion is the entire line, the
                    // expected line is absent, so it has no line number.
                    if (diff.text.endsWith("\n") || isLastDiff) {
                        lineNums.add(line.equals("") ? DONT_PRINT_LINE_NUMBER : i++);
                        lines.add(line);
                        line = "";
                    }
                    break;

                case EQUAL:
                    line = processDiff(diff, lineNums, lines, line, i, eqlSpan, isLastDiff);
                    if (line.equals("")) {
                        i++;
                    }
                    break;
            }
        }
!!!9086220.java!!!	generateActualResultLines(inout diffs : LinkedList<diff_match_patch.Diff>, inout lineNums : LinkedList<Integer>, inout lines : LinkedList<String>) : void
        String insSpan = "<span class=\"ins\">";
        String eqlSpan = "<span class=\"eql\">";

        String line = "";
        int i = 1;
        diff_match_patch.Diff diff;
        int size = diffs.size();
        boolean isLastDiff;
        for (int j = 0; j < size; j++) {
            diff = diffs.get(j);
            isLastDiff = j == size - 1;
            switch (diff.operation) {
                case INSERT:
                    line = processDiff(diff, lineNums, lines, line, i, insSpan, isLastDiff);
                    if (line.equals("")) {
                        i++;
                    }
                    break;

                case DELETE:
                    // If the line is currently empty and deletion is the entire line, the
                    // actual line is absent, so it has no line number.
                    if (diff.text.endsWith("\n") || isLastDiff) {
                        lineNums.add(line.equals("") ? DONT_PRINT_LINE_NUMBER : i++);
                        lines.add(line);
                        line = "";
                    }
                    break;

                case EQUAL:
                    line = processDiff(diff, lineNums, lines, line, i, eqlSpan, isLastDiff);
                    if (line.equals("")) {
                        i++;
                    }
                    break;
            }
        }
!!!9086348.java!!!	processDiff(inout diff : diff_match_patch.Diff, inout lineNums : LinkedList<Integer>, inout lines : LinkedList<String>, in line : String, in i : int, in begSpan : String, inout forceOutputLine : boolean) : String
        String endSpan = "</span>";
        String br = "&nbsp;";

        if (diff.text.endsWith("\n") || forceOutputLine) {
            lineNums.add(i);
            /** TODO: Think of better way to replace stuff */
            line += begSpan + diff.text.replace("  ", "&nbsp;&nbsp;")
                    + endSpan + br;
            lines.add(line);
            line = "";
        } else {
            line += begSpan + diff.text.replace("  ", "&nbsp;&nbsp;") + endSpan;
        }

        return line;
!!!9086476.java!!!	getHtml(inout lineNums1 : LinkedList<Integer>, inout lines1 : LinkedList<String>, inout lineNums2 : LinkedList<Integer>, inout lines2 : LinkedList<String>) : String
        StringBuilder html = new StringBuilder();
        int lineNum;
        int size = lines1.size();
        for (int i = 0; i < size; i++) {
            html.append("<tr class=\"results\">");

            html.append("    <td class=\"line_count\">");
            lineNum = lineNums1.removeFirst();
            if (lineNum > 0) {
                html.append(lineNum);
            }
            html.append("    </td>");

            html.append("    <td class=\"line\">");
            html.append(lines1.removeFirst());
            html.append("    </td>");

            html.append("    <td class=\"space\"></td>");

            html.append("    <td class=\"line_count\">");
            lineNum = lineNums2.removeFirst();
            if (lineNum > 0) {
                html.append(lineNum);
            }
            html.append("    </td>");

            html.append("    <td class=\"line\">");
            html.append(lines2.removeFirst());
            html.append("    </td>");

            html.append("</tr>");
        }
        return html.toString();
