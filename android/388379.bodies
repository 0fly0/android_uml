class OldFileInputStreamTest
!!!2652187.java!!!	test_ConstructorLjava_io_File() : void
        // Test for method FileInputStream(File)
        try {
            File f = new File(fileName);
            is = new FileInputStream(f);
            is.close();
        } catch (Exception e) {
            fail("Failed to create FileInputStream : " + e.getMessage());
        }
        File f2 = new File("ImprobableFile.42");
        try {
            is = new FileInputStream(f2);
            is.close();
            f2.delete();
            fail("FileNotFoundException expected.");
        } catch (FileNotFoundException e) {
            // Expected.
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
!!!2652315.java!!!	test_ConstructorLjava_io_FileDescriptor() : void
        try {
            FileInputStream fis = new FileInputStream((FileDescriptor) null);
            fis.close();
            fail("NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
!!!2652443.java!!!	test_ConstructorLjava_lang_String() : void
        // Test for method FileInputStream(java.lang.String)
        try {
            is = new FileInputStream(fileName);
            is.close();
        } catch (Exception e) {
            fail("Failed to create FileInputStream : " + e.getMessage());
        }
        try {
            is = new FileInputStream("ImprobableFile.42");
            is.close();
            new File("ImprobableFile.42").delete();
            fail("FileNotFoundException expected.");
        } catch (FileNotFoundException e) {
            // Expected.
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
!!!2652571.java!!!	test_available() : void
        is = new FileInputStream(fileName);
        assertEquals("Test 1: Returned incorrect number of available bytes;",
                fileString.length(), is.available());
        is.close();
        try {
            is.available();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2652699.java!!!	test_getChannel() : void
        // Test for method FileChannel FileInputStream.getChannel()
        FileChannel channel;
        byte[] buffer = new byte[100];
        byte[] stringBytes;
        final int offset = 5;
        boolean equal = true;

        try {
            FileInputStream fis = new FileInputStream(fileName);
            channel = fis.getChannel();
            assertNotNull(channel);
            assertTrue("Channel is closed.", channel.isOpen());

            // Check that the channel is associated with the input stream.
            channel.position(offset);
            fis.read(buffer, 0, 10);
            stringBytes = fileString.getBytes();
            for (int i = 0; i < 10; i++) {
                equal &= (buffer[i] == stringBytes[i + offset]);
            }
            assertTrue("Channel is not associated with this stream.", equal);

            fis.close();
            assertFalse("Channel has not been closed.", channel.isOpen());
        } catch (FileNotFoundException e) {
            fail("Could not find : " + fileName);
        }

        catch (IOException e) {
            fail("Exception during test : " + e.getMessage());
        }
!!!2652827.java!!!	test_read() : void
        is = new FileInputStream(fileName);
        int c = is.read();
        assertEquals("Test 1: Read returned incorrect char;",
                fileString.charAt(0), c);

        is.close();
        try {
            is.read();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2652955.java!!!	test_read$B() : void
        byte[] buf1 = new byte[100];
        is = new FileInputStream(fileName);
        is.skip(3000);
        is.read(buf1);
        is.close();
        assertTrue("Test 1: Failed to read correct data.",
                new String(buf1, 0, buf1.length).equals(
                        fileString.substring(3000, 3100)));

        is.close();
        try {
            is.read(buf1);
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2653083.java!!!	test_skipJ() : void
        byte[] buf1 = new byte[10];
        is = new FileInputStream(fileName);
        is.skip(1000);
        is.read(buf1, 0, buf1.length);
        assertTrue("Test 1: Failed to skip to correct position.",
                new String(buf1, 0, buf1.length).equals(
                        fileString.substring(1000, 1010)));

        is.close();
        try {
            is.read();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2653211.java!!!	setUp() : void
        fileName = System.getProperty("java.io.tmpdir");
        String separator = System.getProperty("file.separator");
        if (fileName.charAt(fileName.length() - 1) == separator.charAt(0))
            fileName = Support_PlatformFile.getNewPlatformFile(fileName,
                    "input.tst");
        else
            fileName = Support_PlatformFile.getNewPlatformFile(fileName
                    + separator, "input.tst");
        java.io.OutputStream fos = new FileOutputStream(fileName);
        fos.write(fileString.getBytes());
        fos.close();
!!!2653339.java!!!	tearDown() : void
        if (is != null) {
            is.close();
        }
        new File(fileName).delete();
