class HdmiCecSettings
!!!12108684.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        // connect HDMI CEC Service as early as possible
        mCecManager = new CecManager(this);
        mCecManager.registerCecSrvConnectionListener(this);
        mCecManager.connect();

        addPreferencesFromResource(R.xml.hdmi_cec_settings);
        mInflater = LayoutInflater.from(this);
        setContentView(R.layout.hdmi_cec_settings_layout);

        // init hdmi cec switch's status
        boolean cecEnabled = mCecManager.isCECEnabled();
        mSettingSwitch = (Switch)findViewById(R.id.hdmi_cec_switch);
        final int padding = getResources().getDimensionPixelSize(R.dimen.action_bar_switch_padding);
        mSettingSwitch.setPadding(0, 0, padding, 0);
        mSettingSwitch.setChecked(cecEnabled);
        mSettingSwitch.setOnCheckedChangeListener(new OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (DEBUG) {
                    Log.d(TAG, "Hdmicec setting changed, isChecked: " + isChecked);
                }
                 /**
                  * no need to check whether oldValue is same with newValue in
                  * the SwitchPreference case, so handle the request directly*/
                try {
                    if (isChecked) {
                        mCecManager.enableCEC();
                    } else {
                        mCecManager.disableCEC();
                    }
                    mAutoPoweroffSwitch.setEnabled(isChecked);
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
            }
        });

        // init hdmi cec auto power off switch's status
        boolean autoPoweroffEnabled = mCecManager.isDeviceAutoPowerOffEnabled();
        mAutoPoweroffSwitch = (Switch)findViewById(R.id.hdmi_autopoweroff_switch);
        mAutoPoweroffSwitch.setPadding(0, 0, padding, 0);
        mAutoPoweroffSwitch.setChecked(autoPoweroffEnabled);
        mAutoPoweroffSwitch.setOnCheckedChangeListener(new OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                if (DEBUG) {
                    Log.d(TAG, "Hdmicec setting changed, isChecked: " + isChecked);
                }
                 /**
                  * no need to check whether oldValue is same with newValue in
                  * the SwitchPreference case, so handle the request directly*/
                try {
                    if (isChecked) {
                        mCecManager.enableDeviceAutoPowerOff();
                    } else {
                        mCecManager.disableDeviceAutoPowerOff();
                    }
                } catch (Exception exp) {
                    exp.printStackTrace();
                }
            }
        });
        mAutoPoweroffSwitch.setEnabled(cecEnabled);
!!!12108812.java!!!	onDestroy() : void
        super.onDestroy();
        disconnectFromService();
!!!12108940.java!!!	onCecServiceConnected(inout cecSrvImpl : IBinder, in cecDevType : int) : void
        if (DEBUG) {
            Log.e(TAG, "cecDevType:" + cecDevType);
            Log.e(TAG, "Inside onCecServiceConnected() cecSrvImpl " + cecSrvImpl);
        }

        if (TEST_DEVICE_LIST) {
            Log.e(TAG, "Start Test Device List");
            List<CECDevInfo> fakeDevList = new ArrayList<CECDevInfo>();
            CECDevInfo fakeDev1 = new CECDevInfo();
            fakeDev1.setDeviceAddress(1);
            fakeDev1.setOsdName("Test1");
            fakeDev1.setPortNumber(1);
            fakeDev1.setDevicePhysicalAddress(15);
            fakeDevList.add(fakeDev1);

            CECDevInfo fakeDev2 = new CECDevInfo();
            fakeDev2.setOsdName("Test2");
            fakeDev1.setPortNumber(2);
            fakeDev1.setDeviceAddress(4);
            fakeDevList.add(fakeDev2);

            Message msg1 = HdmiCecSettings.this.mHandler.obtainMessage(
                REQ_UPDATE_CEC_DEV_LIST, 1, 0,
                fakeDevList);
            msg1.sendToTarget();
        }

        if (null != cecSrvImpl) {
            switch (cecDevType) {
                case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV:
                    mITvCecService = ITvCecService.Stub.asInterface(cecSrvImpl);
                    if (null != mITvCecService) {
                        if (DEBUG) {
                            Log.d(TAG, "Retrieve the real TvCecService"
                                  + " Impl succuss!");
                        }
                        try {
                            int activeSrcAddr = mITvCecService.getActiveSourceAddress();
                            if (DEBUG) {
                                Log.d(TAG, "The output of getActiveSourceAddress is "
                                    + activeSrcAddr);
                            }
                            if (-1 == activeSrcAddr) {
                                mITvCecService.requestActiveSource();
                            }
                            Message msg = HdmiCecSettings.this.mHandler.obtainMessage(
                                REQ_UPDATE_CEC_DEV_LIST, activeSrcAddr, 0,
                                mITvCecService.getListOfConnectedCECDevices());
                            msg.sendToTarget();
                        }
                        catch (RemoteException e) {
                            e.printStackTrace();
                            Log.e(TAG, "RemoteException thrown when sendUserControl() in a "
                                + "delayed runnable!!!");
                        }

                        mICecServiceCallbacksInterface = new CecCallbacksBN() {
                            public void onHDMICECDeviceUpdated(int eventID,
                                List<CECDevInfo> cecDevList) {
                                if (DEBUG) {
                                    Log.d(TAG, "onHDMICECDeviceUpdated(eventID:" + eventID +
                                        " cecDevList.size():" + cecDevList.size()  + ")");
                                    for (CECDevInfo dev : cecDevList) {
                                        Log.d(TAG, "dev: " + dev);
                                    }
                                }
                                try {
                                    int activeSrcAddr = mITvCecService.getActiveSourceAddress();
                                    if (DEBUG) {
                                        Log.d(TAG, "The return of getActiveSourceAddress is " +
                                            activeSrcAddr);
                                    }
                                    if (-1 == activeSrcAddr) {
                                        mITvCecService.requestActiveSource();
                                    }
                                    // if device have no change, return directly
                                    if (eventID == HdmiCecUtils.CEC_AVAI_DEVICES_RETAIN) {
                                        return;
                                    }
                                    // otherwise, update the device list
                                    Message msg =
                                        HdmiCecSettings.this.mHandler.obtainMessage(
                                            REQ_UPDATE_CEC_DEV_LIST, activeSrcAddr, 0, cecDevList);
                                    msg.sendToTarget();
                                } catch (RemoteException e) {
                                    e.printStackTrace();
                                    Log.e(TAG, "RemoteException thrown when " +
                                        " getActiveSourceAddress()");
                                }
                            }
                        };

                        try {
                            mITvCecService.registerCecCallBack(mICecServiceCallbacksInterface);
                        } catch (RemoteException e) {
                            e.printStackTrace();
                            Log.e(TAG, "RemoteException thrown when registerCecCallBack()!");
                        }
                    }
                    break;

                case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_DMP:
                    break;
                default:
                    Log.e(TAG, "Cec device type incorrect!!!");
                    break;
            }
        }
!!!12109068.java!!!	onCecServiceDisconnected() : void
        if (null != mCecManager) {
            mCecManager.unregisterCecSrvConnectionListener(this);
        }
!!!12109196.java!!!	updateCecDeviceList(inout cecDeviceList : List<CECDevInfo>, in activeSrcAddr : int) : void
        mCachedDeviceList = cecDeviceList;
        mCachedActiveSrcAddr = activeSrcAddr;

        final Collection<CECDevicePref> devicePrefs =
            constructCECDevicePrefs(cecDeviceList, activeSrcAddr);

        getPreferenceScreen().removeAll();

        Log.d(TAG, "Update Device data");

        PreferenceCategory devListCategory = new PreferenceCategory(this);
        devListCategory.setTitle(R.string.hdmicec_device_list_label);
        getPreferenceScreen().addPreference(devListCategory);

        for (CECDevicePref devicePref : devicePrefs) {
            devListCategory.addPreference(devicePref);
        }
!!!12109324.java!!!	constructCECDevicePrefs(inout cecDeviceList : List<CECDevInfo>, in activeSrcAddr : int) : CECDevicePref
        if (null == cecDeviceList) {
            return null;
        }
        ArrayList<CECDevicePref> prefs = new ArrayList<CECDevicePref>();
        for (CECDevInfo dev : cecDeviceList) {
            if ((null != dev) && (activeSrcAddr == dev.getDeviceAddress())) {
                dev.setOsdName("(Active) " + dev.getOsdName());
            }
            prefs.add(new CECDevicePref(this, dev));
            if (DEBUG) {
                Log.d(TAG, "constrcuted a CECDevicePref");
            }
        }
        return prefs;
!!!12109452.java!!!	disconnectFromService() : void
        if (DEBUG) {
            Log.d(TAG, "disconnectFromService() in");
        }
        if (null != mCecManager) {
            mCecManager.disconnect();
            mCecManager = null;
        }
!!!12109580.java!!!	TypeToImgDrawableID(in type : int) : Integer
        Integer imgId = R.drawable.cec_type_default;
        switch (type) {
            case CecDeviceType.CEC_DEVICE_TYPE_TV:
                imgId = R.drawable.cec_type_tv;
                break;
            case CecDeviceType.CEC_DEVICE_TYPE_RECORD:
                imgId = R.drawable.cec_type_recording;
                break;
            case CecDeviceType.CEC_DEVICE_TYPE_TUNER:
                imgId = R.drawable.cec_type_tuner;
                break;
            case CecDeviceType.CEC_DEVICE_TYPE_PLAYBACK:
                imgId = R.drawable.cec_type_playback;
                break;
            case CecDeviceType.CEC_DEVICE_TYPE_AUDIOSYSTEM:
                imgId = R.drawable.cec_type_audiosystem;
                break;
            case CecDeviceType.CEC_DEVICE_TYPE_SWITCH:
                imgId = R.drawable.cec_type_switch;
                break;
            case CecDeviceType.CEC_DEVICE_TYPE_VIDEO_PROCESSOR:
                imgId = R.drawable.cec_type_vp;
                break;
            case CecDeviceType.CEC_DEVICE_TYPE_WILD:
                break;
            case CecDeviceType.CEC_DEVICE_TYPE_UNREGISTERED:
                break;
            default:
                break;
        }
        return imgId;
