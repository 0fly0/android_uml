class InflaterInputStream
!!!1684635.java!!!	InflaterInputStream(inout is : InputStream)
        this(is, new Inflater(), BUF_SIZE);
!!!1684763.java!!!	InflaterInputStream(inout is : InputStream, inout inflater : Inflater)
        this(is, inflater, BUF_SIZE);
!!!1684891.java!!!	InflaterInputStream(inout is : InputStream, inout inflater : Inflater, in bufferSize : int)
        super(is);
        if (is == null) {
            throw new NullPointerException("is == null");
        } else if (inflater == null) {
            throw new NullPointerException("inflater == null");
        }
        if (bufferSize <= 0) {
            throw new IllegalArgumentException("bufferSize <= 0: " + bufferSize);
        }
        this.inf = inflater;
        if (is instanceof ZipFile.RAFStream) {
            nativeEndBufSize = bufferSize;
        } else {
            buf = new byte[bufferSize];
        }
!!!1685019.java!!!	read() : int
        return Streams.readSingleByte(this);
!!!1685147.java!!!	read(inout buffer : byte, in offset : int, in byteCount : int) : int
        checkClosed();
        Arrays.checkOffsetAndCount(buffer.length, offset, byteCount);

        if (byteCount == 0) {
            return 0;
        }

        if (eof) {
            return -1;
        }

        do {
            if (inf.needsInput()) {
                fill();
            }
            // Invariant: if reading returns -1 or throws, eof must be true.
            // It may also be true if the next read() should return -1.
            try {
                int result = inf.inflate(buffer, offset, byteCount);
                eof = inf.finished();
                if (result > 0) {
                    return result;
                } else if (eof) {
                    return -1;
                } else if (inf.needsDictionary()) {
                    eof = true;
                    return -1;
                } else if (len == -1) {
                    eof = true;
                    throw new EOFException();
                    // If result == 0, fill() and try again
                }
            } catch (DataFormatException e) {
                eof = true;
                if (len == -1) {
                    throw new EOFException();
                }
                throw (IOException) (new IOException().initCause(e));
            }
        } while (true);
!!!1685275.java!!!	fill() : void
        checkClosed();
        if (nativeEndBufSize > 0) {
            ZipFile.RAFStream is = (ZipFile.RAFStream) in;
            len = is.fill(inf, nativeEndBufSize);
        } else {
            if ((len = in.read(buf)) > 0) {
                inf.setInput(buf, 0, len);
            }
        }
!!!1685403.java!!!	skip(in byteCount : long) : long
        if (byteCount < 0) {
            throw new IllegalArgumentException("byteCount < 0");
        }
        return Streams.skipByReading(this, byteCount);
!!!1685531.java!!!	available() : int
        checkClosed();
        if (eof) {
            return 0;
        }
        return 1;
!!!1685659.java!!!	close() : void
        if (!closed) {
            inf.end();
            closed = true;
            eof = true;
            super.close();
        }
!!!1685787.java!!!	mark(in readlimit : int) : void
        // do nothing
!!!1685915.java!!!	reset() : void
        throw new IOException();
!!!1686043.java!!!	markSupported() : boolean
        return false;
!!!1686171.java!!!	checkClosed() : void
        if (closed) {
            throw new IOException("Stream is closed");
        }
