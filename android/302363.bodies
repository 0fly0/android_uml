class Duration
!!!1894811.java!!!	getXMLSchemaType() : QName

        boolean yearSet = isSet(DatatypeConstants.YEARS);
        boolean monthSet = isSet(DatatypeConstants.MONTHS);
        boolean daySet = isSet(DatatypeConstants.DAYS);
        boolean hourSet = isSet(DatatypeConstants.HOURS);
        boolean minuteSet = isSet(DatatypeConstants.MINUTES);
        boolean secondSet = isSet(DatatypeConstants.SECONDS);

        // DURATION
        if (yearSet
                && monthSet
                && daySet
                && hourSet
                && minuteSet
                && secondSet) {
            return DatatypeConstants.DURATION;
        }

        // DURATION_DAYTIME
        if (!yearSet
                && !monthSet
                && daySet
                && hourSet
                && minuteSet
                && secondSet) {
            return DatatypeConstants.DURATION_DAYTIME;
        }

        // DURATION_YEARMONTH
        if (yearSet
                && monthSet
                && !daySet
                && !hourSet
                && !minuteSet
                && !secondSet) {
            return DatatypeConstants.DURATION_YEARMONTH;
        }

        // nothing matches
        throw new IllegalStateException(
                "javax.xml.datatype.Duration#getXMLSchemaType():"
                + " this Duration does not match one of the XML Schema date/time datatypes:"
                + " year set = " + yearSet
                + " month set = " + monthSet
                + " day set = " + daySet
                + " hour set = " + hourSet
                + " minute set = " + minuteSet
                + " second set = " + secondSet
        );
!!!1895067.java!!!	getYears() : int
        return getFieldValueAsInt(DatatypeConstants.YEARS);
!!!1895195.java!!!	getMonths() : int
        return getFieldValueAsInt(DatatypeConstants.MONTHS);
!!!1895323.java!!!	getDays() : int
        return getFieldValueAsInt(DatatypeConstants.DAYS);
!!!1895451.java!!!	getHours() : int
        return getFieldValueAsInt(DatatypeConstants.HOURS);
!!!1895579.java!!!	getMinutes() : int
        return getFieldValueAsInt(DatatypeConstants.MINUTES);
!!!1895707.java!!!	getSeconds() : int
        return getFieldValueAsInt(DatatypeConstants.SECONDS);
!!!1895835.java!!!	getTimeInMillis(in startInstant : Calendar) : long
        Calendar cal = (Calendar) startInstant.clone();
        addTo(cal);
        return getCalendarTimeInMillis(cal)
        - getCalendarTimeInMillis(startInstant);
!!!1895963.java!!!	getTimeInMillis(in startInstant : Date) : long
        Calendar cal = new GregorianCalendar();
        cal.setTime(startInstant);
        this.addTo(cal);
        return getCalendarTimeInMillis(cal) - startInstant.getTime();
!!!1896219.java!!!	getFieldValueAsInt(in field : Field) : int
        Number n = getField(field);
        if (n != null) {
            return n.intValue();
        }
        return 0;
!!!1896731.java!!!	addTo(inout date : Date) : void

        // check data parameter
        if (date == null) {
            throw new NullPointerException("date == null");
        }

        Calendar cal = new GregorianCalendar();
        cal.setTime(date);
        this.addTo(cal);
        date.setTime(getCalendarTimeInMillis(cal));
!!!1896859.java!!!	subtract(in rhs : Duration) : Duration
        return add(rhs.negate());
!!!1896987.java!!!	multiply(in factor : int) : Duration
        return multiply(BigDecimal.valueOf(factor));
!!!1897627.java!!!	isLongerThan(in duration : Duration) : boolean
        return compare(duration) == DatatypeConstants.GREATER;
!!!1897755.java!!!	isShorterThan(in duration : Duration) : boolean
        return compare(duration) == DatatypeConstants.LESSER;
!!!1897883.java!!!	equals(in duration : Object) : boolean
        if (duration == this) {
            return true;
        }
        if (duration instanceof Duration) {
            return compare((Duration) duration) == DatatypeConstants.EQUAL;
        }
        return false;
!!!1898139.java!!!	toString() : String
        StringBuilder buf = new StringBuilder();

        if (getSign() < 0) {
            buf.append('-');
        }
        buf.append('P');

        BigInteger years = (BigInteger) getField(DatatypeConstants.YEARS);
        if (years != null) {
            buf.append(years).append('Y');
        }

        BigInteger months = (BigInteger) getField(DatatypeConstants.MONTHS);
        if (months != null) {
            buf.append(months).append('M');
        }

        BigInteger days = (BigInteger) getField(DatatypeConstants.DAYS);
        if (days != null) {
            buf.append(days).append('D');
        }

        BigInteger hours = (BigInteger) getField(DatatypeConstants.HOURS);
        BigInteger minutes = (BigInteger) getField(DatatypeConstants.MINUTES);
        BigDecimal seconds = (BigDecimal) getField(DatatypeConstants.SECONDS);
        if (hours != null || minutes != null || seconds != null) {
            buf.append('T');
            if (hours != null) {
                buf.append(hours).append('H');
            }
            if (minutes != null) {
                buf.append(minutes).append('M');
            }
            if (seconds != null) {
                buf.append(toString(seconds)).append('S');
            }
        }

        return buf.toString();
!!!1898267.java!!!	toString(inout bd : BigDecimal) : String
        String intString = bd.unscaledValue().toString();
        int scale = bd.scale();

        if (scale == 0) {
            return intString;
        }

        /* Insert decimal point */
        StringBuilder buf;
        int insertionPoint = intString.length() - scale;
        if (insertionPoint == 0) { /* Point goes right before intVal */
            return "0." + intString;
        }
        else if (insertionPoint > 0) { /* Point goes inside intVal */
            buf = new StringBuilder(intString);
            buf.insert(insertionPoint, '.');
        }
        else { /* We must insert zeros between point and intVal */
            buf = new StringBuilder(3 - insertionPoint + intString.length());
            buf.append("0.");
            for (int i = 0; i < -insertionPoint; i++) {
                buf.append('0');
            }
            buf.append(intString);
        }
        return buf.toString();
!!!1898395.java!!!	getCalendarTimeInMillis(in cal : Calendar) : long
        return cal.getTime().getTime();
