class SuggestedWords
!!!12851212.java!!!	SuggestedWords(in suggestedWordInfoList : ArrayList<SuggestedWordInfo>, in typedWordValid : boolean, in hasAutoCorrectionCandidate : boolean, in allowsToBeAutoCorrected : boolean, in isPunctuationSuggestions : boolean, in isObsoleteSuggestions : boolean, in isPrediction : boolean)
        mSuggestedWordInfoList = suggestedWordInfoList;
        mTypedWordValid = typedWordValid;
        mHasAutoCorrectionCandidate = hasAutoCorrectionCandidate;
        mAllowsToBeAutoCorrected = allowsToBeAutoCorrected;
        mIsPunctuationSuggestions = isPunctuationSuggestions;
        mIsObsoleteSuggestions = isObsoleteSuggestions;
        mIsPrediction = isPrediction;
!!!12851340.java!!!	size() : int
        return mSuggestedWordInfoList.size();
!!!12851468.java!!!	getWord(in pos : int) : CharSequence
        return mSuggestedWordInfoList.get(pos).mWord;
!!!12851596.java!!!	getWordInfo(in pos : int) : SuggestedWordInfo
        return mSuggestedWordInfoList.get(pos);
!!!12851724.java!!!	getInfo(in pos : int) : SuggestedWordInfo
        return mSuggestedWordInfoList.get(pos);
!!!12851852.java!!!	hasAutoCorrectionWord() : boolean
        return mHasAutoCorrectionCandidate && size() > 1 && !mTypedWordValid;
!!!12851980.java!!!	willAutoCorrect() : boolean
        return !mTypedWordValid && mHasAutoCorrectionCandidate;
!!!12852108.java!!!	toString() : String
        // Pretty-print method to help debug
        return "SuggestedWords:"
                + " mTypedWordValid=" + mTypedWordValid
                + " mHasAutoCorrectionCandidate=" + mHasAutoCorrectionCandidate
                + " mAllowsToBeAutoCorrected=" + mAllowsToBeAutoCorrected
                + " mIsPunctuationSuggestions=" + mIsPunctuationSuggestions
                + " words=" + Arrays.toString(mSuggestedWordInfoList.toArray());
!!!12852236.java!!!	getFromApplicationSpecifiedCompletions(in infos : CompletionInfo) : SuggestedWordInfo
        final ArrayList<SuggestedWordInfo> result = new ArrayList<SuggestedWordInfo>();
        for (CompletionInfo info : infos) {
            if (null != info && info.getText() != null) {
                result.add(new SuggestedWordInfo(info.getText(), SuggestedWordInfo.MAX_SCORE));
            }
        }
        return result;
!!!12852364.java!!!	getTypedWordAndPreviousSuggestions(in typedWord : CharSequence, in previousSuggestions : SuggestedWords) : SuggestedWordInfo
        final ArrayList<SuggestedWordInfo> suggestionsList = new ArrayList<SuggestedWordInfo>();
        final HashSet<String> alreadySeen = new HashSet<String>();
        suggestionsList.add(new SuggestedWordInfo(typedWord, SuggestedWordInfo.MAX_SCORE));
        alreadySeen.add(typedWord.toString());
        final int previousSize = previousSuggestions.size();
        for (int pos = 1; pos < previousSize; pos++) {
            final SuggestedWordInfo prevWordInfo = previousSuggestions.getWordInfo(pos);
            final String prevWord = prevWordInfo.mWord.toString();
            // Filter out duplicate suggestion.
            if (!alreadySeen.contains(prevWord)) {
                suggestionsList.add(prevWordInfo);
                alreadySeen.add(prevWord);
            }
        }
        return suggestionsList;
