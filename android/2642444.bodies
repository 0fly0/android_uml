class OmxAmpVideoPort
!!!11125260.cpp!!!	OmxAmpVideoPort()
  InitOmxHeader(&mVideoParam);
!!!11125388.cpp!!!	OmxAmpVideoPort(in index : OMX_U32, in dir : OMX_DIRTYPE)
  mDefinition.nPortIndex = index;
  mDefinition.eDir = dir;
  mDefinition.eDomain = OMX_PortDomainVideo;
  mDefinition.format.video.pNativeRender = NULL;
  mDefinition.format.video.nFrameWidth = 720;
  mDefinition.format.video.nFrameHeight = 480;
  mDefinition.format.video.nStride =  720;
  mDefinition.format.video.nSliceHeight =  480;
  mDefinition.format.video.nBitrate = 64000;
  mDefinition.format.video.xFramerate = 15 << 16;
  mDefinition.format.video.bFlagErrorConcealment = OMX_FALSE;
  mDefinition.format.video.eCompressionFormat = OMX_VIDEO_CodingUnused;
  mDefinition.format.video.eColorFormat = OMX_COLOR_FormatCbYCrY;
  mDefinition.format.video.pNativeWindow = NULL;
  updateDomainParameter();
  InitOmxHeader(&mVideoParam);
!!!11125900.cpp!!!	getFormatHeadSize() : OMX_U32
  return mFormatHeadSize;
!!!11126028.cpp!!!	formatEsData(inout header : OMX_BUFFERHEADERTYPE, in isPadding : OMX_BOOL) : void
  OMX_U32 padding_size = 0;
  OMX_U8 *buf = header->pBuffer;
  OMX_U32 inoffset = header->nOffset;
  OMX_U32 lenth = header->nFilledLen;
  if (!isPadding) {
    return;
  }
  if (lenth < FramePaddingSize) {
    padding_size = FramePaddingSize - lenth;
  } else if (lenth & 31) {
    padding_size = 32 - (lenth & 31);
  }
  if (0 != padding_size) {
    kdMemset(buf + inoffset + lenth, 0x88, padding_size);
  }
  header->nFilledLen = lenth + padding_size;
  header->nOffset = inoffset;
!!!11126284.cpp!!!	clearMemCtrlIndex() : void
  if (0 != mPushedBytes || 0 != mPushedCtrls) {
    OMX_LOGD("There are %d mem and %d ctrl buffers not returned.",
        mPushedBytes, mPushedCtrls);
    mPushedBytes = 0;
    mPushedCtrls = 0;
  }
  mPushedCtrlIndex = 0;
  mPushedOffset = 0;
  mPayloadOffset = 0;
!!!11126412.cpp!!!	configDrm(in drm_type : OMX_U32, inout es_handle : AMP_SHM_HANDLE) : OMX_ERRORTYPE
  OMX_LOGD("configDrm");
  HRESULT err = SUCCESS;
  err = AMP_SHM_Allocate(AMP_SHM_DYNAMIC, es_buf_size + es_buf_pad_size, 32, &mEs);
  CHECKAMPERR(err);
  err = AMP_SHM_GetVirtualAddress(mEs, 0, (VOID **)&mVirtEsAddr);
  CHECKAMPERR(err);
  err = AMP_SHM_Allocate(AMP_SHM_DYNAMIC, ctrl_buf_size, 1, &mCtrl);
  CHECKAMPERR(err);
  err = AMP_SHM_GetVirtualAddress(mCtrl, 0, (VOID **)&mVirtCtrlAddr);
  CHECKAMPERR(err);
  *es_handle = mEs;
  mIsDrm = OMX_TRUE;
  mDrmType = drm_type;
  return static_cast<OMX_ERRORTYPE>(err);
!!!11126540.cpp!!!	releaseDrm() : OMX_ERRORTYPE
  OMX_LOGD("releaseDrm");
  HRESULT err = SUCCESS;
  if (mIsDrm) {
    err = AMP_SHM_Release(mEs);
    if (SUCCESS != err) {
        OMX_LOGE("release mEs err.");
    }
    err = AMP_SHM_Release(mCtrl);
    if (SUCCESS != err) {
        OMX_LOGE("release mCtrl err.");
    }
  } else {
    OMX_LOGE("fail to release drm, mIsDrm is NULL.");
  }
  return static_cast<OMX_ERRORTYPE>(err);
!!!11126668.cpp!!!	updateCtrlInfo(in bytes : OMX_U32, in isEncrypted : OMX_BOOL, in sampleId : OMX_U64, in offset : OMX_U64) : OMX_ERRORTYPE
  while (ctrl_buf_num == mPushedCtrls) {
    OMX_LOGD("wait for ctrl bufs...");
    usleep(5000);
  }
  mCtrlUnit = mVirtCtrlAddr + mPushedCtrlIndex;
  mCtrlUnit->m_ControlInfoType = drm_PlayReadyPayloadCtrl;
  mCtrlUnit->m_Rsvd = 0;
  mCtrlUnit->m_DataCount = mPayloadOffset;
  mCtrlUnit->m_BufPosition = 0;
  mCtrlUnit->m_UserData = 0xffff;
  mCtrlUnit->m_Union.m_PrPayloadInfo.m_IsEncrypted = isEncrypted;
  mCtrlUnit->m_Union.m_PrPayloadInfo.m_PayloadSize = bytes;
  mCtrlUnit->m_Union.m_PrPayloadInfo.SampleID = sampleId;
  mCtrlUnit->m_Union.m_PrPayloadInfo.BlockOffset = offset>>4;
  mCtrlUnit->m_Union.m_PrPayloadInfo.ByteOffset = offset & 0x0f;
  mPayloadOffset += bytes;
  mPushedCtrls++;
  mPushedCtrlIndex++;
  if (ctrl_buf_num == mPushedCtrlIndex) {
    mPushedCtrlIndex = 0;
  }
  return OMX_ErrorNone;
!!!11126796.cpp!!!	updateCtrlInfo(in bytes : OMX_U32, in isEncrypted : OMX_BOOL, inout ivKey : OMX_U8) : OMX_ERRORTYPE
  while (ctrl_buf_num == mPushedCtrls) {
    OMX_LOGD("wait for ctrl bufs...");
    usleep(5000);
  }
  mCtrlUnit = mVirtCtrlAddr + mPushedCtrlIndex;
  mCtrlUnit->m_ControlInfoType = drm_WidevinePayloadCtrl;
  mCtrlUnit->m_Rsvd = 0;
  mCtrlUnit->m_DataCount = mPayloadOffset;
  mCtrlUnit->m_BufPosition = 0;
  mCtrlUnit->m_UserData = 0xffff;
  mCtrlUnit->m_Union.m_WvPayloadInfo.m_IsEncrypted = isEncrypted;
  mCtrlUnit->m_Union.m_WvPayloadInfo.m_PayloadSize = bytes;
  if (ivKey) {
    kdMemcpy(mCtrlUnit->m_Union.m_WvPayloadInfo.m_IVKey, ivKey, 16);
  } else {
    kdMemset(mCtrlUnit->m_Union.m_WvPayloadInfo.m_IVKey, 0x00, 16);
  }
  mPayloadOffset += bytes;
  mPushedCtrls++;
  mPushedCtrlIndex++;
  if (ctrl_buf_num == mPushedCtrlIndex) {
    mPushedCtrlIndex = 0;
  }
  return OMX_ErrorNone;
!!!11126924.cpp!!!	updateMemInfo(inout header : OMX_BUFFERHEADERTYPE) : OMX_ERRORTYPE
  if (header->nFilledLen < FramePaddingSize) {
    paddingsize = FramePaddingSize - header->nFilledLen;
  } else if (header->nFilledLen & 63) {
    paddingsize = 64 - (header->nFilledLen & 63);
  } else {
    paddingsize = 0;
  }
  OMX_U32 frame_size = header->nFilledLen + paddingsize;
  while (es_buf_size < mPushedBytes + frame_size) {
    OMX_LOGD("wait for mem bufs...");
    usleep(5000);
  }
  mEsUnit = mVirtEsAddr + mPushedOffset;
  kdMemcpy(mEsUnit, header->pBuffer + header->nOffset,
      header->nFilledLen);
  mPushedBytes += header->nFilledLen;
  mPushedOffset += header->nFilledLen;
  if (paddingsize) {
    kdMemset(mEsUnit + header->nFilledLen, 0x88, paddingsize);
    mPushedBytes += paddingsize;
    mPushedOffset += paddingsize;
  }
  if (es_buf_size < mPushedOffset + mDefinition.nBufferSize) {
    kdMemset(mEsUnit + header->nFilledLen + paddingsize, 0x88,
        es_buf_size - mPushedOffset);
    paddingsize += es_buf_size - mPushedOffset;
    mPushedBytes += es_buf_size - mPushedOffset;
    mPushedOffset = 0;
  }
  header->nFilledLen += paddingsize;
  return OMX_ErrorNone;
