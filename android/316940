format 74
"graphics" // vendor::tv::chrome::plugins::drmserver_adapter::jni::ppapi::utility::graphics
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/ppapi/utility/graphics/"
  cpp_src_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/ppapi/utility/graphics/"
  cpp_namespace "pp"
  classview 276492 "graphics"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 2815756 "PaintAggregator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ This file defines the API to aggregate multiple invalidation and scroll
/ commands to produce a scroll and repaint sequence.
/ This class is responsible for aggregating multiple invalidation and scroll
/ commands to produce a scroll and repaint sequence. You can use this manually
/ to track your updates, but most applications will use the PaintManager to
/ additionally handle the necessary callbacks on top of the PaintAggregator
/ functionality.
/
/ Refer to <code>http://code.google.com/p/ppapi/wiki/2DPaintingModel</code>
/ for further information."
      class 2815884 "PaintUpdate"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11528076 "PaintUpdate"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment "/ Default constructor for creating an is_null() <code>PaintUpdate</code>
/ object."
	end

	operation 11528204 "~PaintUpdate"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	  comment "/ Destructor."
	end

	attribute 10059660 "has_scroll"
	  public type class_ref 2322828 // bool
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 5243660 // scroll_delta (<directional composition>)
	  relation 5243532 *-->
	    a role_name "scroll_delta" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5243660 // scroll_delta (<directional composition>)
	    b parent class_ref 2792204 // Point
	end

	classrelation 5243788 // scroll_rect (<directional composition>)
	  relation 5243660 *-->
	    a role_name "scroll_rect" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5243788 // scroll_rect (<directional composition>)
	    b parent class_ref 2792332 // Rect
	end

	classrelation 5243916 // paint_rects (<directional composition>)
	  relation 5243788 *-->
	    stereotype "std::vector"
	    a role_name "paint_rects" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5243916 // paint_rects (<directional composition>)
	    b parent class_ref 2792332 // Rect
	end

	classrelation 5244044 // paint_bounds (<directional composition>)
	  relation 5243916 *-->
	    a role_name "paint_bounds" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5244044 // paint_bounds (<directional composition>)
	    b parent class_ref 2792332 // Rect
	end
      end

      operation 11528332 "PaintAggregator"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor."
      end

      operation 11528460 "set_max_redundant_paint_to_scroll_area"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "area" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    max_redundant_paint_to_scroll_area_ = area;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function setting the max ratio of paint rect area to scroll rect
/ area that we will tolerate before downgrading the scroll into a repaint.
/
/ If the combined area of paint rects contained within the scroll
/ rect grows too large, then we might as well just treat
/ the scroll rect as a paint rect.
/
/ @param[in] area The max ratio of paint rect area to scroll rect area that
/ we will tolerate before downgrading the scroll into a repaint."
      end

      operation 11528588 "set_max_paint_rects"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "max_rects" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    max_paint_rects_ = max_rects;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the maximum number of paint rects. If we
/ exceed this limit, then we'll start combining paint rects (see
/ CombinePaintRects). This limiting can be important since there is
/ typically some overhead in deciding what to paint. If your module is fast
/ at doing these computations, raise this threshold, if your module is
/ slow, lower it (probably requires some tuning to find the right value).
/
/ @param[in] max_rects The maximum number of paint rects."
      end

      operation 11528716 "HasPendingUpdate"
	const public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if there is a pending update. There is a
/ PendingUpdate if InvalidateRect or ScrollRect were called and
/ ClearPendingUpdate was not called.
/
/ @return true if there is a pending update, otherwise false."
      end

      operation 11528844 "ClearPendingUpdate"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function clears a pending update."
      end

      operation 11528972 "GetPendingUpdate"
	const public return_type class_ref 2815884 // PaintUpdate
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function gets a pending update.
/
/ @return A PaintUpdate containing the pending update."
      end

      operation 11529100 "InvalidateRect"
	public explicit_return_type "void"
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function invalidates the rect so it will be repainted.
/
/ @param[in] rect A rect to be repainted."
      end

      operation 11529228 "ScrollRect"
	public explicit_return_type "void"
	nparams 2
	  param in name "clip_rect" type class_ref 2792332 // Rect
	  param in name "amount" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function adds a pending scroll update.
/
/ @param[in] clip_rect The rect to scroll.
/ @param[in] amount A Point amount to scroll <code>rect</code>."
      end

      class 2816012 "InternalPaintUpdate"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11529356 "InternalPaintUpdate"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11529484 "~InternalPaintUpdate"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 11529612 "GetScrollDamage"
	  const public return_type class_ref 2792332 // Rect
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Computes the rect damaged by scrolling within |scroll_rect| by
 |scroll_delta|. This rect must be repainted. It is not included in
 paint_rects or in the rect returned by GetPaintBounds."
	end

	operation 11529740 "GetPaintBounds"
	  const public return_type class_ref 2792332 // Rect
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns the smallest rect containing all paint rects, not including the
 scroll damage rect."
	end

	classrelation 5244172 // scroll_delta (<directional composition>)
	  relation 5244044 *-->
	    a role_name "scroll_delta" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5244172 // scroll_delta (<directional composition>)
	    b parent class_ref 2792204 // Point
	end

	classrelation 5244300 // scroll_rect (<directional composition>)
	  relation 5244172 *-->
	    a role_name "scroll_rect" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5244300 // scroll_rect (<directional composition>)
	    b parent class_ref 2792332 // Rect
	end

	classrelation 5244428 // paint_rects (<directional composition>)
	  relation 5244300 *-->
	    stereotype "std::vector"
	    a role_name "paint_rects" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5244428 // paint_rects (<directional composition>)
	    b parent class_ref 2792332 // Rect
	end
      end

      operation 11529868 "ScrollPaintRect"
	const private return_type class_ref 2792332 // Rect
	nparams 2
	  param in name "paint_rect" type class_ref 2792332 // Rect
	  param in name "amount" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11529996 "ShouldInvalidateScrollRect"
	const private return_type class_ref 2322828 // bool
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11530124 "InvalidateScrollRect"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11530252 "CombinePaintRects"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 5244556 // update_ (<directional composition>)
	relation 5244428 *-->
	  a role_name "update_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5244556 // update_ (<directional composition>)
	  b parent class_ref 2816012 // InternalPaintUpdate
      end

      attribute 10059788 "max_redundant_paint_to_scroll_area_"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 10059916 "max_paint_rects_"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2816140 "PaintManager"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ This class converts the \"instance push\" model of painting in PPAPI to a
/ paint request at a later time. Usage is that you call Invalidate and
/ Scroll, and implement the Client interface. Your OnPaint handler will
/ then get called with coalesced paint events.
/
/ This class is basically a <code>PaintAggregator</code> that groups updates,
/ plus management of callbacks for scheduling paints.
/
/ <strong>Example:</strong>
/
/ <code>
/
/  class MyClass : public pp::Instance, public PaintManager::Client {
/   public:
/    MyClass() {
/      paint_manager_.Initialize(this, this, false);
/    }
/
/    void ViewChanged(const pp::Rect& position, const pp::Rect& clip) {
/      paint_manager_.SetSize(position.size());
/    }
/
/    void DoSomething() {
/      // This function does something like respond to an event that causes
/      // the screen to need updating.
/      paint_manager_.InvalidateRect(some_rect);
/    }
/
/    // Implementation of PaintManager::Client
/    virtual bool OnPaint(pp::Graphics2D& device,
/                         const pp::PaintUpdate& update) {
/      // If our app needed scrolling, we would apply that first here.
/
/      // Then we would either repaint the area returned by GetPaintBounds or
/      // iterate through all the paint_rects.
/
/      // The caller will call Flush() for us, so don't do that here.
/      return true;
/    }
/
/   private:
/    pp::PaintManager paint_manager_;
/  };
/ </code>"
      class 2816268 "Client"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11530380 "OnPaint"
	  abstract cpp_virtual public return_type class_ref 2322828 // bool
	  nparams 3
	    param inout name "graphics" type class_ref 2791948 // Graphics2D
	    param in name "paint_rects" explicit_type "std::vector<Rect>"
	    param in name "paint_bounds" type class_ref 2792332 // Rect
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "/ OnPaint() paints the given invalid area of the instance to the given
/ graphics device. Returns true if anything was painted.
/
/ You are given the list of rects to paint in <code>paint_rects</code>,
/ and the union of all of these rects in <code>paint_bounds</code>. You
/ only have to paint the area inside each of the
/ <code>paint_rects</code>, but can paint more if you want (some apps may
/ just want to paint the union).
/
/ Do not call Flush() on the graphics device, this will be done
/ automatically if you return true from this function since the
/ <code>PaintManager</code> needs to handle the callback.
/
/ It is legal for you to cause invalidates inside of Paint which will
/ then get executed as soon as the Flush for this update has completed.
/ However, this is not very nice to the host system since it will spin the
/ CPU, possibly updating much faster than necessary. It is best to have a
/ 1/60 second timer to do an invalidate instead. This will limit your
/ animation to the slower of 60Hz or \"however fast Flush can complete.\"
/
/ @param[in] graphics A <code>Graphics2D</code> to be painted.
/ @param[in] paint_rects A list of rects to paint.
/ @param[in] paint_bounds A union of the rects to paint.
/
/ @return true if successful, otherwise false."
	end

	operation 11530508 "~Client"
	  cpp_virtual cpp_inline protected explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	  
	  
	  
	  
	  comment " You shouldn't be doing deleting through this interface."
	end
      end

      operation 11530636 "PaintManager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor for creating an is_null() <code>PaintManager</code>
/ object. If you use this version of the constructor, you must call
/ Initialize() below."
      end

      operation 11530764 "PaintManager"
	public explicit_return_type ""
	nparams 3
	  param inout name "instance" type class_ref 2792716 // Instance
	  param inout name "client" type class_ref 2816268 // Client
	  param in name "is_always_opaque" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor to create a new <code>PaintManager</code> with an instance
/ and client.
/
/ <strong>Note:</strong> You will need to call SetSize() before this class
/ will do anything. Normally you do this from the <code>ViewChanged</code>
/ method of your instance.
/
/ @param instance The instance using this paint manager to do its
/ painting. Painting will automatically go to this instance and you don't
/ have to manually bind any device context (this is all handled by the
/ paint manager).
/
/ @param client A non-owning pointer and must remain valid (normally the
/ object implementing the Client interface will own the paint manager).
/
/ @param is_always_opaque A flag passed to the device contexts that this
/ class creates. Set this to true if your instance always draws an opaque
/ image to the device. This is used as a hint to the browser that it does
/ not need to do alpha blending, which speeds up painting. If you generate
/ non-opqaue pixels or aren't sure, set this to false for more general
/ blending.
/
/ If you set is_always_opaque, your alpha channel should always be set to
/ 0xFF or there may be painting artifacts. Being opaque will allow the
/ browser to do a memcpy rather than a blend to paint the plugin, and this
/ means your alpha values will get set on the page backing store. If these
/ values are incorrect, it could mess up future blending. If you aren't
/ sure, it is always correct to specify that it it not opaque."
      end

      operation 11530892 "~PaintManager"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11531020 "Initialize"
	public explicit_return_type "void"
	nparams 3
	  param inout name "instance" type class_ref 2792716 // Instance
	  param inout name "client" type class_ref 2816268 // Client
	  param in name "is_always_opaque" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Initialize() must be called if you are using the 0-arg constructor.
/
/ @param instance The instance using this paint manager to do its
/ painting. Painting will automatically go to this instance and you don't
/ have to manually bind any device context (this is all handled by the
/ paint manager).
/ @param client A non-owning pointer and must remain valid (normally the
/ object implementing the Client interface will own the paint manager).
/ @param is_always_opaque A flag passed to the device contexts that this
/ class creates. Set this to true if your instance always draws an opaque
/ image to the device. This is used as a hint to the browser that it does
/ not need to do alpha blending, which speeds up painting. If you generate
/ non-opqaue pixels or aren't sure, set this to false for more general
/ blending.
/
/ If you set <code>is_always_opaque</code>, your alpha channel should
/ always be set to <code>0xFF</code> or there may be painting artifacts.
/ Being opaque will allow the browser to do a memcpy rather than a blend
/ to paint the plugin, and this means your alpha values will get set on the
/ page backing store. If these values are incorrect, it could mess up
/ future blending. If you aren't sure, it is always correct to specify that
/ it it not opaque."
      end

      operation 11531148 "set_max_redundant_paint_to_scroll_area"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "area" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    aggregator_.set_max_redundant_paint_to_scroll_area(area);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function setting the max ratio of paint rect area to scroll rect
/ area that we will tolerate before downgrading the scroll into a repaint.
/
/ If the combined area of paint rects contained within the scroll
/ rect grows too large, then we might as well just treat
/ the scroll rect as a paint rect.
/
/ @param[in] area The max ratio of paint rect area to scroll rect area that
/ we will tolerate before downgrading the scroll into a repaint."
      end

      operation 11531276 "set_max_paint_rects"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "max_rects" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    aggregator_.set_max_paint_rects(max_rects);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the maximum number of paint rects. If we
/ exceed this limit, then we'll start combining paint rects (refer to
/ CombinePaintRects() for further information). This limiting can be
/ important since there is typically some overhead in deciding what to
/ paint. If your module is fast at doing these computations, raise this
/ threshold, if your module is slow, lower it (probably requires some
/ tuning to find the right value).
/
/ @param[in] max_rects The maximum number of paint rects."
      end

      operation 11531404 "SetSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "new_size" type class_ref 2791820 // Size
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetSize() sets the size of the instance. If the size is the same as the
/ previous call, this will be a NOP. If the size has changed, a new device
/ will be allocated to the given size and a paint to that device will be
/ scheduled.
/
/ This function is intended to be called from <code>ViewChanged</code> with
/ the size of the instance. Since it tracks the old size and only allocates
/ when the size changes, you can always call this function without worrying
/ about whether the size changed or ViewChanged() is called for another
/ reason (like the position changed).
/
/ @param new_size The new size for the instance."
      end

      operation 11531532 "graphics"
	const cpp_inline public return_type class_ref 2791948 // Graphics2D
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return graphics_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function provides access to the underlying device in case you need
/ it. If you have done a SetSize(), note that the graphics context won't be
/ updated until right before the next call to OnPaint().
/
/ <strong>Note:</strong> If you call Flush on this device the paint manager
/ will get very confused, don't do this!"
      end

      operation 11531660 "graphics"
	cpp_inline public return_type class_ref 2791948 // Graphics2D
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return graphics_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function provides access to the underlying device in case you need
/ it. If you have done a SetSize(), note that the graphics context won't be
/ updated until right before the next call to OnPaint().
/
/ <strong>Note:</strong> If you call Flush on this device the paint manager
/ will get very confused, don't do this!"
      end

      operation 11531788 "Invalidate"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Invalidate() invalidate the entire instance."
      end

      operation 11531916 "InvalidateRect"
	public explicit_return_type "void"
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ InvalidateRect() Invalidate the provided rect.
/
/ @param[in] rect The <code>Rect</code> to be invalidated."
      end

      operation 11532044 "ScrollRect"
	public explicit_return_type "void"
	nparams 2
	  param in name "clip_rect" type class_ref 2792332 // Rect
	  param in name "amount" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ ScrollRect() scrolls the provided <code>clip_rect</code> by the
/ <code>amount</code> argument.
/
/ @param clip_rect The clip rectangle to scroll.
/ @param amount The amount to scroll <code>clip_rect</code>."
      end

      operation 11532172 "GetEffectiveSize"
	const public return_type class_ref 2791820 // Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetEffectiveSize() returns the size of the graphics context for the
/ next paint operation. This is the pending size if a resize is pending
/ (the instance has called SetSize() but we haven't actually painted it
/ yet), or the current size of no resize is pending.
/
/ @return The effective size."
      end

      operation 11532300 "PaintManager"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 2816140 // PaintManager
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Disallow copy and assign (these are unimplemented)."
      end

      operation 11532428 "operator ="
	private return_type class_ref 2816140 // PaintManager
	nparams 1
	  param in name "" type class_ref 2816140 // PaintManager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 11532556 "EnsureCallbackPending"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Makes sure there is a callback that will trigger a paint at a later time.
 This will be either a Flush callback telling us we're allowed to generate
 more data, or, if there's no flush callback pending, a manual call back
 to the message loop via ExecuteOnMainThread."
      end

      operation 11532684 "DoPaint"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Does the client paint and executes a Flush if necessary."
      end

      operation 11532812 "OnFlushComplete"
	private explicit_return_type "void"
	nparams 1
	  param in name "result" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Callback for asynchronous completion of Flush."
      end

      operation 11532940 "OnManualCallbackComplete"
	private explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Callback for manual scheduling of paints when there is no flush callback
 pending."
      end

      classrelation 5244684 // instance_ (<unidirectional association>)
	relation 5244556 --->
	  a role_name "instance_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5244684 // instance_ (<unidirectional association>)
	  b parent class_ref 2792716 // Instance
      end

      classrelation 5244812 // client_ (<unidirectional association>)
	relation 5244684 --->
	  a role_name "client_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5244812 // client_ (<unidirectional association>)
	  b parent class_ref 2816268 // Client
      end

      attribute 10060044 "is_always_opaque_"
	private type class_ref 2322828 // bool
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5244940 // callback_factory_ (<directional composition>)
	relation 5244812 *-->
	  stereotype "CompletionCallbackFactory"
	  a role_name "callback_factory_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5244940 // callback_factory_ (<directional composition>)
	  b parent class_ref 2816140 // PaintManager
      end

      classrelation 5245068 // graphics_ (<directional composition>)
	relation 5244940 *-->
	  a role_name "graphics_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5245068 // graphics_ (<directional composition>)
	  b parent class_ref 2791948 // Graphics2D
      end

      classrelation 5245196 // aggregator_ (<directional composition>)
	relation 5245068 *-->
	  a role_name "aggregator_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5245196 // aggregator_ (<directional composition>)
	  b parent class_ref 2815756 // PaintAggregator
      end

      attribute 10060172 "manual_callback_pending_"
	private type class_ref 2322828 // bool
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 10060300 "flush_pending_"
	private type class_ref 2322828 // bool
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 10060428 "has_pending_resize_"
	private type class_ref 2322828 // bool
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5245324 // pending_size_ (<directional composition>)
	relation 5245196 *-->
	  a role_name "pending_size_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5245324 // pending_size_ (<directional composition>)
	  b parent class_ref 2791820 // Size
      end
    end
  end

  deploymentview 262796 "graphics"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1062156 "paint_aggregator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2815756 // PaintAggregator
      end
    end

    artifact 1062284 "paint_manager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2816140 // PaintManager
      end
    end
  end
end
