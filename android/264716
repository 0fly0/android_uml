format 74
"hardware" // hardware::libhardware::include::hardware
  revision 3
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/hardware/libhardware/include/hardware/"
  cpp_src_dir "/home/shchen/work/jellybean/hardware/libhardware/include/hardware/"
  classview 236044 "hardware"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1708940 "audio_config_t"
      visibility package stereotype "typedef" explicit_base_type "audio_config"
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1709068 "audio_stream"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " common audio stream parameters and operations "
      attribute 6602892 "get_sample_rate"
	public explicit_type "/** * Return the sampling rate in Hz - eg. 44100. */ uint32_t (*)(const struct audio_stream *stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}

    /**
     * Return the sampling rate in Hz - eg. 44100.
     */
    uint32_t (*${name})(const struct audio_stream *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6603020 "set_sample_rate"
	public explicit_type "/* currently unused - use set_parameters with key * AUDIO_PARAMETER_STREAM_SAMPLING_RATE */ int (*)(struct audio_stream *stream, uint32_t rate)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* currently unused - use set_parameters with key
     *    AUDIO_PARAMETER_STREAM_SAMPLING_RATE
     */
    int (*${name})(struct audio_stream *stream, uint32_t rate)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6603148 "get_buffer_size"
	public explicit_type "/** * Return size of input/output buffer in bytes for this stream - eg. 4800. * It should be a multiple of the frame size. See also get_input_buffer_size. */ size_t (*)(const struct audio_stream *stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Return size of input/output buffer in bytes for this stream - eg. 4800.
     * It should be a multiple of the frame size.  See also get_input_buffer_size.
     */
    size_t (*${name})(const struct audio_stream *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6603276 "get_channels"
	public explicit_type "/** * Return the channel mask - * e.g. AUDIO_CHANNEL_OUT_STEREO or AUDIO_CHANNEL_IN_STEREO */ audio_channel_mask_t (*)(const struct audio_stream *stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Return the channel mask -
     *  e.g. AUDIO_CHANNEL_OUT_STEREO or AUDIO_CHANNEL_IN_STEREO
     */
    audio_channel_mask_t (*${name})(const struct audio_stream *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6603404 "get_format"
	public explicit_type "/** * Return the audio format - e.g. AUDIO_FORMAT_PCM_16_BIT */ audio_format_t (*)(const struct audio_stream *stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Return the audio format - e.g. AUDIO_FORMAT_PCM_16_BIT
     */
    audio_format_t (*${name})(const struct audio_stream *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6603532 "set_format"
	public explicit_type "/* currently unused - use set_parameters with key * AUDIO_PARAMETER_STREAM_FORMAT */ int (*)(struct audio_stream *stream, audio_format_t format)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* currently unused - use set_parameters with key
     *     AUDIO_PARAMETER_STREAM_FORMAT
     */
    int (*${name})(struct audio_stream *stream, audio_format_t format)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6603660 "standby"
	public explicit_type "/** * Put the audio hardware input/output into standby mode. * Driver should exit from standby mode at the next I/O operation. * Returns 0 on success and <0 on failure. */ int (*)(struct audio_stream *stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Put the audio hardware input/output into standby mode.
     * Driver should exit from standby mode at the next I/O operation.
     * Returns 0 on success and <0 on failure.
     */
    int (*${name})(struct audio_stream *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6603788 "dump"
	public explicit_type "/** dump the state of the audio input/output device */ int (*)(const struct audio_stream *stream, int fd)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** dump the state of the audio input/output device */
    int (*${name})(const struct audio_stream *stream, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6603916 "get_device"
	public explicit_type "/** Return the set of device(s) which this stream is connected to */ audio_devices_t (*)(const struct audio_stream *stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Return the set of device(s) which this stream is connected to */
    audio_devices_t (*${name})(const struct audio_stream *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6604044 "set_device"
	public explicit_type "/** * Currently unused - set_device() corresponds to set_parameters() with key * AUDIO_PARAMETER_STREAM_ROUTING for both input and output. * AUDIO_PARAMETER_STREAM_INPUT_SOURCE is an additional information used by * input streams only. */ int (*)(struct audio_stream *stream, audio_devices_t device)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Currently unused - set_device() corresponds to set_parameters() with key
     * AUDIO_PARAMETER_STREAM_ROUTING for both input and output.
     * AUDIO_PARAMETER_STREAM_INPUT_SOURCE is an additional information used by
     * input streams only.
     */
    int (*${name})(struct audio_stream *stream, audio_devices_t device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6604172 "set_parameters"
	public explicit_type "/** * set/get audio stream parameters. The function accepts a list of * parameter key value pairs in the form: key1=value1;key2=value2;... * * Some keys are reserved for standard parameters (See AudioParameter class) * * If the implementation does not accept a parameter change while * the output is active but the parameter is acceptable otherwise, it must * return -ENOSYS. * * The audio flinger will put the stream in standby and then change the * parameter value. */ int (*)(struct audio_stream *stream, const char *kv_pairs)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * set/get audio stream parameters. The function accepts a list of
     * parameter key value pairs in the form: key1=value1;key2=value2;...
     *
     * Some keys are reserved for standard parameters (See AudioParameter class)
     *
     * If the implementation does not accept a parameter change while
     * the output is active but the parameter is acceptable otherwise, it must
     * return -ENOSYS.
     *
     * The audio flinger will put the stream in standby and then change the
     * parameter value.
     */
    int (*${name})(struct audio_stream *stream, const char *kv_pairs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6604300 "get_parameters"
	public explicit_type "/* * Returns a pointer to a heap allocated string. The caller is responsible * for freeing the memory for it using free(). */ char * (*)(const struct audio_stream *stream, const char *keys)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * Returns a pointer to a heap allocated string. The caller is responsible
     * for freeing the memory for it using free().
     */
    char * (*${name})(const struct audio_stream *stream,
                             const char *keys)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6604428 "add_audio_effect"
	public explicit_type "int (*)(const struct audio_stream *stream, effect_handle_t effect)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(const struct audio_stream *stream,
                             effect_handle_t effect)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6604556 "remove_audio_effect"
	public explicit_type "int (*)(const struct audio_stream *stream, effect_handle_t effect)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(const struct audio_stream *stream,
                             effect_handle_t effect)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1709196 "audio_stream_t"
      visibility package stereotype "typedef" base_type class_ref 1709068 // audio_stream
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3541772 // <dependency>
	relation 3541644 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3541772 // <dependency>
	  b parent class_ref 1709068 // audio_stream
      end
    end

    class 1709324 "audio_stream_out"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * audio_stream_out is the abstraction interface for the audio output hardware.
 *
 * It provides information about various properties of the audio output
 * hardware driver."
      classrelation 3541900 // common (<directional composition>)
	relation 3541772 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3541900 // common (<directional composition>)
	  b parent class_ref 1709068 // audio_stream
      end

      attribute 6604684 "get_latency"
	public explicit_type "/** * Return the audio hardware driver estimated latency in milliseconds. */ uint32_t (*)(const struct audio_stream_out *stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Return the audio hardware driver estimated latency in milliseconds.
     */
    uint32_t (*${name})(const struct audio_stream_out *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6604812 "set_volume"
	public explicit_type "/** * Use this method in situations where audio mixing is done in the * hardware. This method serves as a direct interface with hardware, * allowing you to directly set the volume as apposed to via the framework. * This method might produce multiple PCM outputs or hardware accelerated * codecs, such as MP3 or AAC. */ int (*)(struct audio_stream_out *stream, float left, float right)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Use this method in situations where audio mixing is done in the
     * hardware. This method serves as a direct interface with hardware,
     * allowing you to directly set the volume as apposed to via the framework.
     * This method might produce multiple PCM outputs or hardware accelerated
     * codecs, such as MP3 or AAC.
     */
    int (*${name})(struct audio_stream_out *stream, float left, float right)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6604940 "write"
	public explicit_type "/** * Write audio buffer to driver. Returns number of bytes written, or a * negative status_t. If at least one frame was written successfully prior to the error, * it is suggested that the driver return that successful (short) byte count * and then return an error in the subsequent call. */ ssize_t (*)(struct audio_stream_out *stream, const void* buffer, size_t bytes)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Write audio buffer to driver. Returns number of bytes written, or a
     * negative status_t. If at least one frame was written successfully prior to the error,
     * it is suggested that the driver return that successful (short) byte count
     * and then return an error in the subsequent call.
     */
    ssize_t (*${name})(struct audio_stream_out *stream, const void* buffer,
                     size_t bytes)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6605068 "get_render_position"
	public explicit_type "/* return the number of audio frames written by the audio dsp to DAC since * the output has exited standby */ int (*)(const struct audio_stream_out *stream, uint32_t *dsp_frames)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* return the number of audio frames written by the audio dsp to DAC since
     * the output has exited standby
     */
    int (*${name})(const struct audio_stream_out *stream,
                               uint32_t *dsp_frames)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6605196 "get_next_write_timestamp"
	public explicit_type "/** * get the local time at which the next write to the audio driver will be presented. * The units are microseconds, where the epoch is decided by the local audio HAL. */ int (*)(const struct audio_stream_out *stream, int64_t *timestamp)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * get the local time at which the next write to the audio driver will be presented.
     * The units are microseconds, where the epoch is decided by the local audio HAL.
     */
    int (*${name})(const struct audio_stream_out *stream,
                                    int64_t *timestamp)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1709452 "audio_stream_out_t"
      visibility package stereotype "typedef" base_type class_ref 1709324 // audio_stream_out
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3542028 // <dependency>
	relation 3541900 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3542028 // <dependency>
	  b parent class_ref 1709324 // audio_stream_out
      end
    end

    class 1709580 "audio_stream_in"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3542156 // common (<directional composition>)
	relation 3542028 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3542156 // common (<directional composition>)
	  b parent class_ref 1709068 // audio_stream
      end

      attribute 6605324 "set_gain"
	public explicit_type "/** set the input gain for the audio driver. This method is for * for future use */ int (*)(struct audio_stream_in *stream, float gain)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** set the input gain for the audio driver. This method is for
     *  for future use */
    int (*${name})(struct audio_stream_in *stream, float gain)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6605452 "read"
	public explicit_type "/** Read audio buffer in from audio driver. Returns number of bytes read, or a * negative status_t. If at least one frame was read prior to the error, * read should return that byte count and then return an error in the subsequent call. */ ssize_t (*)(struct audio_stream_in *stream, void* buffer, size_t bytes)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Read audio buffer in from audio driver. Returns number of bytes read, or a
     *  negative status_t. If at least one frame was read prior to the error,
     *  read should return that byte count and then return an error in the subsequent call.
     */
    ssize_t (*${name})(struct audio_stream_in *stream, void* buffer,
                    size_t bytes)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6605580 "get_input_frames_lost"
	public explicit_type "/** * Return the amount of input frames lost in the audio driver since the * last call of this function. * Audio driver is expected to reset the value to 0 and restart counting * upon returning the current value by this function call. * Such loss typically occurs when the user space process is blocked * longer than the capacity of audio driver buffers. * * Unit: the number of input audio frames */ uint32_t (*)(struct audio_stream_in *stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Return the amount of input frames lost in the audio driver since the
     * last call of this function.
     * Audio driver is expected to reset the value to 0 and restart counting
     * upon returning the current value by this function call.
     * Such loss typically occurs when the user space process is blocked
     * longer than the capacity of audio driver buffers.
     *
     * Unit: the number of input audio frames
     */
    uint32_t (*${name})(struct audio_stream_in *stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1709708 "audio_stream_in_t"
      visibility package stereotype "typedef" base_type class_ref 1709580 // audio_stream_in
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3542284 // <dependency>
	relation 3542156 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3542284 // <dependency>
	  b parent class_ref 1709580 // audio_stream_in
      end
    end

    class 1709836 "audio_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "********************************************************************
*
 * Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
 * and the fields of this data structure must begin with hw_module_t
 * followed by module specific information."
      classrelation 3542412 // common (<directional composition>)
	relation 3542284 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3542412 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end
    end

    class 1709964 "hw_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
 * and the fields of this data structure must begin with hw_module_t
 * followed by module specific information."
      attribute 6673932 "tag"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6674060 "module_api_version"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6674188 "hal_api_version"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6674316 "id"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6674444 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6674572 "author"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3554700 // methods (<unidirectional association>)
	relation 3554572 --->
	  a role_name "methods" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3554700 // methods (<unidirectional association>)
	  b parent class_ref 1736844 // hw_module_methods_t
      end

      attribute 6674700 "dso"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6674828 "reserved"
	public explicit_type "uint32_t"
	multiplicity "[32-7]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1710092 "audio_hw_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3542540 // common (<directional composition>)
	relation 3542412 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3542540 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6605708 "get_supported_devices"
	public explicit_type "/** * used by audio flinger to enumerate what devices are supported by * each audio_hw_device implementation. * * Return value is a bitmask of 1 or more values of audio_devices_t * * NOTE: audio HAL implementations starting with * AUDIO_DEVICE_API_VERSION_2_0 do not implement this function. * All supported devices should be listed in audio_policy.conf * file and the audio policy manager must choose the appropriate * audio module based on information in this file. */ uint32_t (*)(const struct audio_hw_device *dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * used by audio flinger to enumerate what devices are supported by
     * each audio_hw_device implementation.
     *
     * Return value is a bitmask of 1 or more values of audio_devices_t
     *
     * NOTE: audio HAL implementations starting with
     * AUDIO_DEVICE_API_VERSION_2_0 do not implement this function.
     * All supported devices should be listed in audio_policy.conf
     * file and the audio policy manager must choose the appropriate
     * audio module based on information in this file.
     */
    uint32_t (*${name})(const struct audio_hw_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6605836 "init_check"
	public explicit_type "/** * check to see if the audio hardware interface has been initialized. * returns 0 on success, -ENODEV on failure. */ int (*)(const struct audio_hw_device *dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * check to see if the audio hardware interface has been initialized.
     * returns 0 on success, -ENODEV on failure.
     */
    int (*${name})(const struct audio_hw_device *dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6605964 "set_voice_volume"
	public explicit_type "/** set the audio volume of a voice call. Range is between 0.0 and 1.0 */ int (*)(struct audio_hw_device *dev, float volume)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** set the audio volume of a voice call. Range is between 0.0 and 1.0 */
    int (*${name})(struct audio_hw_device *dev, float volume)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6606092 "set_master_volume"
	public explicit_type "/** * set the audio volume for all audio activities other than voice call. * Range between 0.0 and 1.0. If any value other than 0 is returned, * the software mixer will emulate this capability. */ int (*)(struct audio_hw_device *dev, float volume)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * set the audio volume for all audio activities other than voice call.
     * Range between 0.0 and 1.0. If any value other than 0 is returned,
     * the software mixer will emulate this capability.
     */
    int (*${name})(struct audio_hw_device *dev, float volume)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6606220 "get_master_volume"
	public explicit_type "/** * Get the current master volume value for the HAL, if the HAL supports * master volume control. AudioFlinger will query this value from the * primary audio HAL when the service starts and use the value for setting * the initial master volume across all HALs. HALs which do not support * this method may leave it set to NULL. */ int (*)(struct audio_hw_device *dev, float *volume)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Get the current master volume value for the HAL, if the HAL supports
     * master volume control.  AudioFlinger will query this value from the
     * primary audio HAL when the service starts and use the value for setting
     * the initial master volume across all HALs.  HALs which do not support
     * this method may leave it set to NULL.
     */
    int (*${name})(struct audio_hw_device *dev, float *volume)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6606348 "set_mode"
	public explicit_type "/** * set_mode is called when the audio mode changes. AUDIO_MODE_NORMAL mode * is for standard audio playback, AUDIO_MODE_RINGTONE when a ringtone is * playing, and AUDIO_MODE_IN_CALL when a call is in progress. */ int (*)(struct audio_hw_device *dev, audio_mode_t mode)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * set_mode is called when the audio mode changes. AUDIO_MODE_NORMAL mode
     * is for standard audio playback, AUDIO_MODE_RINGTONE when a ringtone is
     * playing, and AUDIO_MODE_IN_CALL when a call is in progress.
     */
    int (*${name})(struct audio_hw_device *dev, audio_mode_t mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6606476 "set_mic_mute"
	public explicit_type "/* mic mute */ int (*)(struct audio_hw_device *dev, bool state)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* mic mute */
    int (*${name})(struct audio_hw_device *dev, bool state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6606604 "get_mic_mute"
	public explicit_type "int (*)(const struct audio_hw_device *dev, bool *state)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(const struct audio_hw_device *dev, bool *state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6606732 "set_parameters"
	public explicit_type "/* set/get global audio parameters */ int (*)(struct audio_hw_device *dev, const char *kv_pairs)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* set/get global audio parameters */
    int (*${name})(struct audio_hw_device *dev, const char *kv_pairs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6606860 "get_parameters"
	public explicit_type "/* * Returns a pointer to a heap allocated string. The caller is responsible * for freeing the memory for it using free(). */ char * (*)(const struct audio_hw_device *dev, const char *keys)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * Returns a pointer to a heap allocated string. The caller is responsible
     * for freeing the memory for it using free().
     */
    char * (*${name})(const struct audio_hw_device *dev,
                             const char *keys)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6606988 "get_input_buffer_size"
	public explicit_type "/* Returns audio input buffer size according to parameters passed or * 0 if one of the parameters is not supported. * See also get_buffer_size which is for a particular stream. */ size_t (*)(const struct audio_hw_device *dev, const struct audio_config *config)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* Returns audio input buffer size according to parameters passed or
     * 0 if one of the parameters is not supported.
     * See also get_buffer_size which is for a particular stream.
     */
    size_t (*${name})(const struct audio_hw_device *dev,
                                    const struct audio_config *config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6607116 "open_output_stream"
	public explicit_type "/** This method creates and opens the audio hardware output stream */ int (*)(struct audio_hw_device *dev, audio_io_handle_t handle, audio_devices_t devices, audio_output_flags_t flags, struct audio_config *config, struct audio_stream_out **stream_out)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** This method creates and opens the audio hardware output stream */
    int (*${name})(struct audio_hw_device *dev,
                              audio_io_handle_t handle,
                              audio_devices_t devices,
                              audio_output_flags_t flags,
                              struct audio_config *config,
                              struct audio_stream_out **stream_out)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6607244 "close_output_stream"
	public explicit_type "void (*)(struct audio_hw_device *dev, struct audio_stream_out* stream_out)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    void (*${name})(struct audio_hw_device *dev,
                                struct audio_stream_out* stream_out)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6607372 "open_input_stream"
	public explicit_type "/** This method creates and opens the audio hardware input stream */ int (*)(struct audio_hw_device *dev, audio_io_handle_t handle, audio_devices_t devices, struct audio_config *config, struct audio_stream_in **stream_in)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** This method creates and opens the audio hardware input stream */
    int (*${name})(struct audio_hw_device *dev,
                             audio_io_handle_t handle,
                             audio_devices_t devices,
                             struct audio_config *config,
                             struct audio_stream_in **stream_in)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6607500 "close_input_stream"
	public explicit_type "void (*)(struct audio_hw_device *dev, struct audio_stream_in *stream_in)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    void (*${name})(struct audio_hw_device *dev,
                               struct audio_stream_in *stream_in)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6607628 "dump"
	public explicit_type "/** This method dumps the state of the audio hardware */ int (*)(const struct audio_hw_device *dev, int fd)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** This method dumps the state of the audio hardware */
    int (*${name})(const struct audio_hw_device *dev, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6607756 "set_master_mute"
	public explicit_type "/** * set the audio mute status for all audio activities. If any value other * than 0 is returned, the software mixer will emulate this capability. */ int (*)(struct audio_hw_device *dev, bool mute)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * set the audio mute status for all audio activities.  If any value other
     * than 0 is returned, the software mixer will emulate this capability.
     */
    int (*${name})(struct audio_hw_device *dev, bool mute)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6607884 "get_master_mute"
	public explicit_type "/** * Get the current master mute status for the HAL, if the HAL supports * master mute control. AudioFlinger will query this value from the primary * audio HAL when the service starts and use the value for setting the * initial master mute across all HALs. HALs which do not support this * method may leave it set to NULL. */ int (*)(struct audio_hw_device *dev, bool *mute)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Get the current master mute status for the HAL, if the HAL supports
     * master mute control.  AudioFlinger will query this value from the primary
     * audio HAL when the service starts and use the value for setting the
     * initial master mute across all HALs.  HALs which do not support this
     * method may leave it set to NULL.
     */
    int (*${name})(struct audio_hw_device *dev, bool *mute)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1710220 "hw_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Every device data structure must begin with hw_device_t
 * followed by module specific public methods and attributes."
      attribute 6675084 "tag"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6675212 "version"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3554828 // module (<unidirectional association>)
	relation 3554700 --->
	  a role_name "module" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3554828 // module (<unidirectional association>)
	  b parent class_ref 1709964 // hw_module_t
      end

      attribute 6675340 "reserved"
	public explicit_type "uint32_t"
	multiplicity "[12]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6675468 "close"
	public explicit_type "/** Close this device */ int (*)(struct hw_device_t* device)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Close this device */
    int (*${name})(struct hw_device_t* device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 7223180 // <dependency>
	relation 7223052 -_->
	  stereotype "handle"
	  a package
	    cpp default "#include in source"
	    classrelation_ref 7223180 // <dependency>
	  b parent class_ref 1600396 // native_handle_t
      end
    end

    class 1710348 "audio_hw_device_t"
      visibility package stereotype "typedef" base_type class_ref 1710092 // audio_hw_device
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3542668 // <dependency>
	relation 3542540 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3542668 // <dependency>
	  b parent class_ref 1710092 // audio_hw_device
      end
    end

    class 1710476 "effect_descriptor_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The effect descriptor contains necessary information to facilitate the enumeration of the effect
 engines present in a library."
      attribute 6608012 "type"
	public explicit_type "effect_uuid_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " UUID of to the OpenSL ES interface implemented by this effect"
      end

      attribute 6608140 "uuid"
	public explicit_type "effect_uuid_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " UUID for this particular implementation"
      end

      attribute 6608268 "apiVersion"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Version of the effect control API implemented"
      end

      attribute 6608396 "flags"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " effect engine capabilities/requirements flags (see below)"
      end

      attribute 6608524 "cpuLoad"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " CPU load indication (see below)"
      end

      attribute 6608652 "memoryUsage"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Data Memory usage (see below)"
      end

      attribute 6608780 "name"
	public explicit_type "char"
	multiplicity "[EFFECT_STRING_LEN_MAX]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " human readable effect name"
      end

      attribute 6608908 "implementor"
	public explicit_type "char"
	multiplicity "[EFFECT_STRING_LEN_MAX]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " human readable effect implementor name"
      end
    end

    class 1710604 "effect_descriptor_t"
      visibility package stereotype "typedef" base_type class_ref 1710476 // effect_descriptor_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1710732 "effect_interface_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Effect control interface definition"
      attribute 6609036 "process"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: process // // Description: Effect process function. Takes input samples as specified // (count and location) in input buffer descriptor and output processed // samples as specified in output buffer descriptor. If the buffer descriptor // is not specified the function must use either the buffer or the // buffer provider function installed by the EFFECT_CMD_SET_CONFIG command. // The effect framework will call the process() function after the EFFECT_CMD_ENABLE // command is received and until the EFFECT_CMD_DISABLE is received. When the engine // receives the EFFECT_CMD_DISABLE command it should turn off the effect gracefully // and when done indicate that it is OK to stop calling the process() function by // returning the -ENODATA status. // // NOTE: the process() function implementation should be \"real-time safe\" that is // it should not perform blocking calls: malloc/free, sleep, read/write/open/close, // pthread_cond_wait/pthread_mutex_lock... // // Input: // self: handle to the effect interface this function // is called on. // inBuffer: buffer descriptor indicating where to read samples to process. // If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command. // // outBuffer: buffer descriptor indicating where to write processed samples. // If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command. // // Output: // returned value: 0 successful operation // -ENODATA the engine has finished the disable phase and the framework // can stop calling process() // -EINVAL invalid interface handle or // invalid input/output buffer description //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t self, audio_buffer_t *inBuffer, audio_buffer_t *outBuffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:       process
    //
    //    Description:    Effect process function. Takes input samples as specified
    //          (count and location) in input buffer descriptor and output processed
    //          samples as specified in output buffer descriptor. If the buffer descriptor
    //          is not specified the function must use either the buffer or the
    //          buffer provider function installed by the EFFECT_CMD_SET_CONFIG command.
    //          The effect framework will call the process() function after the EFFECT_CMD_ENABLE
    //          command is received and until the EFFECT_CMD_DISABLE is received. When the engine
    //          receives the EFFECT_CMD_DISABLE command it should turn off the effect gracefully
    //          and when done indicate that it is OK to stop calling the process() function by
    //          returning the -ENODATA status.
    //
    //    NOTE: the process() function implementation should be \"real-time safe\" that is
    //      it should not perform blocking calls: malloc/free, sleep, read/write/open/close,
    //      pthread_cond_wait/pthread_mutex_lock...
    //
    //    Input:
    //          self:       handle to the effect interface this function
    //              is called on.
    //          inBuffer:   buffer descriptor indicating where to read samples to process.
    //              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command.
    //
    //          outBuffer:   buffer descriptor indicating where to write processed samples.
    //              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG command.
    //
    //    Output:
    //        returned value:    0 successful operation
    //                          -ENODATA the engine has finished the disable phase and the framework
    //                                  can stop calling process()
    //                          -EINVAL invalid interface handle or
    //                                  invalid input/output buffer description
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t self,
                       audio_buffer_t *inBuffer,
                       audio_buffer_t *outBuffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6609164 "command"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: command // // Description: Send a command and receive a response to/from effect engine. // // Input: // self: handle to the effect interface this function // is called on. // cmdCode: command code: the command can be a standardized command defined in // effect_command_e (see below) or a proprietary command. // cmdSize: size of command in bytes // pCmdData: pointer to command data // pReplyData: pointer to reply data // // Input/Output: // replySize: maximum size of reply data as input // actual size of reply data as output // // Output: // returned value: 0 successful operation // -EINVAL invalid interface handle or // invalid command/reply size or format according to command code // The return code should be restricted to indicate problems related to the this // API specification. Status related to the execution of a particular command should be // indicated as part of the reply field. // // *pReplyData updated with command response // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t self, uint32_t cmdCode, uint32_t cmdSize, void *pCmdData, uint32_t *replySize, void *pReplyData)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:       command
    //
    //    Description:    Send a command and receive a response to/from effect engine.
    //
    //    Input:
    //          self:       handle to the effect interface this function
    //              is called on.
    //          cmdCode:    command code: the command can be a standardized command defined in
    //              effect_command_e (see below) or a proprietary command.
    //          cmdSize:    size of command in bytes
    //          pCmdData:   pointer to command data
    //          pReplyData: pointer to reply data
    //
    //    Input/Output:
    //          replySize: maximum size of reply data as input
    //                      actual size of reply data as output
    //
    //    Output:
    //          returned value: 0       successful operation
    //                          -EINVAL invalid interface handle or
    //                                  invalid command/reply size or format according to command code
    //              The return code should be restricted to indicate problems related to the this
    //              API specification. Status related to the execution of a particular command should be
    //              indicated as part of the reply field.
    //
    //          *pReplyData updated with command response
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t self,
                       uint32_t cmdCode,
                       uint32_t cmdSize,
                       void *pCmdData,
                       uint32_t *replySize,
                       void *pReplyData)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6609292 "get_descriptor"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: get_descriptor // // Description: Returns the effect descriptor // // Input: // self: handle to the effect interface this function // is called on. // // Input/Output: // pDescriptor: address where to return the effect descriptor. // // Output: // returned value: 0 successful operation. // -EINVAL invalid interface handle or invalid pDescriptor // *pDescriptor: updated with the effect descriptor. // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t self, effect_descriptor_t *pDescriptor)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:        get_descriptor
    //
    //    Description:    Returns the effect descriptor
    //
    //    Input:
    //          self:       handle to the effect interface this function
    //              is called on.
    //
    //    Input/Output:
    //          pDescriptor:    address where to return the effect descriptor.
    //
    //    Output:
    //        returned value:    0          successful operation.
    //                          -EINVAL     invalid interface handle or invalid pDescriptor
    //        *pDescriptor:     updated with the effect descriptor.
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t self,
                              effect_descriptor_t *pDescriptor)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6609420 "process_reverse"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: process_reverse // // Description: Process reverse stream function. This function is used to pass // a reference stream to the effect engine. If the engine does not need a reference // stream, this function pointer can be set to NULL. // This function would typically implemented by an Echo Canceler. // // Input: // self: handle to the effect interface this function // is called on. // inBuffer: buffer descriptor indicating where to read samples to process. // If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command. // // outBuffer: buffer descriptor indicating where to write processed samples. // If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command. // If the buffer and buffer provider in the configuration received by // EFFECT_CMD_SET_CONFIG_REVERSE are also NULL, do not return modified reverse // stream data // // Output: // returned value: 0 successful operation // -ENODATA the engine has finished the disable phase and the framework // can stop calling process_reverse() // -EINVAL invalid interface handle or // invalid input/output buffer description //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t self, audio_buffer_t *inBuffer, audio_buffer_t *outBuffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:       process_reverse
    //
    //    Description:    Process reverse stream function. This function is used to pass
    //          a reference stream to the effect engine. If the engine does not need a reference
    //          stream, this function pointer can be set to NULL.
    //          This function would typically implemented by an Echo Canceler.
    //
    //    Input:
    //          self:       handle to the effect interface this function
    //              is called on.
    //          inBuffer:   buffer descriptor indicating where to read samples to process.
    //              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command.
    //
    //          outBuffer:   buffer descriptor indicating where to write processed samples.
    //              If NULL, use the configuration passed by EFFECT_CMD_SET_CONFIG_REVERSE command.
    //              If the buffer and buffer provider in the configuration received by
    //              EFFECT_CMD_SET_CONFIG_REVERSE are also NULL, do not return modified reverse
    //              stream data
    //
    //    Output:
    //        returned value:    0 successful operation
    //                          -ENODATA the engine has finished the disable phase and the framework
    //                                  can stop calling process_reverse()
    //                          -EINVAL invalid interface handle or
    //                                  invalid input/output buffer description
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t self,
                               audio_buffer_t *inBuffer,
                               audio_buffer_t *outBuffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1710860 "effect_handle_t"
      visibility package stereotype "typedef" base_type class_ref 1710732 // effect_interface_s
      cpp_decl "${comment}typedef struct ${type}** ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Effect control interface structure: effect_interface_s
 The effect control interface is exposed by each effect engine implementation. It consists of
 a set of functions controlling the configuration, activation and process of the engine.
 The functions are grouped in a structure of type effect_interface_s.

 Effect control interface handle: effect_handle_t
 The effect_handle_t serves two purposes regarding the implementation of the effect engine:
 - 1 it is the address of a pointer to an effect_interface_s structure where the functions
 of the effect control API for a particular effect are located.
 - 2 it is the address of the context of a particular effect instance.
 A typical implementation in the effect library would define a structure as follows:
 struct effect_module_s {
        const struct effect_interface_s *itfe;
        effect_config_t config;
        effect_context_t context;
 }
 The implementation of EffectCreate() function would then allocate a structure of this
 type and return its address as effect_handle_t"
      classrelation 3542796 // <dependency>
	relation 3542668 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3542796 // <dependency>
	  b parent class_ref 1710732 // effect_interface_s
      end
    end

    class 1710988 "audio_buffer_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " initialize effect engine
 configure effect engine (see effect_config_t)
 reset effect engine
 enable effect process
 disable effect process
 set parameter immediately (see effect_param_t)
 set parameter deferred
 commit previous set parameter deferred
 get parameter
 set audio device (see audio.h, audio_devices_t)
 set volume
 set the audio mode (normal, ring, ...)
 configure effect engine reverse stream(see effect_config_t)
 set capture device (see audio.h, audio_devices_t)
 read effect engine configuration
 read configure effect engine reverse stream configuration
 get all supported configurations for a feature.
 get current feature configuration
 set current feature configuration
 set the audio source (see audio.h, audio_source_t)
 first proprietary command code
==================================================================================================
 command: EFFECT_CMD_INIT
--------------------------------------------------------------------------------------------------
 description:
  Initialize effect engine: All configurations return to default
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_CONFIG
--------------------------------------------------------------------------------------------------
 description:
  Apply new audio parameters configurations for input and output buffers
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_config_t)
  data: effect_config_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_RESET
--------------------------------------------------------------------------------------------------
 description:
  Reset the effect engine. Keep configuration but resets state and buffer content
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_ENABLE
--------------------------------------------------------------------------------------------------
 description:
  Enable the process. Called by the framework before the first call to process()
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_DISABLE
--------------------------------------------------------------------------------------------------
 description:
  Disable the process. Called by the framework after the last call to process()
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_PARAM
--------------------------------------------------------------------------------------------------
 description:
  Set a parameter and apply it immediately
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_param_t) + size of param and value
  data: effect_param_t + param + value. See effect_param_t definition below for value offset
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_PARAM_DEFERRED
--------------------------------------------------------------------------------------------------
 description:
  Set a parameter but apply it only when receiving EFFECT_CMD_SET_PARAM_COMMIT command
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_param_t) + size of param and value
  data: effect_param_t + param + value. See effect_param_t definition below for value offset
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_SET_PARAM_COMMIT
--------------------------------------------------------------------------------------------------
 description:
  Apply all previously received EFFECT_CMD_SET_PARAM_DEFERRED commands
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_GET_PARAM
--------------------------------------------------------------------------------------------------
 description:
  Get a parameter value
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_param_t) + size of param
  data: effect_param_t + param
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(effect_param_t) + size of param and value
  data: effect_param_t + param + value. See effect_param_t definition below for value offset
==================================================================================================
 command: EFFECT_CMD_SET_DEVICE
--------------------------------------------------------------------------------------------------
 description:
  Set the rendering device the audio output path is connected to. See audio.h, audio_devices_t
  for device values.
  The effect implementation must set EFFECT_FLAG_DEVICE_IND flag in its descriptor to receive this
  command when the device changes
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: uint32_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_SET_VOLUME
--------------------------------------------------------------------------------------------------
 description:
  Set and get volume. Used by audio framework to delegate volume control to effect engine.
  The effect implementation must set EFFECT_FLAG_VOLUME_IND or EFFECT_FLAG_VOLUME_CTRL flag in
  its descriptor to receive this command before every call to process() function
  If EFFECT_FLAG_VOLUME_CTRL flag is set in the effect descriptor, the effect engine must return
  the volume that should be applied before the effect is processed. The overall volume (the volume
  actually applied by the effect engine multiplied by the returned value) should match the value
  indicated in the command.
--------------------------------------------------------------------------------------------------
 command format:
  size: n * sizeof(uint32_t)
  data: volume for each channel defined in effect_config_t for output buffer expressed in
      8.24 fixed point format
--------------------------------------------------------------------------------------------------
 reply format:
  size: n * sizeof(uint32_t) / 0
  data: - if EFFECT_FLAG_VOLUME_CTRL is set in effect descriptor:
              volume for each channel defined in effect_config_t for output buffer expressed in
              8.24 fixed point format
        - if EFFECT_FLAG_VOLUME_CTRL is not set in effect descriptor:
              N/A
  It is legal to receive a null pointer as pReplyData in which case the effect framework has
  delegated volume control to another effect
==================================================================================================
 command: EFFECT_CMD_SET_AUDIO_MODE
--------------------------------------------------------------------------------------------------
 description:
  Set the audio mode. The effect implementation must set EFFECT_FLAG_AUDIO_MODE_IND flag in its
  descriptor to receive this command when the audio mode changes.
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: audio_mode_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_SET_CONFIG_REVERSE
--------------------------------------------------------------------------------------------------
 description:
  Apply new audio parameters configurations for input and output buffers of reverse stream.
  An example of reverse stream is the echo reference supplied to an Acoustic Echo Canceler.
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(effect_config_t)
  data: effect_config_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(int)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_INPUT_DEVICE
--------------------------------------------------------------------------------------------------
 description:
  Set the capture device the audio input path is connected to. See audio.h, audio_devices_t
  for device values.
  The effect implementation must set EFFECT_FLAG_DEVICE_IND flag in its descriptor to receive this
  command when the device changes
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: uint32_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_GET_CONFIG
--------------------------------------------------------------------------------------------------
 description:
  Read audio parameters configurations for input and output buffers
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(effect_config_t)
  data: effect_config_t
==================================================================================================
 command: EFFECT_CMD_GET_CONFIG_REVERSE
--------------------------------------------------------------------------------------------------
 description:
  Read audio parameters configurations for input and output buffers of reverse stream
--------------------------------------------------------------------------------------------------
 command format:
  size: 0
  data: N/A
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(effect_config_t)
  data: effect_config_t
==================================================================================================
 command: EFFECT_CMD_GET_FEATURE_SUPPORTED_CONFIGS
--------------------------------------------------------------------------------------------------
 description:
  Queries for supported configurations for a particular feature (e.g. get the supported
 combinations of main and auxiliary channels for a noise suppressor).
 The command parameter is the feature identifier (See effect_feature_e for a list of defined
 features) followed by the maximum number of configuration descriptor to return.
 The reply is composed of:
  - status (uint32_t):
          - 0 if feature is supported
          - -ENOSYS if the feature is not supported,
          - -ENOMEM if the feature is supported but the total number of supported configurations
          exceeds the maximum number indicated by the caller.
  - total number of supported configurations (uint32_t)
  - an array of configuration descriptors.
 The actual number of descriptors returned must not exceed the maximum number indicated by
 the caller.
--------------------------------------------------------------------------------------------------
 command format:
  size: 2 x sizeof(uint32_t)
  data: effect_feature_e + maximum number of configurations to return
--------------------------------------------------------------------------------------------------
 reply format:
  size: 2 x sizeof(uint32_t) + n x sizeof (<config descriptor>)
  data: status + total number of configurations supported + array of n config descriptors
==================================================================================================
 command: EFFECT_CMD_GET_FEATURE_CONFIG
--------------------------------------------------------------------------------------------------
 description:
  Retrieves current configuration for a given feature.
 The reply status is:
      - 0 if feature is supported
      - -ENOSYS if the feature is not supported,
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: effect_feature_e
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(uint32_t) + sizeof (<config descriptor>)
  data: status + config descriptor
==================================================================================================
 command: EFFECT_CMD_SET_FEATURE_CONFIG
--------------------------------------------------------------------------------------------------
 description:
  Sets current configuration for a given feature.
 The reply status is:
      - 0 if feature is supported
      - -ENOSYS if the feature is not supported,
      - -EINVAL if the configuration is invalid
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t) + sizeof (<config descriptor>)
  data: effect_feature_e + config descriptor
--------------------------------------------------------------------------------------------------
 reply format:
  size: sizeof(uint32_t)
  data: status
==================================================================================================
 command: EFFECT_CMD_SET_AUDIO_SOURCE
--------------------------------------------------------------------------------------------------
 description:
  Set the audio source the capture path is configured for (Camcorder, voice recognition...).
  See audio.h, audio_source_t for values.
--------------------------------------------------------------------------------------------------
 command format:
  size: sizeof(uint32_t)
  data: uint32_t
--------------------------------------------------------------------------------------------------
 reply format:
  size: 0
  data: N/A
==================================================================================================
 command: EFFECT_CMD_FIRST_PROPRIETARY
--------------------------------------------------------------------------------------------------
 description:
  All proprietary effect commands must use command codes above this value. The size and format of
  command and response fields is free in this case
==================================================================================================
 Audio buffer descriptor used by process(), bufferProvider() functions and buffer_config_t
 structure. Multi-channel audio is always interleaved. The channel order is from LSB to MSB with
 regard to the channel mask definition in audio.h, audio_channel_mask_t e.g :
 Stereo: left, right
 5 point 1: front left, front right, front center, low frequency, back left, back right
 The buffer size is expressed in frame count, a frame being composed of samples for all
 channels at a given time. Frame size for unspecified format (AUDIO_FORMAT_OTHER) is 8 bit by
 definition"
      attribute 6612236 "frameCount"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of frames in buffer"
      end

      attribute 6612364 "raw"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " raw pointer to start of buffer"
      end

      attribute 6612492 "s32"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " pointer to signed 32 bit data at start of buffer"
      end

      attribute 6612620 "s16"
	public explicit_type "int16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " pointer to signed 16 bit data at start of buffer"
      end

      attribute 6612748 "u8"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " pointer to unsigned 8 bit data at start of buffer"
      end
    end

    class 1711116 "audio_buffer_t"
      visibility package stereotype "typedef" base_type class_ref 1710988 // audio_buffer_s
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Forward definition of type audio_buffer_t"
      classrelation 3542924 // <dependency>
	relation 3542796 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3542924 // <dependency>
	  b parent class_ref 1710988 // audio_buffer_s
      end
    end

    class 1711244 "effect_command_e"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "--- Standardized command codes for command() function"
      attribute 6609548 "EFFECT_CMD_INIT"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6609676 "EFFECT_CMD_SET_CONFIG"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6609804 "EFFECT_CMD_RESET"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6609932 "EFFECT_CMD_ENABLE"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6610060 "EFFECT_CMD_DISABLE"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6610188 "EFFECT_CMD_SET_PARAM"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6610316 "EFFECT_CMD_SET_PARAM_DEFERRED"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6610444 "EFFECT_CMD_SET_PARAM_COMMIT"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6610572 "EFFECT_CMD_GET_PARAM"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6610700 "EFFECT_CMD_SET_DEVICE"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6610828 "EFFECT_CMD_SET_VOLUME"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6610956 "EFFECT_CMD_SET_AUDIO_MODE"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6611084 "EFFECT_CMD_SET_CONFIG_REVERSE"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6611212 "EFFECT_CMD_SET_INPUT_DEVICE"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6611340 "EFFECT_CMD_GET_CONFIG"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6611468 "EFFECT_CMD_GET_CONFIG_REVERSE"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6611596 "EFFECT_CMD_GET_FEATURE_SUPPORTED_CONFIGS"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6611724 "EFFECT_CMD_GET_FEATURE_CONFIG"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6611852 "EFFECT_CMD_SET_FEATURE_CONFIG"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6611980 "EFFECT_CMD_SET_AUDIO_SOURCE"
	public type class_ref 1711244 // effect_command_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6612108 "EFFECT_CMD_FIRST_PROPRIETARY"
	public type class_ref 1711244 // effect_command_e
	init_value " 0x10000 // first proprietary command code
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1711372 "buffer_function_t"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type}(*  ${name})(void *cookie, audio_buffer_t *buffer);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The buffer_provider_s structure contains functions that can be used
 by the effect engine process() function to query and release input
 or output audio buffer.
 The getBuffer() function is called to retrieve a buffer where data
 should read from or written to by process() function.
 The releaseBuffer() function MUST be called when the buffer retrieved
 with getBuffer() is not needed anymore.
 The process function should use the buffer provider mechanism to retrieve
 input or output buffer if the inBuffer or outBuffer passed as argument is NULL
 and the buffer configuration (buffer_config_t) given by the EFFECT_CMD_SET_CONFIG
 command did not specify an audio buffer."
    end

    class 1711500 "buffer_provider_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3543052 // getBuffer (<directional composition>)
	relation 3542924 *-->
	  a role_name "getBuffer" public
	    comment " retrieve next buffer"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3543052 // getBuffer (<directional composition>)
	  b parent class_ref 1711372 // buffer_function_t
      end

      classrelation 3543180 // releaseBuffer (<directional composition>)
	relation 3543052 *-->
	  a role_name "releaseBuffer" public
	    comment " release used buffer"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3543180 // releaseBuffer (<directional composition>)
	  b parent class_ref 1711372 // buffer_function_t
      end

      attribute 6612876 "cookie"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " for use by client of buffer provider functions"
      end
    end

    class 1711628 "buffer_provider_t"
      visibility package stereotype "typedef" base_type class_ref 1711500 // buffer_provider_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1711756 "buffer_config_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The buffer_config_s structure specifies the input or output audio format
 to be used by the effect engine. It is part of the effect_config_t
 structure that defines both input and output buffer configurations and is
 passed by the EFFECT_CMD_SET_CONFIG or EFFECT_CMD_SET_CONFIG_REVERSE command."
      classrelation 3543308 // buffer (<directional composition>)
	relation 3543180 *-->
	  a role_name "buffer" public
	    comment " buffer for use by process() function if not passed explicitly"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3543308 // buffer (<directional composition>)
	  b parent class_ref 1711116 // audio_buffer_t
      end

      attribute 6613004 "samplingRate"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " sampling rate"
      end

      attribute 6613132 "channels"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " channel mask (see audio_channel_mask_t in audio.h)"
      end

      classrelation 3543436 // bufferProvider (<directional composition>)
	relation 3543308 *-->
	  a role_name "bufferProvider" public
	    comment " buffer provider"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3543436 // bufferProvider (<directional composition>)
	  b parent class_ref 1711628 // buffer_provider_t
      end

      attribute 6613260 "format"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Audio format  (see see audio_format_t in audio.h)"
      end

      attribute 6613388 "accessMode"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " read/write or accumulate in buffer (effect_buffer_access_e)"
      end

      attribute 6613516 "mask"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicates which of the above fields is valid"
      end
    end

    class 1711884 "buffer_config_t"
      visibility package stereotype "typedef" base_type class_ref 1711756 // buffer_config_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1712012 "effect_buffer_access_e"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Values for \"accessMode\" field of buffer_config_t:
   overwrite, read only, accumulate (read/modify/write)"
      attribute 6613644 "EFFECT_BUFFER_ACCESS_WRITE"
	public type class_ref 1712012 // effect_buffer_access_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6613772 "EFFECT_BUFFER_ACCESS_READ"
	public type class_ref 1712012 // effect_buffer_access_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6613900 "EFFECT_BUFFER_ACCESS_ACCUMULATE"
	public type class_ref 1712012 // effect_buffer_access_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1712140 "effect_feature_e"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " feature identifiers for EFFECT_CMD_GET_FEATURE_SUPPORTED_CONFIGS command"
      attribute 6614028 "EFFECT_FEATURE_AUX_CHANNELS"
	public type class_ref 1712140 // effect_feature_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6614156 "EFFECT_FEATURE_CNT"
	public type class_ref 1712140 // effect_feature_e
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1712268 "channel_config_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " supports auxiliary channels (e.g. dual mic noise suppressor)
 EFFECT_FEATURE_AUX_CHANNELS feature configuration descriptor. Describe a combination
 of main and auxiliary channels supported"
      attribute 6614284 "main_channels"
	public explicit_type "audio_channel_mask_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " channel mask for main channels"
      end

      attribute 6614412 "aux_channels"
	public explicit_type "audio_channel_mask_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " channel mask for auxiliary channels"
      end
    end

    class 1712396 "channel_config_t"
      visibility package stereotype "typedef" base_type class_ref 1712268 // channel_config_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1712524 "effect_config_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " effect_config_s structure describes the format of the pCmdData argument of EFFECT_CMD_SET_CONFIG
 command to configure audio parameters and buffers for effect engine input and output."
      classrelation 3543564 // inputCfg (<directional composition>)
	relation 3543436 *-->
	  a role_name "inputCfg" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3543564 // inputCfg (<directional composition>)
	  b parent class_ref 1711884 // buffer_config_t
      end

      classrelation 3543692 // outputCfg (<directional composition>)
	relation 3543564 *-->
	  a role_name "outputCfg" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3543692 // outputCfg (<directional composition>)
	  b parent class_ref 1711884 // buffer_config_t
      end
    end

    class 1712652 "effect_config_t"
      visibility package stereotype "typedef" base_type class_ref 1712524 // effect_config_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1712780 "effect_param_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " effect_param_s structure describes the format of the pCmdData argument of EFFECT_CMD_SET_PARAM
 command and pCmdData and pReplyData of EFFECT_CMD_GET_PARAM command.
 psize and vsize represent the actual size of parameter and value.

 NOTE: the start of value field inside the data field is always on a 32 bit boundary:

  +-----------+
  | status    | sizeof(int)
  +-----------+
  | psize     | sizeof(int)
  +-----------+
  | vsize     | sizeof(int)
  +-----------+
  |           |   |           |
  ~ parameter ~   > psize     |
  |           |   |           >  ((psize - 1)/sizeof(int) + 1) * sizeof(int)
  +-----------+               |
  | padding   |               |
  +-----------+
  |           |   |
  ~ value     ~   > vsize
  |           |   |
  +-----------+"
      attribute 6614540 "status"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Transaction status (unused for command, used for reply)"
      end

      attribute 6614668 "psize"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Parameter size"
      end

      attribute 6614796 "vsize"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Value size"
      end

      attribute 6614924 "data"
	public explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Start of Parameter + Value data"
      end
    end

    class 1712908 "effect_param_t"
      visibility package stereotype "typedef" base_type class_ref 1712780 // effect_param_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1713036 "audio_effect_library_s"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Every effect library must have a data structure named AUDIO_EFFECT_LIBRARY_INFO_SYM
 and the fields of this data structure must begin with audio_effect_library_t"
      attribute 6615052 "tag"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6615180 "version"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6615308 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6615436 "implementor"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6615564 "query_num_effects"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: query_num_effects // // Description: Returns the number of different effects exposed by the // library. Each effect must have a unique effect uuid (see // effect_descriptor_t). This function together with EffectQueryEffect() // is used to enumerate all effects present in the library. // // Input/Output: // pNumEffects: address where the number of effects should be returned. // // Output: // returned value: 0 successful operation. // -ENODEV library failed to initialize // -EINVAL invalid pNumEffects // *pNumEffects: updated with number of effects in library // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(uint32_t *pNumEffects)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:        query_num_effects
    //
    //    Description:    Returns the number of different effects exposed by the
    //          library. Each effect must have a unique effect uuid (see
    //          effect_descriptor_t). This function together with EffectQueryEffect()
    //          is used to enumerate all effects present in the library.
    //
    //    Input/Output:
    //          pNumEffects:    address where the number of effects should be returned.
    //
    //    Output:
    //        returned value:    0          successful operation.
    //                          -ENODEV     library failed to initialize
    //                          -EINVAL     invalid pNumEffects
    //        *pNumEffects:     updated with number of effects in library
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(uint32_t *pNumEffects)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3543820 // query_effect (<unidirectional association>)
	relation 3543692 --->
	  stereotype "int32_t(*${name})(uint32_t index,${type}*pDescriptor)"
	  a role_name "query_effect" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3543820 // query_effect (<unidirectional association>)
	  b parent class_ref 1710604 // effect_descriptor_t
      end

      attribute 6615692 "create_effect"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: create_effect // // Description: Creates an effect engine of the specified implementation uuid and // returns an effect control interface on this engine. The function will allocate the // resources for an instance of the requested effect engine and return // a handle on the effect control interface. // // Input: // uuid: pointer to the effect uuid. // sessionId: audio session to which this effect instance will be attached. All effects // created with the same session ID are connected in series and process the same signal // stream. Knowing that two effects are part of the same effect chain can help the // library implement some kind of optimizations. // ioId: identifies the output or input stream this effect is directed to at audio HAL. // For future use especially with tunneled HW accelerated effects // // Input/Output: // pHandle: address where to return the effect interface handle. // // Output: // returned value: 0 successful operation. // -ENODEV library failed to initialize // -EINVAL invalid pEffectUuid or pHandle // -ENOENT no effect with this uuid found // *pHandle: updated with the effect interface handle. // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(const effect_uuid_t *uuid, int32_t sessionId, int32_t ioId, effect_handle_t *pHandle)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:        create_effect
    //
    //    Description:    Creates an effect engine of the specified implementation uuid and
    //          returns an effect control interface on this engine. The function will allocate the
    //          resources for an instance of the requested effect engine and return
    //          a handle on the effect control interface.
    //
    //    Input:
    //          uuid:    pointer to the effect uuid.
    //          sessionId:  audio session to which this effect instance will be attached. All effects
    //              created with the same session ID are connected in series and process the same signal
    //              stream. Knowing that two effects are part of the same effect chain can help the
    //              library implement some kind of optimizations.
    //          ioId:   identifies the output or input stream this effect is directed to at audio HAL.
    //              For future use especially with tunneled HW accelerated effects
    //
    //    Input/Output:
    //          pHandle:        address where to return the effect interface handle.
    //
    //    Output:
    //        returned value:    0          successful operation.
    //                          -ENODEV     library failed to initialize
    //                          -EINVAL     invalid pEffectUuid or pHandle
    //                          -ENOENT     no effect with this uuid found
    //        *pHandle:         updated with the effect interface handle.
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(const effect_uuid_t *uuid,
                             int32_t sessionId,
                             int32_t ioId,
                             effect_handle_t *pHandle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6615820 "release_effect"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: release_effect // // Description: Releases the effect engine whose handle is given as argument. // All resources allocated to this particular instance of the effect are // released. // // Input: // handle: handle on the effect interface to be released. // // Output: // returned value: 0 successful operation. // -ENODEV library failed to initialize // -EINVAL invalid interface handle // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(effect_handle_t handle)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:        release_effect
    //
    //    Description:    Releases the effect engine whose handle is given as argument.
    //          All resources allocated to this particular instance of the effect are
    //          released.
    //
    //    Input:
    //          handle:         handle on the effect interface to be released.
    //
    //    Output:
    //        returned value:    0          successful operation.
    //                          -ENODEV     library failed to initialize
    //                          -EINVAL     invalid interface handle
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(effect_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6615948 "get_descriptor"
	public explicit_type "//////////////////////////////////////////////////////////////////////////////// // // Function: get_descriptor // // Description: Returns the descriptor of the effect engine which implementation UUID is // given as argument. // // Input/Output: // uuid: pointer to the effect uuid. // pDescriptor: address where to return the effect descriptor. // // Output: // returned value: 0 successful operation. // -ENODEV library failed to initialize // -EINVAL invalid pDescriptor or uuid // *pDescriptor: updated with the effect descriptor. // //////////////////////////////////////////////////////////////////////////////// int32_t (*)(const effect_uuid_t *uuid, effect_descriptor_t *pDescriptor)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    ////////////////////////////////////////////////////////////////////////////////
    //
    //    Function:        get_descriptor
    //
    //    Description:    Returns the descriptor of the effect engine which implementation UUID is
    //          given as argument.
    //
    //    Input/Output:
    //          uuid:           pointer to the effect uuid.
    //          pDescriptor:    address where to return the effect descriptor.
    //
    //    Output:
    //        returned value:    0          successful operation.
    //                          -ENODEV     library failed to initialize
    //                          -EINVAL     invalid pDescriptor or uuid
    //        *pDescriptor:     updated with the effect descriptor.
    //
    ////////////////////////////////////////////////////////////////////////////////
    int32_t (*${name})(const effect_uuid_t *uuid,
                              effect_descriptor_t *pDescriptor)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1713164 "audio_effect_library_t"
      visibility package stereotype "typedef" base_type class_ref 1713036 // audio_effect_library_s
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1713292 "audio_policy"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------- 

 * The audio_policy and audio_policy_service_ops structs define the
 * communication interfaces between the platform specific audio policy manager
 * and Android generic audio policy manager.
 * The platform specific audio policy manager must implement methods of the
 * audio_policy struct.
 * This implementation makes use of the audio_policy_service_ops to control
 * the activity and configuration of audio input and output streams.
 *
 * The platform specific audio policy manager is in charge of the audio
 * routing and volume control policies for a given platform.
 * The main roles of this module are:
 *   - keep track of current system state (removable device connections, phone
 *     state, user requests...).
 *   System state changes and user actions are notified to audio policy
 *   manager with methods of the audio_policy.
 *
 *   - process get_output() queries received when AudioTrack objects are
 *     created: Those queries return a handler on an output that has been
 *     selected, configured and opened by the audio policy manager and that
 *     must be used by the AudioTrack when registering to the AudioFlinger
 *     with the createTrack() method.
 *   When the AudioTrack object is released, a release_output() query
 *   is received and the audio policy manager can decide to close or
 *   reconfigure the output depending on other streams using this output and
 *   current system state.
 *
 *   - similarly process get_input() and release_input() queries received from
 *     AudioRecord objects and configure audio inputs.
 *   - process volume control requests: the stream volume is converted from
 *     an index value (received from UI) to a float value applicable to each
 *     output as a function of platform specific settings and current output
 *     route (destination device). It also make sure that streams are not
 *     muted if not allowed (e.g. camera shutter sound in some countries).
 
 XXX: this should be defined OUTSIDE of frameworks/base "
      attribute 6616076 "set_device_connection_state"
	public explicit_type "/* * configuration functions */ /* indicate a change in device connection status */ int (*)(struct audio_policy *pol, audio_devices_t device, audio_policy_dev_state_t state, const char *device_address)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * configuration functions
     */

    /* indicate a change in device connection status */
    int (*${name})(struct audio_policy *pol,
                                       audio_devices_t device,
                                       audio_policy_dev_state_t state,
                                       const char *device_address)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6616204 "get_device_connection_state"
	public explicit_type "/* retrieve a device connection status */ audio_policy_dev_state_t (*)( const struct audio_policy *pol, audio_devices_t device, const char *device_address)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* retrieve a device connection status */
    audio_policy_dev_state_t (*${name})(
                                            const struct audio_policy *pol,
                                            audio_devices_t device,
                                            const char *device_address)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6616332 "set_phone_state"
	public explicit_type "/* indicate a change in phone state. Valid phones states are defined * by audio_mode_t */ void (*)(struct audio_policy *pol, audio_mode_t state)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* indicate a change in phone state. Valid phones states are defined
     * by audio_mode_t */
    void (*${name})(struct audio_policy *pol, audio_mode_t state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6616460 "set_ringer_mode"
	public explicit_type "/* deprecated, never called (was \"indicate a change in ringer mode\") */ void (*)(struct audio_policy *pol, uint32_t mode, uint32_t mask)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* deprecated, never called (was \"indicate a change in ringer mode\") */
    void (*${name})(struct audio_policy *pol, uint32_t mode,
                            uint32_t mask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6616588 "set_force_use"
	public explicit_type "/* force using a specific device category for the specified usage */ void (*)(struct audio_policy *pol, audio_policy_force_use_t usage, audio_policy_forced_cfg_t config)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* force using a specific device category for the specified usage */
    void (*${name})(struct audio_policy *pol,
                          audio_policy_force_use_t usage,
                          audio_policy_forced_cfg_t config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6616716 "get_force_use"
	public explicit_type "/* retrieve current device category forced for a given usage */ audio_policy_forced_cfg_t (*)(const struct audio_policy *pol, audio_policy_force_use_t usage)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* retrieve current device category forced for a given usage */
    audio_policy_forced_cfg_t (*${name})(const struct audio_policy *pol,
                                               audio_policy_force_use_t usage)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6616844 "set_can_mute_enforced_audible"
	public explicit_type "/* if can_mute is true, then audio streams that are marked ENFORCED_AUDIBLE * can still be muted. */ void (*)(struct audio_policy *pol, bool can_mute)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* if can_mute is true, then audio streams that are marked ENFORCED_AUDIBLE
     * can still be muted. */
    void (*${name})(struct audio_policy *pol,
                                          bool can_mute)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6616972 "init_check"
	public explicit_type "/* check proper initialization */ int (*)(const struct audio_policy *pol)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* check proper initialization */
    int (*${name})(const struct audio_policy *pol)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6617100 "get_output"
	public explicit_type "/* * Audio routing query functions */ /* request an output appropriate for playback of the supplied stream type and * parameters */ audio_io_handle_t (*)(struct audio_policy *pol, audio_stream_type_t stream, uint32_t samplingRate, audio_format_t format, audio_channel_mask_t channelMask, audio_output_flags_t flags)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * Audio routing query functions
     */

    /* request an output appropriate for playback of the supplied stream type and
     * parameters */
    audio_io_handle_t (*${name})(struct audio_policy *pol,
                                    audio_stream_type_t stream,
                                    uint32_t samplingRate,
                                    audio_format_t format,
                                    audio_channel_mask_t channelMask,
                                    audio_output_flags_t flags)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6617228 "start_output"
	public explicit_type "/* indicates to the audio policy manager that the output starts being used * by corresponding stream. */ int (*)(struct audio_policy *pol, audio_io_handle_t output, audio_stream_type_t stream, int session)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* indicates to the audio policy manager that the output starts being used
     * by corresponding stream. */
    int (*${name})(struct audio_policy *pol,
                        audio_io_handle_t output,
                        audio_stream_type_t stream,
                        int session)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6617356 "stop_output"
	public explicit_type "/* indicates to the audio policy manager that the output stops being used * by corresponding stream. */ int (*)(struct audio_policy *pol, audio_io_handle_t output, audio_stream_type_t stream, int session)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* indicates to the audio policy manager that the output stops being used
     * by corresponding stream. */
    int (*${name})(struct audio_policy *pol,
                       audio_io_handle_t output,
                       audio_stream_type_t stream,
                       int session)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6617484 "release_output"
	public explicit_type "/* releases the output. */ void (*)(struct audio_policy *pol, audio_io_handle_t output)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* releases the output. */
    void (*${name})(struct audio_policy *pol, audio_io_handle_t output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6617612 "get_input"
	public explicit_type "/* request an input appropriate for record from the supplied device with * supplied parameters. */ audio_io_handle_t (*)(struct audio_policy *pol, audio_source_t inputSource, uint32_t samplingRate, audio_format_t format, audio_channel_mask_t channelMask, audio_in_acoustics_t acoustics)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* request an input appropriate for record from the supplied device with
     * supplied parameters. */
    audio_io_handle_t (*${name})(struct audio_policy *pol, audio_source_t inputSource,
                                   uint32_t samplingRate,
                                   audio_format_t format,
                                   audio_channel_mask_t channelMask,
                                   audio_in_acoustics_t acoustics)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6617740 "start_input"
	public explicit_type "/* indicates to the audio policy manager that the input starts being used */ int (*)(struct audio_policy *pol, audio_io_handle_t input)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* indicates to the audio policy manager that the input starts being used */
    int (*${name})(struct audio_policy *pol, audio_io_handle_t input)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6617868 "stop_input"
	public explicit_type "/* indicates to the audio policy manager that the input stops being used. */ int (*)(struct audio_policy *pol, audio_io_handle_t input)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* indicates to the audio policy manager that the input stops being used. */
    int (*${name})(struct audio_policy *pol, audio_io_handle_t input)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6617996 "release_input"
	public explicit_type "/* releases the input. */ void (*)(struct audio_policy *pol, audio_io_handle_t input)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* releases the input. */
    void (*${name})(struct audio_policy *pol, audio_io_handle_t input)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6618124 "init_stream_volume"
	public explicit_type "/* * volume control functions */ /* initialises stream volume conversion parameters by specifying volume * index range. The index range for each stream is defined by AudioService. */ void (*)(struct audio_policy *pol, audio_stream_type_t stream, int index_min, int index_max)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * volume control functions
     */

    /* initialises stream volume conversion parameters by specifying volume
     * index range. The index range for each stream is defined by AudioService. */
    void (*${name})(struct audio_policy *pol,
                               audio_stream_type_t stream,
                               int index_min,
                               int index_max)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6618252 "set_stream_volume_index"
	public explicit_type "/* sets the new stream volume at a level corresponding to the supplied * index. The index is within the range specified by init_stream_volume() */ int (*)(struct audio_policy *pol, audio_stream_type_t stream, int index)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* sets the new stream volume at a level corresponding to the supplied
     * index. The index is within the range specified by init_stream_volume() */
    int (*${name})(struct audio_policy *pol,
                                   audio_stream_type_t stream,
                                   int index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6618380 "get_stream_volume_index"
	public explicit_type "/* retrieve current volume index for the specified stream */ int (*)(const struct audio_policy *pol, audio_stream_type_t stream, int *index)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* retrieve current volume index for the specified stream */
    int (*${name})(const struct audio_policy *pol,
                                   audio_stream_type_t stream,
                                   int *index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6618508 "set_stream_volume_index_for_device"
	public explicit_type "/* sets the new stream volume at a level corresponding to the supplied * index for the specified device. * The index is within the range specified by init_stream_volume() */ int (*)(struct audio_policy *pol, audio_stream_type_t stream, int index, audio_devices_t device)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* sets the new stream volume at a level corresponding to the supplied
     * index for the specified device.
     * The index is within the range specified by init_stream_volume() */
    int (*${name})(struct audio_policy *pol,
                                   audio_stream_type_t stream,
                                   int index,
                                   audio_devices_t device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6618636 "get_stream_volume_index_for_device"
	public explicit_type "/* retrieve current volume index for the specified stream for the specified device */ int (*)(const struct audio_policy *pol, audio_stream_type_t stream, int *index, audio_devices_t device)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* retrieve current volume index for the specified stream for the specified device */
    int (*${name})(const struct audio_policy *pol,
                                   audio_stream_type_t stream,
                                   int *index,
                                   audio_devices_t device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6618764 "get_strategy_for_stream"
	public explicit_type "/* return the strategy corresponding to a given stream type */ uint32_t (*)(const struct audio_policy *pol, audio_stream_type_t stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* return the strategy corresponding to a given stream type */
    uint32_t (*${name})(const struct audio_policy *pol,
                                        audio_stream_type_t stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6618892 "get_devices_for_stream"
	public explicit_type "/* return the enabled output devices for the given stream type */ audio_devices_t (*)(const struct audio_policy *pol, audio_stream_type_t stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* return the enabled output devices for the given stream type */
    audio_devices_t (*${name})(const struct audio_policy *pol,
                                       audio_stream_type_t stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6619020 "get_output_for_effect"
	public explicit_type "/* Audio effect management */ audio_io_handle_t (*)(struct audio_policy *pol, const struct effect_descriptor_s *desc)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* Audio effect management */
    audio_io_handle_t (*${name})(struct audio_policy *pol,
                                            const struct effect_descriptor_s *desc)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6619148 "register_effect"
	public explicit_type "int (*)(struct audio_policy *pol, const struct effect_descriptor_s *desc, audio_io_handle_t output, uint32_t strategy, int session, int id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    int (*${name})(struct audio_policy *pol,
                           const struct effect_descriptor_s *desc,
                           audio_io_handle_t output,
                           uint32_t strategy,
                           int session,
                           int id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6619276 "unregister_effect"
	public explicit_type "int (*)(struct audio_policy *pol, int id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    int (*${name})(struct audio_policy *pol, int id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6619404 "set_effect_enabled"
	public explicit_type "int (*)(struct audio_policy *pol, int id, bool enabled)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    int (*${name})(struct audio_policy *pol, int id, bool enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6619532 "is_stream_active"
	public explicit_type "bool (*)(const struct audio_policy *pol, audio_stream_type_t stream, uint32_t in_past_ms)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    bool (*${name})(const struct audio_policy *pol,
                             audio_stream_type_t stream,
                             uint32_t in_past_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6619660 "is_source_active"
	public explicit_type "bool (*)(const struct audio_policy *pol, audio_source_t source)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    bool (*${name})(const struct audio_policy *pol,
                             audio_source_t source)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6619788 "dump"
	public explicit_type "/* dump state */ int (*)(const struct audio_policy *pol, int fd)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* dump state */
    int (*${name})(const struct audio_policy *pol, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1713420 "audio_module_handle_t"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " audio hw module handle used by load_hw_module(), open_output_on_module()
 * and open_input_on_module() "
    end

    class 1713548 "audio_policy_service_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6619916 "open_output"
	public explicit_type "/* * Audio output Control functions */ /* Opens an audio output with the requested parameters. * * The parameter values can indicate to use the default values in case the * audio policy manager has no specific requirements for the output being * opened. * * When the function returns, the parameter values reflect the actual * values used by the audio hardware output stream. * * The audio policy manager can check if the proposed parameters are * suitable or not and act accordingly. */ audio_io_handle_t (*)(void *service, audio_devices_t *pDevices, uint32_t *pSamplingRate, audio_format_t *pFormat, audio_channel_mask_t *pChannelMask, uint32_t *pLatencyMs, audio_output_flags_t flags)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * Audio output Control functions
     */

    /* Opens an audio output with the requested parameters.
     *
     * The parameter values can indicate to use the default values in case the
     * audio policy manager has no specific requirements for the output being
     * opened.
     *
     * When the function returns, the parameter values reflect the actual
     * values used by the audio hardware output stream.
     *
     * The audio policy manager can check if the proposed parameters are
     * suitable or not and act accordingly.
     */
    audio_io_handle_t (*${name})(void *service,
                                     audio_devices_t *pDevices,
                                     uint32_t *pSamplingRate,
                                     audio_format_t *pFormat,
                                     audio_channel_mask_t *pChannelMask,
                                     uint32_t *pLatencyMs,
                                     audio_output_flags_t flags)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6620044 "open_duplicate_output"
	public explicit_type "/* creates a special output that is duplicated to the two outputs passed as * arguments. The duplication is performed by * a special mixer thread in the AudioFlinger. */ audio_io_handle_t (*)(void *service, audio_io_handle_t output1, audio_io_handle_t output2)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* creates a special output that is duplicated to the two outputs passed as
     * arguments. The duplication is performed by
     * a special mixer thread in the AudioFlinger.
     */
    audio_io_handle_t (*${name})(void *service,
                                               audio_io_handle_t output1,
                                               audio_io_handle_t output2)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6620172 "close_output"
	public explicit_type "/* closes the output stream */ int (*)(void *service, audio_io_handle_t output)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* closes the output stream */
    int (*${name})(void *service, audio_io_handle_t output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6620300 "suspend_output"
	public explicit_type "/* suspends the output. * * When an output is suspended, the corresponding audio hardware output * stream is placed in standby and the AudioTracks attached to the mixer * thread are still processed but the output mix is discarded. */ int (*)(void *service, audio_io_handle_t output)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* suspends the output.
     *
     * When an output is suspended, the corresponding audio hardware output
     * stream is placed in standby and the AudioTracks attached to the mixer
     * thread are still processed but the output mix is discarded.
     */
    int (*${name})(void *service, audio_io_handle_t output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6620428 "restore_output"
	public explicit_type "/* restores a suspended output. */ int (*)(void *service, audio_io_handle_t output)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* restores a suspended output. */
    int (*${name})(void *service, audio_io_handle_t output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6620556 "open_input"
	public explicit_type "/* */ /* Audio input Control functions */ /* */ /* opens an audio input * deprecated - new implementations should use open_input_on_module, * and the acoustics parameter is ignored */ audio_io_handle_t (*)(void *service, audio_devices_t *pDevices, uint32_t *pSamplingRate, audio_format_t *pFormat, audio_channel_mask_t *pChannelMask, audio_in_acoustics_t acoustics)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* */
    /* Audio input Control functions */
    /* */

    /* opens an audio input
     * deprecated - new implementations should use open_input_on_module,
     * and the acoustics parameter is ignored
     */
    audio_io_handle_t (*${name})(void *service,
                                    audio_devices_t *pDevices,
                                    uint32_t *pSamplingRate,
                                    audio_format_t *pFormat,
                                    audio_channel_mask_t *pChannelMask,
                                    audio_in_acoustics_t acoustics)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6620684 "close_input"
	public explicit_type "/* closes an audio input */ int (*)(void *service, audio_io_handle_t input)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* closes an audio input */
    int (*${name})(void *service, audio_io_handle_t input)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6620812 "set_stream_volume"
	public explicit_type "/* */ /* misc control functions */ /* */ /* set a stream volume for a particular output. * * For the same user setting, a given stream type can have different * volumes for each output (destination device) it is attached to. */ int (*)(void *service, audio_stream_type_t stream, float volume, audio_io_handle_t output, int delay_ms)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* */
    /* misc control functions */
    /* */

    /* set a stream volume for a particular output.
     *
     * For the same user setting, a given stream type can have different
     * volumes for each output (destination device) it is attached to.
     */
    int (*${name})(void *service,
                             audio_stream_type_t stream,
                             float volume,
                             audio_io_handle_t output,
                             int delay_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6620940 "set_stream_output"
	public explicit_type "/* reroute a given stream type to the specified output */ int (*)(void *service, audio_stream_type_t stream, audio_io_handle_t output)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* reroute a given stream type to the specified output */
    int (*${name})(void *service,
                             audio_stream_type_t stream,
                             audio_io_handle_t output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6621068 "set_parameters"
	public explicit_type "/* function enabling to send proprietary informations directly from audio * policy manager to audio hardware interface. */ void (*)(void *service, audio_io_handle_t io_handle, const char *kv_pairs, int delay_ms)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* function enabling to send proprietary informations directly from audio
     * policy manager to audio hardware interface. */
    void (*${name})(void *service,
                           audio_io_handle_t io_handle,
                           const char *kv_pairs,
                           int delay_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6621196 "get_parameters"
	public explicit_type "/* function enabling to receive proprietary informations directly from * audio hardware interface to audio policy manager. * * Returns a pointer to a heap allocated string. The caller is responsible * for freeing the memory for it using free(). */ char * (*)(void *service, audio_io_handle_t io_handle, const char *keys)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* function enabling to receive proprietary informations directly from
     * audio hardware interface to audio policy manager.
     *
     * Returns a pointer to a heap allocated string. The caller is responsible
     * for freeing the memory for it using free().
     */

    char * (*${name})(void *service, audio_io_handle_t io_handle,
                             const char *keys)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6621324 "start_tone"
	public explicit_type "/* request the playback of a tone on the specified stream. * used for instance to replace notification sounds when playing over a * telephony device during a phone call. */ int (*)(void *service, audio_policy_tone_t tone, audio_stream_type_t stream)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* request the playback of a tone on the specified stream.
     * used for instance to replace notification sounds when playing over a
     * telephony device during a phone call.
     */
    int (*${name})(void *service,
                      audio_policy_tone_t tone,
                      audio_stream_type_t stream)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6621452 "stop_tone"
	public explicit_type "int (*)(void *service)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    int (*${name})(void *service)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6621580 "set_voice_volume"
	public explicit_type "/* set down link audio volume. */ int (*)(void *service, float volume, int delay_ms)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* set down link audio volume. */
    int (*${name})(void *service,
                            float volume,
                            int delay_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6621708 "move_effects"
	public explicit_type "/* move effect to the specified output */ int (*)(void *service, int session, audio_io_handle_t src_output, audio_io_handle_t dst_output)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* move effect to the specified output */
    int (*${name})(void *service,
                        int session,
                        audio_io_handle_t src_output,
                        audio_io_handle_t dst_output)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6621836 "load_hw_module"
	public explicit_type "/* loads an audio hw module. * * The module name passed is the base name of the HW module library, e.g \"primary\" or \"a2dp\". * The function returns a handle on the module that will be used to specify a particular * module when calling open_output_on_module() or open_input_on_module() */ audio_module_handle_t (*)(void *service, const char *name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* loads an audio hw module.
     *
     * The module name passed is the base name of the HW module library, e.g \"primary\" or \"a2dp\".
     * The function returns a handle on the module that will be used to specify a particular
     * module when calling open_output_on_module() or open_input_on_module()
     */
    audio_module_handle_t (*${name})(void *service,
                                              const char *name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6621964 "open_output_on_module"
	public explicit_type "/* Opens an audio output on a particular HW module. * * Same as open_output() but specifying a specific HW module on which the output must be opened. */ audio_io_handle_t (*)(void *service, audio_module_handle_t module, audio_devices_t *pDevices, uint32_t *pSamplingRate, audio_format_t *pFormat, audio_channel_mask_t *pChannelMask, uint32_t *pLatencyMs, audio_output_flags_t flags)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* Opens an audio output on a particular HW module.
     *
     * Same as open_output() but specifying a specific HW module on which the output must be opened.
     */
    audio_io_handle_t (*${name})(void *service,
                                     audio_module_handle_t module,
                                     audio_devices_t *pDevices,
                                     uint32_t *pSamplingRate,
                                     audio_format_t *pFormat,
                                     audio_channel_mask_t *pChannelMask,
                                     uint32_t *pLatencyMs,
                                     audio_output_flags_t flags)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6622092 "open_input_on_module"
	public explicit_type "/* Opens an audio input on a particular HW module. * * Same as open_input() but specifying a specific HW module on which the input must be opened. * Also removed deprecated acoustics parameter */ audio_io_handle_t (*)(void *service, audio_module_handle_t module, audio_devices_t *pDevices, uint32_t *pSamplingRate, audio_format_t *pFormat, audio_channel_mask_t *pChannelMask)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* Opens an audio input on a particular HW module.
     *
     * Same as open_input() but specifying a specific HW module on which the input must be opened.
     * Also removed deprecated acoustics parameter
     */
    audio_io_handle_t (*${name})(void *service,
                                    audio_module_handle_t module,
                                    audio_devices_t *pDevices,
                                    uint32_t *pSamplingRate,
                                    audio_format_t *pFormat,
                                    audio_channel_mask_t *pChannelMask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1713676 "audio_policy_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "********************************************************************
*
 * Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
 * and the fields of this data structure must begin with hw_module_t
 * followed by module specific information."
      classrelation 3543948 // common (<directional composition>)
	relation 3543820 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3543948 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end
    end

    class 1713804 "audio_policy_module_t"
      visibility package stereotype "typedef" base_type class_ref 1713676 // audio_policy_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1713932 "audio_policy_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3544076 // common (<directional composition>)
	relation 3543948 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3544076 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6622220 "create_audio_policy"
	public explicit_type "int (*)(const struct audio_policy_device *device, struct audio_policy_service_ops *aps_ops, void *service, struct audio_policy **ap)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    int (*${name})(const struct audio_policy_device *device,
                               struct audio_policy_service_ops *aps_ops,
                               void *service,
                               struct audio_policy **ap)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6622348 "destroy_audio_policy"
	public explicit_type "int (*)(const struct audio_policy_device *device, struct audio_policy *ap)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    int (*${name})(const struct audio_policy_device *device,
                                struct audio_policy *ap)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1714060 "__attribute__"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Device Name "
      attribute 6622476 "name"
	public explicit_type "uint8_t"
	multiplicity "[248]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1714188 "bt_scan_mode_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Adapter Visibility Modes"
      attribute 6622604 "BT_SCAN_MODE_NONE"
	public type class_ref 1714188 // bt_scan_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6622732 "BT_SCAN_MODE_CONNECTABLE"
	public type class_ref 1714188 // bt_scan_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6622860 "BT_SCAN_MODE_CONNECTABLE_DISCOVERABLE"
	public type class_ref 1714188 // bt_scan_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1714316 "bt_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Adapter State "
      attribute 6622988 "BT_STATE_OFF"
	public type class_ref 1714316 // bt_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6623116 "BT_STATE_ON"
	public type class_ref 1714316 // bt_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1714444 "bt_status_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Error Status 
* We need to build on this "
      attribute 6623244 "BT_STATUS_SUCCESS"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6623372 "BT_STATUS_FAIL"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6623500 "BT_STATUS_NOT_READY"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6623628 "BT_STATUS_NOMEM"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6623756 "BT_STATUS_BUSY"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6623884 "BT_STATUS_DONE"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6624012 "BT_STATUS_UNSUPPORTED"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6624140 "BT_STATUS_PARM_INVALID"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6624268 "BT_STATUS_UNHANDLED"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6624396 "BT_STATUS_AUTH_FAILURE"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6624524 "BT_STATUS_RMT_DEV_DOWN"
	public type class_ref 1714444 // bt_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1714572 "bt_discovery_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Adapter Discovery state "
      attribute 6624652 "BT_DISCOVERY_STOPPED"
	public type class_ref 1714572 // bt_discovery_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6624780 "BT_DISCOVERY_STARTED"
	public type class_ref 1714572 // bt_discovery_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1714700 "bt_acl_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth ACL connection state "
      attribute 6624908 "BT_ACL_STATE_CONNECTED"
	public type class_ref 1714700 // bt_acl_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6625036 "BT_ACL_STATE_DISCONNECTED"
	public type class_ref 1714700 // bt_acl_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1714828 "bt_uuid_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth 128-bit UUID "
      attribute 6625164 "uu"
	public explicit_type "uint8_t"
	multiplicity "[16]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1714956 "bt_service_record_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth SDP service record "
      classrelation 3544204 // uuid (<directional composition>)
	relation 3544076 *-->
	  a role_name "uuid" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3544204 // uuid (<directional composition>)
	  b parent class_ref 1714828 // bt_uuid_t
      end

      attribute 6625292 "channel"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6625420 "name"
	public explicit_type "char"
	multiplicity "[256]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " what's the maximum length"
      end
    end

    class 1715084 "bt_property_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Bluetooth Adapter and Remote Device property types "
      attribute 6625548 "BT_PROPERTY_BDNAME"
	public type class_ref 1715084 // bt_property_type_t
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6625676 "BT_PROPERTY_BDADDR"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6625804 "BT_PROPERTY_UUIDS"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6625932 "BT_PROPERTY_CLASS_OF_DEVICE"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6626060 "BT_PROPERTY_TYPE_OF_DEVICE"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6626188 "BT_PROPERTY_SERVICE_RECORD"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6626316 "BT_PROPERTY_ADAPTER_SCAN_MODE"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6626444 "BT_PROPERTY_ADAPTER_BONDED_DEVICES"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6626572 "BT_PROPERTY_ADAPTER_DISCOVERY_TIMEOUT"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6626700 "BT_PROPERTY_REMOTE_FRIENDLY_NAME"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6626828 "BT_PROPERTY_REMOTE_RSSI"
	public type class_ref 1715084 // bt_property_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6626956 "BT_PROPERTY_REMOTE_DEVICE_TIMESTAMP"
	public type class_ref 1715084 // bt_property_type_t
	init_value " 0xFF"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1715212 "bt_property_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Properties common to both adapter and remote device 
*
     * Description - Bluetooth Device Name
     * Access mode - Adapter name can be GET/SET. Remote device can be GET
     * Data type   - bt_bdname_t
     
*
     * Description - Bluetooth Device Address
     * Access mode - Only GET.
     * Data type   - bt_bdaddr_t
     
*
     * Description - Bluetooth Service 128-bit UUIDs
     * Access mode - Only GET.
     * Data type   - Array of bt_uuid_t (Array size inferred from property length).
     
*
     * Description - Bluetooth Class of Device as found in Assigned Numbers
     * Access mode - Only GET.
     * Data type   - uint32_t.
     
*
     * Description - Device Type - BREDR, BLE or DUAL Mode
     * Access mode - Only GET.
     * Data type   - bt_device_type_t
     
*
     * Description - Bluetooth Service Record
     * Access mode - Only GET.
     * Data type   - bt_service_record_t
     
 Properties unique to adapter 
*
     * Description - Bluetooth Adapter scan mode
     * Access mode - GET and SET
     * Data type   - bt_scan_mode_t.
     
*
     * Description - List of bonded devices
     * Access mode - Only GET.
     * Data type   - Array of bt_bdaddr_t of the bonded remote devices
     *               (Array size inferred from property length).
     
*
     * Description - Bluetooth Adapter Discovery timeout (in seconds)
     * Access mode - GET and SET
     * Data type   - uint32_t
     
 Properties unique to remote device 
*
     * Description - User defined friendly name of the remote device
     * Access mode - GET and SET
     * Data type   - bt_bdname_t.
     
*
     * Description - RSSI value of the inquired remote device
     * Access mode - Only GET.
     * Data type   - int32_t.
     
* Bluetooth Adapter Property data structure "
      classrelation 3544332 // type (<directional composition>)
	relation 3544204 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3544332 // type (<directional composition>)
	  b parent class_ref 1715084 // bt_property_type_t
      end

      attribute 6627084 "len"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6627212 "val"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1715340 "bt_device_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Device Type "
      attribute 6627340 "BT_DEVICE_DEVTYPE_BREDR"
	public type class_ref 1715340 // bt_device_type_t
	init_value " 0x1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6627468 "BT_DEVICE_DEVTYPE_BLE"
	public type class_ref 1715340 // bt_device_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6627596 "BT_DEVICE_DEVTYPE_DUAL"
	public type class_ref 1715340 // bt_device_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1715468 "bt_bond_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Bond state "
      attribute 6627724 "BT_BOND_STATE_NONE"
	public type class_ref 1715468 // bt_bond_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6627852 "BT_BOND_STATE_BONDING"
	public type class_ref 1715468 // bt_bond_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6627980 "BT_BOND_STATE_BONDED"
	public type class_ref 1715468 // bt_bond_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1715596 "bt_ssp_variant_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth SSP Bonding Variant "
      attribute 6628108 "BT_SSP_VARIANT_PASSKEY_CONFIRMATION"
	public type class_ref 1715596 // bt_ssp_variant_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6628236 "BT_SSP_VARIANT_PASSKEY_ENTRY"
	public type class_ref 1715596 // bt_ssp_variant_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6628364 "BT_SSP_VARIANT_CONSENT"
	public type class_ref 1715596 // bt_ssp_variant_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6628492 "BT_SSP_VARIANT_PASSKEY_NOTIFICATION"
	public type class_ref 1715596 // bt_ssp_variant_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1715724 "adapter_state_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_state_t state);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Interface callbacks 
* Bluetooth Enable/Disable Callback. "
    end

    class 1715852 "adapter_properties_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status,
                                               int num_properties,
                                               bt_property_t *properties);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* GET/SET Adapter Properties callback 
 TODO: For the GET/SET property APIs/callbacks, we may need a session
 * identifier to associate the call with the callback. This would be needed
 * whenever more than one simultaneous instance of the same adapter_type
 * is get/set.
 *
 * If this is going to be handled in the Java framework, then we do not need
 * to manage sessions here."
    end

    class 1715980 "remote_device_properties_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status,
                                                       bt_bdaddr_t *bd_addr,
                                                       int num_properties,
                                                       bt_property_t *properties);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* GET/SET Remote Device Properties callback 
* TODO: For remote device properties, do not see a need to get/set
 * multiple properties - num_properties shall be 1"
    end

    class 1716108 "device_found_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int num_properties,
                                         bt_property_t *properties);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* New device discovered callback 
* If EIR data is not present, then BD_NAME and RSSI shall be NULL and -1
 * respectively "
    end

    class 1716236 "discovery_state_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_discovery_state_t state);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Discovery state changed callback "
    end

    class 1716364 "pin_request_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_bdaddr_t *remote_bd_addr,
                                        bt_bdname_t *bd_name, uint32_t cod);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Legacy PinKey Request callback "
    end

    class 1716492 "ssp_request_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_bdaddr_t *remote_bd_addr,
                                        bt_bdname_t *bd_name,
                                        uint32_t cod,
                                        bt_ssp_variant_t pairing_variant,
                                     uint32_t pass_key);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth SSP Request callback - Just Works & Numeric Comparison
* pass_key - Shall be 0 for BT_SSP_PAIRING_VARIANT_CONSENT &
 *  BT_SSP_PAIRING_PASSKEY_ENTRY 
 TODO: Passkey request callback shall not be needed for devices with display
 * capability. We still need support this in the stack for completeness "
    end

    class 1716620 "bond_state_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status,
                                               bt_bdaddr_t *remote_bd_addr,
                                               bt_bond_state_t state);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Bond state changed callback 
 Invoked in response to create_bond, cancel_bond or remove_bond "
    end

    class 1716748 "acl_state_changed_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_status_t status, bt_bdaddr_t *remote_bd_addr,
                                            bt_acl_state_t state);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth ACL connection state changed callback "
    end

    class 1716876 "bt_cb_thread_evt"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6628620 "ASSOCIATE_JVM"
	public type class_ref 1716876 // bt_cb_thread_evt
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6628748 "DISASSOCIATE_JVM"
	public type class_ref 1716876 // bt_cb_thread_evt
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1717004 "callback_thread_event"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(bt_cb_thread_evt evt);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Thread Associate/Disassociate JVM Callback 
 Callback that is invoked by the callback thread to allow upper layer to attach/detach to/from
 * the JVM "
    end

    class 1717132 "dut_mode_recv_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(uint16_t opcode, uint8_t *buf, uint8_t len);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Bluetooth Test Mode Callback 
 Receive any HCI event from controller. Must be in DUT Mode for this callback to be received "
    end

    class 1717260 "bt_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* TODO: Add callbacks for Link Up/Down and other generic
  *  notifications/callbacks 
* Bluetooth DM callback structure. "
      attribute 6628876 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3544460 // adapter_state_changed_cb (<directional composition>)
	relation 3544332 *-->
	  a role_name "adapter_state_changed_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3544460 // adapter_state_changed_cb (<directional composition>)
	  b parent class_ref 1715724 // adapter_state_changed_callback
      end

      classrelation 3544588 // adapter_properties_cb (<directional composition>)
	relation 3544460 *-->
	  a role_name "adapter_properties_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3544588 // adapter_properties_cb (<directional composition>)
	  b parent class_ref 1715852 // adapter_properties_callback
      end

      classrelation 3544716 // remote_device_properties_cb (<directional composition>)
	relation 3544588 *-->
	  a role_name "remote_device_properties_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3544716 // remote_device_properties_cb (<directional composition>)
	  b parent class_ref 1715980 // remote_device_properties_callback
      end

      classrelation 3544844 // device_found_cb (<directional composition>)
	relation 3544716 *-->
	  a role_name "device_found_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3544844 // device_found_cb (<directional composition>)
	  b parent class_ref 1716108 // device_found_callback
      end

      classrelation 3544972 // discovery_state_changed_cb (<directional composition>)
	relation 3544844 *-->
	  a role_name "discovery_state_changed_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3544972 // discovery_state_changed_cb (<directional composition>)
	  b parent class_ref 1716236 // discovery_state_changed_callback
      end

      classrelation 3545100 // pin_request_cb (<directional composition>)
	relation 3544972 *-->
	  a role_name "pin_request_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3545100 // pin_request_cb (<directional composition>)
	  b parent class_ref 1716364 // pin_request_callback
      end

      classrelation 3545228 // ssp_request_cb (<directional composition>)
	relation 3545100 *-->
	  a role_name "ssp_request_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3545228 // ssp_request_cb (<directional composition>)
	  b parent class_ref 1716492 // ssp_request_callback
      end

      classrelation 3545356 // bond_state_changed_cb (<directional composition>)
	relation 3545228 *-->
	  a role_name "bond_state_changed_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3545356 // bond_state_changed_cb (<directional composition>)
	  b parent class_ref 1716620 // bond_state_changed_callback
      end

      classrelation 3545484 // acl_state_changed_cb (<directional composition>)
	relation 3545356 *-->
	  a role_name "acl_state_changed_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3545484 // acl_state_changed_cb (<directional composition>)
	  b parent class_ref 1716748 // acl_state_changed_callback
      end

      classrelation 3545612 // thread_evt_cb (<directional composition>)
	relation 3545484 *-->
	  a role_name "thread_evt_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3545612 // thread_evt_cb (<directional composition>)
	  b parent class_ref 1717004 // callback_thread_event
      end

      classrelation 3545740 // dut_mode_recv_cb (<directional composition>)
	relation 3545612 *-->
	  a role_name "dut_mode_recv_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3545740 // dut_mode_recv_cb (<directional composition>)
	  b parent class_ref 1717132 // dut_mode_recv_callback
      end
    end

    class 1717388 "bt_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* NOTE: By default, no profiles are initialized at the time of init/enable.
 *  Whenever the application invokes the 'init' API of a profile, then one of
 *  the following shall occur:
 *
 *    1.) If Bluetooth is not enabled, then the Bluetooth core shall mark the
 *        profile as enabled. Subsequently, when the application invokes the
 *        Bluetooth 'enable', as part of the enable sequence the profile that were
 *        marked shall be enabled by calling appropriate stack APIs. The
 *        'adapter_properties_cb' shall return the list of UUIDs of the
 *        enabled profiles.
 *
 *    2.) If Bluetooth is enabled, then the Bluetooth core shall invoke the stack
 *        profile API to initialize the profile and trigger a
 *        'adapter_properties_cb' with the current list of UUIDs including the
 *        newly added profile's UUID.
 *
 *   The reverse shall occur whenever the profile 'cleanup' APIs are invoked
 
* Represents the standard Bluetooth DM interface. "
      attribute 6629004 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6629132 "init"
	public explicit_type "/** * Opens the interface and provides the callback routines * to the implemenation of this interface. */ int (*)(bt_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Opens the interface and provides the callback routines
     * to the implemenation of this interface.
     */
    int (*${name})(bt_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6629260 "enable"
	public explicit_type "/** Enable Bluetooth. */ int (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Enable Bluetooth. */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6629388 "disable"
	public explicit_type "/** Disable Bluetooth. */ int (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Disable Bluetooth. */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6629516 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Closes the interface. */
    void (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6629644 "get_adapter_properties"
	public explicit_type "/** Get all Bluetooth Adapter properties at init */ int (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Get all Bluetooth Adapter properties at init */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6629772 "get_adapter_property"
	public explicit_type "/** Get Bluetooth Adapter property of 'type' */ int (*)(bt_property_type_t type)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Get Bluetooth Adapter property of 'type' */
    int (*${name})(bt_property_type_t type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6629900 "set_adapter_property"
	public explicit_type "/** Set Bluetooth Adapter property of 'type' */ /* Based on the type, val shall be one of * bt_bdaddr_t or bt_bdname_t or bt_scanmode_t etc */ int (*)(const bt_property_t *property)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Set Bluetooth Adapter property of 'type' */
    /* Based on the type, val shall be one of
     * bt_bdaddr_t or bt_bdname_t or bt_scanmode_t etc
     */
    int (*${name})(const bt_property_t *property)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6630028 "get_remote_device_properties"
	public explicit_type "/** Get all Remote Device properties */ int (*)(bt_bdaddr_t *remote_addr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Get all Remote Device properties */
    int (*${name})(bt_bdaddr_t *remote_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6630156 "get_remote_device_property"
	public explicit_type "/** Get Remote Device property of 'type' */ int (*)(bt_bdaddr_t *remote_addr, bt_property_type_t type)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Get Remote Device property of 'type' */
    int (*${name})(bt_bdaddr_t *remote_addr,
                                      bt_property_type_t type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6630284 "set_remote_device_property"
	public explicit_type "/** Set Remote Device property of 'type' */ int (*)(bt_bdaddr_t *remote_addr, const bt_property_t *property)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Set Remote Device property of 'type' */
    int (*${name})(bt_bdaddr_t *remote_addr,
                                      const bt_property_t *property)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6630412 "get_remote_service_record"
	public explicit_type "/** Get Remote Device's service record for the given UUID */ int (*)(bt_bdaddr_t *remote_addr, bt_uuid_t *uuid)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Get Remote Device's service record  for the given UUID */
    int (*${name})(bt_bdaddr_t *remote_addr,
                                     bt_uuid_t *uuid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6630540 "get_remote_services"
	public explicit_type "/** Start SDP to get remote services */ int (*)(bt_bdaddr_t *remote_addr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Start SDP to get remote services */
    int (*${name})(bt_bdaddr_t *remote_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6630668 "start_discovery"
	public explicit_type "/** Start Discovery */ int (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Start Discovery */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6630796 "cancel_discovery"
	public explicit_type "/** Cancel Discovery */ int (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Cancel Discovery */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6630924 "create_bond"
	public explicit_type "/** Create Bluetooth Bonding */ int (*)(const bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Create Bluetooth Bonding */
    int (*${name})(const bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6631052 "remove_bond"
	public explicit_type "/** Remove Bond */ int (*)(const bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Remove Bond */
    int (*${name})(const bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6631180 "cancel_bond"
	public explicit_type "/** Cancel Bond */ int (*)(const bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Cancel Bond */
    int (*${name})(const bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6631308 "pin_reply"
	public explicit_type "/** BT Legacy PinKey Reply */ /** If accept==FALSE, then pin_len and pin_code shall be 0x0 */ int (*)(const bt_bdaddr_t *bd_addr, uint8_t accept, uint8_t pin_len, bt_pin_code_t *pin_code)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** BT Legacy PinKey Reply */
    /** If accept==FALSE, then pin_len and pin_code shall be 0x0 */
    int (*${name})(const bt_bdaddr_t *bd_addr, uint8_t accept,
                     uint8_t pin_len, bt_pin_code_t *pin_code)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6631436 "ssp_reply"
	public explicit_type "/** BT SSP Reply - Just Works, Numeric Comparison and Passkey * passkey shall be zero for BT_SSP_VARIANT_PASSKEY_COMPARISON & * BT_SSP_VARIANT_CONSENT * For BT_SSP_VARIANT_PASSKEY_ENTRY, if accept==FALSE, then passkey * shall be zero */ int (*)(const bt_bdaddr_t *bd_addr, bt_ssp_variant_t variant, uint8_t accept, uint32_t passkey)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** BT SSP Reply - Just Works, Numeric Comparison and Passkey
     * passkey shall be zero for BT_SSP_VARIANT_PASSKEY_COMPARISON &
     * BT_SSP_VARIANT_CONSENT
     * For BT_SSP_VARIANT_PASSKEY_ENTRY, if accept==FALSE, then passkey
     * shall be zero */
    int (*${name})(const bt_bdaddr_t *bd_addr, bt_ssp_variant_t variant,
                     uint8_t accept, uint32_t passkey)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6631564 "get_profile_interface"
	const_attribute public explicit_type "void* (*) (const char *profile_id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} void* (*${name}) (const char *profile_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6631692 "dut_mode_configure"
	public explicit_type "/** Bluetooth Test Mode APIs - Bluetooth must be enabled for these APIs */ /* Configure DUT Mode - Use this mode to enter/exit DUT mode */ int (*)(uint8_t enable)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Bluetooth Test Mode APIs - Bluetooth must be enabled for these APIs */
    /* Configure DUT Mode - Use this mode to enter/exit DUT mode */
    int (*${name})(uint8_t enable)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6631820 "dut_mode_send"
	public explicit_type "/* Send any test HCI (vendor-specific) command to the controller. Must be in DUT Mode */ int (*)(uint16_t opcode, uint8_t *buf, uint8_t len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* Send any test HCI (vendor-specific) command to the controller. Must be in DUT Mode */
    int (*${name})(uint16_t opcode, uint8_t *buf, uint8_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1717516 "bluetooth_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* TODO: Need to add APIs for Service Discovery, Service authorization and
  *       connection management. Also need to add APIs for configuring
  *       properties of remote bonded devices such as name, UUID etc. "
      classrelation 3545868 // common (<directional composition>)
	relation 3545740 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3545868 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6631948 "get_bluetooth_interface"
	const_attribute public explicit_type "bt_interface_t* (*)()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} bt_interface_t* (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1717644 "bluetooth_module_t"
      visibility package stereotype "typedef" base_type class_ref 1717516 // bluetooth_device_t
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3545996 // <dependency>
	relation 3545868 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3545996 // <dependency>
	  b parent class_ref 1717516 // bluetooth_device_t
      end
    end

    class 1717772 "btav_audio_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Bluetooth AV datapath states "
      attribute 6632076 "BTAV_AUDIO_STATE_REMOTE_SUSPEND"
	public type class_ref 1717772 // btav_audio_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6632204 "BTAV_AUDIO_STATE_STOPPED"
	public type class_ref 1717772 // btav_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6632332 "BTAV_AUDIO_STATE_STARTED"
	public type class_ref 1717772 // btav_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1717900 "btav_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(btav_connection_state_t state, 
                                                    bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for connection state change.
 *  state will have one of the values from btav_connection_state_t"
    end

    class 1718028 "btav_audio_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(btav_audio_state_t state, 
                                               bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for audiopath state change.
 *  state will have one of the values from btav_audio_state_t"
    end

    class 1718156 "btav_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* BT-AV callback structure. "
      attribute 6632460 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3546124 // connection_state_cb (<directional composition>)
	relation 3545996 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3546124 // connection_state_cb (<directional composition>)
	  b parent class_ref 1717900 // btav_connection_state_callback
      end

      classrelation 3546252 // audio_state_cb (<directional composition>)
	relation 3546124 *-->
	  a role_name "audio_state_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3546252 // audio_state_cb (<directional composition>)
	  b parent class_ref 1718028 // btav_audio_state_callback
      end
    end

    class 1718284 "btav_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* 
 * NOTE:
 *
 * 1. AVRCP 1.0 shall be supported initially. AVRCP passthrough commands
 *    shall be handled internally via uinput 
 *
 * 2. A2DP data path shall be handled via a socket pipe between the AudioFlinger
 *    android_audio_hw library and the Bluetooth stack.
 * 
 
* Represents the standard BT-AV interface. "
      attribute 6632588 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6632716 "init"
	public explicit_type "/** * Register the BtAv callbacks */ bt_status_t (*)( btav_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Register the BtAv callbacks
     */
    bt_status_t (*${name})( btav_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6632844 "connect"
	public explicit_type "/** connect to headset */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** connect to headset */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6632972 "disconnect"
	public explicit_type "/** dis-connect from headset */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** dis-connect from headset */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6633100 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1718412 "bthf_connection_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6633228 "BTHF_CONNECTION_STATE_DISCONNECTED"
	public type class_ref 1718412 // bthf_connection_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6633356 "BTHF_CONNECTION_STATE_CONNECTING"
	public type class_ref 1718412 // bthf_connection_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6633484 "BTHF_CONNECTION_STATE_CONNECTED"
	public type class_ref 1718412 // bthf_connection_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6633612 "BTHF_CONNECTION_STATE_SLC_CONNECTED"
	public type class_ref 1718412 // bthf_connection_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6633740 "BTHF_CONNECTION_STATE_DISCONNECTING"
	public type class_ref 1718412 // bthf_connection_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1718540 "bthf_audio_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6633868 "BTHF_AUDIO_STATE_DISCONNECTED"
	public type class_ref 1718540 // bthf_audio_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6633996 "BTHF_AUDIO_STATE_CONNECTING"
	public type class_ref 1718540 // bthf_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6634124 "BTHF_AUDIO_STATE_CONNECTED"
	public type class_ref 1718540 // bthf_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6634252 "BTHF_AUDIO_STATE_DISCONNECTING"
	public type class_ref 1718540 // bthf_audio_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1718668 "bthf_vr_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6634380 "BTHF_VR_STATE_STOPPED"
	public type class_ref 1718668 // bthf_vr_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6634508 "BTHF_VR_STATE_STARTED"
	public type class_ref 1718668 // bthf_vr_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1718796 "bthf_volume_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6634636 "BTHF_VOLUME_TYPE_SPK"
	public type class_ref 1718796 // bthf_volume_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6634764 "BTHF_VOLUME_TYPE_MIC"
	public type class_ref 1718796 // bthf_volume_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1718924 "bthf_nrec_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Noise Reduction and Echo Cancellation "
      attribute 6634892 "BTHF_NREC_STOP"
	public type class_ref 1718924 // bthf_nrec_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6635020 "BTHF_NREC_START"
	public type class_ref 1718924 // bthf_nrec_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1719052 "bthf_chld_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " CHLD - Call held handling "
      attribute 6635148 "BTHF_CHLD_TYPE_RELEASEHELD"
	public type class_ref 1719052 // bthf_chld_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6635276 "BTHF_CHLD_TYPE_RELEASEACTIVE_ACCEPTHELD"
	public type class_ref 1719052 // bthf_chld_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6635404 "BTHF_CHLD_TYPE_HOLDACTIVE_ACCEPTHELD"
	public type class_ref 1719052 // bthf_chld_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6635532 "BTHF_CHLD_TYPE_ADDHELDTOCONF"
	public type class_ref 1719052 // bthf_chld_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1719180 "bthf_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_connection_state_t state, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for connection state change.
 *  state will have one of the values from BtHfConnectionState"
    end

    class 1719308 "bthf_audio_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_audio_state_t state, bt_bdaddr_t *bd_addr);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for audio connection state change.
 *  state will have one of the values from BtHfAudioState"
    end

    class 1719436 "bthf_vr_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_vr_state_t state);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for VR connection state change.
 *  state will have one of the values from BtHfVRState"
    end

    class 1719564 "bthf_answer_call_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for answer incoming call (ATA)"
    end

    class 1719692 "bthf_hangup_call_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for disconnect call (AT+CHUP)"
    end

    class 1719820 "bthf_volume_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_volume_type_t type, int volume);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for disconnect call (AT+CHUP)
 *  type will denote Speaker/Mic gain (BtHfVolumeControl)."
    end

    class 1719948 "bthf_dial_call_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(char *number);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for dialing an outgoing call
 *  If number is NULL, redial"
    end

    class 1720076 "bthf_dtmf_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(char tone);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for sending DTMF tones
 *  tone contains the dtmf character to be sent"
    end

    class 1720204 "bthf_nrec_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_nrec_t nrec);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for enabling/disabling noise reduction/echo cancellation
 *  value will be 1 to enable, 0 to disable"
    end

    class 1720332 "bthf_chld_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bthf_chld_type_t chld);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for call hold handling (AT+CHLD)
 *  value will contain the call hold command (0, 1, 2, 3)"
    end

    class 1720460 "bthf_cnum_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for CNUM (subscriber number)"
    end

    class 1720588 "bthf_cind_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for indicators (CIND)"
    end

    class 1720716 "bthf_cops_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for operator selection (COPS)"
    end

    class 1720844 "bthf_clcc_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name}) ();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for call list (AT+CLCC)"
    end

    class 1720972 "bthf_unknown_at_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(char *at_string);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for unknown AT command recd from HF
 *  at_string will contain the unparsed AT string"
    end

    class 1721100 "bthf_key_pressed_cmd_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for keypressed (HSP) event."
    end

    class 1721228 "bthf_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* BT-HF callback structure. "
      attribute 6635660 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3546380 // connection_state_cb (<directional composition>)
	relation 3546252 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3546380 // connection_state_cb (<directional composition>)
	  b parent class_ref 1719180 // bthf_connection_state_callback
      end

      classrelation 3546508 // audio_state_cb (<directional composition>)
	relation 3546380 *-->
	  a role_name "audio_state_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3546508 // audio_state_cb (<directional composition>)
	  b parent class_ref 1719308 // bthf_audio_state_callback
      end

      classrelation 3546636 // vr_cmd_cb (<directional composition>)
	relation 3546508 *-->
	  a role_name "vr_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3546636 // vr_cmd_cb (<directional composition>)
	  b parent class_ref 1719436 // bthf_vr_cmd_callback
      end

      classrelation 3546764 // answer_call_cmd_cb (<directional composition>)
	relation 3546636 *-->
	  a role_name "answer_call_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3546764 // answer_call_cmd_cb (<directional composition>)
	  b parent class_ref 1719564 // bthf_answer_call_cmd_callback
      end

      classrelation 3546892 // hangup_call_cmd_cb (<directional composition>)
	relation 3546764 *-->
	  a role_name "hangup_call_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3546892 // hangup_call_cmd_cb (<directional composition>)
	  b parent class_ref 1719692 // bthf_hangup_call_cmd_callback
      end

      classrelation 3547020 // volume_cmd_cb (<directional composition>)
	relation 3546892 *-->
	  a role_name "volume_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3547020 // volume_cmd_cb (<directional composition>)
	  b parent class_ref 1719820 // bthf_volume_cmd_callback
      end

      classrelation 3547148 // dial_call_cmd_cb (<directional composition>)
	relation 3547020 *-->
	  a role_name "dial_call_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3547148 // dial_call_cmd_cb (<directional composition>)
	  b parent class_ref 1719948 // bthf_dial_call_cmd_callback
      end

      classrelation 3547276 // dtmf_cmd_cb (<directional composition>)
	relation 3547148 *-->
	  a role_name "dtmf_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3547276 // dtmf_cmd_cb (<directional composition>)
	  b parent class_ref 1720076 // bthf_dtmf_cmd_callback
      end

      classrelation 3547404 // nrec_cmd_cb (<directional composition>)
	relation 3547276 *-->
	  a role_name "nrec_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3547404 // nrec_cmd_cb (<directional composition>)
	  b parent class_ref 1720204 // bthf_nrec_cmd_callback
      end

      classrelation 3547532 // chld_cmd_cb (<directional composition>)
	relation 3547404 *-->
	  a role_name "chld_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3547532 // chld_cmd_cb (<directional composition>)
	  b parent class_ref 1720332 // bthf_chld_cmd_callback
      end

      classrelation 3547660 // cnum_cmd_cb (<directional composition>)
	relation 3547532 *-->
	  a role_name "cnum_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3547660 // cnum_cmd_cb (<directional composition>)
	  b parent class_ref 1720460 // bthf_cnum_cmd_callback
      end

      classrelation 3547788 // cind_cmd_cb (<directional composition>)
	relation 3547660 *-->
	  a role_name "cind_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3547788 // cind_cmd_cb (<directional composition>)
	  b parent class_ref 1720588 // bthf_cind_cmd_callback
      end

      classrelation 3547916 // cops_cmd_cb (<directional composition>)
	relation 3547788 *-->
	  a role_name "cops_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3547916 // cops_cmd_cb (<directional composition>)
	  b parent class_ref 1720716 // bthf_cops_cmd_callback
      end

      classrelation 3548044 // clcc_cmd_cb (<directional composition>)
	relation 3547916 *-->
	  a role_name "clcc_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3548044 // clcc_cmd_cb (<directional composition>)
	  b parent class_ref 1720844 // bthf_clcc_cmd_callback
      end

      classrelation 3548172 // unknown_at_cmd_cb (<directional composition>)
	relation 3548044 *-->
	  a role_name "unknown_at_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3548172 // unknown_at_cmd_cb (<directional composition>)
	  b parent class_ref 1720972 // bthf_unknown_at_cmd_callback
      end

      classrelation 3548300 // key_pressed_cmd_cb (<directional composition>)
	relation 3548172 *-->
	  a role_name "key_pressed_cmd_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3548300 // key_pressed_cmd_cb (<directional composition>)
	  b parent class_ref 1721100 // bthf_key_pressed_cmd_callback
      end
    end

    class 1721356 "bthf_network_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Network Status "
      attribute 6635788 "BTHF_NETWORK_STATE_NOT_AVAILABLE"
	public type class_ref 1721356 // bthf_network_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6635916 "BTHF_NETWORK_STATE_AVAILABLE"
	public type class_ref 1721356 // bthf_network_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1721484 "bthf_service_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Service type "
      attribute 6636044 "BTHF_SERVICE_TYPE_HOME"
	public type class_ref 1721484 // bthf_service_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6636172 "BTHF_SERVICE_TYPE_ROAMING"
	public type class_ref 1721484 // bthf_service_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1721612 "bthf_call_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6636300 "BTHF_CALL_STATE_ACTIVE"
	public type class_ref 1721612 // bthf_call_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6636428 "BTHF_CALL_STATE_HELD"
	public type class_ref 1721612 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6636556 "BTHF_CALL_STATE_DIALING"
	public type class_ref 1721612 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6636684 "BTHF_CALL_STATE_ALERTING"
	public type class_ref 1721612 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6636812 "BTHF_CALL_STATE_INCOMING"
	public type class_ref 1721612 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6636940 "BTHF_CALL_STATE_WAITING"
	public type class_ref 1721612 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6637068 "BTHF_CALL_STATE_IDLE"
	public type class_ref 1721612 // bthf_call_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1721740 "bthf_call_direction_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6637196 "BTHF_CALL_DIRECTION_OUTGOING"
	public type class_ref 1721740 // bthf_call_direction_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6637324 "BTHF_CALL_DIRECTION_INCOMING"
	public type class_ref 1721740 // bthf_call_direction_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1721868 "bthf_call_mode_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6637452 "BTHF_CALL_TYPE_VOICE"
	public type class_ref 1721868 // bthf_call_mode_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6637580 "BTHF_CALL_TYPE_DATA"
	public type class_ref 1721868 // bthf_call_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6637708 "BTHF_CALL_TYPE_FAX"
	public type class_ref 1721868 // bthf_call_mode_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1721996 "bthf_call_mpty_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6637836 "BTHF_CALL_MPTY_TYPE_SINGLE"
	public type class_ref 1721996 // bthf_call_mpty_type_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6637964 "BTHF_CALL_MPTY_TYPE_MULTI"
	public type class_ref 1721996 // bthf_call_mpty_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1722124 "bthf_call_addrtype_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6638092 "BTHF_CALL_ADDRTYPE_UNKNOWN"
	public type class_ref 1722124 // bthf_call_addrtype_t
	init_value " 0x81"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6638220 "BTHF_CALL_ADDRTYPE_INTERNATIONAL"
	public type class_ref 1722124 // bthf_call_addrtype_t
	init_value " 0x91
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1722252 "bthf_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents the standard BT-HF interface. "
      attribute 6638348 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6638476 "init"
	public explicit_type "/** * Register the BtHf callbacks */ bt_status_t (*)( bthf_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Register the BtHf callbacks
     */
    bt_status_t (*${name})( bthf_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6638604 "connect"
	public explicit_type "/** connect to headset */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** connect to headset */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6638732 "disconnect"
	public explicit_type "/** dis-connect from headset */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** dis-connect from headset */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6638860 "connect_audio"
	public explicit_type "/** create an audio connection */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** create an audio connection */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6638988 "disconnect_audio"
	public explicit_type "/** close the audio connection */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** close the audio connection */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6639116 "start_voice_recognition"
	public explicit_type "/** start voice recognition */ bt_status_t (*)()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** start voice recognition */
    bt_status_t (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6639244 "stop_voice_recognition"
	public explicit_type "/** stop voice recognition */ bt_status_t (*)()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** stop voice recognition */
    bt_status_t (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6639372 "volume_control"
	public explicit_type "/** volume control */ bt_status_t (*) (bthf_volume_type_t type, int volume)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** volume control */
    bt_status_t (*${name}) (bthf_volume_type_t type, int volume)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6639500 "device_status_notification"
	public explicit_type "/** Combined device status change notification */ bt_status_t (*)(bthf_network_state_t ntk_state, bthf_service_type_t svc_type, int signal, int batt_chg)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Combined device status change notification */
    bt_status_t (*${name})(bthf_network_state_t ntk_state, bthf_service_type_t svc_type, int signal,
                           int batt_chg)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6639628 "cops_response"
	public explicit_type "/** Response for COPS command */ bt_status_t (*)(const char *cops)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Response for COPS command */
    bt_status_t (*${name})(const char *cops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6639756 "cind_response"
	public explicit_type "/** Response for CIND command */ bt_status_t (*)(int svc, int num_active, int num_held, bthf_call_state_t call_setup_state, int signal, int roam, int batt_chg)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Response for CIND command */
    bt_status_t (*${name})(int svc, int num_active, int num_held, bthf_call_state_t call_setup_state,
                                 int signal, int roam, int batt_chg)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6639884 "formatted_at_response"
	public explicit_type "/** Pre-formatted AT response, typically in response to unknown AT cmd */ bt_status_t (*)(const char *rsp)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Pre-formatted AT response, typically in response to unknown AT cmd */
    bt_status_t (*${name})(const char *rsp)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6640012 "at_response"
	public explicit_type "/** ok/error response * ERROR (0) * OK (1) */ bt_status_t (*) (bthf_at_response_t response_code, int error_code)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** ok/error response
     *  ERROR (0)
     *  OK    (1)
     */
    bt_status_t (*${name}) (bthf_at_response_t response_code, int error_code)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6640140 "clcc_response"
	public explicit_type "/** response for CLCC command * Can be iteratively called for each call index * Call index of 0 will be treated as NULL termination (Completes response) */ bt_status_t (*) (int index, bthf_call_direction_t dir, bthf_call_state_t state, bthf_call_mode_t mode, bthf_call_mpty_type_t mpty, const char *number, bthf_call_addrtype_t type)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** response for CLCC command 
     *  Can be iteratively called for each call index
     *  Call index of 0 will be treated as NULL termination (Completes response)
     */
    bt_status_t (*${name}) (int index, bthf_call_direction_t dir,
                                bthf_call_state_t state, bthf_call_mode_t mode,
                                bthf_call_mpty_type_t mpty, const char *number,
                                bthf_call_addrtype_t type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6640268 "phone_state_change"
	public explicit_type "/** notify of a call state change * Each update notifies * 1. Number of active/held/ringing calls * 2. call_state: This denotes the state change that triggered this msg * This will take one of the values from BtHfCallState * 3. number & type: valid only for incoming & waiting call */ bt_status_t (*) (int num_active, int num_held, bthf_call_state_t call_setup_state, const char *number, bthf_call_addrtype_t type)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** notify of a call state change
     *  Each update notifies 
     *    1. Number of active/held/ringing calls
     *    2. call_state: This denotes the state change that triggered this msg
     *                   This will take one of the values from BtHfCallState
     *    3. number & type: valid only for incoming & waiting call
    */
    bt_status_t (*${name}) (int num_active, int num_held, bthf_call_state_t call_setup_state,
                                       const char *number, bthf_call_addrtype_t type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6640396 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1722380 "bthh_status_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6640524 "BTHH_OK"
	public type class_ref 1722380 // bthh_status_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6640652 "BTHH_HS_HID_NOT_READY"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6640780 "BTHH_HS_INVALID_RPT_ID"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6640908 "BTHH_HS_TRANS_NOT_SPT"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6641036 "BTHH_HS_INVALID_PARAM"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6641164 "BTHH_HS_ERROR"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6641292 "BTHH_ERR"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6641420 "BTHH_ERR_SDP"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6641548 "BTHH_ERR_PROTO"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6641676 "BTHH_ERR_DB_FULL"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6641804 "BTHH_ERR_TOD_UNSPT"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6641932 "BTHH_ERR_NO_RES"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6642060 "BTHH_ERR_AUTH_FAILED"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6642188 "BTHH_ERR_HDL"
	public type class_ref 1722380 // bthh_status_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1722508 "bthh_protocol_mode_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " handshake error : device not ready 
 handshake error : invalid report ID 
 handshake error : transaction not spt 
 handshake error : invalid paremter 
 handshake error : unspecified HS error 
 general BTA HH error 
 SDP error 
 SET_Protocol error,
                                                                only used in BTA_HH_OPEN_EVT callback 
 device database full error, used  
 type of device not supported 
 out of system resources 
 authentication fail 
 Protocol modes "
      attribute 6642316 "BTHH_REPORT_MODE"
	public type class_ref 1722508 // bthh_protocol_mode_t
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6642444 "BTHH_BOOT_MODE"
	public type class_ref 1722508 // bthh_protocol_mode_t
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6642572 "BTHH_UNSUPPORTED_MODE"
	public type class_ref 1722508 // bthh_protocol_mode_t
	init_value " 0xff
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1722636 "bthh_report_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Report types "
      attribute 6642700 "BTHH_INPUT_REPORT"
	public type class_ref 1722636 // bthh_report_type_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6642828 "BTHH_OUTPUT_REPORT"
	public type class_ref 1722636 // bthh_report_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6642956 "BTHH_FEATURE_REPORT"
	public type class_ref 1722636 // bthh_report_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1722764 "bthh_hid_info_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6643084 "attr_mask"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6643212 "sub_class"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6643340 "app_id"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6643468 "vendor_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6643596 "product_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6643724 "version"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6643852 "ctry_code"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6643980 "dl_len"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6644108 "dsc_list"
	public explicit_type "uint8_t"
	multiplicity "[BTHH_MAX_DSC_LEN]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1722892 "bthh_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_connection_state_t state);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for connection state change.
 *  state will have one of the values from bthh_connection_state_t"
    end

    class 1723020 "bthh_virtual_unplug_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_status_t hh_status);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for vitual unplug api.
 *  the status of the vitual unplug"
    end

    class 1723148 "bthh_hid_info_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_hid_info_t hid_info);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for get hid info
 *  hid_info will contain attr_mask, sub_class, app_id, vendor_id, product_id, version, ctry_code, len"
    end

    class 1723276 "bthh_protocol_mode_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_status_t hh_status,bthh_protocol_mode_t mode);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for get/set protocal api.
 *  the protocol mode is one of the value from bthh_protocol_mode_t"
    end

    class 1723404 "bthh_idle_time_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_status_t hh_status, int idle_rate);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for get/set_idle_time api."
    end

    class 1723532 "bthh_get_report_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(bt_bdaddr_t *bd_addr, bthh_status_t hh_status, uint8_t* rpt_data, int rpt_size);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for get report api.
 *  if staus is ok rpt_data contains the report data"
    end

    class 1723660 "bthh_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* BT-HH callback structure. "
      attribute 6644236 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3548428 // connection_state_cb (<directional composition>)
	relation 3548300 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3548428 // connection_state_cb (<directional composition>)
	  b parent class_ref 1722892 // bthh_connection_state_callback
      end

      classrelation 3548556 // hid_info_cb (<directional composition>)
	relation 3548428 *-->
	  a role_name "hid_info_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3548556 // hid_info_cb (<directional composition>)
	  b parent class_ref 1723148 // bthh_hid_info_callback
      end

      classrelation 3548684 // protocol_mode_cb (<directional composition>)
	relation 3548556 *-->
	  a role_name "protocol_mode_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3548684 // protocol_mode_cb (<directional composition>)
	  b parent class_ref 1723276 // bthh_protocol_mode_callback
      end

      classrelation 3548812 // idle_time_cb (<directional composition>)
	relation 3548684 *-->
	  a role_name "idle_time_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3548812 // idle_time_cb (<directional composition>)
	  b parent class_ref 1723404 // bthh_idle_time_callback
      end

      classrelation 3548940 // get_report_cb (<directional composition>)
	relation 3548812 *-->
	  a role_name "get_report_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3548940 // get_report_cb (<directional composition>)
	  b parent class_ref 1723532 // bthh_get_report_callback
      end

      classrelation 3549068 // virtual_unplug_cb (<directional composition>)
	relation 3548940 *-->
	  a role_name "virtual_unplug_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3549068 // virtual_unplug_cb (<directional composition>)
	  b parent class_ref 1723020 // bthh_virtual_unplug_callback
      end
    end

    class 1723788 "bthh_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents the standard BT-HH interface. "
      attribute 6644364 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6644492 "init"
	public explicit_type "/** * Register the BtHh callbacks */ bt_status_t (*)( bthh_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Register the BtHh callbacks
     */
    bt_status_t (*${name})( bthh_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6644620 "connect"
	public explicit_type "/** connect to hid device */ bt_status_t (*)( bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** connect to hid device */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6644748 "disconnect"
	public explicit_type "/** dis-connect from hid device */ bt_status_t (*)( bt_bdaddr_t *bd_addr )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** dis-connect from hid device */
    bt_status_t (*${name})( bt_bdaddr_t *bd_addr )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6644876 "virtual_unplug"
	public explicit_type "/** Virtual UnPlug (VUP) the specified HID device */ bt_status_t (*)(bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Virtual UnPlug (VUP) the specified HID device */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6645004 "set_info"
	public explicit_type "/** Set the HID device descriptor for the specified HID device. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, bthh_hid_info_t hid_info )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Set the HID device descriptor for the specified HID device. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, bthh_hid_info_t hid_info )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6645132 "get_protocol"
	public explicit_type "/** Get the HID proto mode. */ bt_status_t (*) (bt_bdaddr_t *bd_addr, bthh_protocol_mode_t protocolMode)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Get the HID proto mode. */
    bt_status_t (*${name}) (bt_bdaddr_t *bd_addr, bthh_protocol_mode_t protocolMode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6645260 "set_protocol"
	public explicit_type "/** Set the HID proto mode. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, bthh_protocol_mode_t protocolMode)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Set the HID proto mode. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, bthh_protocol_mode_t protocolMode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6645388 "get_report"
	public explicit_type "/** Send a GET_REPORT to HID device. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, bthh_report_type_t reportType, uint8_t reportId, int bufferSize)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Send a GET_REPORT to HID device. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, bthh_report_type_t reportType, uint8_t reportId, int bufferSize)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6645516 "set_report"
	public explicit_type "/** Send a SET_REPORT to HID device. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, bthh_report_type_t reportType, char* report)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Send a SET_REPORT to HID device. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, bthh_report_type_t reportType, char* report)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6645644 "send_data"
	public explicit_type "/** Send data to HID device. */ bt_status_t (*)(bt_bdaddr_t *bd_addr, char* data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Send data to HID device. */
    bt_status_t (*${name})(bt_bdaddr_t *bd_addr, char* data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6645772 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
	/** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1723916 "bthl_app_reg_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6645900 "BTHL_APP_REG_STATE_REG_SUCCESS"
	public type class_ref 1723916 // bthl_app_reg_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6646028 "BTHL_APP_REG_STATE_REG_FAILED"
	public type class_ref 1723916 // bthl_app_reg_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6646156 "BTHL_APP_REG_STATE_DEREG_SUCCESS"
	public type class_ref 1723916 // bthl_app_reg_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6646284 "BTHL_APP_REG_STATE_DEREG_FAILED"
	public type class_ref 1723916 // bthl_app_reg_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1724044 "bthl_channel_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6646412 "BTHL_CHANNEL_TYPE_RELIABLE"
	public type class_ref 1724044 // bthl_channel_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6646540 "BTHL_CHANNEL_TYPE_STREAMING"
	public type class_ref 1724044 // bthl_channel_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6646668 "BTHL_CHANNEL_TYPE_ANY"
	public type class_ref 1724044 // bthl_channel_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1724172 "bthl_channel_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " HL connection states "
      attribute 6646796 "BTHL_CONN_STATE_CONNECTING"
	public type class_ref 1724172 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6646924 "BTHL_CONN_STATE_CONNECTED"
	public type class_ref 1724172 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6647052 "BTHL_CONN_STATE_DISCONNECTING"
	public type class_ref 1724172 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6647180 "BTHL_CONN_STATE_DISCONNECTED"
	public type class_ref 1724172 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6647308 "BTHL_CONN_STATE_DESTROYED"
	public type class_ref 1724172 // bthl_channel_state_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1724300 "bthl_mdep_cfg_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6647436 "mdep_role"
	public explicit_type "bthl_mdep_role_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6647564 "data_type"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3549196 // channel_type (<directional composition>)
	relation 3549068 *-->
	  a role_name "channel_type" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3549196 // channel_type (<directional composition>)
	  b parent class_ref 1724044 // bthl_channel_type_t
      end

      attribute 6647692 "mdep_description"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " MDEP description to be used in the SDP (optional); null terminated "
      end
    end

    class 1724428 "bthl_reg_param_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6647820 "application_name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6647948 "provider_name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " provider name to be used in the SDP (optional); null terminated "
      end

      attribute 6648076 "srv_name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " service name to be used in the SDP (optional); null terminated"
      end

      attribute 6648204 "srv_desp"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " service description to be used in the SDP (optional); null terminated "
      end

      attribute 6648332 "number_of_mdeps"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3549324 // mdep_cfg (<unidirectional association>)
	relation 3549196 --->
	  a role_name "mdep_cfg" public
	    comment " Dynamic array "
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3549324 // mdep_cfg (<unidirectional association>)
	  b parent class_ref 1724300 // bthl_mdep_cfg_t
      end
    end

    class 1724556 "bthl_app_reg_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(int app_id, bthl_app_reg_state_t state);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for application registration status.
 *  state will have one of the values from  bthl_app_reg_state_t"
    end

    class 1724684 "bthl_channel_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(int app_id, bt_bdaddr_t *bd_addr, int mdep_cfg_index, int channel_id, bthl_channel_state_t state, int fd);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for channel connection state change.
 *  state will have one of the values from
 *  bthl_connection_state_t and fd (file descriptor)"
    end

    class 1724812 "bthl_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* BT-HL callback structure. "
      attribute 6648460 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3549452 // app_reg_state_cb (<directional composition>)
	relation 3549324 *-->
	  a role_name "app_reg_state_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3549452 // app_reg_state_cb (<directional composition>)
	  b parent class_ref 1724556 // bthl_app_reg_state_callback
      end

      classrelation 3549580 // channel_state_cb (<directional composition>)
	relation 3549452 *-->
	  a role_name "channel_state_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3549580 // channel_state_cb (<directional composition>)
	  b parent class_ref 1724684 // bthl_channel_state_callback
      end
    end

    class 1724940 "bthl_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents the standard BT-HL interface. "
      attribute 6648588 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6648716 "init"
	public explicit_type "/** * Register the Bthl callbacks */ bt_status_t (*)( bthl_callbacks_t* callbacks )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Register the Bthl callbacks
     */
    bt_status_t (*${name})( bthl_callbacks_t* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6648844 "register_application"
	public explicit_type "/** Register HL application */ bt_status_t (*) ( bthl_reg_param_t *p_reg_param, int *app_id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Register HL application */
    bt_status_t (*${name}) ( bthl_reg_param_t *p_reg_param, int *app_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6648972 "unregister_application"
	public explicit_type "/** Unregister HL application */ bt_status_t (*) (int app_id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Unregister HL application */
    bt_status_t (*${name}) (int app_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6649100 "connect_channel"
	public explicit_type "/** connect channel */ bt_status_t (*)(int app_id, bt_bdaddr_t *bd_addr, int mdep_cfg_index, int *channel_id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** connect channel */
    bt_status_t (*${name})(int app_id, bt_bdaddr_t *bd_addr, int mdep_cfg_index, int *channel_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6649228 "destroy_channel"
	public explicit_type "/** destroy channel */ bt_status_t (*)(int channel_id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** destroy channel */
    bt_status_t (*${name})(int channel_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6649356 "cleanup"
	public explicit_type "/** Close the Bthl callback **/ void (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Close the  Bthl callback **/
    void (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1725068 "btpan_control_state_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6649484 "BTPAN_STATE_ENABLED"
	public type class_ref 1725068 // btpan_control_state_t
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6649612 "BTPAN_STATE_DISABLED"
	public type class_ref 1725068 // btpan_control_state_t
	init_value " 1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1725196 "btpan_connection_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(btpan_connection_state_t state, bt_status_t error,
                                                const bt_bdaddr_t *bd_addr, int local_role, int remote_role);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
* Callback for pan connection state"
    end

    class 1725324 "btpan_control_state_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(btpan_control_state_t state, bt_status_t error,
                                            int local_role, const char* ifname);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1725452 "btpan_callbacks_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6649740 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3549708 // control_state_cb (<directional composition>)
	relation 3549580 *-->
	  a role_name "control_state_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3549708 // control_state_cb (<directional composition>)
	  b parent class_ref 1725324 // btpan_control_state_callback
      end

      classrelation 3549836 // connection_state_cb (<directional composition>)
	relation 3549708 *-->
	  a role_name "connection_state_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3549836 // connection_state_cb (<directional composition>)
	  b parent class_ref 1725196 // btpan_connection_state_callback
      end
    end

    class 1725580 "btpan_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6649868 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6649996 "init"
	public explicit_type "/** * Initialize the pan interface and register the btpan callbacks */ bt_status_t (*)(const btpan_callbacks_t* callbacks)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Initialize the pan interface and register the btpan callbacks
     */
    bt_status_t (*${name})(const btpan_callbacks_t* callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6650124 "enable"
	public explicit_type "/* * enable the pan service by specified role. The result state of * enabl will be returned by btpan_control_state_callback. when pan-nap is enabled, * the state of connecting panu device will be notified by btpan_connection_state_callback */ bt_status_t (*)(int local_role)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /*
     * enable the pan service by specified role. The result state of
     * enabl will be returned by btpan_control_state_callback. when pan-nap is enabled,
     * the state of connecting panu device will be notified by btpan_connection_state_callback
     */
    bt_status_t (*${name})(int local_role)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6650252 "get_local_role"
	public explicit_type "/* * get current pan local role */ int (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /*
     * get current pan local role
     */
    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6650380 "connect"
	public explicit_type "/** * start bluetooth pan connection to the remote device by specified pan role. The result state will be * returned by btpan_connection_state_callback */ bt_status_t (*)(const bt_bdaddr_t *bd_addr, int local_role, int remote_role)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * start bluetooth pan connection to the remote device by specified pan role. The result state will be
     * returned by btpan_connection_state_callback
     */
    bt_status_t (*${name})(const bt_bdaddr_t *bd_addr, int local_role, int remote_role)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6650508 "disconnect"
	public explicit_type "/** * stop bluetooth pan connection. The result state will be returned by btpan_connection_state_callback */ bt_status_t (*)(const bt_bdaddr_t *bd_addr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * stop bluetooth pan connection. The result state will be returned by btpan_connection_state_callback
     */
    bt_status_t (*${name})(const bt_bdaddr_t *bd_addr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6650636 "cleanup"
	public explicit_type "/** * Cleanup the pan interface */ void (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Cleanup the pan interface
     */
    void (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1725708 "btsock_interface_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6650764 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6650892 "listen"
	public explicit_type "/** * listen to a rfcomm uuid or channel. It returns the socket fd from which * btsock_connect_signal can be read out when a remote device connected */ bt_status_t (*)(btsock_type_t type, const char* service_name, const uint8_t* service_uuid, int channel, int* sock_fd, int flags)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * listen to a rfcomm uuid or channel. It returns the socket fd from which
     * btsock_connect_signal can be read out when a remote device connected
     */
    bt_status_t (*${name})(btsock_type_t type, const char* service_name, const uint8_t* service_uuid, int channel, int* sock_fd, int flags)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6651020 "connect"
	public explicit_type "/* * connect to a rfcomm uuid channel of remote device, It returns the socket fd from which * the btsock_connect_signal and a new socket fd to be accepted can be read out when connected */ bt_status_t (*)(const bt_bdaddr_t *bd_addr, btsock_type_t type, const uint8_t* uuid, int channel, int* sock_fd, int flags)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /*
     * connect to a rfcomm uuid channel of remote device, It returns the socket fd from which
     * the btsock_connect_signal and a new socket fd to be accepted can be read out when connected
     */
    bt_status_t (*${name})(const bt_bdaddr_t *bd_addr, btsock_type_t type, const uint8_t* uuid, int channel, int* sock_fd, int flags)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1725836 "camera_release_memory"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(struct camera_memory *mem);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1725964 "camera_memory"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6651148 "data"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6651276 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6651404 "handle"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3549964 // release (<directional composition>)
	relation 3549836 *-->
	  a role_name "release" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3549964 // release (<directional composition>)
	  b parent class_ref 1725836 // camera_release_memory
      end
    end

    class 1726092 "camera_memory_t"
      visibility package stereotype "typedef" base_type class_ref 1725964 // camera_memory
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1726220 "camera_request_memory"
      visibility package stereotype "typedef" base_type class_ref 1726092 // camera_memory_t
      cpp_decl "${comment}typedef ${type}* (* ${name})(int fd, size_t buf_size, unsigned int num_bufs,
                                                  void *user);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3550092 // <dependency>
	relation 3549964 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3550092 // <dependency>
	  b parent class_ref 1726092 // camera_memory_t
      end
    end

    class 1726348 "camera_notify_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int32_t msg_type,
        int32_t ext1,
        int32_t ext2,
        void *user);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1726476 "camera_data_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int32_t msg_type,
        const camera_memory_t *data, unsigned int index,
        camera_frame_metadata_t *metadata, void *user);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1726604 "camera_data_timestamp_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int64_t timestamp,
        int32_t msg_type,
        const camera_memory_t *data, unsigned int index,
        void *user);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1726732 "preview_stream_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6651532 "dequeue_buffer"
	public explicit_type "int (*)(struct preview_stream_ops* w, buffer_handle_t** buffer, int *stride)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    int (*${name})(struct preview_stream_ops* w,
                          buffer_handle_t** buffer, int *stride)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6651660 "enqueue_buffer"
	public explicit_type "int (*)(struct preview_stream_ops* w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w,
                buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6651788 "cancel_buffer"
	public explicit_type "int (*)(struct preview_stream_ops* w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w,
                buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6651916 "set_buffer_count"
	public explicit_type "int (*)(struct preview_stream_ops* w, int count)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w, int count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6652044 "set_buffers_geometry"
	public explicit_type "int (*)(struct preview_stream_ops* pw, int w, int h, int format)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* pw,
                int w, int h, int format)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6652172 "set_crop"
	public explicit_type "int (*)(struct preview_stream_ops *w, int left, int top, int right, int bottom)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops *w,
                int left, int top, int right, int bottom)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6652300 "set_usage"
	public explicit_type "int (*)(struct preview_stream_ops* w, int usage)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w, int usage)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6652428 "set_swap_interval"
	public explicit_type "int (*)(struct preview_stream_ops *w, int interval)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops *w, int interval)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6652556 "get_min_undequeued_buffer_count"
	public explicit_type "int (*)(const struct preview_stream_ops *w, int *count)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(const struct preview_stream_ops *w,
                int *count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6652684 "lock_buffer"
	public explicit_type "int (*)(struct preview_stream_ops* w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(struct preview_stream_ops* w,
                buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6652812 "set_timestamp"
	public explicit_type "// Timestamps are measured in nanoseconds, and must be comparable // and monotonically increasing between two frames in the same // preview stream. They do not need to be comparable between // consecutive or parallel preview streams, cameras, or app runs. int (*)(struct preview_stream_ops *w, int64_t timestamp)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    // Timestamps are measured in nanoseconds, and must be comparable
    // and monotonically increasing between two frames in the same
    // preview stream. They do not need to be comparable between
    // consecutive or parallel preview streams, cameras, or app runs.
    int (*${name})(struct preview_stream_ops *w, int64_t timestamp)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1726860 "preview_stream_ops_t"
      visibility package stereotype "typedef" base_type class_ref 1726732 // preview_stream_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1726988 "camera_device_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6652940 "set_preview_window"
	public explicit_type "/** Set the ANativeWindow to which preview frames are sent */ int (*)(struct camera_device *, struct preview_stream_ops *window)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Set the ANativeWindow to which preview frames are sent */
    int (*${name})(struct camera_device *,
            struct preview_stream_ops *window)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6653068 "set_callbacks"
	public explicit_type "/** Set the notification and data callbacks */ void (*)(struct camera_device *, camera_notify_callback notify_cb, camera_data_callback data_cb, camera_data_timestamp_callback data_cb_timestamp, camera_request_memory get_memory, void *user)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Set the notification and data callbacks */
    void (*${name})(struct camera_device *,
            camera_notify_callback notify_cb,
            camera_data_callback data_cb,
            camera_data_timestamp_callback data_cb_timestamp,
            camera_request_memory get_memory,
            void *user)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6653196 "enable_msg_type"
	public explicit_type "/** * The following three functions all take a msg_type, which is a bitmask of * the messages defined in include/ui/Camera.h */ /** * Enable a message, or set of messages. */ void (*)(struct camera_device *, int32_t msg_type)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * The following three functions all take a msg_type, which is a bitmask of
     * the messages defined in include/ui/Camera.h
     */

    /**
     * Enable a message, or set of messages.
     */
    void (*${name})(struct camera_device *, int32_t msg_type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6653324 "disable_msg_type"
	public explicit_type "/** * Disable a message, or a set of messages. * * Once received a call to disableMsgType(CAMERA_MSG_VIDEO_FRAME), camera * HAL should not rely on its client to call releaseRecordingFrame() to * release video recording frames sent out by the cameral HAL before and * after the disableMsgType(CAMERA_MSG_VIDEO_FRAME) call. Camera HAL * clients must not modify/access any video recording frame after calling * disableMsgType(CAMERA_MSG_VIDEO_FRAME). */ void (*)(struct camera_device *, int32_t msg_type)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Disable a message, or a set of messages.
     *
     * Once received a call to disableMsgType(CAMERA_MSG_VIDEO_FRAME), camera
     * HAL should not rely on its client to call releaseRecordingFrame() to
     * release video recording frames sent out by the cameral HAL before and
     * after the disableMsgType(CAMERA_MSG_VIDEO_FRAME) call. Camera HAL
     * clients must not modify/access any video recording frame after calling
     * disableMsgType(CAMERA_MSG_VIDEO_FRAME).
     */
    void (*${name})(struct camera_device *, int32_t msg_type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6653452 "msg_type_enabled"
	public explicit_type "/** * Query whether a message, or a set of messages, is enabled. Note that * this is operates as an AND, if any of the messages queried are off, this * will return false. */ int (*)(struct camera_device *, int32_t msg_type)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Query whether a message, or a set of messages, is enabled.  Note that
     * this is operates as an AND, if any of the messages queried are off, this
     * will return false.
     */
    int (*${name})(struct camera_device *, int32_t msg_type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6653580 "start_preview"
	public explicit_type "/** * Start preview mode. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Start preview mode.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6653708 "stop_preview"
	public explicit_type "/** * Stop a previously started preview. */ void (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Stop a previously started preview.
     */
    void (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6653836 "preview_enabled"
	public explicit_type "/** * Returns true if preview is enabled. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Returns true if preview is enabled.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6653964 "store_meta_data_in_buffers"
	public explicit_type "/** * Request the camera HAL to store meta data or real YUV data in the video * buffers sent out via CAMERA_MSG_VIDEO_FRAME for a recording session. If * it is not called, the default camera HAL behavior is to store real YUV * data in the video buffers. * * This method should be called before startRecording() in order to be * effective. * * If meta data is stored in the video buffers, it is up to the receiver of * the video buffers to interpret the contents and to find the actual frame * data with the help of the meta data in the buffer. How this is done is * outside of the scope of this method. * * Some camera HALs may not support storing meta data in the video buffers, * but all camera HALs should support storing real YUV data in the video * buffers. If the camera HAL does not support storing the meta data in the * video buffers when it is requested to do do, INVALID_OPERATION must be * returned. It is very useful for the camera HAL to pass meta data rather * than the actual frame data directly to the video encoder, since the * amount of the uncompressed frame data can be very large if video size is * large. * * @param enable if true to instruct the camera HAL to store * meta data in the video buffers; false to instruct * the camera HAL to store real YUV data in the video * buffers. * * @return OK on success. */ int (*)(struct camera_device *, int enable)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Request the camera HAL to store meta data or real YUV data in the video
     * buffers sent out via CAMERA_MSG_VIDEO_FRAME for a recording session. If
     * it is not called, the default camera HAL behavior is to store real YUV
     * data in the video buffers.
     *
     * This method should be called before startRecording() in order to be
     * effective.
     *
     * If meta data is stored in the video buffers, it is up to the receiver of
     * the video buffers to interpret the contents and to find the actual frame
     * data with the help of the meta data in the buffer. How this is done is
     * outside of the scope of this method.
     *
     * Some camera HALs may not support storing meta data in the video buffers,
     * but all camera HALs should support storing real YUV data in the video
     * buffers. If the camera HAL does not support storing the meta data in the
     * video buffers when it is requested to do do, INVALID_OPERATION must be
     * returned. It is very useful for the camera HAL to pass meta data rather
     * than the actual frame data directly to the video encoder, since the
     * amount of the uncompressed frame data can be very large if video size is
     * large.
     *
     * @param enable if true to instruct the camera HAL to store
     *        meta data in the video buffers; false to instruct
     *        the camera HAL to store real YUV data in the video
     *        buffers.
     *
     * @return OK on success.
     */
    int (*${name})(struct camera_device *, int enable)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6654092 "start_recording"
	public explicit_type "/** * Start record mode. When a record image is available, a * CAMERA_MSG_VIDEO_FRAME message is sent with the corresponding * frame. Every record frame must be released by a camera HAL client via * releaseRecordingFrame() before the client calls * disableMsgType(CAMERA_MSG_VIDEO_FRAME). After the client calls * disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's * responsibility to manage the life-cycle of the video recording frames, * and the client must not modify/access any video recording frames. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Start record mode. When a record image is available, a
     * CAMERA_MSG_VIDEO_FRAME message is sent with the corresponding
     * frame. Every record frame must be released by a camera HAL client via
     * releaseRecordingFrame() before the client calls
     * disableMsgType(CAMERA_MSG_VIDEO_FRAME). After the client calls
     * disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's
     * responsibility to manage the life-cycle of the video recording frames,
     * and the client must not modify/access any video recording frames.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6654220 "stop_recording"
	public explicit_type "/** * Stop a previously started recording. */ void (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Stop a previously started recording.
     */
    void (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6654348 "recording_enabled"
	public explicit_type "/** * Returns true if recording is enabled. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Returns true if recording is enabled.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6654476 "release_recording_frame"
	public explicit_type "/** * Release a record frame previously returned by CAMERA_MSG_VIDEO_FRAME. * * It is camera HAL client's responsibility to release video recording * frames sent out by the camera HAL before the camera HAL receives a call * to disableMsgType(CAMERA_MSG_VIDEO_FRAME). After it receives the call to * disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's * responsibility to manage the life-cycle of the video recording frames. */ void (*)(struct camera_device *, const void *opaque)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Release a record frame previously returned by CAMERA_MSG_VIDEO_FRAME.
     *
     * It is camera HAL client's responsibility to release video recording
     * frames sent out by the camera HAL before the camera HAL receives a call
     * to disableMsgType(CAMERA_MSG_VIDEO_FRAME). After it receives the call to
     * disableMsgType(CAMERA_MSG_VIDEO_FRAME), it is the camera HAL's
     * responsibility to manage the life-cycle of the video recording frames.
     */
    void (*${name})(struct camera_device *,
                    const void *opaque)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6654604 "auto_focus"
	public explicit_type "/** * Start auto focus, the notification callback routine is called with * CAMERA_MSG_FOCUS once when focusing is complete. autoFocus() will be * called again if another auto focus is needed. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Start auto focus, the notification callback routine is called with
     * CAMERA_MSG_FOCUS once when focusing is complete. autoFocus() will be
     * called again if another auto focus is needed.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6654732 "cancel_auto_focus"
	public explicit_type "/** * Cancels auto-focus function. If the auto-focus is still in progress, * this function will cancel it. Whether the auto-focus is in progress or * not, this function will return the focus position to the default. If * the camera does not support auto-focus, this is a no-op. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Cancels auto-focus function. If the auto-focus is still in progress,
     * this function will cancel it. Whether the auto-focus is in progress or
     * not, this function will return the focus position to the default.  If
     * the camera does not support auto-focus, this is a no-op.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6654860 "take_picture"
	public explicit_type "/** * Take a picture. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Take a picture.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6654988 "cancel_picture"
	public explicit_type "/** * Cancel a picture that was started with takePicture. Calling this method * when no picture is being taken is a no-op. */ int (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Cancel a picture that was started with takePicture. Calling this method
     * when no picture is being taken is a no-op.
     */
    int (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6655116 "set_parameters"
	public explicit_type "/** * Set the camera parameters. This returns BAD_VALUE if any parameter is * invalid or not supported. */ int (*)(struct camera_device *, const char *parms)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Set the camera parameters. This returns BAD_VALUE if any parameter is
     * invalid or not supported.
     */
    int (*${name})(struct camera_device *, const char *parms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6655244 "get_parameters"
	public explicit_type "/** Retrieve the camera parameters. The buffer returned by the camera HAL must be returned back to it with put_parameters, if put_parameters is not NULL. */ char *(*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Retrieve the camera parameters.  The buffer returned by the camera HAL
        must be returned back to it with put_parameters, if put_parameters
        is not NULL.
     */
    char *(*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6655372 "put_parameters"
	public explicit_type "/** The camera HAL uses its own memory to pass us the parameters when we call get_parameters. Use this function to return the memory back to the camera HAL, if put_parameters is not NULL. If put_parameters is NULL, then you have to use free() to release the memory. */ void (*)(struct camera_device *, char *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** The camera HAL uses its own memory to pass us the parameters when we
        call get_parameters.  Use this function to return the memory back to
        the camera HAL, if put_parameters is not NULL.  If put_parameters
        is NULL, then you have to use free() to release the memory.
    */
    void (*${name})(struct camera_device *, char *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6655500 "send_command"
	public explicit_type "/** * Send command to camera driver. */ int (*)(struct camera_device *, int32_t cmd, int32_t arg1, int32_t arg2)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Send command to camera driver.
     */
    int (*${name})(struct camera_device *,
                int32_t cmd, int32_t arg1, int32_t arg2)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6655628 "release"
	public explicit_type "/** * Release the hardware resources owned by this object. Note that this is * *not* done in the destructor. */ void (*)(struct camera_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Release the hardware resources owned by this object.  Note that this is
     * *not* done in the destructor.
     */
    void (*${name})(struct camera_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6655756 "dump"
	public explicit_type "/** * Dump state of the camera hardware */ int (*)(struct camera_device *, int fd)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Dump state of the camera hardware
     */
    int (*${name})(struct camera_device *, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1727116 "camera_device_ops_t"
      visibility package stereotype "typedef" base_type class_ref 1726988 // camera_device_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1727244 "camera_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3550220 // common (<directional composition>)
	relation 3550092 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3550220 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      classrelation 3550348 // ops (<unidirectional association>)
	relation 3550220 --->
	  a role_name "ops" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3550348 // ops (<unidirectional association>)
	  b parent class_ref 1727116 // camera_device_ops_t
      end

      attribute 6655884 "priv"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1727372 "camera_device_t"
      visibility package stereotype "typedef" base_type class_ref 1727244 // camera_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1727500 "camera2_stream_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*********************************************************************
 *
 * Input/output stream buffer queue interface definitions
 *
 
*
 * Output image stream queue interface. A set of these methods is provided to
 * the HAL device in allocate_stream(), and are used to interact with the
 * gralloc buffer queue for that stream. They may not be called until after
 * allocate_stream returns."
      attribute 6656012 "dequeue_buffer"
	public explicit_type "/** * Get a buffer to fill from the queue. The size and format of the buffer * are fixed for a given stream (defined in allocate_stream), and the stride * should be queried from the platform gralloc module. The gralloc buffer * will have been allocated based on the usage flags provided by * allocate_stream, and will be locked for use. */ int (*)(const struct camera2_stream_ops* w, buffer_handle_t** buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Get a buffer to fill from the queue. The size and format of the buffer
     * are fixed for a given stream (defined in allocate_stream), and the stride
     * should be queried from the platform gralloc module. The gralloc buffer
     * will have been allocated based on the usage flags provided by
     * allocate_stream, and will be locked for use.
     */
    int (*${name})(const struct camera2_stream_ops* w,
            buffer_handle_t** buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6656140 "enqueue_buffer"
	public explicit_type "/** * Push a filled buffer to the stream to be used by the consumer. * * The timestamp represents the time at start of exposure of the first row * of the image; it must be from a monotonic clock, and is measured in * nanoseconds. The timestamps do not need to be comparable between * different cameras, or consecutive instances of the same camera. However, * they must be comparable between streams from the same camera. If one * capture produces buffers for multiple streams, each stream must have the * same timestamp for that buffer, and that timestamp must match the * timestamp in the output frame metadata. */ int (*)(const struct camera2_stream_ops* w, int64_t timestamp, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Push a filled buffer to the stream to be used by the consumer.
     *
     * The timestamp represents the time at start of exposure of the first row
     * of the image; it must be from a monotonic clock, and is measured in
     * nanoseconds. The timestamps do not need to be comparable between
     * different cameras, or consecutive instances of the same camera. However,
     * they must be comparable between streams from the same camera. If one
     * capture produces buffers for multiple streams, each stream must have the
     * same timestamp for that buffer, and that timestamp must match the
     * timestamp in the output frame metadata.
     */
    int (*${name})(const struct camera2_stream_ops* w,
            int64_t timestamp,
            buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6656268 "cancel_buffer"
	public explicit_type "/** * Return a buffer to the queue without marking it as filled. */ int (*)(const struct camera2_stream_ops* w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Return a buffer to the queue without marking it as filled.
     */
    int (*${name})(const struct camera2_stream_ops* w,
            buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6656396 "set_crop"
	public explicit_type "/** * Set the crop window for subsequently enqueued buffers. The parameters are * measured in pixels relative to the buffer width and height. */ int (*)(const struct camera2_stream_ops *w, int left, int top, int right, int bottom)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Set the crop window for subsequently enqueued buffers. The parameters are
     * measured in pixels relative to the buffer width and height.
     */
    int (*${name})(const struct camera2_stream_ops *w,
            int left, int top, int right, int bottom)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1727628 "camera2_stream_ops_t"
      visibility package stereotype "typedef" base_type class_ref 1727500 // camera2_stream_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1727756 "anonymous1"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Temporary definition during transition.
 *
 * These formats will be removed and replaced with
 * HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED.  To maximize forward compatibility,
 * HAL implementations are strongly recommended to treat FORMAT_OPAQUE and
 * FORMAT_ZSL as equivalent to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, and
 * return HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED in the format_actual output
 * parameter of allocate_stream, allowing the gralloc module to select the
 * specific format based on the usage flags from the camera and the stream
 * consumer."
      attribute 6656524 "CAMERA2_HAL_PIXEL_FORMAT_OPAQUE"
	public type class_ref 1727756 // anonymous1
	init_value " HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6656652 "CAMERA2_HAL_PIXEL_FORMAT_ZSL"
	public type class_ref 1727756 // anonymous1
	init_value " -1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1727884 "camera2_jpeg_blob"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Transport header for compressed JPEG buffers in output streams.
 *
 * To capture JPEG images, a stream is created using the pixel format
 * HAL_PIXEL_FORMAT_BLOB, and the static metadata field android.jpeg.maxSize is
 * used as the buffer size. Since compressed JPEG images are of variable size,
 * the HAL needs to include the final size of the compressed image using this
 * structure inside the output stream buffer. The JPEG blob ID field must be set
 * to CAMERA2_JPEG_BLOB_ID.
 *
 * Transport header should be at the end of the JPEG output stream buffer.  That
 * means the jpeg_blob_id must start at byte[android.jpeg.maxSize -
 * sizeof(camera2_jpeg_blob)].  Any HAL using this transport header must
 * account for it in android.jpeg.maxSize.  The JPEG data itself starts at
 * byte[0] and should be jpeg_size bytes long."
      attribute 6656780 "jpeg_blob_id"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6656908 "jpeg_size"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1728012 "anonymous2"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6657036 "CAMERA2_JPEG_BLOB_ID"
	public type class_ref 1728012 // anonymous2
	init_value " 0x00FF
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1728140 "camera2_stream_in_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Input reprocess stream queue management. A set of these methods is provided
 * to the HAL device in allocate_reprocess_stream(); they are used to interact
 * with the reprocess stream's input gralloc buffer queue."
      attribute 6657164 "acquire_buffer"
	public explicit_type "/** * Get the next buffer of image data to reprocess. The width, height, and * format of the buffer is fixed in allocate_reprocess_stream(), and the * stride and other details should be queried from the platform gralloc * module as needed. The buffer will already be locked for use. */ int (*)(const struct camera2_stream_in_ops *w, buffer_handle_t** buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Get the next buffer of image data to reprocess. The width, height, and
     * format of the buffer is fixed in allocate_reprocess_stream(), and the
     * stride and other details should be queried from the platform gralloc
     * module as needed. The buffer will already be locked for use.
     */
    int (*${name})(const struct camera2_stream_in_ops *w,
            buffer_handle_t** buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6657292 "release_buffer"
	public explicit_type "/** * Return a used buffer to the buffer queue for reuse. */ int (*)(const struct camera2_stream_in_ops *w, buffer_handle_t* buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Return a used buffer to the buffer queue for reuse.
     */
    int (*${name})(const struct camera2_stream_in_ops *w,
            buffer_handle_t* buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1728268 "camera2_stream_in_ops_t"
      visibility package stereotype "typedef" base_type class_ref 1728140 // camera2_stream_in_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1728396 "anonymous3"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*********************************************************************
 *
 * Metadata queue management, used for requests sent to HAL module, and for
 * frames produced by the HAL.
 *"
      attribute 6657420 "CAMERA2_REQUEST_QUEUE_IS_BOTTOMLESS"
	public type class_ref 1728396 // anonymous3
	init_value " -1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1728524 "camera2_request_queue_src_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Request input queue protocol:
 *
 * The framework holds the queue and its contents. At start, the queue is empty.
 *
 * 1. When the first metadata buffer is placed into the queue, the framework
 *    signals the device by calling notify_request_queue_not_empty().
 *
 * 2. After receiving notify_request_queue_not_empty, the device must call
 *    dequeue() once it's ready to handle the next buffer.
 *
 * 3. Once the device has processed a buffer, and is ready for the next buffer,
 *    it must call dequeue() again instead of waiting for a notification. If
 *    there are no more buffers available, dequeue() will return NULL. After
 *    this point, when a buffer becomes available, the framework must call
 *    notify_request_queue_not_empty() again. If the device receives a NULL
 *    return from dequeue, it does not need to query the queue again until a
 *    notify_request_queue_not_empty() call is received from the source.
 *
 * 4. If the device calls buffer_count() and receives 0, this does not mean that
 *    the framework will provide a notify_request_queue_not_empty() call. The
 *    framework will only provide such a notification after the device has
 *    received a NULL from dequeue, or on initial startup.
 *
 * 5. The dequeue() call in response to notify_request_queue_not_empty() may be
 *    on the same thread as the notify_request_queue_not_empty() call, and may
 *    be performed from within the notify call.
 *
 * 6. All dequeued request buffers must be returned to the framework by calling
 *    free_request, including when errors occur, a device flush is requested, or
 *    when the device is shutting down."
      attribute 6657548 "request_count"
	public explicit_type "/** * Get the count of request buffers pending in the queue. May return * CAMERA2_REQUEST_QUEUE_IS_BOTTOMLESS if a repeating request (stream * request) is currently configured. Calling this method has no effect on * whether the notify_request_queue_not_empty() method will be called by the * framework. */ int (*)(const struct camera2_request_queue_src_ops *q)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Get the count of request buffers pending in the queue. May return
     * CAMERA2_REQUEST_QUEUE_IS_BOTTOMLESS if a repeating request (stream
     * request) is currently configured. Calling this method has no effect on
     * whether the notify_request_queue_not_empty() method will be called by the
     * framework.
     */
    int (*${name})(const struct camera2_request_queue_src_ops *q)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6657676 "dequeue_request"
	public explicit_type "/** * Get a metadata buffer from the framework. Returns OK if there is no * error. If the queue is empty, returns NULL in buffer. In that case, the * device must wait for a notify_request_queue_not_empty() message before * attempting to dequeue again. Buffers obtained in this way must be * returned to the framework with free_request(). */ int (*)(const struct camera2_request_queue_src_ops *q, camera_metadata_t **buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Get a metadata buffer from the framework. Returns OK if there is no
     * error. If the queue is empty, returns NULL in buffer. In that case, the
     * device must wait for a notify_request_queue_not_empty() message before
     * attempting to dequeue again. Buffers obtained in this way must be
     * returned to the framework with free_request().
     */
    int (*${name})(const struct camera2_request_queue_src_ops *q,
            camera_metadata_t **buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6657804 "free_request"
	public explicit_type "/** * Return a metadata buffer to the framework once it has been used, or if * an error or shutdown occurs. */ int (*)(const struct camera2_request_queue_src_ops *q, camera_metadata_t *old_buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Return a metadata buffer to the framework once it has been used, or if
     * an error or shutdown occurs.
     */
    int (*${name})(const struct camera2_request_queue_src_ops *q,
            camera_metadata_t *old_buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1728652 "camera2_request_queue_src_ops_t"
      visibility package stereotype "typedef" base_type class_ref 1728524 // camera2_request_queue_src_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1728780 "camera2_frame_queue_dst_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Frame output queue protocol:
 *
 * The framework holds the queue and its contents. At start, the queue is empty.
 *
 * 1. When the device is ready to fill an output metadata frame, it must dequeue
 *    a metadata buffer of the required size.
 *
 * 2. It should then fill the metadata buffer, and place it on the frame queue
 *    using enqueue_frame. The framework takes ownership of the frame.
 *
 * 3. In case of an error, a request to flush the pipeline, or shutdown, the
 *    device must return any affected dequeued frames to the framework by
 *    calling cancel_frame."
      attribute 6657932 "dequeue_frame"
	public explicit_type "/** * Get an empty metadata buffer to fill from the framework. The new metadata * buffer will have room for entries number of metadata entries, plus * data_bytes worth of extra storage. Frames dequeued here must be returned * to the framework with either cancel_frame or enqueue_frame. */ int (*)(const struct camera2_frame_queue_dst_ops *q, size_t entries, size_t data_bytes, camera_metadata_t **buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Get an empty metadata buffer to fill from the framework. The new metadata
     * buffer will have room for entries number of metadata entries, plus
     * data_bytes worth of extra storage. Frames dequeued here must be returned
     * to the framework with either cancel_frame or enqueue_frame.
     */
    int (*${name})(const struct camera2_frame_queue_dst_ops *q,
            size_t entries, size_t data_bytes,
            camera_metadata_t **buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6658060 "cancel_frame"
	public explicit_type "/** * Return a dequeued metadata buffer to the framework for reuse; do not mark it as * filled. Use when encountering errors, or flushing the internal request queue. */ int (*)(const struct camera2_frame_queue_dst_ops *q, camera_metadata_t *buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Return a dequeued metadata buffer to the framework for reuse; do not mark it as
     * filled. Use when encountering errors, or flushing the internal request queue.
     */
    int (*${name})(const struct camera2_frame_queue_dst_ops *q,
            camera_metadata_t *buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6658188 "enqueue_frame"
	public explicit_type "/** * Place a completed metadata frame on the frame output queue. */ int (*)(const struct camera2_frame_queue_dst_ops *q, camera_metadata_t *buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Place a completed metadata frame on the frame output queue.
     */
    int (*${name})(const struct camera2_frame_queue_dst_ops *q,
            camera_metadata_t *buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1728908 "camera2_frame_queue_dst_ops_t"
      visibility package stereotype "typedef" base_type class_ref 1728780 // camera2_frame_queue_dst_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1729036 "camera2_notify_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(int32_t msg_type,
        int32_t ext1,
        int32_t ext2,
        int32_t ext3,
        void *user);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*********************************************************************
 *
 * Notification callback and message definition, and trigger definitions
 *
 
*
 * Asynchronous notification callback from the HAL, fired for various
 * reasons. Only for information independent of frame capture, or that require
 * specific timing. The user pointer must be the same one that was passed to the
 * device in set_notify_callback()."
    end

    class 1729164 "anonymous4"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Possible message types for camera2_notify_callback"
      attribute 6658316 "CAMERA2_MSG_ERROR"
	public type class_ref 1729164 // anonymous4
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6658444 "CAMERA2_MSG_SHUTTER"
	public type class_ref 1729164 // anonymous4
	init_value " 0x0010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6658572 "CAMERA2_MSG_AUTOFOCUS"
	public type class_ref 1729164 // anonymous4
	init_value " 0x0020"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6658700 "CAMERA2_MSG_AUTOEXPOSURE"
	public type class_ref 1729164 // anonymous4
	init_value " 0x0021"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6658828 "CAMERA2_MSG_AUTOWB"
	public type class_ref 1729164 // anonymous4
	init_value " 0x0022
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1729292 "anonymous5"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
     * An error has occurred. Argument ext1 contains the error code, and
     * ext2 and ext3 contain any error-specific information.
     
*
     * The exposure of a given request has begun. Argument ext1 contains the
     * frame number, and ext2 and ext3 contain the low-order and high-order
     * bytes of the timestamp for when exposure began.
     * (timestamp = (ext3 << 32 | ext2))
     
*
     * The autofocus routine has changed state. Argument ext1 contains the new
     * state; the values are the same as those for the metadata field
     * android.control.afState. Ext2 contains the latest trigger ID passed to
     * trigger_action(CAMERA2_TRIGGER_AUTOFOCUS) or
     * trigger_action(CAMERA2_TRIGGER_CANCEL_AUTOFOCUS), or 0 if trigger has not
     * been called with either of those actions.
     
*
     * The autoexposure routine has changed state. Argument ext1 contains the
     * new state; the values are the same as those for the metadata field
     * android.control.aeState. Ext2 contains the latest trigger ID value passed to
     * trigger_action(CAMERA2_TRIGGER_PRECAPTURE_METERING), or 0 if that method
     * has not been called.
     
*
     * The auto-whitebalance routine has changed state. Argument ext1 contains
     * the new state; the values are the same as those for the metadata field
     * android.control.awbState. Ext2 contains the latest trigger ID passed to
     * trigger_action(CAMERA2_TRIGGER_PRECAPTURE_METERING), or 0 if that method
     * has not been called.
     
*
 * Error codes for CAMERA_MSG_ERROR"
      attribute 6658956 "CAMERA2_MSG_ERROR_HARDWARE"
	public type class_ref 1729292 // anonymous5
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6659084 "CAMERA2_MSG_ERROR_DEVICE"
	public type class_ref 1729292 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6659212 "CAMERA2_MSG_ERROR_REQUEST"
	public type class_ref 1729292 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6659340 "CAMERA2_MSG_ERROR_FRAME"
	public type class_ref 1729292 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6659468 "CAMERA2_MSG_ERROR_STREAM"
	public type class_ref 1729292 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6659596 "CAMERA2_MSG_NUM_ERRORS"
	public type class_ref 1729292 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1729420 "anonymous6"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
     * A serious failure occured. Camera device may not work without reboot, and
     * no further frames or buffer streams will be produced by the
     * device. Device should be treated as closed.
     
*
     * A serious failure occured. No further frames or buffer streams will be
     * produced by the device. Device should be treated as closed. The client
     * must reopen the device to use it again.
     
*
     * An error has occurred in processing a request. No output (metadata or
     * buffers) will be produced for this request. ext2 contains the frame
     * number of the request. Subsequent requests are unaffected, and the device
     * remains operational.
     
*
     * An error has occurred in producing an output frame metadata buffer for a
     * request, but image buffers for it will still be available. Subsequent
     * requests are unaffected, and the device remains operational. ext2
     * contains the frame number of the request.
     
*
     * An error has occurred in placing an output buffer into a stream for a
     * request. The frame metadata and other buffers may still be
     * available. Subsequent requests are unaffected, and the device remains
     * operational. ext2 contains the frame number of the request, and ext3
     * contains the stream id.
     
*
     * Number of error types
     
*
 * Possible trigger ids for trigger_action()"
      attribute 6659724 "CAMERA2_TRIGGER_AUTOFOCUS"
	public type class_ref 1729420 // anonymous6
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6659852 "CAMERA2_TRIGGER_CANCEL_AUTOFOCUS"
	public type class_ref 1729420 // anonymous6
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6659980 "CAMERA2_TRIGGER_PRECAPTURE_METERING"
	public type class_ref 1729420 // anonymous6
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1729548 "anonymous7"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
     * Trigger an autofocus cycle. The effect of the trigger depends on the
     * autofocus mode in effect when the trigger is received, which is the mode
     * listed in the latest capture request to be dequeued by the HAL. If the
     * mode is OFF, EDOF, or FIXED, the trigger has no effect. In AUTO, MACRO,
     * or CONTINUOUS_* modes, see below for the expected behavior. The state of
     * the autofocus cycle can be tracked in android.control.afMode and the
     * corresponding notifications.
     *
     **
     * In AUTO or MACRO mode, the AF state transitions (and notifications)
     * when calling with trigger ID = N with the previous ID being K are:
     *
     * Initial state       Transitions
     * INACTIVE (K)         -> ACTIVE_SCAN (N) -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * AF_FOCUSED (K)       -> ACTIVE_SCAN (N) -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * AF_NOT_FOCUSED (K)   -> ACTIVE_SCAN (N) -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * ACTIVE_SCAN (K)      -> AF_FOCUSED(N) or AF_NOT_FOCUSED(N)
     * PASSIVE_SCAN (K)      Not used in AUTO/MACRO mode
     * PASSIVE_FOCUSED (K)   Not used in AUTO/MACRO mode
     *
     **
     * In CONTINUOUS_PICTURE mode, triggering AF must lock the AF to the current
     * lens position and transition the AF state to either AF_FOCUSED or
     * NOT_FOCUSED. If a passive scan is underway, that scan must complete and
     * then lock the lens position and change AF state. TRIGGER_CANCEL_AUTOFOCUS
     * will allow the AF to restart its operation.
     *
     * Initial state      Transitions
     * INACTIVE (K)        -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * PASSIVE_FOCUSED (K) -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * PASSIVE_SCAN (K)    -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * AF_FOCUSED (K)      no effect except to change next notification ID to N
     * AF_NOT_FOCUSED (K)  no effect except to change next notification ID to N
     *
     **
     * In CONTINUOUS_VIDEO mode, triggering AF must lock the AF to the current
     * lens position and transition the AF state to either AF_FOCUSED or
     * NOT_FOCUSED. If a passive scan is underway, it must immediately halt, in
     * contrast with CONTINUOUS_PICTURE mode. TRIGGER_CANCEL_AUTOFOCUS will
     * allow the AF to restart its operation.
     *
     * Initial state      Transitions
     * INACTIVE (K)        -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * PASSIVE_FOCUSED (K) -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * PASSIVE_SCAN (K)    -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * AF_FOCUSED (K)      no effect except to change next notification ID to N
     * AF_NOT_FOCUSED (K)  no effect except to change next notification ID to N
     *
     * Ext1 is an ID that must be returned in subsequent auto-focus state change
     * notifications through camera2_notify_callback() and stored in
     * android.control.afTriggerId.
     
*
     * Send a cancel message to the autofocus algorithm. The effect of the
     * cancellation depends on the autofocus mode in effect when the trigger is
     * received, which is the mode listed in the latest capture request to be
     * dequeued by the HAL. If the AF mode is OFF or EDOF, the cancel has no
     * effect.  For other modes, the lens should return to its default position,
     * any current autofocus scan must be canceled, and the AF state should be
     * set to INACTIVE.
     *
     * The state of the autofocus cycle can be tracked in android.control.afMode
     * and the corresponding notification. Continuous autofocus modes may resume
     * focusing operations thereafter exactly as if the camera had just been set
     * to a continuous AF mode.
     *
     * Ext1 is an ID that must be returned in subsequent auto-focus state change
     * notifications through camera2_notify_callback() and stored in
     * android.control.afTriggerId.
     
*
     * Trigger a pre-capture metering cycle, which may include firing the flash
     * to determine proper capture parameters. Typically, this trigger would be
     * fired for a half-depress of a camera shutter key, or before a snapshot
     * capture in general. The state of the metering cycle can be tracked in
     * android.control.aeMode and the corresponding notification.  If the
     * auto-exposure mode is OFF, the trigger does nothing.
     *
     * Ext1 is an ID that must be returned in subsequent
     * auto-exposure/auto-white balance state change notifications through
     * camera2_notify_callback() and stored in android.control.aePrecaptureId.
     
*
 * Possible template types for construct_default_request()"
      attribute 6660108 "CAMERA2_TEMPLATE_PREVIEW"
	public type class_ref 1729548 // anonymous7
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6660236 "CAMERA2_TEMPLATE_STILL_CAPTURE"
	public type class_ref 1729548 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6660364 "CAMERA2_TEMPLATE_VIDEO_RECORD"
	public type class_ref 1729548 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6660492 "CAMERA2_TEMPLATE_VIDEO_SNAPSHOT"
	public type class_ref 1729548 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6660620 "CAMERA2_TEMPLATE_ZERO_SHUTTER_LAG"
	public type class_ref 1729548 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6660748 "CAMERA2_TEMPLATE_COUNT"
	public type class_ref 1729548 // anonymous7
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1729676 "camera2_device_ops"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
     * Standard camera preview operation with 3A on auto.
     
*
     * Standard camera high-quality still capture with 3A and flash on auto.
     
*
     * Standard video recording plus preview with 3A on auto, torch off.
     
*
     * High-quality still capture while recording video. Application will
     * include preview, video record, and full-resolution YUV or JPEG streams in
     * request. Must not cause stuttering on video stream. 3A on auto.
     
*
     * Zero-shutter-lag mode. Application will request preview and
     * full-resolution data for each frame, and reprocess it to JPEG when a
     * still image is requested by user. Settings should provide highest-quality
     * full-resolution images without compromising preview frame rate. 3A on
     * auto.
     
 Total number of templates 
*********************************************************************
 *
 * Camera device operations
 *"
      attribute 6660876 "set_request_queue_src_ops"
	public explicit_type "/********************************************************************** * Request and frame queue setup and management methods */ /** * Pass in input request queue interface methods. */ int (*)(const struct camera2_device *, const camera2_request_queue_src_ops_t *request_src_ops)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}

    /**********************************************************************
     * Request and frame queue setup and management methods
     */

    /**
     * Pass in input request queue interface methods.
     */
    int (*${name})(const struct camera2_device *,
            const camera2_request_queue_src_ops_t *request_src_ops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6661004 "notify_request_queue_not_empty"
	public explicit_type "/** * Notify device that the request queue is no longer empty. Must only be * called when the first buffer is added a new queue, or after the source * has returned NULL in response to a dequeue call. */ int (*)(const struct camera2_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Notify device that the request queue is no longer empty. Must only be
     * called when the first buffer is added a new queue, or after the source
     * has returned NULL in response to a dequeue call.
     */
    int (*${name})(const struct camera2_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6661132 "set_frame_queue_dst_ops"
	public explicit_type "/** * Pass in output frame queue interface methods */ int (*)(const struct camera2_device *, const camera2_frame_queue_dst_ops_t *frame_dst_ops)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Pass in output frame queue interface methods
     */
    int (*${name})(const struct camera2_device *,
            const camera2_frame_queue_dst_ops_t *frame_dst_ops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6661260 "get_in_progress_count"
	public explicit_type "/** * Number of camera requests being processed by the device at the moment * (captures/reprocesses that have had their request dequeued, but have not * yet been enqueued onto output pipeline(s) ). No streams may be released * by the framework until the in-progress count is 0. */ int (*)(const struct camera2_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Number of camera requests being processed by the device at the moment
     * (captures/reprocesses that have had their request dequeued, but have not
     * yet been enqueued onto output pipeline(s) ). No streams may be released
     * by the framework until the in-progress count is 0.
     */
    int (*${name})(const struct camera2_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6661388 "flush_captures_in_progress"
	public explicit_type "/** * Flush all in-progress captures. This includes all dequeued requests * (regular or reprocessing) that have not yet placed any outputs into a * stream or the frame queue. Partially completed captures must be completed * normally. No new requests may be dequeued from the request queue until * the flush completes. */ int (*)(const struct camera2_device *)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Flush all in-progress captures. This includes all dequeued requests
     * (regular or reprocessing) that have not yet placed any outputs into a
     * stream or the frame queue. Partially completed captures must be completed
     * normally. No new requests may be dequeued from the request queue until
     * the flush completes.
     */
    int (*${name})(const struct camera2_device *)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6661516 "construct_default_request"
	public explicit_type "/** * Create a filled-in default request for standard camera use cases. * * The device must return a complete request that is configured to meet the * requested use case, which must be one of the CAMERA2_TEMPLATE_* * enums. All request control fields must be included, except for * android.request.outputStreams. * * The metadata buffer returned must be allocated with * allocate_camera_metadata. The framework takes ownership of the buffer. */ int (*)(const struct camera2_device *, int request_template, camera_metadata_t **request)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Create a filled-in default request for standard camera use cases.
     *
     * The device must return a complete request that is configured to meet the
     * requested use case, which must be one of the CAMERA2_TEMPLATE_*
     * enums. All request control fields must be included, except for
     * android.request.outputStreams.
     *
     * The metadata buffer returned must be allocated with
     * allocate_camera_metadata. The framework takes ownership of the buffer.
     */
    int (*${name})(const struct camera2_device *,
            int request_template,
            camera_metadata_t **request)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6661644 "allocate_stream"
	public explicit_type "/********************************************************************** * Stream management */ /** * allocate_stream: * * Allocate a new output stream for use, defined by the output buffer width, * height, target, and possibly the pixel format. Returns the new stream's * ID, gralloc usage flags, minimum queue buffer count, and possibly the * pixel format, on success. Error conditions: * * - Requesting a width/height/format combination not listed as * supported by the sensor's static characteristics * * - Asking for too many streams of a given format type (2 bayer raw * streams, for example). * * Input parameters: * * - width, height, format: Specification for the buffers to be sent through * this stream. Format is a value from the HAL_PIXEL_FORMAT_* list. If * HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED is used, then the platform * gralloc module will select a format based on the usage flags provided * by the camera HAL and the consumer of the stream. The camera HAL should * inspect the buffers handed to it in the register_stream_buffers call to * obtain the implementation-specific format if necessary. * * - stream_ops: A structure of function pointers for obtaining and queuing * up buffers for this stream. The underlying stream will be configured * based on the usage and max_buffers outputs. The methods in this * structure may not be called until after allocate_stream returns. * * Output parameters: * * - stream_id: An unsigned integer identifying this stream. This value is * used in incoming requests to identify the stream, and in releasing the * stream. * * - usage: The gralloc usage mask needed by the HAL device for producing * the requested type of data. This is used in allocating new gralloc * buffers for the stream buffer queue. * * - max_buffers: The maximum number of buffers the HAL device may need to * have dequeued at the same time. The device may not dequeue more buffers * than this value at the same time. * */ int (*)( const struct camera2_device *, // inputs uint32_t width, uint32_t height, int format, const camera2_stream_ops_t *stream_ops, // outputs uint32_t *stream_id, uint32_t *format_actual, // IGNORED, will be removed uint32_t *usage, uint32_t *max_buffers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**********************************************************************
     * Stream management
     */

    /**
     * allocate_stream:
     *
     * Allocate a new output stream for use, defined by the output buffer width,
     * height, target, and possibly the pixel format.  Returns the new stream's
     * ID, gralloc usage flags, minimum queue buffer count, and possibly the
     * pixel format, on success. Error conditions:
     *
     *  - Requesting a width/height/format combination not listed as
     *    supported by the sensor's static characteristics
     *
     *  - Asking for too many streams of a given format type (2 bayer raw
     *    streams, for example).
     *
     * Input parameters:
     *
     * - width, height, format: Specification for the buffers to be sent through
     *   this stream. Format is a value from the HAL_PIXEL_FORMAT_* list. If
     *   HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED is used, then the platform
     *   gralloc module will select a format based on the usage flags provided
     *   by the camera HAL and the consumer of the stream. The camera HAL should
     *   inspect the buffers handed to it in the register_stream_buffers call to
     *   obtain the implementation-specific format if necessary.
     *
     * - stream_ops: A structure of function pointers for obtaining and queuing
     *   up buffers for this stream. The underlying stream will be configured
     *   based on the usage and max_buffers outputs. The methods in this
     *   structure may not be called until after allocate_stream returns.
     *
     * Output parameters:
     *
     * - stream_id: An unsigned integer identifying this stream. This value is
     *   used in incoming requests to identify the stream, and in releasing the
     *   stream.
     *
     * - usage: The gralloc usage mask needed by the HAL device for producing
     *   the requested type of data. This is used in allocating new gralloc
     *   buffers for the stream buffer queue.
     *
     * - max_buffers: The maximum number of buffers the HAL device may need to
     *   have dequeued at the same time. The device may not dequeue more buffers
     *   than this value at the same time.
     *
     */
    int (*${name})(
            const struct camera2_device *,
            // inputs
            uint32_t width,
            uint32_t height,
            int      format,
            const camera2_stream_ops_t *stream_ops,
            // outputs
            uint32_t *stream_id,
            uint32_t *format_actual, // IGNORED, will be removed
            uint32_t *usage,
            uint32_t *max_buffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6661772 "register_stream_buffers"
	public explicit_type "/** * Register buffers for a given stream. This is called after a successful * allocate_stream call, and before the first request referencing the stream * is enqueued. This method is intended to allow the HAL device to map or * otherwise prepare the buffers for later use. num_buffers is guaranteed to * be at least max_buffers (from allocate_stream), but may be larger. The * buffers will already be locked for use. At the end of the call, all the * buffers must be ready to be returned to the queue. If the stream format * was set to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, the camera HAL should * inspect the passed-in buffers here to determine any platform-private * pixel format information. */ int (*)( const struct camera2_device *, uint32_t stream_id, int num_buffers, buffer_handle_t *buffers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Register buffers for a given stream. This is called after a successful
     * allocate_stream call, and before the first request referencing the stream
     * is enqueued. This method is intended to allow the HAL device to map or
     * otherwise prepare the buffers for later use. num_buffers is guaranteed to
     * be at least max_buffers (from allocate_stream), but may be larger. The
     * buffers will already be locked for use. At the end of the call, all the
     * buffers must be ready to be returned to the queue. If the stream format
     * was set to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, the camera HAL should
     * inspect the passed-in buffers here to determine any platform-private
     * pixel format information.
     */
    int (*${name})(
            const struct camera2_device *,
            uint32_t stream_id,
            int num_buffers,
            buffer_handle_t *buffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6661900 "release_stream"
	public explicit_type "/** * Release a stream. Returns an error if called when get_in_progress_count * is non-zero, or if the stream id is invalid. */ int (*)( const struct camera2_device *, uint32_t stream_id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Release a stream. Returns an error if called when get_in_progress_count
     * is non-zero, or if the stream id is invalid.
     */
    int (*${name})(
            const struct camera2_device *,
            uint32_t stream_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6662028 "allocate_reprocess_stream"
	public explicit_type "/** * allocate_reprocess_stream: * * Allocate a new input stream for use, defined by the output buffer width, * height, and the pixel format. Returns the new stream's ID, gralloc usage * flags, and required simultaneously acquirable buffer count, on * success. Error conditions: * * - Requesting a width/height/format combination not listed as * supported by the sensor's static characteristics * * - Asking for too many reprocessing streams to be configured at once. * * Input parameters: * * - width, height, format: Specification for the buffers to be sent through * this stream. Format must be a value from the HAL_PIXEL_FORMAT_* list. * * - reprocess_stream_ops: A structure of function pointers for acquiring * and releasing buffers for this stream. The underlying stream will be * configured based on the usage and max_buffers outputs. * * Output parameters: * * - stream_id: An unsigned integer identifying this stream. This value is * used in incoming requests to identify the stream, and in releasing the * stream. These ids are numbered separately from the input stream ids. * * - consumer_usage: The gralloc usage mask needed by the HAL device for * consuming the requested type of data. This is used in allocating new * gralloc buffers for the stream buffer queue. * * - max_buffers: The maximum number of buffers the HAL device may need to * have acquired at the same time. The device may not have more buffers * acquired at the same time than this value. * */ int (*)(const struct camera2_device *, uint32_t width, uint32_t height, uint32_t format, const camera2_stream_in_ops_t *reprocess_stream_ops, // outputs uint32_t *stream_id, uint32_t *consumer_usage, uint32_t *max_buffers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * allocate_reprocess_stream:
     *
     * Allocate a new input stream for use, defined by the output buffer width,
     * height, and the pixel format.  Returns the new stream's ID, gralloc usage
     * flags, and required simultaneously acquirable buffer count, on
     * success. Error conditions:
     *
     *  - Requesting a width/height/format combination not listed as
     *    supported by the sensor's static characteristics
     *
     *  - Asking for too many reprocessing streams to be configured at once.
     *
     * Input parameters:
     *
     * - width, height, format: Specification for the buffers to be sent through
     *   this stream. Format must be a value from the HAL_PIXEL_FORMAT_* list.
     *
     * - reprocess_stream_ops: A structure of function pointers for acquiring
     *   and releasing buffers for this stream. The underlying stream will be
     *   configured based on the usage and max_buffers outputs.
     *
     * Output parameters:
     *
     * - stream_id: An unsigned integer identifying this stream. This value is
     *   used in incoming requests to identify the stream, and in releasing the
     *   stream. These ids are numbered separately from the input stream ids.
     *
     * - consumer_usage: The gralloc usage mask needed by the HAL device for
     *   consuming the requested type of data. This is used in allocating new
     *   gralloc buffers for the stream buffer queue.
     *
     * - max_buffers: The maximum number of buffers the HAL device may need to
     *   have acquired at the same time. The device may not have more buffers
     *   acquired at the same time than this value.
     *
     */
    int (*${name})(const struct camera2_device *,
            uint32_t width,
            uint32_t height,
            uint32_t format,
            const camera2_stream_in_ops_t *reprocess_stream_ops,
            // outputs
            uint32_t *stream_id,
            uint32_t *consumer_usage,
            uint32_t *max_buffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6662156 "allocate_reprocess_stream_from_stream"
	public explicit_type "/** * allocate_reprocess_stream_from_stream: * * Allocate a new input stream for use, which will use the buffers allocated * for an existing output stream. That is, after the HAL enqueues a buffer * onto the output stream, it may see that same buffer handed to it from * this input reprocessing stream. After the HAL releases the buffer back to * the reprocessing stream, it will be returned to the output queue for * reuse. * * Error conditions: * * - Using an output stream of unsuitable size/format for the basis of the * reprocessing stream. * * - Attempting to allocatee too many reprocessing streams at once. * * Input parameters: * * - output_stream_id: The ID of an existing output stream which has * a size and format suitable for reprocessing. * * - reprocess_stream_ops: A structure of function pointers for acquiring * and releasing buffers for this stream. The underlying stream will use * the same graphics buffer handles as the output stream uses. * * Output parameters: * * - stream_id: An unsigned integer identifying this stream. This value is * used in incoming requests to identify the stream, and in releasing the * stream. These ids are numbered separately from the input stream ids. * * The HAL client must always release the reprocessing stream before it * releases the output stream it is based on. * */ int (*)(const struct camera2_device *, uint32_t output_stream_id, const camera2_stream_in_ops_t *reprocess_stream_ops, // outputs uint32_t *stream_id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * allocate_reprocess_stream_from_stream:
     *
     * Allocate a new input stream for use, which will use the buffers allocated
     * for an existing output stream. That is, after the HAL enqueues a buffer
     * onto the output stream, it may see that same buffer handed to it from
     * this input reprocessing stream. After the HAL releases the buffer back to
     * the reprocessing stream, it will be returned to the output queue for
     * reuse.
     *
     * Error conditions:
     *
     * - Using an output stream of unsuitable size/format for the basis of the
     *   reprocessing stream.
     *
     * - Attempting to allocatee too many reprocessing streams at once.
     *
     * Input parameters:
     *
     * - output_stream_id: The ID of an existing output stream which has
     *   a size and format suitable for reprocessing.
     *
     * - reprocess_stream_ops: A structure of function pointers for acquiring
     *   and releasing buffers for this stream. The underlying stream will use
     *   the same graphics buffer handles as the output stream uses.
     *
     * Output parameters:
     *
     * - stream_id: An unsigned integer identifying this stream. This value is
     *   used in incoming requests to identify the stream, and in releasing the
     *   stream. These ids are numbered separately from the input stream ids.
     *
     * The HAL client must always release the reprocessing stream before it
     * releases the output stream it is based on.
     *
     */
    int (*${name})(const struct camera2_device *,
            uint32_t output_stream_id,
            const camera2_stream_in_ops_t *reprocess_stream_ops,
            // outputs
            uint32_t *stream_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6662284 "release_reprocess_stream"
	public explicit_type "/** * Release a reprocessing stream. Returns an error if called when * get_in_progress_count is non-zero, or if the stream id is not * valid. */ int (*)( const struct camera2_device *, uint32_t stream_id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Release a reprocessing stream. Returns an error if called when
     * get_in_progress_count is non-zero, or if the stream id is not
     * valid.
     */
    int (*${name})(
            const struct camera2_device *,
            uint32_t stream_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6662412 "trigger_action"
	public explicit_type "/********************************************************************** * Miscellaneous methods */ /** * Trigger asynchronous activity. This is used for triggering special * behaviors of the camera 3A routines when they are in use. See the * documentation for CAMERA2_TRIGGER_* above for details of the trigger ids * and their arguments. */ int (*)(const struct camera2_device *, uint32_t trigger_id, int32_t ext1, int32_t ext2)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**********************************************************************
     * Miscellaneous methods
     */

    /**
     * Trigger asynchronous activity. This is used for triggering special
     * behaviors of the camera 3A routines when they are in use. See the
     * documentation for CAMERA2_TRIGGER_* above for details of the trigger ids
     * and their arguments.
     */
    int (*${name})(const struct camera2_device *,
            uint32_t trigger_id,
            int32_t ext1,
            int32_t ext2)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6662540 "set_notify_callback"
	public explicit_type "/** * Notification callback setup */ int (*)(const struct camera2_device *, camera2_notify_callback notify_cb, void *user)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Notification callback setup
     */
    int (*${name})(const struct camera2_device *,
            camera2_notify_callback notify_cb,
            void *user)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6662668 "get_metadata_vendor_tag_ops"
	public explicit_type "/** * Get methods to query for vendor extension metadata tag infomation. May * set ops to NULL if no vendor extension tags are defined. */ int (*)(const struct camera2_device*, vendor_tag_query_ops_t **ops)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Get methods to query for vendor extension metadata tag infomation. May
     * set ops to NULL if no vendor extension tags are defined.
     */
    int (*${name})(const struct camera2_device*,
            vendor_tag_query_ops_t **ops)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6662796 "dump"
	public explicit_type "/** * Dump state of the camera hardware */ int (*)(const struct camera2_device *, int fd)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Dump state of the camera hardware
     */
    int (*${name})(const struct camera2_device *, int fd)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1729804 "camera2_device_ops_t"
      visibility package stereotype "typedef" base_type class_ref 1729676 // camera2_device_ops
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1729932 "camera2_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*********************************************************************
 *
 * Camera device definition
 *"
      classrelation 3550476 // common (<directional composition>)
	relation 3550348 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3550476 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      classrelation 3550604 // ops (<unidirectional association>)
	relation 3550476 --->
	  a role_name "ops" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3550604 // ops (<unidirectional association>)
	  b parent class_ref 1729804 // camera2_device_ops_t
      end

      attribute 6662924 "priv"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1730060 "camera2_device_t"
      visibility package stereotype "typedef" base_type class_ref 1729932 // camera2_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1730188 "camera_info"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6663052 "facing"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6663180 "orientation"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6663308 "device_version"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6663436 "static_camera_characteristics"
	const_attribute public explicit_type "camera_metadata_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1730316 "camera_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3550732 // common (<directional composition>)
	relation 3550604 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3550732 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end

      attribute 6663564 "get_number_of_cameras"
	public explicit_type "int (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6663692 "get_camera_info"
	public explicit_type "int (*)(int camera_id, struct camera_info *info)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(int camera_id, struct camera_info *info)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1730444 "camera_module_t"
      visibility package stereotype "typedef" base_type class_ref 1730316 // camera_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1730572 "GpsPositionMode"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Requested operational mode for GPS operation. "
    end

    class 1730700 "GpsPositionRecurrence"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Requested recurrence mode for GPS operation. "
    end

    class 1730828 "GpsStatusValue"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* GPS status event values. "
    end

    class 1730956 "GpsLocationFlags"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Flags to indicate which values are valid in a GpsLocation. "
    end

    class 1731084 "GpsAidingData"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Flags used to specify which aiding data to delete
    when calling delete_aiding_data(). "
    end

    class 1731212 "AGpsType"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* AGPS type "
    end

    class 1731340 "AGpsSetIDType"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1731468 "GpsNiType"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * GpsNiType constants"
    end

    class 1731596 "GpsNiNotifyFlags"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * GpsNiNotifyFlags constants"
    end

    class 1731724 "GpsUserResponseType"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * GPS NI responses, used to define the response in
 * NI structures"
    end

    class 1731852 "GpsNiEncodingType"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * NI data encoding scheme"
    end

    class 1731980 "AGpsStatusValue"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* AGPS status event values. "
    end

    class 1732108 "GpsLocation"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents a location. "
      attribute 6663820 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6663948 "flags"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6664076 "latitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6664204 "longitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6664332 "altitude"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6664460 "speed"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6664588 "bearing"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6664716 "accuracy"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6664844 "timestamp"
	public explicit_type "GpsUtcTime"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1732236 "GpsStatus"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents the status. "
      attribute 6664972 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3550860 // status (<directional composition>)
	relation 3550732 *-->
	  a role_name "status" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3550860 // status (<directional composition>)
	  b parent class_ref 1730828 // GpsStatusValue
      end
    end

    class 1732364 "GpsSvInfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents SV information. "
      attribute 6665100 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6665228 "prn"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6665356 "snr"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6665484 "elevation"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6665612 "azimuth"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1732492 "GpsSvStatus"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents SV status. "
      attribute 6665740 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6665868 "num_svs"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3550988 // sv_list (<directional composition>)
	relation 3550860 *-->
	  a role_name "sv_list" multiplicity "[GPS_MAX_SVS]" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3550988 // sv_list (<directional composition>)
	  b parent class_ref 1732364 // GpsSvInfo
      end

      attribute 6665996 "ephemeris_mask"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6666124 "almanac_mask"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6666252 "used_in_fix_mask"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1732620 "AGpsRefLocationCellID"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " 2G and 3G 
 In 3G lac is discarded "
      attribute 6666380 "type"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6666508 "mcc"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6666636 "mnc"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6666764 "lac"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6666892 "cid"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1732748 "AGpsRefLocationMac"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6667020 "mac"
	public explicit_type "uint8_t"
	multiplicity "[6]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1732876 "AGpsRefLocation"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents ref locations "
      attribute 6667148 "type"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6667276 "u"
	public explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}union  {
        AGpsRefLocationCellID   cellID;
        AGpsRefLocationMac      mac;
    } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1733004 "gps_location_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(GpsLocation* location);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback with location information.
 *  Can only be called from a thread created by create_thread_cb."
    end

    class 1733132 "gps_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(GpsStatus* status);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback with status information.
 *  Can only be called from a thread created by create_thread_cb."
    end

    class 1733260 "gps_sv_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(GpsSvStatus* sv_info);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback with SV status information.
 *  Can only be called from a thread created by create_thread_cb."
    end

    class 1733388 "gps_nmea_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(GpsUtcTime timestamp, const char* nmea, int length);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for reporting NMEA sentences.
 *  Can only be called from a thread created by create_thread_cb."
    end

    class 1733516 "gps_set_capabilities"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(uint32_t capabilities);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback to inform framework of the GPS engine's capabilities.
 *  Capability parameter is a bit field of GPS_CAPABILITY_* flags."
    end

    class 1733644 "gps_acquire_wakelock"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback utility for acquiring the GPS wakelock.
 *  This can be used to prevent the CPU from suspending while handling GPS events."
    end

    class 1733772 "gps_release_wakelock"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback utility for releasing the GPS wakelock. "
    end

    class 1733900 "gps_request_utc_time"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for requesting NTP time "
    end

    class 1734028 "gps_create_thread"
      visibility package stereotype "typedef" explicit_base_type "pthread_t"
      cpp_decl "${comment}typedef ${type}(*  ${name})(const char* name, void (*start)(void *), void* arg);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback for creating a thread that can call into the Java framework code.
 *  This must be used to create any threads that report events up to the framework."
    end

    class 1734156 "GpsCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* GPS callback structure. "
      attribute 6667404 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3551116 // location_cb (<directional composition>)
	relation 3550988 *-->
	  a role_name "location_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3551116 // location_cb (<directional composition>)
	  b parent class_ref 1733004 // gps_location_callback
      end

      classrelation 3551244 // status_cb (<directional composition>)
	relation 3551116 *-->
	  a role_name "status_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3551244 // status_cb (<directional composition>)
	  b parent class_ref 1733132 // gps_status_callback
      end

      classrelation 3551372 // sv_status_cb (<directional composition>)
	relation 3551244 *-->
	  a role_name "sv_status_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3551372 // sv_status_cb (<directional composition>)
	  b parent class_ref 1733260 // gps_sv_status_callback
      end

      classrelation 3551500 // nmea_cb (<directional composition>)
	relation 3551372 *-->
	  a role_name "nmea_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3551500 // nmea_cb (<directional composition>)
	  b parent class_ref 1733388 // gps_nmea_callback
      end

      classrelation 3551628 // set_capabilities_cb (<directional composition>)
	relation 3551500 *-->
	  a role_name "set_capabilities_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3551628 // set_capabilities_cb (<directional composition>)
	  b parent class_ref 1733516 // gps_set_capabilities
      end

      classrelation 3551756 // acquire_wakelock_cb (<directional composition>)
	relation 3551628 *-->
	  a role_name "acquire_wakelock_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3551756 // acquire_wakelock_cb (<directional composition>)
	  b parent class_ref 1733644 // gps_acquire_wakelock
      end

      classrelation 3551884 // release_wakelock_cb (<directional composition>)
	relation 3551756 *-->
	  a role_name "release_wakelock_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3551884 // release_wakelock_cb (<directional composition>)
	  b parent class_ref 1733772 // gps_release_wakelock
      end

      classrelation 3552012 // create_thread_cb (<directional composition>)
	relation 3551884 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3552012 // create_thread_cb (<directional composition>)
	  b parent class_ref 1734028 // gps_create_thread
      end

      classrelation 3552140 // request_utc_time_cb (<directional composition>)
	relation 3552012 *-->
	  a role_name "request_utc_time_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3552140 // request_utc_time_cb (<directional composition>)
	  b parent class_ref 1733900 // gps_request_utc_time
      end
    end

    class 1734284 "GpsInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents the standard GPS interface. "
      attribute 6667532 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6667660 "init"
	public explicit_type "/** * Opens the interface and provides the callback routines * to the implemenation of this interface. */ int (*)( GpsCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Opens the interface and provides the callback routines
     * to the implemenation of this interface.
     */
    int   (*${name})( GpsCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6667788 "start"
	public explicit_type "/** Starts navigating. */ int (*)( void )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Starts navigating. */
    int   (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6667916 "stop"
	public explicit_type "/** Stops navigating. */ int (*)( void )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Stops navigating. */
    int   (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6668044 "cleanup"
	public explicit_type "/** Closes the interface. */ void (*)( void )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Closes the interface. */
    void  (*${name})( void )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6668172 "inject_time"
	public explicit_type "/** Injects the current time. */ int (*)(GpsUtcTime time, int64_t timeReference, int uncertainty)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Injects the current time. */
    int   (*${name})(GpsUtcTime time, int64_t timeReference,
                         int uncertainty)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6668300 "inject_location"
	public explicit_type "/** Injects current location from another location provider * (typically cell ID). * latitude and longitude are measured in degrees * expected accuracy is measured in meters */ int (*)(double latitude, double longitude, float accuracy)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Injects current location from another location provider
     *  (typically cell ID).
     *  latitude and longitude are measured in degrees
     *  expected accuracy is measured in meters
     */
    int  (*${name})(double latitude, double longitude, float accuracy)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6668428 "delete_aiding_data"
	public explicit_type "/** * Specifies that the next call to start will not use the * information defined in the flags. GPS_DELETE_ALL is passed for * a cold start. */ void (*)(GpsAidingData flags)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Specifies that the next call to start will not use the
     * information defined in the flags. GPS_DELETE_ALL is passed for
     * a cold start.
     */
    void  (*${name})(GpsAidingData flags)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6668556 "set_position_mode"
	public explicit_type "/** * min_interval represents the time between fixes in milliseconds. * preferred_accuracy represents the requested fix accuracy in meters. * preferred_time represents the requested time to first fix in milliseconds. */ int (*)(GpsPositionMode mode, GpsPositionRecurrence recurrence, uint32_t min_interval, uint32_t preferred_accuracy, uint32_t preferred_time)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * min_interval represents the time between fixes in milliseconds.
     * preferred_accuracy represents the requested fix accuracy in meters.
     * preferred_time represents the requested time to first fix in milliseconds.
     */
    int   (*${name})(GpsPositionMode mode, GpsPositionRecurrence recurrence,
            uint32_t min_interval, uint32_t preferred_accuracy, uint32_t preferred_time)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6668684 "get_extension"
	const_attribute public explicit_type "void* (*)(const char* name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} void* (*${name})(const char* name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1734412 "gps_xtra_download_request"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})();
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback to request the client to download XTRA data.
 *  The client should download XTRA data and inject it by calling inject_xtra_data().
 *  Can only be called from a thread created by create_thread_cb."
    end

    class 1734540 "GpsXtraCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback structure for the XTRA interface. "
      classrelation 3552268 // download_request_cb (<directional composition>)
	relation 3552140 *-->
	  a role_name "download_request_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3552268 // download_request_cb (<directional composition>)
	  b parent class_ref 1734412 // gps_xtra_download_request
      end

      classrelation 3552396 // create_thread_cb (<directional composition>)
	relation 3552268 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3552396 // create_thread_cb (<directional composition>)
	  b parent class_ref 1734028 // gps_create_thread
      end
    end

    class 1734668 "GpsXtraInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Extended interface for XTRA support. "
      attribute 6668812 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6668940 "init"
	public explicit_type "/** * Opens the XTRA interface and provides the callback routines * to the implemenation of this interface. */ int (*)( GpsXtraCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Opens the XTRA interface and provides the callback routines
     * to the implemenation of this interface.
     */
    int  (*${name})( GpsXtraCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6669068 "inject_xtra_data"
	public explicit_type "/** Injects XTRA data into the GPS. */ int (*)( char* data, int length )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /** Injects XTRA data into the GPS. */
    int  (*${name})( char* data, int length )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1734796 "GpsDebugInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Extended interface for DEBUG support. "
      attribute 6669196 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6669324 "get_internal_state"
	public explicit_type "/** * This function should return any information that the native * implementation wishes to include in a bugreport. */ size_t (*)(char* buffer, size_t bufferSize)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * This function should return any information that the native
     * implementation wishes to include in a bugreport.
     */
    size_t (*${name})(char* buffer, size_t bufferSize)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1734924 "AGpsStatus"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents the status of AGPS. "
      attribute 6669452 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3552524 // type (<directional composition>)
	relation 3552396 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3552524 // type (<directional composition>)
	  b parent class_ref 1731212 // AGpsType
      end

      classrelation 3552652 // status (<directional composition>)
	relation 3552524 *-->
	  a role_name "status" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3552652 // status (<directional composition>)
	  b parent class_ref 1731980 // AGpsStatusValue
      end

      attribute 6669580 "ipaddr"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1735052 "agps_status_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(*  ${name})(AGpsStatus* status);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback with AGPS status information.
 *  Can only be called from a thread created by create_thread_cb."
    end

    class 1735180 "AGpsCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback structure for the AGPS interface. "
      classrelation 3552780 // status_cb (<directional composition>)
	relation 3552652 *-->
	  a role_name "status_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3552780 // status_cb (<directional composition>)
	  b parent class_ref 1735052 // agps_status_callback
      end

      classrelation 3552908 // create_thread_cb (<directional composition>)
	relation 3552780 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3552908 // create_thread_cb (<directional composition>)
	  b parent class_ref 1734028 // gps_create_thread
      end
    end

    class 1735308 "AGpsInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Extended interface for AGPS support. "
      attribute 6669708 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6669836 "init"
	public explicit_type "/** * Opens the AGPS interface and provides the callback routines * to the implemenation of this interface. */ void (*)( AGpsCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Opens the AGPS interface and provides the callback routines
     * to the implemenation of this interface.
     */
    void  (*${name})( AGpsCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6669964 "data_conn_open"
	public explicit_type "/** * Notifies that a data connection is available and sets * the name of the APN to be used for SUPL. */ int (*)( const char* apn )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Notifies that a data connection is available and sets 
     * the name of the APN to be used for SUPL.
     */
    int  (*${name})( const char* apn )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6670092 "data_conn_closed"
	public explicit_type "/** * Notifies that the AGPS data connection has been closed. */ int (*)()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Notifies that the AGPS data connection has been closed.
     */
    int  (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6670220 "data_conn_failed"
	public explicit_type "/** * Notifies that a data connection is not available for AGPS. */ int (*)()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Notifies that a data connection is not available for AGPS. 
     */
    int  (*${name})()${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6670348 "set_server"
	public explicit_type "/** * Sets the hostname and port for the AGPS server. */ int (*)( AGpsType type, const char* hostname, int port )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Sets the hostname and port for the AGPS server.
     */
    int  (*${name})( AGpsType type, const char* hostname, int port )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1735436 "GpsNiNotification"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Represents an NI request "
      attribute 6670476 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6670604 "notification_id"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3553036 // ni_type (<directional composition>)
	relation 3552908 *-->
	  a role_name "ni_type" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3553036 // ni_type (<directional composition>)
	  b parent class_ref 1731468 // GpsNiType
      end

      classrelation 3553164 // notify_flags (<directional composition>)
	relation 3553036 *-->
	  a role_name "notify_flags" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3553164 // notify_flags (<directional composition>)
	  b parent class_ref 1731596 // GpsNiNotifyFlags
      end

      attribute 6670732 "timeout"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3553292 // default_response (<directional composition>)
	relation 3553164 *-->
	  a role_name "default_response" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3553292 // default_response (<directional composition>)
	  b parent class_ref 1731724 // GpsUserResponseType
      end

      attribute 6670860 "requestor_id"
	public explicit_type "char"
	multiplicity "[GPS_NI_SHORT_STRING_MAXLEN]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6670988 "text"
	public explicit_type "char"
	multiplicity "[GPS_NI_LONG_STRING_MAXLEN]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3553420 // requestor_id_encoding (<directional composition>)
	relation 3553292 *-->
	  a role_name "requestor_id_encoding" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3553420 // requestor_id_encoding (<directional composition>)
	  b parent class_ref 1731852 // GpsNiEncodingType
      end

      classrelation 3553548 // text_encoding (<directional composition>)
	relation 3553420 *-->
	  a role_name "text_encoding" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3553548 // text_encoding (<directional composition>)
	  b parent class_ref 1731852 // GpsNiEncodingType
      end

      attribute 6671116 "extras"
	public explicit_type "char"
	multiplicity "[GPS_NI_LONG_STRING_MAXLEN]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1735564 "gps_ni_notify_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(GpsNiNotification *notification);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Callback with NI notification.
 *  Can only be called from a thread created by create_thread_cb."
    end

    class 1735692 "GpsNiCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* GPS NI callback structure. "
      classrelation 3553676 // notify_cb (<directional composition>)
	relation 3553548 *-->
	  a role_name "notify_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3553676 // notify_cb (<directional composition>)
	  b parent class_ref 1735564 // gps_ni_notify_callback
      end

      classrelation 3553804 // create_thread_cb (<directional composition>)
	relation 3553676 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3553804 // create_thread_cb (<directional composition>)
	  b parent class_ref 1734028 // gps_create_thread
      end
    end

    class 1735820 "GpsNiInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Extended interface for Network-initiated (NI) support."
      attribute 6671244 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6671372 "init"
	public explicit_type "/** Registers the callbacks for HAL to use. */ void (*) (GpsNiCallbacks *callbacks)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
   /** Registers the callbacks for HAL to use. */
   void (*${name}) (GpsNiCallbacks *callbacks)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6671500 "respond"
	public explicit_type "/** Sends a response to HAL. */ void (*) (int notif_id, GpsUserResponseType user_response)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
   /** Sends a response to HAL. */
   void (*${name}) (int notif_id, GpsUserResponseType user_response)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1735948 "gps_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3553932 // common (<directional composition>)
	relation 3553804 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3553932 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6671628 "get_gps_interface"
	const_attribute public explicit_type "GpsInterface* (*)(struct gps_device_t* dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} GpsInterface* (*${name})(struct gps_device_t* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1736076 "agps_ril_request_set_id"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(uint32_t flags);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1736204 "agps_ril_request_ref_loc"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(uint32_t flags);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1736332 "AGpsRilCallbacks"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3554060 // request_setid (<directional composition>)
	relation 3553932 *-->
	  a role_name "request_setid" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3554060 // request_setid (<directional composition>)
	  b parent class_ref 1736076 // agps_ril_request_set_id
      end

      classrelation 3554188 // request_refloc (<directional composition>)
	relation 3554060 *-->
	  a role_name "request_refloc" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3554188 // request_refloc (<directional composition>)
	  b parent class_ref 1736204 // agps_ril_request_ref_loc
      end

      classrelation 3554316 // create_thread_cb (<directional composition>)
	relation 3554188 *-->
	  a role_name "create_thread_cb" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3554316 // create_thread_cb (<directional composition>)
	  b parent class_ref 1734028 // gps_create_thread
      end
    end

    class 1736460 "AGpsRilInterface"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Extended interface for AGPS_RIL support. "
      attribute 6671756 "size"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6671884 "init"
	public explicit_type "/** * Opens the AGPS interface and provides the callback routines * to the implemenation of this interface. */ void (*)( AGpsRilCallbacks* callbacks )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Opens the AGPS interface and provides the callback routines
     * to the implemenation of this interface.
     */
    void  (*${name})( AGpsRilCallbacks* callbacks )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6672012 "set_ref_location"
	public explicit_type "/** * Sets the reference location. */ void (*) (const AGpsRefLocation *agps_reflocation, size_t sz_struct)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Sets the reference location.
     */
    void (*${name}) (const AGpsRefLocation *agps_reflocation, size_t sz_struct)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6672140 "set_set_id"
	public explicit_type "/** * Sets the set ID. */ void (*) (AGpsSetIDType type, const char* setid)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /**
     * Sets the set ID.
     */
    void (*${name}) (AGpsSetIDType type, const char* setid)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6672268 "ni_message"
	public explicit_type "/** * Send network initiated message. */ void (*) (uint8_t *msg, size_t len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Send network initiated message.
     */
    void (*${name}) (uint8_t *msg, size_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6672396 "update_network_state"
	public explicit_type "/** * Notify GPS of network status changes. * These parameters match values in the android.net.NetworkInfo class. */ void (*) (int connected, int type, int roaming, const char* extra_info)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Notify GPS of network status changes.
     * These parameters match values in the android.net.NetworkInfo class.
     */
    void (*${name}) (int connected, int type, int roaming, const char* extra_info)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6672524 "update_network_availability"
	public explicit_type "/** * Notify GPS of network status changes. * These parameters match values in the android.net.NetworkInfo class. */ void (*) (int avaiable, const char* apn)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Notify GPS of network status changes.
     * These parameters match values in the android.net.NetworkInfo class.
     */
    void (*${name}) (int avaiable, const char* apn)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1736588 "gralloc_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "***************************************************************************
*
 * Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
 * and the fields of this data structure must begin with hw_module_t
 * followed by module specific information."
      classrelation 3554444 // common (<directional composition>)
	relation 3554316 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3554444 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end

      attribute 6672652 "registerBuffer"
	public explicit_type "/* * (*registerBuffer)() must be called before a buffer_handle_t that has not * been created with (*alloc_device_t::alloc)() can be used. * * This is intended to be used with buffer_handle_t's that have been * received in this process through IPC. * * This function checks that the handle is indeed a valid one and prepares * it for use with (*lock)() and (*unlock)(). * * It is not necessary to call (*registerBuffer)() on a handle created * with (*alloc_device_t::alloc)(). * * returns an error if this buffer_handle_t is not valid. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    
    /*
     * (*registerBuffer)() must be called before a buffer_handle_t that has not
     * been created with (*alloc_device_t::alloc)() can be used.
     * 
     * This is intended to be used with buffer_handle_t's that have been
     * received in this process through IPC.
     * 
     * This function checks that the handle is indeed a valid one and prepares
     * it for use with (*lock)() and (*unlock)().
     * 
     * It is not necessary to call (*registerBuffer)() on a handle created 
     * with (*alloc_device_t::alloc)().
     * 
     * returns an error if this buffer_handle_t is not valid.
     */
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6672780 "unregisterBuffer"
	public explicit_type "/* * (*unregisterBuffer)() is called once this handle is no longer needed in * this process. After this call, it is an error to call (*lock)(), * (*unlock)(), or (*registerBuffer)(). * * This function doesn't close or free the handle itself; this is done * by other means, usually through libcutils's native_handle_close() and * native_handle_free(). * * It is an error to call (*unregisterBuffer)() on a buffer that wasn't * explicitly registered first. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*unregisterBuffer)() is called once this handle is no longer needed in
     * this process. After this call, it is an error to call (*lock)(),
     * (*unlock)(), or (*registerBuffer)().
     * 
     * This function doesn't close or free the handle itself; this is done
     * by other means, usually through libcutils's native_handle_close() and
     * native_handle_free(). 
     * 
     * It is an error to call (*unregisterBuffer)() on a buffer that wasn't
     * explicitly registered first.
     */
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6672908 "lock"
	public explicit_type "/* * The (*lock)() method is called before a buffer is accessed for the * specified usage. This call may block, for instance if the h/w needs * to finish rendering or if CPU caches need to be synchronized. * * The caller promises to modify only pixels in the area specified * by (l,t,w,h). * * The content of the buffer outside of the specified area is NOT modified * by this call. * * If usage specifies GRALLOC_USAGE_SW_*, vaddr is filled with the address * of the buffer in virtual memory. * * THREADING CONSIDERATIONS: * * It is legal for several different threads to lock a buffer from * read access, none of the threads are blocked. * * However, locking a buffer simultaneously for write or read/write is * undefined, but: * - shall not result in termination of the process * - shall not block the caller * It is acceptable to return an error or to leave the buffer's content * into an indeterminate state. * * If the buffer was created with a usage mask incompatible with the * requested usage flags here, -EINVAL is returned. * */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle, int usage, int l, int t, int w, int h, void** vaddr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    
    /*
     * The (*lock)() method is called before a buffer is accessed for the 
     * specified usage. This call may block, for instance if the h/w needs
     * to finish rendering or if CPU caches need to be synchronized.
     * 
     * The caller promises to modify only pixels in the area specified 
     * by (l,t,w,h).
     * 
     * The content of the buffer outside of the specified area is NOT modified
     * by this call.
     *
     * If usage specifies GRALLOC_USAGE_SW_*, vaddr is filled with the address
     * of the buffer in virtual memory.
     *
     * THREADING CONSIDERATIONS:
     *
     * It is legal for several different threads to lock a buffer from 
     * read access, none of the threads are blocked.
     * 
     * However, locking a buffer simultaneously for write or read/write is
     * undefined, but:
     * - shall not result in termination of the process
     * - shall not block the caller
     * It is acceptable to return an error or to leave the buffer's content
     * into an indeterminate state.
     *
     * If the buffer was created with a usage mask incompatible with the
     * requested usage flags here, -EINVAL is returned. 
     * 
     */
    
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle, int usage,
            int l, int t, int w, int h,
            void** vaddr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6673036 "unlock"
	public explicit_type "/* * The (*unlock)() method must be called after all changes to the buffer * are completed. */ int (*)(struct gralloc_module_t const* module, buffer_handle_t handle)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    
    /*
     * The (*unlock)() method must be called after all changes to the buffer
     * are completed.
     */
    
    int (*${name})(struct gralloc_module_t const* module,
            buffer_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6673164 "perform"
	public explicit_type "/* reserved for future use */ int (*)(struct gralloc_module_t const* module, int operation, ... )"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}

    /* reserved for future use */
    int (*${name})(struct gralloc_module_t const* module,
            int operation, ... )${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6673292 "reserved_proc"
	public explicit_type "void"
	multiplicity "[7]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 7223052 // <dependency>
	relation 7222924 -_->
	  stereotype "handle"
	  a package
	    cpp default "#include in source"
	    classrelation_ref 7223052 // <dependency>
	  b parent class_ref 1600396 // native_handle_t
      end
    end

    class 1736716 "alloc_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "***************************************************************************
*
 * Every device data structure must begin with hw_device_t
 * followed by module specific public methods and attributes."
      classrelation 3554572 // common (<unidirectional association>)
	relation 3554444 --->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3554572 // common (<unidirectional association>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6673420 "alloc"
	public explicit_type "/* * (*alloc)() Allocates a buffer in graphic memory with the requested * parameters and returns a buffer_handle_t and the stride in pixels to * allow the implementation to satisfy hardware constraints on the width * of a pixmap (eg: it may have to be multiple of 8 pixels). * The CALLER TAKES OWNERSHIP of the buffer_handle_t. * * Returns 0 on success or -errno on error. */ int (*)(struct alloc_device_t* dev, int w, int h, int format, int usage, buffer_handle_t* handle, int* stride)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* 
     * (*alloc)() Allocates a buffer in graphic memory with the requested
     * parameters and returns a buffer_handle_t and the stride in pixels to
     * allow the implementation to satisfy hardware constraints on the width
     * of a pixmap (eg: it may have to be multiple of 8 pixels). 
     * The CALLER TAKES OWNERSHIP of the buffer_handle_t.
     * 
     * Returns 0 on success or -errno on error.
     */
    
    int (*${name})(struct alloc_device_t* dev,
            int w, int h, int format, int usage,
            buffer_handle_t* handle, int* stride)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6673548 "free"
	public explicit_type "/* * (*free)() Frees a previously allocated buffer. * Behavior is undefined if the buffer is still mapped in any process, * but shall not result in termination of the program or security breaches * (allowing a process to get access to another process' buffers). * THIS FUNCTION TAKES OWNERSHIP of the buffer_handle_t which becomes * invalid after the call. * * Returns 0 on success or -errno on error. */ int (*)(struct alloc_device_t* dev, buffer_handle_t handle)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*free)() Frees a previously allocated buffer. 
     * Behavior is undefined if the buffer is still mapped in any process,
     * but shall not result in termination of the program or security breaches
     * (allowing a process to get access to another process' buffers).
     * THIS FUNCTION TAKES OWNERSHIP of the buffer_handle_t which becomes
     * invalid after the call. 
     * 
     * Returns 0 on success or -errno on error.
     */
    int (*${name})(struct alloc_device_t* dev,
            buffer_handle_t handle)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6673676 "dump"
	public explicit_type "/* This hook is OPTIONAL. * * If non NULL it will be caused by SurfaceFlinger on dumpsys */ void (*)(struct alloc_device_t *dev, char *buff, int buff_len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /* This hook is OPTIONAL.
     *
     * If non NULL it will be caused by SurfaceFlinger on dumpsys
     */
    void (*${name})(struct alloc_device_t *dev, char *buff, int buff_len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6673804 "reserved_proc"
	public explicit_type "void"
	multiplicity "[7]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1736844 "hw_module_methods_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6674956 "open"
	public explicit_type "/** Open a specific device */ int (*)(const struct hw_module_t* module, const char* id, struct hw_device_t** device)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Open a specific device */
    int (*${name})(const struct hw_module_t* module, const char* id,
            struct hw_device_t** device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1736972 "hwc_region"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6675596 "numRects"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6675724 "rects"
	const_attribute public explicit_type "hwc_rect_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1737100 "hwc_region_t"
      visibility package stereotype "typedef" base_type class_ref 1736972 // hwc_region
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1737228 "hwc_color"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6675852 "r"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6675980 "g"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6676108 "b"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6676236 "a"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1737356 "hwc_color_t"
      visibility package stereotype "typedef" base_type class_ref 1737228 // hwc_color
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1737484 "hwc_layer_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6676364 "compositionType"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6676492 "hints"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6676620 "flags"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3554956 // backgroundColor (<directional composition>)
	relation 3554828 *-->
	  a role_name "backgroundColor" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3554956 // backgroundColor (<directional composition>)
	  b parent class_ref 1737356 // hwc_color_t
      end

      attribute 6676748 "handle"
	public explicit_type "buffer_handle_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6676876 "transform"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6677004 "blending"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6677132 "alpha"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6677260 "sourceCrop"
	public explicit_type "hwc_rect_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6677388 "displayFrame"
	public explicit_type "hwc_rect_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3555084 // visibleRegionScreen (<directional composition>)
	relation 3554956 *-->
	  a role_name "visibleRegionScreen" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3555084 // visibleRegionScreen (<directional composition>)
	  b parent class_ref 1737100 // hwc_region_t
      end

      attribute 6677516 "acquireFenceFd"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6677644 "releaseFenceFd"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1737612 "hwc_layer_1_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1737740 "hwc_display_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}*  ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This represents a display, typically an EGLDisplay object "
    end

    class 1737868 "hwc_surface_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}*  ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This represents a surface, typically an EGLSurface object  "
    end

    class 1737996 "anonymous8"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * hwc_display_contents_1_t::flags values"
      attribute 6677772 "HWC_GEOMETRY_CHANGED"
	public type class_ref 1737996 // anonymous8
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1738124 "hwc_display_contents_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "     * HWC_GEOMETRY_CHANGED is set by SurfaceFlinger to indicate that the list
     * passed to (*prepare)() has changed by more than just the buffer handles
     * and acquire fences.
     

 * Description of the contents to output on a display.
 *
 * This is the top-level structure passed to the prepare and set calls to
 * negotiate and commit the composition of a display image."
      attribute 6677900 "retireFenceFd"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3555212 // dpy (<directional composition>)
	relation 3555084 *-->
	  a role_name "dpy" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3555212 // dpy (<directional composition>)
	  b parent class_ref 1737740 // hwc_display_t
      end

      classrelation 3555340 // sur (<directional composition>)
	relation 3555212 *-->
	  a role_name "sur" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3555340 // sur (<directional composition>)
	  b parent class_ref 1737868 // hwc_surface_t
      end

      attribute 13627404 "numHwLayers"
	private explicit_type ""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1738252 "hwc_display_contents_1_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1738508 "hwc_procs"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " see hwc_composer_device::registerProcs()
 * All of the callbacks are required and non-NULL unless otherwise noted."
      attribute 6678028 "invalidate"
	public explicit_type "/* * (*invalidate)() triggers a screen refresh, in particular prepare and set * will be called shortly after this call is made. Note that there is * NO GUARANTEE that the screen refresh will happen after invalidate() * returns (in particular, it could happen before). * invalidate() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL and * it is safe to call invalidate() from any of hwc_composer_device * hooks, unless noted otherwise. */ void (*)(const struct hwc_procs* procs)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*invalidate)() triggers a screen refresh, in particular prepare and set
     * will be called shortly after this call is made. Note that there is
     * NO GUARANTEE that the screen refresh will happen after invalidate()
     * returns (in particular, it could happen before).
     * invalidate() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL and
     * it is safe to call invalidate() from any of hwc_composer_device
     * hooks, unless noted otherwise.
     */
    void (*${name})(const struct hwc_procs* procs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6678156 "vsync"
	public explicit_type "/* * (*vsync)() is called by the h/w composer HAL when a vsync event is * received and HWC_EVENT_VSYNC is enabled on a display * (see: hwc_event_control). * * the \"disp\" parameter indicates which display the vsync event is for. * the \"timestamp\" parameter is the system monotonic clock timestamp in * nanosecond of when the vsync event happened. * * vsync() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL. * * It is expected that vsync() is called from a thread of at least * HAL_PRIORITY_URGENT_DISPLAY with as little latency as possible, * typically less than 0.5 ms. * * It is a (silent) error to have HWC_EVENT_VSYNC enabled when calling * hwc_composer_device.set(..., 0, 0, 0) (screen off). The implementation * can either stop or continue to process VSYNC events, but must not * crash or cause other problems. */ void (*)(const struct hwc_procs* procs, int disp, int64_t timestamp)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*vsync)() is called by the h/w composer HAL when a vsync event is
     * received and HWC_EVENT_VSYNC is enabled on a display
     * (see: hwc_event_control).
     *
     * the \"disp\" parameter indicates which display the vsync event is for.
     * the \"timestamp\" parameter is the system monotonic clock timestamp in
     *   nanosecond of when the vsync event happened.
     *
     * vsync() is GUARANTEED TO NOT CALL BACK into the h/w composer HAL.
     *
     * It is expected that vsync() is called from a thread of at least
     * HAL_PRIORITY_URGENT_DISPLAY with as little latency as possible,
     * typically less than 0.5 ms.
     *
     * It is a (silent) error to have HWC_EVENT_VSYNC enabled when calling
     * hwc_composer_device.set(..., 0, 0, 0) (screen off). The implementation
     * can either stop or continue to process VSYNC events, but must not
     * crash or cause other problems.
     */
    void (*${name})(const struct hwc_procs* procs, int disp, int64_t timestamp)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6678284 "hotplug"
	public explicit_type "/* * (*hotplug)() is called by the h/w composer HAL when a display is * connected or disconnected. The PRIMARY display is always connected and * the hotplug callback should not be called for it. * * The disp parameter indicates which display type this event is for. * The connected parameter indicates whether the display has just been * connected (1) or disconnected (0). * * The hotplug() callback may call back into the h/w composer on the same * thread to query refresh rate and dpi for the display. Additionally, * other threads may be calling into the h/w composer while the callback * is in progress. * * The h/w composer must serialize calls to the hotplug callback; only * one thread may call it at a time. * * This callback will be NULL if the h/w composer is using * HWC_DEVICE_API_VERSION_1_0. */ void (*)(const struct hwc_procs* procs, int disp, int connected)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*hotplug)() is called by the h/w composer HAL when a display is
     * connected or disconnected. The PRIMARY display is always connected and
     * the hotplug callback should not be called for it.
     *
     * The disp parameter indicates which display type this event is for.
     * The connected parameter indicates whether the display has just been
     *   connected (1) or disconnected (0).
     *
     * The hotplug() callback may call back into the h/w composer on the same
     * thread to query refresh rate and dpi for the display. Additionally,
     * other threads may be calling into the h/w composer while the callback
     * is in progress.
     *
     * The h/w composer must serialize calls to the hotplug callback; only
     * one thread may call it at a time.
     *
     * This callback will be NULL if the h/w composer is using
     * HWC_DEVICE_API_VERSION_1_0.
     */
    void (*${name})(const struct hwc_procs* procs, int disp, int connected)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1738636 "hwc_procs_t"
      visibility package stereotype "typedef" base_type class_ref 1738508 // hwc_procs
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1738764 "hwc_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "***************************************************************************"
      classrelation 3555468 // common (<directional composition>)
	relation 3555340 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3555468 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end
    end

    class 1738892 "hwc_module_t"
      visibility package stereotype "typedef" base_type class_ref 1738764 // hwc_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1739020 "hwc_composer_device_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3555596 // common (<directional composition>)
	relation 3555468 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3555596 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6678412 "prepare"
	public explicit_type "/* * (*prepare)() is called for each frame before composition and is used by * SurfaceFlinger to determine what composition steps the HWC can handle. * * (*prepare)() can be called more than once, the last call prevails. * * The HWC responds by setting the compositionType field in each layer to * either HWC_FRAMEBUFFER or HWC_OVERLAY. In the former case, the * composition for the layer is handled by SurfaceFlinger with OpenGL ES, * in the later case, the HWC will have to handle the layer's composition. * compositionType and hints are preserved between (*prepare)() calles * unless the HWC_GEOMETRY_CHANGED flag is set. * * (*prepare)() is called with HWC_GEOMETRY_CHANGED to indicate that the * list's geometry has changed, that is, when more than just the buffer's * handles have been updated. Typically this happens (but is not limited to) * when a window is added, removed, resized or moved. In this case * compositionType and hints are reset to their default value. * * For HWC 1.0, numDisplays will always be one, and displays[0] will be * non-NULL. * * For HWC 1.1, numDisplays will always be HWC_NUM_DISPLAY_TYPES. Entries * for unsupported or disabled/disconnected display types will be NULL. * * For HWC 1.2 and later, numDisplays will be HWC_NUM_DISPLAY_TYPES or more. * The extra entries correspond to enabled virtual displays, and will be * non-NULL. In HWC 1.2, support for one virtual display is required, and * no more than one will be used. Future HWC versions might require more. * * returns: 0 on success. An negative error code on error. If an error is * returned, SurfaceFlinger will assume that none of the layer will be * handled by the HWC. */ int (*)(struct hwc_composer_device_1 *dev, size_t numDisplays, hwc_display_contents_1_t** displays)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*prepare)() is called for each frame before composition and is used by
     * SurfaceFlinger to determine what composition steps the HWC can handle.
     *
     * (*prepare)() can be called more than once, the last call prevails.
     *
     * The HWC responds by setting the compositionType field in each layer to
     * either HWC_FRAMEBUFFER or HWC_OVERLAY. In the former case, the
     * composition for the layer is handled by SurfaceFlinger with OpenGL ES,
     * in the later case, the HWC will have to handle the layer's composition.
     * compositionType and hints are preserved between (*prepare)() calles
     * unless the HWC_GEOMETRY_CHANGED flag is set.
     *
     * (*prepare)() is called with HWC_GEOMETRY_CHANGED to indicate that the
     * list's geometry has changed, that is, when more than just the buffer's
     * handles have been updated. Typically this happens (but is not limited to)
     * when a window is added, removed, resized or moved. In this case
     * compositionType and hints are reset to their default value.
     *
     * For HWC 1.0, numDisplays will always be one, and displays[0] will be
     * non-NULL.
     *
     * For HWC 1.1, numDisplays will always be HWC_NUM_DISPLAY_TYPES. Entries
     * for unsupported or disabled/disconnected display types will be NULL.
     *
     * For HWC 1.2 and later, numDisplays will be HWC_NUM_DISPLAY_TYPES or more.
     * The extra entries correspond to enabled virtual displays, and will be
     * non-NULL. In HWC 1.2, support for one virtual display is required, and
     * no more than one will be used. Future HWC versions might require more.
     *
     * returns: 0 on success. An negative error code on error. If an error is
     * returned, SurfaceFlinger will assume that none of the layer will be
     * handled by the HWC.
     */
    int (*${name})(struct hwc_composer_device_1 *dev,
                    size_t numDisplays, hwc_display_contents_1_t** displays)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6678540 "set"
	public explicit_type "/* * (*set)() is used in place of eglSwapBuffers(), and assumes the same * functionality, except it also commits the work list atomically with * the actual eglSwapBuffers(). * * The layer lists are guaranteed to be the same as the ones returned from * the last call to (*prepare)(). * * When this call returns the caller assumes that the displays will be * updated in the near future with the content of their work lists, without * artifacts during the transition from the previous frame. * * A display with zero layers indicates that the entire composition has * been handled by SurfaceFlinger with OpenGL ES. In this case, (*set)() * behaves just like eglSwapBuffers(). * * For HWC 1.0, numDisplays will always be one, and displays[0] will be * non-NULL. * * For HWC 1.1, numDisplays will always be HWC_NUM_DISPLAY_TYPES. Entries * for unsupported or disabled/disconnected display types will be NULL. * * For HWC 1.2 and later, numDisplays will be HWC_NUM_DISPLAY_TYPES or more. * The extra entries correspond to enabled virtual displays, and will be * non-NULL. In HWC 1.2, support for one virtual display is required, and * no more than one will be used. Future HWC versions might require more. * * IMPORTANT NOTE: There is an implicit layer containing opaque black * pixels behind all the layers in the list. It is the responsibility of * the hwcomposer module to make sure black pixels are output (or blended * from). * * IMPORTANT NOTE: In the event of an error this call *MUST* still cause * any fences returned in the previous call to set to eventually become * signaled. The caller may have already issued wait commands on these * fences, and having set return without causing those fences to signal * will likely result in a deadlock. * * returns: 0 on success. A negative error code on error: * HWC_EGL_ERROR: eglGetError() will provide the proper error code (only * allowed prior to HWComposer 1.1) * Another code for non EGL errors. */ int (*)(struct hwc_composer_device_1 *dev, size_t numDisplays, hwc_display_contents_1_t** displays)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*set)() is used in place of eglSwapBuffers(), and assumes the same
     * functionality, except it also commits the work list atomically with
     * the actual eglSwapBuffers().
     *
     * The layer lists are guaranteed to be the same as the ones returned from
     * the last call to (*prepare)().
     *
     * When this call returns the caller assumes that the displays will be
     * updated in the near future with the content of their work lists, without
     * artifacts during the transition from the previous frame.
     *
     * A display with zero layers indicates that the entire composition has
     * been handled by SurfaceFlinger with OpenGL ES. In this case, (*set)()
     * behaves just like eglSwapBuffers().
     *
     * For HWC 1.0, numDisplays will always be one, and displays[0] will be
     * non-NULL.
     *
     * For HWC 1.1, numDisplays will always be HWC_NUM_DISPLAY_TYPES. Entries
     * for unsupported or disabled/disconnected display types will be NULL.
     *
     * For HWC 1.2 and later, numDisplays will be HWC_NUM_DISPLAY_TYPES or more.
     * The extra entries correspond to enabled virtual displays, and will be
     * non-NULL. In HWC 1.2, support for one virtual display is required, and
     * no more than one will be used. Future HWC versions might require more.
     *
     * IMPORTANT NOTE: There is an implicit layer containing opaque black
     * pixels behind all the layers in the list. It is the responsibility of
     * the hwcomposer module to make sure black pixels are output (or blended
     * from).
     *
     * IMPORTANT NOTE: In the event of an error this call *MUST* still cause
     * any fences returned in the previous call to set to eventually become
     * signaled.  The caller may have already issued wait commands on these
     * fences, and having set return without causing those fences to signal
     * will likely result in a deadlock.
     *
     * returns: 0 on success. A negative error code on error:
     *    HWC_EGL_ERROR: eglGetError() will provide the proper error code (only
     *        allowed prior to HWComposer 1.1)
     *    Another code for non EGL errors.
     */
    int (*${name})(struct hwc_composer_device_1 *dev,
                size_t numDisplays, hwc_display_contents_1_t** displays)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6678668 "eventControl"
	public explicit_type "/* * eventControl(..., event, enabled) * Enables or disables h/w composer events for a display. * * eventControl can be called from any thread and takes effect * immediately. * * Supported events are: * HWC_EVENT_VSYNC * * returns -EINVAL if the \"event\" parameter is not one of the value above * or if the \"enabled\" parameter is not 0 or 1. */ int (*)(struct hwc_composer_device_1* dev, int disp, int event, int enabled)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * eventControl(..., event, enabled)
     * Enables or disables h/w composer events for a display.
     *
     * eventControl can be called from any thread and takes effect
     * immediately.
     *
     *  Supported events are:
     *      HWC_EVENT_VSYNC
     *
     * returns -EINVAL if the \"event\" parameter is not one of the value above
     * or if the \"enabled\" parameter is not 0 or 1.
     */
    int (*${name})(struct hwc_composer_device_1* dev, int disp,
            int event, int enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6678796 "blank"
	public explicit_type "/* * blank(..., blank) * Blanks or unblanks a display's screen. * * Turns the screen off when blank is nonzero, on when blank is zero. * Multiple sequential calls with the same blank value must be supported. * The screen state transition must be be complete when the function * returns. * * returns 0 on success, negative on error. */ int (*)(struct hwc_composer_device_1* dev, int disp, int blank)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * blank(..., blank)
     * Blanks or unblanks a display's screen.
     *
     * Turns the screen off when blank is nonzero, on when blank is zero.
     * Multiple sequential calls with the same blank value must be supported.
     * The screen state transition must be be complete when the function
     * returns.
     *
     * returns 0 on success, negative on error.
     */
    int (*${name})(struct hwc_composer_device_1* dev, int disp, int blank)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6678924 "query"
	public explicit_type "/* * Used to retrieve information about the h/w composer * * Returns 0 on success or -errno on error. */ int (*)(struct hwc_composer_device_1* dev, int what, int* value)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * Used to retrieve information about the h/w composer
     *
     * Returns 0 on success or -errno on error.
     */
    int (*${name})(struct hwc_composer_device_1* dev, int what, int* value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6679052 "registerProcs"
	public explicit_type "/* * (*registerProcs)() registers callbacks that the h/w composer HAL can * later use. It will be called immediately after the composer device is * opened with non-NULL procs. It is FORBIDDEN to call any of the callbacks * from within registerProcs(). registerProcs() must save the hwc_procs_t * pointer which is needed when calling a registered callback. */ void (*)(struct hwc_composer_device_1* dev, hwc_procs_t const* procs)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*registerProcs)() registers callbacks that the h/w composer HAL can
     * later use. It will be called immediately after the composer device is
     * opened with non-NULL procs. It is FORBIDDEN to call any of the callbacks
     * from within registerProcs(). registerProcs() must save the hwc_procs_t
     * pointer which is needed when calling a registered callback.
     */
    void (*${name})(struct hwc_composer_device_1* dev,
            hwc_procs_t const* procs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6679180 "dump"
	public explicit_type "/* * This field is OPTIONAL and can be NULL. * * If non NULL it will be called by SurfaceFlinger on dumpsys */ void (*)(struct hwc_composer_device_1* dev, char *buff, int buff_len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * This field is OPTIONAL and can be NULL.
     *
     * If non NULL it will be called by SurfaceFlinger on dumpsys
     */
    void (*${name})(struct hwc_composer_device_1* dev, char *buff, int buff_len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6679308 "getDisplayConfigs"
	public explicit_type "/* * (*getDisplayConfigs)() returns handles for the configurations available * on the connected display. These handles must remain valid as long as the * display is connected. * * Configuration handles are written to configs. The number of entries * allocated by the caller is passed in *numConfigs; getDisplayConfigs must * not try to write more than this number of config handles. On return, the * total number of configurations available for the display is returned in * *numConfigs. If *numConfigs is zero on entry, then configs may be NULL. * * HWC_DEVICE_API_VERSION_1_1 does not provide a way to choose a config. * For displays that support multiple configurations, the h/w composer * implementation should choose one and report it as the first config in * the list. Reporting the not-chosen configs is not required. * * Returns 0 on success or -errno on error. If disp is a hotpluggable * display type and no display is connected, an error should be returned. * * This field is REQUIRED for HWC_DEVICE_API_VERSION_1_1 and later. * It should be NULL for previous versions. */ int (*)(struct hwc_composer_device_1* dev, int disp, uint32_t* configs, size_t* numConfigs)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*getDisplayConfigs)() returns handles for the configurations available
     * on the connected display. These handles must remain valid as long as the
     * display is connected.
     *
     * Configuration handles are written to configs. The number of entries
     * allocated by the caller is passed in *numConfigs; getDisplayConfigs must
     * not try to write more than this number of config handles. On return, the
     * total number of configurations available for the display is returned in
     * *numConfigs. If *numConfigs is zero on entry, then configs may be NULL.
     *
     * HWC_DEVICE_API_VERSION_1_1 does not provide a way to choose a config.
     * For displays that support multiple configurations, the h/w composer
     * implementation should choose one and report it as the first config in
     * the list. Reporting the not-chosen configs is not required.
     *
     * Returns 0 on success or -errno on error. If disp is a hotpluggable
     * display type and no display is connected, an error should be returned.
     *
     * This field is REQUIRED for HWC_DEVICE_API_VERSION_1_1 and later.
     * It should be NULL for previous versions.
     */
    int (*${name})(struct hwc_composer_device_1* dev, int disp,
            uint32_t* configs, size_t* numConfigs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6679436 "getDisplayAttributes"
	public explicit_type "/* * (*getDisplayAttributes)() returns attributes for a specific config of a * connected display. The config parameter is one of the config handles * returned by getDisplayConfigs. * * The list of attributes to return is provided in the attributes * parameter, terminated by HWC_DISPLAY_NO_ATTRIBUTE. The value for each * requested attribute is written in order to the values array. The * HWC_DISPLAY_NO_ATTRIBUTE attribute does not have a value, so the values * array will have one less value than the attributes array. * * This field is REQUIRED for HWC_DEVICE_API_VERSION_1_1 and later. * It should be NULL for previous versions. * * If disp is a hotpluggable display type and no display is connected, * or if config is not a valid configuration for the display, a negative * value should be returned. */ int (*)(struct hwc_composer_device_1* dev, int disp, uint32_t config, const uint32_t* attributes, int32_t* values)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*getDisplayAttributes)() returns attributes for a specific config of a
     * connected display. The config parameter is one of the config handles
     * returned by getDisplayConfigs.
     *
     * The list of attributes to return is provided in the attributes
     * parameter, terminated by HWC_DISPLAY_NO_ATTRIBUTE. The value for each
     * requested attribute is written in order to the values array. The
     * HWC_DISPLAY_NO_ATTRIBUTE attribute does not have a value, so the values
     * array will have one less value than the attributes array.
     *
     * This field is REQUIRED for HWC_DEVICE_API_VERSION_1_1 and later.
     * It should be NULL for previous versions.
     *
     * If disp is a hotpluggable display type and no display is connected,
     * or if config is not a valid configuration for the display, a negative
     * value should be returned.
     */
    int (*${name})(struct hwc_composer_device_1* dev, int disp,
            uint32_t config, const uint32_t* attributes, int32_t* values)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6679564 "reserved_proc"
	public explicit_type "void"
	multiplicity "[4]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1739148 "hwc_composer_device_1_t"
      visibility package stereotype "typedef" base_type class_ref 1739020 // hwc_composer_device_1
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1739276 "anonymous9"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * hwc_layer_t::hints values
 * Hints are set by the HAL and read by SurfaceFlinger"
      attribute 6679692 "HWC_HINT_TRIPLE_BUFFER"
	public type class_ref 1739276 // anonymous9
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6679820 "HWC_HINT_CLEAR_FB"
	public type class_ref 1739276 // anonymous9
	init_value " 0x00000002
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1739404 "anonymous10"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "     * HWC can set the HWC_HINT_TRIPLE_BUFFER hint to indicate to SurfaceFlinger
     * that it should triple buffer this layer. Typically HWC does this when
     * the layer will be unavailable for use for an extended period of time,
     * e.g. if the display will be fetching data directly from the layer and
     * the layer can not be modified until after the next set().
     

     * HWC sets HWC_HINT_CLEAR_FB to tell SurfaceFlinger that it should clear the
     * framebuffer with transparent pixels where this layer would be.
     * SurfaceFlinger will only honor this flag when the layer has no blending
     *
     

 * hwc_layer_t::flags values
 * Flags are set by SurfaceFlinger and read by the HAL"
      attribute 6679948 "HWC_SKIP_LAYER"
	public type class_ref 1739404 // anonymous10
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1739532 "anonymous11"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "     * HWC_SKIP_LAYER is set by SurfaceFlnger to indicate that the HAL
     * shall not consider this layer for composition as it will be handled
     * by SurfaceFlinger (just as if compositionType was set to HWC_OVERLAY).
     

 * hwc_layer_t::compositionType values"
      attribute 6680076 "HWC_FRAMEBUFFER"
	public type class_ref 1739532 // anonymous11
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6680204 "HWC_OVERLAY"
	public type class_ref 1739532 // anonymous11
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6680332 "HWC_BACKGROUND"
	public type class_ref 1739532 // anonymous11
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6680460 "HWC_FRAMEBUFFER_TARGET"
	public type class_ref 1739532 // anonymous11
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1739660 "anonymous12"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " this layer is to be drawn into the framebuffer by SurfaceFlinger 
 this layer will be handled in the HWC 
 this is the background layer. it's used to set the background color.
     * there is only a single background layer 
 this layer holds the result of compositing the HWC_FRAMEBUFFER layers.
     * Added in HWC_DEVICE_API_VERSION_1_1. 

 * hwc_layer_t::blending values"
      attribute 6680588 "HWC_BLENDING_NONE"
	public type class_ref 1739660 // anonymous12
	init_value " 0x0100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6680716 "HWC_BLENDING_PREMULT"
	public type class_ref 1739660 // anonymous12
	init_value " 0x0105"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6680844 "HWC_BLENDING_COVERAGE"
	public type class_ref 1739660 // anonymous12
	init_value " 0x0405"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6680972 "HWC_BLENDING_DIM"
	public type class_ref 1739660 // anonymous12
	init_value " 0x0805"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1739788 "anonymous13"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " no blending 
 ONE / ONE_MINUS_SRC_ALPHA 
 SRC_ALPHA / ONE_MINUS_SRC_ALPHA 
 DIM. source is forced to a solid color (0,0,0,alpha), and apply
     * (ONE / ONE_MINUS_SRC_ALPHA) blending during composition. 

 * hwc_layer_t::transform values"
      attribute 6681100 "HWC_TRANSFORM_FLIP_H"
	public type class_ref 1739788 // anonymous13
	init_value " HAL_TRANSFORM_FLIP_H"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6681228 "HWC_TRANSFORM_FLIP_V"
	public type class_ref 1739788 // anonymous13
	init_value " HAL_TRANSFORM_FLIP_V"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6681356 "HWC_TRANSFORM_ROT_90"
	public type class_ref 1739788 // anonymous13
	init_value " HAL_TRANSFORM_ROT_90"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6681484 "HWC_TRANSFORM_ROT_180"
	public type class_ref 1739788 // anonymous13
	init_value " HAL_TRANSFORM_ROT_180"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6681612 "HWC_TRANSFORM_ROT_270"
	public type class_ref 1739788 // anonymous13
	init_value " HAL_TRANSFORM_ROT_270"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1739916 "anonymous14"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " flip source image horizontally 
 flip source image vertically 
 rotate source image 90 degrees clock-wise 
 rotate source image 180 degrees 
 rotate source image 270 degrees clock-wise 
 attributes queriable with query() "
      attribute 6681740 "HWC_BACKGROUND_LAYER_SUPPORTED"
	public type class_ref 1739916 // anonymous14
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6681868 "HWC_VSYNC_PERIOD"
	public type class_ref 1739916 // anonymous14
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6681996 "HWC_DISPLAY_TYPES_SUPPORTED"
	public type class_ref 1739916 // anonymous14
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1740044 "anonymous15"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "     * Availability: HWC_DEVICE_API_VERSION_0_2
     * Must return 1 if the background layer is supported, 0 otherwise.
     

     * Availability: HWC_DEVICE_API_VERSION_0_3
     * Returns the vsync period in nanoseconds.
     *
     * This query is not used for HWC_DEVICE_API_VERSION_1_1 and later.
     * Instead, the per-display attribute HWC_DISPLAY_VSYNC_PERIOD is used.
     

     * Availability: HWC_DEVICE_API_VERSION_1_1
     * Returns a mask of supported display types.
     
 display attributes returned by getDisplayAttributes() "
      attribute 6682124 "HWC_DISPLAY_NO_ATTRIBUTE"
	public type class_ref 1740044 // anonymous15
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6682252 "HWC_DISPLAY_VSYNC_PERIOD"
	public type class_ref 1740044 // anonymous15
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6682380 "HWC_DISPLAY_WIDTH"
	public type class_ref 1740044 // anonymous15
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6682508 "HWC_DISPLAY_HEIGHT"
	public type class_ref 1740044 // anonymous15
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6682636 "HWC_DISPLAY_DPI_X"
	public type class_ref 1740044 // anonymous15
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6682764 "HWC_DISPLAY_DPI_Y"
	public type class_ref 1740044 // anonymous15
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1740172 "anonymous16"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Indicates the end of an attribute list 
 The vsync period in nanoseconds 
 The number of pixels in the horizontal and vertical directions. 
 The number of pixels per thousand inches of this configuration.
     *
     * Scaling DPI by 1000 allows it to be stored in an int without losing
     * too much precision.
     *
     * If the DPI for a configuration is unavailable or the HWC implementation
     * considers it unreliable, it should set these attributes to zero.
     
 Allowed events for hwc_methods::eventControl() "
      attribute 6682892 "HWC_EVENT_VSYNC"
	public type class_ref 1740172 // anonymous16
	init_value " 0
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1740300 "anonymous17"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Display types and associated mask bits. "
      attribute 6683020 "HWC_DISPLAY_PRIMARY"
	public type class_ref 1740300 // anonymous17
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6683148 "HWC_DISPLAY_EXTERNAL"
	public type class_ref 1740300 // anonymous17
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6683276 "HWC_NUM_DISPLAY_TYPES"
	public type class_ref 1740300 // anonymous17
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1740428 "anonymous18"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " HDMI, DP, etc."
      attribute 6683404 "HWC_DISPLAY_PRIMARY_BIT"
	public type class_ref 1740428 // anonymous18
	init_value " 1 << HWC_DISPLAY_PRIMARY"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6683532 "HWC_DISPLAY_EXTERNAL_BIT"
	public type class_ref 1740428 // anonymous18
	init_value " 1 << HWC_DISPLAY_EXTERNAL"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1740556 "hwc_methods"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * availability: HWC_DEVICE_API_VERSION_0_3
 *
 * struct hwc_methods cannot be embedded in other structures as
 * sizeof(struct hwc_methods) cannot be relied upon.
 *"
      attribute 6683660 "eventControl"
	public explicit_type "/************************************************************************* * HWC_DEVICE_API_VERSION_0_3 *************************************************************************/ /* * eventControl(..., event, enabled) * Enables or disables h/w composer events. * * eventControl can be called from any thread and takes effect * immediately. * * Supported events are: * HWC_EVENT_VSYNC * * returns -EINVAL if the \"event\" parameter is not one of the value above * or if the \"enabled\" parameter is not 0 or 1. */ int (*)( struct hwc_composer_device* dev, int event, int enabled)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}

    /*************************************************************************
     * HWC_DEVICE_API_VERSION_0_3
     *************************************************************************/

    /*
     * eventControl(..., event, enabled)
     * Enables or disables h/w composer events.
     *
     * eventControl can be called from any thread and takes effect
     * immediately.
     *
     *  Supported events are:
     *      HWC_EVENT_VSYNC
     *
     * returns -EINVAL if the \"event\" parameter is not one of the value above
     * or if the \"enabled\" parameter is not 0 or 1.
     */

    int (*${name})(
            struct hwc_composer_device* dev, int event, int enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1740684 "hwc_methods_t"
      visibility package stereotype "typedef" base_type class_ref 1740556 // hwc_methods
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1740812 "hwc_layer"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6683788 "compositionType"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6683916 "hints"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6684044 "flags"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3555724 // backgroundColor (<directional composition>)
	relation 3555596 *-->
	  a role_name "backgroundColor" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3555724 // backgroundColor (<directional composition>)
	  b parent class_ref 1737356 // hwc_color_t
      end

      attribute 6684172 "handle"
	public explicit_type "buffer_handle_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6684300 "transform"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6684428 "blending"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6684556 "sourceCrop"
	public explicit_type "hwc_rect_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6684684 "displayFrame"
	public explicit_type "hwc_rect_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3555852 // visibleRegionScreen (<directional composition>)
	relation 3555724 *-->
	  a role_name "visibleRegionScreen" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3555852 // visibleRegionScreen (<directional composition>)
	  b parent class_ref 1737100 // hwc_region_t
      end
    end

    class 1740940 "hwc_layer_t"
      visibility package stereotype "typedef" explicit_base_type ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1741068 "hwc_layer_list"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * List of layers.
 * The handle members of hwLayers elements must be unique."
      attribute 6684812 "flags"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6684940 "numHwLayers"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3555980 // hwLayers (<directional composition>)
	relation 3555852 *-->
	  a role_name "hwLayers" multiplicity "[0]" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3555980 // hwLayers (<directional composition>)
	  b parent class_ref 1740940 // hwc_layer_t
      end
    end

    class 1741196 "hwc_layer_list_t"
      visibility package stereotype "typedef" base_type class_ref 1741068 // hwc_layer_list
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1741324 "hwc_composer_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "***************************************************************************"
      classrelation 3556108 // common (<directional composition>)
	relation 3555980 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3556108 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6685068 "prepare"
	public explicit_type "/* * (*prepare)() is called for each frame before composition and is used by * SurfaceFlinger to determine what composition steps the HWC can handle. * * (*prepare)() can be called more than once, the last call prevails. * * The HWC responds by setting the compositionType field to either * HWC_FRAMEBUFFER or HWC_OVERLAY. In the former case, the composition for * this layer is handled by SurfaceFlinger with OpenGL ES, in the later * case, the HWC will have to handle this layer's composition. * * (*prepare)() is called with HWC_GEOMETRY_CHANGED to indicate that the * list's geometry has changed, that is, when more than just the buffer's * handles have been updated. Typically this happens (but is not limited to) * when a window is added, removed, resized or moved. * * a NULL list parameter or a numHwLayers of zero indicates that the * entire composition will be handled by SurfaceFlinger with OpenGL ES. * * returns: 0 on success. An negative error code on error. If an error is * returned, SurfaceFlinger will assume that none of the layer will be * handled by the HWC. */ int (*)(struct hwc_composer_device *dev, hwc_layer_list_t* list)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*prepare)() is called for each frame before composition and is used by
     * SurfaceFlinger to determine what composition steps the HWC can handle.
     *
     * (*prepare)() can be called more than once, the last call prevails.
     *
     * The HWC responds by setting the compositionType field to either
     * HWC_FRAMEBUFFER or HWC_OVERLAY. In the former case, the composition for
     * this layer is handled by SurfaceFlinger with OpenGL ES, in the later
     * case, the HWC will have to handle this layer's composition.
     *
     * (*prepare)() is called with HWC_GEOMETRY_CHANGED to indicate that the
     * list's geometry has changed, that is, when more than just the buffer's
     * handles have been updated. Typically this happens (but is not limited to)
     * when a window is added, removed, resized or moved.
     *
     * a NULL list parameter or a numHwLayers of zero indicates that the
     * entire composition will be handled by SurfaceFlinger with OpenGL ES.
     *
     * returns: 0 on success. An negative error code on error. If an error is
     * returned, SurfaceFlinger will assume that none of the layer will be
     * handled by the HWC.
     */
    int (*${name})(struct hwc_composer_device *dev, hwc_layer_list_t* list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6685196 "set"
	public explicit_type "/* * (*set)() is used in place of eglSwapBuffers(), and assumes the same * functionality, except it also commits the work list atomically with * the actual eglSwapBuffers(). * * The list parameter is guaranteed to be the same as the one returned * from the last call to (*prepare)(). * * When this call returns the caller assumes that: * * - the display will be updated in the near future with the content * of the work list, without artifacts during the transition from the * previous frame. * * - all objects are available for immediate access or destruction, in * particular, hwc_region_t::rects data and hwc_layer_t::layer's buffer. * Note that this means that immediately accessing (potentially from a * different process) a buffer used in this call will not result in * screen corruption, the driver must apply proper synchronization or * scheduling (eg: block the caller, such as gralloc_module_t::lock(), * OpenGL ES, Camera, Codecs, etc..., or schedule the caller's work * after the buffer is freed from the actual composition). * * a NULL list parameter or a numHwLayers of zero indicates that the * entire composition has been handled by SurfaceFlinger with OpenGL ES. * In this case, (*set)() behaves just like eglSwapBuffers(). * * dpy, sur, and list are set to NULL to indicate that the screen is * turning off. This happens WITHOUT prepare() being called first. * This is a good time to free h/w resources and/or power * the relevant h/w blocks down. * * IMPORTANT NOTE: there is an implicit layer containing opaque black * pixels behind all the layers in the list. * It is the responsibility of the hwcomposer module to make * sure black pixels are output (or blended from). * * returns: 0 on success. An negative error code on error: * HWC_EGL_ERROR: eglGetError() will provide the proper error code * Another code for non EGL errors. * */ int (*)(struct hwc_composer_device *dev, hwc_display_t dpy, hwc_surface_t sur, hwc_layer_list_t* list)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*set)() is used in place of eglSwapBuffers(), and assumes the same
     * functionality, except it also commits the work list atomically with
     * the actual eglSwapBuffers().
     *
     * The list parameter is guaranteed to be the same as the one returned
     * from the last call to (*prepare)().
     *
     * When this call returns the caller assumes that:
     *
     * - the display will be updated in the near future with the content
     *   of the work list, without artifacts during the transition from the
     *   previous frame.
     *
     * - all objects are available for immediate access or destruction, in
     *   particular, hwc_region_t::rects data and hwc_layer_t::layer's buffer.
     *   Note that this means that immediately accessing (potentially from a
     *   different process) a buffer used in this call will not result in
     *   screen corruption, the driver must apply proper synchronization or
     *   scheduling (eg: block the caller, such as gralloc_module_t::lock(),
     *   OpenGL ES, Camera, Codecs, etc..., or schedule the caller's work
     *   after the buffer is freed from the actual composition).
     *
     * a NULL list parameter or a numHwLayers of zero indicates that the
     * entire composition has been handled by SurfaceFlinger with OpenGL ES.
     * In this case, (*set)() behaves just like eglSwapBuffers().
     *
     * dpy, sur, and list are set to NULL to indicate that the screen is
     * turning off. This happens WITHOUT prepare() being called first.
     * This is a good time to free h/w resources and/or power
     * the relevant h/w blocks down.
     *
     * IMPORTANT NOTE: there is an implicit layer containing opaque black
     * pixels behind all the layers in the list.
     * It is the responsibility of the hwcomposer module to make
     * sure black pixels are output (or blended from).
     *
     * returns: 0 on success. An negative error code on error:
     *    HWC_EGL_ERROR: eglGetError() will provide the proper error code
     *    Another code for non EGL errors.
     *
     */
    int (*${name})(struct hwc_composer_device *dev,
                hwc_display_t dpy,
                hwc_surface_t sur,
                hwc_layer_list_t* list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6685324 "dump"
	public explicit_type "/* * This field is OPTIONAL and can be NULL. * * If non NULL it will be called by SurfaceFlinger on dumpsys */ void (*)(struct hwc_composer_device* dev, char *buff, int buff_len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * This field is OPTIONAL and can be NULL.
     *
     * If non NULL it will be called by SurfaceFlinger on dumpsys
     */
    void (*${name})(struct hwc_composer_device* dev, char *buff, int buff_len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6685452 "registerProcs"
	public explicit_type "/* * This field is OPTIONAL and can be NULL. * * (*registerProcs)() registers a set of callbacks the h/w composer HAL * can later use. It is FORBIDDEN to call any of the callbacks from * within registerProcs(). registerProcs() must save the hwc_procs_t pointer * which is needed when calling a registered callback. * Each call to registerProcs replaces the previous set of callbacks. * registerProcs is called with NULL to unregister all callbacks. * * Any of the callbacks can be NULL, in which case the corresponding * functionality is not supported. */ void (*)(struct hwc_composer_device* dev, hwc_procs_t const* procs)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * This field is OPTIONAL and can be NULL.
     *
     * (*registerProcs)() registers a set of callbacks the h/w composer HAL
     * can later use. It is FORBIDDEN to call any of the callbacks from
     * within registerProcs(). registerProcs() must save the hwc_procs_t pointer
     * which is needed when calling a registered callback.
     * Each call to registerProcs replaces the previous set of callbacks.
     * registerProcs is called with NULL to unregister all callbacks.
     *
     * Any of the callbacks can be NULL, in which case the corresponding
     * functionality is not supported.
     */
    void (*${name})(struct hwc_composer_device* dev,
            hwc_procs_t const* procs)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6685580 "query"
	public explicit_type "/* * This field is OPTIONAL and can be NULL. * availability: HWC_DEVICE_API_VERSION_0_2 * * Used to retrieve information about the h/w composer * * Returns 0 on success or -errno on error. */ int (*)(struct hwc_composer_device* dev, int what, int* value)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * This field is OPTIONAL and can be NULL.
     * availability: HWC_DEVICE_API_VERSION_0_2
     *
     * Used to retrieve information about the h/w composer
     *
     * Returns 0 on success or -errno on error.
     */
    int (*${name})(struct hwc_composer_device* dev, int what, int* value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6685708 "reserved_proc"
	public explicit_type "void"
	multiplicity "[4]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3556236 // methods (<unidirectional association>)
	relation 3556108 --->
	  a role_name "methods" const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3556236 // methods (<unidirectional association>)
	  b parent class_ref 1740684 // hwc_methods_t
      end
    end

    class 1741452 "hwc_composer_device_t"
      visibility package stereotype "typedef" base_type class_ref 1741324 // hwc_composer_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1741580 "keystore_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3556364 // common (<directional composition>)
	relation 3556236 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3556364 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end
    end

    class 1741708 "keymaster_keypair_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Asymmetric key pair types."
      attribute 6685836 "TYPE_RSA"
	public type class_ref 1741708 // keymaster_keypair_t
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1741836 "keymaster_rsa_keygen_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Parameters needed to generate an RSA key."
      attribute 6685964 "modulus_size"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6686092 "public_exponent"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1741964 "keymaster_rsa_digest_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Digest type used for RSA operations."
      attribute 6686220 "DIGEST_NONE"
	public type class_ref 1741964 // keymaster_rsa_digest_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1742092 "keymaster_rsa_padding_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Type of padding used for RSA operations."
      attribute 6686348 "PADDING_NONE"
	public type class_ref 1742092 // keymaster_rsa_padding_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1742220 "keymaster_rsa_sign_params_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3556492 // digest_type (<directional composition>)
	relation 3556364 *-->
	  a role_name "digest_type" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3556492 // digest_type (<directional composition>)
	  b parent class_ref 1741964 // keymaster_rsa_digest_t
      end

      classrelation 3556620 // padding_type (<directional composition>)
	relation 3556492 *-->
	  a role_name "padding_type" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3556620 // padding_type (<directional composition>)
	  b parent class_ref 1742092 // keymaster_rsa_padding_t
      end
    end

    class 1742348 "keymaster_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The parameters that can be set for a given keymaster implementation."
      classrelation 3556748 // common (<directional composition>)
	relation 3556620 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3556748 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6686476 "client_version"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6686604 "flags"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6686732 "context"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6686860 "generate_keypair"
	public explicit_type "/** * Generates a public and private key. The key-blob returned is opaque * and must subsequently provided for signing and verification. * * Returns: 0 on success or an error code less than 0. */ int (*)(const struct keymaster_device* dev, const keymaster_keypair_t key_type, const void* key_params, uint8_t** key_blob, size_t* key_blob_length)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Generates a public and private key. The key-blob returned is opaque
     * and must subsequently provided for signing and verification.
     *
     * Returns: 0 on success or an error code less than 0.
     */
    int (*${name})(const struct keymaster_device* dev,
            const keymaster_keypair_t key_type, const void* key_params,
            uint8_t** key_blob, size_t* key_blob_length)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6686988 "import_keypair"
	public explicit_type "/** * Imports a public and private key pair. The imported keys will be in * PKCS#8 format with DER encoding (Java standard). The key-blob * returned is opaque and will be subsequently provided for signing * and verification. * * Returns: 0 on success or an error code less than 0. */ int (*)(const struct keymaster_device* dev, const uint8_t* key, const size_t key_length, uint8_t** key_blob, size_t* key_blob_length)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Imports a public and private key pair. The imported keys will be in
     * PKCS#8 format with DER encoding (Java standard). The key-blob
     * returned is opaque and will be subsequently provided for signing
     * and verification.
     *
     * Returns: 0 on success or an error code less than 0.
     */
    int (*${name})(const struct keymaster_device* dev,
            const uint8_t* key, const size_t key_length,
            uint8_t** key_blob, size_t* key_blob_length)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6687116 "get_keypair_public"
	public explicit_type "/** * Gets the public key part of a key pair. The public key must be in * X.509 format (Java standard) encoded byte array. * * Returns: 0 on success or an error code less than 0. * On error, x509_data should not be allocated. */ int (*)(const struct keymaster_device* dev, const uint8_t* key_blob, const size_t key_blob_length, uint8_t** x509_data, size_t* x509_data_length)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Gets the public key part of a key pair. The public key must be in
     * X.509 format (Java standard) encoded byte array.
     *
     * Returns: 0 on success or an error code less than 0.
     * On error, x509_data should not be allocated.
     */
    int (*${name})(const struct keymaster_device* dev,
            const uint8_t* key_blob, const size_t key_blob_length,
            uint8_t** x509_data, size_t* x509_data_length)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6687244 "delete_keypair"
	public explicit_type "/** * Deletes the key pair associated with the key blob. * * This function is optional and should be set to NULL if it is not * implemented. * * Returns 0 on success or an error code less than 0. */ int (*)(const struct keymaster_device* dev, const uint8_t* key_blob, const size_t key_blob_length)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Deletes the key pair associated with the key blob.
     *
     * This function is optional and should be set to NULL if it is not
     * implemented.
     *
     * Returns 0 on success or an error code less than 0.
     */
    int (*${name})(const struct keymaster_device* dev,
            const uint8_t* key_blob, const size_t key_blob_length)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6687372 "delete_all"
	public explicit_type "/** * Deletes all keys in the hardware keystore. Used when keystore is * reset completely. * * This function is optional and should be set to NULL if it is not * implemented. * * Returns 0 on success or an error code less than 0. */ int (*)(const struct keymaster_device* dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Deletes all keys in the hardware keystore. Used when keystore is
     * reset completely.
     *
     * This function is optional and should be set to NULL if it is not
     * implemented.
     *
     * Returns 0 on success or an error code less than 0.
     */
    int (*${name})(const struct keymaster_device* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6687500 "sign_data"
	public explicit_type "/** * Signs data using a key-blob generated before. This can use either * an asymmetric key or a secret key. * * Returns: 0 on success or an error code less than 0. */ int (*)(const struct keymaster_device* dev, const void* signing_params, const uint8_t* key_blob, const size_t key_blob_length, const uint8_t* data, const size_t data_length, uint8_t** signed_data, size_t* signed_data_length)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Signs data using a key-blob generated before. This can use either
     * an asymmetric key or a secret key.
     *
     * Returns: 0 on success or an error code less than 0.
     */
    int (*${name})(const struct keymaster_device* dev,
            const void* signing_params,
            const uint8_t* key_blob, const size_t key_blob_length,
            const uint8_t* data, const size_t data_length,
            uint8_t** signed_data, size_t* signed_data_length)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6687628 "verify_data"
	public explicit_type "/** * Verifies data signed with a key-blob. This can use either * an asymmetric key or a secret key. * * Returns: 0 on successful verification or an error code less than 0. */ int (*)(const struct keymaster_device* dev, const void* signing_params, const uint8_t* key_blob, const size_t key_blob_length, const uint8_t* signed_data, const size_t signed_data_length, const uint8_t* signature, const size_t signature_length)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Verifies data signed with a key-blob. This can use either
     * an asymmetric key or a secret key.
     *
     * Returns: 0 on successful verification or an error code less than 0.
     */
    int (*${name})(const struct keymaster_device* dev,
            const void* signing_params,
            const uint8_t* key_blob, const size_t key_blob_length,
            const uint8_t* signed_data, const size_t signed_data_length,
            const uint8_t* signature, const size_t signature_length)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1742476 "keymaster_device_t"
      visibility package stereotype "typedef" base_type class_ref 1742348 // keymaster_device
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3556876 // <dependency>
	relation 3556748 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3556876 // <dependency>
	  b parent class_ref 1742348 // keymaster_device
      end
    end

    class 1742604 "light_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3557004 // common (<directional composition>)
	relation 3556876 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3557004 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6687756 "set_light"
	public explicit_type "/** * Set the provided lights to the provided values. * * Returns: 0 on succes, error code on failure. */ int (*)(struct light_device_t* dev, struct light_state_t const* state)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Set the provided lights to the provided values.
     *
     * Returns: 0 on succes, error code on failure.
     */
    int (*${name})(struct light_device_t* dev,
            struct light_state_t const* state)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1742732 "local_time_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
 * and the fields of this data structure must begin with hw_module_t
 * followed by module specific information."
      classrelation 3557132 // common (<directional composition>)
	relation 3557004 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3557132 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end
    end

    class 1742860 "local_time_hw_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3557260 // common (<directional composition>)
	relation 3557132 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3557260 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6687884 "get_local_time"
	public explicit_type "/** * * Returns the current value of the system wide local time counter */ int64_t (*)(struct local_time_hw_device* dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     *
     * Returns the current value of the system wide local time counter
     */
    int64_t (*${name})(struct local_time_hw_device* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6688012 "get_local_freq"
	public explicit_type "/** * * Returns the nominal frequency (in hertz) of the system wide local time * counter */ uint64_t (*)(struct local_time_hw_device* dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     *
     * Returns the nominal frequency (in hertz) of the system wide local time
     * counter
     */
    uint64_t (*${name})(struct local_time_hw_device* dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6688140 "set_local_slew"
	public explicit_type "/** * * Sets the HW slew rate of oscillator which drives the system wide local * time counter. On success, platforms should return 0. Platforms which * do not support HW slew should leave this method set to NULL. * * Valid values for rate range from MIN_INT16 to MAX_INT16. Platform * implementations should attempt map this range linearly to the min/max * slew rate of their hardware. */ int (*)(struct local_time_hw_device* dev, int16_t rate)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     *
     * Sets the HW slew rate of oscillator which drives the system wide local
     * time counter.  On success, platforms should return 0.  Platforms which
     * do not support HW slew should leave this method set to NULL.
     *
     * Valid values for rate range from MIN_INT16 to MAX_INT16.  Platform
     * implementations should attempt map this range linearly to the min/max
     * slew rate of their hardware.
     */
    int (*${name})(struct local_time_hw_device* dev, int16_t rate)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6688268 "get_debug_log"
	public explicit_type "/** * * A method used to collect low level sync data in a lab environments. * Most HAL implementations will simply set this member to NULL, or return * -EINVAL to indicate that this functionality is not supported. * Production HALs should never support this method. */ int (*)(struct local_time_hw_device* dev, struct local_time_debug_event* records, int max_records)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     *
     * A method used to collect low level sync data in a lab environments.
     * Most HAL implementations will simply set this member to NULL, or return
     * -EINVAL to indicate that this functionality is not supported.
     * Production HALs should never support this method.
     */
    int (*${name})(struct local_time_hw_device* dev,
                         struct local_time_debug_event* records,
                         int max_records)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1742988 "local_time_hw_device_t"
      visibility package stereotype "typedef" base_type class_ref 1742860 // local_time_hw_device
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3557388 // <dependency>
	relation 3557260 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3557388 // <dependency>
	  b parent class_ref 1742860 // local_time_hw_device
      end
    end

    class 1743116 "nfc_event_t"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * HAL events that can be passed back to the stack"
    end

    class 1743244 "anonymous19"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6688396 "HAL_NFC_OPEN_CPLT_EVT"
	public type class_ref 1743244 // anonymous19
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6688524 "HAL_NFC_CLOSE_CPLT_EVT"
	public type class_ref 1743244 // anonymous19
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6688652 "HAL_NFC_POST_INIT_CPLT_EVT"
	public type class_ref 1743244 // anonymous19
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6688780 "HAL_NFC_PRE_DISCOVER_CPLT_EVT"
	public type class_ref 1743244 // anonymous19
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6688908 "HAL_NFC_REQUEST_CONTROL_EVT"
	public type class_ref 1743244 // anonymous19
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6689036 "HAL_NFC_RELEASE_CONTROL_EVT"
	public type class_ref 1743244 // anonymous19
	init_value " 0x05"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6689164 "HAL_NFC_ERROR_EVT"
	public type class_ref 1743244 // anonymous19
	init_value " 0x06
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1743372 "nfc_status_t"
      visibility package stereotype "typedef" explicit_base_type "uint8_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Allowed status return values for each of the HAL methods"
    end

    class 1743500 "anonymous20"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6689292 "HAL_NFC_STATUS_OK"
	public type class_ref 1743500 // anonymous20
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6689420 "HAL_NFC_STATUS_FAILED"
	public type class_ref 1743500 // anonymous20
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6689548 "HAL_NFC_STATUS_ERR_TRANSPORT"
	public type class_ref 1743500 // anonymous20
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6689676 "HAL_NFC_STATUS_ERR_CMD_TIMEOUT"
	public type class_ref 1743500 // anonymous20
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6689804 "HAL_NFC_STATUS_REFUSED"
	public type class_ref 1743500 // anonymous20
	init_value " 0x04
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1743628 "nfc_stack_callback_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name}) (nfc_event_t event, nfc_status_t event_status);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * The callback passed in from the NFC stack that the HAL
 * can use to pass events back to the stack."
    end

    class 1743756 "nfc_stack_data_callback_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name}) (uint16_t data_len, uint8_t* p_data);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * The callback passed in from the NFC stack that the HAL
 * can use to pass incomming data to the stack."
    end

    class 1743884 "nfc_nci_device"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " nfc_nci_device_t starts with a hw_device_t struct,
 * followed by device-specific methods and members.
 *
 * All methods in the NCI HAL are asynchronous."
      classrelation 3557516 // common (<directional composition>)
	relation 3557388 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3557516 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6689932 "open"
	public explicit_type "/* * (*open)() Opens the NFC controller device and performs initialization. * This may include patch download and other vendor-specific initialization. * * If open completes successfully, the controller should be ready to perform * NCI initialization - ie accept CORE_RESET and subsequent commands through * the write() call. * * If open() returns 0, the NCI stack will wait for a HAL_NFC_OPEN_CPLT_EVT * before continuing. * * If open() returns any other value, the NCI stack will stop. * */ int (*)(const struct nfc_nci_device *p_dev, nfc_stack_callback_t *p_cback, nfc_stack_data_callback_t *p_data_cback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    /*
     * (*open)() Opens the NFC controller device and performs initialization.
     * This may include patch download and other vendor-specific initialization.
     *
     * If open completes successfully, the controller should be ready to perform
     * NCI initialization - ie accept CORE_RESET and subsequent commands through
     * the write() call.
     *
     * If open() returns 0, the NCI stack will wait for a HAL_NFC_OPEN_CPLT_EVT
     * before continuing.
     *
     * If open() returns any other value, the NCI stack will stop.
     *
     */
    int (*${name})(const struct nfc_nci_device *p_dev, nfc_stack_callback_t *p_cback,
            nfc_stack_data_callback_t *p_data_cback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6690060 "write"
	public explicit_type "/* * (*write)() Performs an NCI write. * * This method may queue writes and return immediately. The only * requirement is that the writes are executed in order. */ int (*)(const struct nfc_nci_device *p_dev, uint16_t data_len, const uint8_t *p_data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*write)() Performs an NCI write.
     *
     * This method may queue writes and return immediately. The only
     * requirement is that the writes are executed in order.
     */
    int (*${name})(const struct nfc_nci_device *p_dev, uint16_t data_len, const uint8_t *p_data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6690188 "core_initialized"
	public explicit_type "/* * (*core_initialized)() is called after the CORE_INIT_RSP is received from the NFCC. * At this time, the HAL can do any chip-specific configuration. * * If core_initialized() returns 0, the NCI stack will wait for a HAL_NFC_POST_INIT_CPLT_EVT * before continuing. * * If core_initialized() returns any other value, the NCI stack will continue * immediately. */ int (*)(const struct nfc_nci_device *p_dev, uint8_t* p_core_init_rsp_params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*core_initialized)() is called after the CORE_INIT_RSP is received from the NFCC.
     * At this time, the HAL can do any chip-specific configuration.
     *
     * If core_initialized() returns 0, the NCI stack will wait for a HAL_NFC_POST_INIT_CPLT_EVT
     * before continuing.
     *
     * If core_initialized() returns any other value, the NCI stack will continue
     * immediately.
     */
    int (*${name})(const struct nfc_nci_device *p_dev, uint8_t* p_core_init_rsp_params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6690316 "pre_discover"
	public explicit_type "/* * (*pre_discover)() Is called every time before starting RF discovery. * It is a good place to do vendor-specific configuration that must be * performed every time RF discovery is about to be started. * * If pre_discover() returns 0, the NCI stack will wait for a HAL_NFC_PRE_DISCOVER_CPLT_EVT * before continuing. * * If pre_discover() returns any other value, the NCI stack will start * RF discovery immediately. */ int (*)(const struct nfc_nci_device *p_dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*pre_discover)() Is called every time before starting RF discovery.
     * It is a good place to do vendor-specific configuration that must be
     * performed every time RF discovery is about to be started.
     *
     * If pre_discover() returns 0, the NCI stack will wait for a HAL_NFC_PRE_DISCOVER_CPLT_EVT
     * before continuing.
     *
     * If pre_discover() returns any other value, the NCI stack will start
     * RF discovery immediately.
     */
    int (*${name})(const struct nfc_nci_device *p_dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6690444 "close"
	public explicit_type "/* * (*close)() Closed the NFC controller. Should free all resources. */ int (*)(const struct nfc_nci_device *p_dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*close)() Closed the NFC controller. Should free all resources.
     */
    int (*${name})(const struct nfc_nci_device *p_dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6690572 "control_granted"
	public explicit_type "/* * (*control_granted)() Grant HAL the exclusive control to send NCI commands. * Called in response to HAL_REQUEST_CONTROL_EVT. * Must only be called when there are no NCI commands pending. * HAL_RELEASE_CONTROL_EVT will notify when HAL no longer needs exclusive control. */ int (*)(const struct nfc_nci_device *p_dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*control_granted)() Grant HAL the exclusive control to send NCI commands.
     * Called in response to HAL_REQUEST_CONTROL_EVT.
     * Must only be called when there are no NCI commands pending.
     * HAL_RELEASE_CONTROL_EVT will notify when HAL no longer needs exclusive control.
     */
    int (*${name})(const struct nfc_nci_device *p_dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6690700 "power_cycle"
	public explicit_type "/* * (*power_cycle)() Restart controller by power cyle; * HAL_OPEN_CPLT_EVT will notify when operation is complete. */ int (*)(const struct nfc_nci_device *p_dev)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*power_cycle)() Restart controller by power cyle;
     * HAL_OPEN_CPLT_EVT will notify when operation is complete.
     */
    int (*${name})(const struct nfc_nci_device *p_dev)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1744012 "nfc_nci_device_t"
      visibility package stereotype "typedef" base_type class_ref 1743884 // nfc_nci_device
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1744140 "nfc_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3557644 // common (<directional composition>)
	relation 3557516 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3557644 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end
    end

    class 1744268 "nfc_pn544_linktype"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * PN544 linktypes.
 * UART
 * I2C
 * USB (uses UART DAL)"
      attribute 6690828 "PN544_LINK_TYPE_UART"
	public type class_ref 1744268 // nfc_pn544_linktype
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6690956 "PN544_LINK_TYPE_I2C"
	public type class_ref 1744268 // nfc_pn544_linktype
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6691084 "PN544_LINK_TYPE_USB"
	public type class_ref 1744268 // nfc_pn544_linktype
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6691212 "PN544_LINK_TYPE_INVALID"
	public type class_ref 1744268 // nfc_pn544_linktype
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1744396 "nfc_pn544_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 3557772 // common (<directional composition>)
	relation 3557644 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3557772 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6691340 "num_eeprom_settings"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6691468 "eeprom_settings"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3557900 // linktype (<directional composition>)
	relation 3557772 *-->
	  a role_name "linktype" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3557900 // linktype (<directional composition>)
	  b parent class_ref 1744268 // nfc_pn544_linktype
      end

      attribute 6691596 "device_node"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6691724 "enable_i2c_workaround"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6691852 "i2c_device_address"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1744524 "power_module"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
 * and the fields of this data structure must begin with hw_module_t
 * followed by module specific information."
      classrelation 3558028 // common (<directional composition>)
	relation 3557900 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3558028 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end

      attribute 6691980 "init"
	public explicit_type "/* * (*init)() performs power management setup actions at runtime * startup, such as to set default cpufreq parameters. This is * called only by the Power HAL instance loaded by * PowerManagerService. */ void (*)(struct power_module *module)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*init)() performs power management setup actions at runtime
     * startup, such as to set default cpufreq parameters.  This is
     * called only by the Power HAL instance loaded by
     * PowerManagerService.
     */
    void (*${name})(struct power_module *module)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6692108 "setInteractive"
	public explicit_type "/* * (*setInteractive)() performs power management actions upon the * system entering interactive state (that is, the system is awake * and ready for interaction, often with UI devices such as * display and touchscreen enabled) or non-interactive state (the * system appears asleep, display usually turned off). The * non-interactive state is usually entered after a period of * inactivity, in order to conserve battery power during * such inactive periods. * * Typical actions are to turn on or off devices and adjust * cpufreq parameters. This function may also call the * appropriate interfaces to allow the kernel to suspend the * system to low-power sleep state when entering non-interactive * state, and to disallow low-power suspend when the system is in * interactive state. When low-power suspend state is allowed, the * kernel may suspend the system whenever no wakelocks are held. * * on is non-zero when the system is transitioning to an * interactive / awake state, and zero when transitioning to a * non-interactive / asleep state. * * This function is called to enter non-interactive state after * turning off the screen (if present), and called to enter * interactive state prior to turning on the screen. */ void (*)(struct power_module *module, int on)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*setInteractive)() performs power management actions upon the
     * system entering interactive state (that is, the system is awake
     * and ready for interaction, often with UI devices such as
     * display and touchscreen enabled) or non-interactive state (the
     * system appears asleep, display usually turned off).  The
     * non-interactive state is usually entered after a period of
     * inactivity, in order to conserve battery power during
     * such inactive periods.
     *
     * Typical actions are to turn on or off devices and adjust
     * cpufreq parameters.  This function may also call the
     * appropriate interfaces to allow the kernel to suspend the
     * system to low-power sleep state when entering non-interactive
     * state, and to disallow low-power suspend when the system is in
     * interactive state.  When low-power suspend state is allowed, the
     * kernel may suspend the system whenever no wakelocks are held.
     *
     * on is non-zero when the system is transitioning to an
     * interactive / awake state, and zero when transitioning to a
     * non-interactive / asleep state.
     *
     * This function is called to enter non-interactive state after
     * turning off the screen (if present), and called to enter
     * interactive state prior to turning on the screen.
     */
    void (*${name})(struct power_module *module, int on)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6692236 "powerHint"
	public explicit_type "/* * (*powerHint) is called to pass hints on power requirements, which * may result in adjustment of power/performance parameters of the * cpufreq governor and other controls. The possible hints are: * * POWER_HINT_VSYNC * * Foreground app has started or stopped requesting a VSYNC pulse * from SurfaceFlinger. If the app has started requesting VSYNC * then CPU and GPU load is expected soon, and it may be appropriate * to raise speeds of CPU, memory bus, etc. The data parameter is * non-zero to indicate VSYNC pulse is now requested, or zero for * VSYNC pulse no longer requested. * * POWER_HINT_INTERACTION * * User is interacting with the device, for example, touchscreen * events are incoming. CPU and GPU load may be expected soon, * and it may be appropriate to raise speeds of CPU, memory bus, * etc. The data parameter is unused. * * A particular platform may choose to ignore any hint. * * availability: version 0.2 * */ void (*)(struct power_module *module, power_hint_t hint, void *data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /*
     * (*powerHint) is called to pass hints on power requirements, which
     * may result in adjustment of power/performance parameters of the
     * cpufreq governor and other controls.  The possible hints are:
     *
     * POWER_HINT_VSYNC
     *
     *     Foreground app has started or stopped requesting a VSYNC pulse
     *     from SurfaceFlinger.  If the app has started requesting VSYNC
     *     then CPU and GPU load is expected soon, and it may be appropriate
     *     to raise speeds of CPU, memory bus, etc.  The data parameter is
     *     non-zero to indicate VSYNC pulse is now requested, or zero for
     *     VSYNC pulse no longer requested.
     *
     * POWER_HINT_INTERACTION
     *
     *     User is interacting with the device, for example, touchscreen
     *     events are incoming.  CPU and GPU load may be expected soon,
     *     and it may be appropriate to raise speeds of CPU, memory bus,
     *     etc.  The data parameter is unused.
     *
     * A particular platform may choose to ignore any hint.
     *
     * availability: version 0.2
     *
     */
    void (*${name})(struct power_module *module, power_hint_t hint,
                      void *data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1744652 "power_module_t"
      visibility package stereotype "typedef" base_type class_ref 1744524 // power_module
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1744780 "sensors_event_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Union of the various types of sensor data
 * that can be returned."
      attribute 6692364 "version"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6692492 "sensor"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6692620 "type"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6692748 "reserved0"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6692876 "timestamp"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6693004 "data"
	public explicit_type "float"
	multiplicity "[16]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6693132 "acceleration"
	public explicit_type "sensors_vec_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6693260 "magnetic"
	public explicit_type "sensors_vec_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6693388 "orientation"
	public explicit_type "sensors_vec_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6693516 "gyro"
	public explicit_type "sensors_vec_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6693644 "temperature"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6693772 "distance"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6693900 "light"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6694028 "pressure"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6694156 "relative_humidity"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1744908 "sensors_module_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Every hardware module must have a data structure named HAL_MODULE_INFO_SYM
 * and the fields of this data structure must begin with hw_module_t
 * followed by module specific information."
      classrelation 3558156 // common (<directional composition>)
	relation 3558028 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3558156 // common (<directional composition>)
	  b parent class_ref 1709964 // hw_module_t
      end

      attribute 6694284 "get_sensors_list"
	public explicit_type "/** * Enumerate all available sensors. The list is returned in \"list\". * @return number of sensors in the list */ int (*)(struct sensors_module_t* module, struct sensor_t const** list)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Enumerate all available sensors. The list is returned in \"list\".
     * @return number of sensors in the list
     */
    int (*${name})(struct sensors_module_t* module,
            struct sensor_t const** list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1745036 "sensor_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6694412 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6694540 "vendor"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6694668 "version"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6694796 "handle"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6694924 "type"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6695052 "maxRange"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6695180 "resolution"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6695308 "power"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6695436 "minDelay"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6695564 "reserved"
	public explicit_type "void"
	multiplicity "[8]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1745164 "sensors_poll_device_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Every device data structure must begin with hw_device_t
 * followed by module specific public methods and attributes."
      classrelation 3558284 // common (<directional composition>)
	relation 3558156 *-->
	  a role_name "common" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3558284 // common (<directional composition>)
	  b parent class_ref 1710220 // hw_device_t
      end

      attribute 6695692 "activate"
	public explicit_type "/** Activate/deactivate one sensor. * * @param handle is the handle of the sensor to change. * @param enabled set to 1 to enable, or 0 to disable the sensor. * * @return 0 on success, negative errno code otherwise */ int (*)(struct sensors_poll_device_t *dev, int handle, int enabled)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /** Activate/deactivate one sensor.
     *
     * @param handle is the handle of the sensor to change.
     * @param enabled set to 1 to enable, or 0 to disable the sensor.
     *
     * @return 0 on success, negative errno code otherwise
     */
    int (*${name})(struct sensors_poll_device_t *dev,
            int handle, int enabled)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6695820 "setDelay"
	public explicit_type "/** * Set the delay between sensor events in nanoseconds for a given sensor. * * If the requested value is less than sensor_t::minDelay, then it's * silently clamped to sensor_t::minDelay unless sensor_t::minDelay is * 0, in which case it is clamped to >= 1ms. * * @return 0 if successful, < 0 on error */ int (*)(struct sensors_poll_device_t *dev, int handle, int64_t ns)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Set the delay between sensor events in nanoseconds for a given sensor.
     *
     * If the requested value is less than sensor_t::minDelay, then it's
     * silently clamped to sensor_t::minDelay unless sensor_t::minDelay is
     * 0, in which case it is clamped to >= 1ms.
     *
     * @return 0 if successful, < 0 on error
     */
    int (*${name})(struct sensors_poll_device_t *dev,
            int handle, int64_t ns)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6695948 "poll"
	public explicit_type "/** * Returns an array of sensor data. * This function must block until events are available. * * @return the number of events read on success, or -errno in case of an error. * This function should never return 0 (no event). * */ int (*)(struct sensors_poll_device_t *dev, sensors_event_t* data, int count)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
    /**
     * Returns an array of sensor data.
     * This function must block until events are available.
     *
     * @return the number of events read on success, or -errno in case of an error.
     * This function should never return 0 (no event).
     *
     */
    int (*${name})(struct sensors_poll_device_t *dev,
            sensors_event_t* data, int count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1780108 "anonymous21"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Temporary definition during transition.
 *
 * These formats will be removed and replaced with
 * HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED.  To maximize forward compatibility,
 * HAL implementations are strongly recommended to treat FORMAT_OPAQUE and
 * FORMAT_ZSL as equivalent to HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED, and
 * return HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED in the format_actual output
 * parameter of allocate_stream, allowing the gralloc module to select the
 * specific format based on the usage flags from the camera and the stream
 * consumer."
      attribute 6831628 "CAMERA2_HAL_PIXEL_FORMAT_OPAQUE"
	public type class_ref 1780108 // anonymous21
	init_value " HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6831756 "CAMERA2_HAL_PIXEL_FORMAT_ZSL"
	public type class_ref 1780108 // anonymous21
	init_value " -1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1780236 "anonymous22"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6831884 "CAMERA2_JPEG_BLOB_ID"
	public type class_ref 1780236 // anonymous22
	init_value " 0x00FF
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1780364 "anonymous23"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*********************************************************************
 *
 * Metadata queue management, used for requests sent to HAL module, and for
 * frames produced by the HAL.
 *"
      attribute 6832012 "CAMERA2_REQUEST_QUEUE_IS_BOTTOMLESS"
	public type class_ref 1780364 // anonymous23
	init_value " -1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1780492 "anonymous24"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Possible message types for camera2_notify_callback"
      attribute 6832140 "CAMERA2_MSG_ERROR"
	public type class_ref 1780492 // anonymous24
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6832268 "CAMERA2_MSG_SHUTTER"
	public type class_ref 1780492 // anonymous24
	init_value " 0x0010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6832396 "CAMERA2_MSG_AUTOFOCUS"
	public type class_ref 1780492 // anonymous24
	init_value " 0x0020"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6832524 "CAMERA2_MSG_AUTOEXPOSURE"
	public type class_ref 1780492 // anonymous24
	init_value " 0x0021"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6832652 "CAMERA2_MSG_AUTOWB"
	public type class_ref 1780492 // anonymous24
	init_value " 0x0022
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1780620 "anonymous25"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
     * An error has occurred. Argument ext1 contains the error code, and
     * ext2 and ext3 contain any error-specific information.
     
*
     * The exposure of a given request has begun. Argument ext1 contains the
     * frame number, and ext2 and ext3 contain the low-order and high-order
     * bytes of the timestamp for when exposure began.
     * (timestamp = (ext3 << 32 | ext2))
     
*
     * The autofocus routine has changed state. Argument ext1 contains the new
     * state; the values are the same as those for the metadata field
     * android.control.afState. Ext2 contains the latest trigger ID passed to
     * trigger_action(CAMERA2_TRIGGER_AUTOFOCUS) or
     * trigger_action(CAMERA2_TRIGGER_CANCEL_AUTOFOCUS), or 0 if trigger has not
     * been called with either of those actions.
     
*
     * The autoexposure routine has changed state. Argument ext1 contains the
     * new state; the values are the same as those for the metadata field
     * android.control.aeState. Ext2 contains the latest trigger ID value passed to
     * trigger_action(CAMERA2_TRIGGER_PRECAPTURE_METERING), or 0 if that method
     * has not been called.
     
*
     * The auto-whitebalance routine has changed state. Argument ext1 contains
     * the new state; the values are the same as those for the metadata field
     * android.control.awbState. Ext2 contains the latest trigger ID passed to
     * trigger_action(CAMERA2_TRIGGER_PRECAPTURE_METERING), or 0 if that method
     * has not been called.
     
*
 * Error codes for CAMERA_MSG_ERROR"
      attribute 6832780 "CAMERA2_MSG_ERROR_HARDWARE"
	public type class_ref 1780620 // anonymous25
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6832908 "CAMERA2_MSG_ERROR_DEVICE"
	public type class_ref 1780620 // anonymous25
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6833036 "CAMERA2_MSG_ERROR_REQUEST"
	public type class_ref 1780620 // anonymous25
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6833164 "CAMERA2_MSG_ERROR_FRAME"
	public type class_ref 1780620 // anonymous25
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6833292 "CAMERA2_MSG_ERROR_STREAM"
	public type class_ref 1780620 // anonymous25
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6833420 "CAMERA2_MSG_NUM_ERRORS"
	public type class_ref 1780620 // anonymous25
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1780748 "anonymous26"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
     * A serious failure occured. Camera device may not work without reboot, and
     * no further frames or buffer streams will be produced by the
     * device. Device should be treated as closed.
     
*
     * A serious failure occured. No further frames or buffer streams will be
     * produced by the device. Device should be treated as closed. The client
     * must reopen the device to use it again.
     
*
     * An error has occurred in processing a request. No output (metadata or
     * buffers) will be produced for this request. ext2 contains the frame
     * number of the request. Subsequent requests are unaffected, and the device
     * remains operational.
     
*
     * An error has occurred in producing an output frame metadata buffer for a
     * request, but image buffers for it will still be available. Subsequent
     * requests are unaffected, and the device remains operational. ext2
     * contains the frame number of the request.
     
*
     * An error has occurred in placing an output buffer into a stream for a
     * request. The frame metadata and other buffers may still be
     * available. Subsequent requests are unaffected, and the device remains
     * operational. ext2 contains the frame number of the request, and ext3
     * contains the stream id.
     
*
     * Number of error types
     
*
 * Possible trigger ids for trigger_action()"
      attribute 6833548 "CAMERA2_TRIGGER_AUTOFOCUS"
	public type class_ref 1780748 // anonymous26
	init_value " 0x0001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6833676 "CAMERA2_TRIGGER_CANCEL_AUTOFOCUS"
	public type class_ref 1780748 // anonymous26
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6833804 "CAMERA2_TRIGGER_PRECAPTURE_METERING"
	public type class_ref 1780748 // anonymous26
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1780876 "anonymous27"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
     * Trigger an autofocus cycle. The effect of the trigger depends on the
     * autofocus mode in effect when the trigger is received, which is the mode
     * listed in the latest capture request to be dequeued by the HAL. If the
     * mode is OFF, EDOF, or FIXED, the trigger has no effect. In AUTO, MACRO,
     * or CONTINUOUS_* modes, see below for the expected behavior. The state of
     * the autofocus cycle can be tracked in android.control.afMode and the
     * corresponding notifications.
     *
     **
     * In AUTO or MACRO mode, the AF state transitions (and notifications)
     * when calling with trigger ID = N with the previous ID being K are:
     *
     * Initial state       Transitions
     * INACTIVE (K)         -> ACTIVE_SCAN (N) -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * AF_FOCUSED (K)       -> ACTIVE_SCAN (N) -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * AF_NOT_FOCUSED (K)   -> ACTIVE_SCAN (N) -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * ACTIVE_SCAN (K)      -> AF_FOCUSED(N) or AF_NOT_FOCUSED(N)
     * PASSIVE_SCAN (K)      Not used in AUTO/MACRO mode
     * PASSIVE_FOCUSED (K)   Not used in AUTO/MACRO mode
     *
     **
     * In CONTINUOUS_PICTURE mode, triggering AF must lock the AF to the current
     * lens position and transition the AF state to either AF_FOCUSED or
     * NOT_FOCUSED. If a passive scan is underway, that scan must complete and
     * then lock the lens position and change AF state. TRIGGER_CANCEL_AUTOFOCUS
     * will allow the AF to restart its operation.
     *
     * Initial state      Transitions
     * INACTIVE (K)        -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * PASSIVE_FOCUSED (K) -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * PASSIVE_SCAN (K)    -> AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * AF_FOCUSED (K)      no effect except to change next notification ID to N
     * AF_NOT_FOCUSED (K)  no effect except to change next notification ID to N
     *
     **
     * In CONTINUOUS_VIDEO mode, triggering AF must lock the AF to the current
     * lens position and transition the AF state to either AF_FOCUSED or
     * NOT_FOCUSED. If a passive scan is underway, it must immediately halt, in
     * contrast with CONTINUOUS_PICTURE mode. TRIGGER_CANCEL_AUTOFOCUS will
     * allow the AF to restart its operation.
     *
     * Initial state      Transitions
     * INACTIVE (K)        -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * PASSIVE_FOCUSED (K) -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * PASSIVE_SCAN (K)    -> immediate AF_FOCUSED (N) or AF_NOT_FOCUSED (N)
     * AF_FOCUSED (K)      no effect except to change next notification ID to N
     * AF_NOT_FOCUSED (K)  no effect except to change next notification ID to N
     *
     * Ext1 is an ID that must be returned in subsequent auto-focus state change
     * notifications through camera2_notify_callback() and stored in
     * android.control.afTriggerId.
     
*
     * Send a cancel message to the autofocus algorithm. The effect of the
     * cancellation depends on the autofocus mode in effect when the trigger is
     * received, which is the mode listed in the latest capture request to be
     * dequeued by the HAL. If the AF mode is OFF or EDOF, the cancel has no
     * effect.  For other modes, the lens should return to its default position,
     * any current autofocus scan must be canceled, and the AF state should be
     * set to INACTIVE.
     *
     * The state of the autofocus cycle can be tracked in android.control.afMode
     * and the corresponding notification. Continuous autofocus modes may resume
     * focusing operations thereafter exactly as if the camera had just been set
     * to a continuous AF mode.
     *
     * Ext1 is an ID that must be returned in subsequent auto-focus state change
     * notifications through camera2_notify_callback() and stored in
     * android.control.afTriggerId.
     
*
     * Trigger a pre-capture metering cycle, which may include firing the flash
     * to determine proper capture parameters. Typically, this trigger would be
     * fired for a half-depress of a camera shutter key, or before a snapshot
     * capture in general. The state of the metering cycle can be tracked in
     * android.control.aeMode and the corresponding notification.  If the
     * auto-exposure mode is OFF, the trigger does nothing.
     *
     * Ext1 is an ID that must be returned in subsequent
     * auto-exposure/auto-white balance state change notifications through
     * camera2_notify_callback() and stored in android.control.aePrecaptureId.
     
*
 * Possible template types for construct_default_request()"
      attribute 6833932 "CAMERA2_TEMPLATE_PREVIEW"
	public type class_ref 1780876 // anonymous27
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6834060 "CAMERA2_TEMPLATE_STILL_CAPTURE"
	public type class_ref 1780876 // anonymous27
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6834188 "CAMERA2_TEMPLATE_VIDEO_RECORD"
	public type class_ref 1780876 // anonymous27
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6834316 "CAMERA2_TEMPLATE_VIDEO_SNAPSHOT"
	public type class_ref 1780876 // anonymous27
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6834444 "CAMERA2_TEMPLATE_ZERO_SHUTTER_LAG"
	public type class_ref 1780876 // anonymous27
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6834572 "CAMERA2_TEMPLATE_COUNT"
	public type class_ref 1780876 // anonymous27
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1781004 "anonymous28"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * hwc_display_contents_1_t::flags values"
      attribute 6834700 "HWC_GEOMETRY_CHANGED"
	public type class_ref 1781004 // anonymous28
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1781132 "anonymous29"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * hwc_layer_t::hints values
 * Hints are set by the HAL and read by SurfaceFlinger"
      attribute 6834828 "HWC_HINT_TRIPLE_BUFFER"
	public type class_ref 1781132 // anonymous29
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6834956 "HWC_HINT_CLEAR_FB"
	public type class_ref 1781132 // anonymous29
	init_value " 0x00000002
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1781260 "anonymous30"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "     * HWC can set the HWC_HINT_TRIPLE_BUFFER hint to indicate to SurfaceFlinger
     * that it should triple buffer this layer. Typically HWC does this when
     * the layer will be unavailable for use for an extended period of time,
     * e.g. if the display will be fetching data directly from the layer and
     * the layer can not be modified until after the next set().
     

     * HWC sets HWC_HINT_CLEAR_FB to tell SurfaceFlinger that it should clear the
     * framebuffer with transparent pixels where this layer would be.
     * SurfaceFlinger will only honor this flag when the layer has no blending
     *
     

 * hwc_layer_t::flags values
 * Flags are set by SurfaceFlinger and read by the HAL"
      attribute 6835084 "HWC_SKIP_LAYER"
	public type class_ref 1781260 // anonymous30
	init_value " 0x00000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1781388 "anonymous31"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "     * HWC_SKIP_LAYER is set by SurfaceFlnger to indicate that the HAL
     * shall not consider this layer for composition as it will be handled
     * by SurfaceFlinger (just as if compositionType was set to HWC_OVERLAY).
     

 * hwc_layer_t::compositionType values"
      attribute 6835212 "HWC_FRAMEBUFFER"
	public type class_ref 1781388 // anonymous31
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6835340 "HWC_OVERLAY"
	public type class_ref 1781388 // anonymous31
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6835468 "HWC_BACKGROUND"
	public type class_ref 1781388 // anonymous31
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6835596 "HWC_FRAMEBUFFER_TARGET"
	public type class_ref 1781388 // anonymous31
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1781516 "anonymous32"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " this layer is to be drawn into the framebuffer by SurfaceFlinger 
 this layer will be handled in the HWC 
 this is the background layer. it's used to set the background color.
     * there is only a single background layer 
 this layer holds the result of compositing the HWC_FRAMEBUFFER layers.
     * Added in HWC_DEVICE_API_VERSION_1_1. 

 * hwc_layer_t::blending values"
      attribute 6835724 "HWC_BLENDING_NONE"
	public type class_ref 1781516 // anonymous32
	init_value " 0x0100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6835852 "HWC_BLENDING_PREMULT"
	public type class_ref 1781516 // anonymous32
	init_value " 0x0105"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6835980 "HWC_BLENDING_COVERAGE"
	public type class_ref 1781516 // anonymous32
	init_value " 0x0405"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6836108 "HWC_BLENDING_DIM"
	public type class_ref 1781516 // anonymous32
	init_value " 0x0805"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1781644 "anonymous33"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " no blending 
 ONE / ONE_MINUS_SRC_ALPHA 
 SRC_ALPHA / ONE_MINUS_SRC_ALPHA 
 DIM. source is forced to a solid color (0,0,0,alpha), and apply
     * (ONE / ONE_MINUS_SRC_ALPHA) blending during composition. 

 * hwc_layer_t::transform values"
      attribute 6836236 "HWC_TRANSFORM_FLIP_H"
	public type class_ref 1781644 // anonymous33
	init_value " HAL_TRANSFORM_FLIP_H"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6836364 "HWC_TRANSFORM_FLIP_V"
	public type class_ref 1781644 // anonymous33
	init_value " HAL_TRANSFORM_FLIP_V"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6836492 "HWC_TRANSFORM_ROT_90"
	public type class_ref 1781644 // anonymous33
	init_value " HAL_TRANSFORM_ROT_90"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6836620 "HWC_TRANSFORM_ROT_180"
	public type class_ref 1781644 // anonymous33
	init_value " HAL_TRANSFORM_ROT_180"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6836748 "HWC_TRANSFORM_ROT_270"
	public type class_ref 1781644 // anonymous33
	init_value " HAL_TRANSFORM_ROT_270"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1781772 "anonymous34"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " flip source image horizontally 
 flip source image vertically 
 rotate source image 90 degrees clock-wise 
 rotate source image 180 degrees 
 rotate source image 270 degrees clock-wise 
 attributes queriable with query() "
      attribute 6836876 "HWC_BACKGROUND_LAYER_SUPPORTED"
	public type class_ref 1781772 // anonymous34
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6837004 "HWC_VSYNC_PERIOD"
	public type class_ref 1781772 // anonymous34
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6837132 "HWC_DISPLAY_TYPES_SUPPORTED"
	public type class_ref 1781772 // anonymous34
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1781900 "anonymous35"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "     * Availability: HWC_DEVICE_API_VERSION_0_2
     * Must return 1 if the background layer is supported, 0 otherwise.
     

     * Availability: HWC_DEVICE_API_VERSION_0_3
     * Returns the vsync period in nanoseconds.
     *
     * This query is not used for HWC_DEVICE_API_VERSION_1_1 and later.
     * Instead, the per-display attribute HWC_DISPLAY_VSYNC_PERIOD is used.
     

     * Availability: HWC_DEVICE_API_VERSION_1_1
     * Returns a mask of supported display types.
     
 display attributes returned by getDisplayAttributes() "
      attribute 6837260 "HWC_DISPLAY_NO_ATTRIBUTE"
	public type class_ref 1781900 // anonymous35
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6837388 "HWC_DISPLAY_VSYNC_PERIOD"
	public type class_ref 1781900 // anonymous35
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6837516 "HWC_DISPLAY_WIDTH"
	public type class_ref 1781900 // anonymous35
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6837644 "HWC_DISPLAY_HEIGHT"
	public type class_ref 1781900 // anonymous35
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6837772 "HWC_DISPLAY_DPI_X"
	public type class_ref 1781900 // anonymous35
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6837900 "HWC_DISPLAY_DPI_Y"
	public type class_ref 1781900 // anonymous35
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1782028 "anonymous36"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Indicates the end of an attribute list 
 The vsync period in nanoseconds 
 The number of pixels in the horizontal and vertical directions. 
 The number of pixels per thousand inches of this configuration.
     *
     * Scaling DPI by 1000 allows it to be stored in an int without losing
     * too much precision.
     *
     * If the DPI for a configuration is unavailable or the HWC implementation
     * considers it unreliable, it should set these attributes to zero.
     
 Allowed events for hwc_methods::eventControl() "
      attribute 6838028 "HWC_EVENT_VSYNC"
	public type class_ref 1782028 // anonymous36
	init_value " 0
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1782156 "anonymous37"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Display types and associated mask bits. "
      attribute 6838156 "HWC_DISPLAY_PRIMARY"
	public type class_ref 1782156 // anonymous37
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6838284 "HWC_DISPLAY_EXTERNAL"
	public type class_ref 1782156 // anonymous37
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6838412 "HWC_NUM_DISPLAY_TYPES"
	public type class_ref 1782156 // anonymous37
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1782284 "anonymous38"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " HDMI, DP, etc."
      attribute 6838540 "HWC_DISPLAY_PRIMARY_BIT"
	public type class_ref 1782284 // anonymous38
	init_value " 1 << HWC_DISPLAY_PRIMARY"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6838668 "HWC_DISPLAY_EXTERNAL_BIT"
	public type class_ref 1782284 // anonymous38
	init_value " 1 << HWC_DISPLAY_EXTERNAL"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1782412 "anonymous39"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6838796 "HAL_NFC_OPEN_CPLT_EVT"
	public type class_ref 1782412 // anonymous39
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6838924 "HAL_NFC_CLOSE_CPLT_EVT"
	public type class_ref 1782412 // anonymous39
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6839052 "HAL_NFC_POST_INIT_CPLT_EVT"
	public type class_ref 1782412 // anonymous39
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6839180 "HAL_NFC_PRE_DISCOVER_CPLT_EVT"
	public type class_ref 1782412 // anonymous39
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6839308 "HAL_NFC_REQUEST_CONTROL_EVT"
	public type class_ref 1782412 // anonymous39
	init_value " 0x04"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6839436 "HAL_NFC_RELEASE_CONTROL_EVT"
	public type class_ref 1782412 // anonymous39
	init_value " 0x05"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6839564 "HAL_NFC_ERROR_EVT"
	public type class_ref 1782412 // anonymous39
	init_value " 0x06
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1782540 "anonymous40"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6839692 "HAL_NFC_STATUS_OK"
	public type class_ref 1782540 // anonymous40
	init_value " 0x00"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6839820 "HAL_NFC_STATUS_FAILED"
	public type class_ref 1782540 // anonymous40
	init_value " 0x01"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6839948 "HAL_NFC_STATUS_ERR_TRANSPORT"
	public type class_ref 1782540 // anonymous40
	init_value " 0x02"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6840076 "HAL_NFC_STATUS_ERR_CMD_TIMEOUT"
	public type class_ref 1782540 // anonymous40
	init_value " 0x03"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6840204 "HAL_NFC_STATUS_REFUSED"
	public type class_ref 1782540 // anonymous40
	init_value " 0x04
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end
  end

  deploymentview 223628 "hardware"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 838796 "audio"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1708940 // audio_config_t
	class_ref 1709068 // audio_stream
	class_ref 1709196 // audio_stream_t
	class_ref 1709324 // audio_stream_out
	class_ref 1709452 // audio_stream_out_t
	class_ref 1709580 // audio_stream_in
	class_ref 1709708 // audio_stream_in_t
	class_ref 1709836 // audio_module
	class_ref 1710092 // audio_hw_device
	class_ref 1710348 // audio_hw_device_t
      end
    end

    artifact 838924 "audio_effect"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1710476 // effect_descriptor_s
	class_ref 1710604 // effect_descriptor_t
	class_ref 1710860 // effect_handle_t
	class_ref 1711116 // audio_buffer_t
	class_ref 1710732 // effect_interface_s
	class_ref 1711244 // effect_command_e
	class_ref 1710988 // audio_buffer_s
	class_ref 1711372 // buffer_function_t
	class_ref 1711500 // buffer_provider_s
	class_ref 1711628 // buffer_provider_t
	class_ref 1711756 // buffer_config_s
	class_ref 1711884 // buffer_config_t
	class_ref 1712012 // effect_buffer_access_e
	class_ref 1712140 // effect_feature_e
	class_ref 1712268 // channel_config_s
	class_ref 1712396 // channel_config_t
	class_ref 1712524 // effect_config_s
	class_ref 1712652 // effect_config_t
	class_ref 1712780 // effect_param_s
	class_ref 1712908 // effect_param_t
	class_ref 1713036 // audio_effect_library_s
	class_ref 1713164 // audio_effect_library_t
      end
    end

    artifact 839052 "audio_policy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1713292 // audio_policy
	class_ref 1713420 // audio_module_handle_t
	class_ref 1713548 // audio_policy_service_ops
	class_ref 1713676 // audio_policy_module
	class_ref 1713804 // audio_policy_module_t
	class_ref 1713932 // audio_policy_device
      end
    end

    artifact 839180 "bluetooth"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1714060 // __attribute__
	class_ref 1714188 // bt_scan_mode_t
	class_ref 1714316 // bt_state_t
	class_ref 1714444 // bt_status_t
	class_ref 1714572 // bt_discovery_state_t
	class_ref 1714700 // bt_acl_state_t
	class_ref 1714828 // bt_uuid_t
	class_ref 1714956 // bt_service_record_t
	class_ref 1715084 // bt_property_type_t
	class_ref 1715212 // bt_property_t
	class_ref 1715340 // bt_device_type_t
	class_ref 1715468 // bt_bond_state_t
	class_ref 1715596 // bt_ssp_variant_t
	class_ref 1715724 // adapter_state_changed_callback
	class_ref 1715852 // adapter_properties_callback
	class_ref 1715980 // remote_device_properties_callback
	class_ref 1716108 // device_found_callback
	class_ref 1716236 // discovery_state_changed_callback
	class_ref 1716364 // pin_request_callback
	class_ref 1716492 // ssp_request_callback
	class_ref 1716620 // bond_state_changed_callback
	class_ref 1716748 // acl_state_changed_callback
	class_ref 1716876 // bt_cb_thread_evt
	class_ref 1717004 // callback_thread_event
	class_ref 1717132 // dut_mode_recv_callback
	class_ref 1717260 // bt_callbacks_t
	class_ref 1717388 // bt_interface_t
	class_ref 1717516 // bluetooth_device_t
	class_ref 1717644 // bluetooth_module_t
      end
    end

    artifact 839308 "bt_av"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1717772 // btav_audio_state_t
	class_ref 1717900 // btav_connection_state_callback
	class_ref 1718028 // btav_audio_state_callback
	class_ref 1718156 // btav_callbacks_t
	class_ref 1718284 // btav_interface_t
      end
    end

    artifact 839436 "bt_hf"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1718412 // bthf_connection_state_t
	class_ref 1718540 // bthf_audio_state_t
	class_ref 1718668 // bthf_vr_state_t
	class_ref 1718796 // bthf_volume_type_t
	class_ref 1718924 // bthf_nrec_t
	class_ref 1719052 // bthf_chld_type_t
	class_ref 1719180 // bthf_connection_state_callback
	class_ref 1719308 // bthf_audio_state_callback
	class_ref 1719436 // bthf_vr_cmd_callback
	class_ref 1719564 // bthf_answer_call_cmd_callback
	class_ref 1719692 // bthf_hangup_call_cmd_callback
	class_ref 1719820 // bthf_volume_cmd_callback
	class_ref 1719948 // bthf_dial_call_cmd_callback
	class_ref 1720076 // bthf_dtmf_cmd_callback
	class_ref 1720204 // bthf_nrec_cmd_callback
	class_ref 1720332 // bthf_chld_cmd_callback
	class_ref 1720460 // bthf_cnum_cmd_callback
	class_ref 1720588 // bthf_cind_cmd_callback
	class_ref 1720716 // bthf_cops_cmd_callback
	class_ref 1720844 // bthf_clcc_cmd_callback
	class_ref 1720972 // bthf_unknown_at_cmd_callback
	class_ref 1721100 // bthf_key_pressed_cmd_callback
	class_ref 1721228 // bthf_callbacks_t
	class_ref 1721356 // bthf_network_state_t
	class_ref 1721484 // bthf_service_type_t
	class_ref 1721612 // bthf_call_state_t
	class_ref 1721740 // bthf_call_direction_t
	class_ref 1721868 // bthf_call_mode_t
	class_ref 1721996 // bthf_call_mpty_type_t
	class_ref 1722124 // bthf_call_addrtype_t
	class_ref 1722252 // bthf_interface_t
      end
    end

    artifact 839564 "bt_hh"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1722380 // bthh_status_t
	class_ref 1722508 // bthh_protocol_mode_t
	class_ref 1722636 // bthh_report_type_t
	class_ref 1722764 // bthh_hid_info_t
	class_ref 1722892 // bthh_connection_state_callback
	class_ref 1723020 // bthh_virtual_unplug_callback
	class_ref 1723148 // bthh_hid_info_callback
	class_ref 1723276 // bthh_protocol_mode_callback
	class_ref 1723404 // bthh_idle_time_callback
	class_ref 1723532 // bthh_get_report_callback
	class_ref 1723660 // bthh_callbacks_t
	class_ref 1723788 // bthh_interface_t
      end
    end

    artifact 839692 "bt_hl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1723916 // bthl_app_reg_state_t
	class_ref 1724044 // bthl_channel_type_t
	class_ref 1724172 // bthl_channel_state_t
	class_ref 1724300 // bthl_mdep_cfg_t
	class_ref 1724428 // bthl_reg_param_t
	class_ref 1724556 // bthl_app_reg_state_callback
	class_ref 1724684 // bthl_channel_state_callback
	class_ref 1724812 // bthl_callbacks_t
	class_ref 1724940 // bthl_interface_t
      end
    end

    artifact 839820 "bt_pan"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1725068 // btpan_control_state_t
	class_ref 1725196 // btpan_connection_state_callback
	class_ref 1725324 // btpan_control_state_callback
	class_ref 1725452 // btpan_callbacks_t
	class_ref 1725580 // btpan_interface_t
      end
    end

    artifact 839948 "bt_sock"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1725708 // btsock_interface_t
      end
    end

    artifact 840076 "camera"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1725836 // camera_release_memory
	class_ref 1725964 // camera_memory
	class_ref 1726092 // camera_memory_t
	class_ref 1726220 // camera_request_memory
	class_ref 1726348 // camera_notify_callback
	class_ref 1726476 // camera_data_callback
	class_ref 1726604 // camera_data_timestamp_callback
	class_ref 1726732 // preview_stream_ops
	class_ref 1726860 // preview_stream_ops_t
	class_ref 1726988 // camera_device_ops
	class_ref 1727116 // camera_device_ops_t
	class_ref 1727244 // camera_device
	class_ref 1727372 // camera_device_t
      end
    end

    artifact 840204 "camera2"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1727500 // camera2_stream_ops
	class_ref 1727628 // camera2_stream_ops_t
	class_ref 1727756 // anonymous1
	class_ref 1727884 // camera2_jpeg_blob
	class_ref 1728012 // anonymous2
	class_ref 1728140 // camera2_stream_in_ops
	class_ref 1728268 // camera2_stream_in_ops_t
	class_ref 1728396 // anonymous3
	class_ref 1728524 // camera2_request_queue_src_ops
	class_ref 1728652 // camera2_request_queue_src_ops_t
	class_ref 1728780 // camera2_frame_queue_dst_ops
	class_ref 1728908 // camera2_frame_queue_dst_ops_t
	class_ref 1729036 // camera2_notify_callback
	class_ref 1729164 // anonymous4
	class_ref 1729292 // anonymous5
	class_ref 1729420 // anonymous6
	class_ref 1729548 // anonymous7
	class_ref 1729676 // camera2_device_ops
	class_ref 1729804 // camera2_device_ops_t
	class_ref 1729932 // camera2_device
	class_ref 1730060 // camera2_device_t
	class_ref 1780108 // anonymous21
	class_ref 1780236 // anonymous22
	class_ref 1780364 // anonymous23
	class_ref 1780492 // anonymous24
	class_ref 1780620 // anonymous25
	class_ref 1780748 // anonymous26
	class_ref 1780876 // anonymous27
      end
    end

    artifact 840332 "camera_common"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1730188 // camera_info
	class_ref 1730316 // camera_module
	class_ref 1730444 // camera_module_t
      end
    end

    artifact 840460 "gps"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1730572 // GpsPositionMode
	class_ref 1730700 // GpsPositionRecurrence
	class_ref 1730828 // GpsStatusValue
	class_ref 1730956 // GpsLocationFlags
	class_ref 1731084 // GpsAidingData
	class_ref 1731212 // AGpsType
	class_ref 1731340 // AGpsSetIDType
	class_ref 1731468 // GpsNiType
	class_ref 1731596 // GpsNiNotifyFlags
	class_ref 1731724 // GpsUserResponseType
	class_ref 1731852 // GpsNiEncodingType
	class_ref 1731980 // AGpsStatusValue
	class_ref 1732108 // GpsLocation
	class_ref 1732236 // GpsStatus
	class_ref 1732364 // GpsSvInfo
	class_ref 1732492 // GpsSvStatus
	class_ref 1732620 // AGpsRefLocationCellID
	class_ref 1732748 // AGpsRefLocationMac
	class_ref 1732876 // AGpsRefLocation
	class_ref 1733004 // gps_location_callback
	class_ref 1733132 // gps_status_callback
	class_ref 1733260 // gps_sv_status_callback
	class_ref 1733388 // gps_nmea_callback
	class_ref 1733516 // gps_set_capabilities
	class_ref 1733644 // gps_acquire_wakelock
	class_ref 1733772 // gps_release_wakelock
	class_ref 1733900 // gps_request_utc_time
	class_ref 1734028 // gps_create_thread
	class_ref 1734156 // GpsCallbacks
	class_ref 1734284 // GpsInterface
	class_ref 1734412 // gps_xtra_download_request
	class_ref 1734540 // GpsXtraCallbacks
	class_ref 1734668 // GpsXtraInterface
	class_ref 1734796 // GpsDebugInterface
	class_ref 1734924 // AGpsStatus
	class_ref 1735052 // agps_status_callback
	class_ref 1735180 // AGpsCallbacks
	class_ref 1735308 // AGpsInterface
	class_ref 1735436 // GpsNiNotification
	class_ref 1735564 // gps_ni_notify_callback
	class_ref 1735692 // GpsNiCallbacks
	class_ref 1735820 // GpsNiInterface
	class_ref 1735948 // gps_device_t
	class_ref 1736076 // agps_ril_request_set_id
	class_ref 1736204 // agps_ril_request_ref_loc
	class_ref 1736332 // AGpsRilCallbacks
	class_ref 1736460 // AGpsRilInterface
      end
    end

    artifact 840588 "gralloc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1736588 // gralloc_module_t
	class_ref 1736716 // alloc_device_t
      end
    end

    artifact 840716 "hardware"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1709964 // hw_module_t
	class_ref 1736844 // hw_module_methods_t
	class_ref 1710220 // hw_device_t
      end
    end

    artifact 840844 "hwcomposer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1736972 // hwc_region
	class_ref 1737100 // hwc_region_t
	class_ref 1737228 // hwc_color
	class_ref 1737356 // hwc_color_t
	class_ref 1737484 // hwc_layer_1
	class_ref 1737740 // hwc_display_t
	class_ref 1737868 // hwc_surface_t
	class_ref 1737996 // anonymous8
	class_ref 1738124 // hwc_display_contents_1
	class_ref 1738508 // hwc_procs
	class_ref 1738636 // hwc_procs_t
	class_ref 1738764 // hwc_module
	class_ref 1738892 // hwc_module_t
	class_ref 1739020 // hwc_composer_device_1
	class_ref 1739148 // hwc_composer_device_1_t
	class_ref 1781004 // anonymous28
      end
    end

    artifact 840972 "hwcomposer_defs"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1739276 // anonymous9
	class_ref 1739404 // anonymous10
	class_ref 1739532 // anonymous11
	class_ref 1739660 // anonymous12
	class_ref 1739788 // anonymous13
	class_ref 1739916 // anonymous14
	class_ref 1740044 // anonymous15
	class_ref 1740172 // anonymous16
	class_ref 1740300 // anonymous17
	class_ref 1740428 // anonymous18
	class_ref 1781132 // anonymous29
	class_ref 1781260 // anonymous30
	class_ref 1781388 // anonymous31
	class_ref 1781516 // anonymous32
	class_ref 1781644 // anonymous33
	class_ref 1781772 // anonymous34
	class_ref 1781900 // anonymous35
	class_ref 1782028 // anonymous36
	class_ref 1782156 // anonymous37
	class_ref 1782284 // anonymous38
      end
    end

    artifact 841100 "hwcomposer_v0"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1740556 // hwc_methods
	class_ref 1740684 // hwc_methods_t
	class_ref 1740812 // hwc_layer
	class_ref 1741068 // hwc_layer_list
	class_ref 1741196 // hwc_layer_list_t
	class_ref 1741324 // hwc_composer_device
	class_ref 1741452 // hwc_composer_device_t
      end
    end

    artifact 841228 "keymaster"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1741580 // keystore_module
	class_ref 1741708 // keymaster_keypair_t
	class_ref 1741836 // keymaster_rsa_keygen_params_t
	class_ref 1741964 // keymaster_rsa_digest_t
	class_ref 1742092 // keymaster_rsa_padding_t
	class_ref 1742220 // keymaster_rsa_sign_params_t
	class_ref 1742348 // keymaster_device
	class_ref 1742476 // keymaster_device_t
      end
    end

    artifact 841356 "lights"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1742604 // light_device_t
      end
    end

    artifact 841484 "local_time_hal"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1742732 // local_time_module
	class_ref 1742860 // local_time_hw_device
	class_ref 1742988 // local_time_hw_device_t
      end
    end

    artifact 841612 "nfc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1743116 // nfc_event_t
	class_ref 1743244 // anonymous19
	class_ref 1743372 // nfc_status_t
	class_ref 1743500 // anonymous20
	class_ref 1743628 // nfc_stack_callback_t
	class_ref 1743756 // nfc_stack_data_callback_t
	class_ref 1743884 // nfc_nci_device
	class_ref 1744012 // nfc_nci_device_t
	class_ref 1744140 // nfc_module_t
	class_ref 1744268 // nfc_pn544_linktype
	class_ref 1744396 // nfc_pn544_device_t
	class_ref 1782412 // anonymous39
	class_ref 1782540 // anonymous40
      end
    end

    artifact 841740 "power"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1744524 // power_module
	class_ref 1744652 // power_module_t
      end
    end

    artifact 841868 "sensors"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1744780 // sensors_event_t
	class_ref 1744908 // sensors_module_t
	class_ref 1745036 // sensor_t
	class_ref 1745164 // sensors_poll_device_t
      end
    end
  end
end
