class ByteBufferAsShortBuffer
!!!695963.java!!!	asShortBuffer(inout byteBuffer : ByteBuffer) : ShortBuffer
        ByteBuffer slice = byteBuffer.slice();
        slice.order(byteBuffer.order());
        return new ByteBufferAsShortBuffer(slice);
!!!696091.java!!!	ByteBufferAsShortBuffer(inout byteBuffer : ByteBuffer)
        super(byteBuffer.capacity() / SizeOf.SHORT);
        this.byteBuffer = byteBuffer;
        this.byteBuffer.clear();
        this.effectiveDirectAddress = byteBuffer.effectiveDirectAddress;
!!!696219.java!!!	asReadOnlyBuffer() : ShortBuffer
        ByteBufferAsShortBuffer buf = new ByteBufferAsShortBuffer(byteBuffer.asReadOnlyBuffer());
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        buf.byteBuffer.order = byteBuffer.order;
        return buf;
!!!696347.java!!!	compact() : ShortBuffer
        if (byteBuffer.isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        byteBuffer.limit(limit * SizeOf.SHORT);
        byteBuffer.position(position * SizeOf.SHORT);
        byteBuffer.compact();
        byteBuffer.clear();
        position = limit - position;
        limit = capacity;
        mark = UNSET_MARK;
        return this;
!!!696475.java!!!	duplicate() : ShortBuffer
        ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());
        ByteBufferAsShortBuffer buf = new ByteBufferAsShortBuffer(bb);
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        return buf;
!!!696603.java!!!	get() : short
        if (position == limit) {
            throw new BufferUnderflowException();
        }
        return byteBuffer.getShort(position++ * SizeOf.SHORT);
!!!696731.java!!!	get(in index : int) : short
        checkIndex(index);
        return byteBuffer.getShort(index * SizeOf.SHORT);
!!!696859.java!!!	get(inout dst : short, in dstOffset : int, in shortCount : int) : ShortBuffer
        byteBuffer.limit(limit * SizeOf.SHORT);
        byteBuffer.position(position * SizeOf.SHORT);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).get(dst, dstOffset, shortCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).get(dst, dstOffset, shortCount);
        }
        this.position += shortCount;
        return this;
!!!696987.java!!!	isDirect() : boolean
        return byteBuffer.isDirect();
!!!697115.java!!!	isReadOnly() : boolean
        return byteBuffer.isReadOnly();
!!!697243.java!!!	order() : ByteOrder
        return byteBuffer.order();
!!!697371.java!!!	protectedArray() : short
        throw new UnsupportedOperationException();
!!!697499.java!!!	protectedArrayOffset() : int
        throw new UnsupportedOperationException();
!!!697627.java!!!	protectedHasArray() : boolean
        return false;
!!!697755.java!!!	put(in c : short) : ShortBuffer
        if (position == limit) {
            throw new BufferOverflowException();
        }
        byteBuffer.putShort(position++ * SizeOf.SHORT, c);
        return this;
!!!697883.java!!!	put(in index : int, in c : short) : ShortBuffer
        checkIndex(index);
        byteBuffer.putShort(index * SizeOf.SHORT, c);
        return this;
!!!698011.java!!!	put(inout src : short, in srcOffset : int, in shortCount : int) : ShortBuffer
        byteBuffer.limit(limit * SizeOf.SHORT);
        byteBuffer.position(position * SizeOf.SHORT);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).put(src, srcOffset, shortCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).put(src, srcOffset, shortCount);
        }
        this.position += shortCount;
        return this;
!!!698139.java!!!	slice() : ShortBuffer
        byteBuffer.limit(limit * SizeOf.SHORT);
        byteBuffer.position(position * SizeOf.SHORT);
        ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());
        ShortBuffer result = new ByteBufferAsShortBuffer(bb);
        byteBuffer.clear();
        return result;
