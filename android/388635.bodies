class OldFileTest
!!!2653723.java!!!	deleteTempFolder(inout dir : File) : void
        String files[] = dir.list();
        for (int i = 0; i < files.length; i++) {
            File f = new File(dir, files[i]);
            if (f.isDirectory())
                deleteTempFolder(f);
            else {
                f.delete();
            }
        }
        dir.delete();

!!!2653851.java!!!	test_ConstructorLjava_io_FileLjava_lang_String() : void
        String error;
        String dirName = System.getProperty("java.io.tmpdir");
        System.setProperty("user.dir", dirName);

        File d = new File(dirName);
        File f = new File(d, "input.tst");
        if (!dirName.regionMatches((dirName.length() - 1), slash, 0, 1))
            dirName += slash;
        dirName += "input.tst";
        error = String.format("Test 1: Incorrect file created: %s; %s expected.", f.getPath(), dirName);
        assertTrue(error, f.getPath().equals(dirName));

        String fileName = null;
        try {
            f = new File(d, fileName);
            fail("Test 2: NullPointerException expected.");
        } catch (NullPointerException e) {
        }

        d = null;
        f = new File(d, "input.tst");
        error = String.format("Test 3: Incorrect file created: %s; %s expected.",
                f.getAbsolutePath(), dirName);
        assertTrue(error, f.getAbsolutePath().equals(dirName));

        // Regression test for Harmony-382
        File s = null;
        f = new File("/abc");
        d = new File(s, "/abc");
        assertEquals("Test 4: Incorrect file created;",
                f.getAbsolutePath(), d.getAbsolutePath());
!!!2653979.java!!!	test_ConstructorLjava_lang_StringLjava_lang_String() : void
        String dirName = null;
        String fileName = "input.tst";

        String userDir = System.getProperty("java.io.tmpdir");
        System.setProperty("user.dir", userDir);

        File f = new File(dirName, fileName);
        if (!userDir.regionMatches((userDir.length() - 1), slash, 0, 1))
            userDir += slash;
        userDir += "input.tst";
        String error = String.format("Test 1: Incorrect file created: %s; %s expected.",
                f.getAbsolutePath(), userDir);
        assertTrue(error, f.getAbsolutePath().equals(userDir));

        dirName = System.getProperty("java.io.tmpdir");
        fileName = null;
        try {
            f = new File(dirName, fileName);
            fail("Test 2: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }

        fileName = "input.tst";
        f = new File(dirName, fileName);
        assertTrue("Test 3: Incorrect file created.", f.getPath()
                .equals(userDir));

        // Regression test for Harmony-382
        String s = null;
        f = new File("/abc");
        File d = new File(s, "/abc");
        assertEquals("Test 4: Incorrect file created;", d.getAbsolutePath(), f
                .getAbsolutePath());
        assertEquals("Test3: Created Incorrect File", "/abc", f
                .getAbsolutePath());
!!!2654107.java!!!	test_createTempFileLjava_lang_StringLjava_lang_String() : void
        try {
            // Providing an illegal file prefix.
            File f3 = File.createTempFile("/../../../../../", null);
            f3.delete();
            fail("IOException not thrown");
        } catch (IOException e) {
        }
!!!2654235.java!!!	test_renameToLjava_io_File() : void
        String base = System.getProperty("java.io.tmpdir");
        File dir = new File(base, platformId);
        dir.mkdir();
        File f = new File(dir, "xxx.xxx");
        try {
            f.renameTo(null);
            fail("Test 1: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }
!!!2654363.java!!!	test_toURL3() : void
        File dir = new File(""); // current directory
        String newDirURL = dir.toURL().toString();
        assertTrue("Test 1: URL does not end with slash.",
                newDirURL.endsWith("/"));
!!!2654491.java!!!	test_deleteOnExit() : void
        String cts = System.getProperty("java.io.tmpdir");
        File dir = new File(cts + "/hello");
        dir.mkdir();
        assertTrue(dir.exists());
        File subDir = new File(cts + "/hello/world");
        subDir.mkdir();
        assertTrue(subDir.exists());

        URL url = getClass().getResource("/HelloWorld.txt");
        String classPath = url.toString();
        int idx = classPath.indexOf("!");
        assertTrue("could not find the path of the test jar/apk", idx > 0);
        classPath = classPath.substring(9, idx); // cutting off jar:file:

        ProcessBuilder builder = javaProcessBuilder();
        builder.command().add("-cp");
        builder.command().add(System.getProperty("java.class.path"));
        builder.command().add("tests.support.Support_DeleteOnExitTest");
        builder.command().add(dir.getAbsolutePath());
        builder.command().add(subDir.getAbsolutePath());
        execAndGetOutput(builder);

        assertFalse(dir.exists());
        assertFalse(subDir.exists());
!!!2654619.java!!!	setUp() : void
        super.setUp();

        // Make sure that system properties are set correctly
        String userDir = System.getProperty("java.io.tmpdir");
        if (userDir == null)
            throw new Exception("System property java.io.tmpdir not defined.");
        System.setProperty("java.io.tmpdir", userDir);

        /** Setup the temporary directory */
        if (!userDir.regionMatches((userDir.length() - 1), slash, 0, 1))
            userDir += slash;
        tempDirectory = new File(userDir + "tempDir"
                + String.valueOf(System.currentTimeMillis()));
        if (!tempDirectory.mkdir())
            System.out.println("Setup for OldFileTest failed (1).");

        /** Setup the temporary file */
        tempFile = new File(tempDirectory, "tempfile");
        FileOutputStream tempStream;
        try {
            tempStream = new FileOutputStream(tempFile.getPath(), false);
            tempStream.close();
        } catch (IOException e) {
            System.out.println("Setup for OldFileTest failed (2).");
            return;
        }
!!!2654747.java!!!	tearDown() : void
        if (tempFile.exists() && !tempFile.delete())
            System.out
                    .println("OldFileTest.tearDown() failed, could not delete file!");
        if (!tempDirectory.delete())
            System.out
                    .println("OldFileTest.tearDown() failed, could not delete directory!");
