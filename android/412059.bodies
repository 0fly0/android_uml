class OldAndroidClassTest
!!!2781211.java!!!	testNewInstance() : void
        Class helloClass = Class.forName(OldAndroidClassTest.class.getName());
        Object instance = helloClass.newInstance();
        assertNotNull(instance);
!!!2781339.java!!!	testForName() : void
        try {
            Class.forName("this.class.DoesNotExist");
            fail();
        } catch (ClassNotFoundException expected) {
        }
!!!2781467.java!!!	testNewInstancePrivateConstructor() : void
        try {
            Class.forName(packageName + ".ClassWithPrivateConstructor").newInstance();
            fail();
        } catch (IllegalAccessException expected) {
        }
!!!2781595.java!!!	testGetDeclaredMethod() : void
        Class helloClass = Class.forName(OldAndroidClassTest.class.getName());
        Method method = helloClass.getDeclaredMethod("method", (Class[]) null);
        method.invoke(new OldAndroidClassTest(), (Object[]) null);
!!!2781723.java!!!	testGetDeclaredMethodWithArgs() : void
        Class helloClass = Class.forName(OldAndroidClassTest.class.getName());
        Method method = helloClass.getDeclaredMethod("methodWithArgs", Object.class);

        Object invokeArgs[] = new Object[1];
        invokeArgs[0] = "Hello";
        Object ret = method.invoke(new OldAndroidClassTest(), invokeArgs);
        assertEquals(ret, invokeArgs[0]);
!!!2781851.java!!!	testGetDeclaredMethodPrivate() : void
        Class helloClass = Class.forName(OldAndroidClassTest.class.getName());
        Method method = helloClass.getDeclaredMethod("privateMethod", (Class[]) null);
        method.invoke(new OldAndroidClassTest(), (Object[]) null);
!!!2781979.java!!!	testGetSuperclass() : void
        Class helloClass = Class.forName(OldAndroidClassTest.class.getName());
        Class objectClass = Class.forName("java.lang.Object");
        assertEquals(helloClass.getSuperclass().getSuperclass().getSuperclass(), objectClass);
!!!2782107.java!!!	testIsAssignableFrom() : void
        Class helloClass = Class.forName(OldAndroidClassTest.class.getName());
        Class objectClass = Class.forName("java.lang.Object");
        assertTrue(objectClass.isAssignableFrom(helloClass));
        assertFalse(helloClass.isAssignableFrom(objectClass));
!!!2782235.java!!!	testGetConstructor() : void
        Class helloClass = Class.forName(OldAndroidClassTest.class.getName());
        Constructor constructor = helloClass.getConstructor((Class[]) null);
        assertNotNull(constructor);
!!!2782363.java!!!	testGetModifiers() : void
        Class helloClass = Class.forName(OldAndroidClassTest.class.getName());
        assertTrue(Modifier.isPublic(helloClass.getModifiers()));
!!!2782491.java!!!	testGetMethod() : void
        Class helloClass = Class.forName(OldAndroidClassTest.class.getName());
        helloClass.getMethod("method", (Class[]) null);
        try {
            Class[] argTypes = new Class[1];
            argTypes[0] = helloClass;
            helloClass.getMethod("method", argTypes);
            fail();
        } catch (NoSuchMethodException expected) {
        }
!!!2782619.java!!!	testFieldSet() : void
        OldAndroidClassTest.SimpleClass obj = new OldAndroidClassTest.SimpleClass();
        Field field = obj.getClass().getDeclaredField("str");
        field.set(obj, null);
!!!2782747.java!!!	methodWithArgs(inout o : Object) : Object
        return o;
!!!2782875.java!!!	method() : void
        methodInvoked = true;
!!!2783003.java!!!	privateMethod() : void
        privateMethodInvoked = true;
!!!2783131.java!!!	testClassGetMethodsNoDupes() : void
        Method[] methods = ArrayList.class.getMethods();
        Set<String> set = new HashSet<String>();

        for (Method method : methods) {
            String signature = method.toString();

            int par = signature.indexOf('(');
            int dot = signature.lastIndexOf('.', par);

            signature = signature.substring(dot + 1);

            assertFalse("Duplicate " + signature, set.contains(signature));
            set.add(signature);
        }
!!!2783771.java!!!	testGetMethodsInterfaces() : void
        Method[] methods = MyInterface.class.getMethods();
        assertTrue(hasMethod(methods, ".foo("));

        methods = MyOtherInterface.class.getMethods();
        assertTrue(hasMethod(methods, ".foo("));
        assertTrue(hasMethod(methods, ".bar("));

        methods = MyClass.class.getMethods();
        assertTrue(hasMethod(methods, ".foo("));
        assertTrue(hasMethod(methods, ".bar("));

        assertTrue(hasMethod(methods, ".gabba("));
        assertTrue(hasMethod(methods, ".hey("));

        assertTrue(hasMethod(methods, ".toString("));
!!!2783899.java!!!	hasMethod(inout methods : Method, inout signature : String) : boolean
        for (Method method : methods) {
            if (method.toString().contains(signature)) {
                return true;
            }
        }
        return false;
!!!2784027.java!!!	testClassGetPackage() : void
        assertNotNull(getClass().getPackage());
        assertEquals(packageName, getClass().getPackage().getName());
        assertEquals("Unknown", getClass().getPackage().getSpecificationTitle());

        Package p = Object.class.getPackage();
        assertNotNull(p);
        assertEquals("java.lang", p.getName());
        assertSame(p, Object.class.getPackage());
!!!2784155.java!!!	testVariousClassNames() : void
        Class<?> clazz = this.getClass();
        String pkg = (clazz.getPackage() == null ? "" : clazz.getPackage().getName() + ".");

        // Simple, top-level class

        assertEquals(pkg + "OldAndroidClassTest", clazz.getName());
        assertEquals("OldAndroidClassTest", clazz.getSimpleName());
        assertEquals(pkg + "OldAndroidClassTest", clazz.getCanonicalName());

        clazz = MemberClass.class;

        assertEquals(pkg + "OldAndroidClassTest$MemberClass", clazz.getName());
        assertEquals("MemberClass", clazz.getSimpleName());
        assertEquals(pkg + "OldAndroidClassTest.MemberClass", clazz.getCanonicalName());

        class LocalClass {
            // This space intentionally left blank.
        }

        clazz = LocalClass.class;

        assertEquals(pkg + "OldAndroidClassTest$1LocalClass", clazz.getName());
        assertEquals("LocalClass", clazz.getSimpleName());
        assertNull(clazz.getCanonicalName());

        clazz = new Object() { }.getClass();

        assertEquals(pkg + "OldAndroidClassTest$1", clazz.getName());
        assertEquals("", clazz.getSimpleName());
        assertNull(clazz.getCanonicalName());

        // Weird special cases with dollar in name.

        clazz = Mou$$aka.class;

        assertEquals(pkg + "Mou$$aka", clazz.getName());
        assertEquals("Mou$$aka", clazz.getSimpleName());
        assertEquals(pkg + "Mou$$aka", clazz.getCanonicalName());

        clazz = Mi$o$oup.class;

        assertEquals(pkg + "OldAndroidClassTest$Mi$o$oup", clazz.getName());
        assertEquals("Mi$o$oup", clazz.getSimpleName());
        assertEquals(pkg + "OldAndroidClassTest.Mi$o$oup", clazz.getCanonicalName());

        class Ma$hedPotatoe$ {
        }

        clazz = Ma$hedPotatoe$.class;

        assertEquals(pkg + "OldAndroidClassTest$1Ma$hedPotatoe$", clazz.getName());
        assertEquals("Ma$hedPotatoe$", clazz.getSimpleName());
        assertNull(clazz.getCanonicalName());
!!!2784283.java!!!	testLocalMemberClass() : void
        Class<?> clazz = this.getClass();

        assertFalse(clazz.isMemberClass());
        assertFalse(clazz.isLocalClass());

        clazz = MemberClass.class;

        assertTrue(clazz.isMemberClass());
        assertFalse(clazz.isLocalClass());

        class OtherLocalClass {
        }

        clazz = OtherLocalClass.class;

        assertFalse(clazz.isMemberClass());
        assertTrue(clazz.isLocalClass());

        clazz = new Object() { }.getClass();

        assertFalse(clazz.isMemberClass());
        assertFalse(clazz.isLocalClass());
