class WifiManager
!!!9717516.java!!!	WifiManager(inout context : Context, inout service : IWifiManager)
        mContext = context;
        mService = service;
        init();
!!!9717644.java!!!	getConfiguredNetworks() : WifiConfiguration
        try {
            return mService.getConfiguredNetworks();
        } catch (RemoteException e) {
            return null;
        }
!!!9717772.java!!!	addNetwork(inout config : WifiConfiguration) : int
        if (config == null) {
            return -1;
        }
        config.networkId = -1;
        return addOrUpdateNetwork(config);
!!!9717900.java!!!	updateNetwork(inout config : WifiConfiguration) : int
        if (config == null || config.networkId < 0) {
            return -1;
        }
        return addOrUpdateNetwork(config);
!!!9718028.java!!!	addOrUpdateNetwork(inout config : WifiConfiguration) : int
        try {
            return mService.addOrUpdateNetwork(config);
        } catch (RemoteException e) {
            return -1;
        }
!!!9718156.java!!!	removeNetwork(in netId : int) : boolean
        try {
            return mService.removeNetwork(netId);
        } catch (RemoteException e) {
            return false;
        }
!!!9718284.java!!!	enableNetwork(in netId : int, inout disableOthers : boolean) : boolean
        try {
            return mService.enableNetwork(netId, disableOthers);
        } catch (RemoteException e) {
            return false;
        }
!!!9718412.java!!!	disableNetwork(in netId : int) : boolean
        try {
            return mService.disableNetwork(netId);
        } catch (RemoteException e) {
            return false;
        }
!!!9718540.java!!!	disconnect() : boolean
        try {
            mService.disconnect();
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9718668.java!!!	reconnect() : boolean
        try {
            mService.reconnect();
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9718796.java!!!	reassociate() : boolean
        try {
            mService.reassociate();
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9718924.java!!!	pingSupplicant() : boolean
        if (mService == null)
            return false;
        try {
            return mService.pingSupplicant();
        } catch (RemoteException e) {
            return false;
        }
!!!9719052.java!!!	startScan() : boolean
        try {
            mService.startScan(false);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9719180.java!!!	startScanActive() : boolean
        try {
            mService.startScan(true);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9719308.java!!!	getConnectionInfo() : WifiInfo
        try {
            return mService.getConnectionInfo();
        } catch (RemoteException e) {
            return null;
        }
!!!9719436.java!!!	getScanResults() : ScanResult
        try {
            return mService.getScanResults();
        } catch (RemoteException e) {
            return null;
        }
!!!9719564.java!!!	saveConfiguration() : boolean
        try {
            return mService.saveConfiguration();
        } catch (RemoteException e) {
            return false;
        }
!!!9719692.java!!!	setCountryCode(in country : String, inout persist : boolean) : void
        try {
            mService.setCountryCode(country, persist);
        } catch (RemoteException e) { }
!!!9719820.java!!!	setFrequencyBand(in band : int, inout persist : boolean) : void
        try {
            mService.setFrequencyBand(band, persist);
        } catch (RemoteException e) { }
!!!9719948.java!!!	getFrequencyBand() : int
        try {
            return mService.getFrequencyBand();
        } catch (RemoteException e) {
            return -1;
        }
!!!9720076.java!!!	isDualBandSupported() : boolean
        try {
            return mService.isDualBandSupported();
        } catch (RemoteException e) {
            return false;
        }
!!!9720204.java!!!	getDhcpInfo() : DhcpInfo
        try {
            return mService.getDhcpInfo();
        } catch (RemoteException e) {
            return null;
        }
!!!9720332.java!!!	setWifiEnabled(inout enabled : boolean) : boolean
        try {
            return mService.setWifiEnabled(enabled);
        } catch (RemoteException e) {
            return false;
        }
!!!9720460.java!!!	getWifiState() : int
        try {
            return mService.getWifiEnabledState();
        } catch (RemoteException e) {
            return WIFI_STATE_UNKNOWN;
        }
!!!9720588.java!!!	isWifiEnabled() : boolean
        return getWifiState() == WIFI_STATE_ENABLED;
!!!9720716.java!!!	getTxPacketCount(inout listener : TxPacketCountListener) : void
        validateChannel();
        mAsyncChannel.sendMessage(RSSI_PKTCNT_FETCH, 0, putListener(listener));
!!!9720844.java!!!	calculateSignalLevel(in rssi : int, in numLevels : int) : int
        if (rssi <= MIN_RSSI) {
            return 0;
        } else if (rssi >= MAX_RSSI) {
            return numLevels - 1;
        } else {
            float inputRange = (MAX_RSSI - MIN_RSSI);
            float outputRange = (numLevels - 1);
            return (int)((float)(rssi - MIN_RSSI) * outputRange / inputRange);
        }
!!!9720972.java!!!	compareSignalLevel(in rssiA : int, in rssiB : int) : int
        return rssiA - rssiB;
!!!9721100.java!!!	setWifiApEnabled(inout wifiConfig : WifiConfiguration, inout enabled : boolean) : boolean
        try {
            mService.setWifiApEnabled(wifiConfig, enabled);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9721228.java!!!	getWifiApState() : int
        try {
            return mService.getWifiApEnabledState();
        } catch (RemoteException e) {
            return WIFI_AP_STATE_FAILED;
        }
!!!9721356.java!!!	isWifiApEnabled() : boolean
        return getWifiApState() == WIFI_AP_STATE_ENABLED;
!!!9721484.java!!!	getWifiApConfiguration() : WifiConfiguration
        try {
            return mService.getWifiApConfiguration();
        } catch (RemoteException e) {
            return null;
        }
!!!9721612.java!!!	setWifiApConfiguration(inout wifiConfig : WifiConfiguration) : boolean
        try {
            mService.setWifiApConfiguration(wifiConfig);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9721740.java!!!	startWifi() : boolean
        try {
            mService.startWifi();
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9721868.java!!!	stopWifi() : boolean
        try {
            mService.stopWifi();
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9721996.java!!!	addToBlacklist(in bssid : String) : boolean
        try {
            mService.addToBlacklist(bssid);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9722124.java!!!	clearBlacklist() : boolean
        try {
            mService.clearBlacklist();
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!9723404.java!!!	putListener(inout listener : Object) : int
        if (listener == null) return INVALID_KEY;
        int key;
        synchronized (mListenerMapLock) {
            do {
                key = mListenerKey++;
            } while (key == INVALID_KEY);
            mListenerMap.put(key, listener);
        }
        return key;
!!!9723532.java!!!	removeListener(in key : int) : Object
        if (key == INVALID_KEY) return null;
        synchronized (mListenerMapLock) {
            Object listener = mListenerMap.get(key);
            mListenerMap.remove(key);
            return listener;
        }
!!!9723660.java!!!	init() : void
        mWifiServiceMessenger = getWifiServiceMessenger();
        if (mWifiServiceMessenger == null) {
            mAsyncChannel = null;
            return;
        }

        synchronized (sThreadRefLock) {
            if (++sThreadRefCount == 1) {
                sHandlerThread = new HandlerThread("WifiManager");
                sHandlerThread.start();
            }
        }

        mHandler = new ServiceHandler(sHandlerThread.getLooper());
        mAsyncChannel.connect(mContext, mHandler, mWifiServiceMessenger);
        try {
            mConnected.await();
        } catch (InterruptedException e) {
            Log.e(TAG, "interrupted wait at init");
        }
!!!9723788.java!!!	validateChannel() : void
        if (mAsyncChannel == null) throw new IllegalStateException(
                "No permission to access and change wifi or a bad initialization");
!!!9723916.java!!!	connect(inout config : WifiConfiguration, inout listener : ActionListener) : void
        if (config == null) throw new IllegalArgumentException("config cannot be null");
        validateChannel();
        // Use INVALID_NETWORK_ID for arg1 when passing a config object
        // arg1 is used to pass network id when the network already exists
        mAsyncChannel.sendMessage(CONNECT_NETWORK, WifiConfiguration.INVALID_NETWORK_ID,
                putListener(listener), config);
!!!9724044.java!!!	connect(in networkId : int, inout listener : ActionListener) : void
        if (networkId < 0) throw new IllegalArgumentException("Network id cannot be negative");
        validateChannel();
        mAsyncChannel.sendMessage(CONNECT_NETWORK, networkId, putListener(listener));
!!!9724172.java!!!	save(inout config : WifiConfiguration, inout listener : ActionListener) : void
        if (config == null) throw new IllegalArgumentException("config cannot be null");
        validateChannel();
        mAsyncChannel.sendMessage(SAVE_NETWORK, 0, putListener(listener), config);
!!!9724300.java!!!	forget(in netId : int, inout listener : ActionListener) : void
        if (netId < 0) throw new IllegalArgumentException("Network id cannot be negative");
        validateChannel();
        mAsyncChannel.sendMessage(FORGET_NETWORK, netId, putListener(listener));
!!!9724428.java!!!	disable(in netId : int, inout listener : ActionListener) : void
        if (netId < 0) throw new IllegalArgumentException("Network id cannot be negative");
        validateChannel();
        mAsyncChannel.sendMessage(DISABLE_NETWORK, netId, putListener(listener));
!!!9724556.java!!!	startWps(inout config : WpsInfo, inout listener : WpsListener) : void
        if (config == null) throw new IllegalArgumentException("config cannot be null");
        validateChannel();
        mAsyncChannel.sendMessage(START_WPS, 0, putListener(listener), config);
!!!9724684.java!!!	cancelWps(inout listener : ActionListener) : void
        validateChannel();
        mAsyncChannel.sendMessage(CANCEL_WPS, 0, putListener(listener));
!!!9724812.java!!!	getWifiServiceMessenger() : Messenger
        try {
            return mService.getWifiServiceMessenger();
        } catch (RemoteException e) {
            return null;
        } catch (SecurityException e) {
            return null;
        }
!!!9724940.java!!!	getWifiStateMachineMessenger() : Messenger
        try {
            return mService.getWifiStateMachineMessenger();
        } catch (RemoteException e) {
            return null;
        }
!!!9725068.java!!!	getConfigFile() : String
        try {
            return mService.getConfigFile();
        } catch (RemoteException e) {
            return null;
        }
!!!9726220.java!!!	createWifiLock(in lockType : int, in tag : String) : WifiLock
        return new WifiLock(lockType, tag);
!!!9726348.java!!!	createWifiLock(in tag : String) : WifiLock
        return new WifiLock(WIFI_MODE_FULL, tag);
!!!9726476.java!!!	createMulticastLock(in tag : String) : MulticastLock
        return new MulticastLock(tag);
!!!9727500.java!!!	isMulticastEnabled() : boolean
        try {
            return mService.isMulticastEnabled();
        } catch (RemoteException e) {
            return false;
        }
!!!9727628.java!!!	initializeMulticastFiltering() : boolean
        try {
            mService.initializeMulticastFiltering();
            return true;
        } catch (RemoteException e) {
             return false;
        }
!!!9727756.java!!!	captivePortalCheckComplete() : void
        try {
            mService.captivePortalCheckComplete();
        } catch (RemoteException e) {}
!!!9727884.java!!!	finalize() : void
        try {
            synchronized (sThreadRefLock) {
                if (--sThreadRefCount == 0 && sHandlerThread != null) {
                    sHandlerThread.getLooper().quit();
                }
            }
        } finally {
            super.finalize();
        }
