class CommonClock
!!!1202828.cpp!!!	CommonClock()
    cur_slew_        = 0;
    cur_trans_valid_ = false;

    cur_trans_.a_zero = 0;
    cur_trans_.b_zero = 0;
    cur_trans_.a_to_b_numer = local_to_common_freq_numer_ = 1;
    cur_trans_.a_to_b_denom = local_to_common_freq_denom_ = 1;
    duration_trans_ = cur_trans_;
!!!1202956.cpp!!!	init(in local_freq : uint64_t) : bool
    Mutex::Autolock lock(&lock_);

    if (!local_freq)
        return false;

    uint64_t numer = kCommonFreq;
    uint64_t denom = local_freq;

    LinearTransform::reduce(&numer, &denom);
    if ((numer > UINT32_MAX) || (denom > UINT32_MAX)) {
        ALOGE("Overflow in CommonClock::init while trying to reduce %lld/%lld",
             kCommonFreq, local_freq);
        return false;
    }

    cur_trans_.a_to_b_numer = local_to_common_freq_numer_ =
        static_cast<uint32_t>(numer);
    cur_trans_.a_to_b_denom = local_to_common_freq_denom_ =
        static_cast<uint32_t>(denom);
    duration_trans_ = cur_trans_;

    return true;
!!!1203084.cpp!!!	localToCommon(in local : int64_t, inout common_out : int64_t) : status_t
    Mutex::Autolock lock(&lock_);

    if (!cur_trans_valid_)
        return INVALID_OPERATION;

    if (!cur_trans_.doForwardTransform(local, common_out))
        return INVALID_OPERATION;

    return OK;
!!!1203212.cpp!!!	commonToLocal(in common : int64_t, inout local_out : int64_t) : status_t
    Mutex::Autolock lock(&lock_);

    if (!cur_trans_valid_)
        return INVALID_OPERATION;

    if (!cur_trans_.doReverseTransform(common, local_out))
        return INVALID_OPERATION;

    return OK;
!!!1203340.cpp!!!	localDurationToCommonDuration(in localDur : int64_t) : int64_t
    int64_t ret;
    duration_trans_.doForwardTransform(localDur, &ret);
    return ret;
!!!1203724.cpp!!!	setSlew(in change_time : int64_t, in ppm : int32_t) : status_t
    Mutex::Autolock lock(&lock_);

    int64_t new_local_basis;
    int64_t new_common_basis;

    if (cur_trans_valid_) {
        new_local_basis = change_time;
        if (!cur_trans_.doForwardTransform(change_time, &new_common_basis)) {
            ALOGE("Overflow when attempting to set slew rate to %d", ppm);
            return INVALID_OPERATION;
        }
    } else {
        new_local_basis = 0;
        new_common_basis = 0;
    }

    cur_slew_ = ppm;
    uint32_t n1 = local_to_common_freq_numer_;
    uint32_t n2 = 1000000 + cur_slew_;

    uint32_t d1 = local_to_common_freq_denom_;
    uint32_t d2 = 1000000;

    // n1/d1 has already been reduced, no need to do so here.
    LinearTransform::reduce(&n1, &d2);
    LinearTransform::reduce(&n2, &d1);
    LinearTransform::reduce(&n2, &d2);

    cur_trans_.a_zero = new_local_basis;
    cur_trans_.b_zero = new_common_basis;
    cur_trans_.a_to_b_numer = n1 * n2;
    cur_trans_.a_to_b_denom = d1 * d2;

    return OK;
!!!1203852.cpp!!!	setBasis(in local : int64_t, in common : int64_t) : void
    Mutex::Autolock lock(&lock_);

    cur_trans_.a_zero = local;
    cur_trans_.b_zero = common;
    cur_trans_valid_ = true;
!!!1203980.cpp!!!	resetBasis() : void
    Mutex::Autolock lock(&lock_);

    cur_trans_.a_zero = 0;
    cur_trans_.b_zero = 0;
    cur_trans_valid_ = false;
