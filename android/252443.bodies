class TreeSet
!!!1411355.java!!!	TreeSet(inout map : NavigableMap)
        backingMap = map;
!!!1411483.java!!!	TreeSet()
        backingMap = new TreeMap<E, Object>();
!!!1411611.java!!!	TreeSet(inout collection : Collection)
        this();
        addAll(collection);
!!!1411739.java!!!	TreeSet(inout comparator : Comparator)
        backingMap = new TreeMap<E, Object>(comparator);
!!!1411867.java!!!	TreeSet(inout set : SortedSet)
        this(set.comparator());
        Iterator<E> it = set.iterator();
        while (it.hasNext()) {
            add(it.next());
        }
!!!1411995.java!!!	add(inout object : E) : boolean
        return backingMap.put(object, Boolean.TRUE) == null;
!!!1412123.java!!!	addAll(inout collection : Collection) : boolean
        return super.addAll(collection);
!!!1412251.java!!!	clear() : void
        backingMap.clear();
!!!1412379.java!!!	clone() : Object
        try {
            TreeSet<E> clone = (TreeSet<E>) super.clone();
            if (backingMap instanceof TreeMap) {
                clone.backingMap = (NavigableMap<E, Object>) ((TreeMap<E, Object>) backingMap)
                        .clone();
            } else {
                clone.backingMap = new TreeMap<E, Object>(backingMap);
            }
            return clone;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1412507.java!!!	comparator() : Comparator
        return backingMap.comparator();
!!!1412635.java!!!	contains(inout object : Object) : boolean
        return backingMap.containsKey(object);
!!!1412763.java!!!	isEmpty() : boolean
        return backingMap.isEmpty();
!!!1412891.java!!!	iterator() : Iterator
        return backingMap.keySet().iterator();
!!!1413019.java!!!	descendingIterator() : Iterator
        return descendingSet().iterator();
!!!1413147.java!!!	remove(inout object : Object) : boolean
        return backingMap.remove(object) != null;
!!!1413275.java!!!	size() : int
        return backingMap.size();
!!!1413403.java!!!	first() : E
        return backingMap.firstKey();
!!!1413531.java!!!	last() : E
        return backingMap.lastKey();
!!!1413659.java!!!	pollFirst() : E
        Map.Entry<E, Object> entry = backingMap.pollFirstEntry();
        return (entry == null) ? null : entry.getKey();
!!!1413787.java!!!	pollLast() : E
        Map.Entry<E, Object> entry = backingMap.pollLastEntry();
        return (entry == null) ? null : entry.getKey();
!!!1413915.java!!!	higher(inout e : E) : E
        return backingMap.higherKey(e);
!!!1414043.java!!!	lower(inout e : E) : E
        return backingMap.lowerKey(e);
!!!1414171.java!!!	ceiling(inout e : E) : E
        return backingMap.ceilingKey(e);
!!!1414299.java!!!	floor(inout e : E) : E
        return backingMap.floorKey(e);
!!!1414427.java!!!	descendingSet() : NavigableSet
        return (descendingSet != null) ? descendingSet
                : (descendingSet = new TreeSet<E>(backingMap.descendingMap()));
!!!1414555.java!!!	subSet(inout start : E, inout startInclusive : boolean, inout end : E, inout endInclusive : boolean) : NavigableSet
        Comparator<? super E> c = backingMap.comparator();
        int compare = (c == null) ? ((Comparable<E>) start).compareTo(end) : c
                .compare(start, end);
        if (compare <= 0) {
            return new TreeSet<E>(backingMap.subMap(start, startInclusive, end,
                    endInclusive));
        }
        throw new IllegalArgumentException();
!!!1414683.java!!!	headSet(inout end : E, inout endInclusive : boolean) : NavigableSet
        // Check for errors
        Comparator<? super E> c = backingMap.comparator();
        if (c == null) {
            ((Comparable<E>) end).compareTo(end);
        } else {
            c.compare(end, end);
        }
        return new TreeSet<E>(backingMap.headMap(end, endInclusive));
!!!1414811.java!!!	tailSet(inout start : E, inout startInclusive : boolean) : NavigableSet
        // Check for errors
        Comparator<? super E> c = backingMap.comparator();
        if (c == null) {
            ((Comparable<E>) start).compareTo(start);
        } else {
            c.compare(start, start);
        }
        return new TreeSet<E>(backingMap.tailMap(start, startInclusive));
!!!1414939.java!!!	subSet(inout start : E, inout end : E) : SortedSet
        return subSet(start, true, end, false);
!!!1415067.java!!!	headSet(inout end : E) : SortedSet
        return headSet(end, false);
!!!1415195.java!!!	tailSet(inout start : E) : SortedSet
        return tailSet(start, true);
!!!1415323.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        stream.defaultWriteObject();
        stream.writeObject(backingMap.comparator());
        int size = backingMap.size();
        stream.writeInt(size);
        if (size > 0) {
            Iterator<E> it = backingMap.keySet().iterator();
            while (it.hasNext()) {
                stream.writeObject(it.next());
            }
        }
!!!1415451.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();
        TreeMap<E, Object> map = new TreeMap<E, Object>(
                (Comparator<? super E>) stream.readObject());
        int size = stream.readInt();
        if (size > 0) {
            for (int i=0; i<size; i++) {
                E elem = (E)stream.readObject();
                map.put(elem, Boolean.TRUE);
            }
        }
        backingMap = map;
