class RequestHeaders
!!!2106779.java!!!	RequestHeaders(inout uri : URI, inout headers : RawHeaders)
        this.uri = uri;
        this.headers = headers;

        HeaderParser.CacheControlHandler handler = new HeaderParser.CacheControlHandler() {
            @Override public void handle(String directive, String parameter) {
                if (directive.equalsIgnoreCase("no-cache")) {
                    noCache = true;
                } else if (directive.equalsIgnoreCase("max-age")) {
                    maxAgeSeconds = HeaderParser.parseSeconds(parameter);
                } else if (directive.equalsIgnoreCase("max-stale")) {
                    maxStaleSeconds = HeaderParser.parseSeconds(parameter);
                } else if (directive.equalsIgnoreCase("min-fresh")) {
                    minFreshSeconds = HeaderParser.parseSeconds(parameter);
                } else if (directive.equalsIgnoreCase("only-if-cached")) {
                    onlyIfCached = true;
                }
            }
        };

        for (int i = 0; i < headers.length(); i++) {
            String fieldName = headers.getFieldName(i);
            String value = headers.getValue(i);
            if ("Cache-Control".equalsIgnoreCase(fieldName)) {
                HeaderParser.parseCacheControl(value, handler);
            } else if ("Pragma".equalsIgnoreCase(fieldName)) {
                if (value.equalsIgnoreCase("no-cache")) {
                    noCache = true;
                }
            } else if ("If-None-Match".equalsIgnoreCase(fieldName)) {
                ifNoneMatch = value;
            } else if ("If-Modified-Since".equalsIgnoreCase(fieldName)) {
                ifModifiedSince = value;
            } else if ("Authorization".equalsIgnoreCase(fieldName)) {
                hasAuthorization = true;
            } else if ("Content-Length".equalsIgnoreCase(fieldName)) {
                try {
                    contentLength = Integer.parseInt(value);
                } catch (NumberFormatException ignored) {
                }
            } else if ("Transfer-Encoding".equalsIgnoreCase(fieldName)) {
                transferEncoding = value;
            } else if ("User-Agent".equalsIgnoreCase(fieldName)) {
                userAgent = value;
            } else if ("Host".equalsIgnoreCase(fieldName)) {
                host = value;
            } else if ("Connection".equalsIgnoreCase(fieldName)) {
                connection = value;
            } else if ("Accept-Encoding".equalsIgnoreCase(fieldName)) {
                acceptEncoding = value;
            } else if ("Content-Type".equalsIgnoreCase(fieldName)) {
                contentType = value;
            } else if ("Proxy-Authorization".equalsIgnoreCase(fieldName)) {
                proxyAuthorization = value;
            }
        }
!!!2106907.java!!!	isChunked() : boolean
        return "chunked".equalsIgnoreCase(transferEncoding);
!!!2107035.java!!!	hasConnectionClose() : boolean
        return "close".equalsIgnoreCase(connection);
!!!2107163.java!!!	getUri() : URI
        return uri;
!!!2107291.java!!!	getHeaders() : RawHeaders
        return headers;
!!!2107419.java!!!	isNoCache() : boolean
        return noCache;
!!!2107547.java!!!	getMaxAgeSeconds() : int
        return maxAgeSeconds;
!!!2107675.java!!!	getMaxStaleSeconds() : int
        return maxStaleSeconds;
!!!2107803.java!!!	getMinFreshSeconds() : int
        return minFreshSeconds;
!!!2107931.java!!!	isOnlyIfCached() : boolean
        return onlyIfCached;
!!!2108059.java!!!	hasAuthorization() : boolean
        return hasAuthorization;
!!!2108187.java!!!	getContentLength() : int
        return contentLength;
!!!2108315.java!!!	getTransferEncoding() : String
        return transferEncoding;
!!!2108443.java!!!	getUserAgent() : String
        return userAgent;
!!!2108571.java!!!	getHost() : String
        return host;
!!!2108699.java!!!	getConnection() : String
        return connection;
!!!2108827.java!!!	getAcceptEncoding() : String
        return acceptEncoding;
!!!2108955.java!!!	getContentType() : String
        return contentType;
!!!2109083.java!!!	getIfModifiedSince() : String
        return ifModifiedSince;
!!!2109211.java!!!	getIfNoneMatch() : String
        return ifNoneMatch;
!!!2109339.java!!!	getProxyAuthorization() : String
        return proxyAuthorization;
!!!2109467.java!!!	setChunked() : void
        if (this.transferEncoding != null) {
            headers.removeAll("Transfer-Encoding");
        }
        headers.add("Transfer-Encoding", "chunked");
        this.transferEncoding = "chunked";
!!!2109595.java!!!	setContentLength(in contentLength : int) : void
        if (this.contentLength != -1) {
            headers.removeAll("Content-Length");
        }
        headers.add("Content-Length", Integer.toString(contentLength));
        this.contentLength = contentLength;
!!!2109723.java!!!	setUserAgent(inout userAgent : String) : void
        if (this.userAgent != null) {
            headers.removeAll("User-Agent");
        }
        headers.add("User-Agent", userAgent);
        this.userAgent = userAgent;
!!!2109851.java!!!	setHost(inout host : String) : void
        if (this.host != null) {
            headers.removeAll("Host");
        }
        headers.add("Host", host);
        this.host = host;
!!!2109979.java!!!	setConnection(inout connection : String) : void
        if (this.connection != null) {
            headers.removeAll("Connection");
        }
        headers.add("Connection", connection);
        this.connection = connection;
!!!2110107.java!!!	setAcceptEncoding(inout acceptEncoding : String) : void
        if (this.acceptEncoding != null) {
            headers.removeAll("Accept-Encoding");
        }
        headers.add("Accept-Encoding", acceptEncoding);
        this.acceptEncoding = acceptEncoding;
!!!2110235.java!!!	setContentType(inout contentType : String) : void
        if (this.contentType != null) {
            headers.removeAll("Content-Type");
        }
        headers.add("Content-Type", contentType);
        this.contentType = contentType;
!!!2110363.java!!!	setIfModifiedSince(inout date : Date) : void
        if (ifModifiedSince != null) {
            headers.removeAll("If-Modified-Since");
        }
        String formattedDate = HttpDate.format(date);
        headers.add("If-Modified-Since", formattedDate);
        ifModifiedSince = formattedDate;
!!!2110491.java!!!	setIfNoneMatch(inout ifNoneMatch : String) : void
        if (this.ifNoneMatch != null) {
            headers.removeAll("If-None-Match");
        }
        headers.add("If-None-Match", ifNoneMatch);
        this.ifNoneMatch = ifNoneMatch;
!!!2110619.java!!!	hasConditions() : boolean
        return ifModifiedSince != null || ifNoneMatch != null;
!!!2110747.java!!!	addCookies(inout allCookieHeaders : Map) : void
        for (Map.Entry<String, List<String>> entry : allCookieHeaders.entrySet()) {
            String key = entry.getKey();
            if ("Cookie".equalsIgnoreCase(key) || "Cookie2".equalsIgnoreCase(key)) {
                headers.addAll(key, entry.getValue());
            }
        }
