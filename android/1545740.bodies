class FontHandler
!!!9537932.java!!!	FontHandler(in osFontsLocation : String)
            super();
            mOsFontsLocation = osFontsLocation;
!!!9538060.java!!!	getFontList() : FontInfo
            return mFontList;
!!!9538188.java!!!	startElement(in uri : String, in localName : String, in name : String, inout attributes : Attributes) : void
            if (NODE_FAMILYSET.equals(localName)) {
                mFontList = new ArrayList<FontInfo>();
            } else if (NODE_FAMILY.equals(localName)) {
                if (mFontList != null) {
                    mFontInfo = new FontInfo();
                }
            }

            mBuilder.setLength(0);

            super.startElement(uri, localName, name, attributes);
!!!9538316.java!!!	characters(inout ch : char, in start : int, in length : int) : void
            mBuilder.append(ch, start, length);
!!!9538444.java!!!	endElement(in uri : String, in localName : String, in name : String) : void
            if (NODE_FAMILY.equals(localName)) {
                if (mFontInfo != null) {
                    // if has a normal font file, add to the list
                    if (mFontInfo.font[Typeface.NORMAL] != null) {
                        mFontList.add(mFontInfo);

                        // create missing font styles, order is important.
                        if (mFontInfo.font[Typeface.BOLD_ITALIC] == null) {
                            computeDerivedFont(Typeface.BOLD_ITALIC, DERIVE_BOLD_ITALIC);
                        }
                        if (mFontInfo.font[Typeface.ITALIC] == null) {
                            computeDerivedFont(Typeface.ITALIC, DERIVE_ITALIC);
                        }
                        if (mFontInfo.font[Typeface.BOLD] == null) {
                            computeDerivedFont(Typeface.BOLD, DERIVE_BOLD);
                        }
                    }

                    mFontInfo = null;
                }
            } else if (NODE_NAME.equals(localName)) {
                // handle a new name for an existing Font Info
                if (mFontInfo != null) {
                    String family = trimXmlWhitespaces(mBuilder.toString());
                    mFontInfo.families.add(family);
                }
            } else if (NODE_FILE.equals(localName)) {
                // handle a new file for an existing Font Info
                if (mFontInfo != null) {
                    String fileName = trimXmlWhitespaces(mBuilder.toString());
                    Font font = getFont(fileName);
                    if (font != null) {
                        if (fileName.endsWith(FONT_SUFFIX_REGULAR)) {
                            mFontInfo.font[Typeface.NORMAL] = font;
                        } else if (fileName.endsWith(FONT_SUFFIX_BOLD)) {
                            mFontInfo.font[Typeface.BOLD] = font;
                        } else if (fileName.endsWith(FONT_SUFFIX_ITALIC)) {
                            mFontInfo.font[Typeface.ITALIC] = font;
                        } else if (fileName.endsWith(FONT_SUFFIX_BOLDITALIC)) {
                            mFontInfo.font[Typeface.BOLD_ITALIC] = font;
                        } else if (fileName.endsWith(FONT_SUFFIX_NONE)) {
                            mFontInfo.font[Typeface.NORMAL] = font;
                        }
                    }
                }
            }
!!!9538572.java!!!	getFont(in fileName : String) : Font
            try {
                File file = new File(mOsFontsLocation, fileName);
                if (file.exists()) {
                    return Font.createFont(Font.TRUETYPE_FONT, file);
                }
            } catch (Exception e) {

            }

            return null;
!!!9538700.java!!!	computeDerivedFont(in toCompute : int, inout basedOnList : int) : void
            for (int basedOn : basedOnList) {
                if (mFontInfo.font[basedOn] != null) {
                    mFontInfo.font[toCompute] =
                        mFontInfo.font[basedOn].deriveFont(AWT_STYLES[toCompute]);
                    return;
                }
            }

            // we really shouldn't stop there. This means we don't have a NORMAL font...
            assert false;
!!!9538828.java!!!	trimXmlWhitespaces(in value : String) : String
            if (value == null) {
                return null;
            }

            // look for carriage return and replace all whitespace around it by just 1 space.
            int index;

            while ((index = value.indexOf('\n')) != -1) {
                // look for whitespace on each side
                int left = index - 1;
                while (left >= 0) {
                    if (Character.isWhitespace(value.charAt(left))) {
                        left--;
                    } else {
                        break;
                    }
                }

                int right = index + 1;
                int count = value.length();
                while (right < count) {
                    if (Character.isWhitespace(value.charAt(right))) {
                        right++;
                    } else {
                        break;
                    }
                }

                // remove all between left and right (non inclusive) and replace by a single space.
                String leftString = null;
                if (left >= 0) {
                    leftString = value.substring(0, left + 1);
                }
                String rightString = null;
                if (right < count) {
                    rightString = value.substring(right);
                }

                if (leftString != null) {
                    value = leftString;
                    if (rightString != null) {
                        value += " " + rightString;
                    }
                } else {
                    value = rightString != null ? rightString : "";
                }
            }

            // now we un-escape the string
            int length = value.length();
            char[] buffer = value.toCharArray();

            for (int i = 0 ; i < length ; i++) {
                if (buffer[i] == '\\') {
                    if (buffer[i+1] == 'n') {
                        // replace the char with \n
                        buffer[i+1] = '\n';
                    }

                    // offset the rest of the buffer since we go from 2 to 1 char
                    System.arraycopy(buffer, i+1, buffer, i, length - i - 1);
                    length--;
                }
            }

            return new String(buffer, 0, length);
