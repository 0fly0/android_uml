class HdmiCecDevDiscoveryThread
!!!11043084.cpp!!!	ThreadWrapper(inout pContext : void) : void
    ALOGD("HdmiCECDevDiscovery:inside run method");
    HdmiCecDevDiscoveryThread *devDiscoveryThread = (HdmiCecDevDiscoveryThread*)pContext;
    if (devDiscoveryThread != NULL) {
        ALOGD("call to do discovery");
        devDiscoveryThread->doDiscovery();
    }
    return NULL;
!!!11043212.cpp!!!	doDiscovery() : void
    ALOGD("HdmiCECDevDiscovery:inside doDiscovery method");
    int result = CEC_FAILURE;

    TV_CEC_DEV_INFO *pDevInfo = (TV_CEC_DEV_INFO*) malloc(
        sizeof(TV_CEC_DEV_INFO) * (DEFAULT_DEVICE_NO));
    ALOGD("Inside doDiscovery() malloced the devList memory (addr:%p)", pDevInfo);
    memset(pDevInfo, 0, sizeof(TV_CEC_DEV_INFO) * (DEFAULT_DEVICE_NO));
    while (1) {
        {
            Mutex::Autolock autolock(mThreadStatusLock);
            while (THREAD_STATUS_IDLE == mThreadStatus || THREAD_STATUS_STOPPED == mThreadStatus)
            {
                mTheadStatusCond.wait(mThreadStatusLock);
            }
        }

        if (THREAD_STATUS_EXITED == mThreadStatus) {
            ALOGD("Exit the thread!");
            break;
        }

        while (THREAD_STATUS_RUNNING == mThreadStatus) {
            ALOGD("starting the discovery when theadStatus:%d", mThreadStatus);
            int numDevice = 0;
            ALOGD("after waiting a long time on mTheadStatusCond");
            ALOGD("TV_CEC_SVS_API_GetAllConnectedDeviceInfo starts");
            result = TV_CEC_SVS_API_GetAllConnectedDeviceInfo(pDevInfo, &numDevice);
            if (CEC_SUCCESS != result)
            {
                ALOGD("Get All Connected Cec Device Info failed with result %d", result);
                break;
            }
            ALOGD("TV_CEC_SVS_API_GetAllConnectedDeviceInfo Success numDevice:%d", numDevice);
            ALOGD("calling setScannedDeviceList()");
            setScannedDeviceList(numDevice, pDevInfo);
            // wait procedure
            {
                ALOGD("ready to wait");
                Mutex::Autolock autolock(mPollingCondLock);
                mPollingCond.waitRelative(mPollingCondLock, pollingInterval * 1000000000LL);
                ALOGD("wait pass");
            }
        }
    }

    ALOGD("Out of thread loop now");
    if (NULL != pDevInfo) {
        free(pDevInfo);
        pDevInfo = NULL;
    }
    return NULL;
!!!11043340.cpp!!!	cancelWait() : void
    // wake up the wait procedure as soon as possible
    Mutex::Autolock autolock(mPollingCondLock);
    mPollingCond.signal();
!!!11043468.cpp!!!	HdmiCecDevDiscoveryThread()
    ALOGD("HdmiCECDevDiscovery:constructor");
    int res = pthread_create(&devDiscoveryThread,
                             NULL,
                             HdmiCecDevDiscoveryThread::ThreadWrapper,
                             this);
    if (0 != res) {
        ALOGE("Failed to create pthread while starting work thread! (%d)", res);
    }
!!!11043596.cpp!!!	~HdmiCecDevDiscoveryThread()
    exit();
    void* junk;
    pthread_join(devDiscoveryThread, &junk);
    ALOGD("HdmiCecDevDiscoveryThread desctor thread exit with result:(%d)", (int)junk);
!!!11043724.cpp!!!	exit() : void
    Mutex::Autolock autolock(mThreadStatusLock);
    mThreadStatus = THREAD_STATUS_EXITED;
    mTheadStatusCond.signal();
    cancelWait();
!!!11043852.cpp!!!	start() : void
    ALOGD("inside the start thread");
    Mutex::Autolock autolock(mThreadStatusLock);
    mThreadStatus = THREAD_STATUS_RUNNING;
    mTheadStatusCond.signal();
!!!11043980.cpp!!!	stop() : void
    ALOGD("inside the stop thread");
    mThreadStatus = THREAD_STATUS_STOPPED;
    cancelWait();
!!!11044108.cpp!!!	setSleepTimer(in interval : int) : void
    pollingInterval = interval;
