class FountainFboRS
!!!9203596.java!!!	init(inout rs : RenderScriptGL, inout res : Resources) : void
      mRS = rs;
      mRes = res;

      ScriptField_Point points = new ScriptField_Point(mRS, PART_COUNT);

      Mesh.AllocationBuilder smb = new Mesh.AllocationBuilder(mRS);
      smb.addVertexAllocation(points.getAllocation());
      smb.addIndexSetType(Mesh.Primitive.POINT);
      Mesh sm = smb.create();

      mScript = new ScriptC_fountainfbo(mRS, mRes, R.raw.fountainfbo);
      mScript.set_partMesh(sm);
      mScript.bind_point(points);

      ProgramFragmentFixedFunction.Builder pfb = new ProgramFragmentFixedFunction.Builder(rs);
      pfb.setVaryingColor(true);
      mProgramFragment = pfb.create();
      mScript.set_gProgramFragment(mProgramFragment);

      /* Second fragment shader to use a texture (framebuffer object) to draw with */
      pfb.setTexture(ProgramFragmentFixedFunction.Builder.EnvMode.REPLACE,
          ProgramFragmentFixedFunction.Builder.Format.RGBA, 0);

      /* Set the fragment shader in the Renderscript runtime */
      mTextureProgramFragment = pfb.create();
      mScript.set_gTextureProgramFragment(mTextureProgramFragment);

      /* Create the allocation for the color buffer */
      Type.Builder colorBuilder = new Type.Builder(mRS, Element.RGBA_8888(mRS));
      colorBuilder.setX(256).setY(256);
      mColorBuffer = Allocation.createTyped(mRS, colorBuilder.create(),
      Allocation.USAGE_GRAPHICS_TEXTURE |
      Allocation.USAGE_GRAPHICS_RENDER_TARGET);

      /* Set the allocation in the Renderscript runtime */
      mScript.set_gColorBuffer(mColorBuffer);

      mRS.bindRootScript(mScript);
!!!9203724.java!!!	newTouchPosition(in x : float, in y : float, in pressure : float, in id : int) : void
        if (id >= holdingColor.length) {
            return;
        }
        int rate = (int)(pressure * pressure * 500.f);
        if (rate > 500) {
            rate = 500;
        }
        if (rate > 0) {
            mScript.invoke_addParticles(rate, x, y, id, !holdingColor[id]);
            holdingColor[id] = true;
        } else {
            holdingColor[id] = false;
        }

