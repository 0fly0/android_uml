class LinkProperties
!!!3606924.java!!!	LinkProperties()
        clear();
!!!3607052.java!!!	LinkProperties(inout source : LinkProperties)
        if (source != null) {
            mIfaceName = source.getInterfaceName();
            for (LinkAddress l : source.getLinkAddresses()) mLinkAddresses.add(l);
            for (InetAddress i : source.getDnses()) mDnses.add(i);
            for (RouteInfo r : source.getRoutes()) mRoutes.add(r);
            mHttpProxy = (source.getHttpProxy() == null)  ?
                null : new ProxyProperties(source.getHttpProxy());
        }
!!!3607180.java!!!	setInterfaceName(in iface : String) : void
        mIfaceName = iface;
!!!3607308.java!!!	getInterfaceName() : String
        return mIfaceName;
!!!3607436.java!!!	getAddresses() : Collection<InetAddress>
        Collection<InetAddress> addresses = new ArrayList<InetAddress>();
        for (LinkAddress linkAddress : mLinkAddresses) {
            addresses.add(linkAddress.getAddress());
        }
        return Collections.unmodifiableCollection(addresses);
!!!3607564.java!!!	addLinkAddress(inout address : LinkAddress) : void
        if (address != null) mLinkAddresses.add(address);
!!!3607692.java!!!	getLinkAddresses() : LinkAddress
        return Collections.unmodifiableCollection(mLinkAddresses);
!!!3607820.java!!!	addDns(inout dns : InetAddress) : void
        if (dns != null) mDnses.add(dns);
!!!3607948.java!!!	getDnses() : Collection<InetAddress>
        return Collections.unmodifiableCollection(mDnses);
!!!3608076.java!!!	addRoute(inout route : RouteInfo) : void
        if (route != null) mRoutes.add(route);
!!!3608204.java!!!	getRoutes() : RouteInfo
        return Collections.unmodifiableCollection(mRoutes);
!!!3608332.java!!!	setHttpProxy(inout proxy : ProxyProperties) : void
        mHttpProxy = proxy;
!!!3608460.java!!!	getHttpProxy() : ProxyProperties
        return mHttpProxy;
!!!3608588.java!!!	clear() : void
        mIfaceName = null;
        mLinkAddresses.clear();
        mDnses.clear();
        mRoutes.clear();
        mHttpProxy = null;
!!!3608716.java!!!	describeContents() : int
        return 0;
!!!3608844.java!!!	toString() : String
        String ifaceName = (mIfaceName == null ? "" : "InterfaceName: " + mIfaceName + " ");

        String linkAddresses = "LinkAddresses: [";
        for (LinkAddress addr : mLinkAddresses) linkAddresses += addr.toString() + ",";
        linkAddresses += "] ";

        String dns = "DnsAddresses: [";
        for (InetAddress addr : mDnses) dns += addr.getHostAddress() + ",";
        dns += "] ";

        String routes = "Routes: [";
        for (RouteInfo route : mRoutes) routes += route.toString() + ",";
        routes += "] ";
        String proxy = (mHttpProxy == null ? "" : "HttpProxy: " + mHttpProxy.toString() + " ");

        return ifaceName + linkAddresses + routes + dns + proxy;
!!!3608972.java!!!	isIdenticalInterfaceName(inout target : LinkProperties) : boolean
        return TextUtils.equals(getInterfaceName(), target.getInterfaceName());
!!!3609100.java!!!	isIdenticalAddresses(inout target : LinkProperties) : boolean
        Collection<InetAddress> targetAddresses = target.getAddresses();
        Collection<InetAddress> sourceAddresses = getAddresses();
        return (sourceAddresses.size() == targetAddresses.size()) ?
                    sourceAddresses.containsAll(targetAddresses) : false;
!!!3609228.java!!!	isIdenticalDnses(inout target : LinkProperties) : boolean
        Collection<InetAddress> targetDnses = target.getDnses();
        return (mDnses.size() == targetDnses.size()) ?
                    mDnses.containsAll(targetDnses) : false;
!!!3609356.java!!!	isIdenticalRoutes(inout target : LinkProperties) : boolean
        Collection<RouteInfo> targetRoutes = target.getRoutes();
        return (mRoutes.size() == targetRoutes.size()) ?
                    mRoutes.containsAll(targetRoutes) : false;
!!!3609484.java!!!	isIdenticalHttpProxy(inout target : LinkProperties) : boolean
        return getHttpProxy() == null ? target.getHttpProxy() == null :
                    getHttpProxy().equals(target.getHttpProxy());
!!!3609612.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) return true;

        if (!(obj instanceof LinkProperties)) return false;

        LinkProperties target = (LinkProperties) obj;

        return isIdenticalInterfaceName(target) &&
                isIdenticalAddresses(target) &&
                isIdenticalDnses(target) &&
                isIdenticalRoutes(target) &&
                isIdenticalHttpProxy(target);
!!!3609740.java!!!	compareAddresses(inout target : LinkProperties) : CompareResult
        /*
         * Duplicate the LinkAddresses into removed, we will be removing
         * address which are common between mLinkAddresses and target
         * leaving the addresses that are different. And address which
         * are in target but not in mLinkAddresses are placed in the
         * addedAddresses.
         */
        CompareResult<LinkAddress> result = new CompareResult<LinkAddress>();
        result.removed = new ArrayList<LinkAddress>(mLinkAddresses);
        result.added.clear();
        if (target != null) {
            for (LinkAddress newAddress : target.getLinkAddresses()) {
                if (! result.removed.remove(newAddress)) {
                    result.added.add(newAddress);
                }
            }
        }
        return result;
!!!3609868.java!!!	compareDnses(inout target : LinkProperties) : CompareResult
        /*
         * Duplicate the InetAddresses into removed, we will be removing
         * dns address which are common between mDnses and target
         * leaving the addresses that are different. And dns address which
         * are in target but not in mDnses are placed in the
         * addedAddresses.
         */
        CompareResult<InetAddress> result = new CompareResult<InetAddress>();

        result.removed = new ArrayList<InetAddress>(mDnses);
        result.added.clear();
        if (target != null) {
            for (InetAddress newAddress : target.getDnses()) {
                if (! result.removed.remove(newAddress)) {
                    result.added.add(newAddress);
                }
            }
        }
        return result;
!!!3609996.java!!!	compareRoutes(inout target : LinkProperties) : CompareResult
        /*
         * Duplicate the RouteInfos into removed, we will be removing
         * routes which are common between mDnses and target
         * leaving the routes that are different. And route address which
         * are in target but not in mRoutes are placed in added.
         */
        CompareResult<RouteInfo> result = new CompareResult<RouteInfo>();

        result.removed = new ArrayList<RouteInfo>(mRoutes);
        result.added.clear();
        if (target != null) {
            for (RouteInfo r : target.getRoutes()) {
                if (! result.removed.remove(r)) {
                    result.added.add(r);
                }
            }
        }
        return result;
!!!3610124.java!!!	hashCode() : int
        return ((null == mIfaceName) ? 0 : mIfaceName.hashCode()
                + mLinkAddresses.size() * 31
                + mDnses.size() * 37
                + mRoutes.size() * 41
                + ((null == mHttpProxy) ? 0 : mHttpProxy.hashCode()));
!!!3610252.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeString(getInterfaceName());
        dest.writeInt(mLinkAddresses.size());
        for(LinkAddress linkAddress : mLinkAddresses) {
            dest.writeParcelable(linkAddress, flags);
        }

        dest.writeInt(mDnses.size());
        for(InetAddress d : mDnses) {
            dest.writeByteArray(d.getAddress());
        }

        dest.writeInt(mRoutes.size());
        for(RouteInfo route : mRoutes) {
            dest.writeParcelable(route, flags);
        }

        if (mHttpProxy != null) {
            dest.writeByte((byte)1);
            dest.writeParcelable(mHttpProxy, flags);
        } else {
            dest.writeByte((byte)0);
        }
