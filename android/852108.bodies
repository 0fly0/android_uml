class ActivePool
!!!3749516.java!!!	ActivePool(in connectionCount : int)
            mIdleCache = new IdleCache();
            mConnectionCount = connectionCount;
            mThreads = new ConnectionThread[mConnectionCount];

            for (int i = 0; i < mConnectionCount; i++) {
                mThreads[i] = new ConnectionThread(
                        mContext, i, this, RequestQueue.this);
            }
!!!3749644.java!!!	startup() : void
            for (int i = 0; i < mConnectionCount; i++) {
                mThreads[i].start();
            }
!!!3749772.java!!!	shutdown() : void
            for (int i = 0; i < mConnectionCount; i++) {
                mThreads[i].requestStop();
            }
!!!3749900.java!!!	startConnectionThread() : void
            synchronized (RequestQueue.this) {
                RequestQueue.this.notify();
            }
!!!3750028.java!!!	startTiming() : void
            for (int i = 0; i < mConnectionCount; i++) {
                ConnectionThread rt = mThreads[i];
                rt.mCurrentThreadTime = -1;
                rt.mTotalThreadTime = 0;
            }
            mTotalRequest = 0;
            mTotalConnection = 0;
!!!3750156.java!!!	stopTiming() : void
            int totalTime = 0;
            for (int i = 0; i < mConnectionCount; i++) {
                ConnectionThread rt = mThreads[i];
                if (rt.mCurrentThreadTime != -1) {
                    totalTime += rt.mTotalThreadTime;
                }
                rt.mCurrentThreadTime = 0;
            }
            Log.d("Http", "Http thread used " + totalTime + " ms " + " for "
                    + mTotalRequest + " requests and " + mTotalConnection
                    + " new connections");
!!!3750284.java!!!	logState() : void
            StringBuilder dump = new StringBuilder();
            for (int i = 0; i < mConnectionCount; i++) {
                dump.append(mThreads[i] + "\n");
            }
            HttpLog.v(dump.toString());
!!!3750412.java!!!	getProxyHost() : HttpHost
            return mProxyHost;
!!!3750540.java!!!	disablePersistence() : void
            for (int i = 0; i < mConnectionCount; i++) {
                Connection connection = mThreads[i].mConnection;
                if (connection != null) connection.setCanPersist(false);
            }
            mIdleCache.clear();
!!!3750668.java!!!	getThread(inout host : HttpHost) : ConnectionThread
            synchronized(RequestQueue.this) {
                for (int i = 0; i < mThreads.length; i++) {
                    ConnectionThread ct = mThreads[i];
                    Connection connection = ct.mConnection;
                    if (connection != null && connection.mHost.equals(host)) {
                        return ct;
                    }
                }
            }
            return null;
!!!3750796.java!!!	getConnection(inout context : Context, inout host : HttpHost) : Connection
            host = RequestQueue.this.determineHost(host);
            Connection con = mIdleCache.getConnection(host);
            if (con == null) {
                mTotalConnection++;
                con = Connection.getConnection(mContext, host, mProxyHost,
                        RequestQueue.this);
            }
            return con;
!!!3750924.java!!!	recycleConnection(inout connection : Connection) : boolean
            return mIdleCache.cacheConnection(connection.getHost(), connection);
