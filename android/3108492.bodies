class OneWayService
!!!13042956.java!!!	onCreate() : void
        super.onCreate();

        // There is 1:1 mapping between tuners and devices. There is usually a
        // built in HDMI port which corresponds to the tuner as well.
        final Device tunerDevice = buildTunerDevice();
        addDevice(tunerDevice);
        setChannelUpdateInterval(tunerDevice.getId(), CHANNEL_UPDATE_INTERVAL_MS);

        // There is a 1:N mapping between IR blaster devices and HDMI ports
        // since the same blaster can control multiple devices. For the best user
        // experience, it's best to report one device with a label like "Add device
        // manually" and then dynamically assign a device ID during pairing.
        final Device irBlasterDevice = buildIrBlasterPairingDevice();
        addDevice(irBlasterDevice);
        setChannelUpdateInterval(irBlasterDevice.getId(), CHANNEL_UPDATE_INTERVAL_MS);
!!!13043084.java!!!	onScheduleRecordingRequested(in deviceId : String, in tvUri : Uri) : void
        // Display a dialog to the user.
        startActivity(new Intent(getApplicationContext(), ScheduleRecordingDialog.class)
                .setData(tvUri)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
!!!13043340.java!!!	buildLocalBinder() : Binder
        return new OneWayBinder();
!!!13043468.java!!!	buildController(in device : Device) : AbstractDeviceController
        return ControllerFactory.createController(getDeviceControllerContext(), getSettings(),
                device.getId());
!!!13043596.java!!!	buildTunerDevice() : Device
        return new Device.Builder(getPackageName(), OneWayConstants.TUNER_DEVICE_ID)
                .setType(DeviceType.OTA_TUNER)
                .setLabel(getString(R.string.tuner_device_label))
                // Setting this to true affects setup.
                .setCapability(Capability.IS_INTERNAL, true)
                // Setting this to true and setting the extra bypasses the HDMI
                // port selection screen during pairing.
                .setCapability(Capability.IS_BOUND_TO_PORT, "hdmi://localhost?port=1")
                // Tuner devices use channel lineups.
                .setCapability(Capability.USES_CHANNEL_LINEUP, true)
                // Tuner devices usually do channel scans to discern the list
                // of channels.  However, they still need a lineup ID set.
                .setCapability(Capability.CAN_SCAN_CHANNELS, true)
                .setCapability(Capability.PROVIDES_CHANNEL_LINEUP, true)
                // User cannot change the channel lineup.
                .setCapability(Capability.LOCK_CHANNEL_LINEUP, true)
                // Tuner devices require specific lineup types.
                .setCapability(Capability.FILTERS_LINEUP_TYPES,
                        new String[] { LineupType.BROADCAST_ANALOG.toString(),
                                       LineupType.BROADCAST_DIGITAL.toString() })
                // Request a lineup update at 1-day intervals.
                .setCapability(Capability.REQUIRES_LINEUP_UPDATES, 1)
                .build();
!!!13043724.java!!!	buildIrBlasterPairingDevice() : Device
        // The device ID here is not a real device ID. It's only used for pairing.
        // During pairing, we will assign a real device ID and send it back.
        // This is so that there is only one entry in the add device list.
        return new Device.Builder(getPackageName(),
                OneWayConstants.IR_BLASTER_DEVICE_ID_PAIRING)
                .setType(DeviceType.IR_BLASTER)
                .setLabel(getString(R.string.ir_device_pairing_label))
                // Setting this to true affects setup.
                .setCapability(Capability.IS_INTERNAL, true)
                // Note that the IR blaster is not bound to a specific port.
                // IR blaster devices do not provide their own channel lineup
                // so they require the user to determine what channels they
                // have. This is handled in the MediaDevices setup activity.
                .setCapability(Capability.PROVIDES_CHANNEL_LINEUP, false)
                .build();
!!!13043852.java!!!	resetUpdateInterval(in deviceId : String, inout hasChannels : boolean) : void
        setChannelUpdateInterval(deviceId, hasChannels
                ? CHANNEL_UPDATE_INTERVAL_MS
                : NO_CHANNELS_UPDATE_INTERVAL_MS);
