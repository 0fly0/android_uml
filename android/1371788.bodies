class TwilightService
!!!8276364.java!!!	TwilightService(inout context : Context)
        mContext = context;

        mAlarmManager = (AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
        mLocationManager = (LocationManager)mContext.getSystemService(Context.LOCATION_SERVICE);
        mLocationHandler = new LocationHandler();
!!!8276492.java!!!	systemReady() : void
        synchronized (mLock) {
            mSystemReady = true;

            IntentFilter filter = new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
            filter.addAction(Intent.ACTION_TIME_CHANGED);
            filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
            filter.addAction(ACTION_UPDATE_TWILIGHT_STATE);
            mContext.registerReceiver(mUpdateLocationReceiver, filter);

            if (!mListeners.isEmpty()) {
                mLocationHandler.enableLocationUpdates();
            }
        }
!!!8276620.java!!!	getCurrentState() : TwilightState
        synchronized (mLock) {
            return mTwilightState;
        }
!!!8276748.java!!!	registerListener(inout listener : TwilightListener, inout handler : Handler) : void
        synchronized (mLock) {
            mListeners.add(new TwilightListenerRecord(listener, handler));

            if (mSystemReady && mListeners.size() == 1) {
                mLocationHandler.enableLocationUpdates();
            }
        }
!!!8276876.java!!!	setTwilightState(inout state : TwilightState) : void
        synchronized (mLock) {
            if (!Objects.equal(mTwilightState, state)) {
                if (DEBUG) {
                    Slog.d(TAG, "Twilight state changed: " + state);
                }

                mTwilightState = state;
                int count = mListeners.size();
                for (int i = 0; i < count; i++) {
                    mListeners.get(i).post();
                }
            }
        }
!!!8277004.java!!!	hasMoved(inout from : Location, inout to : Location) : boolean
        if (to == null) {
            return false;
        }

        if (from == null) {
            return true;
        }

        // if new location is older than the current one, the device hasn't moved.
        if (to.getElapsedRealtimeNanos() < from.getElapsedRealtimeNanos()) {
            return false;
        }

        // Get the distance between the two points.
        float distance = from.distanceTo(to);

        // Get the total accuracy radius for both locations.
        float totalAccuracy = from.getAccuracy() + to.getAccuracy();

        // If the distance is greater than the combined accuracy of the two
        // points then they can't overlap and hence the user has moved.
        return distance >= totalAccuracy;
