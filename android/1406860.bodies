class RampAnimator
!!!8683788.java!!!	RampAnimator(inout object : T, inout property : IntProperty)
        mObject = object;
        mProperty = property;
        mChoreographer = Choreographer.getInstance();
!!!8683916.java!!!	animateTo(in target : int, in rate : int) : boolean
        // Immediately jump to the target the first time.
        if (mFirstTime) {
            mFirstTime = false;
            mProperty.setValue(mObject, target);
            mCurrentValue = target;
            return true;
        }

        // Adjust the rate based on the closest target.
        // If a faster rate is specified, then use the new rate so that we converge
        // more rapidly based on the new request.
        // If a slower rate is specified, then use the new rate only if the current
        // value is somewhere in between the new and the old target meaning that
        // we will be ramping in a different direction to get there.
        // Otherwise, continue at the previous rate.
        if (!mAnimating
                || rate > mRate
                || (target <= mCurrentValue && mCurrentValue <= mTargetValue)
                || (mTargetValue <= mCurrentValue && mCurrentValue <= target)) {
            mRate = rate;
        }

        final boolean changed = (mTargetValue != target);
        mTargetValue = target;

        // Start animating.
        if (!mAnimating && target != mCurrentValue) {
            mAnimating = true;
            mAnimatedValue = mCurrentValue;
            mLastFrameTimeNanos = System.nanoTime();
            postCallback();
        }

        return changed;
!!!8684044.java!!!	postCallback() : void
        mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, mCallback, null);
