class OldObjectInputStreamGetFieldTest
!!!2670491.java!!!	test_get() : void
        initOis(FILENAME);
        Support_GetPutFields object = (Support_GetPutFields) ois.readObject();
        Support_GetPutFields newObject = new Support_GetPutFields();
        newObject.initTestValues();

        assertTrue("Test 1: The object read from the reference file does " +
                   "not match a locally created instance of the same class.",
                   object.equals(newObject));

        initOis(DEFAULTED_FILENAME);
        Support_GetPutFieldsDefaulted defaulted =
                (Support_GetPutFieldsDefaulted) ois.readObject();
        Support_GetPutFieldsDefaulted newDefaulted =
                new Support_GetPutFieldsDefaulted();
        newDefaulted.initTestValues();

        assertTrue("Test 2: The object read from the reference file does " +
                   "not match a locally created instance of the same class.",
                   defaulted.equals(newDefaulted));

        // Executing the same procedure against the file created with the
        // deprecated ObjectOutputStream.PutFields.write(ObjectOutput) method
        // is not possible since there is no corresponding read(ObjectInput)
        // method. When trying to do it as in tests 1 and 2, a
        // NullPointerException is thrown.
!!!2670619.java!!!	test_defaultedLjava_lang_String() : void
        initOis(FILENAME);
        Support_GetPutFields object = (Support_GetPutFields) ois.readObject();
        ObjectInputStream.GetField fields = object.getField;

        try {
            fields.defaulted("noField");
            fail("IllegalArgumentException expected.");
        } catch (IllegalArgumentException e) {}

        assertFalse("The field longValue should not be defaulted.",
                   fields.defaulted("longValue"));

        // Now the same with defaulted fields.
        initOis(DEFAULTED_FILENAME);
        Support_GetPutFieldsDefaulted defaultedObject =
            (Support_GetPutFieldsDefaulted) ois.readObject();
        fields = defaultedObject.getField;

        assertTrue("The field longValue should be defaulted.",
                   fields.defaulted("longValue"));

!!!2670747.java!!!	test_getException() : void
        initOis(FILENAME);
        Support_GetPutFields object = (Support_GetPutFields) ois.readObject();
        ObjectInputStream.GetField fields = object.getField;

        // Methods called with invalid field name.
        try {
            fields.get("noValue", false);
            fail("IllegalArgumentException expected for not existing name " +
                 "argument in get(String, boolean).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("noValue", (byte) 0);
            fail("IllegalArgumentException expected for not existing name " +
                 "argument in get(String, byte).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("noValue", (char) 0);
            fail("IllegalArgumentException expected for not existing name " +
                 "argument in get(String, char).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("noValue", 0.0);
            fail("IllegalArgumentException expected for not existing name " +
                 "argument in get(String, double).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("noValue", 0.0f);
            fail("IllegalArgumentException expected for not existing name " +
                 "argument in get(String, float).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("noValue", (long) 0);
            fail("IllegalArgumentException expected for not existing name " +
                 "argument in get(String, long).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("noValue", 0);
            fail("IllegalArgumentException expected for not existing name " +
                 "argument in get(String, int).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("noValue", new Object());
            fail("IllegalArgumentException expected for not existing name " +
                 "argument in get(String, Object).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("noValue", (short) 0);
            fail("IllegalArgumentException expected for not existing name " +
                 "argument in get(String, short).");
        } catch (IllegalArgumentException e) {}

        // Methods called with correct field name but non-matching type.
        try {
            fields.get("byteValue", false);
            fail("IllegalArgumentException expected for non-matching name " +
                 "and type arguments in get(String, boolean).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("booleanValue", (byte) 0);
            fail("IllegalArgumentException expected for non-matching name " +
                 "and type arguments in get(String, byte).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("intValue", (char) 0);
            fail("IllegalArgumentException expected for non-matching name " +
                 "and type arguments in get(String, char).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("floatValue", 0.0);
            fail("IllegalArgumentException expected for non-matching name " +
                 "and type arguments in get(String, double).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("doubleValue", 0.0f);
            fail("IllegalArgumentException expected for non-matching name " +
                 "and type arguments in get(String, float).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("intValue", (long) 0);
            fail("IllegalArgumentException expected for non-matching name " +
                 "and type arguments in get(String, long).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("shortValue", 0);
            fail("IllegalArgumentException expected for non-matching name " +
                 "and type arguments in get(String, int).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("booleanValue", new Object());
            fail("IllegalArgumentException expected for non-matching name " +
                 "and type arguments in get(String, Object).");
        } catch (IllegalArgumentException e) {}

        try {
            fields.get("longValue", (short) 0);
            fail("IllegalArgumentException expected for non-matching name " +
                 "and type arguments in get(String, short).");
        } catch (IllegalArgumentException e) {}
!!!2670875.java!!!	test_getObjectStreamClass() : void
        initOis(FILENAME);
        Support_GetPutFields object = (Support_GetPutFields) ois.readObject();
        assertNotNull("Return value of getObjectStreamClass() should not be null.",
                      object.getField.getObjectStreamClass());
!!!2671003.java!!!	initOis(inout fileName : String) : void
        if (ois != null) {
            ois.close();
        }
        ois = new ObjectInputStream(
                    getClass().getResourceAsStream(fileName));
!!!2671131.java!!!	tearDown() : void
        if (ois != null) {
            ois.close();
        }
        super.tearDown();
