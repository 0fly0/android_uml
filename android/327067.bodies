class ImplForType
!!!2139291.java!!!	ImplForType(inout ownerType : ImplForType, inout rawTypeName : String, inout args : ListOfTypes, inout loader : ClassLoader)
        this.ownerType0 = ownerType;
        this.rawTypeName = rawTypeName;
        this.args = args;
        this.loader = loader;
!!!2139419.java!!!	getActualTypeArguments() : Type
        // ASSUMPTION: args is never null!!!
        return args.getResolvedTypes().clone();
!!!2139547.java!!!	getOwnerType() : Type
        if (ownerTypeRes == null) {
            if (ownerType0 != null) {
                ownerTypeRes = ownerType0.getResolvedType();
            } else {
                ownerTypeRes = getRawType().getDeclaringClass();
            }
        }
        return ownerTypeRes;
!!!2139675.java!!!	getRawType() : Class
        if (rawType == null) {
            // Here the actual loading of the class has to be performed and the
            // Exceptions have to be re-thrown TypeNotPresent...
            // How to deal with member (nested) classes?
            try {
                rawType = Class.forName(rawTypeName, false, loader);
            } catch (ClassNotFoundException e) {
                throw new TypeNotPresentException(rawTypeName, e);
            }
        }
        return rawType;
!!!2139803.java!!!	getResolvedType() : Type
        if (args.getResolvedTypes().length == 0) {
            return getRawType();
        } else {
            return this;
        }
!!!2139931.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        sb.append(rawTypeName);
        if (args.length() > 0) {
            sb.append("<").append(args).append(">");
        }
        return sb.toString();
