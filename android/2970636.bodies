class DefaultCecSrvImplDetermine
!!!12054540.java!!!	getInstance() : CecSrvImplDetermine
        if (null == sDetermine) {
            sDetermine = new DefaultCecSrvImplDetermine();
        }
        return sDetermine;
!!!12054668.java!!!	DefaultCecSrvImplDetermine()
        String cecRole = SystemProperties.get(
            HdmiCecUtils.SYSTEM_PROPERTY_HDMI_CEC_ROLE_KEY, "INVALID_CEC_ROLE");
        if (DEBUG) {
            Log.d(TAG, "The CecRole is " + cecRole);
        }
        if (null != cecRole) {
            if (cecRole.equals("tv")) {
                mCecDeviceType = HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV;
            } else if (cecRole.equals("dmp")) {
                mCecDeviceType = HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_DMP;
            }
        }
!!!12054796.java!!!	determineCecSrvImpl() : CecSrvImpl
        CecSrvImpl finalCecSrvImpl = null;
        switch (mCecDeviceType) {
            case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV:
                finalCecSrvImpl = new DefaultCecSrvImpl(
                    "com.marvell.hdmicec.TvCecService",
                    true, CecSrvImpl.MAX_PRIORITY);
                break;
            case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_DMP:
                finalCecSrvImpl = new DefaultCecSrvImpl(
                    "com.marvell.hdmicec.DmpCecService",
                    true, CecSrvImpl.MAX_PRIORITY);
                break;
             default:
                Log.e(TAG, "The cec device type(" + mCecDeviceType + ") is invalid!");
                break;
        }
        if (DEBUG) {
            Log.d(TAG, "In determineCecSrvImpl() Finally finalCecSrvImpl:"
                + finalCecSrvImpl);
        }
        return finalCecSrvImpl;
!!!12054924.java!!!	currentCecRoleType() : int
        return mCecDeviceType;
