class StorageVolume
!!!3976460.java!!!	StorageVolume(inout path : File, in descriptionId : int, inout primary : boolean, inout removable : boolean, inout emulated : boolean, in mtpReserveSpace : int, inout allowMassStorage : boolean, in maxFileSize : long, inout owner : UserHandle)
        mPath = path;
        mDescriptionId = descriptionId;
        mPrimary = primary;
        mRemovable = removable;
        mEmulated = emulated;
        mMtpReserveSpace = mtpReserveSpace;
        mAllowMassStorage = allowMassStorage;
        mMaxFileSize = maxFileSize;
        mOwner = owner;
!!!3976588.java!!!	StorageVolume(inout in : Parcel)
        mStorageId = in.readInt();
        mPath = new File(in.readString());
        mDescriptionId = in.readInt();
        mPrimary = in.readInt() != 0;
        mRemovable = in.readInt() != 0;
        mEmulated = in.readInt() != 0;
        mMtpReserveSpace = in.readInt();
        mAllowMassStorage = in.readInt() != 0;
        mMaxFileSize = in.readLong();
        mOwner = in.readParcelable(null);
!!!3976716.java!!!	fromTemplate(inout template : StorageVolume, inout path : File, inout owner : UserHandle) : StorageVolume
        return new StorageVolume(path, template.mDescriptionId, template.mPrimary,
                template.mRemovable, template.mEmulated, template.mMtpReserveSpace,
                template.mAllowMassStorage, template.mMaxFileSize, owner);
!!!3976844.java!!!	getPath() : String
        return mPath.toString();
!!!3976972.java!!!	getPathFile() : File
        return mPath;
!!!3977100.java!!!	getDescription(inout context : Context) : String
        return context.getResources().getString(mDescriptionId);
!!!3977228.java!!!	getDescriptionId() : int
        return mDescriptionId;
!!!3977356.java!!!	isPrimary() : boolean
        return mPrimary;
!!!3977484.java!!!	isRemovable() : boolean
        return mRemovable;
!!!3977612.java!!!	isEmulated() : boolean
        return mEmulated;
!!!3977740.java!!!	getStorageId() : int
        return mStorageId;
!!!3977868.java!!!	setStorageId(in index : int) : void
        // storage ID is 0x00010001 for primary storage,
        // then 0x00020001, 0x00030001, etc. for secondary storages
        mStorageId = ((index + 1) << 16) + 1;
!!!3977996.java!!!	getMtpReserveSpace() : int
        return mMtpReserveSpace;
!!!3978124.java!!!	allowMassStorage() : boolean
        return mAllowMassStorage;
!!!3978252.java!!!	getMaxFileSize() : long
        return mMaxFileSize;
!!!3978380.java!!!	getOwner() : UserHandle
        return mOwner;
!!!3978508.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof StorageVolume && mPath != null) {
            StorageVolume volume = (StorageVolume)obj;
            return (mPath.equals(volume.mPath));
        }
        return false;
!!!3978636.java!!!	hashCode() : int
        return mPath.hashCode();
!!!3978764.java!!!	toString() : String
        final StringBuilder builder = new StringBuilder("StorageVolume [");
        builder.append("mStorageId=").append(mStorageId);
        builder.append(" mPath=").append(mPath);
        builder.append(" mDescriptionId=").append(mDescriptionId);
        builder.append(" mPrimary=").append(mPrimary);
        builder.append(" mRemovable=").append(mRemovable);
        builder.append(" mEmulated=").append(mEmulated);
        builder.append(" mMtpReserveSpace=").append(mMtpReserveSpace);
        builder.append(" mAllowMassStorage=").append(mAllowMassStorage);
        builder.append(" mMaxFileSize=").append(mMaxFileSize);
        builder.append(" mOwner=").append(mOwner);
        builder.append("]");
        return builder.toString();
!!!3978892.java!!!	describeContents() : int
        return 0;
!!!3979020.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        parcel.writeInt(mStorageId);
        parcel.writeString(mPath.toString());
        parcel.writeInt(mDescriptionId);
        parcel.writeInt(mPrimary ? 1 : 0);
        parcel.writeInt(mRemovable ? 1 : 0);
        parcel.writeInt(mEmulated ? 1 : 0);
        parcel.writeInt(mMtpReserveSpace);
        parcel.writeInt(mAllowMassStorage ? 1 : 0);
        parcel.writeLong(mMaxFileSize);
        parcel.writeParcelable(mOwner, flags);
