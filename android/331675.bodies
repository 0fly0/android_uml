class DerInputStream
!!!2172699.java!!!	DerInputStream(inout encoded : byte)
        super(encoded, 0, encoded.length);
!!!2172827.java!!!	DerInputStream(inout encoded : byte, in offset : int, in encodingLen : int)
        super(encoded, offset, encodingLen);
!!!2172955.java!!!	DerInputStream(inout in : InputStream)
        super(in);
!!!2173083.java!!!	next() : int
        int tag = super.next();

        if (length == INDEFINIT_LENGTH) {
            throw new ASN1Exception("DER: only definite length encoding MUST be used");
        }

        // FIXME add check: length encoding uses minimum number of octets

        return tag;
!!!2173211.java!!!	readBitString() : void
        if (tag == ASN1Constants.TAG_C_BITSTRING) {
            throw new ASN1Exception("ASN.1 bitstring: constructed identifier at [" + tagOffset
                    + "]. Not valid for DER.");
        }

        super.readBitString();

        //check: unused bits values - MUST be 0
        if (length > 1
                && buffer[contentOffset] != 0
                && (buffer[offset - 1] & UNUSED_BITS_MASK[buffer[contentOffset] - 1]) != 0) {
            throw new ASN1Exception("ASN.1 bitstring: wrong content at [" + contentOffset
                    + "]. DER requires zero unused bits in final octet.");
        }
!!!2173339.java!!!	readBoolean() : void
        super.readBoolean();

        // check encoded content
        if (buffer[contentOffset] != 0 && buffer[contentOffset] != (byte) 0xFF) {
            throw new ASN1Exception("ASN.1 boolean: wrong content at [" + contentOffset
                    + "]. DER allows only 0x00 or 0xFF values");
        }
!!!2173467.java!!!	readOctetString() : void
        if (tag == ASN1Constants.TAG_C_OCTETSTRING) {
            throw new ASN1Exception("ASN.1 octetstring: constructed identifier at [" + tagOffset
                    + "]. Not valid for DER.");
        }
        super.readOctetString();
!!!2173595.java!!!	readSequence(inout sequence : ASN1Sequence) : void
        //
        // According to ASN.1 DER spec. sequence MUST not include
        // any encoding which value is equal to its default value
        //
        // Verification of this assertion is not implemented
        //
        super.readSequence(sequence);
!!!2173723.java!!!	readSetOf(inout setOf : ASN1SetOf) : void
        //
        // According to ASN.1 DER spec. set of MUST appear in
        // ascending order (short component are padded for comparison)
        //
        // Verification of this assertion is not implemented
        //
        super.readSetOf(setOf);
!!!2173851.java!!!	readString(inout type : ASN1StringType) : void
        if (tag == type.constrId) {
            throw new ASN1Exception("ASN.1 string: constructed identifier at [" + tagOffset
                    + "]. Not valid for DER.");
        }
        super.readString(type);
!!!2173979.java!!!	readUTCTime() : void
        if (tag == ASN1Constants.TAG_C_UTCTIME) {
            // It is a string type and it can be encoded as primitive or constructed.
            throw new ASN1Exception("ASN.1 UTCTime: constructed identifier at [" + tagOffset
                    + "]. Not valid for DER.");
        }

        // check format: DER uses YYMMDDHHMMSS'Z' only
        if (length != ASN1UTCTime.UTC_HMS) {
            throw new ASN1Exception("ASN.1 UTCTime: wrong format for DER, identifier at ["
                    + tagOffset + "]");
        }

        super.readUTCTime();
!!!2174107.java!!!	readGeneralizedTime() : void
        if (tag == ASN1Constants.TAG_C_GENERALIZEDTIME) {
            // It is a string type and it can be encoded as primitive or constructed.
            throw new ASN1Exception("ASN.1 GeneralizedTime: constructed identifier at ["
                    + tagOffset + "]. Not valid for DER.");
        }

        super.readGeneralizedTime();
