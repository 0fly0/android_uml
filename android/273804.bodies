class NuPlayerDriver
!!!550284.cpp!!!	NuPlayerDriver()
    mLooper->setName("NuPlayerDriver Looper");

    mLooper->start(
            false, /* runOnCallingThread */
            true,  /* canCallJava */
            PRIORITY_AUDIO);

    mPlayer = new NuPlayer;
    mLooper->registerHandler(mPlayer);

    mPlayer->setDriver(this);
!!!550412.cpp!!!	initCheck() : status_t
    return OK;
!!!550540.cpp!!!	setUID(in uid : uid_t) : status_t
    mPlayer->setUID(uid);

    return OK;
!!!550668.cpp!!!	setDataSource(in url : char, in headers : KeyedVector<String8, String8>) : status_t
    CHECK_EQ((int)mState, (int)UNINITIALIZED);

    mPlayer->setDataSource(url, headers);

    mState = STOPPED;

    return OK;
!!!550796.cpp!!!	setDataSource(in fd : int, in offset : int64_t, in length : int64_t) : status_t
    CHECK_EQ((int)mState, (int)UNINITIALIZED);

    mPlayer->setDataSource(fd, offset, length);

    mState = STOPPED;

    return OK;
!!!550924.cpp!!!	setDataSource(in source : sp<IStreamSource>) : status_t
    CHECK_EQ((int)mState, (int)UNINITIALIZED);

    mPlayer->setDataSource(source);

    mState = STOPPED;

    return OK;
!!!551052.cpp!!!	setVideoSurfaceTexture(in surfaceTexture : sp<ISurfaceTexture>) : status_t
    mPlayer->setVideoSurfaceTexture(surfaceTexture);

    return OK;
!!!551180.cpp!!!	prepare() : status_t
    sendEvent(MEDIA_SET_VIDEO_SIZE, 0, 0);
    return OK;
!!!551308.cpp!!!	prepareAsync() : status_t
    status_t err = prepare();

    notifyListener(MEDIA_PREPARED);

    return err;
!!!551436.cpp!!!	start() : status_t
    switch (mState) {
        case UNINITIALIZED:
            return INVALID_OPERATION;
        case STOPPED:
        {
            mAtEOS = false;
            mPlayer->start();

            if (mStartupSeekTimeUs >= 0) {
                if (mStartupSeekTimeUs == 0) {
                    notifySeekComplete();
                } else {
                    mPlayer->seekToAsync(mStartupSeekTimeUs);
                }

                mStartupSeekTimeUs = -1;
            }

            break;
        }
        case PLAYING:
            return OK;
        default:
        {
            CHECK_EQ((int)mState, (int)PAUSED);

            mPlayer->resume();
            break;
        }
    }

    mState = PLAYING;

    return OK;
!!!551564.cpp!!!	stop() : status_t
    return pause();
!!!551692.cpp!!!	pause() : status_t
    switch (mState) {
        case UNINITIALIZED:
            return INVALID_OPERATION;
        case STOPPED:
            return OK;
        case PLAYING:
            mPlayer->pause();
            break;
        default:
        {
            CHECK_EQ((int)mState, (int)PAUSED);
            return OK;
        }
    }

    mState = PAUSED;

    return OK;
!!!551820.cpp!!!	isPlaying() : bool
    return mState == PLAYING && !mAtEOS;
!!!551948.cpp!!!	seekTo(in msec : int) : status_t
    int64_t seekTimeUs = msec * 1000ll;

    switch (mState) {
        case UNINITIALIZED:
            return INVALID_OPERATION;
        case STOPPED:
        {
            mStartupSeekTimeUs = seekTimeUs;
            break;
        }
        case PLAYING:
        case PAUSED:
        {
            mAtEOS = false;
            mPlayer->seekToAsync(seekTimeUs);
            break;
        }

        default:
            TRESPASS();
            break;
    }

    return OK;
!!!552076.cpp!!!	getCurrentPosition(inout msec : int) : status_t
    Mutex::Autolock autoLock(mLock);

    if (mPositionUs < 0) {
        *msec = 0;
    } else {
        *msec = (mPositionUs + 500ll) / 1000;
    }

    return OK;
!!!552204.cpp!!!	getDuration(inout msec : int) : status_t
    Mutex::Autolock autoLock(mLock);

    if (mDurationUs < 0) {
        *msec = 0;
    } else {
        *msec = (mDurationUs + 500ll) / 1000;
    }

    return OK;
!!!552332.cpp!!!	reset() : status_t
    Mutex::Autolock autoLock(mLock);
    mResetInProgress = true;

    mPlayer->resetAsync();

    while (mResetInProgress) {
        mCondition.wait(mLock);
    }

    mDurationUs = -1;
    mPositionUs = -1;
    mState = UNINITIALIZED;
    mStartupSeekTimeUs = -1;

    return OK;
!!!552460.cpp!!!	setLooping(in loop : int) : status_t
    return INVALID_OPERATION;
!!!552588.cpp!!!	playerType() : player_type
    return NU_PLAYER;
!!!552716.cpp!!!	invoke(in request : Parcel, inout reply : Parcel) : status_t
    if (reply == NULL) {
        ALOGE("reply is a NULL pointer");
        return BAD_VALUE;
    }

    int32_t methodId;
    status_t ret = request.readInt32(&methodId);
    if (ret != OK) {
        ALOGE("Failed to retrieve the requested method to invoke");
        return ret;
    }

    switch (methodId) {
        case INVOKE_ID_SET_VIDEO_SCALING_MODE:
        {
            int mode = request.readInt32();
            return mPlayer->setVideoScalingMode(mode);
        }
        default:
        {
            return INVALID_OPERATION;
        }
    }
!!!552844.cpp!!!	setAudioSink(in audioSink : sp<AudioSink>) : void
    mPlayer->setAudioSink(audioSink);
!!!552972.cpp!!!	setParameter(in key : int, in request : Parcel) : status_t
    return INVALID_OPERATION;
!!!553100.cpp!!!	getParameter(in key : int, inout reply : Parcel) : status_t
    return INVALID_OPERATION;
!!!553228.cpp!!!	getMetadata(in ids : Filter, inout records : Parcel) : status_t
    return INVALID_OPERATION;
!!!553356.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    Mutex::Autolock autoLock(mLock);

    FILE *out = fdopen(dup(fd), "w");

    fprintf(out, " NuPlayer\n");
    fprintf(out, "  numFramesTotal(%lld), numFramesDropped(%lld), "
                 "percentageDropped(%.2f)\n",
                 mNumFramesTotal,
                 mNumFramesDropped,
                 mNumFramesTotal == 0
                    ? 0.0 : (double)mNumFramesDropped / mNumFramesTotal);

    fclose(out);
    out = NULL;

    return OK;
!!!553484.cpp!!!	notifyResetComplete() : void
    Mutex::Autolock autoLock(mLock);
    CHECK(mResetInProgress);
    mResetInProgress = false;
    mCondition.broadcast();
!!!553612.cpp!!!	notifyDuration(in durationUs : int64_t) : void
    Mutex::Autolock autoLock(mLock);
    mDurationUs = durationUs;
!!!553740.cpp!!!	notifyPosition(in positionUs : int64_t) : void
    Mutex::Autolock autoLock(mLock);
    mPositionUs = positionUs;
!!!553868.cpp!!!	notifySeekComplete() : void
    notifyListener(MEDIA_SEEK_COMPLETE);
!!!553996.cpp!!!	notifyFrameStats(in numFramesTotal : int64_t, in numFramesDropped : int64_t) : void
    Mutex::Autolock autoLock(mLock);
    mNumFramesTotal = numFramesTotal;
    mNumFramesDropped = numFramesDropped;
!!!554124.cpp!!!	notifyListener(in msg : int, in ext1 : int = 0, in ext2 : int = 0) : void
    if (msg == MEDIA_PLAYBACK_COMPLETE || msg == MEDIA_ERROR) {
        mAtEOS = true;
    }

    sendEvent(msg, ext1, ext2);
!!!554252.cpp!!!	~NuPlayerDriver()
    mLooper->stop();
