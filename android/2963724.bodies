class SettingValue
!!!12025612.java!!!	SettingValue()
            type = TYPE_UNKNOWN;
!!!12025740.java!!!	SettingValue(in valueType : int, in strValue : String)
            type = valueType;
            value = strValue;
!!!12025868.java!!!	getType() : int
            return type;
!!!12025996.java!!!	setNoValue() : void
            type = TYPE_NO_VALUE;
!!!12026124.java!!!	setInt(in val : int) : void
            value = String.valueOf(val);
            type = TYPE_INT;
!!!12026252.java!!!	setBoolean(inout val : boolean) : void
            value = String.valueOf(val);
            type = TYPE_BOOL;
!!!12026380.java!!!	setString(in val : String) : void
            value = val;
            type = TYPE_STRING;
!!!12026508.java!!!	setFloat(in val : float) : void
            value = String.valueOf(val);
            type = TYPE_FLOAT;
!!!12026636.java!!!	setRect(inout val : Rect) : void
            // Returns a new String of the form "left top right bottom"
            value = val.flattenToString();
            type = TYPE_RECT;
!!!12026764.java!!!	setIntArray(inout vals : int) : void
            StringBuffer sb = new StringBuffer();
            for (int val : vals) {
                sb.append(val);
                sb.append(ARRAY_DELIM);
            }
            value = sb.toString();
            type = TYPE_ARRAY_INT;
!!!12026892.java!!!	setBooleanArray(inout vals : boolean) : void
            StringBuffer sb = new StringBuffer();
            for (boolean val : vals) {
                sb.append(val);
                sb.append(ARRAY_DELIM);
            }
            value = sb.toString();
            type = TYPE_ARRAY_BOOL;
!!!12027020.java!!!	setStringArray(inout vals : String) : void
            StringBuffer sb = new StringBuffer();
            for (String val : vals) {
                sb.append(val);
                sb.append(ARRAY_DELIM);
            }
            value = sb.toString();
            type = TYPE_ARRAY_STRING;
!!!12027148.java!!!	setFloatArray(inout vals : float) : void
            StringBuffer sb = new StringBuffer();
            for (float val : vals) {
                sb.append(val);
                sb.append(ARRAY_DELIM);
            }
            value = sb.toString();
            type = TYPE_ARRAY_FLOAT;
!!!12027276.java!!!	setRectArray(inout vals : Rect) : void
            StringBuffer sb = new StringBuffer();
            for (Rect val : vals) {
                sb.append(val.flattenToString());
                sb.append(ARRAY_DELIM);
            }
            value = sb.toString();
            type = TYPE_ARRAY_RECT;
!!!12027404.java!!!	getInt() : int
            checkNoValue();
            if (type == TYPE_INT) {
                return Integer.parseInt(value);
            }
            throw new Exception("getInt, type invalid: " + type);
!!!12027532.java!!!	getBoolean() : boolean
            checkNoValue();
            if (type == TYPE_BOOL) {
                return Boolean.parseBoolean(value);
            }
            throw new Exception("getBoolean, type invalid: " + type);
!!!12027660.java!!!	getString() : String
            checkNoValue();
            if (type == TYPE_STRING) {
                return value;
            }
            throw new Exception("getString, type invalid: " + type);
!!!12027788.java!!!	getFloat() : float
            checkNoValue();
            if (type == TYPE_FLOAT) {
                return Float.parseFloat(value);
            }
            throw new Exception("getFloat, type invalid: " + type);
!!!12027916.java!!!	getRect() : Rect
            checkNoValue();
            if (type == TYPE_RECT) {
                return Rect.unflattenFromString(value);
            }
            throw new Exception("getRect, type invalid: " + type);
!!!12028044.java!!!	getIntArray() : int
            checkNoValue();
            if (type == TYPE_ARRAY_INT) {
                String[] vals = value.split(ARRAY_DELIM);
                int[] results = new int[vals.length];
                for (int i = 0; i < vals.length; i++) {
                    results[i] = Integer.parseInt(vals[i]);
                }
                return results;
            }
            throw new Exception("getIntArray, type invalid: " + type);
!!!12028172.java!!!	getBooleanArray() : boolean
            checkNoValue();
            if (type == TYPE_ARRAY_BOOL) {
                String[] vals = value.split(ARRAY_DELIM);
                boolean[] results = new boolean[vals.length];
                for (int i = 0; i < vals.length; i++) {
                    results[i] = Boolean.parseBoolean(vals[i]);
                }
                return results;
            }
            throw new Exception("getBooleanArray, type invalid: " + type);
!!!12028300.java!!!	getStringArray() : String
            checkNoValue();
            if (type == TYPE_ARRAY_STRING) {
                String[] vals = value.split(ARRAY_DELIM);
                return vals;
            }
            throw new Exception("getStringArray, type invalid: " + type);
!!!12028428.java!!!	getFloatArray() : float
            checkNoValue();
            if (type == TYPE_ARRAY_FLOAT) {
                String[] vals = value.split(ARRAY_DELIM);
                float[] results = new float[vals.length];
                for (int i = 0; i < vals.length; i++) {
                    results[i] = Float.parseFloat(vals[i]);
                }
                return results;
            }
            throw new Exception("getFloatArray, type invalid: " + type);
!!!12028556.java!!!	getRectArray() : Rect
            checkNoValue();
            if (type == TYPE_ARRAY_RECT) {
                String[] vals = value.split(ARRAY_DELIM);
                Rect[] results = new Rect[vals.length];
                for (int i = 0; i < vals.length; i++) {
                    results[i] = Rect.unflattenFromString(vals[i]);
                }
            }
            throw new Exception("getRectArray, type invalid: " + type);
!!!12028684.java!!!	checkNoValue() : void
            if (type == TYPE_NO_VALUE)
                throw new NoValueException();
!!!12028812.java!!!	toString() : String
            return value;
