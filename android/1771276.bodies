class RilRequestWorkerQueue
!!!10106636.cpp!!!	RilRequestWorkerQueue(in context : v8::Handle<v8::Context>)
    DBG("RilRequestWorkerQueue E:");

    context_ = context;
    pthread_mutex_init(&free_list_mutex_, NULL);

    DBG("RilRequestWorkerQueue X:");
!!!10106764.cpp!!!	~RilRequestWorkerQueue()
    DBG("~RilRequestWorkerQueue E:");
    Request *req;
    pthread_mutex_lock(&free_list_mutex_);
    while(free_list_.size() != 0) {
        req = free_list_.front();
        delete req;
        free_list_.pop();
    }
    pthread_mutex_unlock(&free_list_mutex_);
    pthread_mutex_destroy(&free_list_mutex_);
    DBG("~RilRequestWorkerQueue X:");
!!!10106892.cpp!!!	AddRequest(in request : int, in data : void, in datalen : size_t, in token : RIL_Token) : void
    DBG("RilRequestWorkerQueue:AddRequest: %d E", request);

    v8::Locker locker;
    v8::HandleScope handle_scope;
    v8::Context::Scope context_scope(context_);

    int status;

    // Convert the data to a protobuf before inserting it into the request queue (serialize data)
    Buffer *buffer = NULL;
    ReqConversionMap::iterator itr;
    itr = rilReqConversionMap.find(request);
    if (itr != rilReqConversionMap.end()) {
        status = itr->second(&buffer, data, datalen, token);
    } else {
        ALOGE("RilRequestWorkerQueue:AddRequest: X unknown request %d", request);
        status = STATUS_UNSUPPORTED_REQUEST;
    }

    if (status == STATUS_OK) {
        // Add serialized request to the queue
        Request *req;
        pthread_mutex_lock(&free_list_mutex_);
        DBG("RilRequestWorkerQueue:AddRequest: return ok, buffer = %p, buffer->length()=%d",
            buffer, buffer->length());
        if (free_list_.size() == 0) {
            req = new Request(request, buffer, token);
            pthread_mutex_unlock(&free_list_mutex_);
        } else {
            req = free_list_.front();
            free_list_.pop();
            pthread_mutex_unlock(&free_list_mutex_);
            req->Set(request, buffer, token);
        }
        // add the request
        Add(req);
    } else {
        DBG("RilRequestWorkerQueue:AddRequest: return from the serialization, status is not OK");
        // An error report complete now
        RIL_Errno rilErrCode = (status == STATUS_UNSUPPORTED_REQUEST) ?
                 RIL_E_REQUEST_NOT_SUPPORTED : RIL_E_GENERIC_FAILURE;
        s_rilenv->OnRequestComplete(token, rilErrCode, NULL, 0);
    }

    DBG("RilRequestWorkerQueue::AddRequest: X"
         " request=%d data=%p datalen=%d token=%p",
            request, data, datalen, token);
!!!10107020.cpp!!!	Process(inout p : void) : void

    Request *req = (Request *)p;
    DBG("RilRequestWorkerQueue::Process: E"
         " request=%d buffer=%p, bufferlen=%d t=%p",
            req->request_, req->buffer_, req->buffer_->length(), req->token_);

    v8::Locker locker;
    v8::HandleScope handle_scope;
    v8::Context::Scope context_scope(context_);
    callOnRilRequest(context_, req->request_,
                          req->buffer_, req->token_);

    pthread_mutex_lock(&free_list_mutex_);
    free_list_.push(req);
    pthread_mutex_unlock(&free_list_mutex_);
