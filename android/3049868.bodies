class USATVActivity
!!!12587660.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        // TODO Auto-generated method stub
        super.onCreate(savedInstanceState);
        LayoutInflater inflater = (LayoutInflater)
                getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        linearLayout = (LinearLayout) inflater.inflate(R.layout.tabview,
                null, false);
        tablayout = (TableLayout) linearLayout.findViewById(R.id.tableLayout);
        mParentalControlSettings = TvFramework.getInstance()
                .getParentalControlInstance();
        mRes = this.getResources();
        int ratingGridIndex = 0;

        /*
         * Create TV grid items
         */
        rownames = mRes.getStringArray(R.array.pc_us_rating_grid_rowHeaders);

        tablayout.setBackgroundColor(mRes.getColor(R.color.pc_ustv_rating_tabel_header));
        final int leftMargin = mRes.getInteger(R.integer.Left_Margin);
        final int rightMargin = mRes.getInteger(R.integer.Right_Margin);
        final int topMargin = mRes.getInteger(R.integer.TOP_Margin);
        final int bottomMargin = mRes.getInteger(R.integer.BOTTOM_Margin);
        final int defaultWidth = mRes.getInteger(R.integer.DEFAULT_CELL_WIDTH);
        final int defaultHeight = mRes
                .getInteger(R.integer.DEFAULT_CELL_HEIGHT);

        TableRow.LayoutParams layoutParams = new TableRow.LayoutParams(
                defaultWidth, defaultHeight);
        layoutParams.setMargins(leftMargin, topMargin, rightMargin,
                bottomMargin);

        for (int i = 0; i < 6; i++) {
            TableRow tablerow = new TableRow(this);
            tablerow.setGravity(Gravity.CENTER_VERTICAL);
            for (int j = 0; j < 7; j++) {
                RelativeLayout cell = new RelativeLayout(this);
                RelativeLayout.LayoutParams relLayoutP = new RelativeLayout.LayoutParams(
                        LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
                relLayoutP.addRule(RelativeLayout.CENTER_IN_PARENT);
                cell.setLayoutParams(layoutParams);
                if (j == 0) {
                    TextView testview = new TextView(this);
                    testview.setLayoutParams(relLayoutP);
                    testview.setTextColor(Color.WHITE);
                    testview.setTextSize(12);
                    testview.setText(rownames[i]);
                    cell.setBackgroundColor(mRes.getColor(R.color.blueGround));
                    cell.addView(testview);
                    tablerow.addView(cell);
                } else if ((i == 0 && j == 1)
                        || (i == 1 && j == 1) || (i == 1 && j == 6)
                        || (i == 2 && j == 1)
                        || (i == 3 && j == 1) || (i == 3 && j == 2) || (i == 3 && j == 3)
                        || (i == 3 && j == 4) || (i == 3 && j == 5)
                        || (i == 4 && j == 1) || (i == 4 && j == 2) || (i == 4 && j == 3)
                        || (i == 4 && j == 4) || (i == 4 && j == 5)
                        || (i == 5 && j == 1) || (i == 5 && j == 3) || (i == 5 && j == 4)
                        || (i == 5 && j == 5)) {

                    ImageButton imageButton = new ImageButton(this);
                    imageButton.setId(ratingGridIndex);
                    buttonList.add(imageButton);
                    ratingGridIndex++;

                    imageButton.setOnClickListener(new OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            final ImageButton imageButton = (ImageButton) view;
                            stateChanged(imageButton.getId());
                        }
                    });

                    imageButton.setLayoutParams(new RelativeLayout.LayoutParams(
                            LayoutParams.FILL_PARENT,
                            LayoutParams.FILL_PARENT));

                    cell.addView(imageButton);
                    tablerow.addView(cell);
                } else {
                    cell.setBackgroundColor(mRes.getColor(R.color.black));
                    tablerow.addView(cell);
                }

            }
            tablayout.addView(tablerow, new TableLayout.LayoutParams(
                    LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
        }

        // return linearLayout;
        setContentView(linearLayout);
        setTimeOut(Utils.ONE_MINUTE * 2);

        /*
         * Load TV rating value to grid items
         */
        updateUSTVRating();
        refreshRatingButtons();
!!!12587788.java!!!	refreshRatingButtons() : void
        for (ImageButton button : buttonList) {
            updateImageButton(button,
                    ((PCUSTvConstant.RatingGrid) GridArray.gridStateArray[button.getId()][2])
                            .isLock());
        }
!!!12587916.java!!!	updateImageButton(inout imageButton : ImageButton, inout lock : boolean) : void
        Log.v(TAG, "updateImageButton " + lock);

        if (lock) {
            imageButton.setImageResource(R.drawable.lock_icon);
            imageButton.setBackgroundResource(R.drawable.image_lock_style);
            imageButton.setTag(true);
        } else {
            imageButton.setImageResource(R.drawable.unlock_icon);
            imageButton.setBackgroundResource(R.drawable.image_unlock_style);
            imageButton.setTag(false);
        }
!!!12588044.java!!!	setPCRating(inout pcDimension : PCDimensionRating, in pcRating : int, inout lock : boolean) : void
        Log.d(TAG, "setPCRating dimension=" + pcDimension
                + " rating=" + pcRating + " lock=" + lock);
        mParentalControlSettings.setUSParentalRating(pcDimension, pcRating, lock);

        // Combine Child and Adult TV rating, block adult if block child,
        // unblock child if unblock adult
        if (pcDimension == PCDimensionRating.US_CHILD && lock) {
            mParentalControlSettings.setUSParentalRating(PCDimensionRating.US_TV,
                    PCUSTVRatings.TV_G.ordinal(), true);
        } else if (pcDimension == PCDimensionRating.US_TV && !lock) {
            mParentalControlSettings.setUSParentalRating(PCDimensionRating.US_CHILD,
                    PCUSChildRatings.TV_Y7.ordinal(), false);
        }
!!!12588172.java!!!	stateChanged(in index : int) : void
        setPCRating((PCDimensionRating) GridArray.gridStateArray[index][0],
                (Integer) GridArray.gridStateArray[index][1],
                !((PCUSTvConstant.RatingGrid) GridArray.gridStateArray[index][2]).isLock());

        updateUSTVRating();
        refreshRatingButtons();
!!!12588300.java!!!	updateUSTVRating() : void

        mUSDTVusRating = mParentalControlSettings.getUSParentalRating();
        if (mUSDTVusRating != null) {
            mTvRating = mUSDTVusRating.getTvRating();
            mChildRating = mUSDTVusRating.getChildRating();
            mChildFVRating = mUSDTVusRating.getChildFVRating();
            mViolenceRating = mUSDTVusRating.getDimViolence();
            mSexRating = mUSDTVusRating.getDimSex();
            mLanguageRating = mUSDTVusRating.getDimLang();
            mDialogueRating = mUSDTVusRating.getDimDiag();
        }

        // Update the grid with correct lock settings
        updateChildRatings();
        updateChildFVRatings();
        updateTVRatings();
        updateViolenceRatings();
        updateSexRatings();
        updateLanguageRatings();
        updateDialogueRatings();
!!!12588428.java!!!	updateChildRatings() : void

        int childIndex = 0;
        boolean lock;
        PCUSChildRatings index;
        final PCUSChildRatings[] childRatings = PCUSChildRatings.values();

        // Child ratings
        for (childIndex = PCUSChildRatings.TV_Y.ordinal(); childIndex <= PCUSChildRatings.TV_Y7
                .ordinal(); childIndex++) {
            if (childIndex < mChildRating
                    || mChildRating == PCUSChildRatings.TV_Y_NULL.ordinal()) {
                lock = false;
            } else {
                lock = true;
            }
            index = childRatings[childIndex];
            switch (index) {
                case TV_Y:
                    PCUSTvConstant.RatingGrid.TV_Y_ALL.setLock(lock);
                    break;
                case TV_Y7:
                    PCUSTvConstant.RatingGrid.TV_Y7_ALL.setLock(lock);
                    break;
            }
        }
!!!12588556.java!!!	updateChildFVRatings() : void

        boolean lock;

        /* if (PCUSChildFVRatings.TV_Y7_FV.ordinal() < mChildFVRating
         || mChildFVRating == PCUSChildFVRatings.TV_Y7_NULL.ordinal()) {
            lock = false;
        } else {
            lock = true;
        }*/
        if (mChildFVRating == 0) {
            lock = true;
        } else {
            lock = false;
        }
        PCUSTvConstant.RatingGrid.TV_Y7_FV.setLock(lock);
!!!12588684.java!!!	updateTVRatings() : void

        int tvIndex = 0;
        boolean lock;
        PCUSTVRatings index;
        final PCUSTVRatings[] tvRatings = PCUSTVRatings.values();

        // TV ratings
        for (tvIndex = PCUSTVRatings.TV_NULL.ordinal(); tvIndex <= PCUSTVRatings.TV_MA
                .ordinal(); tvIndex++) {
            if (tvIndex < mTvRating || mTvRating == PCUSTVRatings.TV_NULL.ordinal()) {
                lock = false;
            } else {
                lock = true;
            }
            index = tvRatings[tvIndex];
            switch (index) {
                case TV_G:
                    PCUSTvConstant.RatingGrid.TV_G_ALL.setLock(lock);
                    break;
                case TV_PG:
                    PCUSTvConstant.RatingGrid.TV_PG_ALL.setLock(lock);
                    break;
                case TV_14:
                    PCUSTvConstant.RatingGrid.TV_14_ALL.setLock(lock);
                    break;
                case TV_MA:
                    PCUSTvConstant.RatingGrid.TV_MA_ALL.setLock(lock);
                    break;
            }
        }

!!!12588812.java!!!	updateViolenceRatings() : void

        int violenceIndex = 0;
        boolean lock;
        PCUSViolenceRatings index;
        final PCUSViolenceRatings[] violenceRatings = PCUSViolenceRatings.values();

        for (violenceIndex = PCUSViolenceRatings.VIO_NULL.ordinal(); violenceIndex
        <= PCUSViolenceRatings.VIO_MA.ordinal(); violenceIndex++) {
            if (violenceIndex < mViolenceRating
                    || mViolenceRating == PCUSViolenceRatings.VIO_NULL.ordinal()) {
                lock = false;
            } else {
                lock = true;
            }
            index = violenceRatings[violenceIndex];
            switch (index) {
                case VIO_PG:
                    PCUSTvConstant.RatingGrid.TV_PG_V.setLock(lock);
                    break;
                case VIO_14:
                    PCUSTvConstant.RatingGrid.TV_14_V.setLock(lock);
                    break;
                case VIO_MA:
                    PCUSTvConstant.RatingGrid.TV_MA_V.setLock(lock);
                    break;
            }
        }

!!!12588940.java!!!	updateSexRatings() : void

        int sexIndex = 0;
        boolean lock;
        PCUSSexRatings index;
        final PCUSSexRatings[] sexRatings = PCUSSexRatings.values();

        for (sexIndex = PCUSSexRatings.SEX_PG.ordinal(); sexIndex <= PCUSSexRatings.SEX_MA
                .ordinal(); sexIndex++) {
            if (sexIndex < mSexRating || mSexRating == PCUSSexRatings.SEX_NULL.ordinal()) {
                lock = false;
            } else {
                lock = true;
            }
            index = sexRatings[sexIndex];
            switch (index) {
                case SEX_PG:
                    PCUSTvConstant.RatingGrid.TV_PG_S.setLock(lock);
                    break;
                case SEX_14:
                    PCUSTvConstant.RatingGrid.TV_14_S.setLock(lock);
                    break;
                case SEX_MA:
                    PCUSTvConstant.RatingGrid.TV_MA_S.setLock(lock);
                    break;
            }
        }
!!!12589068.java!!!	updateLanguageRatings() : void

        int langIndex = 0;
        boolean lock;
        PCUSLanguageRatings index;
        final PCUSLanguageRatings[] langRatings = PCUSLanguageRatings.values();

        // Child ratings
        for (langIndex = PCUSLanguageRatings.LAN_NULL.ordinal(); langIndex
        <= PCUSLanguageRatings.LAN_MA.ordinal(); langIndex++) {
            if (langIndex < mLanguageRating
                    || mLanguageRating == PCUSLanguageRatings.LAN_NULL.ordinal()) {
                lock = false;
            } else {
                lock = true;
            }
            index = langRatings[langIndex];
            switch (index) {
                case LAN_PG:
                    PCUSTvConstant.RatingGrid.TV_PG_L.setLock(lock);
                    break;
                case LAN_14:
                    PCUSTvConstant.RatingGrid.TV_14_L.setLock(lock);
                    break;
                case LAN_MA:
                    PCUSTvConstant.RatingGrid.TV_MA_L.setLock(lock);
                    break;
            }
        }
!!!12589196.java!!!	updateDialogueRatings() : void

        int dialogueIndex = 0;
        boolean lock;
        PCUSDialogRatings index;
        final PCUSDialogRatings[] dialougeRatings = PCUSDialogRatings.values();

        // Child ratings
        for (dialogueIndex = PCUSDialogRatings.DIA_NULL.ordinal(); dialogueIndex
        <= PCUSDialogRatings.DIA_14.ordinal(); dialogueIndex++) {
            if (dialogueIndex < mDialogueRating
                    || mDialogueRating == PCUSDialogRatings.DIA_NULL.ordinal()) {
                lock = false;
            } else {
                lock = true;
            }
            index = dialougeRatings[dialogueIndex];
            switch (index) {
                case DIA_PG:
                    PCUSTvConstant.RatingGrid.TV_PG_D.setLock(lock);
                    break;
                case DIA_14:
                    PCUSTvConstant.RatingGrid.TV_14_D.setLock(lock);
                    break;
            }
        }
!!!12589324.java!!!	onKey(inout v : View, in keyCode : int, inout event : KeyEvent) : boolean
        // TODO Auto-generated method stub
        return false;
