class IInputMethodSessionWrapper
!!!3531660.java!!!	IInputMethodSessionWrapper(inout context : Context, inout inputMethodSession : InputMethodSession)
        mCaller = new HandlerCaller(context, this);
        mInputMethodSession = inputMethodSession;
!!!3531788.java!!!	getInternalInputMethodSession() : InputMethodSession
        return mInputMethodSession;
!!!3531916.java!!!	executeMessage(inout msg : Message) : void
        if (mInputMethodSession == null) return;

        switch (msg.what) {
            case DO_FINISH_INPUT:
                mInputMethodSession.finishInput();
                return;
            case DO_DISPLAY_COMPLETIONS:
                mInputMethodSession.displayCompletions((CompletionInfo[])msg.obj);
                return;
            case DO_UPDATE_EXTRACTED_TEXT:
                mInputMethodSession.updateExtractedText(msg.arg1,
                        (ExtractedText)msg.obj);
                return;
            case DO_DISPATCH_KEY_EVENT: {
                SomeArgs args = (SomeArgs)msg.obj;
                mInputMethodSession.dispatchKeyEvent(msg.arg1,
                        (KeyEvent)args.arg1,
                        new InputMethodEventCallbackWrapper(
                                (IInputMethodCallback)args.arg2));
                args.recycle();
                return;
            }
            case DO_DISPATCH_TRACKBALL_EVENT: {
                SomeArgs args = (SomeArgs)msg.obj;
                mInputMethodSession.dispatchTrackballEvent(msg.arg1,
                        (MotionEvent)args.arg1,
                        new InputMethodEventCallbackWrapper(
                                (IInputMethodCallback)args.arg2));
                args.recycle();
                return;
            }
            case DO_DISPATCH_GENERIC_MOTION_EVENT: {
                SomeArgs args = (SomeArgs)msg.obj;
                mInputMethodSession.dispatchGenericMotionEvent(msg.arg1,
                        (MotionEvent)args.arg1,
                        new InputMethodEventCallbackWrapper(
                                (IInputMethodCallback)args.arg2));
                args.recycle();
                return;
            }
            case DO_UPDATE_SELECTION: {
                SomeArgs args = (SomeArgs)msg.obj;
                mInputMethodSession.updateSelection(args.argi1, args.argi2,
                        args.argi3, args.argi4, args.argi5, args.argi6);
                args.recycle();
                return;
            }
            case DO_UPDATE_CURSOR: {
                mInputMethodSession.updateCursor((Rect)msg.obj);
                return;
            }
            case DO_APP_PRIVATE_COMMAND: {
                SomeArgs args = (SomeArgs)msg.obj;
                mInputMethodSession.appPrivateCommand((String)args.arg1,
                        (Bundle)args.arg2);
                args.recycle();
                return;
            }
            case DO_TOGGLE_SOFT_INPUT: {
                mInputMethodSession.toggleSoftInput(msg.arg1, msg.arg2);
                return;
            }
            case DO_FINISH_SESSION: {
                mInputMethodSession = null;
                return;
            }
            case DO_VIEW_CLICKED: {
                mInputMethodSession.viewClicked(msg.arg1 == 1);
                return;
            }
        }
        Log.w(TAG, "Unhandled message code: " + msg.what);
!!!3532044.java!!!	finishInput() : void
        mCaller.executeOrSendMessage(mCaller.obtainMessage(DO_FINISH_INPUT));
!!!3532172.java!!!	displayCompletions(inout completions : CompletionInfo) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageO(
                DO_DISPLAY_COMPLETIONS, completions));
!!!3532300.java!!!	updateExtractedText(in token : int, inout text : ExtractedText) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageIO(
                DO_UPDATE_EXTRACTED_TEXT, token, text));
!!!3532428.java!!!	dispatchKeyEvent(in seq : int, inout event : KeyEvent, inout callback : IInputMethodCallback) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageIOO(DO_DISPATCH_KEY_EVENT, seq,
                event, callback));
!!!3532556.java!!!	dispatchTrackballEvent(in seq : int, inout event : MotionEvent, inout callback : IInputMethodCallback) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageIOO(DO_DISPATCH_TRACKBALL_EVENT, seq,
                event, callback));
!!!3532684.java!!!	dispatchGenericMotionEvent(in seq : int, inout event : MotionEvent, inout callback : IInputMethodCallback) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageIOO(DO_DISPATCH_GENERIC_MOTION_EVENT, seq,
                event, callback));
!!!3532812.java!!!	updateSelection(in oldSelStart : int, in oldSelEnd : int, in newSelStart : int, in newSelEnd : int, in candidatesStart : int, in candidatesEnd : int) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageIIIIII(DO_UPDATE_SELECTION,
                oldSelStart, oldSelEnd, newSelStart, newSelEnd,
                candidatesStart, candidatesEnd));
!!!3532940.java!!!	viewClicked(inout focusChanged : boolean) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageI(DO_VIEW_CLICKED, focusChanged ? 1 : 0));
!!!3533068.java!!!	updateCursor(inout newCursor : Rect) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageO(DO_UPDATE_CURSOR,
                newCursor));
!!!3533196.java!!!	appPrivateCommand(in action : String, inout data : Bundle) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageOO(DO_APP_PRIVATE_COMMAND, action, data));
!!!3533324.java!!!	toggleSoftInput(in showFlags : int, in hideFlags : int) : void
        mCaller.executeOrSendMessage(mCaller.obtainMessageII(DO_TOGGLE_SOFT_INPUT, showFlags, hideFlags));
!!!3533452.java!!!	finishSession() : void
        mCaller.executeOrSendMessage(mCaller.obtainMessage(DO_FINISH_SESSION));
