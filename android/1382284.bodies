class ReceivedPointerTracker
!!!8363404.java!!!	ReceivedPointerTracker(inout context : Context)
            mThresholdActivePointer =
                ViewConfiguration.get(context).getScaledTouchSlop() * COEFFICIENT_ACTIVE_POINTER;
!!!8363532.java!!!	clear() : void
            Arrays.fill(mReceivedPointerDownX, 0);
            Arrays.fill(mReceivedPointerDownY, 0);
            Arrays.fill(mReceivedPointerDownTime, 0);
            mReceivedPointersDown = 0;
            mActivePointers = 0;
            mPrimaryActivePointerId = 0;
            mHasMovingActivePointer = false;
            mLastReceivedUpPointerDownTime = 0;
            mLastReceivedUpPointerId = 0;
            mLastReceivedUpPointerActive = false;
            mLastReceivedUpPointerDownX = 0;
            mLastReceivedUpPointerDownY = 0;
!!!8363660.java!!!	onMotionEvent(inout event : MotionEvent) : void
            if (mLastReceivedEvent != null) {
                mLastReceivedEvent.recycle();
            }
            mLastReceivedEvent = MotionEvent.obtain(event);

            final int action = event.getActionMasked();
            switch (action) {
                case MotionEvent.ACTION_DOWN: {
                    handleReceivedPointerDown(event.getActionIndex(), event);
                } break;
                case MotionEvent.ACTION_POINTER_DOWN: {
                    handleReceivedPointerDown(event.getActionIndex(), event);
                } break;
                case MotionEvent.ACTION_MOVE: {
                    handleReceivedPointerMove(event);
                } break;
                case MotionEvent.ACTION_UP: {
                    handleReceivedPointerUp(event.getActionIndex(), event);
                } break;
                case MotionEvent.ACTION_POINTER_UP: {
                    handleReceivedPointerUp(event.getActionIndex(), event);
                } break;
            }
            if (DEBUG) {
                Slog.i(LOG_TAG_RECEIVED_POINTER_TRACKER, "Received pointer: " + toString());
            }
!!!8363788.java!!!	getLastReceivedEvent() : MotionEvent
            return mLastReceivedEvent;
!!!8363916.java!!!	getReceivedPointerDownCount() : int
            return Integer.bitCount(mReceivedPointersDown);
!!!8364044.java!!!	getActivePointers() : int
            return mActivePointers;
!!!8364172.java!!!	getActivePointerCount() : int
            return Integer.bitCount(mActivePointers);
!!!8364300.java!!!	isReceivedPointerDown(in pointerId : int) : boolean
            final int pointerFlag = (1 << pointerId);
            return (mReceivedPointersDown & pointerFlag) != 0;
!!!8364428.java!!!	isActivePointer(in pointerId : int) : boolean
            final int pointerFlag = (1 << pointerId);
            return (mActivePointers & pointerFlag) != 0;
!!!8364556.java!!!	getReceivedPointerDownX(in pointerId : int) : float
            return mReceivedPointerDownX[pointerId];
!!!8364684.java!!!	getReceivedPointerDownY(in pointerId : int) : float
            return mReceivedPointerDownY[pointerId];
!!!8364812.java!!!	getReceivedPointerDownTime(in pointerId : int) : long
            return mReceivedPointerDownTime[pointerId];
!!!8364940.java!!!	getPrimaryActivePointerId() : int
            if (mPrimaryActivePointerId == INVALID_POINTER_ID) {
                mPrimaryActivePointerId = findPrimaryActivePointer();
            }
            return mPrimaryActivePointerId;
!!!8365068.java!!!	getLastReceivedUpPointerDownTime() : long
            return mLastReceivedUpPointerDownTime;
!!!8365196.java!!!	getLastReceivedUpPointerId() : int
            return mLastReceivedUpPointerId;
!!!8365324.java!!!	getLastReceivedUpPointerDownX() : float
            return mLastReceivedUpPointerDownX;
!!!8365452.java!!!	getLastReceivedUpPointerDownY() : float
            return mLastReceivedUpPointerDownY;
!!!8365580.java!!!	getLastReceivedDownEdgeFlags() : int
            return mLastReceivedDownEdgeFlags;
!!!8365708.java!!!	wasLastReceivedUpPointerActive() : boolean
            return mLastReceivedUpPointerActive;
!!!8365836.java!!!	populateActivePointerIds(inout outPointerIds : int) : void
            int index = 0;
            for (int idBits = mActivePointers; idBits != 0; ) {
                final int id = Integer.numberOfTrailingZeros(idBits);
                idBits &= ~(1 << id);
                outPointerIds[index] = id;
                index++;
            }
!!!8365964.java!!!	isActiveOrWasLastActiveUpPointer(in pointerId : int) : boolean
            return (isActivePointer(pointerId)
                    || (mLastReceivedUpPointerId == pointerId
                            && mLastReceivedUpPointerActive));
!!!8366092.java!!!	handleReceivedPointerDown(in pointerIndex : int, inout event : MotionEvent) : void
            final int pointerId = event.getPointerId(pointerIndex);
            final int pointerFlag = (1 << pointerId);

            mLastReceivedUpPointerId = 0;
            mLastReceivedUpPointerDownTime = 0;
            mLastReceivedUpPointerActive = false;
            mLastReceivedUpPointerDownX = 0;
            mLastReceivedUpPointerDownX = 0;

            mLastReceivedDownEdgeFlags = event.getEdgeFlags();

            mReceivedPointersDown |= pointerFlag;
            mReceivedPointerDownX[pointerId] = event.getX(pointerIndex);
            mReceivedPointerDownY[pointerId] = event.getY(pointerIndex);
            mReceivedPointerDownTime[pointerId] = event.getEventTime();

            if (!mHasMovingActivePointer) {
                // If still no moving active pointers every
                // down pointer is the only active one.
                mActivePointers = pointerFlag;
                mPrimaryActivePointerId = pointerId;
            } else {
                // If at least one moving active pointer every
                // subsequent down pointer is active.
                mActivePointers |= pointerFlag;
            }
!!!8366220.java!!!	handleReceivedPointerMove(inout event : MotionEvent) : void
            detectActivePointers(event);
!!!8366348.java!!!	handleReceivedPointerUp(in pointerIndex : int, inout event : MotionEvent) : void
            final int pointerId = event.getPointerId(pointerIndex);
            final int pointerFlag = (1 << pointerId);

            mLastReceivedUpPointerId = pointerId;
            mLastReceivedUpPointerDownTime = getReceivedPointerDownTime(pointerId);
            mLastReceivedUpPointerActive = isActivePointer(pointerId);
            mLastReceivedUpPointerDownX = mReceivedPointerDownX[pointerId];
            mLastReceivedUpPointerDownY = mReceivedPointerDownY[pointerId];

            mReceivedPointersDown &= ~pointerFlag;
            mActivePointers &= ~pointerFlag;
            mReceivedPointerDownX[pointerId] = 0;
            mReceivedPointerDownY[pointerId] = 0;
            mReceivedPointerDownTime[pointerId] = 0;

            if (mActivePointers == 0) {
                mHasMovingActivePointer = false;
            }
            if (mPrimaryActivePointerId == pointerId) {
                mPrimaryActivePointerId = INVALID_POINTER_ID;
            }
!!!8366476.java!!!	detectActivePointers(inout event : MotionEvent) : void
            for (int i = 0, count = event.getPointerCount(); i < count; i++) {
                final int pointerId = event.getPointerId(i);
                if (mHasMovingActivePointer) {
                    // If already active => nothing to do.
                    if (isActivePointer(pointerId)) {
                        continue;
                    }
                }
                // Active pointers are ones that moved more than a given threshold.
                final float pointerDeltaMove = computePointerDeltaMove(i, event);
                if (pointerDeltaMove > mThresholdActivePointer) {
                    final int pointerFlag = (1 << pointerId);
                    mActivePointers |= pointerFlag;
                    mHasMovingActivePointer = true;
                }
            }
!!!8366604.java!!!	findPrimaryActivePointer() : int
            int primaryActivePointerId = INVALID_POINTER_ID;
            long minDownTime = Long.MAX_VALUE;
            // Find the active pointer that went down first.
            for (int i = 0, count = mReceivedPointerDownTime.length; i < count; i++) {
                if (isActivePointer(i)) {
                    final long downPointerTime = mReceivedPointerDownTime[i];
                    if (downPointerTime < minDownTime) {
                        minDownTime = downPointerTime;
                        primaryActivePointerId = i;
                    }
                }
            }
            return primaryActivePointerId;
!!!8366732.java!!!	computePointerDeltaMove(in pointerIndex : int, inout event : MotionEvent) : float
            final int pointerId = event.getPointerId(pointerIndex);
            final float deltaX = event.getX(pointerIndex) - mReceivedPointerDownX[pointerId];
            final float deltaY = event.getY(pointerIndex) - mReceivedPointerDownY[pointerId];
            return (float) Math.hypot(deltaX, deltaY);
!!!8366860.java!!!	toString() : String
            StringBuilder builder = new StringBuilder();
            builder.append("=========================");
            builder.append("\nDown pointers #");
            builder.append(getReceivedPointerDownCount());
            builder.append(" [ ");
            for (int i = 0; i < MAX_POINTER_COUNT; i++) {
                if (isReceivedPointerDown(i)) {
                    builder.append(i);
                    builder.append(" ");
                }
            }
            builder.append("]");
            builder.append("\nActive pointers #");
            builder.append(getActivePointerCount());
            builder.append(" [ ");
            for (int i = 0; i < MAX_POINTER_COUNT; i++) {
                if (isActivePointer(i)) {
                    builder.append(i);
                    builder.append(" ");
                }
            }
            builder.append("]");
            builder.append("\nPrimary active pointer id [ ");
            builder.append(getPrimaryActivePointerId());
            builder.append(" ]");
            builder.append("\n=========================");
            return builder.toString();
