class SSLParametersImpl
!!!2495131.java!!!	getEnabledCipherSuitesMember() : CipherSuite
        if (enabledCipherSuites == null) {
            this.enabledCipherSuites = CipherSuite.DEFAULT_CIPHER_SUITES;
        }
        return enabledCipherSuites;
!!!2495259.java!!!	SSLParametersImpl(inout kms : KeyManager, inout tms : TrustManager, inout sr : SecureRandom, inout clientSessionContext : ClientSessionContext, inout serverSessionContext : ServerSessionContext)
        this.serverSessionContext = serverSessionContext;
        this.clientSessionContext = clientSessionContext;

        // It's not described by the spec of SSLContext what should happen
        // if the arrays of length 0 are specified. This implementation
        // behave as for null arrays (i.e. use installed security providers)

        // initialize keyManager
        if ((kms == null) || (kms.length == 0)) {
            keyManager = getDefaultKeyManager();
        } else {
            keyManager = findX509KeyManager(kms);
        }

        // initialize trustManager
        if ((tms == null) || (tms.length == 0)) {
            trustManager = getDefaultTrustManager();
        } else {
            trustManager = findX509TrustManager(tms);
        }
        // initialize secure random
        // BEGIN android-removed
        // if (sr == null) {
        //     if (defaultSecureRandom == null) {
        //         defaultSecureRandom = new SecureRandom();
        //     }
        //     secureRandom = defaultSecureRandom;
        // } else {
        //     secureRandom = sr;
        // }
        // END android-removed
        // BEGIN android-added
        // We simply use the SecureRandom passed in by the caller. If it's
        // null, we don't replace it by a new instance. The native code below
        // then directly accesses /dev/urandom. Not the most elegant solution,
        // but faster than going through the SecureRandom object.
        secureRandom = sr;
        // END android-added
!!!2495387.java!!!	getDefault() : SSLParametersImpl
        SSLParametersImpl result = defaultParameters;
        if (result == null) {
            // single-check idiom
            defaultParameters = result = new SSLParametersImpl(null,
                                                               null,
                                                               null,
                                                               new ClientSessionContext(),
                                                               new ServerSessionContext());
        }
        return (SSLParametersImpl) result.clone();
!!!2495515.java!!!	getServerSessionContext() : ServerSessionContext
        return serverSessionContext;
!!!2495643.java!!!	getClientSessionContext() : ClientSessionContext
        return clientSessionContext;
!!!2495771.java!!!	getKeyManager() : X509KeyManager
        return keyManager;
!!!2495899.java!!!	getTrustManager() : X509TrustManager
        return trustManager;
!!!2496027.java!!!	getSecureRandom() : SecureRandom
        if (secureRandom != null) {
            return secureRandom;
        }
        SecureRandom result = defaultSecureRandom;
        if (result == null) {
            // single-check idiom
            defaultSecureRandom = result = new SecureRandom();
        }
        secureRandom = result;
        return secureRandom;
!!!2496155.java!!!	getSecureRandomMember() : SecureRandom
        return secureRandom;
!!!2496283.java!!!	getEnabledCipherSuites() : String
        if (enabledCipherSuiteNames == null) {
            CipherSuite[] enabledCipherSuites = getEnabledCipherSuitesMember();
            enabledCipherSuiteNames = new String[enabledCipherSuites.length];
            for (int i = 0; i< enabledCipherSuites.length; i++) {
                enabledCipherSuiteNames[i] = enabledCipherSuites[i].getName();
            }
        }
        return enabledCipherSuiteNames.clone();
!!!2496411.java!!!	setEnabledCipherSuites(inout suites : String) : void
        if (suites == null) {
            throw new IllegalArgumentException("suites == null");
        }
        CipherSuite[] cipherSuites = new CipherSuite[suites.length];
        for (int i=0; i<suites.length; i++) {
            String suite = suites[i];
            if (suite == null) {
                throw new IllegalArgumentException("suites[" + i + "] == null");
            }
            cipherSuites[i] = CipherSuite.getByName(suite);
            if (cipherSuites[i] == null || !cipherSuites[i].supported) {
                throw new IllegalArgumentException(suite + " is not supported.");
            }
        }
        enabledCipherSuites = cipherSuites;
        enabledCipherSuiteNames = suites;
!!!2496539.java!!!	getEnabledProtocols() : String
        return enabledProtocols.clone();
!!!2496667.java!!!	setEnabledProtocols(inout protocols : String) : void
        if (protocols == null) {
            throw new IllegalArgumentException("protocols == null");
        }
        for (int i=0; i<protocols.length; i++) {
            String protocol = protocols[i];
            if (protocol == null) {
                throw new IllegalArgumentException("protocols[" + i + "] == null");
            }
            if (!ProtocolVersion.isSupported(protocol)) {
                throw new IllegalArgumentException("Protocol " + protocol + " is not supported.");
            }
        }
        enabledProtocols = protocols;
!!!2496795.java!!!	setUseClientMode(inout mode : boolean) : void
        client_mode = mode;
!!!2496923.java!!!	getUseClientMode() : boolean
        return client_mode;
!!!2497051.java!!!	setNeedClientAuth(inout need : boolean) : void
        need_client_auth = need;
        // reset the want_client_auth setting
        want_client_auth = false;
!!!2497179.java!!!	getNeedClientAuth() : boolean
        return need_client_auth;
!!!2497307.java!!!	setWantClientAuth(inout want : boolean) : void
        want_client_auth = want;
        // reset the need_client_auth setting
        need_client_auth = false;
!!!2497435.java!!!	getWantClientAuth() : boolean
        return want_client_auth;
!!!2497563.java!!!	setEnableSessionCreation(inout flag : boolean) : void
        enable_session_creation = flag;
!!!2497691.java!!!	getEnableSessionCreation() : boolean
        return enable_session_creation;
!!!2497819.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!2497947.java!!!	getDefaultKeyManager() : X509KeyManager
        X509KeyManager result = defaultKeyManager;
        if (result == null) {
            // single-check idiom
            defaultKeyManager = result = createDefaultKeyManager();
        }
        return result;
!!!2498075.java!!!	createDefaultKeyManager() : X509KeyManager
        try {
            String algorithm = KeyManagerFactory.getDefaultAlgorithm();
            KeyManagerFactory kmf = KeyManagerFactory.getInstance(algorithm);
            kmf.init(null, null);
            KeyManager[] kms = kmf.getKeyManagers();
            return findX509KeyManager(kms);
        } catch (NoSuchAlgorithmException e) {
            throw new KeyManagementException(e);
        } catch (KeyStoreException e) {
            throw new KeyManagementException(e);
        } catch (UnrecoverableKeyException e) {
            throw new KeyManagementException(e);
        }
!!!2498203.java!!!	findX509KeyManager(inout kms : KeyManager) : X509KeyManager
        for (KeyManager km : kms) {
            if (km instanceof X509KeyManager) {
                return (X509KeyManager)km;
            }
        }
        throw new KeyManagementException("Failed to find an X509KeyManager in " + Arrays.toString(kms));
!!!2498331.java!!!	getDefaultTrustManager() : X509TrustManager
        X509TrustManager result = defaultTrustManager;
        if (result == null) {
            // single-check idiom
            defaultTrustManager = result = createDefaultTrustManager();
        }
        return result;
!!!2498459.java!!!	createDefaultTrustManager() : X509TrustManager
        try {
            String algorithm = TrustManagerFactory.getDefaultAlgorithm();
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(algorithm);
            tmf.init((KeyStore) null);
            TrustManager[] tms = tmf.getTrustManagers();
            X509TrustManager trustManager = findX509TrustManager(tms);
            return trustManager;
        } catch (NoSuchAlgorithmException e) {
            throw new KeyManagementException(e);
        } catch (KeyStoreException e) {
            throw new KeyManagementException(e);
        }
!!!2498587.java!!!	findX509TrustManager(inout tms : TrustManager) : X509TrustManager
        for (TrustManager tm : tms) {
            if (tm instanceof X509TrustManager) {
                return (X509TrustManager)tm;
            }
        }
        throw new KeyManagementException("Failed to find an X509TrustManager in " +  Arrays.toString(tms));
