class IrBlasterDatabaseAccessFragment
!!!12225932.java!!!	IrBlasterDatabaseAccessFragment(inout context : Context)
        super(context);
        mContext = context;
!!!12226060.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        View view = inflater.inflate(R.layout.ir_setup_database_access, container, false);
        mProgressBar = (ProgressBar) view.findViewById(R.id.progress_bar);
        mManufacturer = (AutoCompleteTextView) view.findViewById(R.id.manufacturer);
        mModel = (AutoCompleteTextView) view.findViewById(R.id.model);
        mIndicator = (TextView) view.findViewById(R.id.indicator);
        mVersionMsg = (TextView) view.findViewById(R.id.txt_version_msg);

        mManufacturer.setThreshold(1);
        mModel.setThreshold(1);

        mManufacturer.setEnabled(false);
        mModel.setEnabled(false);

        return view;
!!!12226188.java!!!	setUpViews() : void
        mManufacturer.setOnItemClickListener (
                new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent,
                    View view, int position, long id) {
                mSelectedManufacturer = (IrDeviceManufacturer)parent.getAdapter().getItem(position);
                Log.d(LOG_TAG, "==> User select manufacturer: <" +
                     mSelectedManufacturer.getId()
                     + ", " + mSelectedManufacturer.getName() + ">");

                // Clear sub items selection if any
                mSelectedModel = null;
                mManufacturer.setEnabled(false);

                // Database in no query mode, do nothing
                if (mDatabaseState != QSNativeLib.QS_query_normal) {
                    Log.d(LOG_TAG, "==> Database in no query mode, do nothing");
                    mIndicator.setText(R.string.ir_setup_model_number_security);
                    mIndicator.setVisibility(View.VISIBLE);
                    mModel.setEnabled(false);
                    setNextEnabled(true);
                    focusNext();
                    return;
                }

                mIndicator.setText(R.string.ir_setup_model_number_indicator);
                mIndicator.setVisibility(View.VISIBLE);
                mModel.setEnabled(true);
                setNextEnabled(true);
                requestFocusOnView(mModel);
            }
        });

        mManufacturer.setOnEditorActionListener (new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if ((event != null) &&
                    (event.getKeyCode() == KeyEvent.KEYCODE_ENTER) &&
                    (event.getAction() == KeyEvent.ACTION_DOWN)) {
                    return true;
                }
                return false;
            }
        });

        mManufacturer.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                Log.d(LOG_TAG, "==> afterTextChanged: " + s);
                loadManufacturersSync(s.toString());
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                Log.d(LOG_TAG, "==> beforeTextChanged: " + s);
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                Log.d(LOG_TAG, "==> onTextChanged: " + s);
            }
        });

        mManufacturedapter = new ArrayAdapter<IrDeviceManufacturer>(getActivity(),
                            android.R.layout.simple_dropdown_item_1line);
        mManufacturer.setAdapter(mManufacturedapter);

        mModel.setOnItemClickListener (new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent,
                    View view, int position, long id) {
                mSelectedModel = (IrDeviceModel)parent.getAdapter().getItem(position);
                Log.d(LOG_TAG, "==> User select model: <" + mSelectedModel.getId()
                     + ", " + mSelectedModel.getName() + ">");
                // Then refresh commandSets by model filter
                loadCommandsetsSync();
                Log.d(LOG_TAG, "==> Refresh commandSets by model finished...");
                focusNext();

            }
        });

        mModel.setOnEditorActionListener (new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if ((event != null) &&
                    (event.getKeyCode() == KeyEvent.KEYCODE_ENTER) &&
                    (event.getAction() == KeyEvent.ACTION_DOWN)) {
                    String selectedModel = mModel.getText().toString();
                    if (selectedModel == null || selectedModel.isEmpty()) {
                        focusNext();
                    }
                    return true;
                }
                return false;
            }
        });

        mModel.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                Log.d(LOG_TAG, "==> afterTextChanged: " + s);
                loadModelsSync(s.toString());
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                Log.d(LOG_TAG, "==> beforeTextChanged: " + s);
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                Log.d(LOG_TAG, "==> onTextChanged: " + s);
            }
        });

        mModelsAdapter = new ArrayAdapter<IrDeviceModel>(getActivity(),
                            android.R.layout.simple_dropdown_item_1line);
        mModel.setAdapter(mModelsAdapter);
!!!12226316.java!!!	onResume() : void
        super.onResume();
        String selection = (String) getProperty(IrBlasterSetupActivity.DEVICE_SELECTION);
        if (selection != null && selection.equals(IrBlasterSetupActivity.DEVICE_TYPE_TV)) {
            setTitleText(getString(R.string.tv_database_title));
        } else if (selection != null && selection.equals(IrBlasterSetupActivity.DEVICE_TYPE_AVR)) {
            setTitleText(getString(R.string.avr_database_title));
        } else {
            setTitleText(getString(R.string.ir_blaster_setup_title));
        }
        setSubtitleText(getString(R.string.ir_setup_devicetype_label));

        setNextButtonText(getString(R.string.button_next));
        setBackButtonText(getString(R.string.button_back));

        mSelectedDeviceType = (IrDeviceType) getProperty(DeviceTypesFragment.SELECTED_DEVICE_TYPE);
        mManufacturer.setText(null);
        mManufacturer.setHint(
            getString(R.string.database_manufacturer) + "(" + mSelectedDeviceType.getName() + ")");
        mModel.setText(null);
        mModel.setHint(
            getString(R.string.database_model_number) + "(" + mSelectedDeviceType.getName() + ")");
        mDatabase = new IrDatabase(mContext, new IrDeviceTypeMapping(mContext));
        setUpResumeViews(mDatabase.isDemoDatabase());
!!!12226444.java!!!	setUpResumeViews(inout showVerMsg : boolean) : void
        Log.d(LOG_TAG, "setUpResumeViews() " + showVerMsg);
        mVersionMsg.setVisibility(showVerMsg ? View.VISIBLE : View.GONE);
        mProgressBar.setVisibility(showVerMsg ? View.GONE : View.VISIBLE);
        mIndicator.setVisibility(View.GONE);
        mManufacturer.setVisibility(View.GONE);
        mModel.setVisibility(View.GONE);
        setNextEnabled(false);
        setBackEnabled(false);
        if (showVerMsg) {
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    setUpResumeViews(false);
                }
            }, SPLASH_DISPLAY_LENGTH);
        } else {
            checkQueryMode();
        }
!!!12226572.java!!!	onAccept() : boolean
        String selectedModel = mModel.getText().toString();
        if (mSelectedModel == null && selectedModel != null && !selectedModel.isEmpty()) {
            Toast.makeText(mContext, getString(R.string.wrong_model_prefix) + selectedModel
                          + getString(R.string.wrong_model_end), Toast.LENGTH_LONG).show();
            return false;
        }
        // FIXME: If we don't do this, we will not be able to download codesets without model.
        if (mSelectedModel == null) {
            loadCommandsetsSync();
        }

        return true;
!!!12226700.java!!!	checkQueryMode() : void
        new checkQueryModeTask().execute();
!!!12227212.java!!!	loadManufacturersSync(in queryString : String) : void
        List<IrDeviceManufacturer> results = mDatabase.getManufacturers(mSelectedDeviceType,
                                                                       queryString);
        mManufacturedapter.clear();
        if (results != null) {
            mManufacturedapter.addAll(results);
        }
!!!12227340.java!!!	loadModelsSync(in queryString : String) : void
        List<IrDeviceModel> result = mDatabase.queryModels(mSelectedDeviceType,
                                                          mSelectedManufacturer,
                                                          queryString);
        mModelsAdapter.clear();
        if (result != null) {
            mModelsAdapter.addAll(result);
        }
!!!12227468.java!!!	loadCommandsetsSync() : void
        if (mSelectedModel != null) {
            Log.d(LOG_TAG, "==> loadCommandsetsSync: selected model <" +
                    mSelectedModel.getId() + ", " + mSelectedModel.getName());
        } else {
            Log.d(LOG_TAG, "==> loadCommandsetsSync: no selected model.");
        }

        List<IrCommandSet> result = null;
        if (mSelectedModel != null) {
            result = mDatabase.queryCommandSetsbyModel(mSelectedDeviceType, mSelectedManufacturer,
                                                      mSelectedModel);
        } else {
            result = mDatabase.queryCommandSets(mSelectedDeviceType, mSelectedManufacturer);
        }

        setProperty(SELECTED_MANUFACTURER, mSelectedManufacturer);
        if (mSelectedModel == null) {
            setProperty(SELECTED_MODEL_NUMBER, new IrDeviceModel("0", "unknown"));
        } else {
            setProperty(SELECTED_MODEL_NUMBER, mSelectedModel);
        }
        setProperty(SELECTED_COMMANDSET_LIST, result);
        Log.d(LOG_TAG, "==> loadCommandsetsSync: SELECTED_COMMANDSET_LIST " + result);
