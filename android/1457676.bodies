class EventSenderImpl
!!!9061260.java!!!	createViewPointFromContentCoordinates(in x : int, in y : int) : Point
        return new Point(Math.round(x * mWebView.getScale()) - mWebView.getScrollX(),
                         Math.round(y * mWebView.getScale()) - mWebView.getScrollY());
!!!9063052.java!!!	reset(inout webView : WebView) : void
        mWebView = webView;
        mTouchPoints = null;
        mTouchMetaState = 0;
        mMousePoint = null;
!!!9063180.java!!!	enableDOMUIEventLogging(in domNode : int) : void
        Message msg = mEventSenderHandler.obtainMessage(MSG_ENABLE_DOM_UI_EVENT_LOGGING);
        msg.arg1 = domNode;
        msg.sendToTarget();
!!!9063308.java!!!	fireKeyboardEventsToElement(in domNode : int) : void
        Message msg = mEventSenderHandler.obtainMessage(MSG_FIRE_KEYBOARD_EVENTS_TO_ELEMENT);
        msg.arg1 = domNode;
        msg.sendToTarget();
!!!9063436.java!!!	leapForward(in milliseconds : int) : void
        Message msg = mEventSenderHandler.obtainMessage(MSG_LEAP_FORWARD);
        msg.arg1 = milliseconds;
        msg.sendToTarget();
!!!9063564.java!!!	keyDown(in character : String, inout withModifiers : String) : void
        Bundle bundle = new Bundle();
        bundle.putString("character", character);
        bundle.putStringArray("withModifiers", withModifiers);
        mEventSenderHandler.obtainMessage(MSG_KEY_DOWN, bundle).sendToTarget();
!!!9063692.java!!!	mouseDown() : void
        mEventSenderHandler.sendEmptyMessage(MSG_MOUSE_DOWN);
!!!9063820.java!!!	mouseUp() : void
        mEventSenderHandler.sendEmptyMessage(MSG_MOUSE_UP);
!!!9063948.java!!!	mouseClick() : void
        mEventSenderHandler.sendEmptyMessage(MSG_MOUSE_CLICK);
!!!9064076.java!!!	mouseMoveTo(in x : int, in y : int) : void
        mEventSenderHandler.obtainMessage(MSG_MOUSE_MOVE_TO, x, y).sendToTarget();
!!!9064204.java!!!	addTouchPoint(in x : int, in y : int) : void
        mEventSenderHandler.obtainMessage(MSG_ADD_TOUCH_POINT, x, y).sendToTarget();
!!!9064332.java!!!	touchStart() : void
        mEventSenderHandler.sendEmptyMessage(MSG_TOUCH_START);
!!!9064460.java!!!	updateTouchPoint(in id : int, in x : int, in y : int) : void
        Bundle bundle = new Bundle();
        bundle.putInt("id", id);
        bundle.putInt("x", x);
        bundle.putInt("y", y);
        mEventSenderHandler.obtainMessage(MSG_UPDATE_TOUCH_POINT, bundle).sendToTarget();
!!!9064588.java!!!	touchMove() : void
        mEventSenderHandler.sendEmptyMessage(MSG_TOUCH_MOVE);
!!!9064716.java!!!	cancelTouchPoint(in id : int) : void
        Message msg = mEventSenderHandler.obtainMessage(MSG_CANCEL_TOUCH_POINT);
        msg.arg1 = id;
        msg.sendToTarget();
!!!9064844.java!!!	touchCancel() : void
        mEventSenderHandler.sendEmptyMessage(MSG_TOUCH_CANCEL);
!!!9064972.java!!!	releaseTouchPoint(in id : int) : void
        Message msg = mEventSenderHandler.obtainMessage(MSG_RELEASE_TOUCH_POINT);
        msg.arg1 = id;
        msg.sendToTarget();
!!!9065100.java!!!	touchEnd() : void
        mEventSenderHandler.sendEmptyMessage(MSG_TOUCH_END);
!!!9065228.java!!!	setTouchModifier(in modifier : String, inout enabled : boolean) : void
        Bundle bundle = new Bundle();
        bundle.putString("modifier", modifier);
        bundle.putBoolean("enabled", enabled);
        mEventSenderHandler.obtainMessage(MSG_SET_TOUCH_MODIFIER, bundle).sendToTarget();
!!!9065356.java!!!	clearTouchPoints() : void
        mEventSenderHandler.sendEmptyMessage(MSG_CLEAR_TOUCH_POINTS);
!!!9065484.java!!!	getTouchPoints() : TouchPoint
        if (mTouchPoints == null) {
            mTouchPoints = new LinkedList<TouchPoint>();
        }

        return mTouchPoints;
!!!9065612.java!!!	executeTouchEvent(in action : int) : void
        int numPoints = getTouchPoints().size();
        int[] pointerIds = new int[numPoints];
        MotionEvent.PointerCoords[] pointerCoords = new MotionEvent.PointerCoords[numPoints];

        for (int i = 0; i < numPoints; ++i) {
            boolean isNeeded = false;
            switch(action) {
            case MotionEvent.ACTION_DOWN:
            case MotionEvent.ACTION_UP:
                isNeeded = true;
                break;
            case MotionEvent.ACTION_MOVE:
                isNeeded = getTouchPoints().get(i).hasMoved();
                break;
            case MotionEvent.ACTION_CANCEL:
                isNeeded = getTouchPoints().get(i).isCancelled();
                break;
            default:
                Log.w(LOG_TAG + "::executeTouchEvent(),", "action not supported:" + action);
                break;
            }

            numPoints = 0;
            if (isNeeded) {
                pointerIds[numPoints] = getTouchPoints().get(i).getId();
                pointerCoords[numPoints] = new MotionEvent.PointerCoords();
                pointerCoords[numPoints].x = getTouchPoints().get(i).getX();
                pointerCoords[numPoints].y = getTouchPoints().get(i).getY();
                ++numPoints;
            }
        }

        if (numPoints == 0) {
            return;
        }

        MotionEvent event = MotionEvent.obtain(mTouchPoints.get(0).getDownTime(),
                SystemClock.uptimeMillis(), action,
                numPoints, pointerIds, pointerCoords,
                mTouchMetaState, 1.0f, 1.0f, 0, 0, 0, 0);

        mWebView.onTouchEvent(event);
!!!9065740.java!!!	executeKeyEvent(in action : int, in keyCode : int) : void
        KeyEvent event = new KeyEvent(action, keyCode);
        mWebView.onKeyDown(event.getKeyCode(), event);
!!!9065868.java!!!	charToKeyCode(in c : char) : int
        // handle numbers
        if (c >= '0' && c <= '9') {
            int offset = c - '0';
            return KeyEvent.KEYCODE_0 + offset;
        }

        // handle characters
        if (c >= 'a' && c <= 'z') {
            int offset = c - 'a';
            return KeyEvent.KEYCODE_A + offset;
        }

        // handle all others
        switch (c) {
            case '*':
                return KeyEvent.KEYCODE_STAR;

            case '#':
                return KeyEvent.KEYCODE_POUND;

            case ',':
                return KeyEvent.KEYCODE_COMMA;

            case '.':
                return KeyEvent.KEYCODE_PERIOD;

            case '\t':
                return KeyEvent.KEYCODE_TAB;

            case ' ':
                return KeyEvent.KEYCODE_SPACE;

            case '\n':
                return KeyEvent.KEYCODE_ENTER;

            case '\b':
            case 0x7F:
                return KeyEvent.KEYCODE_DEL;

            case '~':
                return KeyEvent.KEYCODE_GRAVE;

            case '-':
                return KeyEvent.KEYCODE_MINUS;

            case '=':
                return KeyEvent.KEYCODE_EQUALS;

            case '(':
                return KeyEvent.KEYCODE_LEFT_BRACKET;

            case ')':
                return KeyEvent.KEYCODE_RIGHT_BRACKET;

            case '\\':
                return KeyEvent.KEYCODE_BACKSLASH;

            case ';':
                return KeyEvent.KEYCODE_SEMICOLON;

            case '\'':
                return KeyEvent.KEYCODE_APOSTROPHE;

            case '/':
                return KeyEvent.KEYCODE_SLASH;

            default:
                return c;
        }
!!!9065996.java!!!	modifierToKeyCode(in modifier : String) : int
        if (modifier.equals("ctrlKey")) {
            return KeyEvent.KEYCODE_ALT_LEFT;
        } else if (modifier.equals("shiftKey")) {
            return KeyEvent.KEYCODE_SHIFT_LEFT;
        } else if (modifier.equals("altKey")) {
            return KeyEvent.KEYCODE_SYM;
        }

        return KeyEvent.KEYCODE_UNKNOWN;
