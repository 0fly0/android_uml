class NativeBreakIterator
!!!1965211.java!!!	NativeBreakIterator(in address : int, in type : int)
        this.address = address;
        this.type = type;
        this.charIterator = new StringCharacterIterator("");
!!!1965339.java!!!	clone() : Object
        int cloneAddr = cloneImpl(this.address);
        NativeBreakIterator clone = new NativeBreakIterator(cloneAddr, this.type);
        clone.string = this.string;
        // The RI doesn't clone the CharacterIterator.
        clone.charIterator = this.charIterator;
        return clone;
!!!1965467.java!!!	equals(inout object : Object) : boolean
        if (object == this) {
            return true;
        }
        if (!(object instanceof NativeBreakIterator)) {
            return false;
        }
        // TODO: is this sufficient? shouldn't we be checking the underlying rules?
        NativeBreakIterator rhs = (NativeBreakIterator) object;
        return type == rhs.type && charIterator.equals(rhs.charIterator);
!!!1965595.java!!!	hashCode() : int
        return 42; // No-one uses BreakIterator as a hash key.
!!!1965723.java!!!	finalize() : void
        try {
            closeImpl(this.address);
        } finally {
            super.finalize();
        }
!!!1965851.java!!!	current() : int
        return currentImpl(this.address, this.string);
!!!1965979.java!!!	first() : int
        return firstImpl(this.address, this.string);
!!!1966107.java!!!	following(in offset : int) : int
        return followingImpl(this.address, this.string, offset);
!!!1966235.java!!!	getText() : CharacterIterator
        int newLocation = currentImpl(this.address, this.string);
        this.charIterator.setIndex(newLocation);
        return this.charIterator;
!!!1966363.java!!!	last() : int
        return lastImpl(this.address, this.string);
!!!1966491.java!!!	next(in n : int) : int
        return nextImpl(this.address, this.string, n);
!!!1966619.java!!!	next() : int
        return nextImpl(this.address, this.string, 1);
!!!1966747.java!!!	previous() : int
        return previousImpl(this.address, this.string);
!!!1966875.java!!!	setText(inout newText : CharacterIterator) : void
        StringBuilder sb = new StringBuilder();
        for (char c = newText.first(); c != CharacterIterator.DONE; c = newText.next()) {
            sb.append(c);
        }
        setText(sb.toString(), newText);
!!!1967003.java!!!	setText(inout newText : String) : void
        setText(newText, new StringCharacterIterator(newText));
!!!1967131.java!!!	setText(inout s : String, inout it : CharacterIterator) : void
        this.string = s;
        this.charIterator = it;
        setTextImpl(this.address, this.string);
!!!1967259.java!!!	hasText() : boolean
        return (string != null);
!!!1967387.java!!!	isBoundary(in offset : int) : boolean
        return isBoundaryImpl(this.address, this.string, offset);
!!!1967515.java!!!	preceding(in offset : int) : int
      return precedingImpl(this.address, this.string, offset);
!!!1967643.java!!!	getCharacterInstance(inout where : Locale) : NativeBreakIterator
        return new NativeBreakIterator(getCharacterInstanceImpl(where.toString()), BI_CHAR_INSTANCE);
!!!1967771.java!!!	getLineInstance(inout where : Locale) : NativeBreakIterator
        return new NativeBreakIterator(getLineInstanceImpl(where.toString()), BI_LINE_INSTANCE);
!!!1967899.java!!!	getSentenceInstance(inout where : Locale) : NativeBreakIterator
        return new NativeBreakIterator(getSentenceInstanceImpl(where.toString()), BI_SENT_INSTANCE);
!!!1968027.java!!!	getWordInstance(inout where : Locale) : NativeBreakIterator
        return new NativeBreakIterator(getWordInstanceImpl(where.toString()), BI_WORD_INSTANCE);
