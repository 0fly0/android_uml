class KeyguardMultiUserSelectorView
!!!7860620.java!!!	KeyguardMultiUserSelectorView(inout context : Context)
        this(context, null, 0);
!!!7860748.java!!!	KeyguardMultiUserSelectorView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!7860876.java!!!	KeyguardMultiUserSelectorView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
!!!7861004.java!!!	onFinishInflate() : void
        mUsersGrid = (ViewGroup) findViewById(R.id.keyguard_users_grid);
        mUsersGrid.removeAllViews();
        setClipChildren(false);
        setClipToPadding(false);

!!!7861132.java!!!	setCallback(inout callback : UserSwitcherCallback) : void
        mCallback = callback;
!!!7861260.java!!!	addUsers(inout userList : Collection<UserInfo>) : void
        UserInfo activeUser;
        try {
            activeUser = ActivityManagerNative.getDefault().getCurrentUser();
        } catch (RemoteException re) {
            activeUser = null;
        }

        ArrayList<UserInfo> users = new ArrayList<UserInfo>(userList);
        Collections.sort(users, mOrderAddedComparator);

        for (UserInfo user: users) {
            KeyguardMultiUserAvatar uv = createAndAddUser(user);
            if (user.id == activeUser.id) {
                mActiveUserAvatar = uv;
                mActiveUserAvatar.setActive(true, false, null);
            } else {
                uv.setActive(false, false, null);
            }
        }
!!!7861388.java!!!	createAndAddUser(inout user : UserInfo) : KeyguardMultiUserAvatar
        KeyguardMultiUserAvatar uv = KeyguardMultiUserAvatar.fromXml(
                R.layout.keyguard_multi_user_avatar, mContext, this, user);
        mUsersGrid.addView(uv);
        return uv;
!!!7861516.java!!!	onInterceptTouchEvent(inout event : MotionEvent) : boolean
        if(event.getActionMasked() != MotionEvent.ACTION_CANCEL && mCallback != null) {
            mCallback.userActivity();
        }
        return false;
!!!7861644.java!!!	setAllClickable(inout clickable : boolean) : void
        for(int i = 0; i < mUsersGrid.getChildCount(); i++) {
            View v = mUsersGrid.getChildAt(i);
            v.setClickable(clickable);
            v.setPressed(false);
        }
!!!7861772.java!!!	onClick(inout v : View) : void
        if (!(v instanceof KeyguardMultiUserAvatar)) return;
        final KeyguardMultiUserAvatar avatar = (KeyguardMultiUserAvatar) v;
        if (avatar.isClickable()) { // catch race conditions
            if (mActiveUserAvatar == avatar) {
                // If they click the currently active user, show the unlock hint
                mCallback.showUnlockHint();
                return;
            } else {
                // Reset the previously active user to appear inactive
                mCallback.hideSecurityView(FADE_OUT_ANIMATION_DURATION);
                setAllClickable(false);
                mActiveUserAvatar.setActive(false, true, new Runnable() {
                    @Override
                    public void run() {
                        mActiveUserAvatar = avatar;
                        mActiveUserAvatar.setActive(true, true, new Runnable() {
                            @Override
                            public void run() {
                                if (this.getClass().getName().contains("internal")) {
                                    try {
                                        ActivityManagerNative.getDefault()
                                                .switchUser(avatar.getUserInfo().id);
                                    } catch (RemoteException re) {
                                        Log.e(TAG, "Couldn't switch user " + re);
                                    }
                                } else {
                                    setAllClickable(true);
                                }
                            }
                        });
                    }
                });
            }
        }
