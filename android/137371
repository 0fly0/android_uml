format 74
"stream" // framework::base::opengl::java::javax::xml::transform::stream
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/javax/xml/transform/stream/"
  java_package "javax.xml.transform.stream"
  classview 135963 "stream"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 308763 "FilePathToURI"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 455323 "gNeedEscaping"
	class_attribute private explicit_type "boolean"
	multiplicity "[]"
	init_value " new boolean[128]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " which ASCII characters need to be escaped"
      end

      attribute 455451 "gAfterEscaping1"
	class_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " new char[128]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the first hex character if a character needs to be escaped"
      end

      attribute 455579 "gAfterEscaping2"
	class_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " new char[128]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the second hex character if a character needs to be escaped"
      end

      attribute 455707 "gHexChs"
	class_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " {'0', '1', '2', '3', '4', '5', '6', '7',
                                     '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 136091 "initialization"
	
	cpp "" ""
	java "  static {
        for (int i = 0; i <= 0x1f; i++) {
            gNeedEscaping[i] = true;
            gAfterEscaping1[i] = gHexChs[i >> 4];
            gAfterEscaping2[i] = gHexChs[i & 0xf];
        }
        gNeedEscaping[0x7f] = true;
        gAfterEscaping1[0x7f] = '7';
        gAfterEscaping2[0x7f] = 'F';
        char[] escChs = {' ', '<', '>', '#', '%', '\"', '{', '}',
                         '|', '\\\\', '^', '~', '[', ']', '`'};
        int len = escChs.length;
        char ch;
        for (int i = 0; i < len; i++) {
            ch = escChs[i];
            gNeedEscaping[ch] = true;
            gAfterEscaping1[ch] = gHexChs[ch >> 4];
            gAfterEscaping2[ch] = gHexChs[ch & 0xf];
        }
    }"
	php ""
	python ""
	idl ""
      end

      operation 1935131 "filepath2URI"
	class_operation public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "path" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " To escape a file path to a URI, by using %HH to represent
 special ASCII characters: 0x00~0x1F, 0x7F, ' ', '<', '>', '#', '%'
 and '\"' and non-ASCII characters (whose value >= 128)."
      end
    end

    class 308891 "StreamResult"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Acts as an holder for a transformation result,
which may be XML, plain Text, HTML, or some other form of markup.</p>

@author <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>"
      classrelation 547995 // <realization>
	relation 547995 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 547995 // <realization>
	  b parent class_ref 305819 // Result
      end

      classrelation 548123 // FEATURE (<unidirectional association>)
	relation 548123 --->
	  a role_name "FEATURE" init_value "
        \"http://javax.xml.transform.stream.StreamResult/feature\"" class_relation const_relation public
	    comment " If {@link javax.xml.transform.TransformerFactory#getFeature}
returns true when passed this value as an argument,
the Transformer supports Result output of this type.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 548123 // FEATURE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1935259 "StreamResult"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Zero-argument default constructor."
      end

      operation 1935387 "StreamResult"
	public explicit_return_type ""
	nparams 1
	  param inout name "outputStream" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamResult from a byte stream.  Normally,
a stream should be used rather than a reader, so that
the transformer may use instructions contained in the
transformation instructions to control the encoding.

@param outputStream A valid OutputStream reference."
      end

      operation 1935515 "StreamResult"
	public explicit_return_type ""
	nparams 1
	  param inout name "writer" type class_ref 133531 // Writer
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamResult from a character stream.  Normally,
a stream should be used rather than a reader, so that
the transformer may use instructions contained in the
transformation instructions to control the encoding.  However,
there are times when it is useful to write to a character
stream, such as when using a StringWriter.

@param writer  A valid Writer reference."
      end

      operation 1935643 "StreamResult"
	public explicit_return_type ""
	nparams 1
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamResult from a URL.

@param systemId Must be a String that conforms to the URI syntax."
      end

      operation 1935771 "StreamResult"
	public explicit_return_type ""
	nparams 1
	  param inout name "f" type class_ref 135579 // File
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamResult from a File.

@param f Must a non-null File reference."
      end

      operation 1935899 "setOutputStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "outputStream" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the ByteStream that is to be written to.  Normally,
a stream should be used rather than a reader, so that
the transformer may use instructions contained in the
transformation instructions to control the encoding.

@param outputStream A valid OutputStream reference."
      end

      operation 1936027 "getOutputStream"
	public return_type class_ref 132635 // OutputStream
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the byte stream that was set with setOutputStream.

@return The byte stream that was set with setOutputStream, or null
if setOutputStream or the ByteStream constructor was not called."
      end

      operation 1936155 "setWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "writer" type class_ref 133531 // Writer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the writer that is to receive the result.  Normally,
a stream should be used rather than a writer, so that
the transformer may use instructions contained in the
transformation instructions to control the encoding.  However,
there are times when it is useful to write to a writer,
such as when using a StringWriter.

@param writer  A valid Writer reference."
      end

      operation 1936283 "getWriter"
	public return_type class_ref 133531 // Writer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the character stream that was set with setWriter.

@return The character stream that was set with setWriter, or null
if setWriter or the Writer constructor was not called."
      end

      operation 1936411 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the systemID that may be used in association
with the byte or character stream, or, if neither is set, use
this value as a writeable URI (probably a file name).

@param systemId The system identifier as a URI string."
      end

      operation 1936539 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "f" type class_ref 135579 // File
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set the system ID from a <code>File</code> reference.</p>

<p>Note the use of {@link File#toURI()} and {@link File#toURL()}.
<code>toURI()</code> is preferred and used if possible.
To allow JAXP 1.3 to run on J2SE 1.3, <code>toURL()</code>
is used if a {@link NoSuchMethodException} is thrown by the attempt
to use <code>toURI()</code>.</p>

@param f Must a non-null File reference."
      end

      operation 1936667 "getSystemId"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the system identifier that was set with setSystemId.

@return The system identifier that was set with setSystemId, or null
if setSystemId was not called."
      end

      classrelation 548251 // systemId (<unidirectional association>)
	relation 548251 --->
	  a role_name "systemId" private
	    comment "////////////////////////////////////////////////////////////////////
 Internal state.
////////////////////////////////////////////////////////////////////

The systemID that may be used in association
with the byte or character stream, or, if neither is set, use
this value as a writeable URI (probably a file name).

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 548251 // systemId (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 548379 // outputStream (<unidirectional association>)
	relation 548379 --->
	  a role_name "outputStream" private
	    comment "
The byte stream that is to be written to.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 548379 // outputStream (<unidirectional association>)
	  b parent class_ref 132635 // OutputStream
      end

      classrelation 548507 // writer (<unidirectional association>)
	relation 548507 --->
	  a role_name "writer" private
	    comment "
The character stream that is to be written to.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 548507 // writer (<unidirectional association>)
	  b parent class_ref 133531 // Writer
      end
    end

    class 309019 "StreamSource"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Acts as an holder for a transformation Source in the form
of a stream of XML markup.</p>

<p><em>Note:</em> Due to their internal use of either a {@link Reader} or {@link InputStream} instance,
<code>StreamSource</code> instances may only be used once.</p>

@author <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>
@version $Revision: 829971 $, $Date: 2009-10-26 14:15:39 -0700 (Mon, 26 Oct 2009) $"
      classrelation 548635 // <realization>
	relation 548635 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 548635 // <realization>
	  b parent class_ref 305947 // Source
      end

      classrelation 548763 // FEATURE (<unidirectional association>)
	relation 548763 --->
	  a role_name "FEATURE" init_value "
        \"http://javax.xml.transform.stream.StreamSource/feature\"" class_relation const_relation public
	    comment " If {@link javax.xml.transform.TransformerFactory#getFeature}
returns true when passed this value as an argument,
the Transformer supports Source input of this type.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 548763 // FEATURE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1936795 "StreamSource"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Zero-argument default constructor.  If this constructor is used, and
no Stream source is set using
{@link #setInputStream(java.io.InputStream inputStream)} or
{@link #setReader(java.io.Reader reader)}, then the
<code>Transformer</code> will
create an empty source {@link java.io.InputStream} using
{@link java.io.InputStream#InputStream() new InputStream()}.</p>

@see javax.xml.transform.Transformer#transform(Source xmlSource, Result outputTarget)"
      end

      operation 1936923 "StreamSource"
	public explicit_return_type ""
	nparams 1
	  param inout name "inputStream" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamSource from a byte stream.  Normally,
a stream should be used rather than a reader, so
the XML parser can resolve character encoding specified
by the XML declaration.

<p>If this constructor is used to process a stylesheet, normally
setSystemId should also be called, so that relative URI references
can be resolved.</p>

@param inputStream A valid InputStream reference to an XML stream."
      end

      operation 1937051 "StreamSource"
	public explicit_return_type ""
	nparams 2
	  param inout name "inputStream" type class_ref 131867 // InputStream
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamSource from a byte stream.  Normally,
a stream should be used rather than a reader, so that
the XML parser can resolve character encoding specified
by the XML declaration.

<p>This constructor allows the systemID to be set in addition
to the input stream, which allows relative URIs
to be processed.</p>

@param inputStream A valid InputStream reference to an XML stream.
@param systemId Must be a String that conforms to the URI syntax."
      end

      operation 1937179 "StreamSource"
	public explicit_return_type ""
	nparams 1
	  param inout name "reader" type class_ref 133019 // Reader
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamSource from a character reader.  Normally,
a stream should be used rather than a reader, so that
the XML parser can resolve character encoding specified
by the XML declaration.  However, in many cases the encoding
of the input stream is already resolved, as in the case of
reading XML from a StringReader.

@param reader A valid Reader reference to an XML character stream."
      end

      operation 1937307 "StreamSource"
	public explicit_return_type ""
	nparams 2
	  param inout name "reader" type class_ref 133019 // Reader
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamSource from a character reader.  Normally,
a stream should be used rather than a reader, so that
the XML parser may resolve character encoding specified
by the XML declaration.  However, in many cases the encoding
of the input stream is already resolved, as in the case of
reading XML from a StringReader.

@param reader A valid Reader reference to an XML character stream.
@param systemId Must be a String that conforms to the URI syntax."
      end

      operation 1937435 "StreamSource"
	public explicit_return_type ""
	nparams 1
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamSource from a URL.

@param systemId Must be a String that conforms to the URI syntax."
      end

      operation 1937563 "StreamSource"
	public explicit_return_type ""
	nparams 1
	  param inout name "f" type class_ref 135579 // File
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a StreamSource from a File.

@param f Must a non-null File reference."
      end

      operation 1937691 "setInputStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inputStream" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the byte stream to be used as input.  Normally,
a stream should be used rather than a reader, so that
the XML parser can resolve character encoding specified
by the XML declaration.

<p>If this Source object is used to process a stylesheet, normally
setSystemId should also be called, so that relative URL references
can be resolved.</p>

@param inputStream A valid InputStream reference to an XML stream."
      end

      operation 1937819 "getInputStream"
	public return_type class_ref 131867 // InputStream
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the byte stream that was set with setByteStream.

@return The byte stream that was set with setByteStream, or null
if setByteStream or the ByteStream constructor was not called."
      end

      operation 1937947 "setReader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reader" type class_ref 133019 // Reader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the input to be a character reader.  Normally,
a stream should be used rather than a reader, so that
the XML parser can resolve character encoding specified
by the XML declaration.  However, in many cases the encoding
of the input stream is already resolved, as in the case of
reading XML from a StringReader.

@param reader A valid Reader reference to an XML CharacterStream."
      end

      operation 1938075 "getReader"
	public return_type class_ref 133019 // Reader
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the character stream that was set with setReader.

@return The character stream that was set with setReader, or null
if setReader or the Reader constructor was not called."
      end

      operation 1938203 "setPublicId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "publicId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the public identifier for this Source.

<p>The public identifier is always optional: if the application
writer includes one, it will be provided as part of the
location information.</p>

@param publicId The public identifier as a string."
      end

      operation 1938331 "getPublicId"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the public identifier that was set with setPublicId.

@return The public identifier that was set with setPublicId, or null
if setPublicId was not called."
      end

      operation 1938459 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the system identifier for this Source.

<p>The system identifier is optional if there is a byte stream
or a character stream, but it is still useful to provide one,
since the application can use it to resolve relative URIs
and can include it in error messages and warnings (the parser
will attempt to open a connection to the URI only if
there is no byte stream or character stream specified).</p>

@param systemId The system identifier as a URL string."
      end

      operation 1938587 "getSystemId"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the system identifier that was set with setSystemId.

@return The system identifier that was set with setSystemId, or null
if setSystemId was not called."
      end

      operation 1938715 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "f" type class_ref 135579 // File
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the system ID from a File reference.

@param f Must a non-null File reference."
      end

      classrelation 548891 // publicId (<unidirectional association>)
	relation 548891 --->
	  a role_name "publicId" private
	    comment "////////////////////////////////////////////////////////////////////
 Internal state.
////////////////////////////////////////////////////////////////////

The public identifier for this input source, or null.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 548891 // publicId (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 549019 // systemId (<unidirectional association>)
	relation 549019 --->
	  a role_name "systemId" private
	    comment "
The system identifier as a URL string, or null.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 549019 // systemId (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 549147 // inputStream (<unidirectional association>)
	relation 549147 --->
	  a role_name "inputStream" private
	    comment "
The byte stream for this Source, or null.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 549147 // inputStream (<unidirectional association>)
	  b parent class_ref 131867 // InputStream
      end

      classrelation 549275 // reader (<unidirectional association>)
	relation 549275 --->
	  a role_name "reader" private
	    comment "
The character stream for this Source, or null.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 549275 // reader (<unidirectional association>)
	  b parent class_ref 133019 // Reader
      end
    end
  end

  deploymentview 134939 "stream"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 262171 "FilePathToURI"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 308763 // FilePathToURI
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 262299 "StreamResult"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.OutputStream;
import java.io.Writer;
import javax.xml.transform.Result;
${definition}"
      associated_classes
	class_ref 308891 // StreamResult
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: StreamResult.java 829970 2009-10-26 21:15:29Z mrglavas $"
    end

    artifact 262427 "StreamSource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.InputStream;
import java.io.Reader;
import javax.xml.transform.Source;
${definition}"
      associated_classes
	class_ref 309019 // StreamSource
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: StreamSource.java 829971 2009-10-26 21:15:39Z mrglavas $"
    end
  end
end
