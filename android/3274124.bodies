class LoadLineupListTask
!!!14207628.java!!!	LoadLineupListTask(inout context : Context, in preferredOperatorId : String, inout filter : LineupFilter, inout includeChannelInfo : boolean, inout includeAssociatedLineups : boolean)
        mContext = context;
        mPreferredOperatorId = preferredOperatorId;
        mFilter = filter;
        mIncludeChannelInfo = includeChannelInfo;
        mIncludeAssociatedLineups = includeAssociatedLineups;
!!!14207756.java!!!	setUnpreferredLineupId(in unpreferredLineupId : String) : void
        mUnpreferredLineupId = unpreferredLineupId;
!!!14207884.java!!!	doInBackground(inout  : String...params) : Lineup
        if (params.length != 1) {
            return null;
        }

        LineupServiceConnection serviceConnection =
                new LineupServiceConnection(mContext);
        serviceConnection.connect();
        if (!serviceConnection.waitForConnection()) {
            // Connection timed out.
            Log.w(LOG_TAG, "connection timed out");
            return null;
        }

        List<Lineup> results = null;
        try {
            results = serviceConnection.getBoundService().getLineups(
                    params[0], mIncludeChannelInfo);
        } catch (RemoteException re) {
            Log.w(LOG_TAG, "Failed to get lineups", re);
        }
        serviceConnection.disconnect();

        if (results == null) {
            Log.w(LOG_TAG, "results null");
            return null;
        }

        List<Lineup> lineups = new ArrayList<Lineup>();

        for (Lineup lineup : results) {
            if (mPreferredOperatorId != null) {
                String operatorId = lineup.getOperatorId();
                if ((operatorId != null)
                        && (operatorId.equals(mPreferredOperatorId))) {
                    lineup.setPreferred(true);
                }
            }
            if ((mFilter != null) && !mFilter.matches(lineup)) {
                Log.d(LOG_TAG, "lineup id=" + lineup.getLineupId()
                        + ", type=" + lineup.getLineupType()
                        + " rejected by filter");
                // Rejected by filter.
                continue;
            }

            lineups.add(lineup);

            if (mIncludeAssociatedLineups) {
                if (lineup.hasTier(TmsChannelTier.EXTENDED)) {
                    Lineup lineupWithoutExtended = new Lineup(lineup);
                    lineupWithoutExtended.setTierEnabled(TmsChannelTier.EXTENDED, false);
                    lineups.add(lineupWithoutExtended);
                }
            }
        }

        // Iterate through the candidates. If there is a lineup that isn't
        // the unpreferred lineup, use that. If after going through all the
        // options, we don't see any other than unpreferred, will just
        // return the original set, which will include the unpreferred
        // lineup.
        if (mUnpreferredLineupId != null) {
            for (Lineup lineup : lineups) {
                String lineupId = lineup.getLineupId();
                if ((lineupId != null) && !lineupId.equals(mUnpreferredLineupId)) {
                    lineups.clear();
                    lineups.add(lineup);
                    break;
                }
            }
        }

        Collections.sort(lineups);
        return lineups;
