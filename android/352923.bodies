class PinListEntry
!!!2483099.java!!!	getCommonName() : String
        return cn;
!!!2483227.java!!!	getEnforcing() : boolean
        return enforcing;
!!!2483355.java!!!	PinListEntry(inout entry : String, inout store : TrustedCertificateStore)
        if (entry == null) {
            throw new NullPointerException("entry == null");
        }
        certStore = store;
        // Examples:
        // *.google.com=true|34c8a0d...9e04ca05f,9e04ca05f...34c8a0d
        // *.android.com=true|ca05f...8a0d34c
        // clients.google.com=false|9e04ca05f...34c8a0d,34c8a0d...9e04ca05f
        String[] values = entry.split("[=,|]");
        // entry must have a CN, an enforcement value, and at least one pin
        if (values.length < 3) {
            throw new PinEntryException("Received malformed pin entry");
        }
        // get the cn
        cn = values[0];        // is there more validation we can do here?
        enforcing = enforcementValueFromString(values[1]);
        // the remainder should be pins
        addPins(Arrays.copyOfRange(values, 2, values.length));
!!!2483483.java!!!	enforcementValueFromString(inout val : String) : boolean
        if (val.equals("true")) {
            return true;
        } else if (val.equals("false")) {
            return false;
        } else {
            throw new PinEntryException("Enforcement status is not a valid value");
        }
!!!2483611.java!!!	chainIsNotPinned(inout chain : List) : boolean
        for (X509Certificate cert : chain) {
            String fingerprint = getFingerprint(cert);
            if (pinnedFingerprints.contains(fingerprint)) {
                return false;
            }
        }
        logPinFailure(chain);
        return enforcing;
!!!2483739.java!!!	getFingerprint(inout cert : X509Certificate) : String
        try {
            MessageDigest dgst = MessageDigest.getInstance("SHA512");
            byte[] encoded = cert.getPublicKey().getEncoded();
            byte[] fingerprint = dgst.digest(encoded);
            return IntegralToString.bytesToHexString(fingerprint, false);
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError(e);
        }
!!!2483867.java!!!	addPins(inout pins : String) : void
        for (String pin : pins) {
            validatePin(pin);
        }
        Collections.addAll(pinnedFingerprints, pins);
!!!2483995.java!!!	validatePin(inout pin : String) : void
        // check to make sure the length is correct
        if (pin.length() != 128) {
            throw new IllegalArgumentException("Pin is not a valid length");
        }
        // check to make sure that it's a valid hex string
        try {
            new BigInteger(pin, 16);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Pin is not a valid hex string", e);
        }
!!!2484123.java!!!	chainContainsUserCert(inout chain : List) : boolean
        if (certStore == null) {
            return false;
        }
        for (X509Certificate cert : chain) {
            if (certStore.isUserAddedCertificate(cert)) {
                return true;
            }
        }
        return false;
!!!2484251.java!!!	logPinFailure(inout chain : List) : void
        PinFailureLogger.log(cn, chainContainsUserCert(chain), enforcing, chain);
