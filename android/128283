format 74
"text" // _unknown::java::text
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/text/"
  java_package "java.text"
  classview 128283 "text"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 129051 "AttributedCharacterIterator"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Extends the
{@link CharacterIterator} interface, adding support for iterating over
attributes and not only characters. An
{@code AttributedCharacterIterator} also allows the user to find runs and
their limits. Runs are defined as ranges of characters that all have the same
attributes with the same values."
      class 129179 "Attribute"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 128795 // <realization>
	  relation 128795 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 128795 // <realization>
	    b parent class_ref 128155 // Serializable
	end

	attribute 134555 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -9142742483513960612L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 128923 // INPUT_METHOD_SEGMENT (<unidirectional association>)
	  relation 128923 --->
	    a role_name "INPUT_METHOD_SEGMENT" init_value " new Attribute(\"input_method_segment\")" class_relation const_relation public
	      comment "
This attribute marks segments from an input method. Most input
methods create these segments for words.

The value objects are of the type {@code Annotation} which contain
{@code null}.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 128923 // INPUT_METHOD_SEGMENT (<unidirectional association>)
	    b parent class_ref 129179 // Attribute
	end

	classrelation 129051 // LANGUAGE (<unidirectional association>)
	  relation 129051 --->
	    a role_name "LANGUAGE" init_value " new Attribute(\"language\")" class_relation const_relation public
	      comment "
The attribute describing the language of a character. The value
objects are of type {@code Locale} or a subtype of it.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 129051 // LANGUAGE (<unidirectional association>)
	    b parent class_ref 129179 // Attribute
	end

	classrelation 129179 // READING (<unidirectional association>)
	  relation 129179 --->
	    a role_name "READING" init_value " new Attribute(\"reading\")" class_relation const_relation public
	      comment "
For languages that have different reading directions of text (like
Japanese), this attribute allows to define which reading should be
used. The value objects are of type {@code Annotation} which
contain a {@code String}.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 129179 // READING (<unidirectional association>)
	    b parent class_ref 129179 // Attribute
	end

	classrelation 129307 // name (<unidirectional association>)
	  relation 129307 --->
	    a role_name "name" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 129307 // name (<unidirectional association>)
	    b parent class_ref 3399692 // String
	end

	operation 132123 "Attribute"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "name" type class_ref 3399692 // String
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "The constructor for an {@code Attribute} with the name passed.

@param name
           the name of the new {@code Attribute}."
	end

	operation 132251 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "object" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Compares this attribute with the specified object. Checks if both
objects are the same instance. It is defined final so all subclasses
have the same behavior for this method.

@param object
           the object to compare against.
@return {@code true} if the object passed is equal to this instance;
        {@code false} otherwise."
	end

	operation 132379 "getName"
	  protected return_type class_ref 3399692 // String
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the name of this attribute.

@return the name of this attribute."
	end

	operation 132507 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Calculates the hash code for objects of type {@code Attribute}. It
is defined final so all sub types calculate their hash code
identically.

@return the hash code for this instance of {@code Attribute}."
	end

	operation 132635 "readResolve"
	  protected return_type class_ref 3401484 // Object
	  nparams 0
	  nexceptions 1
	    exception class_ref 129563 // InvalidObjectException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resolves a deserialized instance to the correct constant attribute.

@return the {@code Attribute} this instance represents.
@throws InvalidObjectException
            if this instance is not of type {@code Attribute.class}
            or if it is not a known {@code Attribute}."
	end

	operation 132763 "toString"
	  public return_type class_ref 3399692 // String
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Returns the name of the class followed by a \"(\", the name of the
attribute, and a \")\".

@return the string representing this instance."
	end
      end

      classrelation 128667 // <generalisation>
	relation 128667 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 128667 // <generalisation>
	  b parent class_ref 129307 // CharacterIterator
      end

      operation 132891 "getAllAttributeKeys"
	public return_type class_ref 129691 // Set
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a set of attributes present in the {@code
AttributedCharacterIterator}. An empty set is returned if no attributes
were defined.

@return a set of attribute keys; may be empty."
      end

      operation 133019 "getAttribute"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "attribute" type class_ref 129179 // Attribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value stored in the attribute for the current character. If
the attribute was not defined then {@code null} is returned.

@param attribute the attribute for which the value should be returned.
@return the value of the requested attribute for the current character or
        {@code null} if it was not defined."
      end

      operation 133147 "getAttributes"
	public return_type class_ref 129819 // Map
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute, Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map of all attributes of the current character. If no
attributes were defined for the current character then an empty map is
returned.

@return a map of all attributes for the current character or an empty
        map."
      end

      operation 133275 "getRunLimit"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the last character in the run having the same
attributes as the current character.

@return the index of the last character of the current run."
      end

      operation 133403 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attribute" type class_ref 129179 // Attribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the last character in the run that has the same
attribute value for the given attribute as the current character.

@param attribute
           the attribute which the run is based on.
@return the index of the last character of the current run."
      end

      operation 133531 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attributes" type class_ref 129691 // Set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the last character in the run that has the same
attribute values for the attributes in the set as the current character.

@param attributes
           the set of attributes which the run is based on.
@return the index of the last character of the current run."
      end

      operation 133659 "getRunStart"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character in the run that has the same
attributes as the current character.

@return the index of the last character of the current run."
      end

      operation 133787 "getRunStart"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attribute" type class_ref 129179 // Attribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character in the run that has the same
attribute value for the given attribute as the current character.

@param attribute
           the attribute which the run is based on.
@return the index of the last character of the current run."
      end

      operation 133915 "getRunStart"
	public explicit_return_type "int"
	nparams 1
	  param inout name "attributes" type class_ref 129691 // Set
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character in the run that has the same
attribute values for the attributes in the set as the current character.

@param attributes
           the set of attributes which the run is based on.
@return the index of the last character of the current run."
      end
    end

    class 129307 "CharacterIterator"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface for the bidirectional iteration over a group of characters. The
iteration starts at the begin index in the group of characters and continues
to one index before the end index."
      classrelation 128539 // <generalisation>
	relation 128539 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 128539 // <generalisation>
	  b parent class_ref 129435 // Cloneable
      end

      attribute 134427 "DONE"
	class_attribute const_attribute public explicit_type "char"
	init_value " '\\uffff'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant which indicates that there is no character at the current
index.
"
      end

      operation 130843 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code CharacterIterator} with the same properties.

@return a shallow copy of this character iterator.

@see java.lang.Cloneable"
      end

      operation 130971 "current"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character at the current index.

@return the current character, or {@code DONE} if the current index is
        past the beginning or end of the sequence."
      end

      operation 131099 "first"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current position to the begin index and returns the character at
the new position.

@return the character at the begin index."
      end

      operation 131227 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the begin index.

@return the index of the first character of the iteration."
      end

      operation 131355 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the end index.

@return the index one past the last character of the iteration."
      end

      operation 131483 "getIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current index.

@return the current index."
      end

      operation 131611 "last"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current position to the end index - 1 and returns the character
at the new position.

@return the character before the end index."
      end

      operation 131739 "next"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increments the current index and returns the character at the new index.

@return the character at the next index, or {@code DONE} if the next
        index would be past the end."
      end

      operation 131867 "previous"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the current index and returns the character at the new index.

@return the character at the previous index, or {@code DONE} if the
        previous index would be past the beginning."
      end

      operation 131995 "setIndex"
	public explicit_return_type "char"
	nparams 1
	  param in name "location" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current index to a new position and returns the character at the
new index.

@param location
           the new index that this character iterator is set to.
@return the character at the new index, or {@code DONE} if the index is
        past the end.
@throws IllegalArgumentException
        if {@code location} is less than the begin index or greater than
        the end index."
      end
    end

    class 226331 "Annotation"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wrapper for a text attribute value which represents an annotation. An
annotation has two special aspects:
<ol>
<li>it is connected to a range of main text; if this range or the main text
is changed then the annotation becomes invalid,</li>
<li>it can not be joined with adjacent annotations even if the text attribute
value is the same.</li>
</ol>
<p>
By wrapping text attribute values into an {@code Annotation}, these aspects
will be taken into account when handling annotation text and the
corresponding main text.
<p>
Note: There is no semantic connection between this annotation class and the
{@code java.lang.annotation} package."
      classrelation 339227 // value (<unidirectional association>)
	relation 339227 --->
	  a role_name "value" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 339227 // value (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      operation 1090459 "Annotation"
	public explicit_return_type ""
	nparams 1
	  param inout name "attribute" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Annotation}.

@param attribute the attribute attached to this annotation. This may be
       {@code null}."
      end

      operation 1090587 "getValue"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this annotation. The value may be {@code null}.

@return the value of this annotation or {@code null}."
      end

      operation 1090715 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this annotation in string representation.

@return the string representation of this annotation."
      end
    end

    class 226459 "AttributedString"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Holds a string with attributes describing the characters of
this string."
      classrelation 339355 // text (<unidirectional association>)
	relation 339355 --->
	  a role_name "text" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 339355 // text (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 339483 // attributeMap (<unidirectional association>)
	relation 339483 --->
	  a role_name "attributeMap" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AttributedCharacterIterator.Attribute, List<Range>> ${name}${value};
"
	    classrelation_ref 339483 // attributeMap (<unidirectional association>)
	  b parent class_ref 129819 // Map
      end

      class 226587 "Range"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 287771 "start"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 287899 "end"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 339611 // value (<unidirectional association>)
	  relation 339611 --->
	    a role_name "value" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 339611 // value (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	operation 1090843 "Range"
	  package explicit_return_type ""
	  nparams 3
	    param in name "s" explicit_type "int"
	    param in name "e" explicit_type "int"
	    param inout name "v" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 226715 "AttributedIterator"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 339739 // <realization>
	  relation 339739 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 339739 // <realization>
	    b parent class_ref 129051 // AttributedCharacterIterator
	end

	attribute 288027 "begin"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 288155 "end"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 288283 "offset"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 339867 // attrString (<unidirectional association>)
	  relation 339867 --->
	    a role_name "attrString" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 339867 // attrString (<unidirectional association>)
	    b parent class_ref 226459 // AttributedString
	end

	classrelation 339995 // attributesAllowed (<unidirectional association>)
	  relation 339995 --->
	    a role_name "attributesAllowed" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Attribute> ${name}${value};
"
	      classrelation_ref 339995 // attributesAllowed (<unidirectional association>)
	    b parent class_ref 192411 // HashSet
	end

	operation 1090971 "AttributedIterator"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "attrString" type class_ref 226459 // AttributedString
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1091099 "AttributedIterator"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "attrString" type class_ref 226459 // AttributedString
	    param inout name "attributes" type class_ref 129179 // Attribute
	    param in name "begin" explicit_type "int"
	    param in name "end" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1091227 "clone"
	  public return_type class_ref 3401484 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
        @SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	  comment "Returns a new {@code AttributedIterator} with the same source string,
begin, end, and current index as this attributed iterator.

@return a shallow copy of this attributed iterator.
@see java.lang.Cloneable"
	end

	operation 1091355 "current"
	  public explicit_return_type "char"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1091483 "first"
	  public explicit_return_type "char"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1091611 "getBeginIndex"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the begin index in the source string.

@return the index of the first character to iterate."
	end

	operation 1091739 "getEndIndex"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the end index in the source String.

@return the index one past the last character to iterate."
	end

	operation 1091867 "getIndex"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the current index in the source String.

@return the current index."
	end

	operation 1091995 "inRange"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "range" type class_ref 226587 // Range
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1092123 "inRange"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "ranges" type class_ref 131483 // List
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Range> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1092251 "getAllAttributeKeys"
	  public return_type class_ref 129691 // Set
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<AttributedIterator.Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a set of attributes present in the {@code AttributedString}.
An empty set returned indicates that no attributes where defined.

@return a set of attribute keys that may be empty."
	end

	operation 1092379 "currentValue"
	  private return_type class_ref 3401484 // Object
	  nparams 1
	    param inout name "ranges" type class_ref 131483 // List
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Range> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1092507 "getAttribute"
	  public return_type class_ref 3401484 // Object
	  nparams 1
	    param inout name "attribute" type class_ref 129179 // Attribute
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1092635 "getAttributes"
	  public return_type class_ref 129819 // Map
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute, Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1092763 "getRunLimit"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1092891 "runLimit"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "ranges" type class_ref 131483 // List
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Range> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1093019 "getRunLimit"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attribute" type class_ref 129179 // Attribute
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1093147 "getRunLimit"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attributes" type class_ref 129691 // Set
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1093275 "getRunStart"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1093403 "runStart"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "ranges" type class_ref 131483 // List
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Range> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1093531 "getRunStart"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attribute" type class_ref 129179 // Attribute
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1093659 "getRunStart"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "attributes" type class_ref 129691 // Set
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1093787 "last"
	  public explicit_return_type "char"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1093915 "next"
	  public explicit_return_type "char"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1094043 "previous"
	  public explicit_return_type "char"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1094171 "setIndex"
	  public explicit_return_type "char"
	  nparams 1
	    param in name "location" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1094299 "AttributedString"
	public explicit_return_type ""
	nparams 1
	  param inout name "iterator" type class_ref 129051 // AttributedCharacterIterator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code AttributedString} from an {@code
AttributedCharacterIterator}, which represents attributed text.

@param iterator
           the {@code AttributedCharacterIterator} that contains the text
           for this attributed string."
      end

      operation 1094427 "AttributedString"
	private explicit_return_type ""
	nparams 4
	  param inout name "iterator" type class_ref 129051 // AttributedCharacterIterator
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param inout name "attributes" type class_ref 129691 // Set
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<Attribute> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1094555 "AttributedString"
	public explicit_return_type ""
	nparams 3
	  param inout name "iterator" type class_ref 129051 // AttributedCharacterIterator
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code AttributedString} from a range of the text contained
in the specified {@code AttributedCharacterIterator}, starting at {@code
start} and ending at {@code end}. All attributes will be copied to this
attributed string.

@param iterator
           the {@code AttributedCharacterIterator} that contains the text
           for this attributed string.
@param start
           the start index of the range of the copied text.
@param end
           the end index of the range of the copied text.
@throws IllegalArgumentException
            if {@code start} is less than first index of
            {@code iterator}, {@code end} is greater than the last
            index + 1 in {@code iterator} or if {@code start > end}."
      end

      operation 1094683 "AttributedString"
	public explicit_return_type ""
	nparams 4
	  param inout name "iterator" type class_ref 129051 // AttributedCharacterIterator
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param inout name "attributes" type class_ref 129179 // Attribute
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code AttributedString} from a range of the text contained
in the specified {@code AttributedCharacterIterator}, starting at {@code
start}, ending at {@code end} and it will copy the attributes defined in
the specified set. If the set is {@code null} then all attributes are
copied.

@param iterator
           the {@code AttributedCharacterIterator} that contains the text
           for this attributed string.
@param start
           the start index of the range of the copied text.
@param end
           the end index of the range of the copied text.
@param attributes
           the set of attributes that will be copied, or all if it is
           {@code null}.
@throws IllegalArgumentException
            if {@code start} is less than first index of
            {@code iterator}, {@code end} is greater than the last index +
            1 in {@code iterator} or if {@code start > end}."
      end

      operation 1094811 "AttributedString"
	public explicit_return_type ""
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code AttributedString} from the given text.

@param value
           the text to take as base for this attributed string."
      end

      operation 1094939 "AttributedString"
	public explicit_return_type ""
	nparams 2
	  param inout name "value" type class_ref 3399692 // String
	  param inout name "attributes" type class_ref 129819 // Map
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? extends AttributedCharacterIterator.Attribute, ?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code AttributedString} from the given text and the
attributes. The whole text has the given attributes applied.

@param value
           the text to take as base for this attributed string.
@param attributes
           the attributes that the text is associated with.
@throws IllegalArgumentException
            if the length of {@code value} is 0 but the size of {@code
            attributes} is greater than 0.
@throws NullPointerException
            if {@code value} is {@code null}."
      end

      operation 1095067 "addAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "attribute" type class_ref 129179 // Attribute
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a given attribute to this string.

@param attribute
           the attribute that will be applied to this string.
@param value
           the value of the attribute that will be applied to this
           string.
@throws IllegalArgumentException
            if the length of this attributed string is 0.
@throws NullPointerException
            if {@code attribute} is {@code null}."
      end

      operation 1095195 "addAttribute"
	public explicit_return_type "void"
	nparams 4
	  param inout name "attribute" type class_ref 129179 // Attribute
	  param inout name "value" type class_ref 3401484 // Object
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a given attribute to the given range of this string.

@param attribute
           the attribute that will be applied to this string.
@param value
           the value of the attribute that will be applied to this
           string.
@param start
           the start of the range where the attribute will be applied.
@param end
           the end of the range where the attribute will be applied.
@throws IllegalArgumentException
            if {@code start < 0}, {@code end} is greater than the length
            of this string, or if {@code start >= end}.
@throws NullPointerException
            if {@code attribute} is {@code null}."
      end

      operation 1095323 "addAttributes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "attributes" type class_ref 129819 // Map
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends AttributedCharacterIterator.Attribute, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a given set of attributes to the given range of the string.

@param attributes
           the set of attributes that will be applied to this string.
@param start
           the start of the range where the attribute will be applied.
@param end
           the end of the range where the attribute will be applied.
@throws IllegalArgumentException
            if {@code start < 0}, {@code end} is greater than the length
            of this string, or if {@code start >= end}."
      end

      operation 1095451 "getIterator"
	public return_type class_ref 129051 // AttributedCharacterIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code AttributedCharacterIterator} that gives access to the
complete content of this attributed string.

@return the newly created {@code AttributedCharacterIterator}."
      end

      operation 1095579 "getIterator"
	public return_type class_ref 129051 // AttributedCharacterIterator
	nparams 1
	  param inout name "attributes" type class_ref 129179 // Attribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code AttributedCharacterIterator} that gives access to the
complete content of this attributed string. Only attributes contained in
{@code attributes} are available from this iterator if they are defined
for this text.

@param attributes
           the array containing attributes that will be in the new
           iterator if they are defined for this text.
@return the newly created {@code AttributedCharacterIterator}."
      end

      operation 1095707 "getIterator"
	public return_type class_ref 129051 // AttributedCharacterIterator
	nparams 3
	  param inout name "attributes" type class_ref 129179 // Attribute
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code AttributedCharacterIterator} that gives access to the
contents of this attributed string starting at index {@code start} up to
index {@code end}. Only attributes contained in {@code attributes} are
available from this iterator if they are defined for this text.

@param attributes
           the array containing attributes that will be in the new
           iterator if they are defined for this text.
@param start
           the start index of the iterator on the underlying text.
@param end
           the end index of the iterator on the underlying text.
@return the newly created {@code AttributedCharacterIterator}."
      end
    end

    class 226843 "Bidi"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Implements the <a href=\"http://unicode.org/reports/tr9/\">Unicode Bidirectional Algorithm</a>.

<p>Use a {@code Bidi} object to get the information on the position reordering of a
bidirectional text, such as Arabic or Hebrew. The natural display ordering of
horizontal text in these languages is from right to left, while they order
numbers from left to right.

<p>If the text contains multiple runs, the information of each run can be
obtained from the run index. The level of any particular run indicates the
direction of the text as well as the nesting level. Left-to-right runs have
even levels while right-to-left runs have odd levels."
      attribute 288411 "DIRECTION_DEFAULT_LEFT_TO_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that indicates the default base level. If there is no strong
character, then set the paragraph level to 0 (left-to-right).
"
      end

      attribute 288539 "DIRECTION_DEFAULT_RIGHT_TO_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that indicates the default base level. If there is no strong
character, then set the paragraph level to 1 (right-to-left).
"
      end

      attribute 288667 "DIRECTION_LEFT_TO_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that specifies the default base level as 0 (left-to-right).
"
      end

      attribute 288795 "DIRECTION_RIGHT_TO_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that specifies the default base level as 1 (right-to-left).
"
      end

      class 226971 "Run"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 288923 "start"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 289051 "limit"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 289179 "level"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1095835 "Run"
	  public explicit_return_type ""
	  nparams 3
	    param in name "start" explicit_type "int"
	    param in name "limit" explicit_type "int"
	    param in name "level" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1095963 "getLevel"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1096091 "getLimit"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1096219 "getStart"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1096347 "Bidi"
	public explicit_return_type ""
	nparams 1
	  param inout name "paragraph" type class_ref 129051 // AttributedCharacterIterator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Bidi} object from the {@code
AttributedCharacterIterator} of a paragraph text. The RUN_DIRECTION
attribute determines the base direction of the bidirectional text. If it
is not specified explicitly, the algorithm uses
DIRECTION_DEFAULT_LEFT_TO_RIGHT by default. The BIDI_EMBEDDING attribute
specifies the level of embedding for each character. Values between -1
and -62 denote overrides at the level's absolute value, values from 1 to
62 indicate embeddings, and the 0 value indicates the level is calculated
by the algorithm automatically. For the character with no BIDI_EMBEDDING
attribute or with a improper attribute value, such as a {@code null}
value, the algorithm treats its embedding level as 0. The NUMERIC_SHAPING
attribute specifies the instance of NumericShaper used to convert
European digits to other decimal digits before performing the bidi
algorithm.

@param paragraph
           the String containing the paragraph text to perform the
           algorithm.
@throws IllegalArgumentException if {@code paragraph == null}
@see java.awt.font.TextAttribute#BIDI_EMBEDDING
@see java.awt.font.TextAttribute#NUMERIC_SHAPING
@see java.awt.font.TextAttribute#RUN_DIRECTION"
      end

      operation 1096475 "Bidi"
	public explicit_return_type ""
	nparams 6
	  param inout name "text" explicit_type "char"
	  param in name "textStart" explicit_type "int"
	  param inout name "embeddings" explicit_type "byte"
	  param in name "embStart" explicit_type "int"
	  param in name "paragraphLength" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Bidi} object.

@param text
           the char array of the paragraph text that is processed.
@param textStart
           the index in {@code text} of the start of the paragraph.
@param embeddings
           the embedding level array of the paragraph text, specifying
           the embedding level information for each character. Values
           between -1 and -61 denote overrides at the level's absolute
           value, values from 1 to 61 indicate embeddings, and the 0
           value indicates the level is calculated by the algorithm
           automatically.
@param embStart
           the index in {@code embeddings} of the start of the paragraph.
@param paragraphLength
           the length of the text to perform the algorithm.
@param flags
           indicates the base direction of the bidirectional text. It is
           expected that this will be one of the direction constant
           values defined in this class. An unknown value is treated as
           DIRECTION_DEFAULT_LEFT_TO_RIGHT.
@throws IllegalArgumentException
            if {@code textStart}, {@code embStart}, or {@code
            paragraphLength} is negative; if
            {@code text.length < textStart + paragraphLength} or
            {@code embeddings.length < embStart + paragraphLength}.
@see #DIRECTION_LEFT_TO_RIGHT
@see #DIRECTION_RIGHT_TO_LEFT
@see #DIRECTION_DEFAULT_RIGHT_TO_LEFT
@see #DIRECTION_DEFAULT_LEFT_TO_RIGHT"
      end

      operation 1096603 "Bidi"
	public explicit_return_type ""
	nparams 2
	  param inout name "paragraph" type class_ref 3399692 // String
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Bidi} object.

@param paragraph
           the string containing the paragraph text to perform the
           algorithm on.
@param flags
           indicates the base direction of the bidirectional text. It is
           expected that this will be one of the direction constant
           values defined in this class. An unknown value is treated as
           DIRECTION_DEFAULT_LEFT_TO_RIGHT.
@see #DIRECTION_LEFT_TO_RIGHT
@see #DIRECTION_RIGHT_TO_LEFT
@see #DIRECTION_DEFAULT_RIGHT_TO_LEFT
@see #DIRECTION_DEFAULT_LEFT_TO_RIGHT"
      end

      operation 1096731 "createUBiDi"
	class_operation private explicit_return_type "long"
	nparams 6
	  param inout name "text" explicit_type "char"
	  param in name "textStart" explicit_type "int"
	  param inout name "embeddings" explicit_type "byte"
	  param in name "embStart" explicit_type "int"
	  param in name "paragraphLength" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " create the native UBiDi struct, need to be closed with ubidi_close()."
      end

      operation 1096859 "Bidi"
	private explicit_return_type ""
	nparams 1
	  param in name "pBidi" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " private constructor used by createLineBidi() "
      end

      operation 1096987 "readBidiInfo"
	private explicit_return_type "void"
	nparams 1
	  param in name "pBidi" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " read info from the native UBiDi struct"
      end

      attribute 289307 "baseLevel"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 289435 "length"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 289563 "offsetLevel"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 340123 // runs (<unidirectional association>)
	relation 340123 --->
	  a role_name "runs" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 340123 // runs (<unidirectional association>)
	  b parent class_ref 226971 // Run
      end

      attribute 289691 "direction"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 289819 "unidirectional"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1097115 "baseIsLeftToRight"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the base level is from left to right.

@return true if the base level is from left to right."
      end

      operation 1097243 "createLineBidi"
	public return_type class_ref 226843 // Bidi
	nparams 2
	  param in name "lineStart" explicit_type "int"
	  param in name "lineLimit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code Bidi} object containing the information of one line
from this object.

@param lineStart
           the start offset of the line.
@param lineLimit
           the limit of the line.
@return the new line Bidi object. In this new object, the indices will
        range from 0 to (limit - start - 1).
@throws IllegalArgumentException
            if {@code lineStart < 0}, {@code lineLimit < 0}, {@code
            lineStart > lineLimit} or if {@code lineStart} is greater
            than the length of this object's paragraph text."
      end

      operation 1097371 "createEmptyLineBidi"
	private return_type class_ref 226843 // Bidi
	nparams 1
	  param in name "parent" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1097499 "getBaseLevel"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the base level.

@return the base level."
      end

      operation 1097627 "getLength"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the text in the {@code Bidi} object.

@return the length."
      end

      operation 1097755 "getLevelAt"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the level of a specified character.

@param offset
           the offset of the character.
@return the level."
      end

      operation 1097883 "getRunCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of runs in the bidirectional text.

@return the number of runs, at least 1."
      end

      operation 1098011 "getRunLevel"
	public explicit_return_type "int"
	nparams 1
	  param in name "run" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the level of the specified run.

@param run
           the index of the run.
@return the level of the run."
      end

      operation 1098139 "getRunLimit"
	public explicit_return_type "int"
	nparams 1
	  param in name "run" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the limit offset of the specified run.

@param run
           the index of the run.
@return the limit offset of the run."
      end

      operation 1098267 "getRunStart"
	public explicit_return_type "int"
	nparams 1
	  param in name "run" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the start offset of the specified run.

@param run
           the index of the run.
@return the start offset of the run."
      end

      operation 1098395 "isLeftToRight"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the text is from left to right, that is, both the base
direction and the text direction is from left to right.

@return {@code true} if the text is from left to right; {@code false}
        otherwise."
      end

      operation 1098523 "isMixed"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the text direction is mixed.

@return {@code true} if the text direction is mixed; {@code false}
        otherwise."
      end

      operation 1098651 "isRightToLeft"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the text is from right to left, that is, both the base
direction and the text direction is from right to left.

@return {@code true} if the text is from right to left; {@code false}
        otherwise."
      end

      operation 1098779 "reorderVisually"
	class_operation public explicit_return_type "void"
	nparams 5
	  param inout name "levels" explicit_type "byte"
	  param in name "levelStart" explicit_type "int"
	  param inout name "objects" type class_ref 3401484 // Object
	  param in name "objectStart" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reorders a range of objects according to their specified levels. This is
a convenience function that does not use a {@code Bidi} object. The range
of objects at {@code index} from {@code objectStart} to {@code
objectStart + count} will be reordered according to the range of levels
at {@code index} from {@code levelStart} to {@code levelStart + count}.

@param levels
           the level array, which is already determined.
@param levelStart
           the start offset of the range of the levels.
@param objects
           the object array to reorder.
@param objectStart
           the start offset of the range of objects.
@param count
           the count of the range of objects to reorder.
@throws IllegalArgumentException
            if {@code count}, {@code levelStart} or {@code objectStart}
            is negative; if {@code count > levels.length - levelStart} or
            if {@code count > objects.length - objectStart}."
      end

      operation 1098907 "requiresBidi"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "text" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a range of characters of a text requires a {@code Bidi}
object to display properly.

@param text
           the char array of the text.
@param start
           the start offset of the range of characters.
@param limit
           the limit offset of the range of characters.
@return {@code true} if the range of characters requires a {@code Bidi}
        object; {@code false} otherwise.
@throws IllegalArgumentException
            if {@code start} or {@code limit} is negative; {@code start >
            limit} or {@code limit} is greater than the length of this
            object's paragraph text."
      end

      operation 1099035 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      attribute 289947 "UBIDI_LEVEL_OVERRIDE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x80"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ICU4C constants."
      end

      attribute 290075 "UBiDiDirection_UBIDI_LTR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 290203 "UBiDiDirection_UBIDI_RTL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 290331 "UBiDiDirection_UBIDI_MIXED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1099163 "ubidi_open"
	class_operation private explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment " ICU4C functions."
      end

      operation 1099291 "ubidi_close"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "pBiDi" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1099419 "ubidi_setPara"
	class_operation private explicit_return_type "void"
	nparams 5
	  param in name "pBiDi" explicit_type "long"
	  param inout name "text" explicit_type "char"
	  param in name "length" explicit_type "int"
	  param in name "paraLevel" explicit_type "int"
	  param inout name "embeddingLevels" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws};
"
	
	
	
      end

      operation 1099547 "ubidi_setLine"
	class_operation private explicit_return_type "long"
	nparams 3
	  param in name "pParaBiDi" explicit_type "long"
	  param in name "start" explicit_type "int"
	  param in name "limit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
      end

      operation 1099675 "ubidi_getDirection"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "pBiDi" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}final ${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1099803 "ubidi_getLength"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "pBiDi" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}final ${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1099931 "ubidi_getParaLevel"
	class_operation private explicit_return_type "byte"
	nparams 1
	  param in name "pBiDi" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}final ${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1100059 "ubidi_getLevels"
	class_operation private explicit_return_type "byte"
	nparams 1
	  param in name "pBiDi" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1100187 "ubidi_countRuns"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "pBiDi" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1100315 "ubidi_getRuns"
	class_operation private return_type class_ref 226971 // Run
	nparams 1
	  param in name "pBidi" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1100443 "ubidi_reorderVisual"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "levels" explicit_type "byte"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end
    end

    class 227099 "BreakIterator"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Locates boundaries in text. This class defines a protocol for objects that
break up a piece of natural-language text according to a set of criteria.
Instances or subclasses of {@code BreakIterator} can be provided, for
example, to break a piece of text into words, sentences, or logical
characters according to the conventions of some language or group of
languages. We provide four built-in types of {@code BreakIterator}:
<ul>
<li>{@link #getSentenceInstance()} returns a {@code BreakIterator} that
locates boundaries between sentences. This is useful for triple-click
selection, for example.</li>
<li>{@link #getWordInstance()} returns a {@code BreakIterator} that locates
boundaries between words. This is useful for double-click selection or \"find
whole words\" searches. This type of {@code BreakIterator} makes sure there is
a boundary position at the beginning and end of each legal word (numbers
count as words, too). Whitespace and punctuation are kept separate from real
words.</li>
<li>{@code getLineInstance()} returns a {@code BreakIterator} that locates
positions where it is legal for a text editor to wrap lines. This is similar
to word breaking, but not the same: punctuation and whitespace are generally
kept with words (you don't want a line to start with whitespace, for
example), and some special characters can force a position to be considered a
line break position or prevent a position from being a line break position.</li>
<li>{@code getCharacterInstance()} returns a {@code BreakIterator} that
locates boundaries between logical characters. Because of the structure of
the Unicode encoding, a logical character may be stored internally as more
than one Unicode code point. (A with an umlaut may be stored as an a followed
by a separate combining umlaut character, for example, but the user still
thinks of it as one character.) This iterator allows various processes
(especially text editors) to treat as characters the units of text that a
user would think of as characters, rather than the units of text that the
computer sees as \"characters\".</li>
</ul> {@code BreakIterator}'s interface follows an \"iterator\" model (hence
the name), meaning it has a concept of a \"current position\" and methods like
{@code first()}, {@code last()}, {@code next()}, and {@code previous()} that
update the current position. All {@code BreakIterator}s uphold the following
invariants:
<ul>
<li>The beginning and end of the text are always treated as boundary
positions.</li>
<li>The current position of the iterator is always a boundary position
(random- access methods move the iterator to the nearest boundary position
before or after the specified position, not <i>to</i> the specified
position).</li>
<li>{@code DONE} is used as a flag to indicate when iteration has stopped.
{@code DONE} is only returned when the current position is the end of the
text and the user calls {@code next()}, or when the current position is the
beginning of the text and the user calls {@code previous()}.</li>
<li>Break positions are numbered by the positions of the characters that
follow them. Thus, under normal circumstances, the position before the first
character is 0, the position after the first character is 1, and the position
after the last character is 1 plus the length of the string.</li>
<li>The client can change the position of an iterator, or the text it
analyzes, at will, but cannot change the behavior. If the user wants
different behavior, he must instantiate a new iterator.</li>
</ul>
<p>
{@code BreakIterator} accesses the text it analyzes through a
{@link CharacterIterator}, which makes it possible to use {@code
BreakIterator} to analyze text in any text-storage vehicle that provides a
{@code CharacterIterator} interface.
<p>
<em>Note:</em> Some types of {@code BreakIterator} can take a long time to
create, and instances of {@code BreakIterator} are not currently cached by
the system. For optimal performance, keep instances of {@code BreakIterator}
around as long as it makes sense. For example, when word-wrapping a document,
don't create and destroy a new {@code BreakIterator} for each line. Create
one break iterator for the whole document (or whatever stretch of text you're
wrapping) and use it to do the whole job of wrapping the text.
<p>
<em>Examples</em>:
<p>
Creating and using text boundaries:
<blockquote>

<pre>
public static void main(String args[]) {
    if (args.length == 1) {
        String stringToExamine = args[0];
        //print each word in order
        BreakIterator boundary = BreakIterator.getWordInstance();
        boundary.setText(stringToExamine);
        printEachForward(boundary, stringToExamine);
        //print each sentence in reverse order
        boundary = BreakIterator.getSentenceInstance(Locale.US);
        boundary.setText(stringToExamine);
        printEachBackward(boundary, stringToExamine);
        printFirst(boundary, stringToExamine);
        printLast(boundary, stringToExamine);
    }
}
</pre>

</blockquote>
<p>
Print each element in order:
<blockquote>

<pre>
public static void printEachForward(BreakIterator boundary, String source) {
    int start = boundary.first();
    for (int end = boundary.next(); end != BreakIterator.DONE; start = end, end = boundary.next()) {
        System.out.println(source.substring(start, end));
    }
}
</pre>

</blockquote>
<p>
Print each element in reverse order:
<blockquote>

<pre>
public static void printEachBackward(BreakIterator boundary, String source) {
    int end = boundary.last();
    for (int start = boundary.previous(); start != BreakIterator.DONE; end = start, start = boundary
            .previous()) {
        System.out.println(source.substring(start, end));
    }
}
</pre>

</blockquote>
<p>
Print the first element:
<blockquote>

<pre>
public static void printFirst(BreakIterator boundary, String source) {
    int start = boundary.first();
    int end = boundary.next();
    System.out.println(source.substring(start, end));
}
</pre>

</blockquote>
<p>
Print the last element:
<blockquote>

<pre>
public static void printLast(BreakIterator boundary, String source) {
    int end = boundary.last();
    int start = boundary.previous();
    System.out.println(source.substring(start, end));
}
</pre>

</blockquote>
<p>
Print the element at a specified position:
<blockquote>

<pre>
public static void printAt(BreakIterator boundary, int pos, String source) {
    int end = boundary.following(pos);
    int start = boundary.previous();
    System.out.println(source.substring(start, end));
}
</pre>

</blockquote>
<p>
Find the next word:
<blockquote>

<pre>
public static int nextWordStartAfter(int pos, String text) {
    BreakIterator wb = BreakIterator.getWordInstance();
    wb.setText(text);
    int last = wb.following(pos);
    int current = wb.next();
    while (current != BreakIterator.DONE) {
        for (int p = last; p &lt; current; p++) {
            if (Character.isLetter(text.charAt(p)))
                return last;
        }
        last = current;
        current = wb.next();
    }
    return BreakIterator.DONE;
}
</pre>

</blockquote>
<p>
The iterator returned by {@code BreakIterator.getWordInstance()} is unique in
that the break positions it returns don't represent both the start and end of
the thing being iterated over. That is, a sentence-break iterator returns
breaks that each represent the end of one sentence and the beginning of the
next. With the word-break iterator, the characters between two boundaries
might be a word, or they might be the punctuation or whitespace between two
words. The above code uses a simple heuristic to determine which boundary is
the beginning of a word: If the characters between this boundary and the next
boundary include at least one letter (this can be an alphabetical letter, a
CJK ideograph, a Hangul syllable, a Kana character, etc.), then the text
between this boundary and the next is a word; otherwise, it's the material
between words.)

@see CharacterIterator"
      classrelation 340251 // <realization>
	relation 340251 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 340251 // <realization>
	  b parent class_ref 129435 // Cloneable
      end

      attribute 290459 "DONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant is returned by iterate methods like {@code previous()} or
{@code next()} if they have returned all valid boundaries.
"
      end

      classrelation 340379 // wrapped (<unidirectional association>)
	relation 340379 --->
	  a role_name "wrapped" package
	    comment " the wrapped ICU implementation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 340379 // wrapped (<unidirectional association>)
	  b parent class_ref 227227 // NativeBreakIterator
      end

      operation 1100571 "BreakIterator"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, for use by subclasses."
      end

      operation 1100699 "BreakIterator"
	package explicit_return_type ""
	nparams 1
	  param inout name "iterator" type class_ref 227227 // NativeBreakIterator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "wrapping constructor"
      end

      operation 1100827 "getAvailableLocales"
	class_operation public return_type class_ref 135835 // Locale
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of locales for which custom {@code BreakIterator} instances
are available.
<p>Note that Android does not support user-supplied locale service providers."
      end

      operation 1100955 "getCharacterInstance"
	class_operation public return_type class_ref 227099 // BreakIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code BreakIterator} to iterate over
characters using the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
@return a new instance of {@code BreakIterator} using the default locale."
      end

      operation 1101083 "getCharacterInstance"
	class_operation public return_type class_ref 227099 // BreakIterator
	nparams 1
	  param inout name "where" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code BreakIterator} to iterate over
characters using the given locale.

@param where
           the given locale.
@return a new instance of {@code BreakIterator} using the given locale."
      end

      operation 1101211 "getLineInstance"
	class_operation public return_type class_ref 227099 // BreakIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {{@code BreakIterator} to iterate over
line breaks using the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
@return a new instance of {@code BreakIterator} using the default locale."
      end

      operation 1101339 "getLineInstance"
	class_operation public return_type class_ref 227099 // BreakIterator
	nparams 1
	  param inout name "where" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code BreakIterator} to iterate over
line breaks using the given locale.

@param where
           the given locale.
@return a new instance of {@code BreakIterator} using the given locale.
@throws NullPointerException if {@code where} is {@code null}."
      end

      operation 1101467 "getSentenceInstance"
	class_operation public return_type class_ref 227099 // BreakIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code BreakIterator} to iterate over
sentence-breaks using the default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
@return a new instance of {@code BreakIterator} using the default locale."
      end

      operation 1101595 "getSentenceInstance"
	class_operation public return_type class_ref 227099 // BreakIterator
	nparams 1
	  param inout name "where" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code BreakIterator} to iterate over
sentence-breaks using the given locale.

@param where
           the given locale.
@return a new instance of {@code BreakIterator} using the given locale.
@throws NullPointerException if {@code where} is {@code null}."
      end

      operation 1101723 "getWordInstance"
	class_operation public return_type class_ref 227099 // BreakIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code BreakIterator} to iterate over
word-breaks using the default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
@return a new instance of {@code BreakIterator} using the default locale."
      end

      operation 1101851 "getWordInstance"
	class_operation public return_type class_ref 227099 // BreakIterator
	nparams 1
	  param inout name "where" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance of {@code BreakIterator} to iterate over
word-breaks using the given locale.

@param where
           the given locale.
@return a new instance of {@code BreakIterator} using the given locale.
@throws NullPointerException if {@code where} is {@code null}."
      end

      operation 1101979 "isBoundary"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the given offset is a boundary position. If this method
returns true, the current iteration position is set to the given
position; if the function returns false, the current iteration position
is set as though {@link #following(int)} had been called.

@param offset
           the given offset to check.
@return {@code true} if the given offset is a boundary position; {@code
        false} otherwise."
      end

      operation 1102107 "preceding"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the position of last boundary preceding the given offset, and
sets the current position to the returned value, or {@code DONE} if the
given offset specifies the starting position.

@param offset
           the given start position to be searched for.
@return the position of the last boundary preceding the given offset.
@throws IllegalArgumentException
           if the offset is invalid."
      end

      operation 1102235 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newText" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the new text string to be analyzed, the current position will be
reset to the beginning of this new string, and the old string will be
lost.

@param newText
           the new text string to be analyzed."
      end

      operation 1102363 "current"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this iterator's current position.

@return this iterator's current position."
      end

      operation 1102491 "first"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this iterator's current position to the first boundary and returns
that position.

@return the position of the first boundary."
      end

      operation 1102619 "following"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position of the first boundary to the one following the given
offset and returns this position. Returns {@code DONE} if there is no
boundary after the given offset.

@param offset
           the given position to be searched for.
@return the position of the first boundary following the given offset.
@throws IllegalArgumentException
           if the offset is invalid."
      end

      operation 1102747 "getText"
	abstract public return_type class_ref 129307 // CharacterIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CharacterIterator} which represents the text being
analyzed. Please note that the returned value is probably the internal
iterator used by this object. If the invoker wants to modify the status
of the returned iterator, it is recommended to first create a clone of
the iterator returned.

@return a {@code CharacterIterator} which represents the text being
        analyzed."
      end

      operation 1102875 "last"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this iterator's current position to the last boundary and returns
that position.

@return the position of last boundary."
      end

      operation 1103003 "next"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this iterator's current position to the next boundary after the
current position, and returns this position. Returns {@code DONE} if no
boundary was found after the current position.

@return the position of last boundary."
      end

      operation 1103131 "next"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this iterator's current position to the next boundary after the
given position, and returns that position. Returns {@code DONE} if no
boundary was found after the given position.

@param n
           the given position.
@return the position of last boundary."
      end

      operation 1103259 "previous"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this iterator's current position to the previous boundary before the
current position and returns that position. Returns {@code DONE} if
no boundary was found before the current position.

@return the position of last boundary."
      end

      operation 1103387 "setText"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "newText" type class_ref 129307 // CharacterIterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the new text to be analyzed by the given {@code CharacterIterator}.
The position will be reset to the beginning of the new text, and other
status information of this iterator will be kept.

@param newText
           the {@code CharacterIterator} referring to the text to be
           analyzed."
      end

      operation 1103515 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this iterator."
      end
    end

    class 227355 "ChoiceFormat"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Returns a fixed string based on a numeric value. The class can be used in
conjunction with the {@link MessageFormat} class to handle plurals in
messages. {@code ChoiceFormat} enables users to attach a format to a range of
numbers. The choice is specified with an ascending list of doubles, where
each item specifies a half-open interval up to the next item as in the
following: X matches j if and only if {@code limit[j] <= X < limit[j+1]}.
<p>
If there is no match, then either the first or last index is used. The first
or last index is used depending on whether the number is too low or too high.
The length of the format array must be the same as the length of the limits
array.
<h5>Examples:</h5>
<blockquote>

<pre>
double[] limits = {1, 2, 3, 4, 5, 6, 7};
String[] fmts = {\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"};

double[] limits2 = {0, 1, ChoiceFormat.nextDouble(1)};
String[] fmts2 = {\"no files\", \"one file\", \"many files\"};
</pre>
</blockquote>
<p>
ChoiceFormat.nextDouble(double) allows to get the double following the one
passed to the method. This is used to create half open intervals.
<p>
{@code ChoiceFormat} objects also may be converted to and from patterns.
The conversion can be done programmatically, as in the example above, or
by using a pattern like the following:
<blockquote>

<pre>
\"1#Sun|2#Mon|3#Tue|4#Wed|5#Thur|6#Fri|7#Sat\"
\"0#are no files|1#is one file|1&lt;are many files\"
</pre>

</blockquote>
<p>
where:
<ul>
<li><number>\"#\"</number> specifies an inclusive limit value;</li>
<li><number>\"<\"</number> specifies an exclusive limit value.</li>
</ul>"
      classrelation 341147 // <generalisation>
	relation 341147 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 341147 // <generalisation>
	  b parent class_ref 227483 // NumberFormat
      end

      attribute 291995 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1795184449645032964L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 292123 "choiceLimits"
	private explicit_type "double"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 341275 // choiceFormats (<unidirectional association>)
	relation 341275 --->
	  a role_name "choiceFormats" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 341275 // choiceFormats (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1110043 "ChoiceFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "limits" explicit_type "double"
	  param inout name "formats" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ChoiceFormat} with the specified double values
and associated strings. When calling
{@link #format(double, StringBuffer, FieldPosition) format} with a double
value {@code d}, then the element {@code i} in {@code formats} is
selected where {@code i} fulfills {@code limits[i] <= d < limits[i+1]}.
<p>
The length of the {@code limits} and {@code formats} arrays must be the
same.

@param limits
           an array of doubles in ascending order. The lowest and highest
           possible values are negative and positive infinity.
@param formats
           the strings associated with the ranges defined through {@code
           limits}. The lower bound of the associated range is at the
           same index as the string."
      end

      operation 1110171 "ChoiceFormat"
	public explicit_return_type ""
	nparams 1
	  param inout name "template" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ChoiceFormat} with the strings and limits parsed
from the specified pattern.

@param template
           the pattern of strings and ranges.
@throws IllegalArgumentException
           if an error occurs while parsing the pattern."
      end

      operation 1110299 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "template" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the pattern to determine new strings and ranges for this
{@code ChoiceFormat}.

@param template
           the pattern of strings and ranges.
@throws IllegalArgumentException
           if an error occurs while parsing the pattern."
      end

      operation 1110427 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new instance of {@code ChoiceFormat} with the same ranges and
strings as this {@code ChoiceFormat}.

@return a shallow copy of this {@code ChoiceFormat}.

@see java.lang.Cloneable"
      end

      operation 1110555 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object with this {@code ChoiceFormat}. The object
must be an instance of {@code ChoiceFormat} and have the same limits and
formats to be equal to this instance.

@param object
           the object to compare with this instance.
@return {@code true} if the specified object is equal to this instance;
        {@code false} otherwise.
@see #hashCode"
      end

      operation 1110683 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param in name "value" explicit_type "double"
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends the string associated with the range in which the specified
double value fits to the specified string buffer.

@param value
           the double to format.
@param buffer
           the target string buffer to append the formatted value to.
@param field
           a {@code FieldPosition} which is ignored.
@return the string buffer."
      end

      operation 1110811 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param in name "value" explicit_type "long"
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Appends the string associated with the range in which the specified long
value fits to the specified string buffer.

@param value
           the long to format.
@param buffer
           the target string buffer to append the formatted value to.
@param field
           a {@code FieldPosition} which is ignored.
@return the string buffer."
      end

      operation 1110939 "getFormats"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the strings associated with the ranges of this {@code
ChoiceFormat}.

@return an array of format strings."
      end

      operation 1111067 "getLimits"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the limits of this {@code ChoiceFormat}.

@return the array of doubles which make up the limits of this {@code
        ChoiceFormat}."
      end

      operation 1111195 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an integer hash code for the receiver. Objects which are equal
return the same value for this method.

@return the receiver's hash.

@see #equals"
      end

      operation 1111323 "nextDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the double value which is closest to the specified double but
larger.

@param value
           a double value.
@return the next larger double value."
      end

      operation 1111451 "nextDouble"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "value" explicit_type "double"
	  param inout name "increment" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the double value which is closest to the specified double but
either larger or smaller as specified.

@param value
           a double value.
@param increment
           {@code true} to get the next larger value, {@code false} to
           get the previous smaller value.
@return the next larger or smaller double value."
      end

      operation 1111579 "parse"
	public return_type class_ref 148379 // Number
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Parses a double from the specified string starting at the index specified
by {@code position}. The string is compared to the strings of this
{@code ChoiceFormat} and if a match occurs then the lower bound of the
corresponding range in the limits array is returned. If the string is
successfully parsed then the index of the {@code ParsePosition} passed to
this method is updated to the index following the parsed text.
<p>
If one of the format strings of this {@code ChoiceFormat} instance is
found in {@code string} starting at {@code position.getIndex()} then
<ul>
<li>the index in {@code position} is set to the index following the
parsed text;
<li>the {@link java.lang.Double Double} corresponding to the format
string is returned.</li>
</ul>
<p>
If none of the format strings is found in {@code string} then
<ul>
<li>the error index in {@code position} is set to the current index in
{@code position};</li>
<li> {@link java.lang.Double#NaN Double.NaN} is returned.
</ul>
@param string
           the source string to parse.
@param position
           input/output parameter, specifies the start index in {@code
           string} from where to start parsing. See the <em>Returns</em>
           section for a description of the output values.
@return a Double resulting from the parse, or Double.NaN if there is an
        error"
      end

      operation 1111707 "previousDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the double value which is closest to the specified double but
smaller.

@param value
           a double value.
@return the next smaller double value."
      end

      operation 1111835 "setChoices"
	public explicit_return_type "void"
	nparams 2
	  param inout name "limits" explicit_type "double"
	  param inout name "formats" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the double values and associated strings of this ChoiceFormat. When
calling {@link #format(double, StringBuffer, FieldPosition) format} with
a double value {@code d}, then the element {@code i} in {@code formats}
is selected where {@code i} fulfills
{@code limits[i] <= d < limits[i+1]}.
<p>
The length of the {@code limits} and {@code formats} arrays must be the
same.

@param limits
           an array of doubles in ascending order. The lowest and highest
           possible values are negative and positive infinity.
@param formats
           the strings associated with the ranges defined through {@code
           limits}. The lower bound of the associated range is at the
           same index as the string."
      end

      operation 1111963 "skipWhitespace"
	private explicit_return_type "int"
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1112091 "toPattern"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pattern of this {@code ChoiceFormat} which specifies the
ranges and their associated strings.

@return the pattern."
      end
    end

    class 227483 "NumberFormat"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The abstract base class for all number formats. This class provides the
interface for formatting and parsing numbers. {@code NumberFormat} also
provides methods for determining which locales have number formats, and what
their names are.
<p>
{@code NumberFormat} helps you to format and parse numbers for any locale.
Your code can be completely independent of the locale conventions for decimal
points, thousands-separators, or even the particular decimal digits used, or
whether the number format is even decimal.
<p>
To format a number for the current locale, use one of the factory class
methods:
<blockquote>

<pre>
myString = NumberFormat.getInstance().format(myNumber);
</pre>

</blockquote>
<p>
If you are formatting multiple numbers, it is more efficient to get the
format and use it multiple times so that the system doesn't have to fetch the
information about the local language and country conventions multiple times.
<blockquote>

<pre>
NumberFormat nf = NumberFormat.getInstance();
for (int i = 0; i &lt; a.length; ++i) {
    output.println(nf.format(myNumber[i]) + &quot;; &quot;);
}
</pre>

</blockquote>
<p>
To format a number for a different locale, specify it in the call to
{@code getInstance}.
<blockquote>

<pre>
NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH);
</pre>

</blockquote>
<p>
You can also use a {@code NumberFormat} to parse numbers:
<blockquote>

<pre>
myNumber = nf.parse(myString);
</pre>

</blockquote>

<p>Use {@code #getInstance} or {@code #getNumberInstance} to get the default number
format. Use {@link #getIntegerInstance} to get an integer number format,
{@link #getCurrencyInstance} to get the currency number format, and
{@link #getPercentInstance} to get a format for displaying percentages.

<p>You can also control the display of numbers with methods such as
{@code setMinimumFractionDigits}. If you want even more control over the
format or parsing, or want to give your users more control, you can try
casting the {@code NumberFormat} you get from the factory methods to a
{@code DecimalFormat}. This will work for the vast majority of locales; just
remember to put it in a {@code try} block in case you encounter an unusual
one.
<p>
{@code NumberFormat} is designed such that some controls work for formatting
and others work for parsing. For example, {@code setParseIntegerOnly} only
affects parsing: If set to {@code true}, \"3456.78\" is parsed as 3456 (and
leaves the parse position just after '6'); if set to {@code false},
\"3456.78\" is parsed as 3456.78 (and leaves the parse position just after
'8'). This is independent of formatting.
<p>
You can also use forms of the {@code parse} and {@code format} methods with
{@code ParsePosition} and {@code FieldPosition} to allow you to:
<ul>
<li>progressively parse through pieces of a string;</li>
<li>align the decimal point and other areas.</li>
</ul>
For example, you can align numbers in two ways:
<ol>
<li> If you are using a monospaced font with spacing for alignment, you can
pass the {@code FieldPosition} in your format call, with {@code field} =
{@code INTEGER_FIELD}. On output, {@code getEndIndex} will be set to the
offset between the last character of the integer and the decimal. Add
(desiredSpaceCount - getEndIndex) spaces to the front of the string.</li>
<li> If you are using proportional fonts, instead of padding with spaces,
measure the width of the string in pixels from the start to
{@code getEndIndex}. Then move the pen by (desiredPixelWidth -
widthToAlignmentPoint) before drawing the text. This also works where there
is no decimal but possibly additional characters before or after the number,
for example with parentheses in negative numbers: \"(12)\" for -12.</li>
</ol>
<h4>Synchronization</h4>
<p>
Number formats are generally not synchronized. It is recommended to create
separate format instances for each thread. If multiple threads access a
format concurrently, it must be synchronized externally.
<p>
<h4>DecimalFormat</h4>
<p>
{@code DecimalFormat} is the concrete implementation of {@code NumberFormat},
and the {@code NumberFormat} API is essentially an abstraction of
{@code DecimalFormat's} API. Refer to {@code DecimalFormat} for more
information about this API.

@see DecimalFormat
@see java.text.ChoiceFormat"
      classrelation 340891 // <generalisation>
	relation 340891 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 340891 // <generalisation>
	  b parent class_ref 227611 // Format
      end

      attribute 290843 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2308460125733713944L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 290971 "INTEGER_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field constant identifying the integer part of a number.
"
      end

      attribute 291099 "FRACTION_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field constant identifying the fractional part of a number.
"
      end

      attribute 291227 "groupingUsed"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 291355 "parseIntegerOnly"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 291483 "maximumIntegerDigits"
	private explicit_type "int"
	init_value " 40"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 291611 "minimumIntegerDigits"
	private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 291739 "maximumFractionDigits"
	private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 291867 "minimumFractionDigits"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1104923 "NumberFormat"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by subclasses. This was public in Java 5."
      end

      operation 1105051 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new {@code NumberFormat} with the same properties."
      end

      operation 1105179 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object to this number format and indicates if
they are equal. In order to be equal, {@code object} must be an instance
of {@code NumberFormat} with the same pattern and properties.

@param object
           the object to compare with this object.
@return {@code true} if the specified object is equal to this number
        format; {@code false} otherwise.
@see #hashCode"
      end

      operation 1105307 "format"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the specified double using the rules of this number format.

@param value
           the double to format.
@return the formatted string."
      end

      operation 1105435 "format"
	abstract public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param in name "value" explicit_type "double"
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the specified double value as a string using the pattern of this
number format and appends the string to the specified string buffer.
<p>
If the {@code field} member of {@code position} contains a value
specifying a format field, then its {@code beginIndex} and
{@code endIndex} members will be updated with the position of the first
occurrence of this field in the formatted text.

@param value
           the double to format.
@param buffer
           the target string buffer to append the formatted double value
           to.
@param field
           on input: an optional alignment field; on output: the offsets
           of the alignment field in the formatted text.
@return the string buffer."
      end

      operation 1105563 "format"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the specified long using the rules of this number format.

@param value
           the long to format.
@return the formatted string."
      end

      operation 1105691 "format"
	abstract public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param in name "value" explicit_type "long"
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the specified long value as a string using the pattern of this
number format and appends the string to the specified string buffer.
<p>
If the {@code field} member of {@code position} contains a value
specifying a format field, then its {@code beginIndex} and
{@code endIndex} members will be updated with the position of the first
occurrence of this field in the formatted text.

@param value
           the long to format.
@param buffer
           the target string buffer to append the formatted long value
           to.
@param field
           on input: an optional alignment field; on output: the offsets
           of the alignment field in the formatted text.
@return the string buffer."
      end

      operation 1105819 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats a number into a supplied buffer.
<p>
The number must be a subclass of {@code Number}. Instances of {@code Byte}, {@code Short},
{@code Integer}, and {@code Long} have {@code Number.longValue} invoked, as do instances of
{@code BigInteger} where {@code BigInteger.bitLength} returns <i>less than</i> 64. All other
values have {@code Number.doubleValue} invoked instead.
<p>
If the {@code field} member of {@code field} contains a value specifying
a format field, then its {@code beginIndex} and {@code endIndex} members
will be updated with the position of the first occurrence of this field
in the formatted text.

@param object
           the object to format, must be a {@code Number}.
@param buffer
           the target string buffer to append the formatted number to.
@param field
           on input: an optional alignment field; on output: the offsets
           of the alignment field in the formatted text.
@return the string buffer.
@throws IllegalArgumentException
            if {@code object} is not an instance of {@code Number}."
      end

      operation 1105947 "getAvailableLocales"
	class_operation public return_type class_ref 135835 // Locale
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of locales for which custom {@code NumberFormat} instances
are available.
<p>Note that Android does not support user-supplied locale service providers."
      end

      operation 1106075 "getCurrency"
	public return_type class_ref 228251 // Currency
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currency used by this number format.
<p>
This implementation throws {@code UnsupportedOperationException},
concrete subclasses should override this method if they support currency
formatting.
<p>

@return the currency that was set in getInstance() or in setCurrency(),
        or {@code null}.
@throws UnsupportedOperationException"
      end

      operation 1106203 "getCurrencyInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing currency values
for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@return a {@code NumberFormat} for handling currency values."
      end

      operation 1106331 "getCurrencyInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing currency values
for the specified locale.

@param locale
           the locale to use.
@return a {@code NumberFormat} for handling currency values."
      end

      operation 1106459 "getIntegerInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing integers for the
user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@return a {@code NumberFormat} for handling integers."
      end

      operation 1106587 "getIntegerInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing integers for
the specified locale.

@param locale
           the locale to use.
@return a {@code NumberFormat} for handling integers."
      end

      operation 1106715 "getInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing numbers for the
default locale.

@return a {@code NumberFormat} for handling {@code Number} objects."
      end

      operation 1106843 "getInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing numbers for the
specified locale.

@param locale
           the locale to use.
@return a {@code NumberFormat} for handling {@code Number} objects."
      end

      operation 1106971 "getInstance"
	class_operation private return_type class_ref 227483 // NumberFormat
	nparams 2
	  param inout name "pattern" type class_ref 3399692 // String
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1107099 "getMaximumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of fraction digits that are printed when
formatting. If the maximum is less than the number of fraction digits,
the least significant digits are truncated.

@return the maximum number of fraction digits."
      end

      operation 1107227 "getMaximumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of integer digits that are printed when
formatting. If the maximum is less than the number of integer digits, the
most significant digits are truncated.

@return the maximum number of integer digits."
      end

      operation 1107355 "getMinimumFractionDigits"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum number of fraction digits that are printed when
formatting.

@return the minimum number of fraction digits."
      end

      operation 1107483 "getMinimumIntegerDigits"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum number of integer digits that are printed when
formatting.

@return the minimum number of integer digits."
      end

      operation 1107611 "getNumberInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing numbers for the
user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@return a {@code NumberFormat} for handling {@code Number} objects."
      end

      operation 1107739 "getNumberInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing numbers for the
specified locale.

@param locale
           the locale to use.
@return a {@code NumberFormat} for handling {@code Number} objects."
      end

      operation 1107867 "getPercentInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing percentage
values for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

<p>The {@code NumberFormat} returned by this method should only be used
to format floating-point numbers typically between 0 and 1 (with 1 being 100%).
A value such as 0.53 will be treated as 53%, but 53.0 (or the integer 53) will be
treated as 5,300%, which is rarely what you intended."
      end

      operation 1107995 "getPercentInstance"
	class_operation public return_type class_ref 227483 // NumberFormat
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code NumberFormat} for formatting and parsing percentage
values for the given {@code locale}.

<p>The {@code NumberFormat} returned by this method should only be used
to format floating-point numbers typically between 0 and 1 (with 1 being 100%).
A value such as 0.53 will be treated as 53%, but 53.0 (or the integer 53) will be
treated as 5,300%, which is rarely what you intended."
      end

      operation 1108123 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1108251 "isGroupingUsed"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this number format formats and parses numbers using a
grouping separator.

@return {@code true} if a grouping separator is used; {@code false}
        otherwise."
      end

      operation 1108379 "isParseIntegerOnly"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this number format only parses integer numbers. Parsing
stops if a decimal separator is encountered.

@return {@code true} if this number format only parses integers,
        {@code false} if if parsese integers as well as fractions."
      end

      operation 1108507 "parse"
	public return_type class_ref 148379 // Number
	nparams 1
	  param inout name "string" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 227867 // ParseException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses a {@code Number} from the specified string using the rules of this
number format.

@param string
           the string to parse.
@return the {@code Number} resulting from the parsing.
@throws ParseException
           if an error occurs during parsing."
      end

      operation 1108635 "parse"
	abstract public return_type class_ref 148379 // Number
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses a {@code Number} from the specified string starting at the index
specified by {@code position}. If the string is successfully parsed then
the index of the {@code ParsePosition} is updated to the index following
the parsed text. On error, the index is unchanged and the error index of
{@code ParsePosition} is set to the index where the error occurred.

@param string
           the string to parse.
@param position
           input/output parameter, specifies the start index in
           {@code string} from where to start parsing. If parsing is
           successful, it is updated with the index following the parsed
           text; on error, the index is unchanged and the error index is
           set to the index where the error occurred.
@return the {@code Number} resulting from the parse or {@code null} if
        there is an error."
      end

      operation 1108763 "parseObject"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1108891 "setCurrency"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 228251 // Currency
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency used by this number format when formatting currency
values. The min and max fraction digits remain the same.
<p>
This implementation throws {@code UnsupportedOperationException},
concrete subclasses should override this method if they support currency
formatting.

@param currency
           the new currency.
@throws UnsupportedOperationException"
      end

      operation 1109019 "setGroupingUsed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether this number format formats and parses numbers using a
grouping separator.

@param value
           {@code true} if a grouping separator is used; {@code false}
           otherwise."
      end

      operation 1109147 "setMaximumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of fraction digits that are printed when
formatting. If the maximum is less than the number of fraction digits,
the least significant digits are truncated.

@param value
           the maximum number of fraction digits."
      end

      operation 1109275 "setMaximumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the new maximum count of integer digits that are printed when
formatting. If the maximum is less than the number of integer digits, the
most significant digits are truncated.

@param value
           the new maximum number of integer numerals for display."
      end

      operation 1109403 "setMinimumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum number of fraction digits that are printed when
formatting.

@param value
           the minimum number of fraction digits."
      end

      operation 1109531 "setMinimumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum number of integer digits that are printed when
formatting.

@param value
           the minimum number of integer digits."
      end

      operation 1109659 "setParseIntegerOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies if this number format should parse numbers only as integers or
else as any kind of number. If this method is called with a {@code true}
value then subsequent parsing attempts will stop if a decimal separator
is encountered.

@param value
           {@code true} to only parse integers, {@code false} to parse
           integers as well as fractions."
      end

      classrelation 341019 // serialPersistentFields (<unidirectional association>)
	relation 341019 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"groupingUsed\", boolean.class),
        new ObjectStreamField(\"maxFractionDigits\", byte.class),
        new ObjectStreamField(\"maximumFractionDigits\", int.class),
        new ObjectStreamField(\"maximumIntegerDigits\", int.class),
        new ObjectStreamField(\"maxIntegerDigits\", byte.class),
        new ObjectStreamField(\"minFractionDigits\", byte.class),
        new ObjectStreamField(\"minimumFractionDigits\", int.class),
        new ObjectStreamField(\"minimumIntegerDigits\", int.class),
        new ObjectStreamField(\"minIntegerDigits\", byte.class),
        new ObjectStreamField(\"parseIntegerOnly\", boolean.class),
        new ObjectStreamField(\"serialVersionOnStream\", int.class),
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 341019 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      operation 1109787 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1109915 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 227611 "Format"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The base class for all formats.
<p>
This is an abstract base class which specifies the protocol for classes which
convert other objects or values, such as numeric values and dates, and their
string representations. In some cases these representations may be localized
or contain localized characters or strings. For example, a numeric formatter
such as {@code DecimalFormat} may convert a numeric value such as 12345 to
the string \"$12,345\". It may also parse the string back into a numeric value.
A date and time formatter like {@code SimpleDateFormat} may represent a
specific date, encoded numerically, as a string such as \"Wednesday, February
26, 1997 AD\".
<p>
Many of the concrete subclasses of {@code Format} employ the notion of a
pattern. A pattern is a string representation of the rules which govern the
conversion between values and strings. For example, a {@code DecimalFormat}
object may be associated with the pattern \"$#,##0.00;($#,##0.00)\", which is a
common US English format for currency values, yielding strings such as
\"$1,234.45\" for 1234.45, and \"($987.65)\" for -987.6543. The specific syntax
of a pattern is defined by each subclass. Even though many subclasses use
patterns, the notion of a pattern is not inherent to {@code Format} classes
in general, and is not part of the explicit base class protocol.
<p>
Two complex formatting classes are worth mentioning: {@code MessageFormat}
and {@code ChoiceFormat}. {@code ChoiceFormat} is a subclass of
{@code NumberFormat} which allows the user to format different number ranges
as strings. For instance, 0 may be represented as \"no files\", 1 as \"one
file\", and any number greater than 1 as \"many files\". {@code MessageFormat}
is a formatter which utilizes other {@code Format} objects to format a string
containing multiple values. For instance, a {@code MessageFormat} object
might produce the string \"There are no files on the disk MyDisk on February
27, 1997.\" given the arguments 0, \"MyDisk\", and the date value of 2/27/97.
See the {@link ChoiceFormat} and {@link MessageFormat} descriptions for
further information."
      classrelation 340507 // <realization>
	relation 340507 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 340507 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      classrelation 340635 // <realization>
	relation 340635 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 340635 // <realization>
	  b parent class_ref 129435 // Cloneable
      end

      attribute 290587 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -299282585814624189L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1103643 "Format"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by subclasses. This was public in Java 5."
      end

      operation 1103771 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this {@code Format} instance.

@return a shallow copy of this format.

@see java.lang.Cloneable"
      end

      operation 1103899 "format"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the specified object using the rules of this format.

@param object
           the object to format.
@return the formatted string.
@throws IllegalArgumentException
        if the object cannot be formatted by this format."
      end

      operation 1104027 "format"
	abstract public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified object to the specified string buffer using the
rules of this format.
<p>
{@code field} is an input/output parameter. If its {@code field}
member contains an enum value specifying a field on input, then its
{@code beginIndex} and {@code endIndex} members will be updated with the
text offset of the first occurrence of this field in the formatted text.

@param object
           the object to format.
@param buffer
           the string buffer where the formatted string is appended to.
@param field
           on input: an optional alignment field; on output: the offsets
           of the alignment field in the formatted text.
@return the string buffer.
@throws IllegalArgumentException
           if the object cannot be formatted by this format."
      end

      operation 1104155 "formatToCharacterIterator"
	public return_type class_ref 129051 // AttributedCharacterIterator
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the specified object using the rules of this format and returns
an {@code AttributedCharacterIterator} with the formatted string and no
attributes.
<p>
Subclasses should return an {@code AttributedCharacterIterator} with the
appropriate attributes.

@param object
           the object to format.
@return an {@code AttributedCharacterIterator} with the formatted object
        and attributes.
@throws IllegalArgumentException
           if the object cannot be formatted by this format."
      end

      operation 1104283 "parseObject"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "string" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 227867 // ParseException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the specified string using the rules of this format.

@param string
           the string to parse.
@return the object resulting from the parse.
@throws ParseException
           if an error occurs during parsing."
      end

      operation 1104411 "parseObject"
	abstract public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the specified string starting at the index specified by
{@code position}. If the string is successfully parsed then the index of
the {@code ParsePosition} is updated to the index following the parsed
text. On error, the index is unchanged and the error index of
{@code ParsePosition} is set to the index where the error occurred.

@param string
           the string to parse.
@param position
           input/output parameter, specifies the start index in
           {@code string} from where to start parsing. If parsing is
           successful, it is updated with the index following the parsed
           text; on error, the index is unchanged and the error index is
           set to the index where the error occurred.
@return the object resulting from the parse or {@code null} if there is
        an error."
      end

      operation 1104539 "upTo"
	class_operation package explicit_return_type "boolean"
	nparams 4
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param in name "stop" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1104667 "upToWithQuotes"
	class_operation package explicit_return_type "boolean"
	nparams 5
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param in name "stop" explicit_type "char"
	  param in name "start" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 228123 "Field"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 340763 // <generalisation>
	  relation 340763 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 340763 // <generalisation>
	    b parent class_ref 129179 // Attribute
	end

	attribute 290715 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 276966692217360283L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1104795 "Field"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "fieldName" type class_ref 3399692 // String
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new instance of {@code Field} with the given field name.

@param fieldName
           the field name."
	end
      end
    end

    class 227739 "FieldPosition"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Identifies fields in formatted strings. If a {@code FieldPosition} is passed
to the format method with such a parameter, then the indices will be set to
the start and end indices of the field in the formatted string.
<p>
A {@code FieldPosition} can be created by using the integer constants in the
various format classes (for example {@code NumberFormat.INTEGER_FIELD}) or
one of the fields of type {@code Format.Field}.
<p>
If more than one field information is needed, the method
{@link NumberFormat#formatToCharacterIterator(Object)} should be used."
      attribute 298011 "myField"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 298139 "beginIndex"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 298267 "endIndex"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 346139 // myAttribute (<unidirectional association>)
	relation 346139 --->
	  a role_name "myAttribute" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 346139 // myAttribute (<unidirectional association>)
	  b parent class_ref 228123 // Field
      end

      operation 1136027 "FieldPosition"
	public explicit_return_type ""
	nparams 1
	  param in name "field" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FieldPosition} for the specified field.

@param field
           the field to identify."
      end

      operation 1136155 "FieldPosition"
	public explicit_return_type ""
	nparams 1
	  param inout name "attribute" type class_ref 228123 // Field
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FieldPosition} for the specified {@code Field}
attribute.

@param attribute
           the field attribute to identify."
      end

      operation 1136283 "FieldPosition"
	public explicit_return_type ""
	nparams 2
	  param inout name "attribute" type class_ref 228123 // Field
	  param in name "field" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code FieldPosition} for the specified {@code Field}
attribute and field id.

@param attribute
           the field attribute to identify.
@param field
           the field to identify."
      end

      operation 1136411 "clear"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1136539 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object to this field position and indicates if
they are equal. In order to be equal, {@code object} must be an instance
of {@code FieldPosition} with the same field, begin index and end index.

@param object
           the object to compare with this object.
@return {@code true} if the specified object is equal to this field
        position; {@code false} otherwise.
@see #hashCode"
      end

      operation 1136667 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the beginning of the field.

@return the first index of the field."
      end

      operation 1136795 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index one past the end of the field.

@return one past the index of the last character in the field."
      end

      operation 1136923 "getField"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the field which is being identified.

@return the field constant."
      end

      operation 1137051 "getFieldAttribute"
	public return_type class_ref 228123 // Field
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the attribute which is being identified.

@return the field."
      end

      operation 1137179 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1137307 "setBeginIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the index of the beginning of the field.

@param index
           the index of the first character in the field."
      end

      operation 1137435 "setEndIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the index of the end of the field.

@param index
           one past the index of the last character in the field."
      end

      operation 1137563 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representation of this field position.

@return the string representation of this field position."
      end
    end

    class 227867 "ParseException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when the string being parsed is not in the correct form."
      classrelation 347163 // <generalisation>
	relation 347163 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 347163 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      attribute 299675 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2703218443322787634L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 299803 "errorOffset"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1142299 "ParseException"
	public explicit_return_type ""
	nparams 2
	  param inout name "detailMessage" type class_ref 3399692 // String
	  param in name "location" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of this class with its stack trace, detail
message and the location of the error filled in.

@param detailMessage
           the detail message for this exception.
@param location
           the index at which the parse exception occurred."
      end

      operation 1142427 "getErrorOffset"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index at which this parse exception occurred.

@return the location of this exception in the parsed string."
      end
    end

    class 227995 "ParsePosition"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Tracks the current position in a parsed string. In case of an error the error
index can be set to the position where the error occurred without having to
change the parse position."
      attribute 299931 "currentPosition"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 300059 "errorIndex"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1142555 "ParsePosition"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code ParsePosition} with the specified index.

@param index
           the index to begin parsing."
      end

      operation 1142683 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object to this {@code ParsePosition} and indicates
if they are equal. In order to be equal, {@code object} must be an
instance of {@code ParsePosition} and it must have the same index and
error index.

@param object
           the object to compare with this object.
@return {@code true} if the specified object is equal to this
        {@code ParsePosition}; {@code false} otherwise.
@see #hashCode"
      end

      operation 1142811 "getErrorIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index at which the parse could not continue.

@return the index of the parse error or -1 if there is no error."
      end

      operation 1142939 "getIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current parse position.

@return the current position."
      end

      operation 1143067 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1143195 "setErrorIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the index at which the parse could not continue.

@param index
           the index of the parse error."
      end

      operation 1143323 "setIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current parse position.

@param index
           the current parse position."
      end

      operation 1143451 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representation of this parse position.

@return the string representation of this parse position."
      end
    end

    class 228379 "CollationElementIterator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Created by a {@code RuleBasedCollator} to iterate through a string. The
result of each iteration is a 32-bit collation element that defines the
ordering priority of the next character or sequence of characters in the
source string.
<p>
For illustration, consider the following in Spanish:
<p>
\"ca\": the first collation element is collation_element('c') and second
collation element is collation_element('a').
<p>
Since \"ch\" in Spanish sorts as one entity, the example below returns one
collation element for the two characters 'c' and 'h':
<p>
\"cha\": the first collation element is collation_element('ch') and the second
one is collation_element('a').
<p>
In German, since the character '&#92;u0086' is a composed character of 'a'
and 'e', the iterator returns two collation elements for the single character
'&#92;u0086':
<p>
\"&#92;u0086b\": the first collation element is collation_element('a'), the
second one is collation_element('e'), and the third collation element is
collation_element('b')."
      attribute 292251 "NULLORDER"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant is returned by the iterator in the methods
{@code next()} and {@code previous()} when the end or the
beginning of the source string has been reached, and there are no more
valid collation elements to return.
"
      end

      classrelation 341403 // icuIterator (<unidirectional association>)
	relation 341403 --->
	  a role_name "icuIterator" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 341403 // icuIterator (<unidirectional association>)
	  b parent class_ref 228507 // CollationElementIteratorICU
      end

      operation 1112219 "CollationElementIterator"
	package explicit_return_type ""
	nparams 1
	  param inout name "iterator" type class_ref 228507 // CollationElementIteratorICU
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1112347 "getMaxExpansion"
	public explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the maximum length of any expansion sequence that ends with the
specified collation element. Returns {@code 1} if there is no expansion
with this collation element as the last element.

@param order
           a collation element that has been previously obtained from a
           call to either the {@link #next()} or {@link #previous()}
           method.
@return the maximum length of any expansion sequence ending with the
        specified collation element."
      end

      operation 1112475 "getOffset"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the character offset in the source string corresponding to the
next collation element. This value could be any of:
<ul>
<li>The index of the first character in the source string that matches
the value of the next collation element. This means that if
{@code setOffset(offset)} sets the index in the middle of a contraction,
{@code getOffset()} returns the index of the first character in the
contraction, which may not be equal to the original offset that was set.
Hence calling {@code getOffset()} immediately after
{@code setOffset(offset)} does not guarantee that the original offset set
will be returned.</li>
<li>If normalization is on, the index of the immediate subsequent
character, or composite character with the first character, having a
combining class of 0.</li>
<li>The length of the source string, if iteration has reached the end.
</li>
</ul>

@return The position of the collation element in the source string that
        will be returned by the next invocation of the {@link #next()}
        method."
      end

      operation 1112603 "next"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the next collation element in the source string.

@return the next collation element or {@code NULLORDER} if the end
        of the iteration has been reached."
      end

      operation 1112731 "previous"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the previous collation element in the source string.

@return the previous collation element, or {@code NULLORDER} when
        the start of the iteration has been reached."
      end

      operation 1112859 "primaryOrder"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "order" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the primary order of the specified collation element, i.e. the
first 16 bits. This value is unsigned.

@param order
           the element of the collation.
@return the element's 16 bit primary order."
      end

      operation 1112987 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions the cursor to point at the first element of the current
string. The next call to {@link #next()} or {@link #previous()} will
return the first and last collation element in the string, respectively.
<p>
If the {@code RuleBasedCollator} used by this iterator has had its
attributes changed, calling {@code reset()} reinitializes the iterator to
use the new attributes."
      end

      operation 1113115 "secondaryOrder"
	class_operation public explicit_return_type "short"
	nparams 1
	  param in name "order" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the secondary order of the specified collation element, i.e. the
16th to 23th bits, inclusive. This value is unsigned.

@param order
           the element of the collator.
@return the 8 bit secondary order of the element."
      end

      operation 1113243 "setOffset"
	public explicit_return_type "void"
	nparams 1
	  param in name "newOffset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Points the iterator at the collation element associated with the
character in the source string which is found at the supplied offset.
After this call completes, an invocation of the {@link #next()} method
will return this collation element.
<p>
If {@code newOffset} corresponds to a character which is part of a
sequence that maps to a single collation element then the iterator is
adjusted to the start of that sequence. As a result of this, any
subsequent call made to {@code getOffset()} may not return the same value
set by this method.
<p>
If the decomposition mode is on, and offset is in the middle of a
decomposable range of source text, the iterator may not return a correct
result for the next forwards or backwards iteration. The user must ensure
that the offset is not in the middle of a decomposable range.

@param newOffset
           the character offset into the original source string to set.
           Note that this is not an offset into the corresponding
           sequence of collation elements."
      end

      operation 1113371 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 129307 // CharacterIterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a new source string iterator for iteration, and resets the offset to
the beginning of the text.

@param source
           the new source string iterator for iteration."
      end

      operation 1113499 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a new source string for iteration, and resets the offset to the
beginning of the text.

@param source
           the new source string for iteration."
      end

      operation 1113627 "tertiaryOrder"
	class_operation public explicit_return_type "short"
	nparams 1
	  param in name "order" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the tertiary order of the specified collation element, i.e. the
last 8 bits. This value is unsigned.

@param order
           the element of the collation.
@return the 8 bit tertiary order of the element."
      end
    end

    class 228635 "CollationKey"
      abstract visibility public 
      nactuals 1
      actual class class_ref 139675 // Comparable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents a string under the rules of a specific {@code Collator} object.
Comparing two {@code CollationKey} instances returns the relative order of
the strings they represent.
<p>
Since the rule set of collators can differ, the sort orders of the same
string under two different {@code Collator} instances might differ. Hence
comparing collation keys generated from different {@code Collator} instances
can give incorrect results.
<p>
Both the method {@code CollationKey.compareTo(CollationKey)} and the method
{@code Collator.compare(String, String)} compares two strings and returns
their relative order. The performance characteristics of these two approaches
can differ.
<p>
During the construction of a {@code CollationKey}, the entire source string
is examined and processed into a series of bits terminated by a null, that
are stored in the {@code CollationKey}. When
{@code CollationKey.compareTo(CollationKey)} executes, it performs bitwise
comparison on the bit sequences. This can incur startup cost when creating
the {@code CollationKey}, but once the key is created, binary comparisons
are fast. This approach is recommended when the same strings are to be
compared over and over again.
<p>
On the other hand, implementations of
{@code Collator.compare(String, String)} can examine and process the strings
only until the first characters differ in order. This approach is
recommended if the strings are to be compared only once.
<p>
The following example shows how collation keys can be used to sort a
list of strings:
<blockquote>

<pre>
// Create an array of CollationKeys for the Strings to be sorted.
Collator myCollator = Collator.getInstance();
CollationKey[] keys = new CollationKey[3];
keys[0] = myCollator.getCollationKey(&quot;Tom&quot;);
keys[1] = myCollator.getCollationKey(&quot;Dick&quot;);
keys[2] = myCollator.getCollationKey(&quot;Harry&quot;);
sort(keys);
<br>
//...
<br>
// Inside body of sort routine, compare keys this way
if( keys[i].compareTo( keys[j] ) &gt; 0 )
   // swap keys[i] and keys[j]
<br>
//...
<br>
// Finally, when we've returned from sort.
System.out.println(keys[0].getSourceString());
System.out.println(keys[1].getSourceString());
System.out.println(keys[2].getSourceString());
</pre>

</blockquote>

@see Collator
@see RuleBasedCollator"
      classrelation 341531 // <realization>
	relation 341531 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 341531 // <realization>
	  b parent class_ref 139675 // Comparable
      end

      classrelation 341659 // source (<unidirectional association>)
	relation 341659 --->
	  a role_name "source" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 341659 // source (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1113755 "CollationKey"
	protected explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1113883 "compareTo"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "value" type class_ref 228635 // CollationKey
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this collation key to the given collation key.

@param value the other collation key.
@return a negative value if this key is less than {@code value},
        0 if they are equal, and a positive value if this key is greater."
      end

      operation 1114011 "getSourceString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string from which this collation key was created.

@return the source string of this collation key."
      end

      operation 1114139 "toByteArray"
	abstract public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this collation key as a byte array.

@return an array of bytes."
      end
    end

    class 228763 "Collator"
      abstract visibility public 
      nactuals 1
      actual class class_ref 3094156 // Comparator
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Performs locale-sensitive string comparison. A concrete subclass,
{@link RuleBasedCollator}, allows customization of the collation ordering by
the use of rule sets.
<p>
Following the <a href=http://www.unicode.org>Unicode Consortium</a>'s
specifications for the <a
href=\"http://www.unicode.org/unicode/reports/tr10/\"> Unicode Collation
Algorithm (UCA)</a>, there are 4 different levels of strength used in
comparisons:
<ul>
<li>PRIMARY strength: Typically, this is used to denote differences between
base characters (for example, \"a\" &lt; \"b\"). It is the strongest difference.
For example, dictionaries are divided into different sections by base
character.
<li>SECONDARY strength: Accents in the characters are considered secondary
differences (for example, \"as\" &lt; \"&agrave;s\" &lt; \"at\"). Other differences
between letters can also be considered secondary differences, depending on
the language. A secondary difference is ignored when there is a primary
difference anywhere in the strings.
<li>TERTIARY strength: Upper and lower case differences in characters are
distinguished at tertiary strength (for example, \"ao\" &lt; \"Ao\" &lt;
\"a&ograve;\"). In addition, a variant of a letter differs from the base form
on the tertiary strength (such as \"A\" and \"&#9398;\"). Another example is the
difference between large and small Kana. A tertiary difference is ignored
when there is a primary or secondary difference anywhere in the strings.
<li>IDENTICAL strength: When all other strengths are equal, the IDENTICAL
strength is used as a tiebreaker. The Unicode code point values of the NFD
form of each string are compared, just in case there is no difference. For
example, Hebrew cantellation marks are only distinguished at this strength.
This strength should be used sparingly, as only code point value differences
between two strings are an extremely rare occurrence. Using this strength
substantially decreases the performance for both comparison and collation key
generation APIs. This strength also increases the size of the collation key.
</ul>
<p>
This {@code Collator} deals only with two decomposition modes, the canonical
decomposition mode and one that does not use any decomposition. The
compatibility decomposition mode
{@code java.text.Collator.FULL_DECOMPOSITION} is not supported here. If the
canonical decomposition mode is set, {@code Collator} handles un-normalized
text properly, producing the same results as if the text were normalized in
NFD. If canonical decomposition is turned off, it is the user's
responsibility to ensure that all text is already in the appropriate form
before performing a comparison or before getting a {@link CollationKey}.
<p>
<em>Examples:</em>
<blockquote>

<pre>
// Get the Collator for US English and set its strength to PRIMARY
Collator usCollator = Collator.getInstance(Locale.US);
usCollator.setStrength(Collator.PRIMARY);
if (usCollator.compare(&quot;abc&quot;, &quot;ABC&quot;) == 0) {
    System.out.println(&quot;Strings are equivalent&quot;);
}
</pre>

</blockquote>
<p>
The following example shows how to compare two strings using the collator for
the default locale.
<blockquote>

<pre>
// Compare two strings in the default locale
Collator myCollator = Collator.getInstance();
myCollator.setDecomposition(Collator.NO_DECOMPOSITION);
if (myCollator.compare(&quot;\\u00e0\\u0325&quot;, &quot;a\\u0325\\u0300&quot;) != 0) {
    System.out.println(&quot;\\u00e0\\u0325 is not equal to a\\u0325\\u0300 without decomposition&quot;);
    myCollator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);
    if (myCollator.compare(&quot;\\u00e0\\u0325&quot;, &quot;a\\u0325\\u0300&quot;) != 0) {
        System.out.println(&quot;Error: \\u00e0\\u0325 should be equal to a\\u0325\\u0300 with decomposition&quot;);
    } else {
        System.out.println(&quot;\\u00e0\\u0325 is equal to a\\u0325\\u0300 with decomposition&quot;);
    }
} else {
    System.out.println(&quot;Error: \\u00e0\\u0325 should be not equal to a\\u0325\\u0300 without decomposition&quot;);
}
</pre>

</blockquote>

@see RuleBasedCollator
@see CollationKey"
      classrelation 341787 // <realization>
	relation 341787 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 341787 // <realization>
	  b parent class_ref 3094156 // Comparator
      end

      classrelation 341915 // <realization>
	relation 341915 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 341915 // <realization>
	  b parent class_ref 129435 // Cloneable
      end

      attribute 292379 "NO_DECOMPOSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant used to specify the decomposition rule.
"
      end

      attribute 292507 "CANONICAL_DECOMPOSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant used to specify the decomposition rule.
"
      end

      attribute 292635 "FULL_DECOMPOSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant used to specify the decomposition rule. This value for
decomposition is not supported.
"
      end

      attribute 292763 "PRIMARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant used to specify the collation strength.
"
      end

      attribute 292891 "SECONDARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant used to specify the collation strength.
"
      end

      attribute 293019 "TERTIARY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant used to specify the collation strength.
"
      end

      attribute 293147 "IDENTICAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant used to specify the collation strength.
"
      end

      classrelation 342043 // icuColl (<unidirectional association>)
	relation 342043 --->
	  a role_name "icuColl" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 342043 // icuColl (<unidirectional association>)
	  b parent class_ref 228891 // RuleBasedCollatorICU
      end

      operation 1114267 "Collator"
	package explicit_return_type ""
	nparams 1
	  param inout name "icuColl" type class_ref 228891 // RuleBasedCollatorICU
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1114395 "Collator"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Collator} instance."
      end

      operation 1114523 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new collator with the same decomposition mode and
strength value as this collator.

@return a shallow copy of this collator.
@see java.lang.Cloneable"
      end

      operation 1114651 "compare"
	public explicit_return_type "int"
	nparams 2
	  param inout name "object1" type class_ref 3401484 // Object
	  param inout name "object2" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two objects to determine their relative order. The objects must
be strings.

@param object1
           the first string to compare.
@param object2
           the second string to compare.
@return a negative value if {@code object1} is less than {@code object2},
        0 if they are equal, and a positive value if {@code object1} is
        greater than {@code object2}.
@throws ClassCastException
        if {@code object1} or {@code object2} is not a {@code String}."
      end

      operation 1114779 "compare"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "string1" type class_ref 3399692 // String
	  param inout name "string2" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two strings to determine their relative order.

@param string1
           the first string to compare.
@param string2
           the second string to compare.
@return a negative value if {@code string1} is less than {@code string2},
        0 if they are equal and a positive value if {@code string1} is
        greater than {@code string2}."
      end

      operation 1114907 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this collator with the specified object and indicates if they
are equal.

@param object
           the object to compare with this object.
@return {@code true} if {@code object} is a {@code Collator} object and
        it has the same strength and decomposition values as this
        collator; {@code false} otherwise.
@see #hashCode"
      end

      operation 1115035 "equals"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "string1" type class_ref 3399692 // String
	  param inout name "string2" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two strings using the collation rules to determine if they are
equal.

@param string1
           the first string to compare.
@param string2
           the second string to compare.
@return {@code true} if {@code string1} and {@code string2} are equal
        using the collation rules, false otherwise."
      end

      operation 1115163 "getAvailableLocales"
	class_operation public return_type class_ref 135835 // Locale
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of locales for which custom {@code Collator} instances
are available.
<p>Note that Android does not support user-supplied locale service providers."
      end

      operation 1115291 "getCollationKey"
	abstract public return_type class_ref 228635 // CollationKey
	nparams 1
	  param inout name "string" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link CollationKey} for the specified string for this collator
with the current decomposition rule and strength value.

@param string
           the source string that is converted into a collation key.
@return the collation key for {@code string}."
      end

      operation 1115419 "getDecomposition"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the decomposition rule for this collator.

@return the decomposition rule, either {@code NO_DECOMPOSITION} or
        {@code CANONICAL_DECOMPOSITION}. {@code FULL_DECOMPOSITION} is
        not supported."
      end

      operation 1115547 "getInstance"
	class_operation public return_type class_ref 228763 // Collator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collator} instance which is appropriate for the user's default
{@code Locale}.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\"."
      end

      operation 1115675 "getInstance"
	class_operation public return_type class_ref 228763 // Collator
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collator} instance which is appropriate for {@code locale}."
      end

      operation 1115803 "getStrength"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the strength value for this collator.

@return the strength value, either PRIMARY, SECONDARY, TERTIARY or
        IDENTICAL."
      end

      operation 1115931 "hashCode"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1116059 "setDecomposition"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the decomposition rule for this collator.

@param value
           the decomposition rule, either {@code NO_DECOMPOSITION} or
           {@code CANONICAL_DECOMPOSITION}. {@code FULL_DECOMPOSITION}
           is not supported.
@throws IllegalArgumentException
           if the provided decomposition rule is not valid. This includes
           {@code FULL_DECOMPOSITION}."
      end

      operation 1116187 "setStrength"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the strength value for this collator.

@param value
           the strength value, either PRIMARY, SECONDARY, TERTIARY, or
           IDENTICAL.
@throws IllegalArgumentException
           if the provided strength value is not valid."
      end

      operation 1116315 "decompositionMode_Java_ICU"
	private explicit_return_type "int"
	nparams 1
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1116443 "decompositionMode_ICU_Java"
	private explicit_return_type "int"
	nparams 1
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1116571 "strength_Java_ICU"
	private explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1116699 "strength_ICU_Java"
	private explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 229019 "DateFormat"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Formats or parses dates and times.

<p>This class provides factories for obtaining instances configured for a specific locale.
The most common subclass is {@link SimpleDateFormat}.

<h4>Sample Code</h4>
<p>This code:
<pre>
DateFormat[] formats = new DateFormat[] {
  DateFormat.getDateInstance(),
  DateFormat.getDateTimeInstance(),
  DateFormat.getTimeInstance(),
};
for (DateFormat df : formats) {
  System.out.println(df.format(new Date(0)));
  df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));
  System.out.println(df.format(new Date(0)));
}
</pre>

<p>Produces this output when run on an {@code en_US} device in the America/Los_Angeles time zone:
<pre>
Dec 31, 1969
Jan 1, 1970
Dec 31, 1969 4:00:00 PM
Jan 1, 1970 12:00:00 AM
4:00:00 PM
12:00:00 AM
</pre>
And will produce similarly appropriate localized human-readable output on any user's system.
Notice how the same point in time when formatted can appear to be a different time when rendered
for a different time zone. This is one reason why formatting should be left until the data will
only be presented to a human. Machines should interchange \"Unix time\" integers."
      classrelation 342171 // <generalisation>
	relation 342171 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 342171 // <generalisation>
	  b parent class_ref 227611 // Format
      end

      attribute 293275 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7218322306649953788L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 342299 // calendar (<unidirectional association>)
	relation 342299 --->
	  a role_name "calendar" protected
	    comment "
The calendar that this {@code DateFormat} uses to format a number
representing a date.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 342299 // calendar (<unidirectional association>)
	  b parent class_ref 221979 // Calendar
      end

      classrelation 342427 // numberFormat (<unidirectional association>)
	relation 342427 --->
	  a role_name "numberFormat" protected
	    comment "
The number format used to format a number.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 342427 // numberFormat (<unidirectional association>)
	  b parent class_ref 227483 // NumberFormat
      end

      attribute 293403 "DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The format style constant defining the default format style. The default
is MEDIUM.
"
      end

      attribute 293531 "FULL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The format style constant defining the full style.
"
      end

      attribute 293659 "LONG"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The format style constant defining the long style.
"
      end

      attribute 293787 "MEDIUM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The format style constant defining the medium style.
"
      end

      attribute 293915 "SHORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The format style constant defining the short style.
"
      end

      attribute 294043 "ERA_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code FieldPosition} selector for 'G' field alignment, corresponds
to the {@link Calendar#ERA} field.
"
      end

      attribute 294171 "YEAR_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code FieldPosition} selector for 'y' field alignment, corresponds
to the {@link Calendar#YEAR} field.
"
      end

      attribute 294299 "MONTH_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code FieldPosition} selector for 'M' field alignment, corresponds
to the {@link Calendar#MONTH} field.
"
      end

      attribute 294427 "DATE_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code FieldPosition} selector for 'd' field alignment, corresponds
to the {@link Calendar#DATE} field.
"
      end

      attribute 294555 "HOUR_OF_DAY1_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code FieldPosition} selector for 'k' field alignment, corresponds
to the {@link Calendar#HOUR_OF_DAY} field. {@code HOUR_OF_DAY1_FIELD} is
used for the one-based 24-hour clock. For example, 23:59 + 01:00 results
in 24:59.
"
      end

      attribute 294683 "HOUR_OF_DAY0_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code FieldPosition} selector for 'H' field alignment, corresponds
to the {@link Calendar#HOUR_OF_DAY} field. {@code HOUR_OF_DAY0_FIELD} is
used for the zero-based 24-hour clock. For example, 23:59 + 01:00 results
in 00:59.
"
      end

      attribute 294811 "MINUTE_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 'm' field alignment, corresponds to the
{@link Calendar#MINUTE} field.
"
      end

      attribute 294939 "SECOND_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 's' field alignment, corresponds to the
{@link Calendar#SECOND} field.
"
      end

      attribute 295067 "MILLISECOND_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 'S' field alignment, corresponds to the
{@link Calendar#MILLISECOND} field.
"
      end

      attribute 295195 "DAY_OF_WEEK_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 'E' field alignment, corresponds to the
{@link Calendar#DAY_OF_WEEK} field.
"
      end

      attribute 295323 "DAY_OF_YEAR_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 'D' field alignment, corresponds to the
{@link Calendar#DAY_OF_YEAR} field.
"
      end

      attribute 295451 "DAY_OF_WEEK_IN_MONTH_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 11"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 'F' field alignment, corresponds to the
{@link Calendar#DAY_OF_WEEK_IN_MONTH} field.
"
      end

      attribute 295579 "WEEK_OF_YEAR_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 12"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 'w' field alignment, corresponds to the
{@link Calendar#WEEK_OF_YEAR} field.
"
      end

      attribute 295707 "WEEK_OF_MONTH_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 13"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 'W' field alignment, corresponds to the
{@link Calendar#WEEK_OF_MONTH} field.
"
      end

      attribute 295835 "AM_PM_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 14"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 'a' field alignment, corresponds to the
{@link Calendar#AM_PM} field.
"
      end

      attribute 295963 "HOUR1_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 15"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "FieldPosition selector for 'h' field alignment, corresponding to the
{@link Calendar#HOUR} field.
"
      end

      attribute 296091 "HOUR0_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code FieldPosition} selector for 'K' field alignment, corresponding to the
{@link Calendar#HOUR} field.
"
      end

      attribute 296219 "TIMEZONE_FIELD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 17"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The {@code FieldPosition} selector for 'z' field alignment, corresponds
to the {@link Calendar#ZONE_OFFSET} and {@link Calendar#DST_OFFSET}
fields.
"
      end

      operation 1116827 "DateFormat"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of {@code DateFormat}."
      end

      operation 1116955 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new instance of {@code DateFormat} with the same properties."
      end

      operation 1117083 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this date format with the specified object and indicates if they
are equal.

@param object
           the object to compare with this date format.
@return {@code true} if {@code object} is a {@code DateFormat} object and
        it has the same properties as this date format; {@code false}
        otherwise.
@see #hashCode"
      end

      operation 1117211 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats the specified object as a string using the pattern of this date
format and appends the string to the specified string buffer.
<p>
If the {@code field} member of {@code field} contains a value specifying
a format field, then its {@code beginIndex} and {@code endIndex} members
will be updated with the position of the first occurrence of this field
in the formatted text.

@param object
           the source object to format, must be a {@code Date} or a
           {@code Number}. If {@code object} is a number then a date is
           constructed using the {@code longValue()} of the number.
@param buffer
           the target string buffer to append the formatted date/time to.
@param field
           on input: an optional alignment field; on output: the offsets
           of the alignment field in the formatted text.
@return the string buffer.
@throws IllegalArgumentException
           if {@code object} is neither a {@code Date} nor a
           {@code Number} instance."
      end

      operation 1117339 "format"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "date" type class_ref 171931 // Date
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the specified date using the rules of this date format.

@param date
           the date to format.
@return the formatted string."
      end

      operation 1117467 "format"
	abstract public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param inout name "date" type class_ref 171931 // Date
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the specified date as a string using the pattern of this date
format and appends the string to the specified string buffer.
<p>
If the {@code field} member of {@code field} contains a value specifying
a format field, then its {@code beginIndex} and {@code endIndex} members
will be updated with the position of the first occurrence of this field
in the formatted text.

@param date
           the date to format.
@param buffer
           the target string buffer to append the formatted date/time to.
@param field
           on input: an optional alignment field; on output: the offsets
           of the alignment field in the formatted text.
@return the string buffer."
      end

      operation 1117595 "getAvailableLocales"
	class_operation public return_type class_ref 135835 // Locale
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of locales for which custom {@code DateFormat} instances
are available.
<p>Note that Android does not support user-supplied locale service providers."
      end

      operation 1117723 "getCalendar"
	public return_type class_ref 221979 // Calendar
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the calendar used by this {@code DateFormat}.

@return the calendar used by this date format."
      end

      operation 1117851 "getDateInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing dates in
the DEFAULT style for the default locale.

@return the {@code DateFormat} instance for the default style and locale."
      end

      operation 1117979 "getDateInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 1
	  param in name "style" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing dates in
the specified style for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
@param style
           one of SHORT, MEDIUM, LONG, FULL, or DEFAULT.
@return the {@code DateFormat} instance for {@code style} and the default
        locale.
@throws IllegalArgumentException
            if {@code style} is not one of SHORT, MEDIUM, LONG, FULL, or
            DEFAULT."
      end

      operation 1118107 "getDateInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 2
	  param in name "style" explicit_type "int"
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing dates in
the specified style for the specified locale.

@param style
           one of SHORT, MEDIUM, LONG, FULL, or DEFAULT.
@param locale
           the locale.
@throws IllegalArgumentException
            if {@code style} is not one of SHORT, MEDIUM, LONG, FULL, or
            DEFAULT.
@return the {@code DateFormat} instance for {@code style} and
        {@code locale}."
      end

      operation 1118235 "getDateTimeInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing dates
and time values in the DEFAULT style for the default locale.

@return the {@code DateFormat} instance for the default style and locale."
      end

      operation 1118363 "getDateTimeInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 2
	  param in name "dateStyle" explicit_type "int"
	  param in name "timeStyle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing of both
dates and time values in the manner appropriate for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
@param dateStyle
           one of SHORT, MEDIUM, LONG, FULL, or DEFAULT.
@param timeStyle
           one of SHORT, MEDIUM, LONG, FULL, or DEFAULT.
@return the {@code DateFormat} instance for {@code dateStyle},
        {@code timeStyle} and the default locale.
@throws IllegalArgumentException
            if {@code dateStyle} or {@code timeStyle} is not one of
            SHORT, MEDIUM, LONG, FULL, or DEFAULT."
      end

      operation 1118491 "getDateTimeInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 3
	  param in name "dateStyle" explicit_type "int"
	  param in name "timeStyle" explicit_type "int"
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing dates
and time values in the specified styles for the specified locale.

@param dateStyle
           one of SHORT, MEDIUM, LONG, FULL, or DEFAULT.
@param timeStyle
           one of SHORT, MEDIUM, LONG, FULL, or DEFAULT.
@param locale
           the locale.
@return the {@code DateFormat} instance for {@code dateStyle},
        {@code timeStyle} and {@code locale}.
@throws IllegalArgumentException
            if {@code dateStyle} or {@code timeStyle} is not one of
            SHORT, MEDIUM, LONG, FULL, or DEFAULT."
      end

      operation 1118619 "getInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing dates
and times in the SHORT style for the default locale.

@return the {@code DateFormat} instance for the SHORT style and default
        locale."
      end

      operation 1118747 "getNumberFormat"
	public return_type class_ref 227483 // NumberFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code NumberFormat} used by this {@code DateFormat}.

@return the {@code NumberFormat} used by this date format."
      end

      operation 1118875 "getTimeInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing time
values in the DEFAULT style for the default locale.

@return the {@code DateFormat} instance for the default style and locale."
      end

      operation 1119003 "getTimeInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 1
	  param in name "style" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing time
values in the specified style for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
@param style
           one of SHORT, MEDIUM, LONG, FULL, or DEFAULT.
@return the {@code DateFormat} instance for {@code style} and the default
        locale.
@throws IllegalArgumentException
            if {@code style} is not one of SHORT, MEDIUM, LONG, FULL, or
            DEFAULT."
      end

      operation 1119131 "getTimeInstance"
	class_operation public return_type class_ref 229019 // DateFormat
	nparams 2
	  param in name "style" explicit_type "int"
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DateFormat} instance for formatting and parsing time
values in the specified style for the specified locale.

@param style
           one of SHORT, MEDIUM, LONG, FULL, or DEFAULT.
@param locale
           the locale.
@throws IllegalArgumentException
            if {@code style} is not one of SHORT, MEDIUM, LONG, FULL, or
            DEFAULT.
@return the {@code DateFormat} instance for {@code style} and
        {@code locale}."
      end

      operation 1119259 "getTimeZone"
	public return_type class_ref 229147 // TimeZone
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time zone of this date format's calendar.

@return the time zone of the calendar used by this date format."
      end

      operation 1119387 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1119515 "isLenient"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the calendar used by this date format is lenient.

@return {@code true} if the calendar is lenient; {@code false} otherwise."
      end

      operation 1119643 "parse"
	public return_type class_ref 171931 // Date
	nparams 1
	  param inout name "string" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 227867 // ParseException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses a date from the specified string using the rules of this date
format.

@param string
           the string to parse.
@return the {@code Date} resulting from the parsing.
@throws ParseException
        if an error occurs during parsing."
      end

      operation 1119771 "parse"
	abstract public return_type class_ref 171931 // Date
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses a date from the specified string starting at the index specified
by {@code position}. If the string is successfully parsed then the index
of the {@code ParsePosition} is updated to the index following the parsed
text. On error, the index is unchanged and the error index of {@code
ParsePosition} is set to the index where the error occurred.
<p>
By default, parsing is lenient: If the input is not in the form used by
this object's format method but can still be parsed as a date, then the
parse succeeds. Clients may insist on strict adherence to the format by
calling {@code setLenient(false)}.

@param string
           the string to parse.
@param position
           input/output parameter, specifies the start index in {@code
           string} from where to start parsing. If parsing is successful,
           it is updated with the index following the parsed text; on
           error, the index is unchanged and the error index is set to
           the index where the error occurred.
@return the date resulting from the parse, or {@code null} if there is an
        error."
      end

      operation 1119899 "parseObject"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Parses a date from the specified string starting at the index specified
by {@code position}. If the string is successfully parsed then the index
of the {@code ParsePosition} is updated to the index following the parsed
text. On error, the index is unchanged and the error index of
{@code ParsePosition} is set to the index where the error occurred.
<p>
By default, parsing is lenient: If the input is not in the form used by
this object's format method but can still be parsed as a date, then the
parse succeeds. Clients may insist on strict adherence to the format by
calling {@code setLenient(false)}.

@param string
           the string to parse.
@param position
           input/output parameter, specifies the start index in
           {@code string} from where to start parsing. If parsing is
           successful, it is updated with the index following the parsed
           text; on error, the index is unchanged and the error index
           is set to the index where the error occurred.
@return the date resulting from the parsing, or {@code null} if there is
        an error."
      end

      operation 1120027 "setCalendar"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cal" type class_ref 221979 // Calendar
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the calendar used by this date format.

@param cal
           the new calendar."
      end

      operation 1120155 "setLenient"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether or not date/time parsing shall be lenient. With lenient
parsing, the parser may use heuristics to interpret inputs that do not
precisely match this object's format. With strict parsing, inputs must
match this object's format.

@param value
           {@code true} to set the calendar to be lenient, {@code false}
           otherwise."
      end

      operation 1120283 "setNumberFormat"
	public explicit_return_type "void"
	nparams 1
	  param inout name "format" type class_ref 227483 // NumberFormat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code NumberFormat} used by this date format.

@param format
           the new number format."
      end

      operation 1120411 "setTimeZone"
	public explicit_return_type "void"
	nparams 1
	  param inout name "timezone" type class_ref 229147 // TimeZone
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time zone of the calendar used by this date format.

@param timezone
           the new time zone."
      end
    end

    class 229275 "DateFormatSymbols"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Encapsulates localized date-time formatting data, such as the names of the
months, the names of the days of the week, and the time zone data.
{@code DateFormat} and {@code SimpleDateFormat} both use
{@code DateFormatSymbols} to encapsulate this information.

<p>Typically you shouldn't use {@code DateFormatSymbols} directly. Rather, you
are encouraged to create a date/time formatter with the {@code DateFormat}
class's factory methods: {@code getTimeInstance}, {@code getDateInstance},
or {@code getDateTimeInstance}. These methods automatically create a
{@code DateFormatSymbols} for the formatter so that you don't have to. After
the formatter is created, you may modify its format pattern using the
{@code setPattern} method. For more information about creating formatters
using {@code DateFormat}'s factory methods, see {@link DateFormat}.

<p>Direct use of {@code DateFormatSymbols} is likely to be less efficient
because the implementation cannot make assumptions about user-supplied/user-modifiable data
to the same extent that it can with its own built-in data.

@see DateFormat
@see SimpleDateFormat"
      classrelation 342555 // <realization>
	relation 342555 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 342555 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      classrelation 342683 // <realization>
	relation 342683 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 342683 // <realization>
	  b parent class_ref 129435 // Cloneable
      end

      attribute 296347 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5987973545549424702L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 342811 // localPatternChars (<unidirectional association>)
	relation 342811 --->
	  a role_name "localPatternChars" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 342811 // localPatternChars (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 342939 // ampms (<unidirectional association>)
	relation 342939 --->
	  a role_name "ampms" multiplicity "[]" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 342939 // ampms (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 343067 // eras (<unidirectional association>)
	relation 343067 --->
	  a role_name "eras" multiplicity "[]" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 343067 // eras (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 343195 // months (<unidirectional association>)
	relation 343195 --->
	  a role_name "months" multiplicity "[]" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 343195 // months (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 343323 // shortMonths (<unidirectional association>)
	relation 343323 --->
	  a role_name "shortMonths" multiplicity "[]" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 343323 // shortMonths (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 343451 // shortWeekdays (<unidirectional association>)
	relation 343451 --->
	  a role_name "shortWeekdays" multiplicity "[]" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 343451 // shortWeekdays (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 343579 // weekdays (<unidirectional association>)
	relation 343579 --->
	  a role_name "weekdays" multiplicity "[]" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 343579 // weekdays (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 343707 // localeData (<unidirectional association>)
	relation 343707 --->
	  a role_name "localeData" package
	    comment " This is used to implement parts of Unicode UTS #35 not historically supported.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 343707 // localeData (<unidirectional association>)
	  b parent class_ref 229403 // LocaleData
      end

      classrelation 343835 // zoneStrings (<unidirectional association>)
	relation 343835 --->
	  a role_name "zoneStrings" multiplicity "[][]" package
	    comment " Localized display names.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 343835 // zoneStrings (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 296475 "customZoneStrings"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Has the user called setZoneStrings?"
      end

      classrelation 343963 // locale (<unidirectional association>)
	relation 343963 --->
	  a role_name "locale" const_relation package
	    comment "
Locale, necessary to lazily load time zone strings. We force the time
zone names to load upon serialization, so this will never be needed
post deserialization.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 343963 // locale (<unidirectional association>)
	  b parent class_ref 135835 // Locale
      end

      operation 1120539 "internalZoneStrings"
	package return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets zone strings, initializing them if necessary. Does not create
a defensive copy, so make sure you do so before exposing the returned
arrays to clients."
      end

      operation 1120667 "DateFormatSymbols"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code DateFormatSymbols} instance containing the
symbols for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\"."
      end

      operation 1120795 "DateFormatSymbols"
	public explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code DateFormatSymbols} instance containing the
symbols for the specified locale.

@param locale
           the locale."
      end

      operation 1120923 "getInstance"
	class_operation public return_type class_ref 229275 // DateFormatSymbols
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code DateFormatSymbols} instance for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@return an instance of {@code DateFormatSymbols}
@since 1.6"
      end

      operation 1121051 "getInstance"
	class_operation public return_type class_ref 229275 // DateFormatSymbols
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code DateFormatSymbols} for the given locale.

@param locale the locale
@return an instance of {@code DateFormatSymbols}
@throws NullPointerException if {@code locale == null}
@since 1.6"
      end

      operation 1121179 "getAvailableLocales"
	class_operation public return_type class_ref 135835 // Locale
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of locales for which custom {@code DateFormatSymbols} instances
are available.
<p>Note that Android does not support user-supplied locale service providers.
@since 1.6"
      end

      operation 1121307 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1121435 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "oos" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1121563 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1121691 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this object with the specified object and indicates if they are
equal.

@param object
           the object to compare with this object.
@return {@code true} if {@code object} is an instance of
        {@code DateFormatSymbols} and has the same symbols as this
        object, {@code false} otherwise.
@see #hashCode"
      end

      operation 1121819 "timeZoneStringsEqual"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "lhs" type class_ref 229275 // DateFormatSymbols
	  param inout name "rhs" type class_ref 229275 // DateFormatSymbols
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1121947 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1122075 "getAmPmStrings"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of strings which represent AM and PM. Use the
{@link java.util.Calendar} constants {@code Calendar.AM} and
{@code Calendar.PM} as indices for the array.

@return an array of strings."
      end

      operation 1122203 "getEras"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of strings which represent BC and AD. Use the
{@link java.util.Calendar} constants {@code GregorianCalendar.BC} and
{@code GregorianCalendar.AD} as indices for the array.

@return an array of strings."
      end

      operation 1122331 "getLocalPatternChars"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pattern characters used by {@link SimpleDateFormat} to
specify date and time fields.

@return a string containing the pattern characters."
      end

      operation 1122459 "getMonths"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of strings containing the full names of the months. Use
the {@link java.util.Calendar} constants {@code Calendar.JANUARY} etc. as
indices for the array.

@return an array of strings."
      end

      operation 1122587 "getShortMonths"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of strings containing the abbreviated names of the
months. Use the {@link java.util.Calendar} constants
{@code Calendar.JANUARY} etc. as indices for the array.

@return an array of strings."
      end

      operation 1122715 "getShortWeekdays"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of strings containing the abbreviated names of the days
of the week. Use the {@link java.util.Calendar} constants
{@code Calendar.SUNDAY} etc. as indices for the array.

@return an array of strings."
      end

      operation 1122843 "getWeekdays"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of strings containing the full names of the days of the
week. Use the {@link java.util.Calendar} constants
{@code Calendar.SUNDAY} etc. as indices for the array.

@return an array of strings."
      end

      operation 1122971 "getZoneStrings"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the two-dimensional array of strings containing localized names for time zones.
Each row is an array of five strings:
<ul>
<li>The time zone ID, for example \"America/Los_Angeles\".
    This is not localized, and is used as a key into the table.
<li>The long display name, for example \"Pacific Standard Time\".
<li>The short display name, for example \"PST\".
<li>The long display name for DST, for example \"Pacific Daylight Time\".
    This is the non-DST long name for zones that have never had DST, for
    example \"Central Standard Time\" for \"Canada/Saskatchewan\".
<li>The short display name for DST, for example \"PDT\". This is the
    non-DST short name for zones that have never had DST, for example
    \"CST\" for \"Canada/Saskatchewan\".
</ul>"
      end

      operation 1123099 "clone2dStringArray"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "array" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1123227 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1123355 "setAmPmStrings"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the array of strings which represent AM and PM. Use the
{@link java.util.Calendar} constants {@code Calendar.AM} and
{@code Calendar.PM} as indices for the array.

@param data
           the array of strings for AM and PM."
      end

      operation 1123483 "setEras"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the array of Strings which represent BC and AD. Use the
{@link java.util.Calendar} constants {@code GregorianCalendar.BC} and
{@code GregorianCalendar.AD} as indices for the array.

@param data
           the array of strings for BC and AD."
      end

      operation 1123611 "setLocalPatternChars"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the pattern characters used by {@link SimpleDateFormat} to specify
date and time fields.

@param data
           the string containing the pattern characters.
@throws NullPointerException
           if {@code data} is null"
      end

      operation 1123739 "setMonths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the array of strings containing the full names of the months. Use
the {@link java.util.Calendar} constants {@code Calendar.JANUARY} etc. as
indices for the array.

@param data
           the array of strings."
      end

      operation 1123867 "setShortMonths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the array of strings containing the abbreviated names of the months.
Use the {@link java.util.Calendar} constants {@code Calendar.JANUARY}
etc. as indices for the array.

@param data
           the array of strings."
      end

      operation 1123995 "setShortWeekdays"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the array of strings containing the abbreviated names of the days of
the week. Use the {@link java.util.Calendar} constants
{@code Calendar.SUNDAY} etc. as indices for the array.

@param data
           the array of strings."
      end

      operation 1124123 "setWeekdays"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the array of strings containing the full names of the days of the
week. Use the {@link java.util.Calendar} constants
{@code Calendar.SUNDAY} etc. as indices for the array.

@param data
           the array of strings."
      end

      operation 1124251 "setZoneStrings"
	public explicit_return_type "void"
	nparams 1
	  param inout name "zoneStrings" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the two-dimensional array of strings containing localized names for time zones.
See {@link #getZoneStrings} for details.
@throws IllegalArgumentException if any row has fewer than 5 elements.
@throws NullPointerException if {@code zoneStrings == null}."
      end
    end

    class 229531 "DecimalFormat"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A concrete subclass of {@link NumberFormat} that formats decimal numbers. It
has a variety of features designed to make it possible to parse and format
numbers in any locale, including support for Western, Arabic, or Indic
digits. It also supports different flavors of numbers, including integers
(\"123\"), fixed-point numbers (\"123.4\"), scientific notation (\"1.23E4\"),
percentages (\"12%\"), and currency amounts (\"$123\"). All of these flavors can
be easily localized.
<p>
<strong>This is an enhanced version of {@code DecimalFormat} that is based on
the standard version in the RI. New or changed functionality is labeled
<strong><font color=\"red\">NEW</font></strong>.</strong>
<p>
To obtain a {@link NumberFormat} for a specific locale (including the default
locale), call one of {@code NumberFormat}'s factory methods such as
{@code NumberFormat.getInstance}. Do not call the {@code DecimalFormat}
constructors directly, unless you know what you are doing, since the
{@link NumberFormat} factory methods may return subclasses other than
{@code DecimalFormat}. If you need to customize the format object, do
something like this: <blockquote>

<pre>
NumberFormat f = NumberFormat.getInstance(loc);
if (f instanceof DecimalFormat) {
    ((DecimalFormat)f).setDecimalSeparatorAlwaysShown(true);
}
</pre>

</blockquote>

<h4>Patterns</h4>
<p>
A {@code DecimalFormat} consists of a <em>pattern</em> and a set of
<em>symbols</em>. The pattern may be set directly using
{@link #applyPattern(String)}, or indirectly using other API methods which
manipulate aspects of the pattern, such as the minimum number of integer
digits. The symbols are stored in a {@link DecimalFormatSymbols} object. When
using the {@link NumberFormat} factory methods, the pattern and symbols are
read from ICU's locale data.
<h4>Special Pattern Characters</h4>
<p>
Many characters in a pattern are taken literally; they are matched during
parsing and are written out unchanged during formatting. On the other hand,
special characters stand for other characters, strings, or classes of
characters. For example, the '#' character is replaced by a localized digit.
Often the replacement character is the same as the pattern character; in the
U.S. locale, the ',' grouping character is replaced by ','. However, the
replacement is still happening, and if the symbols are modified, the grouping
character changes. Some special characters affect the behavior of the
formatter by their presence; for example, if the percent character is seen,
then the value is multiplied by 100 before being displayed.
<p>
To insert a special character in a pattern as a literal, that is, without any
special meaning, the character must be quoted. There are some exceptions to
this which are noted below.
<p>
The characters listed here are used in non-localized patterns. Localized
patterns use the corresponding characters taken from this formatter's
{@link DecimalFormatSymbols} object instead, and these characters lose their
special status. Two exceptions are the currency sign and quote, which are not
localized.
<blockquote> <table border=\"0\" cellspacing=\"3\" cellpadding=\"0\" summary=\"Chart
showing symbol, location, localized, and meaning.\">
<tr bgcolor=\"#ccccff\">
<th align=\"left\">Symbol</th>
<th align=\"left\">Location</th>
<th align=\"left\">Localized?</th>
<th align=\"left\">Meaning</th>
</tr>
<tr valign=\"top\">
<td>{@code 0}</td>
<td>Number</td>
<td>Yes</td>
<td>Digit.</td>
</tr>
<tr valign=\"top\">
<td>{@code @}</td>
<td>Number</td>
<td>No</td>
<td><strong><font color=\"red\">NEW</font>&nbsp;</strong> Significant
digit.</td>
</tr>
<tr valign=\"top\" bgcolor=\"#eeeeff\">
<td>{@code #}</td>
<td>Number</td>
<td>Yes</td>
<td>Digit, leading zeroes are not shown.</td>
</tr>
<tr valign=\"top\">
<td>{@code .}</td>
<td>Number</td>
<td>Yes</td>
<td>Decimal separator or monetary decimal separator.</td>
</tr>
<tr valign=\"top\" bgcolor=\"#eeeeff\">
<td>{@code -}</td>
<td>Number</td>
<td>Yes</td>
<td>Minus sign.</td>
</tr>
<tr valign=\"top\">
<td>{@code ,}</td>
<td>Number</td>
<td>Yes</td>
<td>Grouping separator.</td>
</tr>
<tr valign=\"top\" bgcolor=\"#eeeeff\">
<td>{@code E}</td>
<td>Number</td>
<td>Yes</td>
<td>Separates mantissa and exponent in scientific notation.
<em>Does not need to be quoted in prefix or suffix.</em></td>
</tr>
<tr valign=\"top\">
<td>{@code +}</td>
<td>Exponent</td>
<td>Yes</td>
<td><strong><font color=\"red\">NEW</font>&nbsp;</strong> Prefix
positive exponents with localized plus sign.
<em>Does not need to be quoted in prefix or suffix.</em></td>
</tr>
<tr valign=\"top\" bgcolor=\"#eeeeff\">
<td>{@code ;}</td>
<td>Subpattern boundary</td>
<td>Yes</td>
<td>Separates positive and negative subpatterns.</td>
</tr>
<tr valign=\"top\">
<td>{@code %}</td>
<td>Prefix or suffix</td>
<td>Yes</td>
<td>Multiply by 100 and show as percentage.</td>
</tr>
<tr valign=\"top\" bgcolor=\"#eeeeff\">
<td>{@code \\u2030} ({@code \\u005Cu2030})</td>
<td>Prefix or suffix</td>
<td>Yes</td>
<td>Multiply by 1000 and show as per mille.</td>
</tr>
<tr valign=\"top\">
<td>{@code \\u00A4} ({@code \\u005Cu00A4})</td>
<td>Prefix or suffix</td>
<td>No</td>
<td>Currency sign, replaced by currency symbol. If doubled, replaced by
international currency symbol. If present in a pattern, the monetary decimal
separator is used instead of the decimal separator.</td>
</tr>
<tr valign=\"top\" bgcolor=\"#eeeeff\">
<td>{@code '}</td>
<td>Prefix or suffix</td>
<td>No</td>
<td>Used to quote special characters in a prefix or suffix, for example,
{@code \"'#'#\"} formats 123 to {@code \"#123\"}. To create a single quote
itself, use two in a row: {@code \"# o''clock\"}.</td>
</tr>
<tr valign=\"top\">
<td>{@code *}</td>
<td>Prefix or suffix boundary</td>
<td>Yes</td>
<td><strong><font color=\"red\">NEW</font>&nbsp;</strong> Pad escape,
precedes pad character. </td>
</tr>
</table> </blockquote>
<p>
A {@code DecimalFormat} pattern contains a positive and negative subpattern,
for example, \"#,##0.00;(#,##0.00)\". Each subpattern has a prefix, a numeric
part and a suffix. If there is no explicit negative subpattern, the negative
subpattern is the localized minus sign prefixed to the positive subpattern.
That is, \"0.00\" alone is equivalent to \"0.00;-0.00\". If there is an explicit
negative subpattern, it serves only to specify the negative prefix and
suffix; the number of digits, minimal digits, and other characteristics are
ignored in the negative subpattern. This means that \"#,##0.0#;(#)\" produces
precisely the same result as \"#,##0.0#;(#,##0.0#)\".
<p>
The prefixes, suffixes, and various symbols used for infinity, digits,
thousands separators, decimal separators, etc. may be set to arbitrary
values, and they will appear properly during formatting. However, care must
be taken that the symbols and strings do not conflict, or parsing will be
unreliable. For example, either the positive and negative prefixes or the
suffixes must be distinct for {@link #parse} to be able to distinguish
positive from negative values. Another example is that the decimal separator
and thousands separator should be distinct characters, or parsing will be
impossible.
<p>
The <em>grouping separator</em> is a character that separates clusters of
integer digits to make large numbers more legible. It is commonly used for
thousands, but in some locales it separates ten-thousands. The <em>grouping
size</em>
is the number of digits between the grouping separators, such as 3 for
\"100,000,000\" or 4 for \"1 0000 0000\". There are actually two different
grouping sizes: One used for the least significant integer digits, the
<em>primary grouping size</em>, and one used for all others, the
<em>secondary grouping size</em>. In most locales these are the same, but
sometimes they are different. For example, if the primary grouping interval
is 3, and the secondary is 2, then this corresponds to the pattern
\"#,##,##0\", and the number 123456789 is formatted as \"12,34,56,789\". If a
pattern contains multiple grouping separators, the interval between the last
one and the end of the integer defines the primary grouping size, and the
interval between the last two defines the secondary grouping size. All others
are ignored, so \"#,##,###,####\", \"###,###,####\" and \"##,#,###,####\" produce
the same result.
<p>
Illegal patterns, such as \"#.#.#\" or \"#.###,###\", will cause
{@code DecimalFormat} to throw an {@link IllegalArgumentException} with a
message that describes the problem.
<h4>Pattern BNF</h4>

<pre>
pattern    := subpattern (';' subpattern)?
subpattern := prefix? number exponent? suffix?
number     := (integer ('.' fraction)?) | sigDigits
prefix     := '\\\\u0000'..'\\\\uFFFD' - specialCharacters
suffix     := '\\\\u0000'..'\\\\uFFFD' - specialCharacters
integer    := '#'* '0'* '0'
fraction   := '0'* '#'*
sigDigits  := '#'* '@' '@'* '#'*
exponent   := 'E' '+'? '0'* '0'
padSpec    := '*' padChar
padChar    := '\\\\u0000'..'\\\\uFFFD' - quote

Notation:
  X*       0 or more instances of X
  X?       0 or 1 instances of X
  X|Y      either X or Y
  C..D     any character from C up to D, inclusive
  S-T      characters in S, except those in T
</pre>

The first subpattern is for positive numbers. The second (optional)
subpattern is for negative numbers.
<p>
Not indicated in the BNF syntax above:
<ul>
<li>The grouping separator ',' can occur inside the integer and sigDigits
elements, between any two pattern characters of that element, as long as the
integer or sigDigits element is not followed by the exponent element.
<li><font color=\"red\"><strong>NEW</strong>&nbsp;</font> Two
grouping intervals are recognized: The one between the decimal point and the
first grouping symbol and the one between the first and second grouping
symbols. These intervals are identical in most locales, but in some locales
they differ. For example, the pattern &quot;#,##,###&quot; formats the number
123456789 as &quot;12,34,56,789&quot;.</li>
<li> <strong><font color=\"red\">NEW</font>&nbsp;</strong> The pad
specifier {@code padSpec} may appear before the prefix, after the prefix,
before the suffix, after the suffix or not at all.
</ul>
<h4>Parsing</h4>
<p>
{@code DecimalFormat} parses all Unicode characters that represent decimal
digits, as defined by {@link Character#digit(int, int)}. In addition,
{@code DecimalFormat} also recognizes as digits the ten consecutive
characters starting with the localized zero digit defined in the
{@link DecimalFormatSymbols} object. During formatting, the
{@link DecimalFormatSymbols}-based digits are written out.
<p>
During parsing, grouping separators are ignored.
<p>
If {@link #parse(String, ParsePosition)} fails to parse a string, it returns
{@code null} and leaves the parse position unchanged.
<h4>Formatting</h4>
<p>
Formatting is guided by several parameters, all of which can be specified
either using a pattern or using the API. The following description applies to
formats that do not use <a href=\"#sci\">scientific notation</a> or <a
href=\"#sigdig\">significant digits</a>.
<ul>
<li>If the number of actual integer digits exceeds the
<em>maximum integer digits</em>, then only the least significant digits
are shown. For example, 1997 is formatted as \"97\" if maximum integer digits
is set to 2.
<li>If the number of actual integer digits is less than the
<em>minimum integer digits</em>, then leading zeros are added. For
example, 1997 is formatted as \"01997\" if minimum integer digits is set to 5.
<li>If the number of actual fraction digits exceeds the <em>maximum
fraction digits</em>,
then half-even rounding is performed to the maximum fraction digits. For
example, 0.125 is formatted as \"0.12\" if the maximum fraction digits is 2.
<li>If the number of actual fraction digits is less than the
<em>minimum fraction digits</em>, then trailing zeros are added. For
example, 0.125 is formatted as \"0.1250\" if the minimum fraction digits is set
to 4.
<li>Trailing fractional zeros are not displayed if they occur <em>j</em>
positions after the decimal, where <em>j</em> is less than the maximum
fraction digits. For example, 0.10004 is formatted as \"0.1\" if the maximum
fraction digits is four or less.
</ul>
<p>
<strong>Special Values</strong>
<p>
{@code NaN} is represented as a single character, typically
{@code \\u005cuFFFD}. This character is determined by the
{@link DecimalFormatSymbols} object. This is the only value for which the
prefixes and suffixes are not used.
<p>
Infinity is represented as a single character, typically {@code \\u005cu221E},
with the positive or negative prefixes and suffixes applied. The infinity
character is determined by the {@link DecimalFormatSymbols} object. <a
name=\"sci\">
<h4>Scientific Notation</h4>
</a>
<p>
Numbers in scientific notation are expressed as the product of a mantissa and
a power of ten, for example, 1234 can be expressed as 1.234 x 10<sup>3</sup>.
The mantissa is typically in the half-open interval [1.0, 10.0) or sometimes
[0.0, 1.0), but it does not need to be. {@code DecimalFormat} supports
arbitrary mantissas. {@code DecimalFormat} can be instructed to use
scientific notation through the API or through the pattern. In a pattern, the
exponent character immediately followed by one or more digit characters
indicates scientific notation. Example: \"0.###E0\" formats the number 1234 as
\"1.234E3\".
<ul>
<li>The number of digit characters after the exponent character gives the
minimum exponent digit count. There is no maximum. Negative exponents are
formatted using the localized minus sign, <em>not</em> the prefix and
suffix from the pattern. This allows patterns such as \"0.###E0 m/s\". To
prefix positive exponents with a localized plus sign, specify '+' between the
exponent and the digits: \"0.###E+0\" will produce formats \"1E+1\", \"1E+0\",
\"1E-1\", etc. (In localized patterns, use the localized plus sign rather than
'+'.)
<li>The minimum number of integer digits is achieved by adjusting the
exponent. Example: 0.00123 formatted with \"00.###E0\" yields \"12.3E-4\". This
only happens if there is no maximum number of integer digits. If there is a
maximum, then the minimum number of integer digits is fixed at one.
<li>The maximum number of integer digits, if present, specifies the exponent
grouping. The most common use of this is to generate <em>engineering
notation</em>,
in which the exponent is a multiple of three, e.g., \"##0.###E0\". The number
12345 is formatted using \"##0.###E0\" as \"12.345E3\".
<li>When using scientific notation, the formatter controls the digit counts
using significant digits logic. The maximum number of significant digits
limits the total number of integer and fraction digits that will be shown in
the mantissa; it does not affect parsing. For example, 12345 formatted with
\"##0.##E0\" is \"12.3E3\". See the section on significant digits for more
details.
<li>The number of significant digits shown is determined as follows: If no
significant digits are used in the pattern then the minimum number of
significant digits shown is one, the maximum number of significant digits
shown is the sum of the <em>minimum integer</em> and
<em>maximum fraction</em> digits, and it is unaffected by the maximum
integer digits. If this sum is zero, then all significant digits are shown.
If significant digits are used in the pattern then the number of integer
digits is fixed at one and there is no exponent grouping.
<li>Exponential patterns may not contain grouping separators.
</ul>
<a name=\"sigdig\">
<h4> <strong><font color=\"red\">NEW</font>&nbsp;</strong> Significant
Digits</h4>
<p>
</a> {@code DecimalFormat} has two ways of controlling how many digits are
shown: (a) significant digit counts or (b) integer and fraction digit counts.
Integer and fraction digit counts are described above. When a formatter uses
significant digits counts, the number of integer and fraction digits is not
specified directly, and the formatter settings for these counts are ignored.
Instead, the formatter uses as many integer and fraction digits as required
to display the specified number of significant digits.
<h5>Examples:</h5>
<blockquote> <table border=0 cellspacing=3 cellpadding=0>
<tr bgcolor=\"#ccccff\">
<th align=\"left\">Pattern</th>
<th align=\"left\">Minimum significant digits</th>
<th align=\"left\">Maximum significant digits</th>
<th align=\"left\">Number</th>
<th align=\"left\">Output of format()</th>
</tr>
<tr valign=\"top\">
<td>{@code @@@}
<td>3</td>
<td>3</td>
<td>12345</td>
<td>{@code 12300}</td>
</tr>
<tr valign=\"top\" bgcolor=\"#eeeeff\">
<td>{@code @@@}</td>
<td>3</td>
<td>3</td>
<td>0.12345</td>
<td>{@code 0.123}</td>
</tr>
<tr valign=\"top\">
<td>{@code @@##}</td>
<td>2</td>
<td>4</td>
<td>3.14159</td>
<td>{@code 3.142}</td>
</tr>
<tr valign=\"top\" bgcolor=\"#eeeeff\">
<td>{@code @@##}</td>
<td>2</td>
<td>4</td>
<td>1.23004</td>
<td>{@code 1.23}</td>
</tr>
</table> </blockquote>
<ul>
<li>Significant digit counts may be expressed using patterns that specify a
minimum and maximum number of significant digits. These are indicated by the
{@code '@'} and {@code '#'} characters. The minimum number of significant
digits is the number of {@code '@'} characters. The maximum number of
significant digits is the number of {@code '@'} characters plus the number of
{@code '#'} characters following on the right. For example, the pattern
{@code \"@@@\"} indicates exactly 3 significant digits. The pattern
{@code \"@##\"} indicates from 1 to 3 significant digits. Trailing zero digits
to the right of the decimal separator are suppressed after the minimum number
of significant digits have been shown. For example, the pattern {@code \"@##\"}
formats the number 0.1203 as {@code \"0.12\"}.
<li>If a pattern uses significant digits, it may not contain a decimal
separator, nor the {@code '0'} pattern character. Patterns such as
{@code \"@00\"} or {@code \"@.###\"} are disallowed.
<li>Any number of {@code '#'} characters may be prepended to the left of the
leftmost {@code '@'} character. These have no effect on the minimum and
maximum significant digit counts, but may be used to position grouping
separators. For example, {@code \"#,#@#\"} indicates a minimum of one
significant digit, a maximum of two significant digits, and a grouping size
of three.
<li>In order to enable significant digits formatting, use a pattern
containing the {@code '@'} pattern character.
<li>In order to disable significant digits formatting, use a pattern that
does not contain the {@code '@'} pattern character.
<li>The number of significant digits has no effect on parsing.
<li>Significant digits may be used together with exponential notation. Such
patterns are equivalent to a normal exponential pattern with a minimum and
maximum integer digit count of one, a minimum fraction digit count of the
number of '@' characters in the pattern - 1, and a maximum fraction digit
count of the number of '@' and '#' characters in the pattern - 1. For
example, the pattern {@code \"@@###E0\"} is equivalent to {@code \"0.0###E0\"}.
<li>If significant digits are in use then the integer and fraction digit
counts, as set via the API, are ignored.
</ul>
<h4> <strong><font color=\"red\">NEW</font>&nbsp;</strong> Padding</h4>
<p>
{@code DecimalFormat} supports padding the result of {@code format} to a
specific width. Padding may be specified either through the API or through
the pattern syntax. In a pattern, the pad escape character followed by a
single pad character causes padding to be parsed and formatted. The pad
escape character is '*' in unlocalized patterns. For example,
{@code \"$*x#,##0.00\"} formats 123 to {@code \"$xx123.00\"}, and 1234 to
{@code \"$1,234.00\"}.
<ul>
<li>When padding is in effect, the width of the positive subpattern,
including prefix and suffix, determines the format width. For example, in the
pattern {@code \"* #0 o''clock\"}, the format width is 10.</li>
<li>The width is counted in 16-bit code units (Java {@code char}s).</li>
<li>Some parameters which usually do not matter have meaning when padding is
used, because the pattern width is significant with padding. In the pattern \"*
##,##,#,##0.##\", the format width is 14. The initial characters \"##,##,\" do
not affect the grouping size or maximum integer digits, but they do affect
the format width.</li>
<li>Padding may be inserted at one of four locations: before the prefix,
after the prefix, before the suffix or after the suffix. If padding is
specified in any other location, {@link #applyPattern} throws an {@link
IllegalArgumentException}. If there is no prefix, before the prefix and after
the prefix are equivalent, likewise for the suffix.</li>
<li>When specified in a pattern, the 16-bit {@code char} immediately
following the pad escape is the pad character. This may be any character,
including a special pattern character. That is, the pad escape
<em>escapes</em> the following character. If there is no character after
the pad escape, then the pattern is illegal.</li>
</ul>
<h4>Synchronization</h4>
<p>
{@code DecimalFormat} objects are not synchronized. Multiple threads should
not access one formatter concurrently.

@see Format
@see NumberFormat"
      classrelation 344091 // <generalisation>
	relation 344091 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 344091 // <generalisation>
	  b parent class_ref 227483 // NumberFormat
      end

      attribute 296603 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 864413376551465018L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 344219 // symbols (<unidirectional association>)
	relation 344219 --->
	  a role_name "symbols" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 344219 // symbols (<unidirectional association>)
	  b parent class_ref 229659 // DecimalFormatSymbols
      end

      classrelation 344347 // ndf (<unidirectional association>)
	relation 344347 --->
	  a role_name "ndf" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 344347 // ndf (<unidirectional association>)
	  b parent class_ref 229787 // NativeDecimalFormat
      end

      classrelation 344475 // roundingMode (<unidirectional association>)
	relation 344475 --->
	  a role_name "roundingMode" init_value " RoundingMode.HALF_EVEN" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 344475 // roundingMode (<unidirectional association>)
	  b parent class_ref 166555 // RoundingMode
      end

      operation 1124379 "DecimalFormat"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code DecimalFormat} for formatting and parsing numbers
for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\"."
      end

      operation 1124507 "DecimalFormat"
	public explicit_return_type ""
	nparams 1
	  param inout name "pattern" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code DecimalFormat} using the specified non-localized
pattern and the {@code DecimalFormatSymbols} for the user's default Locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
@param pattern
           the non-localized pattern.
@throws IllegalArgumentException
           if the pattern cannot be parsed."
      end

      operation 1124635 "DecimalFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 3399692 // String
	  param inout name "value" type class_ref 229659 // DecimalFormatSymbols
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code DecimalFormat} using the specified non-localized
pattern and {@code DecimalFormatSymbols}.

@param pattern
           the non-localized pattern.
@param value
           the DecimalFormatSymbols.
@throws IllegalArgumentException
           if the pattern cannot be parsed."
      end

      operation 1124763 "DecimalFormat"
	package explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 3399692 // String
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Used by NumberFormat.getInstance because cloning DecimalFormatSymbols is slow."
      end

      operation 1124891 "initNative"
	private explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1125019 "applyLocalizedPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the pattern of this decimal format to the specified pattern which
uses localized pattern characters.

@param pattern
           the localized pattern.
@throws IllegalArgumentException
           if the pattern cannot be parsed."
      end

      operation 1125147 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pattern" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the pattern of this decimal format to the specified pattern which
uses non-localized pattern characters.

@param pattern
           the non-localized pattern.
@throws IllegalArgumentException
           if the pattern cannot be parsed."
      end

      operation 1125275 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new instance of {@code DecimalFormat} with the same pattern and
properties."
      end

      operation 1125403 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object to this decimal format and indicates if
they are equal. In order to be equal, {@code object} must be an instance
of {@code DecimalFormat} with the same pattern and properties.

@param object
           the object to compare with this object.
@return {@code true} if the specified object is equal to this decimal
        format; {@code false} otherwise.
@see #hashCode"
      end

      operation 1125531 "formatToCharacterIterator"
	public return_type class_ref 129051 // AttributedCharacterIterator
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats the specified object using the rules of this decimal format and
returns an {@code AttributedCharacterIterator} with the formatted number
and attributes.

@param object
           the object to format.
@return an AttributedCharacterIterator with the formatted number and
        attributes.
@throws IllegalArgumentException
            if {@code object} cannot be formatted by this format.
@throws NullPointerException
            if {@code object} is {@code null}."
      end

      operation 1125659 "checkBufferAndFieldPosition"
	private explicit_return_type "void"
	nparams 2
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "position" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1125787 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param in name "value" explicit_type "double"
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "position" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1125915 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param in name "value" explicit_type "long"
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "position" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1126043 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param inout name "number" type class_ref 3401484 // Object
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "position" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1126171 "getDecimalFormatSymbols"
	public return_type class_ref 229659 // DecimalFormatSymbols
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code DecimalFormatSymbols} used by this decimal format.

@return a copy of the {@code DecimalFormatSymbols} used by this decimal
        format."
      end

      operation 1126299 "getCurrency"
	public return_type class_ref 228251 // Currency
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the currency used by this decimal format.

@return the currency used by this decimal format.
@see DecimalFormatSymbols#getCurrency()"
      end

      operation 1126427 "getGroupingSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of digits grouped together by the grouping separator.
This only allows to get the primary grouping size. There is no API to get
the secondary grouping size.

@return the number of digits grouped together."
      end

      operation 1126555 "getMultiplier"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the multiplier which is applied to the number before formatting
or after parsing.

@return the multiplier."
      end

      operation 1126683 "getNegativePrefix"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the prefix which is formatted or parsed before a negative number.

@return the negative prefix."
      end

      operation 1126811 "getNegativeSuffix"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the suffix which is formatted or parsed after a negative number.

@return the negative suffix."
      end

      operation 1126939 "getPositivePrefix"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the prefix which is formatted or parsed before a positive number.

@return the positive prefix."
      end

      operation 1127067 "getPositiveSuffix"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the suffix which is formatted or parsed after a positive number.

@return the positive suffix."
      end

      operation 1127195 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1127323 "isDecimalSeparatorAlwaysShown"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the decimal separator is shown when there are no
fractional digits.

@return {@code true} if the decimal separator should always be formatted;
        {@code false} otherwise."
      end

      operation 1127451 "isParseBigDecimal"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This value indicates whether the return object of the parse operation is
of type {@code BigDecimal}. This value defaults to {@code false}.

@return {@code true} if parse always returns {@code BigDecimals},
        {@code false} if the type of the result is {@code Long} or
        {@code Double}."
      end

      operation 1127579 "setParseIntegerOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the flag that indicates whether numbers will be parsed as integers.
When this decimal format is used for parsing and this value is set to
{@code true}, then the resulting numbers will be of type
{@code java.lang.Integer}. Special cases are NaN, positive and negative
infinity, which are still returned as {@code java.lang.Double}.


@param value
           {@code true} that the resulting numbers of parse operations
           will be of type {@code java.lang.Integer} except for the
           special cases described above."
      end

      operation 1127707 "isParseIntegerOnly"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether parsing with this decimal format will only
return numbers of type {@code java.lang.Integer}.

@return {@code true} if this {@code DecimalFormat}'s parse method only
        returns {@code java.lang.Integer}; {@code false} otherwise."
      end

      classrelation 344603 // NEGATIVE_ZERO_DOUBLE (<unidirectional association>)
	relation 344603 --->
	  a role_name "NEGATIVE_ZERO_DOUBLE" init_value " new Double(-0.0)" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 344603 // NEGATIVE_ZERO_DOUBLE (<unidirectional association>)
	  b parent class_ref 152987 // Double
      end

      operation 1127835 "parse"
	public return_type class_ref 148379 // Number
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Parses a {@code Long} or {@code Double} from the specified string
starting at the index specified by {@code position}. If the string is
successfully parsed then the index of the {@code ParsePosition} is
updated to the index following the parsed text. On error, the index is
unchanged and the error index of {@code ParsePosition} is set to the
index where the error occurred.

@param string
           the string to parse.
@param position
           input/output parameter, specifies the start index in
           {@code string} from where to start parsing. If parsing is
           successful, it is updated with the index following the parsed
           text; on error, the index is unchanged and the error index is
           set to the index where the error occurred.
@return a {@code Long} or {@code Double} resulting from the parse or
        {@code null} if there is an error. The result will be a
        {@code Long} if the parsed number is an integer in the range of a
        long, otherwise the result is a {@code Double}. If
        {@code isParseBigDecimal} is {@code true} then it returns the
        result as a {@code BigDecimal}."
      end

      operation 1127963 "setDecimalFormatSymbols"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 229659 // DecimalFormatSymbols
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code DecimalFormatSymbols} used by this decimal format.

@param value
           the {@code DecimalFormatSymbols} to set."
      end

      operation 1128091 "setCurrency"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 228251 // Currency
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the currency used by this decimal format. The min and max fraction
digits remain the same.

@param currency
           the currency this {@code DecimalFormat} should use.
@see DecimalFormatSymbols#setCurrency(Currency)"
      end

      operation 1128219 "setDecimalSeparatorAlwaysShown"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the decimal separator is shown when there are no fractional
digits.

@param value
           {@code true} if the decimal separator should always be
           formatted; {@code false} otherwise."
      end

      operation 1128347 "setGroupingSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the number of digits grouped together by the grouping separator.
This only allows to set the primary grouping size; the secondary grouping
size can only be set with a pattern.

@param value
           the number of digits grouped together."
      end

      operation 1128475 "setGroupingUsed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets whether or not grouping will be used in this format. Grouping
affects both parsing and formatting.

@param value
           {@code true} if grouping is used; {@code false} otherwise."
      end

      operation 1128603 "isGroupingUsed"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates whether grouping will be used in this format.

@return {@code true} if grouping is used; {@code false} otherwise."
      end

      operation 1128731 "setMaximumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the maximum number of digits after the decimal point.
If the value passed is negative then it is replaced by 0.
Regardless of this setting, no more than 340 digits will be used.

@param value the maximum number of fraction digits."
      end

      operation 1128859 "setMaximumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the maximum number of digits before the decimal point.
If the value passed is negative then it is replaced by 0.
Regardless of this setting, no more than 309 digits will be used.

@param value the maximum number of integer digits."
      end

      operation 1128987 "setMinimumFractionDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the minimum number of digits after the decimal point.
If the value passed is negative then it is replaced by 0.
Regardless of this setting, no more than 340 digits will be used.

@param value the minimum number of fraction digits."
      end

      operation 1129115 "setMinimumIntegerDigits"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the minimum number of digits before the decimal point.
If the value passed is negative then it is replaced by 0.
Regardless of this setting, no more than 309 digits will be used.

@param value the minimum number of integer digits."
      end

      operation 1129243 "setMultiplier"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the multiplier which is applied to the number before formatting or
after parsing.

@param value
           the multiplier."
      end

      operation 1129371 "setNegativePrefix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the prefix which is formatted or parsed before a negative number.

@param value
           the negative prefix."
      end

      operation 1129499 "setNegativeSuffix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the suffix which is formatted or parsed after a negative number.

@param value
           the negative suffix."
      end

      operation 1129627 "setPositivePrefix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the prefix which is formatted or parsed before a positive number.

@param value
           the positive prefix."
      end

      operation 1129755 "setPositiveSuffix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the suffix which is formatted or parsed after a positive number.

@param value
           the positive suffix."
      end

      operation 1129883 "setParseBigDecimal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the behavior of the parse method. If set to {@code true} then all
the returned objects will be of type {@code BigDecimal}.

@param newValue
           {@code true} if all the returned objects should be of type
           {@code BigDecimal}; {@code false} otherwise."
      end

      operation 1130011 "toLocalizedPattern"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pattern of this decimal format using localized pattern
characters.

@return the localized pattern."
      end

      operation 1130139 "toPattern"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pattern of this decimal format using non-localized pattern
characters.

@return the non-localized pattern."
      end

      classrelation 344731 // serialPersistentFields (<unidirectional association>)
	relation 344731 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"positivePrefix\", String.class),
        new ObjectStreamField(\"positiveSuffix\", String.class),
        new ObjectStreamField(\"negativePrefix\", String.class),
        new ObjectStreamField(\"negativeSuffix\", String.class),
        new ObjectStreamField(\"posPrefixPattern\", String.class),
        new ObjectStreamField(\"posSuffixPattern\", String.class),
        new ObjectStreamField(\"negPrefixPattern\", String.class),
        new ObjectStreamField(\"negSuffixPattern\", String.class),
        new ObjectStreamField(\"multiplier\", int.class),
        new ObjectStreamField(\"groupingSize\", byte.class),
        new ObjectStreamField(\"groupingUsed\", boolean.class),
        new ObjectStreamField(\"decimalSeparatorAlwaysShown\", boolean.class),
        new ObjectStreamField(\"parseBigDecimal\", boolean.class),
        new ObjectStreamField(\"roundingMode\", RoundingMode.class),
        new ObjectStreamField(\"symbols\", DecimalFormatSymbols.class),
        new ObjectStreamField(\"useExponentialNotation\", boolean.class),
        new ObjectStreamField(\"minExponentDigits\", byte.class),
        new ObjectStreamField(\"maximumIntegerDigits\", int.class),
        new ObjectStreamField(\"minimumIntegerDigits\", int.class),
        new ObjectStreamField(\"maximumFractionDigits\", int.class),
        new ObjectStreamField(\"minimumFractionDigits\", int.class),
        new ObjectStreamField(\"serialVersionOnStream\", int.class),
    }" class_relation const_relation private
	    comment " the fields list to be serialized
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 344731 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      operation 1130267 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128411 // ObjectOutputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes serialized fields following serialized forms specified by Java
specification.

@param stream
           the output stream to write serialized bytes
@throws IOException
            if some I/O error occurs
@throws ClassNotFoundException"
      end

      operation 1130395 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads serialized fields following serialized forms specified by Java
specification.

@param stream
           the input stream to read serialized bytes
@throws IOException
            if some I/O error occurs
@throws ClassNotFoundException
            if some class of serialized objects or fields cannot be found"
      end

      operation 1130523 "getRoundingMode"
	public return_type class_ref 166555 // RoundingMode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code RoundingMode} used by this {@code NumberFormat}.
@since 1.6"
      end

      operation 1130651 "setRoundingMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "roundingMode" type class_ref 166555 // RoundingMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code RoundingMode} used by this {@code NumberFormat}.
@since 1.6"
      end
    end

    class 229659 "DecimalFormatSymbols"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Encapsulates the set of symbols (such as the decimal separator, the grouping
separator, and so on) needed by {@code DecimalFormat} to format numbers.
{@code DecimalFormat} internally creates an instance of
{@code DecimalFormatSymbols} from its locale data. If you need to change any
of these symbols, you can get the {@code DecimalFormatSymbols} object from
your {@code DecimalFormat} and modify it.

@see java.util.Locale
@see DecimalFormat"
      classrelation 344859 // <realization>
	relation 344859 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 344859 // <realization>
	  b parent class_ref 129435 // Cloneable
      end

      classrelation 344987 // <realization>
	relation 344987 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 344987 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 296731 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5772796243397350300L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 296859 "zeroDigit"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 296987 "digit"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 297115 "decimalSeparator"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 297243 "groupingSeparator"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 297371 "patternSeparator"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 297499 "percent"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 297627 "perMill"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 297755 "monetarySeparator"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 297883 "minusSign"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 345115 // infinity (<unidirectional association>)
	relation 345115 --->
	  a role_name "infinity" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 345115 // infinity (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 345243 // NaN (<unidirectional association>)
	relation 345243 --->
	  a role_name "NaN" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 345243 // NaN (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 345371 // currencySymbol (<unidirectional association>)
	relation 345371 --->
	  a role_name "currencySymbol" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 345371 // currencySymbol (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 345499 // intlCurrencySymbol (<unidirectional association>)
	relation 345499 --->
	  a role_name "intlCurrencySymbol" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 345499 // intlCurrencySymbol (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 345627 // currency (<unidirectional association>)
	relation 345627 --->
	  a role_name "currency" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 345627 // currency (<unidirectional association>)
	  b parent class_ref 228251 // Currency
      end

      classrelation 345755 // locale (<unidirectional association>)
	relation 345755 --->
	  a role_name "locale" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 345755 // locale (<unidirectional association>)
	  b parent class_ref 135835 // Locale
      end

      classrelation 345883 // exponentSeparator (<unidirectional association>)
	relation 345883 --->
	  a role_name "exponentSeparator" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 345883 // exponentSeparator (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1130779 "DecimalFormatSymbols"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code DecimalFormatSymbols} containing the symbols for
the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
Best practice is to create a {@code DecimalFormat}
and then to get the {@code DecimalFormatSymbols} from that object by
calling {@link DecimalFormat#getDecimalFormatSymbols()}."
      end

      operation 1130907 "DecimalFormatSymbols"
	public explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new DecimalFormatSymbols containing the symbols for the
specified Locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".
Best practice is to create a {@code DecimalFormat}
and then to get the {@code DecimalFormatSymbols} from that object by
calling {@link DecimalFormat#getDecimalFormatSymbols()}.

@param locale
           the locale."
      end

      operation 1131035 "getInstance"
	class_operation public return_type class_ref 229659 // DecimalFormatSymbols
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code DecimalFormatSymbols} instance for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@return an instance of {@code DecimalFormatSymbols}
@since 1.6"
      end

      operation 1131163 "getInstance"
	class_operation public return_type class_ref 229659 // DecimalFormatSymbols
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code DecimalFormatSymbols} for the given locale.

@param locale the locale
@return an instance of {@code DecimalFormatSymbols}
@throws NullPointerException if {@code locale == null}
@since 1.6"
      end

      operation 1131291 "getAvailableLocales"
	class_operation public return_type class_ref 135835 // Locale
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of locales for which custom {@code DecimalFormatSymbols} instances
are available.
<p>Note that Android does not support user-supplied locale service providers.
@since 1.6"
      end

      operation 1131419 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1131547 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object to this {@code DecimalFormatSymbols} and
indicates if they are equal. In order to be equal, {@code object} must be
an instance of {@code DecimalFormatSymbols} and contain the same symbols.

@param object
           the object to compare with this object.
@return {@code true} if the specified object is equal to this
        {@code DecimalFormatSymbols}; {@code false} otherwise.
@see #hashCode"
      end

      operation 1131675 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1131803 "getCurrency"
	public return_type class_ref 228251 // Currency
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currency.
<p>
{@code null} is returned if {@code setInternationalCurrencySymbol()} has
been previously called with a value that is not a valid ISO 4217 currency
code.
<p>

@return the currency that was set in the constructor or by calling
        {@code setCurrency()} or {@code setInternationalCurrencySymbol()},
        or {@code null} if an invalid currency was set.
@see #setCurrency(Currency)
@see #setInternationalCurrencySymbol(String)"
      end

      operation 1131931 "getInternationalCurrencySymbol"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the international currency symbol.

@return the international currency symbol as string."
      end

      operation 1132059 "getCurrencySymbol"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currency symbol.

@return the currency symbol as string."
      end

      operation 1132187 "getDecimalSeparator"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character which represents the decimal point in a number.

@return the decimal separator character."
      end

      operation 1132315 "getDigit"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character which represents a single digit in a format
pattern.

@return the digit pattern character."
      end

      operation 1132443 "getGroupingSeparator"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character used as the thousands separator in a number.

@return the thousands separator character."
      end

      operation 1132571 "getInfinity"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string which represents infinity.

@return the infinity symbol as a string."
      end

      operation 1132699 "getMinusSign"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minus sign character.

@return the minus sign as a character."
      end

      operation 1132827 "getMonetaryDecimalSeparator"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character which represents the decimal point in a monetary
value.

@return the monetary decimal point as a character."
      end

      operation 1132955 "getNaN"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string which represents NaN.

@return the symbol NaN as a string."
      end

      operation 1133083 "getPatternSeparator"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character which separates the positive and negative patterns
in a format pattern.

@return the pattern separator character."
      end

      operation 1133211 "getPercent"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the percent character.

@return the percent character."
      end

      operation 1133339 "getPerMill"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the per mill sign character.

@return the per mill sign character."
      end

      operation 1133467 "getZeroDigit"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character which represents zero.

@return the zero character."
      end

      operation 1133595 "getExponentSeparator"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string used to separate mantissa and exponent. Typically \"E\", as in \"1.2E3\".
@since 1.6"
      end

      operation 1133723 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1133851 "setCurrency"
	public explicit_return_type "void"
	nparams 1
	  param inout name "currency" type class_ref 228251 // Currency
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency.
<p>
The international currency symbol and the currency symbol are updated,
but the min and max number of fraction digits stays the same.
<p>

@param currency
           the new currency.
@throws NullPointerException
            if {@code currency} is {@code null}."
      end

      operation 1133979 "setInternationalCurrencySymbol"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the international currency symbol.
<p>
The currency and currency symbol are also updated if {@code value} is a
valid ISO4217 currency code.
<p>
The min and max number of fraction digits stay the same.

@param value
           the currency code."
      end

      operation 1134107 "setCurrencySymbol"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currency symbol.

@param value
           the currency symbol."
      end

      operation 1134235 "setDecimalSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character which represents the decimal point in a number.

@param value
           the decimal separator character."
      end

      operation 1134363 "setDigit"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character which represents a single digit in a format pattern.

@param value
           the digit character."
      end

      operation 1134491 "setGroupingSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character used as the thousands separator in a number.

@param value
           the grouping separator character."
      end

      operation 1134619 "setInfinity"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the string which represents infinity.

@param value
           the string representing infinity."
      end

      operation 1134747 "setMinusSign"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minus sign character.

@param value
           the minus sign character."
      end

      operation 1134875 "setMonetaryDecimalSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character which represents the decimal point in a monetary
value.

@param value
           the monetary decimal separator character."
      end

      operation 1135003 "setNaN"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the string which represents NaN.

@param value
           the string representing NaN."
      end

      operation 1135131 "setPatternSeparator"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character which separates the positive and negative patterns in
a format pattern.

@param value
           the pattern separator character."
      end

      operation 1135259 "setPercent"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the percent character.

@param value
           the percent character."
      end

      operation 1135387 "setPerMill"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the per mill sign character.

@param value
           the per mill character."
      end

      operation 1135515 "setZeroDigit"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the character which represents zero.

@param value
           the zero digit character."
      end

      operation 1135643 "setExponentSeparator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the string used to separate mantissa and exponent. Typically \"E\", as in \"1.2E3\".
@since 1.6"
      end

      classrelation 346011 // serialPersistentFields (<unidirectional association>)
	relation 346011 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"currencySymbol\", String.class),
        new ObjectStreamField(\"decimalSeparator\", char.class),
        new ObjectStreamField(\"digit\", char.class),
        new ObjectStreamField(\"exponential\", char.class),
        new ObjectStreamField(\"exponentialSeparator\", String.class),
        new ObjectStreamField(\"groupingSeparator\", char.class),
        new ObjectStreamField(\"infinity\", String.class),
        new ObjectStreamField(\"intlCurrencySymbol\", String.class),
        new ObjectStreamField(\"minusSign\", char.class),
        new ObjectStreamField(\"monetarySeparator\", char.class),
        new ObjectStreamField(\"NaN\", String.class),
        new ObjectStreamField(\"patternSeparator\", char.class),
        new ObjectStreamField(\"percent\", char.class),
        new ObjectStreamField(\"perMill\", char.class),
        new ObjectStreamField(\"serialVersionOnStream\", int.class),
        new ObjectStreamField(\"zeroDigit\", char.class),
        new ObjectStreamField(\"locale\", Locale.class),
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 346011 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      operation 1135771 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1135899 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 229915 "MessageFormat"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Produces concatenated messages in language-neutral way. New code
should probably use {@link java.util.Formatter} instead.
<p>
{@code MessageFormat} takes a set of objects, formats them and then
inserts the formatted strings into the pattern at the appropriate places.
<p>
<strong>Note:</strong> {@code MessageFormat} differs from the other
{@code Format} classes in that you create a {@code MessageFormat}
object with one of its constructors (not with a {@code getInstance}
style factory method). The factory methods aren't necessary because
{@code MessageFormat} itself doesn't implement locale-specific
behavior. Any locale-specific behavior is defined by the pattern that you
provide as well as the subformats used for inserted arguments.

<h4><a name=\"patterns\">Patterns and their interpretation</a></h4>

{@code MessageFormat} uses patterns of the following form:
<blockquote>

<pre>
<i>MessageFormatPattern:</i>
        <i>String</i>
        <i>MessageFormatPattern</i> <i>FormatElement</i> <i>String</i>
<i>FormatElement:</i>
        { <i>ArgumentIndex</i> }
        { <i>ArgumentIndex</i> , <i>FormatType</i> }
        { <i>ArgumentIndex</i> , <i>FormatType</i> , <i>FormatStyle</i> }
<i>FormatType: one of </i>
        number date time choice
<i>FormatStyle:</i>
        short
        medium
        long
        full
        integer
        currency
        percent
        <i>SubformatPattern</i>
<i>String:</i>
        <i>StringPart&lt;sub&gt;opt&lt;/sub&gt;</i>
        <i>String</i> <i>StringPart</i>
<i>StringPart:</i>
        ''
        ' <i>QuotedString</i> '
        <i>UnquotedString</i>
<i>SubformatPattern:</i>
        <i>SubformatPatternPart&lt;sub&gt;opt&lt;/sub&gt;</i>
        <i>SubformatPattern</i> <i>SubformatPatternPart</i>
<i>SubFormatPatternPart:</i>
        ' <i>QuotedPattern</i> '
        <i>UnquotedPattern</i>
</pre>

</blockquote>

<p>
Within a <i>String</i>, {@code \"''\"} represents a single quote. A
<i>QuotedString</i> can contain arbitrary characters except single quotes;
the surrounding single quotes are removed. An <i>UnquotedString</i> can
contain arbitrary characters except single quotes and left curly brackets.
Thus, a string that should result in the formatted message \"'{0}'\" can be
written as {@code \"'''{'0}''\"} or {@code \"'''{0}'''\"}.
<p>
Within a <i>SubformatPattern</i>, different rules apply. A <i>QuotedPattern</i>
can contain arbitrary characters except single quotes, but the surrounding
single quotes are <strong>not</strong> removed, so they may be interpreted
by the subformat. For example, {@code \"{1,number,$'#',##}\"} will
produce a number format with the hash-sign quoted, with a result such as:
\"$#31,45\". An <i>UnquotedPattern</i> can contain arbitrary characters except
single quotes, but curly braces within it must be balanced. For example,
{@code \"ab {0} de\"} and {@code \"ab '}' de\"} are valid subformat
patterns, but {@code \"ab {0'}' de\"} and {@code \"ab } de\"} are
not.
<dl>
<dt><b>Warning:</b></dt>
<dd>The rules for using quotes within message format patterns unfortunately
have shown to be somewhat confusing. In particular, it isn't always obvious
to localizers whether single quotes need to be doubled or not. Make sure to
inform localizers about the rules, and tell them (for example, by using
comments in resource bundle source files) which strings will be processed by
{@code MessageFormat}. Note that localizers may need to use single quotes in
translated strings where the original version doesn't have them. <br>
Note also that the simplest way to avoid the problem is to use the real
apostrophe (single quote) character \\u2019 (') for human-readable text, and
to use the ASCII apostrophe (\\u0027 ' ) only in program syntax, like quoting
in {@code MessageFormat}. See the annotations for U+0027 Apostrophe in The Unicode
Standard.
</dl>
<p>
The <i>ArgumentIndex</i> value is a non-negative integer written using the
digits '0' through '9', and represents an index into the
{@code arguments} array passed to the {@code format} methods or
the result array returned by the {@code parse} methods.
<p>
The <i>FormatType</i> and <i>FormatStyle</i> values are used to create a
{@code Format} instance for the format element. The following table
shows how the values map to {@code Format} instances. Combinations not shown in the
table are illegal. A <i>SubformatPattern</i> must be a valid pattern string
for the {@code Format} subclass used.
<p>
<table border=1>
<tr>
<th>Format Type</th>
<th>Format Style</th>
<th>Subformat Created</th>
</tr>
<tr>
<td colspan=\"2\"><i>(none)</i></td>
<td>{@code null}</td>
</tr>
<tr>
<td rowspan=\"5\">{@code number}</td>
<td><i>(none)</i></td>
<td>{@code NumberFormat.getInstance(getLocale())}</td>
</tr>
<tr>
<td>{@code integer}</td>
<td>{@code NumberFormat.getIntegerInstance(getLocale())}</td>
</tr>
<tr>
<td>{@code currency}</td>
<td>{@code NumberFormat.getCurrencyInstance(getLocale())}</td>
</tr>
<tr>
<td>{@code percent}</td>
<td>{@code NumberFormat.getPercentInstance(getLocale())}</td>
</tr>
<tr>
<td><i>SubformatPattern</i></td>
<td>{@code new DecimalFormat(subformatPattern, new DecimalFormatSymbols(getLocale()))}</td>
</tr>
<tr>
<td rowspan=\"6\">{@code date}</td>
<td><i>(none)</i></td>
<td>{@code DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())}</td>
</tr>
<tr>
<td>{@code short}</td>
<td>{@code DateFormat.getDateInstance(DateFormat.SHORT, getLocale())}</td>
</tr>
<tr>
<td>{@code medium}</td>
<td>{@code DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())}</td>
</tr>
<tr>
<td>{@code long}</td>
<td>{@code DateFormat.getDateInstance(DateFormat.LONG, getLocale())}</td>
</tr>
<tr>
<td>{@code full}</td>
<td>{@code DateFormat.getDateInstance(DateFormat.FULL, getLocale())}</td>
</tr>
<tr>
<td><i>SubformatPattern</i></td>
<td>{@code new SimpleDateFormat(subformatPattern, getLocale())}</td>
</tr>
<tr>
<td rowspan=\"6\">{@code time}</td>
<td><i>(none)</i></td>
<td>{@code DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())}</td>
</tr>
<tr>
<td>{@code short}</td>
<td>{@code DateFormat.getTimeInstance(DateFormat.SHORT, getLocale())}</td>
</tr>
<tr>
<td>{@code medium}</td>
<td>{@code DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())}</td>
</tr>
<tr>
<td>{@code long}</td>
<td>{@code DateFormat.getTimeInstance(DateFormat.LONG, getLocale())}</td>
</tr>
<tr>
<td>{@code full}</td>
<td>{@code DateFormat.getTimeInstance(DateFormat.FULL, getLocale())}</td>
</tr>
<tr>
<td><i>SubformatPattern</i></td>
<td>{@code new SimpleDateFormat(subformatPattern, getLocale())}</td>
</tr>
<tr>
<td>{@code choice}</td>
<td><i>SubformatPattern</i></td>
<td>{@code new ChoiceFormat(subformatPattern)}</td>
</tr>
</table>

<h4>Usage Information</h4>
<p>
Here are some examples of usage: <blockquote>

<pre>
Object[] arguments = {
        Integer.valueOf(7), new Date(System.currentTimeMillis()),
        \"a disturbance in the Force\"};
String result = MessageFormat.format(
        \"At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.\",
        arguments);
<em>
Output:
</em>
At 12:30 PM on Jul 3, 2053, there was a disturbance in the Force on planet 7.
</pre>

</blockquote>
<p>
Typically, the message format will come from resources, and the
arguments will be dynamically set at runtime.
<p>
Example 2: <blockquote>

<pre>
Object[] testArgs = {Long.valueOf(3), \"MyDisk\"};
MessageFormat form = new MessageFormat(\"The disk \\\"{1}\\\" contains {0} file(s).\");
System.out.println(form.format(testArgs));
<em>
Output with different testArgs:
</em>
The disk \"MyDisk\" contains 0 file(s).
The disk \"MyDisk\" contains 1 file(s).
The disk \"MyDisk\" contains 1,273 file(s).
</pre>

</blockquote>

<p>
For more sophisticated patterns, you can use a {@code ChoiceFormat} to
get output such as:
<blockquote>

<pre>
MessageFormat form = new MessageFormat(\"The disk \\\"{1}\\\" contains {0}.\");
double[] filelimits = {0,1,2};
String[] filepart = {\"no files\",\"one file\",\"{0,number} files\"};
ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);
form.setFormatByArgumentIndex(0, fileform);
Object[] testArgs = {Long.valueOf(12373), \"MyDisk\"};
System.out.println(form.format(testArgs));
<em>
Output (with different testArgs):
</em>
The disk \"MyDisk\" contains no files.
The disk \"MyDisk\" contains one file.
The disk \"MyDisk\" contains 1,273 files.
</pre>

</blockquote> You can either do this programmatically, as in the above
example, or by using a pattern (see {@link ChoiceFormat} for more
information) as in: <blockquote>

<pre>
form.applyPattern(\"There {0,choice,0#are no files|1#is one file|1&lt;are {0,number,integer} files}.\");
</pre>

</blockquote>
<p>
<strong>Note:</strong> As we see above, the string produced by a
{@code ChoiceFormat} in {@code MessageFormat} is treated
specially; occurances of '{' are used to indicated subformats, and cause
recursion. If you create both a {@code MessageFormat} and
{@code ChoiceFormat} programmatically (instead of using the string
patterns), then be careful not to produce a format that recurses on itself,
which will cause an infinite loop.
<p>
When a single argument is parsed more than once in the string, the last match
will be the final result of the parsing. For example:
<blockquote>
<pre>
MessageFormat mf = new MessageFormat(\"{0,number,#.##}, {0,number,#.#}\");
Object[] objs = {new Double(3.1415)};
String result = mf.format(objs);
// result now equals \"3.14, 3.1\"
objs = null;
objs = mf.parse(result, new ParsePosition(0));
// objs now equals {new Double(3.1)}
</pre>
</blockquote>
<p>
Likewise, parsing with a {@code MessageFormat} object using patterns
containing multiple occurrences of the same argument would return the last
match. For example:
<blockquote>
<pre>
MessageFormat mf = new MessageFormat(\"{0}, {0}, {0}\");
String forParsing = \"x, y, z\";
Object[] objs = mf.parse(forParsing, new ParsePosition(0));
// result now equals {new String(\"z\")}
</pre>
</blockquote>
<h4><a name=\"synchronization\">Synchronization</a></h4>
<p>
Message formats are not synchronized. It is recommended to create separate
format instances for each thread. If multiple threads access a format
concurrently, it must be synchronized externally.

@see java.util.Formatter"
      classrelation 346267 // <generalisation>
	relation 346267 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 346267 // <generalisation>
	  b parent class_ref 227611 // Format
      end

      attribute 298395 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6479157306784022952L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 346395 // locale (<unidirectional association>)
	relation 346395 --->
	  a role_name "locale" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 346395 // locale (<unidirectional association>)
	  b parent class_ref 135835 // Locale
      end

      classrelation 346523 // strings (<unidirectional association>)
	relation 346523 --->
	  a role_name "strings" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 346523 // strings (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 298523 "argumentNumbers"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 346651 // formats (<unidirectional association>)
	relation 346651 --->
	  a role_name "formats" multiplicity "[]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 346651 // formats (<unidirectional association>)
	  b parent class_ref 227611 // Format
      end

      attribute 298651 "maxOffset"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 298779 "maxArgumentIndex"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1137691 "MessageFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "template" type class_ref 3399692 // String
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code MessageFormat} using the specified pattern and {@code locale}.

@param template
           the pattern.
@param locale
           the locale.
@throws IllegalArgumentException
           if the pattern cannot be parsed."
      end

      operation 1137819 "MessageFormat"
	public explicit_return_type ""
	nparams 1
	  param inout name "template" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code MessageFormat} using the specified pattern and
the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param template
           the pattern.
@throws IllegalArgumentException
           if the pattern cannot be parsed."
      end

      operation 1137947 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "template" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes this {@code MessageFormat} to use the specified pattern.

@param template
           the new pattern.
@throws IllegalArgumentException
           if the pattern cannot be parsed."
      end

      operation 1138075 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new instance of {@code MessageFormat} with the same pattern and
formats as this {@code MessageFormat}.

@return a shallow copy of this {@code MessageFormat}.
@see java.lang.Cloneable"
      end

      operation 1138203 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object to this {@code MessageFormat} and indicates
if they are equal. In order to be equal, {@code object} must be an
instance of {@code MessageFormat} and have the same pattern.

@param object
           the object to compare with this object.
@return {@code true} if the specified object is equal to this
        {@code MessageFormat}; {@code false} otherwise.
@see #hashCode"
      end

      operation 1138331 "formatToCharacterIterator"
	public return_type class_ref 129051 // AttributedCharacterIterator
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats the specified object using the rules of this message format and
returns an {@code AttributedCharacterIterator} with the formatted message and
attributes. The {@code AttributedCharacterIterator} returned also includes the
attributes from the formats of this message format.

@param object
           the object to format.
@return an {@code AttributedCharacterIterator} with the formatted message and
        attributes.
@throws IllegalArgumentException
           if the arguments in the object array cannot be formatted
           by this message format."
      end

      operation 1138459 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param inout name "objects" type class_ref 3401484 // Object
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the specified objects into a string which it appends to the
specified string buffer using the pattern of this message format.
<p>
If the {@code field} member of the specified {@code FieldPosition} is
{@code MessageFormat.Field.ARGUMENT}, then the begin and end index of
this field position is set to the location of the first occurrence of a
message format argument. Otherwise, the {@code FieldPosition} is ignored.

@param objects
           the array of objects to format.
@param buffer
           the target string buffer to append the formatted message to.
@param field
           on input: an optional alignment field; on output: the offsets
           of the alignment field in the formatted text.
@return the string buffer."
      end

      operation 1138587 "formatImpl"
	private return_type class_ref 146715 // StringBuffer
	nparams 4
	  param inout name "objects" type class_ref 3401484 // Object
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "position" type class_ref 227739 // FieldPosition
	  param inout name "fields" type class_ref 131483 // List
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<FieldContainer> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1138715 "handleArgumentField"
	private explicit_return_type "void"
	nparams 5
	  param in name "begin" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "argIndex" explicit_type "int"
	  param inout name "position" type class_ref 227739 // FieldPosition
	  param inout name "fields" type class_ref 131483 // List
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<FieldContainer> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new FieldContainer with MessageFormat.Field.ARGUMENT field,
argIndex, begin and end index to the fields list, or sets the
position's begin and end index if it has MessageFormat.Field.ARGUMENT as
its field attribute."
      end

      class 230043 "FieldContainer"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 298907 "start"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 299035 "end"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 346779 // attribute (<unidirectional association>)
	  relation 346779 --->
	    a role_name "attribute" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 346779 // attribute (<unidirectional association>)
	    b parent class_ref 129179 // Attribute
	end

	classrelation 346907 // value (<unidirectional association>)
	  relation 346907 --->
	    a role_name "value" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 346907 // value (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	operation 1138843 "FieldContainer"
	  public explicit_return_type ""
	  nparams 4
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	    param inout name "attribute" type class_ref 129179 // Attribute
	    param inout name "value" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1138971 "handleFormat"
	private explicit_return_type "void"
	nparams 4
	  param inout name "format" type class_ref 227611 // Format
	  param inout name "arg" type class_ref 3401484 // Object
	  param in name "begin" explicit_type "int"
	  param inout name "fields" type class_ref 131483 // List
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<FieldContainer> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If fields list is not null, find and add the fields of this format to
the fields list by iterating through its AttributedCharacterIterator

@param format
           the format to find fields for
@param arg
           object to format
@param begin
           the index where the string this format has formatted begins"
      end

      operation 1139099 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param inout name "object" type class_ref 3401484 // Object
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Converts the specified objects into a string which it appends to the
specified string buffer using the pattern of this message format.
<p>
If the {@code field} member of the specified {@code FieldPosition} is
{@code MessageFormat.Field.ARGUMENT}, then the begin and end index of
this field position is set to the location of the first occurrence of a
message format argument. Otherwise, the {@code FieldPosition} is ignored.
<p>
Calling this method is equivalent to calling
<blockquote>

<pre>
format((Object[])object, buffer, field)
</pre>

</blockquote>

@param object
           the object to format, must be an array of {@code Object}.
@param buffer
           the target string buffer to append the formatted message to.
@param field
           on input: an optional alignment field; on output: the offsets
           of the alignment field in the formatted text.
@return the string buffer.
@throws ClassCastException
            if {@code object} is not an array of {@code Object}."
      end

      operation 1139227 "format"
	class_operation public return_type class_ref 3399692 // String
	nparams 2
	  param inout name "format" type class_ref 3399692 // String
	  param inout name "" explicit_type "Object...args"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the supplied objects using the specified message format pattern.

@param format the format string (see {@link java.util.Formatter#format})
@param args
           the list of arguments passed to the formatter. If there are
           more arguments than required by {@code format},
           additional arguments are ignored.
@return the formatted result.
@throws IllegalArgumentException
           if the pattern cannot be parsed."
      end

      operation 1139355 "getFormats"
	public return_type class_ref 227611 // Format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Format} instances used by this message format.

@return an array of {@code Format} instances."
      end

      operation 1139483 "getFormatsByArgumentIndex"
	public return_type class_ref 227611 // Format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the formats used for each argument index. If an argument is
placed more than once in the pattern string, then this returns the format
of the last one.

@return an array of formats, ordered by argument index."
      end

      operation 1139611 "setFormatByArgumentIndex"
	public explicit_return_type "void"
	nparams 2
	  param in name "argIndex" explicit_type "int"
	  param inout name "format" type class_ref 227611 // Format
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the format used for the argument at index {@code argIndex} to
{@code format}.

@param argIndex
           the index of the format to set.
@param format
           the format that will be set at index {@code argIndex}."
      end

      operation 1139739 "setFormatsByArgumentIndex"
	public explicit_return_type "void"
	nparams 1
	  param inout name "formats" type class_ref 227611 // Format
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the formats used for each argument. The {@code formats} array
elements should be in the order of the argument indices.

@param formats
           the formats in an array."
      end

      operation 1139867 "getLocale"
	public return_type class_ref 135835 // Locale
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the locale used when creating formats.

@return the locale used to create formats."
      end

      operation 1139995 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1140123 "parse"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "string" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 227867 // ParseException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the message arguments from the specified string using the rules of
this message format.

@param string
           the string to parse.
@return the array of {@code Object} arguments resulting from the parse.
@throws ParseException
           if an error occurs during parsing."
      end

      operation 1140251 "parse"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the message argument from the specified string starting at the
index specified by {@code position}. If the string is successfully
parsed then the index of the {@code ParsePosition} is updated to the
index following the parsed text. On error, the index is unchanged and the
error index of {@code ParsePosition} is set to the index where the error
occurred.

@param string
           the string to parse.
@param position
           input/output parameter, specifies the start index in
           {@code string} from where to start parsing. If parsing is
           successful, it is updated with the index following the parsed
           text; on error, the index is unchanged and the error index is
           set to the index where the error occurred.
@return the array of objects resulting from the parse, or {@code null} if
        there is an error."
      end

      operation 1140379 "parseObject"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Parses the message argument from the specified string starting at the
index specified by {@code position}. If the string is successfully
parsed then the index of the {@code ParsePosition} is updated to the
index following the parsed text. On error, the index is unchanged and the
error index of {@code ParsePosition} is set to the index where the error
occurred.

@param string
           the string to parse.
@param position
           input/output parameter, specifies the start index in
           {@code string} from where to start parsing. If parsing is
           successful, it is updated with the index following the parsed
           text; on error, the index is unchanged and the error index is
           set to the index where the error occurred.
@return the array of objects resulting from the parse, or {@code null} if
        there is an error."
      end

      operation 1140507 "match"
	private explicit_return_type "int"
	nparams 4
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	  param inout name "last" explicit_type "boolean"
	  param inout name "tokens" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1140635 "parseVariable"
	private return_type class_ref 227611 // Format
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1140763 "setFormat"
	public explicit_return_type "void"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "format" type class_ref 227611 // Format
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the specified format used by this message format.

@param offset
           the index of the format to change.
@param format
           the {@code Format} that replaces the old format."
      end

      operation 1140891 "setFormats"
	public explicit_return_type "void"
	nparams 1
	  param inout name "formats" type class_ref 227611 // Format
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the formats used by this message format.

@param formats
           an array of {@code Format}."
      end

      operation 1141019 "setLocale"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the locale to use when creating {@code Format} instances. Changing
the locale may change the behavior of {@code applyPattern},
{@code toPattern}, {@code format} and {@code formatToCharacterIterator}.

@param locale
           the new locale."
      end

      operation 1141147 "decodeDecimalFormat"
	private return_type class_ref 3399692 // String
	nparams 2
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "format" type class_ref 227611 // Format
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1141275 "decodeSimpleDateFormat"
	private return_type class_ref 3399692 // String
	nparams 2
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "format" type class_ref 227611 // Format
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1141403 "toPattern"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pattern of this message format.

@return the pattern."
      end

      operation 1141531 "appendQuoted"
	private explicit_return_type "void"
	nparams 2
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "string" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 347035 // serialPersistentFields (<unidirectional association>)
	relation 347035 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"argumentNumbers\", int[].class),
        new ObjectStreamField(\"formats\", Format[].class),
        new ObjectStreamField(\"locale\", Locale.class),
        new ObjectStreamField(\"maxOffset\", int.class),
        new ObjectStreamField(\"offsets\", int[].class),
        new ObjectStreamField(\"pattern\", String.class),
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 347035 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      operation 1141659 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1141787 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 230171 "Normalizer"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides normalization functions according to
<a href=\"http://www.unicode.org/unicode/reports/tr15/tr15-23.html\">Unicode Standard Annex #15:
Unicode Normalization Forms</a>. Normalization can decompose and compose
characters for equivalency checking.

@since 1.6"
      class 230299 "Form"
	visibility public stereotype "enum"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 299163 "NFD"
	  public type class_ref 230299 // Form
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Normalization Form D - Canonical Decomposition.
"
	end

	attribute 299291 "NFC"
	  public type class_ref 230299 // Form
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Normalization Form C - Canonical Decomposition, followed by Canonical Composition.
"
	end

	attribute 299419 "NFKD"
	  public type class_ref 230299 // Form
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Normalization Form KD - Compatibility Decomposition.
"
	end

	attribute 299547 "NFKC"
	  public type class_ref 230299 // Form
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Normalization Form KC - Compatibility Decomposition, followed by Canonical Composition."
	end
      end

      operation 1141915 "isNormalized"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "src" type class_ref 133787 // CharSequence
	  param inout name "form" type class_ref 230299 // Form
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether the given character sequence <code>src</code> is normalized
according to the normalization method <code>form</code>.

@param src character sequence to check
@param form normalization form to check against
@return true if normalized according to <code>form</code>"
      end

      operation 1142043 "normalize"
	class_operation public return_type class_ref 3399692 // String
	nparams 2
	  param inout name "src" type class_ref 133787 // CharSequence
	  param inout name "form" type class_ref 230299 // Form
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Normalize the character sequence <code>src</code> according to the
normalization method <code>form</code>.

@param src character sequence to read for normalization
@param form normalization form
@return string normalized according to <code>form</code>"
      end

      operation 1142171 "Normalizer"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 230427 "RuleBasedBreakIterator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Default implementation of BreakIterator. Wraps libcore.icu.NativeBreakIterator.
We need this because BreakIterator.isBoundary and BreakIterator.preceding are non-abstract,
and we don't have Java implementations of those methods (other than the current ones, which
forward to the wrapped NativeBreakIterator)."
      classrelation 347291 // <generalisation>
	relation 347291 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 347291 // <generalisation>
	  b parent class_ref 227099 // BreakIterator
      end

      operation 1143579 "RuleBasedBreakIterator"
	package explicit_return_type ""
	nparams 1
	  param inout name "iterator" type class_ref 227227 // NativeBreakIterator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1143707 "current"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1143835 "first"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1143963 "following"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1144091 "checkOffset"
	private explicit_return_type "void"
	nparams 1
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1144219 "getText"
	public return_type class_ref 129307 // CharacterIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1144347 "last"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1144475 "next"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1144603 "next"
	public explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1144731 "previous"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1144859 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newText" type class_ref 129307 // CharacterIterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1144987 "isBoundary"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1145115 "preceding"
	public explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1145243 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1145371 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1145499 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1145627 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 230555 "RuleBasedCollator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A concrete implementation class for {@code Collation}.
<p>
{@code RuleBasedCollator} has the following restrictions for efficiency
(other subclasses may be used for more complex languages):
<ol>
<li> If a French secondary ordering is specified it applies to the whole
collator object.</li>
<li> All non-mentioned Unicode characters are at the end of the collation
order.</li>
<li> If a character is not located in the {@code RuleBasedCollator}, the
default Unicode Collation Algorithm (UCA) rule-based table is automatically
searched as a backup.</li>
</ol>
<p>
The collation table is composed of a list of collation rules, where each rule
is of three forms:
<blockquote>
<pre>
&lt;modifier&gt;
&lt;relation&gt; &lt;text-argument&gt;
&lt;reset&gt; &lt;text-argument&gt;
</pre>
</blockquote>
<p>
The rule elements are defined as follows:
<ul type=\"disc\">
<li><strong>Modifier</strong>: There is a single modifier which is used to
specify that all accents (secondary differences) are backwards:
<ul type=square>
<li>'@' : Indicates that accents are sorted backwards, as in French.
</ul>
</li>
<li><strong>Relation</strong>: The relations are the following:
<ul type=square>
<li>'&lt;' : Greater, as a letter difference (primary)
<li>';' : Greater, as an accent difference (secondary)
<li>',' : Greater, as a case difference (tertiary)
<li>'=' : Equal
</ul>
</li>
<li><strong>Text-Argument</strong>: A text-argument is any sequence of
characters, excluding special characters (that is, common whitespace
characters [0009-000D, 0020] and rule syntax characters [0021-002F,
003A-0040, 005B-0060, 007B-007E]). If those characters are desired, you can
put them in single quotes (for example, use '&amp;' for ampersand). Note that
unquoted white space characters are ignored; for example, {@code b c} is
treated as {@code bc}.</li>
<li><strong>Reset</strong>: There is a single reset which is used primarily
for contractions and expansions, but which can also be used to add a
modification at the end of a set of rules:
<ul type=square>
<li>'&amp;' : Indicates that the next rule follows the position to where the reset
text-argument would be sorted.
</ul>
</li>
</ul>
<p>
This sounds more complicated than it is in practice. For example, the
following are equivalent ways of expressing the same thing:
<blockquote>

<pre>
a < b < c
a < b & b < c
a < c & a < b
</pre>

</blockquote>
<p>
Notice that the order is important, as the subsequent item goes immediately
after the text-argument. The following are not equivalent:
<blockquote>

<pre>
a < b & a < c
a < c & a < b
</pre>

</blockquote>
<p>
Either the text-argument must already be present in the sequence, or some
initial substring of the text-argument must be present. For example
{@code \"a < b & ae < e\"} is valid since \"a\" is present in the sequence before
\"ae\" is reset. In this latter case, \"ae\" is not entered and treated as a
single character; instead, \"e\" is sorted as if it were expanded to two
characters: \"a\" followed by an \"e\". This difference appears in natural
languages: in traditional Spanish \"ch\" is treated as if it contracts to a
single character (expressed as {@code \"c < ch < d\"}), while in traditional
German a-umlaut is treated as if it expands to two characters (expressed as
{@code \"a,A < b,B  ... & ae;\\u00e3 & AE;\\u00c3\"}, where \\u00e3 and \\u00c3
are the escape sequences for a-umlaut).
<h4>Ignorable Characters</h4>
<p>
For ignorable characters, the first rule must start with a relation (the
examples we have used above are really fragments; {@code \"a < b\"} really
should be {@code \"< a < b\"}). If, however, the first relation is not
{@code \"<\"}, then all text-arguments up to the first {@code \"<\"} are
ignorable. For example, {@code \", - < a < b\"} makes {@code \"-\"} an ignorable
character.
<h4>Normalization and Accents</h4>
<p>
{@code RuleBasedCollator} automatically processes its rule table to include
both pre-composed and combining-character versions of accented characters.
Even if the provided rule string contains only base characters and separate
combining accent characters, the pre-composed accented characters matching
all canonical combinations of characters from the rule string will be entered
in the table.
<p>
This allows you to use a RuleBasedCollator to compare accented strings even
when the collator is set to NO_DECOMPOSITION. However, if the strings to be
collated contain combining sequences that may not be in canonical order, you
should set the collator to CANONICAL_DECOMPOSITION to enable sorting of
combining sequences. For more information, see <a
href=\"http://www.aw.com/devpress\">The Unicode Standard, Version 3.0</a>.
<h4>Errors</h4>
<p>
The following rules are not valid:
<ul type=\"disc\">
<li>A text-argument contains unquoted punctuation symbols, for example
{@code \"a < b-c < d\"}.</li>
<li>A relation or reset character is not followed by a text-argument, for
example {@code \"a < , b\"}.</li>
<li>A reset where the text-argument (or an initial substring of the
text-argument) is not already in the sequence or allocated in the default UCA
table, for example {@code \"a < b & e < f\"}.</li>
</ul>
<p>
If you produce one of these errors, {@code RuleBasedCollator} throws a
{@code ParseException}.
<h4>Examples</h4>
<p>
Normally, to create a rule-based collator object, you will use
{@code Collator}'s factory method {@code getInstance}. However, to create a
rule-based collator object with specialized rules tailored to your needs, you
construct the {@code RuleBasedCollator} with the rules contained in a
{@code String} object. For example:
<blockquote>

<pre>
String Simple = \"< a < b < c < d\";
RuleBasedCollator mySimple = new RuleBasedCollator(Simple);
</pre>

</blockquote>
<p>
Or:
<blockquote>

<pre>
String Norwegian = \"< a,A< b,B< c,C< d,D< e,E< f,F< g,G< h,H< i,I\"
        + \"< j,J< k,K< l,L< m,M< n,N< o,O< p,P< q,Q< r,R\"
        + \"< s,S< t,T< u,U< v,V< w,W< x,X< y,Y< z,Z\"
        + \"< \\u00E5=a\\u030A,\\u00C5=A\\u030A\"
        + \";aa,AA< \\u00E6,\\u00C6< \\u00F8,\\u00D8\";
RuleBasedCollator myNorwegian = new RuleBasedCollator(Norwegian);
</pre>

</blockquote>
<p>
Combining {@code Collator}s is as simple as concatenating strings. Here is
an example that combines two {@code Collator}s from two different locales:
<blockquote>

<pre>
// Create an en_US Collator object
RuleBasedCollator en_USCollator = (RuleBasedCollator)Collator
        .getInstance(new Locale(\"en\", \"US\", \"\"));

// Create a da_DK Collator object
RuleBasedCollator da_DKCollator = (RuleBasedCollator)Collator
        .getInstance(new Locale(\"da\", \"DK\", \"\"));

// Combine the two collators
// First, get the collation rules from en_USCollator
String en_USRules = en_USCollator.getRules();

// Second, get the collation rules from da_DKCollator
String da_DKRules = da_DKCollator.getRules();

RuleBasedCollator newCollator = new RuleBasedCollator(en_USRules + da_DKRules);
// newCollator has the combined rules
</pre>

</blockquote>
<p>
The next example shows to make changes on an existing table to create a new
{@code Collator} object. For example, add {@code \"& C < ch, cH, Ch, CH\"} to
the {@code en_USCollator} object to create your own:
<blockquote>

<pre>
// Create a new Collator object with additional rules
String addRules = \"& C < ch, cH, Ch, CH\";

RuleBasedCollator myCollator = new RuleBasedCollator(en_USCollator + addRules);
// myCollator contains the new rules
</pre>

</blockquote>
<p>
The following example demonstrates how to change the order of non-spacing
accents:
<blockquote>

<pre>
// old rule
String oldRules = \"= \\u00a8 ; \\u00af ; \\u00bf\" + \"< a , A ; ae, AE ; \\u00e6 , \\u00c6\"
        + \"< b , B < c, C < e, E & C < d, D\";

// change the order of accent characters
String addOn = \"& \\u00bf ; \\u00af ; \\u00a8;\";

RuleBasedCollator myCollator = new RuleBasedCollator(oldRules + addOn);
</pre>

</blockquote>
<p>
The last example shows how to put new primary ordering in before the default
setting. For example, in the Japanese {@code Collator}, you can either sort
English characters before or after Japanese characters:
<blockquote>

<pre>
// get en_US Collator rules
RuleBasedCollator en_USCollator = (RuleBasedCollator)
    Collator.getInstance(Locale.US);

// add a few Japanese character to sort before English characters
// suppose the last character before the first base letter 'a' in
// the English collation rule is \\u30A2
String jaString = \"& \\u30A2 , \\u30FC < \\u30C8\";

RuleBasedCollator myJapaneseCollator =
    new RuleBasedCollator(en_USCollator.getRules() + jaString);
</pre>

</blockquote>"
      classrelation 347419 // <generalisation>
	relation 347419 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 347419 // <generalisation>
	  b parent class_ref 228763 // Collator
      end

      operation 1145755 "RuleBasedCollator"
	package explicit_return_type ""
	nparams 1
	  param inout name "wrapper" type class_ref 228891 // RuleBasedCollatorICU
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1145883 "RuleBasedCollator"
	public explicit_return_type ""
	nparams 1
	  param inout name "rules" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 227867 // ParseException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of {@code RuleBasedCollator} using the
specified {@code rules}. The {@code rules} are usually either
hand-written based on the {@link RuleBasedCollator class description} or
the result of a former {@link #getRules()} call.
<p>
Note that the {@code rules} are actually interpreted as a delta to the
standard Unicode Collation Algorithm (UCA). This differs
slightly from other implementations which work with full {@code rules}
specifications and may result in different behavior.

@param rules
           the collation rules.
@throws NullPointerException
            if {@code rules == null}.
@throws ParseException
            if {@code rules} contains rules with invalid collation rule
            syntax."
      end

      operation 1146011 "getCollationElementIterator"
	public return_type class_ref 228379 // CollationElementIterator
	nparams 1
	  param inout name "source" type class_ref 129307 // CharacterIterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code CollationElementIterator} for the given
{@code CharacterIterator}. The source iterator's integrity will be
preserved since a new copy will be created for use.

@param source
           the source character iterator.
@return a {@code CollationElementIterator} for {@code source}."
      end

      operation 1146139 "getCollationElementIterator"
	public return_type class_ref 228379 // CollationElementIterator
	nparams 1
	  param inout name "source" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code CollationElementIterator} for the given string.

@param source
           the source string.
@return the {@code CollationElementIterator} for {@code source}."
      end

      operation 1146267 "getRules"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the collation rules of this collator. These {@code rules} can be
fed into the {@code RuleBasedCollator(String)} constructor.
<p>
Note that the {@code rules} are actually interpreted as a delta to the
standard Unicode Collation Algorithm (UCA). Hence, an empty {@code rules}
string results in the default UCA rules being applied. This differs
slightly from other implementations which work with full {@code rules}
specifications and may result in different behavior.

@return the collation rules."
      end

      operation 1146395 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new collator with the same collation rules, decomposition mode and
strength value as this collator.

@return a shallow copy of this collator.
@see java.lang.Cloneable"
      end

      operation 1146523 "compare"
	public explicit_return_type "int"
	nparams 2
	  param inout name "source" type class_ref 3399692 // String
	  param inout name "target" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the {@code source} text to the {@code target} text according to
the collation rules, strength and decomposition mode for this
{@code RuleBasedCollator}. See the {@code Collator} class description
for an example of use.
<p>
General recommendation: If comparisons are to be done with the same strings
multiple times, it is more efficient to generate {@code CollationKey}
objects for the strings and use
{@code CollationKey.compareTo(CollationKey)} for the comparisons. If each
string is compared to only once, using
{@code RuleBasedCollator.compare(String, String)} has better performance.

@param source
           the source text.
@param target
           the target text.
@return an integer which may be a negative value, zero, or else a
        positive value depending on whether {@code source} is less than,
        equivalent to, or greater than {@code target}."
      end

      operation 1146651 "getCollationKey"
	public return_type class_ref 228635 // CollationKey
	nparams 1
	  param inout name "source" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the {@code CollationKey} for the given source text.

@param source
           the specified source text.
@return the {@code CollationKey} for the given source text."
      end

      operation 1146779 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1146907 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object with this {@code RuleBasedCollator} and
indicates if they are equal. In order to be equal, {@code object} must be
an instance of {@code Collator} with the same collation rules and the
same attributes.

@param obj
           the object to compare with this object.
@return {@code true} if the specified object is equal to this
        {@code RuleBasedCollator}; {@code false} otherwise.
@see #hashCode"
      end
    end

    class 230683 "SimpleDateFormat"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Formats and parses dates in a locale-sensitive manner. Formatting turns a {@link Date} into
a {@link String}, and parsing turns a {@code String} into a {@code Date}.

<h4>Time Pattern Syntax</h4>
<p>You can supply a Unicode <a href=\"http://www.unicode.org/reports/tr35/#Date_Format_Patterns\">UTS #35</a>
pattern describing what strings are produced/accepted, but almost all
callers should use {@link DateFormat#getDateInstance}, {@link DateFormat#getDateTimeInstance},
or {@link DateFormat#getTimeInstance} to get a ready-made instance suitable for the user's
locale. In cases where the system does not provide a suitable pattern, see
{@link android.text.format.DateFormat#getBestDateTimePattern} which lets you specify
the elements you'd like in a pattern and get back a pattern suitable for any given locale.

<p>The main reason you'd create an instance this class directly is because you need to
format/parse a specific machine-readable format, in which case you almost certainly want
to explicitly ask for {@link Locale#US} to ensure that you get ASCII digits (rather than,
say, Arabic digits).
(See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".)
The most useful non-localized pattern is {@code \"yyyy-MM-dd HH:mm:ss.SSSZ\"}, which corresponds
to the ISO 8601 international standard date format.

<p>To specify the time format, use a <i>time pattern</i> string. In this
string, any character from {@code 'A'} to {@code 'Z'} or {@code 'a'} to {@code 'z'} is
treated specially. All other characters are passed through verbatim. The interpretation of each
of the ASCII letters is given in the table below. ASCII letters not appearing in the table are
reserved for future use, and it is an error to attempt to use them.

<p>The number of consecutive copies (the \"count\") of a pattern character further influences
the format, as shown in the table. For fields of kind \"number\", the count is the minimum number
of digits; shorter values are zero-padded to the given width and longer values overflow it.

<p><table BORDER=\"1\" WIDTH=\"100%\" CELLPADDING=\"3\" CELLSPACING=\"0\" SUMMARY=\"\">
<tr BGCOLOR=\"#CCCCFF\" CLASS=\"TableHeadingColor\">
     <td><B>Symbol</B></td> <td><B>Meaning</B></td> <td><B>Kind</B></td> <td><B>Example</B></td> </tr>
<tr> <td>{@code D}</td> <td>day in year</td>             <td>(Number)</td>      <td>189</td> </tr>
<tr> <td>{@code E}</td> <td>day of week</td>             <td>(Text)</td>        <td>{@code E}/{@code EE}/{@code EEE}:Tue, {@code EEEE}:Tuesday, {@code EEEEE}:T</td> </tr>
<tr> <td>{@code F}</td> <td>day of week in month</td>    <td>(Number)</td>      <td>2 <i>(2nd Wed in July)</i></td> </tr>
<tr> <td>{@code G}</td> <td>era designator</td>          <td>(Text)</td>        <td>AD</td> </tr>
<tr> <td>{@code H}</td> <td>hour in day (0-23)</td>      <td>(Number)</td>      <td>0</td> </tr>
<tr> <td>{@code K}</td> <td>hour in am/pm (0-11)</td>    <td>(Number)</td>      <td>0</td> </tr>
<tr> <td>{@code L}</td> <td>stand-alone month</td>       <td>(Text)</td>        <td>{@code L}:1 {@code LL}:01 {@code LLL}:Jan {@code LLLL}:January {@code LLLLL}:J</td> </tr>
<tr> <td>{@code M}</td> <td>month in year</td>           <td>(Text)</td>        <td>{@code M}:1 {@code MM}:01 {@code MMM}:Jan {@code MMMM}:January {@code MMMMM}:J</td> </tr>
<tr> <td>{@code S}</td> <td>fractional seconds</td>      <td>(Number)</td>      <td>978</td> </tr>
<tr> <td>{@code W}</td> <td>week in month</td>           <td>(Number)</td>      <td>2</td> </tr>
<tr> <td>{@code Z}</td> <td>time zone (RFC 822)</td>     <td>(Time Zone)</td>   <td>{@code Z}/{@code ZZ}/{@code ZZZ}:-0800 {@code ZZZZ}:GMT-08:00 {@code ZZZZZ}:-08:00</td> </tr>
<tr> <td>{@code a}</td> <td>am/pm marker</td>            <td>(Text)</td>        <td>PM</td> </tr>
<tr> <td>{@code c}</td> <td>stand-alone day of week</td> <td>(Text)</td>        <td>{@code c}/{@code cc}/{@code ccc}:Tue, {@code cccc}:Tuesday, {@code ccccc}:T</td> </tr>
<tr> <td>{@code d}</td> <td>day in month</td>            <td>(Number)</td>      <td>10</td> </tr>
<tr> <td>{@code h}</td> <td>hour in am/pm (1-12)</td>    <td>(Number)</td>      <td>12</td> </tr>
<tr> <td>{@code k}</td> <td>hour in day (1-24)</td>      <td>(Number)</td>      <td>24</td> </tr>
<tr> <td>{@code m}</td> <td>minute in hour</td>          <td>(Number)</td>      <td>30</td> </tr>
<tr> <td>{@code s}</td> <td>second in minute</td>        <td>(Number)</td>      <td>55</td> </tr>
<tr> <td>{@code w}</td> <td>week in year</td>            <td>(Number)</td>      <td>27</td> </tr>
<tr> <td>{@code y}</td> <td>year</td>                    <td>(Number)</td>      <td>{@code yy}:10 {@code y}/{@code yyy}/{@code yyyy}:2010</td> </tr>
<tr> <td>{@code z}</td> <td>time zone</td>               <td>(Timezone)</td>    <td>{@code z}/{@code zz}/{@code zzz}:PST {@code zzzz}:Pacific Standard Time</td> </tr>
<tr> <td>{@code '}</td> <td>escape for text</td>         <td>(Delimiter)</td>   <td>{@code 'Date='}:Date=</td> </tr>
<tr> <td>{@code ''}</td> <td>single quote</td>           <td>(Literal)</td>     <td>{@code 'o''clock'}:o'clock</td> </tr>
</table>

<p>Fractional seconds are handled specially: they're zero-padded on the <i>right</i>.

<p>The two pattern characters {@code L} and {@code c} are ICU-compatible extensions, not
available in the RI or in Android before Android 2.3 \"Gingerbread\" (API level 9). These
extensions are necessary for correct localization in languages such as Russian
that make a grammatical distinction between, say, the word \"June\" in the sentence \"June\" and
in the sentence \"June 10th\"; the former is the stand-alone form, the latter the regular
form (because the usual case is to format a complete date). The relationship between {@code E}
and {@code c} is equivalent, but for weekday names.

<p>Five-count patterns (such as \"MMMMM\") used for the shortest non-numeric
representation of a field were introduced in Jelly Bean MR2 (API level 18).

<p>When two numeric fields are directly adjacent with no intervening delimiter
characters, they constitute a run of adjacent numeric fields. Such runs are
parsed specially. For example, the format \"HHmmss\" parses the input text
\"123456\" to 12:34:56, parses the input text \"12345\" to 1:23:45, and fails to
parse \"1234\". In other words, the leftmost field of the run is flexible,
while the others keep a fixed width. If the parse fails anywhere in the run,
then the leftmost field is shortened by one character, and the entire run is
parsed again. This is repeated until either the parse succeeds or the
leftmost field is one character in length. If the parse still fails at that
point, the parse of the run fails.

<p>See {@link #set2DigitYearStart} for more about handling two-digit years.

<h4>Sample Code</h4>
<p>If you're formatting for human use, you should use an instance returned from
{@link DateFormat} as described above. This code:
<pre>
DateFormat[] formats = new DateFormat[] {
  DateFormat.getDateInstance(),
  DateFormat.getDateTimeInstance(),
  DateFormat.getTimeInstance(),
};
for (DateFormat df : formats) {
  System.out.println(df.format(new Date(0)));
}
</pre>

<p>Produces this output when run on an {@code en_US} device in the America/Los_Angeles time zone:
<pre>
Dec 31, 1969
Dec 31, 1969 4:00:00 PM
4:00:00 PM
</pre>
And will produce similarly appropriate localized human-readable output on any user's system.

<p>If you're formatting for machine use, consider this code:
<pre>
String[] formats = new String[] {
  \"yyyy-MM-dd\",
  \"yyyy-MM-dd HH:mm\",
  \"yyyy-MM-dd HH:mmZ\",
  \"yyyy-MM-dd HH:mm:ss.SSSZ\",
  \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\",
};
for (String format : formats) {
  SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US);
  System.out.format(\"%30s %s\\n\", format, sdf.format(new Date(0)));
  sdf.setTimeZone(TimeZone.getTimeZone(\"UTC\"));
  System.out.format(\"%30s %s\\n\", format, sdf.format(new Date(0)));
}
</pre>

<p>Which produces this output when run in the America/Los_Angeles time zone:
<pre>
                    yyyy-MM-dd 1969-12-31
                    yyyy-MM-dd 1970-01-01
              yyyy-MM-dd HH:mm 1969-12-31 16:00
              yyyy-MM-dd HH:mm 1970-01-01 00:00
             yyyy-MM-dd HH:mmZ 1969-12-31 16:00-0800
             yyyy-MM-dd HH:mmZ 1970-01-01 00:00+0000
      yyyy-MM-dd HH:mm:ss.SSSZ 1969-12-31 16:00:00.000-0800
      yyyy-MM-dd HH:mm:ss.SSSZ 1970-01-01 00:00:00.000+0000
    yyyy-MM-dd'T'HH:mm:ss.SSSZ 1969-12-31T16:00:00.000-0800
    yyyy-MM-dd'T'HH:mm:ss.SSSZ 1970-01-01T00:00:00.000+0000
</pre>

<p>As this example shows, each {@code SimpleDateFormat} instance has a {@link TimeZone}.
This is because it's called upon to format instances of {@code Date}, which represents an
absolute time in UTC. That is, {@code Date} does not carry time zone information.
By default, {@code SimpleDateFormat} will use the system's default time zone. This is
appropriate for human-readable output (for which, see the previous sample instead), but
generally inappropriate for machine-readable output, where ambiguity is a problem. Note that
in this example, the output that included a time but no time zone cannot be parsed back into
the original {@code Date}. For this
reason it is almost always necessary and desirable to include the timezone in the output.
It may also be desirable to set the formatter's time zone to UTC (to ease comparison, or to
make logs more readable, for example). It is often best to avoid formatting completely when
writing dates/times in machine-readable form. Simply sending the \"Unix time\" as a {@code long}
or as the string corresponding to the long is cheaper and unambiguous, and can be formatted any
way the recipient deems appropriate.

<h4>Synchronization</h4>
{@code SimpleDateFormat} is not thread-safe. Users should create a separate instance for
each thread.

@see java.util.Calendar
@see java.util.Date
@see java.util.TimeZone
@see java.text.DateFormat"
      classrelation 347547 // <generalisation>
	relation 347547 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 347547 // <generalisation>
	  b parent class_ref 229019 // DateFormat
      end

      attribute 300187 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4774881970558875024L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 347675 // PATTERN_CHARS (<unidirectional association>)
	relation 347675 --->
	  a role_name "PATTERN_CHARS" init_value " \"GyMdkHmsSEDFwWahKzZLc\"" class_relation const_relation package
	    comment " 'L' and 'c' are ICU-compatible extensions for stand-alone month and stand-alone weekday.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 347675 // PATTERN_CHARS (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 300315 "RFC_822_TIMEZONE_FIELD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 18"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The index of 'Z' in the PATTERN_CHARS string. This pattern character is supported by the RI,
 but has no corresponding public constant."
      end

      attribute 300443 "STAND_ALONE_MONTH_FIELD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 19"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The index of 'L' (cf. 'M') in the PATTERN_CHARS string. This is an ICU-compatible extension
 necessary for correct localization in various languages (http://b/2633414)."
      end

      attribute 300571 "STAND_ALONE_DAY_OF_WEEK_FIELD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The index of 'c' (cf. 'E') in the PATTERN_CHARS string. This is an ICU-compatible extension
 necessary for correct localization in various languages (http://b/2633414)."
      end

      classrelation 347803 // pattern (<unidirectional association>)
	relation 347803 --->
	  a role_name "pattern" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 347803 // pattern (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 347931 // formatData (<unidirectional association>)
	relation 347931 --->
	  a role_name "formatData" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 347931 // formatData (<unidirectional association>)
	  b parent class_ref 229275 // DateFormatSymbols
      end

      attribute 300699 "creationYear"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 348059 // defaultCenturyStart (<unidirectional association>)
	relation 348059 --->
	  a role_name "defaultCenturyStart" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 348059 // defaultCenturyStart (<unidirectional association>)
	  b parent class_ref 171931 // Date
      end

      operation 1147035 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SimpleDateFormat} for formatting and parsing
dates and times in the {@code SHORT} style for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\"."
      end

      operation 1147163 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 1
	  param inout name "pattern" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SimpleDateFormat} using the specified
non-localized pattern and the {@code DateFormatSymbols} and {@code
Calendar} for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param pattern
           the pattern.
@throws NullPointerException
           if the pattern is {@code null}.
@throws IllegalArgumentException
           if {@code pattern} is not considered to be usable by this
           formatter."
      end

      operation 1147291 "validateFormat"
	private explicit_return_type "void"
	nparams 1
	  param in name "format" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the format character.

@param format
           the format character

@throws IllegalArgumentException
            when the format character is invalid"
      end

      operation 1147419 "validatePattern"
	private explicit_return_type "void"
	nparams 1
	  param inout name "template" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the pattern.

@param template
           the pattern to validate.

@throws NullPointerException
            if the pattern is null
@throws IllegalArgumentException
            if the pattern is invalid"
      end

      operation 1147547 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "template" type class_ref 3399692 // String
	  param inout name "value" type class_ref 229275 // DateFormatSymbols
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SimpleDateFormat} using the specified
non-localized pattern and {@code DateFormatSymbols} and the {@code
Calendar} for the user's default locale.
See \"<a href=\"../util/Locale.html#default_locale\">Be wary of the default locale</a>\".

@param template
           the pattern.
@param value
           the DateFormatSymbols.
@throws NullPointerException
           if the pattern is {@code null}.
@throws IllegalArgumentException
           if the pattern is invalid."
      end

      operation 1147675 "SimpleDateFormat"
	public explicit_return_type ""
	nparams 2
	  param inout name "template" type class_ref 3399692 // String
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SimpleDateFormat} using the specified
non-localized pattern and the {@code DateFormatSymbols} and {@code
Calendar} for the specified locale.

@param template
           the pattern.
@param locale
           the locale.
@throws NullPointerException
           if the pattern is {@code null}.
@throws IllegalArgumentException
           if the pattern is invalid."
      end

      operation 1147803 "SimpleDateFormat"
	private explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1147931 "applyLocalizedPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "template" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the pattern of this simple date format to the specified pattern
which uses localized pattern characters.

@param template
           the localized pattern."
      end

      operation 1148059 "applyPattern"
	public explicit_return_type "void"
	nparams 1
	  param inout name "template" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the pattern of this simple date format to the specified pattern
which uses non-localized pattern characters.

@param template
           the non-localized pattern.
@throws NullPointerException
               if the pattern is {@code null}.
@throws IllegalArgumentException
               if the pattern is invalid."
      end

      operation 1148187 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new {@code SimpleDateFormat} with the same pattern and
properties as this simple date format."
      end

      operation 1148315 "defaultPattern"
	class_operation private return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1148443 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object with this simple date format and indicates
if they are equal. In order to be equal, {@code object} must be an
instance of {@code SimpleDateFormat} and have the same {@code DateFormat}
properties, pattern, {@code DateFormatSymbols} and creation year.

@param object
           the object to compare with this object.
@return {@code true} if the specified object is equal to this simple date
        format; {@code false} otherwise.
@see #hashCode"
      end

      operation 1148571 "formatToCharacterIterator"
	public return_type class_ref 129051 // AttributedCharacterIterator
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats the specified object using the rules of this simple date format
and returns an {@code AttributedCharacterIterator} with the formatted
date and attributes.

@param object
           the object to format.
@return an {@code AttributedCharacterIterator} with the formatted date
        and attributes.
@throws NullPointerException
           if the object is {@code null}.
@throws IllegalArgumentException
           if the object cannot be formatted by this simple date
           format."
      end

      operation 1148699 "formatToCharacterIteratorImpl"
	private return_type class_ref 129051 // AttributedCharacterIterator
	nparams 1
	  param inout name "date" type class_ref 171931 // Date
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1148827 "formatImpl"
	private return_type class_ref 146715 // StringBuffer
	nparams 4
	  param inout name "date" type class_ref 171931 // Date
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "field" type class_ref 227739 // FieldPosition
	  param inout name "fields" type class_ref 131483 // List
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<FieldPosition> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats the date.
<p>
If the FieldPosition {@code field} is not null, and the field
specified by this FieldPosition is formatted, set the begin and end index
of the formatted field in the FieldPosition.
<p>
If the list {@code fields} is not null, find fields of this
date, set FieldPositions with these fields, and add them to the fields
vector.

@param date
           Date to Format
@param buffer
           StringBuffer to store the resulting formatted String
@param field
           FieldPosition to set begin and end index of the field
           specified, if it is part of the format for this date
@param fields
           list used to store the FieldPositions for each field in this
           date
@return the formatted Date
@throws IllegalArgumentException
           if the object cannot be formatted by this Format."
      end

      operation 1148955 "append"
	private explicit_return_type "void"
	nparams 5
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "position" type class_ref 227739 // FieldPosition
	  param inout name "fields" type class_ref 131483 // List
	  param in name "format" explicit_type "char"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<FieldPosition> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1149083 "appendDayOfWeek"
	private explicit_return_type "void"
	nparams 3
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param in name "count" explicit_type "int"
	  param inout name "standAlone" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See http://www.unicode.org/reports/tr35/#Date_Format_Patterns for the different counts."
      end

      operation 1149211 "appendMonth"
	private explicit_return_type "void"
	nparams 3
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param in name "count" explicit_type "int"
	  param inout name "standAlone" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See http://www.unicode.org/reports/tr35/#Date_Format_Patterns for the different counts."
      end

      operation 1149339 "appendTimeZone"
	private explicit_return_type "void"
	nparams 3
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param in name "count" explicit_type "int"
	  param inout name "generalTimeZone" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a representation of the time zone of 'calendar' to 'buffer'.

@param count the number of z or Z characters in the format string; \"zzz\" would be 3,
for example.
@param generalTimeZone true if we should use a display name (\"PDT\") if available;
false implies that we should use RFC 822 format (\"-0800\") instead. This corresponds to 'z'
versus 'Z' in the format string."
      end

      operation 1149467 "appendNumericTimeZone"
	private explicit_return_type "void"
	nparams 3
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param in name "count" explicit_type "int"
	  param inout name "generalTimeZone" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See http://www.unicode.org/reports/tr35/#Date_Format_Patterns for the different counts.
 @param generalTimeZone \"GMT-08:00\" rather than \"-0800\"."
      end

      operation 1149595 "appendNumber"
	private explicit_return_type "void"
	nparams 3
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param in name "count" explicit_type "int"
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1149723 "error"
	private return_type class_ref 171931 // Date
	nparams 3
	  param inout name "position" type class_ref 227995 // ParsePosition
	  param in name "offset" explicit_type "int"
	  param inout name "zone" type class_ref 229147 // TimeZone
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1149851 "format"
	public return_type class_ref 146715 // StringBuffer
	nparams 3
	  param inout name "date" type class_ref 171931 // Date
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "fieldPos" type class_ref 227739 // FieldPosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats the specified date as a string using the pattern of this date
format and appends the string to the specified string buffer.
<p>
If the {@code field} member of {@code field} contains a value specifying
a format field, then its {@code beginIndex} and {@code endIndex} members
will be updated with the position of the first occurrence of this field
in the formatted text.

@param date
           the date to format.
@param buffer
           the target string buffer to append the formatted date/time to.
@param fieldPos
           on input: an optional alignment field; on output: the offsets
           of the alignment field in the formatted text.
@return the string buffer.
@throws IllegalArgumentException
            if there are invalid characters in the pattern."
      end

      operation 1149979 "get2DigitYearStart"
	public return_type class_ref 171931 // Date
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the date which is the start of the one hundred year period for two-digit year values.
See {@link #set2DigitYearStart} for details."
      end

      operation 1150107 "getDateFormatSymbols"
	public return_type class_ref 229275 // DateFormatSymbols
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code DateFormatSymbols} used by this simple date format.

@return the {@code DateFormatSymbols} object."
      end

      operation 1150235 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1150363 "parse"
	private explicit_return_type "int"
	nparams 4
	  param inout name "string" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "format" explicit_type "char"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1150491 "parseDayOfWeek"
	private explicit_return_type "int"
	nparams 3
	  param inout name "string" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param inout name "standAlone" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1150619 "parseMonth"
	private explicit_return_type "int"
	nparams 5
	  param inout name "string" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "absolute" explicit_type "int"
	  param inout name "standAlone" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1150747 "parse"
	public return_type class_ref 171931 // Date
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Parses a date from the specified string starting at the index specified
by {@code position}. If the string is successfully parsed then the index
of the {@code ParsePosition} is updated to the index following the parsed
text. On error, the index is unchanged and the error index of {@code
ParsePosition} is set to the index where the error occurred.

@param string
           the string to parse using the pattern of this simple date
           format.
@param position
           input/output parameter, specifies the start index in {@code
           string} from where to start parsing. If parsing is successful,
           it is updated with the index following the parsed text; on
           error, the index is unchanged and the error index is set to
           the index where the error occurred.
@return the date resulting from the parse, or {@code null} if there is an
        error.
@throws IllegalArgumentException
            if there are invalid characters in the pattern."
      end

      operation 1150875 "parseNumber"
	private return_type class_ref 148379 // Number
	nparams 3
	  param in name "max" explicit_type "int"
	  param inout name "string" type class_ref 3399692 // String
	  param inout name "position" type class_ref 227995 // ParsePosition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151003 "parseNumber"
	private explicit_return_type "int"
	nparams 5
	  param in name "max" explicit_type "int"
	  param inout name "string" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param in name "field" explicit_type "int"
	  param in name "skew" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151131 "parseText"
	private explicit_return_type "int"
	nparams 4
	  param inout name "string" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	  param inout name "text" type class_ref 3399692 // String
	  param in name "field" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151259 "parseTimeZone"
	private explicit_return_type "int"
	nparams 2
	  param inout name "string" type class_ref 3399692 // String
	  param in name "offset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151387 "set2DigitYearStart"
	public explicit_return_type "void"
	nparams 1
	  param inout name "date" type class_ref 171931 // Date
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the date which is the start of the one hundred year period for two-digit year values.

<p>When parsing a date string using the abbreviated year pattern {@code yy}, {@code
SimpleDateFormat} must interpret the abbreviated year relative to some
century. It does this by adjusting dates to be within 80 years before and 20
years after the time the {@code SimpleDateFormat} instance was created. For
example, using a pattern of {@code MM/dd/yy}, an
instance created on Jan 1, 1997 would interpret the string {@code \"01/11/12\"}
as Jan 11, 2012 but interpret the string {@code \"05/04/64\"} as May 4, 1964.
During parsing, only strings consisting of exactly two digits, as
defined by {@link java.lang.Character#isDigit(char)}, will be parsed into the
default century. Any other numeric string, such as a one digit string, a
three or more digit string, or a two digit string that isn't all digits (for
example, {@code \"-1\"}), is interpreted literally. So using the same pattern, both
{@code \"01/02/3\"} and {@code \"01/02/003\"} are parsed as Jan 2, 3 AD.
Similarly, {@code \"01/02/-3\"} is parsed as Jan 2, 4 BC.

<p>If the year pattern does not have exactly two 'y' characters, the year is
interpreted literally, regardless of the number of digits. So using the
pattern {@code MM/dd/yyyy}, {@code \"01/11/12\"} is parsed as Jan 11, 12 A.D."
      end

      operation 1151515 "setDateFormatSymbols"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 229275 // DateFormatSymbols
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code DateFormatSymbols} used by this simple date format.

@param value
           the new {@code DateFormatSymbols} object."
      end

      operation 1151643 "toLocalizedPattern"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pattern of this simple date format using localized pattern
characters.

@return the localized pattern."
      end

      operation 1151771 "convertPattern"
	class_operation private return_type class_ref 3399692 // String
	nparams 4
	  param inout name "template" type class_ref 3399692 // String
	  param inout name "fromChars" type class_ref 3399692 // String
	  param inout name "toChars" type class_ref 3399692 // String
	  param inout name "check" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1151899 "toPattern"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pattern of this simple date format using non-localized
pattern characters.

@return the non-localized pattern."
      end

      classrelation 348187 // serialPersistentFields (<unidirectional association>)
	relation 348187 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"defaultCenturyStart\", Date.class),
        new ObjectStreamField(\"formatData\", DateFormatSymbols.class),
        new ObjectStreamField(\"pattern\", String.class),
        new ObjectStreamField(\"serialVersionOnStream\", int.class),
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 348187 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      operation 1152027 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1152155 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 230811 "StringCharacterIterator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An implementation of {@link CharacterIterator} for strings."
      classrelation 348315 // <realization>
	relation 348315 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 348315 // <realization>
	  b parent class_ref 129307 // CharacterIterator
      end

      classrelation 348443 // string (<unidirectional association>)
	relation 348443 --->
	  a role_name "string" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 348443 // string (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 300827 "start"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 300955 "end"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 301083 "offset"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1152283 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code StringCharacterIterator} on the specified string.
The begin and current indices are set to the beginning of the string, the
end index is set to the length of the string.

@param value
           the source string to iterate over."
      end

      operation 1152411 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 2
	  param inout name "value" type class_ref 3399692 // String
	  param in name "location" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code StringCharacterIterator} on the specified string
with the current index set to the specified value. The begin index is set
to the beginning of the string, the end index is set to the length of the
string.

@param value
           the source string to iterate over.
@param location
           the current index.
@throws IllegalArgumentException
           if {@code location} is negative or greater than the length
           of the source string."
      end

      operation 1152539 "StringCharacterIterator"
	public explicit_return_type ""
	nparams 4
	  param inout name "value" type class_ref 3399692 // String
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "location" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code StringCharacterIterator} on the specified string
with the begin, end and current index set to the specified values.

@param value
           the source string to iterate over.
@param start
           the index of the first character to iterate.
@param end
           the index one past the last character to iterate.
@param location
           the current index.
@throws IllegalArgumentException
           if {@code start < 0}, {@code start > end}, {@code location <
           start}, {@code location > end} or if {@code end} is greater
           than the length of {@code value}."
      end

      operation 1152667 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a new {@code StringCharacterIterator} with the same source
string, begin, end, and current index as this iterator.

@return a shallow copy of this iterator.
@see java.lang.Cloneable"
      end

      operation 1152795 "current"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character at the current index in the source string.

@return the current character, or {@code DONE} if the current index is
        past the end."
      end

      operation 1152923 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object with this {@code StringCharacterIterator}
and indicates if they are equal. In order to be equal, {@code object}
must be an instance of {@code StringCharacterIterator} that iterates over
the same sequence of characters with the same index.

@param object
           the object to compare with this object.
@return {@code true} if the specified object is equal to this
        {@code StringCharacterIterator}; {@code false} otherwise.
@see #hashCode"
      end

      operation 1153051 "first"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current position to the begin index and returns the character at
the new position in the source string.

@return the character at the begin index or {@code DONE} if the begin
        index is equal to the end index."
      end

      operation 1153179 "getBeginIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the begin index in the source string.

@return the index of the first character of the iteration."
      end

      operation 1153307 "getEndIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the end index in the source string.

@return the index one past the last character of the iteration."
      end

      operation 1153435 "getIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current index in the source string.

@return the current index."
      end

      operation 1153563 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1153691 "last"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current position to the end index - 1 and returns the character
at the new position.

@return the character before the end index or {@code DONE} if the begin
        index is equal to the end index."
      end

      operation 1153819 "next"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increments the current index and returns the character at the new index.

@return the character at the next index, or {@code DONE} if the next
        index would be past the end."
      end

      operation 1153947 "previous"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the current index and returns the character at the new index.

@return the character at the previous index, or {@code DONE} if the
        previous index would be past the beginning."
      end

      operation 1154075 "setIndex"
	public explicit_return_type "char"
	nparams 1
	  param in name "location" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current index in the source string.

@param location
           the index the current position is set to.
@return the character at the new index, or {@code DONE} if
        {@code location} is set to the end index.
@throws IllegalArgumentException
           if {@code location} is smaller than the begin index or greater
           than the end index."
      end

      operation 1154203 "setText"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the source string to iterate over. The begin and end positions are
set to the start and end of this string.

@param value
           the new source string."
      end
    end
  end

  deploymentview 128283 "text"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 128411 "CharacterIterator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 129307 // CharacterIterator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 128539 "AttributedCharacterIterator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Map;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 129051 // AttributedCharacterIterator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 209947 "Annotation"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 226331 // Annotation
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 210075 "AttributedString"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.text.AttributedCharacterIterator.Attribute;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 226459 // AttributedString
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 210203 "Bidi"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.awt.font.NumericShaper;
import java.awt.font.TextAttribute;
import java.util.ArrayList;
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 226843 // Bidi
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 210331 "BreakIterator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
import libcore.icu.ICU;
import libcore.icu.NativeBreakIterator;
${definition}"
      associated_classes
	class_ref 227099 // BreakIterator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 210459 "Format"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_classes
	class_ref 227611 // Format
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 210587 "ChoiceFormat"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import libcore.util.EmptyArray;
${definition}"
      associated_classes
	class_ref 227355 // ChoiceFormat
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 210715 "CollationElementIterator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import libcore.icu.CollationElementIteratorICU;
${definition}"
      associated_classes
	class_ref 228379 // CollationElementIterator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 210843 "CollationKey"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 228635 // CollationKey
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 210971 "Collator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Comparator;
import java.util.Locale;
import libcore.icu.ICU;
import libcore.icu.RuleBasedCollatorICU;
${definition}"
      associated_classes
	class_ref 228763 // Collator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 211099 "DateFormatSymbols"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Locale;
import java.util.TimeZone;
import libcore.icu.ICU;
import libcore.icu.LocaleData;
import libcore.icu.TimeZoneNames;
${definition}"
      associated_classes
	class_ref 229275 // DateFormatSymbols
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 211227 "DecimalFormat"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.Currency;
import java.util.Locale;
import libcore.icu.LocaleData;
import libcore.icu.NativeDecimalFormat;
${definition}"
      associated_classes
	class_ref 229531 // DecimalFormat
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 211355 "DecimalFormatSymbols"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.util.Currency;
import java.util.Locale;
import libcore.icu.ICU;
import libcore.icu.LocaleData;
${definition}"
      associated_classes
	class_ref 229659 // DecimalFormatSymbols
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 211483 "FieldPosition"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 227739 // FieldPosition
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 211611 "Normalizer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import libcore.icu.NativeNormalizer;
${definition}"
      associated_classes
	class_ref 230171 // Normalizer
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 211739 "ParseException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 227867 // ParseException
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 211867 "ParsePosition"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 227995 // ParsePosition
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 211995 "RuleBasedBreakIterator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import libcore.icu.NativeBreakIterator;
${definition}"
      associated_classes
	class_ref 230427 // RuleBasedBreakIterator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 212123 "RuleBasedCollator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import libcore.icu.RuleBasedCollatorICU;
${definition}"
      associated_classes
	class_ref 230555 // RuleBasedCollator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 212251 "SimpleDateFormat"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import libcore.icu.LocaleData;
import libcore.icu.TimeZoneNames;
${definition}"
      associated_classes
	class_ref 230683 // SimpleDateFormat
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 212379 "StringCharacterIterator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 230811 // StringCharacterIterator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end

  package_ref 133531 // spi
end
