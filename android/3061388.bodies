class SmoothStreamingDataFetcher
!!!12666252.java!!!	SmoothStreamingDataFetcher()
        mReadingBuffer = ByteBuffer.allocateDirect(sReadingBufferCapacity);
        mDataBuffer = ByteBuffer.allocateDirect(sDataBufferCapacity);
!!!12666380.java!!!	setBandwidthObserver(inout bandwidthObserver : DataBandwidthObserver) : void
        this.mBandwidthObserver = bandwidthObserver;
!!!12666508.java!!!	getData(in uri : String) : ByteBuffer
        URL url;

        Log.i(TAG, uri + " is requsted");
        try {
            url = new URL(uri);
        } catch (MalformedURLException e) {
            Log.e(TAG, uri + " is mal-formed url.");
            return null;
        }

        InputStream stream = null;
        try {
            stream = url.openStream();
        } catch (IOException e) {
            Log.e(TAG, "Can't open stream:" + uri);
            return null;
        }

        if (stream == null) {
            Log.e(TAG, "Can't open stream:" + uri);
            return null;
        }

        mDataBuffer.clear();

        int offset = 0;
        int length = 0;

        ReadableByteChannel channel = Channels.newChannel(stream);
        try {
            long start = System.nanoTime();
            while (channel.read(mReadingBuffer) > -1 &&
                    mDataBuffer.remaining() > mReadingBuffer.limit()) {
                mReadingBuffer.flip();

                reportBandwidthMeasurement(System.nanoTime() - start, mReadingBuffer.limit());
                mDataBuffer.put(mReadingBuffer);
                mReadingBuffer.clear();

                start = System.nanoTime();
            }
        } catch (IOException e) {
            Log.e(TAG, "Can't read data from " + uri);
            return null;
        }

        mDataBuffer.flip();
        return mDataBuffer;
!!!12666636.java!!!	reportBandwidthMeasurement(in duration : long, in size : long) : void
        if (mBandwidthObserver != null) {
            mBandwidthObserver.notifyNewMeasurement(duration, size);
        }
