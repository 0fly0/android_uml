class ProcessBuilderTest
!!!2750235.java!!!	shell() : String
        String deviceSh = "/system/bin/sh";
        String desktopSh = "/bin/sh";
        return new File(deviceSh).exists() ? deviceSh : desktopSh;
!!!2750363.java!!!	assertRedirectErrorStream(inout doRedirect : boolean, inout expectedOut : String, inout expectedErr : String) : void
        ProcessBuilder pb = new ProcessBuilder(shell(), "-c", "echo out; echo err 1>&2");
        pb.redirectErrorStream(doRedirect);
        execAndCheckOutput(pb, expectedOut, expectedErr);
!!!2750491.java!!!	test_redirectErrorStream_true() : void
        assertRedirectErrorStream(true, "out\nerr\n", "");
!!!2750619.java!!!	test_redirectErrorStream_false() : void
        assertRedirectErrorStream(false, "out\n", "err\n");
!!!2750747.java!!!	testEnvironment() : void
        ProcessBuilder pb = new ProcessBuilder(shell(), "-c", "echo $A");
        pb.environment().put("A", "android");
        execAndCheckOutput(pb, "android\n", "");
!!!2750875.java!!!	testDestroyClosesEverything() : void
        Process process = new ProcessBuilder(shell(), "-c", "echo out; echo err 1>&2").start();
        InputStream in = process.getInputStream();
        InputStream err = process.getErrorStream();
        OutputStream out = process.getOutputStream();
        process.destroy();

        try {
            in.read();
            fail();
        } catch (IOException expected) {
        }
        try {
            err.read();
            fail();
        } catch (IOException expected) {
        }
        try {
            /*
             * We test write+flush because the RI returns a wrapped stream, but
             * only bothers to close the underlying stream.
             */
            out.write(1);
            out.flush();
            fail();
        } catch (IOException expected) {
        }
!!!2751003.java!!!	testDestroyDoesNotLeak() : void
        CloseGuardTester closeGuardTester = new CloseGuardTester();
        try {
            Process process = new ProcessBuilder(shell(), "-c", "echo out; echo err 1>&2").start();
            process.destroy();
            closeGuardTester.assertEverythingWasClosed();
        } finally {
            closeGuardTester.close();
        }
!!!2751131.java!!!	testEnvironmentMapForbidsNulls() : void
        ProcessBuilder pb = new ProcessBuilder(shell(), "-c", "echo $A");
        Map<String, String> environment = pb.environment();
        Map<String, String> before = new HashMap<String, String>(environment);
        try {
            environment.put("A", null);
            fail();
        } catch (NullPointerException expected) {
        }
        try {
            environment.put(null, "android");
            fail();
        } catch (NullPointerException expected) {
        }
        assertEquals(before, environment);
