class HTML5VideoViewProxy
!!!4900876.java!!!	onPrepared(inout mp : MediaPlayer) : void
        VideoPlayer.onPrepared();
        Message msg = Message.obtain(mWebCoreHandler, PREPARED);
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("dur", new Integer(mp.getDuration()));
        map.put("width", new Integer(mp.getVideoWidth()));
        map.put("height", new Integer(mp.getVideoHeight()));
        msg.obj = map;
        mWebCoreHandler.sendMessage(msg);
!!!4901004.java!!!	onCompletion(inout mp : MediaPlayer) : void
        // The video ended by itself, so we need to
        // send a message to the UI thread to dismiss
        // the video view and to return to the WebView.
        // arg1 == 1 means the video ends by itself.
        sendMessage(obtainMessage(ENDED, 1, 0));
!!!4901132.java!!!	onError(inout mp : MediaPlayer, in what : int, in extra : int) : boolean
        sendMessage(obtainMessage(ERROR));
        return false;
!!!4901260.java!!!	dispatchOnEnded() : void
        Message msg = Message.obtain(mWebCoreHandler, ENDED);
        mWebCoreHandler.sendMessage(msg);
!!!4901388.java!!!	dispatchOnPaused() : void
        Message msg = Message.obtain(mWebCoreHandler, PAUSED);
        mWebCoreHandler.sendMessage(msg);
!!!4901516.java!!!	dispatchOnStopFullScreen(inout stillPlaying : boolean) : void
        Message msg = Message.obtain(mWebCoreHandler, STOPFULLSCREEN);
        msg.arg1 = stillPlaying ? 1 : 0;
        mWebCoreHandler.sendMessage(msg);
!!!4901644.java!!!	dispatchOnRestoreState() : void
        Message msg = Message.obtain(mWebCoreHandler, RESTORESTATE);
        mWebCoreHandler.sendMessage(msg);
!!!4901772.java!!!	onTimeupdate() : void
        sendMessage(obtainMessage(TIMEUPDATE));
!!!4901900.java!!!	onFrameAvailable(inout surfaceTexture : SurfaceTexture) : void
        // TODO: This should support partial invalidation too.
        mWebView.invalidate();
!!!4902028.java!!!	handleMessage(inout msg : Message) : void
        // This executes on the UI thread.
        switch (msg.what) {
            case PLAY: {
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                int videoLayerID = msg.arg1;
                if (client != null) {
                    VideoPlayer.play(url, mSeekPosition, this, client, videoLayerID);
                }
                break;
            }
            case ENTER_FULLSCREEN:{
                String url = (String) msg.obj;
                WebChromeClient client = mWebView.getWebChromeClient();
                int videoLayerID = msg.arg1;
                if (client != null) {
                    VideoPlayer.enterFullScreenVideo(videoLayerID, url, this, mWebView);
                }
                break;
            }
            case SEEK: {
                Integer time = (Integer) msg.obj;
                mSeekPosition = time;
                VideoPlayer.seek(mSeekPosition, this);
                break;
            }
            case PAUSE: {
                VideoPlayer.pause(this);
                break;
            }
            case ENDED:
                if (msg.arg1 == 1)
                    VideoPlayer.isVideoSelfEnded = true;
                VideoPlayer.end();
                break;
            case ERROR: {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    client.onHideCustomView();
                }
                break;
            }
            case LOAD_DEFAULT_POSTER: {
                WebChromeClient client = mWebView.getWebChromeClient();
                if (client != null) {
                    doSetPoster(client.getDefaultVideoPoster());
                }
                break;
            }
            case TIMEUPDATE: {
                if (VideoPlayer.isPlaying(this)) {
                    sendTimeupdate();
                }
                break;
            }
            case BUFFERING_START: {
                VideoPlayer.setPlayerBuffering(true);
                break;
            }
            case BUFFERING_END: {
                VideoPlayer.setPlayerBuffering(false);
                break;
            }
        }
!!!4903820.java!!!	HTML5VideoViewProxy(inout webView : WebViewClassic, in nativePtr : int)
        // This handler is for the main (UI) thread.
        super(Looper.getMainLooper());
        // Save the WebView object.
        mWebView = webView;
        // Pass Proxy into webview, such that every time we have a setBaseLayer
        // call, we tell this Proxy to call the native to update the layer tree
        // for the Video Layer's surface texture info
        mWebView.setHTML5VideoViewProxy(this);
        // Save the native ptr
        mNativePointer = nativePtr;
        // create the message handler for this thread
        createWebCoreHandler();
!!!4903948.java!!!	createWebCoreHandler() : void
        mWebCoreHandler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case PREPARED: {
                        Map<String, Object> map = (Map<String, Object>) msg.obj;
                        Integer duration = (Integer) map.get("dur");
                        Integer width = (Integer) map.get("width");
                        Integer height = (Integer) map.get("height");
                        nativeOnPrepared(duration.intValue(), width.intValue(),
                                height.intValue(), mNativePointer);
                        break;
                    }
                    case ENDED:
                        mSeekPosition = 0;
                        nativeOnEnded(mNativePointer);
                        break;
                    case PAUSED:
                        nativeOnPaused(mNativePointer);
                        break;
                    case POSTER_FETCHED:
                        Bitmap poster = (Bitmap) msg.obj;
                        nativeOnPosterFetched(poster, mNativePointer);
                        break;
                    case TIMEUPDATE:
                        nativeOnTimeupdate(msg.arg1, mNativePointer);
                        break;
                    case STOPFULLSCREEN:
                        nativeOnStopFullscreen(msg.arg1, mNativePointer);
                        break;
                    case RESTORESTATE:
                        nativeOnRestoreState(mNativePointer);
                        break;
                }
            }
        };
!!!4904076.java!!!	doSetPoster(inout poster : Bitmap) : void
        if (poster == null) {
            return;
        }
        // Save a ref to the bitmap and send it over to the WebCore thread.
        mPoster = poster;
        Message msg = Message.obtain(mWebCoreHandler, POSTER_FETCHED);
        msg.obj = poster;
        mWebCoreHandler.sendMessage(msg);
!!!4904204.java!!!	sendTimeupdate() : void
        Message msg = Message.obtain(mWebCoreHandler, TIMEUPDATE);
        msg.arg1 = VideoPlayer.getCurrentPosition();
        mWebCoreHandler.sendMessage(msg);
!!!4904332.java!!!	getContext() : Context
        return mWebView.getContext();
!!!4904460.java!!!	play(in url : String, in position : int, in videoLayerID : int) : void
        if (url == null) {
            return;
        }

        if (position > 0) {
            seek(position);
        }
        Message message = obtainMessage(PLAY);
        message.arg1 = videoLayerID;
        message.obj = url;
        sendMessage(message);
!!!4904588.java!!!	enterFullscreenForVideoLayer(in url : String, in videoLayerID : int) : void
        if (url == null) {
            return;
        }

        Message message = obtainMessage(ENTER_FULLSCREEN);
        message.arg1 = videoLayerID;
        message.obj = url;
        sendMessage(message);
!!!4904716.java!!!	seek(in time : int) : void
        Message message = obtainMessage(SEEK);
        message.obj = new Integer(time);
        sendMessage(message);
!!!4904844.java!!!	pause() : void
        Message message = obtainMessage(PAUSE);
        sendMessage(message);
!!!4904972.java!!!	teardown() : void
        // This is called by the C++ MediaPlayerPrivate dtor.
        // Cancel any active poster download.
        if (mPosterDownloader != null) {
            mPosterDownloader.cancelAndReleaseQueue();
        }
        mNativePointer = 0;
!!!4905100.java!!!	loadPoster(in url : String) : void
        if (url == null) {
            Message message = obtainMessage(LOAD_DEFAULT_POSTER);
            sendMessage(message);
            return;
        }
        // Cancel any active poster download.
        if (mPosterDownloader != null) {
            mPosterDownloader.cancelAndReleaseQueue();
        }
        // Load the poster asynchronously
        mPosterDownloader = new PosterDownloader(url, this);
        mPosterDownloader.start();
!!!4905228.java!!!	setBaseLayer(in layer : int) : void
        VideoPlayer.setBaseLayer(layer);
!!!4905356.java!!!	pauseAndDispatch() : void
        VideoPlayer.pauseAndDispatch();
!!!4905484.java!!!	enterFullScreenVideo(in layerId : int, in url : String) : void
        VideoPlayer.enterFullScreenVideo(layerId, url, this, mWebView);
!!!4905612.java!!!	exitFullScreenVideo() : void
        VideoPlayer.exitFullScreenVideo(this, mWebView);
!!!4905740.java!!!	getInstance(inout webViewCore : WebViewCore, in nativePtr : int) : HTML5VideoViewProxy
        return new HTML5VideoViewProxy(webViewCore.getWebViewClassic(), nativePtr);
!!!4905868.java!!!	getWebView() : WebViewClassic
        return mWebView;
!!!4907020.java!!!	onInfo(inout mp : MediaPlayer, in what : int, in extra : int) : boolean
        if (what == MediaPlayer.MEDIA_INFO_BUFFERING_START) {
            sendMessage(obtainMessage(BUFFERING_START, what, extra));
        } else if (what == MediaPlayer.MEDIA_INFO_BUFFERING_END) {
            sendMessage(obtainMessage(BUFFERING_END, what, extra));
        }
        return false;
!!!4907148.java!!!	onKey(inout v : View, in keyCode : int, inout event : KeyEvent) : boolean
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
                return true;
            } else if (event.getAction() == KeyEvent.ACTION_UP && !event.isCanceled()) {
                VideoPlayer.exitFullScreenVideo(this, mWebView);
                return true;
            }
        }
        return false;
