class GlobalKeyHandlerService
!!!12214668.java!!!	showToast(in resId : int) : void
        if (mToast == null) {
            mToast = Toast.makeText(getApplicationContext(),
                                    resId, Toast.LENGTH_LONG);
        } else {
            mToast.setText(resId);
        }
        mToast.show();
!!!12214796.java!!!	onBind(inout intent : Intent) : IBinder
        return null;
!!!12214924.java!!!	onStartCommand(inout intent : Intent, in flags : int, in startId : int) : int
        Log.d(LOG_TAG, "Starting global key service.");
        mSettings = new BasicMediaDeviceSettings(getApplicationContext());

        if (mManager == null) {
            mManager = new GlobalKeyManager();
        }
        if (mListener == null) {
            mListener = new IGlobalKeyListener.Stub() {
                @Override
                public boolean onGlobalKeyEvent(int keyCode, KeyEvent event) {
                    Log.d(LOG_TAG, "Got global key event " + event);
                    // Handle Power, Input key at 'pressed down'
                    if (keyCode != KeyEvent.KEYCODE_VOLUME_UP
                        && keyCode != KeyEvent.KEYCODE_VOLUME_DOWN) {
                        if (event.getAction () != KeyEvent.ACTION_DOWN) {
                            return false;
                        }
                    }
                    mCodeSet = null;
                    switch (keyCode) {
                    case KeyEvent.KEYCODE_STB_POWER:
                        return sendPowerToSTB();
                    case KeyEvent.KEYCODE_STB_INPUT:
                        return sendInputToSTB();
                    default:
                        break;
                    }

                    UEIKey sendUEIKey = null;
                    switch (keyCode) {
                    case KeyEvent.KEYCODE_TV_POWER:
                        if (TV_isPaired()) {
                            sendUEIKey = UEIKey.POWER;
                        }
                        break;
                    case KeyEvent.KEYCODE_AVR_POWER:
                        if (AVR_isPaired()) {
                            sendUEIKey = UEIKey.POWER;
                        }
                        break;
                    case KeyEvent.KEYCODE_TV_INPUT:
                        if (TV_isPaired()) {
                            sendUEIKey = UEIKey.INPUT;
                        }
                        break;
                    case KeyEvent.KEYCODE_AVR_INPUT:
                        if (AVR_isPaired()) {
                            sendUEIKey = UEIKey.INPUT;
                        }
                        break;
                    default:
                        break;
                    }

                    switch (keyCode) {
                    case KeyEvent.KEYCODE_VOLUME_UP:
                        if (needHandleVolumeKeys(keyCode)) {
                            sendUEIKey = UEIKey.VOLUME_UP;
                        }
                        break;
                    case KeyEvent.KEYCODE_VOLUME_DOWN:
                        if (needHandleVolumeKeys(keyCode)) {
                            sendUEIKey = UEIKey.VOLUME_DOWN;
                        }
                        break;
                    case KeyEvent.KEYCODE_VOLUME_MUTE:
                        if (needHandleVolumeKeys(keyCode)) {
                            sendUEIKey = UEIKey.MUTE;
                        }
                        break;
                    default:
                        break;
                    }

                    if (null == sendUEIKey) {
                        Log.d(LOG_TAG, "This global key event is not handled here.");
                        return false;
                    }

                    if (sendUEIKey == UEIKey.VOLUME_UP || sendUEIKey == UEIKey.VOLUME_DOWN) {
                        if (event.getAction () == KeyEvent.ACTION_DOWN && !mInContinuesVolume) {
                            IRBCommand.sendContinuousKey(mCodeSet, sendUEIKey);
                            mInContinuesVolume = true;
                        } else if (event.getAction () == KeyEvent.ACTION_UP && mInContinuesVolume) {
                            mInContinuesVolume = false;
                            IRBCommand.stopContinuousKey();
                        }
                    } else {
                        int sendKeyRet = IRBCommand.sendKey(mCodeSet, sendUEIKey);
                        if (sendKeyRet == IRBCommand.IRB_INVALID_KEYCODE_OR_IRDATA &&
                            sendUEIKey == UEIKey.POWER) {
                            if (IRBCommand.hasUEIKey(mCodeSet, UEIKey.POWER_ON)) {
                                startActivity(IntentUtil.createPowerIntent(getApplicationContext(),
                                                                      mCodeSet));
                            } else {
                                showPowerMessage();
                            }
                        }
                    }
                    // Just return true if this key is handled by IR Blaster.
                    return true;
                }
            };
        }
        if (!mIsListening) {
            startListening();
        }
        return START_STICKY;
!!!12215052.java!!!	onDestroy() : void
        Log.d(LOG_TAG, "Destroying global key service.");
        if (mManager != null && mListener != null) {
            mManager.unregisterGlobalKeyListener(mListener);
            mIsListening = false;
        }
        mManager = null;
        mListener = null;
        super.onDestroy();
!!!12215180.java!!!	startListening() : void
        if (mManager != null && mListener != null) {
            mManager.registerGlobalKeyListener(mListener);
            mIsListening = true;
        }
!!!12215308.java!!!	showMessage(in keyCode : int) : void
        Message msg = mToastHandler.obtainMessage();
        msg.arg1 = keyCode;
        mToastHandler.sendMessage(msg);
!!!12215436.java!!!	showPowerMessage() : void
        Message msg = mToastHandler.obtainMessage();
        msg.arg1 = MSG_POWER;
        mToastHandler.sendMessage(msg);
!!!12215564.java!!!	needHandleVolumeKeys(in keyCode : int) : boolean
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
                getApplicationContext());
        // We are testing TV now.
        if (IrBlasterTestOutputFragment.TV_TESTING_CODE != null) {
            Log.d(LOG_TAG, "==> Volume control testing TV "
                + IrBlasterTestOutputFragment.TV_TESTING_CODE);
            mCodeSet = IrBlasterTestOutputFragment.TV_TESTING_CODE;
            return true;
        }

        // We are testing AVR now.
        if (IrBlasterTestOutputFragment.AVR_TESTING_CODE != null) {
            Log.d(LOG_TAG, "==> Volume control testing AVR "
                + IrBlasterTestOutputFragment.AVR_TESTING_CODE);
            mCodeSet = IrBlasterTestOutputFragment.AVR_TESTING_CODE;
            showMessage(keyCode);
            return true;
        }

        // Volume Control
        String volume_control = prefs.getString("pref_volume_control", null);
        if (volume_control != null) {
            if (volume_control.equals(getString(R.string.pref_volume_tv))) {
                String tv_code = prefs.getString("tv_code", null);
                if (tv_code != null) {
                    Log.d(LOG_TAG, "==> Volume control TV " + tv_code);
                    mCodeSet = tv_code;
                    return true;
                } else {
                    return false;
                }
            } else if (volume_control.equals(getString(R.string.pref_volume_avr))) {
                String avr_code = prefs.getString("avr_code", null);
                if (avr_code != null) {
                    Log.d(LOG_TAG, "==> Volume control AVR " + avr_code);
                    mCodeSet = avr_code;
                    showMessage(keyCode);
                    return true;
                } else {
                    return false;
                }
            }
        }
        return false;
!!!12215692.java!!!	TV_isPaired() : boolean
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
                getApplicationContext());
        String tv_code = prefs.getString("tv_code", null);
        if (tv_code != null) {
            Log.d(LOG_TAG, "==> Volume control TV " + tv_code);
            mCodeSet = tv_code;
            return true;
        }

        return false;
!!!12215820.java!!!	isSTBCommandSet(in commandSetId : String) : boolean
        if (commandSetId != null && !commandSetId.isEmpty() &&
            (commandSetId.charAt(0) == 'C' || commandSetId.charAt(0) == 'S' ||
            commandSetId.charAt(0) == 'V' || commandSetId.charAt(0) == 'Y' ||
            commandSetId.charAt(0) == 'N')) {
            return true;
        }
        return false;
!!!12215948.java!!!	sendInputToSTB() : boolean
        int stbNum = 0;
        String stbCommandSetId = null;
        List<String> pairedDevices = mSettings.getPairedDeviceIds();
        for (String deviceId : pairedDevices) {
            String commandSetId = mSettings.getString(deviceId,
                                  OneWayConstants.KEY_IR_COMMAND_SET_ID, null);
            Log.d(LOG_TAG, "deviceId: " + deviceId + ", commandSetId: " + commandSetId);
            // If there are input devices STB, input key will be sent to them.
            if (isSTBCommandSet(commandSetId)) {
                Log.d(LOG_TAG, "STB deviceId = " + deviceId);
                stbNum++;
                stbCommandSetId = commandSetId;
            }
        }

        if (stbNum == 1) {
            // Just one STB, send directly
            IRBCommand.sendKey(stbCommandSetId, UEIKey.INPUT);
        } else if (stbNum > 1) {
            startActivity(IntentUtil.createDeviceSelectIntent(getApplicationContext(),
                                                             UEIKey.INPUT));
        } else {
            Log.d(LOG_TAG, "Input, No STB connected");
            return false;
        }

        return true;
!!!12216076.java!!!	sendPowerToSTB() : boolean
        int stbNum = 0;
        String stbCommandSetId = null;
        List<String> pairedDevices = mSettings.getPairedDeviceIds();
        for (String deviceId : pairedDevices) {
            String commandSetId = mSettings.getString(deviceId,
                                  OneWayConstants.KEY_IR_COMMAND_SET_ID, null);
            Log.d(LOG_TAG, "deviceId: " + deviceId + ", commandSetId: " + commandSetId);
            // If there are input devices STB, power key will be sent to them.
            if (isSTBCommandSet(commandSetId)) {
                Log.d(LOG_TAG, "STB deviceId = " + deviceId);
                stbNum++;
                stbCommandSetId = commandSetId;
            }
        }

        if (stbNum == 1) {
            // Just one STB, send directly
            int sendKeyRet = IRBCommand.sendKey(stbCommandSetId, UEIKey.POWER);
            if (sendKeyRet == IRBCommand.IRB_INVALID_KEYCODE_OR_IRDATA) {
                if (IRBCommand.hasUEIKey(mCodeSet, UEIKey.POWER_ON)) {
                    startActivity(IntentUtil.createPowerIntent(getApplicationContext(),
                                                              mCodeSet));
                } else {
                    showPowerMessage();
                }
            }
        } else if (stbNum > 1) {
            startActivity(IntentUtil.createDeviceSelectIntent(getApplicationContext(),
                                                             UEIKey.POWER));
        } else {
            Log.d(LOG_TAG, "Power, No STB connected");
            return false;
        }

        return true;
!!!12216204.java!!!	AVR_isPaired() : boolean
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
                getApplicationContext());
        String avr_code = prefs.getString("avr_code", null);
        if (avr_code != null) {
            Log.d(LOG_TAG, "==> Volume control AVR " + avr_code);
            mCodeSet = avr_code;
            return true;
        }

        return false;
