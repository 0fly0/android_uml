class KeyStoreManager
!!!13399436.java!!!	KeyStoreManager(inout context : Context, inout listener : Listener)
        mContext = context;
        mKeyStore = load();
        mListener = listener;
!!!13399564.java!!!	load() : KeyStore
        KeyStore keyStore;
        try {
            keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        } catch (KeyStoreException e) {
            throw new IllegalStateException(
                    "Unable to get default instance of KeyStore", e);
        }
        try {
            FileInputStream fis = mContext.openFileInput(KEYSTORE_FILENAME);
            keyStore.load(fis, KEYSTORE_PASSWORD);
        } catch (IOException e) {
            Log.v(LOG_TAG, "Unable open keystore file", e);
            keyStore = null;
        } catch (GeneralSecurityException e) {
            Log.v(LOG_TAG, "Unable open keystore file", e);
            keyStore = null;
        }

        if (keyStore != null && hasServerIdentityAlias(keyStore)) {
            // KeyStore loaded and valid
            return keyStore;
        }

        try {
            keyStore = createIdentityKeyStore();
        } catch (GeneralSecurityException e) {
            throw new IllegalStateException(
                    "Unable to create identity KeyStore", e);
        }
        store(keyStore);
        return keyStore;
!!!13399692.java!!!	hasServerIdentityAlias(inout keyStore : KeyStore) : boolean
        try {
            if (!keyStore.containsAlias(SERVER_IDENTITY_ALIAS)) {
                Log.e(LOG_TAG, "Key store missing identity for "
                        + SERVER_IDENTITY_ALIAS);
                return false;
            }
        } catch (KeyStoreException e) {
            Log.e(LOG_TAG, "Key store exception occurred", e);
            return false;
        }
        return true;
!!!13399820.java!!!	createIdentity(inout keyStore : KeyStore) : void
        Log.v(LOG_TAG, "Generating key pair ...");
        KeyPairGenerator kg = KeyPairGenerator.getInstance("RSA");
        KeyPair keyPair = kg.generateKeyPair();

        Log.v(LOG_TAG, "Generating certificate ...");
        String name = getCertificateName();
        X509Certificate cert = SslUtil.generateX509V3Certificate(keyPair, name);
        Certificate[] chain = { cert };

        Log.v(LOG_TAG, "Adding key to keystore  ...");
        keyStore.setKeyEntry(
                SERVER_IDENTITY_ALIAS, keyPair.getPrivate(), null, chain);

        Log.d(LOG_TAG, "Key added!");
!!!13399948.java!!!	createIdentityKeyStore() : KeyStore
        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
        try {
            keyStore.load(null, KEYSTORE_PASSWORD);
        } catch (IOException e) {
            throw new GeneralSecurityException(
                    "Unable to create empty keyStore", e);
        }
        createIdentity(keyStore);
        return keyStore;
!!!13400076.java!!!	store(inout keyStore : KeyStore) : void
        try {
            FileOutputStream fos = mContext.openFileOutput(
                    KEYSTORE_FILENAME, Context.MODE_PRIVATE);
            keyStore.store(fos, KEYSTORE_PASSWORD);
            fos.close();
        } catch (IOException e) {
            throw new IllegalStateException("Unable to store keyStore", e);
        } catch (GeneralSecurityException e) {
            throw new IllegalStateException("Unable to store keyStore", e);
        }
!!!13400204.java!!!	store() : void
        store(mKeyStore);
!!!13400332.java!!!	getCertificateName() : String
        return "CN=googletv/" + Build.PRODUCT + "/" + Build.DEVICE + "/"
                + Build.MODEL + "/" + getUniqueId();
!!!13400460.java!!!	getUniqueId() : String
        UUID uuid = UUID.randomUUID();
        return SystemProperties.get("ro.serialno", SystemProperties.get(
                "ro.macaddr", uuid.toString()));
!!!13400588.java!!!	getKeyManagers() : KeyManager
        Preconditions.checkNotNull(mKeyStore);
        KeyManagerFactory factory = KeyManagerFactory.getInstance(
                KeyManagerFactory.getDefaultAlgorithm());
        factory.init(mKeyStore, "".toCharArray());
        return factory.getKeyManagers();
!!!13400716.java!!!	getTrustManagers() : TrustManager
        // Build a new set of TrustManagers based on the KeyStore.
        TrustManagerFactory factory = TrustManagerFactory.getInstance(
                TrustManagerFactory.getDefaultAlgorithm());
        factory.init(mKeyStore);
        return factory.getTrustManagers();
!!!13400844.java!!!	createAlias(in id : String) : String
        return String.format(REMOTE_IDENTITY_ALIAS_PATTERN, id);
!!!13400972.java!!!	storeCertificate(inout peerCert : Certificate, in id : String) : void
        try {
            String peerAlias = createAlias(id);
            String peerSubjectDN = getSubjectDN(peerCert);

            if (mKeyStore.containsAlias(peerAlias)) {
                Log.w(LOG_TAG, "Deleting existing entry for " + peerAlias);
                mKeyStore.deleteEntry(peerAlias);
            }
            // Let's remove certificates with identical subject:
            if (peerSubjectDN != null) {
                for (Enumeration<String> aliasEnum = mKeyStore.aliases();
                        aliasEnum.hasMoreElements(); ) {
                    String alias = aliasEnum.nextElement();
                    String subjectDN = getSubjectDN(mKeyStore.getCertificate(alias));

                    if (subjectDN != null && subjectDN.equals(peerSubjectDN)) {
                        Log.d(LOG_TAG, "Deleting entry for " + alias + " (" + subjectDN + ")");
                        mKeyStore.deleteEntry(alias);
                    }
                }
            }
            Log.i(LOG_TAG, "Adding cert to keystore.");
            mKeyStore.setCertificateEntry(peerAlias, peerCert);
            store();
            if (mListener != null) {
                mListener.onChanged();
            }
        } catch (KeyStoreException e) {
            Log.e(LOG_TAG, "Storing cert failed", e);
        }
!!!13401100.java!!!	getSubjectDN(inout cert : Certificate) : String
        if (cert instanceof X509Certificate) {
            X509Certificate x509Cert = (X509Certificate) cert;
            X500Principal principal = x509Cert.getSubjectX500Principal();
            if (principal != null) {
                return principal.getName();
            }
        }
        return null;
!!!13401228.java!!!	removeCertificate(in id : String) : Certificate
        try {
            String alias = createAlias(id);
            if (!mKeyStore.containsAlias(alias)) {
                Log.w(LOG_TAG, "No entry for " + alias);
                return null;
            }
            Log.i(LOG_TAG, "Removing cert from keystore: " + alias);
            Certificate entry = mKeyStore.getCertificate(alias);
            mKeyStore.deleteEntry(alias);
            store();
            if (mListener != null) {
                mListener.onChanged();
            }
            return entry;
        } catch (KeyStoreException e) {
            Log.e(LOG_TAG, "Removing cert failed", e);
            return null;
        }
!!!13401356.java!!!	clear() : void
        try {
            for (Enumeration<String> e = mKeyStore.aliases();
                    e.hasMoreElements();) {
                final String alias = e.nextElement();
                Log.v(LOG_TAG, "Deleting alias: " + alias);
                mKeyStore.deleteEntry(alias);
            }
        } catch (KeyStoreException e) {
            Log.e(LOG_TAG, "Clearing certificates failed", e);
        }
        try {
            createIdentity(mKeyStore);
        } catch (GeneralSecurityException e) {
            Log.e(LOG_TAG, "Creating identity failed", e);
        }
        store();
        if (mListener != null) {
            mListener.onChanged();
        }
