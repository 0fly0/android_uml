class ContentProvider
!!!3055756.java!!!	ContentProvider(inout context : Context, in readPermission : String, in writePermission : String, inout pathPermissions : PathPermission)
        mContext = context;
        mReadPermission = readPermission;
        mWritePermission = writePermission;
        mPathPermissions = pathPermissions;
!!!3055884.java!!!	coerceToLocalContentProvider(inout abstractInterface : IContentProvider) : ContentProvider
        if (abstractInterface instanceof Transport) {
            return ((Transport)abstractInterface).getContentProvider();
        }
        return null;
!!!3062412.java!!!	getContext() : Context
        return mContext;
!!!3062540.java!!!	setReadPermission(in permission : String) : void
        mReadPermission = permission;
!!!3062668.java!!!	getReadPermission() : String
        return mReadPermission;
!!!3062796.java!!!	setWritePermission(in permission : String) : void
        mWritePermission = permission;
!!!3062924.java!!!	getWritePermission() : String
        return mWritePermission;
!!!3063052.java!!!	setPathPermissions(inout permissions : PathPermission) : void
        mPathPermissions = permissions;
!!!3063180.java!!!	getPathPermissions() : PathPermission
        return mPathPermissions;
!!!3063948.java!!!	query(inout uri : Uri, inout projection : String, in selection : String, inout selectionArgs : String, in sortOrder : String, inout cancellationSignal : CancellationSignal) : Cursor
        return query(uri, projection, selection, selectionArgs, sortOrder);
!!!3064332.java!!!	bulkInsert(inout uri : Uri, inout values : ContentValues) : int
        int numValues = values.length;
        for (int i = 0; i < numValues; i++) {
            insert(uri, values[i]);
        }
        return numValues;
!!!3064716.java!!!	openFile(inout uri : Uri, in mode : String) : ParcelFileDescriptor
        throw new FileNotFoundException("No files supported by provider at "
                + uri);
!!!3064844.java!!!	openAssetFile(inout uri : Uri, in mode : String) : AssetFileDescriptor
        ParcelFileDescriptor fd = openFile(uri, mode);
        return fd != null ? new AssetFileDescriptor(fd, 0, -1) : null;
!!!3064972.java!!!	openFileHelper(inout uri : Uri, in mode : String) : ParcelFileDescriptor
        Cursor c = query(uri, new String[]{"_data"}, null, null, null);
        int count = (c != null) ? c.getCount() : 0;
        if (count != 1) {
            // If there is not exactly one result, throw an appropriate
            // exception.
            if (c != null) {
                c.close();
            }
            if (count == 0) {
                throw new FileNotFoundException("No entry for " + uri);
            }
            throw new FileNotFoundException("Multiple items at " + uri);
        }

        c.moveToFirst();
        int i = c.getColumnIndex("_data");
        String path = (i >= 0 ? c.getString(i) : null);
        c.close();
        if (path == null) {
            throw new FileNotFoundException("Column _data not found.");
        }

        int modeBits = ContentResolver.modeToMode(uri, mode);
        return ParcelFileDescriptor.open(new File(path), modeBits);
!!!3065100.java!!!	getStreamTypes(inout uri : Uri, in mimeTypeFilter : String) : String
        return null;
!!!3065228.java!!!	openTypedAssetFile(inout uri : Uri, in mimeTypeFilter : String, inout opts : Bundle) : AssetFileDescriptor
        if ("*/*".equals(mimeTypeFilter)) {
            // If they can take anything, the untyped open call is good enough.
            return openAssetFile(uri, "r");
        }
        String baseType = getType(uri);
        if (baseType != null && ClipDescription.compareMimeTypes(baseType, mimeTypeFilter)) {
            // Use old untyped open call if this provider has a type for this
            // URI and it matches the request.
            return openAssetFile(uri, "r");
        }
        throw new FileNotFoundException("Can't open " + uri + " as type " + mimeTypeFilter);
!!!3065484.java!!!	openPipeHelper(in uri : Uri, in mimeType : String, in opts : Bundle, in args : T, in func : PipeDataWriter) : ParcelFileDescriptor
        try {
            final ParcelFileDescriptor[] fds = ParcelFileDescriptor.createPipe();

            AsyncTask<Object, Object, Object> task = new AsyncTask<Object, Object, Object>() {
                @Override
                protected Object doInBackground(Object... params) {
                    func.writeDataToPipe(fds[1], uri, mimeType, opts, args);
                    try {
                        fds[1].close();
                    } catch (IOException e) {
                        Log.w(TAG, "Failure closing pipe", e);
                    }
                    return null;
                }
            };
            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Object[])null);

            return fds[0];
        } catch (IOException e) {
            throw new FileNotFoundException("failure making pipe");
        }
!!!3065612.java!!!	isTemporary() : boolean
        return false;
!!!3065740.java!!!	getIContentProvider() : IContentProvider
        return mTransport;
!!!3065868.java!!!	attachInfo(inout context : Context, inout info : ProviderInfo) : void
        /*
         * We may be using AsyncTask from binder threads.  Make it init here
         * so its static handler is on the main thread.
         */
        AsyncTask.init();

        /*
         * Only allow it to be set once, so after the content service gives
         * this to us clients can't change it.
         */
        if (mContext == null) {
            mContext = context;
            mMyUid = Process.myUid();
            if (info != null) {
                setReadPermission(info.readPermission);
                setWritePermission(info.writePermission);
                setPathPermissions(info.pathPermissions);
                mExported = info.exported;
            }
            ContentProvider.this.onCreate();
        }
!!!3065996.java!!!	applyBatch(inout operations : ArrayList<ContentProviderOperation>) : ContentProviderResult
        final int numOperations = operations.size();
        final ContentProviderResult[] results = new ContentProviderResult[numOperations];
        for (int i = 0; i < numOperations; i++) {
            results[i] = operations.get(i).apply(this, results, i);
        }
        return results;
!!!3066124.java!!!	call(in method : String, in arg : String, inout extras : Bundle) : Bundle
        return null;
!!!3066252.java!!!	shutdown() : void
        Log.w(TAG, "implement ContentProvider shutdown() to make sure all database " +
                "connections are gracefully shutdown");
!!!3066380.java!!!	dump(inout fd : FileDescriptor, inout writer : PrintWriter, inout args : String) : void
        writer.println("nothing to dump");
