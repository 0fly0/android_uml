class InterruptedStreamTest
!!!2627483.java!!!	setUp() : void
        // Clear the interrupted bit to make sure an earlier test did
        // not leave us in a bad state.
        Thread.interrupted();
        super.tearDown();
!!!2627611.java!!!	tearDown() : void
        if (sockets != null) {
            sockets[0].close();
            sockets[1].close();
        }
        Thread.interrupted(); // clear interrupted bit
        super.tearDown();
!!!2627739.java!!!	testInterruptPipedInputStream() : void
        PipedOutputStream out = new PipedOutputStream();
        PipedInputStream in = new PipedInputStream(out);
        testInterruptInputStream(in);
!!!2627867.java!!!	testInterruptPipedOutputStream() : void
        PipedOutputStream out = new PipedOutputStream();
        new PipedInputStream(out);
        testInterruptOutputStream(out);
!!!2627995.java!!!	testInterruptPipedReader() : void
        PipedWriter writer = new PipedWriter();
        PipedReader reader = new PipedReader(writer);
        testInterruptReader(reader);
!!!2628123.java!!!	testInterruptPipedWriter() : void
        final PipedWriter writer = new PipedWriter();
        new PipedReader(writer);
        testInterruptWriter(writer);
!!!2628251.java!!!	testInterruptReadablePipeChannel() : void
        testInterruptReadableChannel(Pipe.open().source());
!!!2628379.java!!!	testInterruptWritablePipeChannel() : void
        testInterruptWritableChannel(Pipe.open().sink());
!!!2628507.java!!!	testInterruptReadableSocketChannel() : void
        sockets = newSocketChannelPair();
        testInterruptReadableChannel(sockets[0].getChannel());
!!!2628635.java!!!	testInterruptWritableSocketChannel() : void
        sockets = newSocketChannelPair();
        testInterruptWritableChannel(sockets[0].getChannel());
!!!2628763.java!!!	newSocketChannelPair() : Socket
        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
        serverSocketChannel.socket().bind(new InetSocketAddress(0));
        SocketChannel clientSocketChannel = SocketChannel.open();
        clientSocketChannel.connect(serverSocketChannel.socket().getLocalSocketAddress());
        SocketChannel server = serverSocketChannel.accept();
        serverSocketChannel.close();
        return new Socket[] { clientSocketChannel.socket(), server.socket() };
!!!2628891.java!!!	testInterruptInputStream(in in : InputStream) : void
        Thread thread = interruptMeLater();
        try {
            in.read();
            fail();
        } catch (InterruptedIOException expected) {
        } finally {
            confirmInterrupted(thread);
        }
!!!2629019.java!!!	testInterruptReader(in reader : PipedReader) : void
        Thread thread = interruptMeLater();
        try {
            reader.read();
            fail();
        } catch (InterruptedIOException expected) {
        } finally {
            confirmInterrupted(thread);
        }
!!!2629147.java!!!	testInterruptReadableChannel(in channel : ReadableByteChannel) : void
        Thread thread = interruptMeLater();
        try {
            channel.read(ByteBuffer.allocate(BUFFER_SIZE));
            fail();
        } catch (ClosedByInterruptException expected) {
        } finally {
            confirmInterrupted(thread);
        }
!!!2629275.java!!!	testInterruptOutputStream(in out : OutputStream) : void
        Thread thread = interruptMeLater();
        try {
            // this will block when the receiving buffer fills up
            while (true) {
                out.write(new byte[BUFFER_SIZE]);
            }
        } catch (InterruptedIOException expected) {
        } finally {
            confirmInterrupted(thread);
        }
!!!2629403.java!!!	testInterruptWriter(in writer : PipedWriter) : void
        Thread thread = interruptMeLater();
        try {
            // this will block when the receiving buffer fills up
            while (true) {
                writer.write(new char[BUFFER_SIZE]);
            }
        } catch (InterruptedIOException expected) {
        } finally {
            confirmInterrupted(thread);
        }
!!!2629531.java!!!	testInterruptWritableChannel(in channel : WritableByteChannel) : void
        Thread thread = interruptMeLater();
        try {
            // this will block when the receiving buffer fills up
            while (true) {
                channel.write(ByteBuffer.allocate(BUFFER_SIZE));
            }
        } catch (ClosedByInterruptException expected) {
        } catch (ClosedChannelException expected) {
        } finally {
            confirmInterrupted(thread);
        }
!!!2629659.java!!!	interruptMeLater() : Thread
        final Thread toInterrupt = Thread.currentThread();
        Thread thread = new Thread(new Runnable () {
            @Override public void run() {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                }
                toInterrupt.interrupt();
            }
        });
        thread.start();
        return thread;
!!!2629787.java!!!	confirmInterrupted(inout thread : Thread) : void
        // validate and clear interrupted bit before join
        assertTrue(Thread.interrupted());
        thread.join();
