format 74
"utils" // framework::native::include::utils
  revision 6
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/framework/native/include/utils/"
  cpp_src_dir "/home/shchen/work/jellybean/framework/native/include/utils/"
  cpp_namespace "android"
  classview 128268 "utils"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 128268 "status_t"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 128396 "sp"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      operation 1631244 "sp"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : m_ptr(0) { };
"
	
	
	
	
      end

      operation 1631372 "sp"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "other" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------
// No user serviceable parts below here.

${inline}${class}::${name}${(}${t0} * ${p0}${)}
: m_ptr(other)
  ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1631500 "sp"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 128396 // sp
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
: m_ptr(other.m_ptr)
  ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1631628 "sp"
	stereotype "template"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "other" explicit_type "U"
	cpp_decl "    ${comment}template<typename U>
  ${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}template<typename U>
${inline}${class}::${name}${(}${t0} * ${p0}${)} : m_ptr(other)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1631756 "sp"
	stereotype "template"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" explicit_type "sp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}template<typename U>
${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
: m_ptr(other.m_ptr)
  ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1631884 "~sp"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1632012 "operator ="
	preserve_cpp_body_indent public return_type class_ref 128396 // sp
	nparams 1
	  param inout name "other" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Assignment"
      end

      operation 1632140 "operator ="
	preserve_cpp_body_indent public return_type class_ref 128396 // sp
	nparams 1
	  param in name "other" type class_ref 128396 // sp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1632268 "operator ="
	stereotype "template"
	preserve_cpp_body_indent public return_type class_ref 128396 // sp
	nparams 1
	  param in name "other" explicit_type "sp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<typename U>
${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1632396 "operator ="
	stereotype "template"
	preserve_cpp_body_indent public return_type class_ref 128396 // sp
	nparams 1
	  param inout name "other" explicit_type "U"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<typename U>
${inline}${type} & ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1632524 "force_set"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "other" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! Special optimization for use by ProcessState (and nobody else)."
      end

      operation 1632652 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Reset"
      end

      operation 1632780 "operator *"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return *m_ptr; };
"
	
	
	
	
	comment " Accessors"
      end

      operation 1632908 "operator ->"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_ptr;  };
"
	
	
	
	
      end

      operation 1633036 "get"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_ptr; };
"
	
	
	
	
      end

      classrelation 1176716 // <dependency>
	relation 1176716 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 1176716 // <dependency>
	  b parent class_ref 134284 // wp
      end

      operation 1633164 "set_pointer"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "ptr" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 3601292 // m_ptr (<unidirectional association>)
	relation 3601164 --->
	  a role_name "m_ptr" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3601292 // m_ptr (<unidirectional association>)
	  b parent class_ref 140044 // RefBase
      end
    end

    class 129164 "Vector"
      visibility package 
      nformals 1
      formal name "TYPE" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "!
 * The main templated vector class ensuring type safety
 * while making use of VectorImpl.
 * This is the class users want to use."
      classrelation 1178508 // <generalisation>
	relation 1178508 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 1178508 // <generalisation>
	  b parent class_ref 443532 // VectorImpl
      end

      class 569484 "value_type"
	visibility package stereotype "typedef" explicit_base_type "TYPE"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1646348 "Vector"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------
// No user serviceable parts from here...
// ---------------------------------------------------------------------------

${inline}${class}::${name}${(}${)}
    : VectorImpl(sizeof(TYPE),
                ((traits<TYPE>::has_trivial_ctor   ? HAS_TRIVIAL_CTOR   : 0)
                |(traits<TYPE>::has_trivial_dtor   ? HAS_TRIVIAL_DTOR   : 0)
                |(traits<TYPE>::has_trivial_copy   ? HAS_TRIVIAL_COPY   : 0))
                )
${throw}{
  ${body}}
"
	
	
	
	
	comment "! 
     * Constructors and destructors"
      end

      operation 1646476 "Vector"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "rhs" type class_ref 129164 // Vector
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : VectorImpl(rhs) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1646604 "Vector"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "rhs" explicit_type "SortedVector<TYPE>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : VectorImpl(static_cast<const VectorImpl&>(rhs)) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1646732 "~Vector"
	preserve_cpp_body_indent cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1646860 "operator ="
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 129164 // Vector
	nparams 1
	  param in name "rhs" type class_ref 129164 // Vector
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! copy operator "
      end

      operation 1646988 "operator ="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 129164 // Vector
	nparams 1
	  param in name "rhs" type class_ref 129164 // Vector
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1647116 "operator ="
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 129164 // Vector
	nparams 1
	  param in name "rhs" explicit_type "SortedVector<TYPE>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1647244 "operator ="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 129164 // Vector
	nparams 1
	  param in name "rhs" explicit_type "SortedVector<TYPE>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1647372 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { VectorImpl::clear(); };
"
	
	
	
	
	comment "     * empty the vector"
      end

      operation 1647500 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return VectorImpl::size(); };
"
	
	
	
	
	comment "! 
     * vector stats
     
! returns number of items in the vector"
      end

      operation 1647628 "isEmpty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return VectorImpl::isEmpty(); };
"
	
	
	
	
	comment "! returns whether or not the vector is empty"
      end

      operation 1647756 "capacity"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return VectorImpl::capacity(); };
"
	
	
	
	
	comment "! returns how many items can be stored without reallocating the backing store"
      end

      operation 1647884 "setCapacity"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return VectorImpl::setCapacity(size); };
"
	
	
	
	
	comment "! sets the capacity. capacity can never be reduced less than size()"
      end

      operation 1648012 "array"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "TYPE"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! 
     * C-style array access
     
! read-only C-style access "
      end

      operation 1648140 "editArray"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "TYPE"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! read-write C-style access"
      end

      operation 1648268 "operator []"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "TYPE"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! 
     * accessors
     
! read-only access to an item at a given index"
      end

      operation 1648396 "itemAt"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "TYPE"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! alternate name for operator []"
      end

      operation 1648524 "top"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "TYPE"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! stack-usage of the vector. returns the top of the stack (last element)"
      end

      operation 1648652 "editItemAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "TYPE"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "!
     * modifying the array
     
! copy-on write support, grants write access to an item"
      end

      operation 1648780 "editTop"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "TYPE"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! grants right access to the top of the stack (last element)"
      end

      operation 1648908 "insertVectorAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "vector" type class_ref 129164 // Vector
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! 
             * append/insert another vector
             
! insert another vector at a given index"
      end

      operation 1649036 "appendVector"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "vector" type class_ref 129164 // Vector
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! append another vector at the end of this one"
      end

      operation 1649164 "insertArrayAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param in name "array" explicit_type "TYPE"
	  param in name "index" explicit_type "size_t"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! insert an array at a given index"
      end

      operation 1649292 "appendArray"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "array" explicit_type "TYPE"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! append an array at the end of this vector"
      end

      operation 1649420 "insertAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "index" explicit_type "size_t"
	  param in name "numItems" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! 
             * add/insert/replace items
             
! insert one or several items initialized with their default constructor"
      end

      operation 1649548 "insertAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param in name "item" explicit_type "TYPE"
	  param in name "index" explicit_type "size_t"
	  param in name "numItems" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! insert one or several items initialized from a prototype item"
      end

      operation 1649676 "pop"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! pop the top of the stack (removes the last element). No-op if the stack's empty"
      end

      operation 1649804 "push"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! pushes an item initialized with its default constructor"
      end

      operation 1649932 "push"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "item" explicit_type "TYPE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! pushes an item on the top of the stack"
      end

      operation 1650060 "add"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! same as push() but returns the index the item was added at (or an error)"
      end

      operation 1650188 "add"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "item" explicit_type "TYPE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! same as push() but returns the index the item was added at (or an error)"
      end

      operation 1650316 "replaceAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! replace an item with a new one initialized with its default constructor"
      end

      operation 1650444 "replaceAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "item" explicit_type "TYPE"
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! replace an item with a new one"
      end

      operation 1650572 "removeItemsAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "index" explicit_type "size_t"
	  param in name "count" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "!
     * remove items
     
! remove several items"
      end

      operation 1650700 "removeAt"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return removeItemsAt(index); };
"
	
	
	
	
	comment "! remove one item"
      end

      class 569612 "compar_t"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}(* ${name})(const TYPE* lhs, const TYPE* rhs);
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 569740 "compar_r_t"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}(* ${name})(const TYPE* lhs, const TYPE* rhs, void* state);
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1650828 "sort"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "cmp" type class_ref 569612 // compar_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1650956 "sort"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "cmp" type class_ref 569740 // compar_r_t
	  param inout name "state" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1651084 "getItemSize"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return itemSize(); };
"
	
	
	
	
	comment " for debugging only"
      end

      class 569868 "iterator"
	visibility package stereotype "typedef" explicit_base_type "TYPE"
	cpp_decl "${comment}typedef ${type}*  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 569996 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "TYPE"
	cpp_decl "${comment}typedef ${type}const*  ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1651212 "begin"
	cpp_inline public return_type class_ref 569868 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return editArray(); };
"
	
	
	
	
      end

      operation 1651340 "end"
	cpp_inline public return_type class_ref 569868 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return editArray() + size(); };
"
	
	
	
	
      end

      operation 1651468 "begin"
	const cpp_inline public return_type class_ref 569996 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return array(); };
"
	
	
	
	
      end

      operation 1651596 "end"
	const cpp_inline public return_type class_ref 569996 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return array() + size(); };
"
	
	
	
	
      end

      operation 1651724 "reserve"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { setCapacity(n); };
"
	
	
	
	
      end

      operation 1651852 "empty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return isEmpty(); };
"
	
	
	
	
      end

      operation 1651980 "push_back"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "item" explicit_type "TYPE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { insertAt(item, size(), 1); };
"
	
	
	
	
      end

      operation 1652108 "push_front"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "item" explicit_type "TYPE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { insertAt(item, 0, 1); };
"
	
	
	
	
      end

      operation 1652236 "erase"
	cpp_inline public return_type class_ref 569868 // iterator
	nparams 1
	  param in name "pos" type class_ref 569868 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
         return begin() + removeItemsAt(pos-array());
     };
"
	
	
	
	
      end

      operation 1652364 "do_construct"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "storage" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1652492 "do_destroy"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "storage" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1652620 "do_copy"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1652748 "do_splat"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "item" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1652876 "do_move_forward"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1653004 "do_move_backward"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 129292 "List"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Doubly-linked list.  Instantiate with \"List<MyClass> myList\".
 *
 * Objects added to the list are copied using the assignment operator,
 * so this must be defined."
      class 394636 "iterator"
	visibility package stereotype "typedef" explicit_base_type "_ListIterator<T, NON_CONST_ITERATOR>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 558732 "_Node"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1586572 "_Node"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "val" explicit_type "T"
	  cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : mVal(val) {};
"
	  
	  
	  
	  
	end

	operation 1586700 "~_Node"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	  
	  
	  
	  
	end

	operation 1586828 "getRef"
	  cpp_inline public explicit_return_type "T"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mVal; };
"
	  
	  
	  
	  
	end

	operation 1586956 "getRef"
	  const cpp_inline public explicit_return_type "T"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mVal; };
"
	  
	  
	  
	  
	end

	operation 1587084 "getPrev"
	  const cpp_inline public return_type class_ref 558732 // _Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpPrev; };
"
	  
	  
	  
	  
	end

	operation 1587212 "getNext"
	  const cpp_inline public return_type class_ref 558732 // _Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpNext; };
"
	  
	  
	  
	  
	end

	operation 1587340 "setVal"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "val" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mVal = val; };
"
	  
	  
	  
	  
	end

	operation 1587468 "setPrev"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "ptr" type class_ref 558732 // _Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mpPrev = ptr; };
"
	  
	  
	  
	  
	end

	operation 1587596 "setNext"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "ptr" type class_ref 558732 // _Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mpNext = ptr; };
"
	  
	  
	  
	  
	end

	classrelation 1172364 // <dependency>
	  relation 1172364 -_->
	    stereotype "friend"
	    a default
	      cpp default "${type}"
	      classrelation_ref 1172364 // <dependency>
	    b parent class_ref 129292 // List
	end

	classrelation 1172492 // <dependency>
	  relation 1172492 -_->
	    stereotype "friend"
	    a default
	      cpp default "${type}"
	      classrelation_ref 1172492 // <dependency>
	    b parent class_ref 558860 // _ListIterator
	end

	attribute 1479180 "mVal"
	  private explicit_type "T"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1172620 // mpPrev (<unidirectional association>)
	  relation 1172620 --->
	    a role_name "mpPrev" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      classrelation_ref 1172620 // mpPrev (<unidirectional association>)
	    b parent class_ref 558732 // _Node
	end

	classrelation 1172748 // mpNext (<unidirectional association>)
	  relation 1172748 --->
	    a role_name "mpNext" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      classrelation_ref 1172748 // mpNext (<unidirectional association>)
	    b parent class_ref 558732 // _Node
	end
      end

      class 558860 "_ListIterator"
	visibility package 
	nformals 2
	formal name "U" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "Constness" type "
        template <class> class" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 559756 "_Iter"
	  visibility package stereotype "typedef" explicit_base_type "_ListIterator<U, Constness>"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	class 559884 "_NodePtr"
	  visibility package stereotype "typedef" explicit_base_type "Constness<U>::NodePtr"
	  cpp_decl "${comment}typedef  typename ${type} ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	class 560012 "_Type"
	  visibility package stereotype "typedef" explicit_base_type "Constness<U>::Type"
	  cpp_decl "${comment}typedef  typename ${type} ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	operation 1587724 "_ListIterator"
	  cpp_inline private explicit_return_type ""
	  nparams 1
	    param in name "ptr" type class_ref 559884 // _NodePtr
	  cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : mpNode(ptr) {};
"
	  
	  
	  
	  
	end

	operation 1587852 "_ListIterator"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	  
	  
	  
	  
	end

	operation 1587980 "_ListIterator"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "rhs" type class_ref 559756 // _Iter
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : mpNode(rhs.mpNode) {};
"
	  
	  
	  
	  
	end

	operation 1588108 "~_ListIterator"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	  
	  
	  
	  
	end

	operation 1588236 "_ListIterator"
	  stereotype "template"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "rhs" explicit_type "V"
	  cpp_decl "    ${comment}template<typename V>
  ${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : mpNode(rhs.mpNode) {};
"
	  
	  
	  
	  
	  comment " this will handle conversions from iterator to const_iterator
 (and also all convertible iterators)
 Here, in this implementation, the iterators can be converted
 if the nodes can be converted"
	end

	operation 1588364 "operator *"
	  const cpp_inline public return_type class_ref 560012 // _Type
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpNode->getRef(); };
"
	  
	  
	  
	  
	  comment "         * Dereference operator.  Used to get at the juicy insides."
	end

	operation 1588492 "operator ->"
	  const cpp_inline public return_type class_ref 560012 // _Type
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return &(mpNode->getRef()); };
"
	  
	  
	  
	  
	end

	operation 1588620 "operator =="
	  const cpp_inline public explicit_return_type "bool"
	  nparams 1
	    param in name "right" type class_ref 559756 // _Iter
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { 
            return mpNode == right.mpNode; };
"
	  
	  
	  
	  
	  comment "         * Iterator comparison."
	end

	operation 1588748 "operator !="
	  const cpp_inline public explicit_return_type "bool"
	  nparams 1
	    param in name "right" type class_ref 559756 // _Iter
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { 
            return mpNode != right.mpNode; };
"
	  
	  
	  
	  
	end

	operation 1588876 "operator =="
	  stereotype "template"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 1
	    param in name "right" explicit_type "OTHER"
	  cpp_decl "    ${comment}template<typename OTHER>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { 
            return mpNode == right.mpNode; };
"
	  
	  
	  
	  
	  comment "         * handle comparisons between iterator and const_iterator"
	end

	operation 1589004 "operator !="
	  stereotype "template"
	  const cpp_inline public explicit_return_type "bool"
	  nparams 1
	    param in name "right" explicit_type "OTHER"
	  cpp_decl "    ${comment}template<typename OTHER>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { 
            return mpNode != right.mpNode; };
"
	  
	  
	  
	  
	end

	operation 1589132 "operator ++"
	  cpp_inline public return_type class_ref 559756 // _Iter
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {     // pre-increment
            mpNode = mpNode->getNext();
            return *this;
        };
"
	  
	  
	  
	  
	  comment "         * Incr/decr, used to move through the list."
	end

	operation 1589260 "operator ++"
	  cpp_inline public return_type class_ref 559756 // _Iter
	  nparams 1
	    param in name "" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {    // post-increment
            _Iter tmp(*this);
            mpNode = mpNode->getNext();
            return tmp;
        };
"
	  
	  
	  
	  
	end

	operation 1589388 "operator --"
	  cpp_inline public return_type class_ref 559756 // _Iter
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {     // pre-increment
            mpNode = mpNode->getPrev();
            return *this;
        };
"
	  
	  
	  
	  
	end

	operation 1589516 "operator --"
	  cpp_inline public return_type class_ref 559756 // _Iter
	  nparams 1
	    param in name "" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {   // post-increment
            _Iter tmp(*this);
            mpNode = mpNode->getPrev();
            return tmp;
        };
"
	  
	  
	  
	  
	end

	operation 1589644 "getNode"
	  const cpp_inline public return_type class_ref 559884 // _NodePtr
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpNode; };
"
	  
	  
	  
	  
	end

	classrelation 1173132 // mpNode (<directional composition>)
	  relation 1173132 *-->
	    a role_name "mpNode" public
	      comment " should be private, but older gcc fails "
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1173132 // mpNode (<directional composition>)
	    b parent class_ref 559884 // _NodePtr
	end

	classrelation 1173260 // <dependency>
	  relation 1173260 -_->
	    stereotype "friend"
	    a default
	      cpp default "${type}"
	      classrelation_ref 1173260 // <dependency>
	    b parent class_ref 129292 // List
	end
      end

      class 558988 "CONST_ITERATOR"
	visibility package stereotype "struct"
	nformals 1
	formal name "TYPE" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 559116 "NodePtr"
	  visibility package stereotype "typedef" base_type class_ref 558732 // _Node
	  cpp_decl "${comment}typedef ${type}const *  ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 1172876 // <dependency>
	    relation 1172876 -_->
	      a default
		cpp default "#include in source"
		classrelation_ref 1172876 // <dependency>
	      b parent class_ref 558732 // _Node
	  end
	end

	class 559244 "Type"
	  visibility package stereotype "typedef" explicit_base_type "TYPE"
	  cpp_decl "${comment}typedef  const ${type} ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end
      end

      class 559372 "NON_CONST_ITERATOR"
	visibility package stereotype "struct"
	nformals 1
	formal name "TYPE" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 559500 "NodePtr"
	  visibility package stereotype "typedef" base_type class_ref 558732 // _Node
	  cpp_decl "${comment}typedef ${type}*  ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 1173004 // <dependency>
	    relation 1173004 -_->
	      a default
		cpp default "#include in source"
		classrelation_ref 1173004 // <dependency>
	      b parent class_ref 558732 // _Node
	  end
	end

	class 559628 "Type"
	  visibility package stereotype "typedef" explicit_base_type "TYPE"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl ""
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end
      end

      operation 1589772 "List"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
        prep();
    };
"
	
	
	
	
      end

      operation 1589900 "List"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 129292 // List
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} {      // copy-constructor
        prep();
        insert(begin(), src.begin(), src.end());
    };
"
	
	
	
	
      end

      operation 1590028 "~List"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        clear();
        delete[] (unsigned char*) mpMiddle;
    };
"
	
	
	
	
      end

      class 560140 "const_iterator"
	visibility package stereotype "typedef" explicit_base_type "_ListIterator<T, CONST_ITERATOR>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1590156 "operator ="
	preserve_cpp_body_indent public return_type class_ref 129292 // List
	nparams 1
	  param in name "right" type class_ref 129292 // List
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Assignment operator.
// *
// * The simplest way to do this would be to clear out the target list and
// * fill it with the source.  However, we can speed things along by
// * re-using existing elements.

${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1590284 "empty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mpMiddle->getNext() == mpMiddle; };
"
	
	
	
	
	comment " returns true if the list is empty "
      end

      operation 1590412 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return size_t(distance(begin(), end()));
    };
"
	
	
	
	
	comment " return #of elements in list "
      end

      operation 1590540 "begin"
	cpp_inline public return_type class_ref 394636 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return iterator(mpMiddle->getNext()); 
    };
"
	
	
	
	
	comment "     * Return the first element or one past the last element.  The
     * _Node* we're returning is converted to an \"iterator\" by a
     * constructor in _ListIterator."
      end

      operation 1590668 "begin"
	const cpp_inline public return_type class_ref 560140 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return const_iterator(const_cast<_Node const*>(mpMiddle->getNext())); 
    };
"
	
	
	
	
      end

      operation 1590796 "end"
	cpp_inline public return_type class_ref 394636 // iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return iterator(mpMiddle); 
    };
"
	
	
	
	
      end

      operation 1590924 "end"
	const cpp_inline public return_type class_ref 560140 // const_iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return const_iterator(const_cast<_Node const*>(mpMiddle)); 
    };
"
	
	
	
	
      end

      operation 1591052 "push_front"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { insert(begin(), val); };
"
	
	
	
	
	comment " add the object to the head or tail of the list "
      end

      operation 1591180 "push_back"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "val" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { insert(end(), val); };
"
	
	
	
	
      end

      operation 1591308 "insert"
	cpp_inline public return_type class_ref 394636 // iterator
	nparams 2
	  param in name "posn" type class_ref 394636 // iterator
	  param in name "val" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        _Node* newNode = new _Node(val);        // alloc & copy-construct
        newNode->setNext(posn.getNode());
        newNode->setPrev(posn.getNode()->getPrev());
        posn.getNode()->getPrev()->setNext(newNode);
        posn.getNode()->setPrev(newNode);
        return iterator(newNode);
    };
"
	
	
	
	
	comment " insert before the current node; returns iterator at new node "
      end

      operation 1591436 "insert"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "posn" type class_ref 394636 // iterator
	  param in name "first" type class_ref 560140 // const_iterator
	  param in name "last" type class_ref 560140 // const_iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        for ( ; first != last; ++first)
            insert(posn, *first);
    };
"
	
	
	
	
	comment " insert a range of elements before the current node "
      end

      operation 1591564 "erase"
	cpp_inline public return_type class_ref 394636 // iterator
	nparams 1
	  param in name "posn" type class_ref 394636 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        _Node* pNext = posn.getNode()->getNext();
        _Node* pPrev = posn.getNode()->getPrev();
        pPrev->setNext(pNext);
        pNext->setPrev(pPrev);
        delete posn.getNode();
        return iterator(pNext);
    };
"
	
	
	
	
	comment " remove one entry; returns iterator at next node "
      end

      operation 1591692 "erase"
	cpp_inline public return_type class_ref 394636 // iterator
	nparams 2
	  param in name "first" type class_ref 394636 // iterator
	  param in name "last" type class_ref 394636 // iterator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        while (first != last)
            erase(first++);     // don't erase than incr later!
        return iterator(last);
    };
"
	
	
	
	
	comment " remove a range of elements "
      end

      operation 1591820 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        _Node* pCurrent = mpMiddle->getNext();
        _Node* pNext;

        while (pCurrent != mpMiddle) {
            pNext = pCurrent->getNext();
            delete pCurrent;
            pCurrent = pNext;
        }
        mpMiddle->setPrev(mpMiddle);
        mpMiddle->setNext(mpMiddle);
    };
"
	
	
	
	
	comment " remove all contents of the list "
      end

      operation 1591948 "distance"
	stereotype "template"
	const cpp_inline public explicit_return_type "ptrdiff_t"
	nparams 2
	  param in name "first" explicit_type "_ListIterator<U, CL>"
	  param in name "last" explicit_type "_ListIterator<U, CR>"
	cpp_decl "    ${comment}template<typename Utemplate<
        template <class> class CLtemplate<
        template <class> class CR>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        ptrdiff_t count = 0;
        while (first != last) {
            ++first;
            ++count;
        }
        return count;
    };
"
	
	
	
	
	comment "     * Measure the distance between two iterators.  On exist, \"first\"
     * will be equal to \"last\".  The iterators must refer to the same
     * list.
     *
     * FIXME: This is actually a generic iterator function. It should be a 
     * template function at the top-level with specializations for things like
     * vector<>, which can just do pointer math). Here we limit it to
     * _ListIterator of the same type but different constness."
      end

      operation 1592076 "prep"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mpMiddle = (_Node*) new unsigned char[sizeof(_Node)];
        mpMiddle->setPrev(mpMiddle);
        mpMiddle->setNext(mpMiddle);
    };
"
	
	
	
	
	comment "     * I want a _Node but don't need it to hold valid data.  More
     * to the point, I don't want T's constructor to fire, since it
     * might have side-effects or require arguments.  So, we do this
     * slightly uncouth storage alloc."
      end

      classrelation 1173388 // mpMiddle (<unidirectional association>)
	relation 1173388 --->
	  a role_name "mpMiddle" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 1173388 // mpMiddle (<unidirectional association>)
	  b parent class_ref 558732 // _Node
      end
    end

    class 131340 "String8"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "! This is a string holding UTF-8 characters. Does not allow the value more
 than 0x10FFFF, which is not valid unicode codepoint."
      operation 1620492 "String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${class}::${name}${(}${)}
    : mString(getEmptyString())
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1620620 "String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "o" type class_ref 131340 // String8
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : mString(o.mString)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1620748 "String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "o" explicit_type "char"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}
    : mString(allocFromUTF8(o, strlen(o)))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1620876 "String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "o" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}
    : mString(allocFromUTF8(o, len))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1621004 "String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "o" type class_ref 142988 // String16
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : mString(allocFromUTF16(o.string(), o.size()))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1621132 "String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "o" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}
    : mString(allocFromUTF16(o, strlen16(o)))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1621260 "String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "o" type class_ref 419724 // char16_t
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}
    : mString(allocFromUTF16(o, len))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1621388 "String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "o" type class_ref 563596 // char32_t
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}
    : mString(allocFromUTF32(o, strlen32(o)))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1621516 "String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "o" type class_ref 563596 // char32_t
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}
    : mString(allocFromUTF32(o, len))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1621644 "~String8"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1621772 "empty"
	class_operation preserve_cpp_body_indent cpp_inline public return_type class_ref 131340 // String8
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1621900 "format"
	class_operation public return_type class_ref 131340 // String8
	nparams 1
	  param in name "fmt" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1622028 "formatV"
	class_operation preserve_cpp_body_indent public return_type class_ref 131340 // String8
	nparams 2
	  param in name "fmt" explicit_type "char"
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1622156 "string"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1622284 "size"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1622412 "length"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1622540 "bytes"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1622668 "isEmpty"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1622796 "sharedBuffer"
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 554636 // SharedBuffer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1622924 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1623052 "setTo"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1623180 "setTo"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1623308 "setTo"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "other" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1623436 "setTo"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "other" type class_ref 419724 // char16_t
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1623564 "setTo"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "other" type class_ref 563596 // char32_t
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1623692 "append"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1623820 "append"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1623948 "append"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "other" explicit_type "char"
	  param in name "otherLen" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1624076 "appendFormat"
	public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "fmt" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1624204 "appendFormatV"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "fmt" explicit_type "char"
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1624332 "getUtf32Length"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Note that this function takes O(N) time to calculate the value.
 No cache value is stored."
      end

      operation 1624460 "getUtf32At"
	preserve_cpp_body_indent const public explicit_return_type "int32_t"
	nparams 2
	  param in name "index" explicit_type "size_t"
	  param inout name "next_index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1624588 "getUtf32"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "dst" type class_ref 563596 // char32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1624716 "operator ="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 131340 // String8
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1624844 "operator ="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 131340 // String8
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1624972 "operator +="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 131340 // String8
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1625100 "operator +"
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 131340 // String8
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1625228 "operator +="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 131340 // String8
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1625356 "operator +"
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 131340 // String8
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1625484 "compare"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1625612 "operator <"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1625740 "operator <="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1625868 "operator =="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1625996 "operator !="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1626124 "operator >="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1626252 "operator >"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1626380 "operator <"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1626508 "operator <="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1626636 "operator =="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1626764 "operator !="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1626892 "operator >="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1627020 "operator >"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1627148 "operator constchar*"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1627276 "lockBuffer"
	preserve_cpp_body_indent public explicit_return_type "char"
	nparams 1
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1627404 "unlockBuffer"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1627532 "unlockBuffer"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1627660 "find"
	preserve_cpp_body_indent const public explicit_return_type "ssize_t"
	nparams 2
	  param in name "other" explicit_type "char"
	  param in name "start" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " return the index of the first byte of other in this at or after
 start, or -1 if not found"
      end

      operation 1627788 "toLower"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1627916 "toLower"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "start" explicit_type "size_t"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1628044 "toUpper"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1628172 "toUpper"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "start" explicit_type "size_t"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1628300 "setPathName"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ---------------------------------------------------------------------------
// Path functions

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * These methods operate on the string as if it were a path name.
     

     * Set the filename field to a specific value.
     *
     * Normalizes the filename, removing a trailing '/' if present."
      end

      operation 1628428 "setPathName"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1628556 "getPathLeaf"
	preserve_cpp_body_indent const public return_type class_ref 131340 // String8
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Get just the filename component.
     *
     * \"/tmp/foo/bar.c\" --> \"bar.c\""
      end

      operation 1628684 "getPathDir"
	preserve_cpp_body_indent const public return_type class_ref 131340 // String8
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Remove the last (file name) component, leaving just the directory
     * name.
     *
     * \"/tmp/foo/bar.c\" --> \"/tmp/foo\"
     * \"/tmp\" --> \"\" // ????? shouldn't this be \"/\" ???? XXX
     * \"bar.c\" --> \"\""
      end

      operation 1628812 "walkPath"
	preserve_cpp_body_indent const public return_type class_ref 131340 // String8
	nparams 1
	  param inout name "outRemains" type class_ref 131340 // String8
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Retrieve the front (root dir) component.  Optionally also return the
     * remaining components.
     *
     * \"/tmp/foo/bar.c\" --> \"tmp\" (remain = \"foo/bar.c\")
     * \"/tmp\" --> \"tmp\" (remain = \"\")
     * \"bar.c\" --> \"bar.c\" (remain = \"\")"
      end

      operation 1628940 "getPathExtension"
	preserve_cpp_body_indent const public return_type class_ref 131340 // String8
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Return the filename extension.  This is the last '.' and any number
     * of characters that follow it.  The '.' is included in case we
     * decide to expand our definition of what constitutes an extension.
     *
     * \"/tmp/foo/bar.c\" --> \".c\"
     * \"/tmp\" --> \"\"
     * \"/tmp/foo.bar/baz\" --> \"\"
     * \"foo.jpeg\" --> \".jpeg\"
     * \"foo.\" --> \"\""
      end

      operation 1629068 "getBasePath"
	preserve_cpp_body_indent const public return_type class_ref 131340 // String8
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Return the path without the extension.  Rules for what constitutes
     * an extension are described in the comment for getPathExtension().
     *
     * \"/tmp/foo/bar.c\" --> \"/tmp/foo/bar\""
      end

      operation 1629196 "appendPath"
	preserve_cpp_body_indent public return_type class_ref 131340 // String8
	nparams 1
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Add a component to the pathname.  We guarantee that there is
     * exactly one path separator between the old path and the new.
     * If there is no existing name, we just copy the new name in.
     *
     * If leaf is a fully qualified path (i.e. starts with '/', it
     * replaces whatever was there before."
      end

      operation 1629324 "appendPath"
	cpp_inline public return_type class_ref 131340 // String8
	nparams 1
	  param in name "leaf" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return appendPath(leaf.string()); };
"
	
	
	
	
      end

      operation 1629452 "appendPathCopy"
	const cpp_inline public return_type class_ref 131340 // String8
	nparams 1
	  param in name "leaf" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { String8 p(*this); p.appendPath(leaf); return p; };
"
	
	
	
	
	comment "     * Like appendPath(), but does not affect this string.  Returns a new one instead."
      end

      operation 1629580 "appendPathCopy"
	const cpp_inline public return_type class_ref 131340 // String8
	nparams 1
	  param in name "leaf" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return appendPathCopy(leaf.string()); };
"
	
	
	
	
      end

      operation 1629708 "convertToResPath"
	preserve_cpp_body_indent public return_type class_ref 131340 // String8
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Converts all separators in this string to /, the default path separator.
     *
     * If the default OS separator is backslash, this converts all
     * backslashes to slashes, in-place. Otherwise it does nothing.
     * Returns self."
      end

      operation 1629836 "real_append"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 2
	  param in name "other" explicit_type "char"
	  param in name "otherLen" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1629964 "find_extension"
	preserve_cpp_body_indent const private explicit_return_type "char"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Helper function for finding the start of an extension in a pathname.
// *
// * Returns a pointer inside mString, or NULL if no extension was found.

${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1484044 "mString"
	const_attribute private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 133132 "Mutex"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Simple mutex class.  The implementation is system-dependent.
 *
 * The mutex must be unlocked by the thread that locked it.  They are not
 * recursive, i.e. the same thread can't lock it multiple times."
      class 560524 "anonymous309"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1481100 "PRIVATE"
	  public type class_ref 560524 // anonymous309
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1481228 "SHARED"
	  public type class_ref 560524 // anonymous309
	  init_value " 1
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1592460 "Mutex"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1592588 "Mutex"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1592716 "Mutex"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "name" explicit_type "char"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1592844 "~Mutex"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1592972 "lock"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " lock or unlock the mutex"
      end

      operation 1593100 "unlock"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1593228 "tryLock"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " lock if possible; returns 0 on success, error otherwise"
      end

      class 560652 "Autolock"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1593356 "Autolock"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "mutex" type class_ref 133132 // Mutex
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw} : mLock(mutex)  { mLock.lock(); };
"
	  
	  
	  
	  
	end

	operation 1593484 "Autolock"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "mutex" type class_ref 133132 // Mutex
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : mLock(*mutex) { mLock.lock(); };
"
	  
	  
	  
	  
	end

	operation 1593612 "~Autolock"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { mLock.unlock(); };
"
	  
	  
	  
	  
	end

	classrelation 1173516 // mLock (<unidirectional association>)
	  relation 1173516 --->
	    a role_name "mLock" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	      classrelation_ref 1173516 // mLock (<unidirectional association>)
	    b parent class_ref 133132 // Mutex
	end
      end

      classrelation 1173644 // <dependency>
	relation 1173644 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 1173644 // <dependency>
	  b parent class_ref 159244 // Condition
      end

      operation 1593740 "Mutex"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 133132 // Mutex
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " A mutex cannot be copied"
      end

      operation 1593868 "operator ="
	private return_type class_ref 133132 // Mutex
	nparams 1
	  param in name "" type class_ref 133132 // Mutex
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1481356 "mMutex"
	private explicit_type "pthread_mutex_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1593996 "_init"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1481484 "mState"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 133260 "KeyedVector"
      visibility package 
      nformals 2
      formal name "KEY" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "VALUE" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      class 558092 "key_type"
	visibility package stereotype "typedef" explicit_base_type "KEY"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 558220 "value_type"
	visibility package stereotype "typedef" explicit_base_type "VALUE"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1583372 "KeyedVector"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1583500 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { mVector.clear(); };
"
	
	
	
	
	comment "     * empty the vector"
      end

      operation 1583628 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mVector.size(); };
"
	
	
	
	
	comment "! 
     * vector stats
     
! returns number of items in the vector"
      end

      operation 1583756 "isEmpty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mVector.isEmpty(); };
"
	
	
	
	
	comment "! returns whether or not the vector is empty"
      end

      operation 1583884 "capacity"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mVector.capacity(); };
"
	
	
	
	
	comment "! returns how many items can be stored without reallocating the backing store"
      end

      operation 1584012 "setCapacity"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mVector.setCapacity(size); };
"
	
	
	
	
	comment "! sets the capacity. capacity can never be reduced less than size()"
      end

      operation 1584140 "isIdenticalTo"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 133260 // KeyedVector
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " returns true if the arguments is known to be identical to this vector"
      end

      operation 1584268 "valueFor"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "VALUE"
	nparams 1
	  param in name "key" explicit_type "KEY"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! 
     * accessors"
      end

      operation 1584396 "valueAt"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "VALUE"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1584524 "keyAt"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "KEY"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1584652 "indexOfKey"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "key" explicit_type "KEY"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1584780 "operator []"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "VALUE"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1584908 "editValueFor"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "VALUE"
	nparams 1
	  param in name "key" explicit_type "KEY"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "!
     * modifying the array"
      end

      operation 1585036 "editValueAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "VALUE"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1585164 "add"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "key" explicit_type "KEY"
	  param in name "value" explicit_type "VALUE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! 
             * add/insert/replace items"
      end

      operation 1585292 "replaceValueFor"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "key" explicit_type "KEY"
	  param in name "value" explicit_type "VALUE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1585420 "replaceValueAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "index" explicit_type "size_t"
	  param in name "item" explicit_type "VALUE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1585548 "removeItem"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "key" explicit_type "KEY"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "!
     * remove items"
      end

      operation 1585676 "removeItemsAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "index" explicit_type "size_t"
	  param in name "count" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1478156 "mVector"
	private explicit_type " key_value_pair_t<KEY, VALUE> "
	stereotype "SortedVector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 134284 "wp"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      class 561804 "weakref_type"
	visibility package stereotype "typedef" base_type class_ref 503948 // weakref_type
	cpp_decl "${comment}typedef  typename ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1174796 // <dependency>
	  relation 1174796 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 1174796 // <dependency>
	    b parent class_ref 503948 // weakref_type
	end
      end

      operation 1601164 "wp"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : m_ptr(0) { };
"
	
	
	
	
      end

      operation 1601292 "wp"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "other" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------
// No user serviceable parts below here.

${inline}${class}::${name}${(}${t0} * ${p0}${)}
    : m_ptr(other)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1601420 "wp"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 134284 // wp
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : m_ptr(other.m_ptr), m_refs(other.m_refs)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1601548 "wp"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" explicit_type "sp<T>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : m_ptr(other.m_ptr)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1601676 "wp"
	stereotype "template"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "other" explicit_type "U"
	cpp_decl "    ${comment}template<typename U>
  ${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}template<typename U>
${inline}${class}::${name}${(}${t0} * ${p0}${)}
    : m_ptr(other)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1601804 "wp"
	stereotype "template"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" explicit_type "sp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}template<typename U>
${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : m_ptr(other.m_ptr)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1601932 "wp"
	stereotype "template"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" explicit_type "wp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}template<typename U>
${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : m_ptr(other.m_ptr)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1602060 "~wp"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1602188 "operator ="
	preserve_cpp_body_indent public return_type class_ref 134284 // wp
	nparams 1
	  param inout name "other" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Assignment"
      end

      operation 1602316 "operator ="
	preserve_cpp_body_indent public return_type class_ref 134284 // wp
	nparams 1
	  param in name "other" type class_ref 134284 // wp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1602444 "operator ="
	preserve_cpp_body_indent public return_type class_ref 134284 // wp
	nparams 1
	  param in name "other" explicit_type "sp<T>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1602572 "operator ="
	stereotype "template"
	preserve_cpp_body_indent public return_type class_ref 134284 // wp
	nparams 1
	  param inout name "other" explicit_type "U"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<typename U>
${inline}${type} & ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1602700 "operator ="
	stereotype "template"
	preserve_cpp_body_indent public return_type class_ref 134284 // wp
	nparams 1
	  param in name "other" explicit_type "wp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<typename U>
${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1602828 "operator ="
	stereotype "template"
	preserve_cpp_body_indent public return_type class_ref 134284 // wp
	nparams 1
	  param in name "other" explicit_type "sp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<typename U>
${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1602956 "set_object_and_refs"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param inout name "other" explicit_type "T"
	  param inout name "refs" type class_ref 561804 // weakref_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1603084 "promote"
	preserve_cpp_body_indent const public explicit_return_type "sp<T>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " promotion to sp"
      end

      operation 1603212 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Reset"
      end

      operation 1603340 "get_refs"
	const cpp_inline public return_type class_ref 561804 // weakref_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_refs; };
"
	
	
	
	
	comment " Accessors"
      end

      operation 1603468 "unsafe_get"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_ptr; };
"
	
	
	
	
      end

      operation 1603596 "operator =="
	stereotype "template"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" explicit_type "wp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return m_ptr == o.m_ptr;
    };
"
	
	
	
	
      end

      operation 1603724 "operator >"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" type class_ref 134284 // wp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return (m_ptr == o.m_ptr) ? (m_refs > o.m_refs) : (m_ptr > o.m_ptr);
    };
"
	
	
	
	
      end

      operation 1603852 "operator >"
	stereotype "template"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" explicit_type "wp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return (m_ptr == o.m_ptr) ? (m_refs > o.m_refs) : (m_ptr > o.m_ptr);
    };
"
	
	
	
	
      end

      operation 1603980 "operator <"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" type class_ref 134284 // wp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return (m_ptr == o.m_ptr) ? (m_refs < o.m_refs) : (m_ptr < o.m_ptr);
    };
"
	
	
	
	
      end

      operation 1604108 "operator <"
	stereotype "template"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" explicit_type "wp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return (m_ptr == o.m_ptr) ? (m_refs < o.m_refs) : (m_ptr < o.m_ptr);
    };
"
	
	
	
	
      end

      operation 1604236 "operator !="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" type class_ref 134284 // wp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return m_refs != o.m_refs; };
"
	
	
	
	
      end

      operation 1604364 "operator !="
	stereotype "template"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" explicit_type "wp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return !operator == (o); };
"
	
	
	
	
      end

      operation 1604492 "operator <="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" type class_ref 134284 // wp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return !operator > (o); };
"
	
	
	
	
      end

      operation 1604620 "operator <="
	stereotype "template"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" explicit_type "wp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return !operator > (o); };
"
	
	
	
	
      end

      operation 1604748 "operator >="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" type class_ref 134284 // wp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return !operator < (o); };
"
	
	
	
	
      end

      operation 1604876 "operator >="
	stereotype "template"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" explicit_type "wp<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return !operator < (o); };
"
	
	
	
	
      end

      classrelation 1174924 // <dependency>
	relation 1174924 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 1174924 // <dependency>
	  b parent class_ref 128396 // sp
      end

      classrelation 1175052 // <dependency>
	relation 1175052 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 1175052 // <dependency>
	  b parent class_ref 134284 // wp
      end

      attribute 1482380 "m_ptr"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1175180 // m_refs (<unidirectional association>)
	relation 1175180 --->
	  a role_name "m_refs" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 1175180 // m_refs (<unidirectional association>)
	  b parent class_ref 561804 // weakref_type
      end
    end

    class 137356 "FileMap"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * This represents a memory-mapped file.  It might be the entire file or
 * only part of it.  This requires a little bookkeeping because the mapping
 * needs to be aligned on page boundaries, and in some cases we'd like to
 * have multiple references to the mapped area without creating additional
 * maps.
 *
 * This always uses MAP_SHARED.
 *
 * TODO: we should be able to create a new FileMap that is a subset of
 * an existing FileMap and shares the underlying mapped pages.  Requires
 * completing the refcounting stuff and possibly introducing the notion
 * of a FileMap hierarchy."
      operation 1577356 "FileMap"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// * Constructor.  Create an empty object.

${inline}${class}::${name}${(}${t0} ${p0}${)}
    : mRefCount(1), mFileName(NULL), mBasePtr(NULL), mBaseLength(0),
      mDataPtr(NULL), mDataLength(0)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1577484 "create"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 5
	  param in name "origFileName" explicit_type "char"
	  param in name "fd" explicit_type "int"
	  param in name "offset" type class_ref 132876 // off64_t
	  param in name "length" explicit_type "size_t"
	  param in name "readOnly" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Create a new mapping on an open file.
// *
// * Closing the file descriptor does not unmap the pages, so we don't
// * claim ownership of the fd.
// *
// * Returns \"false\" on failure.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Create a new mapping on an open file.
     *
     * Closing the file descriptor does not unmap the pages, so we don't
     * claim ownership of the fd.
     *
     * Returns \"false\" on failure."
      end

      operation 1577612 "getFileName"
	const cpp_inline public explicit_return_type "char"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mFileName; };
"
	
	
	
	
	comment "     * Return the name of the file this map came from, if known."
      end

      operation 1577740 "getDataPtr"
	const cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mDataPtr; };
"
	
	
	
	
	comment "     * Get a pointer to the piece of the file we requested."
      end

      operation 1577868 "getDataLength"
	const cpp_inline public explicit_return_type "size_t"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mDataLength; };
"
	
	
	
	
	comment "     * Get the length we requested."
      end

      operation 1577996 "getDataOffset"
	const cpp_inline public return_type class_ref 132876 // off64_t
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mDataOffset; };
"
	
	
	
	
	comment "     * Get the data offset used to create this map."
      end

      operation 1578124 "acquire"
	cpp_inline public return_type class_ref 137356 // FileMap
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mRefCount++; return this; };
"
	
	
	
	
	comment "     * Get a \"copy\" of the object."
      end

      operation 1578252 "release"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (--mRefCount <= 0)
            delete this;
    };
"
	
	
	
	
	comment "     * Call this when mapping is no longer needed."
      end

      class 557708 "MapAdvice"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1475212 "NORMAL"
	  public type class_ref 557708 // MapAdvice
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1475340 "RANDOM"
	  public type class_ref 557708 // MapAdvice
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1475468 "SEQUENTIAL"
	  public type class_ref 557708 // MapAdvice
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1475596 "WILLNEED"
	  public type class_ref 557708 // MapAdvice
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1475724 "DONTNEED"
	  public type class_ref 557708 // MapAdvice
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1578380 "advise"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "advice" type class_ref 557708 // MapAdvice
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Provide guidance to the system.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Apply an madvise() call to the entire file.
     *
     * Returns 0 on success, -1 on failure."
      end

      operation 1578508 "~FileMap"
	preserve_cpp_body_indent protected explicit_return_type ""
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// * Destructor.

${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " don't delete objects; call release()"
      end

      operation 1578636 "FileMap"
	private explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 137356 // FileMap
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " these are not implemented"
      end

      operation 1578764 "operator ="
	private return_type class_ref 137356 // FileMap
	nparams 1
	  param in name "src" type class_ref 137356 // FileMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1475852 "mRefCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " reference count"
      end

      attribute 1475980 "mFileName"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " original file name, if known"
      end

      attribute 1476108 "mBasePtr"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " base of mmap area; page aligned"
      end

      attribute 1476236 "mBaseLength"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " length, measured from \"mBasePtr\""
      end

      classrelation 1171596 // mDataOffset (<directional composition>)
	relation 1171596 *-->
	  a role_name "mDataOffset" private
	    comment " offset used when map was created"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1171596 // mDataOffset (<directional composition>)
	  b parent class_ref 132876 // off64_t
      end

      attribute 1476364 "mDataPtr"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " start of requested data, offset from base"
      end

      attribute 1476492 "mDataLength"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " length, measured from \"mDataPtr\""
      end

      attribute 1476620 "mFileHandle"
	private explicit_type "HANDLE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Win32 file handle"
      end

      attribute 1476748 "mFileMapping"
	private explicit_type "HANDLE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Win32 file mapping handle"
      end

      attribute 1476876 "mPageSize"
	class_attribute private explicit_type "long"
	init_value "= -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 140044 "RefBase"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      class 503948 "weakref_type"
	visibility package stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl "${comment}${visibility}interface ${name} {
${members}}
"
	python_2_2 python_decl ""
	idl_decl "${comment}${abstract}${local}interface ${name}${inherit} {
${members}};
"
	explicit_switch_type ""
	
	operation 1597580 "refBase"
	  preserve_cpp_body_indent const public return_type class_ref 140044 // RefBase
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1597708 "incWeak"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 1
	    param in name "id" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1597836 "decWeak"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 1
	    param in name "id" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1597964 "attemptIncStrong"
	  preserve_cpp_body_indent public explicit_return_type "bool"
	  nparams 1
	    param in name "id" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment " acquires a strong reference if there is already one."
	end

	operation 1598092 "attemptIncWeak"
	  preserve_cpp_body_indent public explicit_return_type "bool"
	  nparams 1
	    param in name "id" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment " acquires a weak reference if there is already one.
 This is not always safe. see ProcessState.cpp and BpBinder.cpp
 for proper use."
	end

	operation 1598220 "getWeakCount"
	  preserve_cpp_body_indent const public explicit_return_type "int32_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment "! DEBUGGING ONLY: Get current weak ref count."
	end

	operation 1598348 "printRefs"
	  preserve_cpp_body_indent const public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment "! DEBUGGING ONLY: Print references held on object."
	end

	operation 1598476 "trackMe"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 2
	    param in name "enable" explicit_type "bool"
	    param in name "retain" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	  comment "! DEBUGGING ONLY: Enable tracking for this object.
 enable -- enable/disable tracking
 retain -- when tracking is enable, if true, then we save a stack trace
           for each reference and dereference; when retain == false, we
           match up references and dereferences and keep only the 
           outstanding ones."
	end
      end

      operation 1597068 "incStrong"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1597196 "decStrong"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1597324 "forceIncStrong"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1597452 "getStrongCount"
	preserve_cpp_body_indent const public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! DEBUGGING ONLY: Get current strong ref count."
      end

      operation 1598604 "createWeak"
	preserve_cpp_body_indent const public return_type class_ref 503948 // weakref_type
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1598732 "getWeakRefs"
	preserve_cpp_body_indent const public return_type class_ref 503948 // weakref_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1598860 "printRefs"
	const cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { getWeakRefs()->printRefs(); };
"
	
	
	
	
	comment "! DEBUGGING ONLY: Print references held on object."
      end

      operation 1598988 "trackMe"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "enable" explicit_type "bool"
	  param in name "retain" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} { 
        getWeakRefs()->trackMe(enable, retain); 
    };
"
	
	
	
	
	comment "! DEBUGGING ONLY: Enable tracking of object."
      end

      class 561164 "basetype"
	visibility package stereotype "typedef" base_type class_ref 140044 // RefBase
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1174284 // <dependency>
	  relation 1174284 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 1174284 // <dependency>
	    b parent class_ref 140044 // RefBase
	end
      end

      operation 1599116 "RefBase"
	preserve_cpp_body_indent protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : mRefs(new weakref_impl(this))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1599244 "~RefBase"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      class 561292 "anonymous310"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1481612 "OBJECT_LIFETIME_STRONG"
	  public type class_ref 561292 // anonymous310
	  init_value " 0x0000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1481740 "OBJECT_LIFETIME_WEAK"
	  public type class_ref 561292 // anonymous310
	  init_value " 0x0001"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1481868 "OBJECT_LIFETIME_MASK"
	  public type class_ref 561292 // anonymous310
	  init_value " 0x0001
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1599372 "extendObjectLifetime"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 561420 "anonymous311"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1481996 "FIRST_INC_STRONG"
	  public type class_ref 561420 // anonymous311
	  init_value " 0x0001
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1599500 "onFirstRef"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1599628 "onLastStrongRef"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1599756 "onIncStrongAttempted"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "flags" explicit_type "uint32_t"
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1599884 "onLastWeakRef"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 1174412 // <dependency>
	relation 1174412 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 1174412 // <dependency>
	  b parent class_ref 561548 // ReferenceMover
      end

      operation 1600012 "moveReferences"
	class_operation preserve_cpp_body_indent private explicit_return_type "void"
	nparams 4
	  param inout name "dst" explicit_type "void"
	  param in name "src" explicit_type "void"
	  param in name "n" explicit_type "size_t"
	  param in name "caster" type class_ref 561036 // ReferenceConverterBase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 1174540 // <dependency>
	relation 1174540 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 1174540 // <dependency>
	  b parent class_ref 503948 // weakref_type
      end

      extra_member 139020 "weakref_impl"
	
	stereotype "class"
	cpp "    class weakref_impl;
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1600140 "RefBase"
	private explicit_return_type ""
	nparams 1
	  param in name "o" type class_ref 140044 // RefBase
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1600268 "operator ="
	private return_type class_ref 140044 // RefBase
	nparams 1
	  param in name "o" type class_ref 140044 // RefBase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1482124 "mRefs"
	private explicit_type "weakref_impl"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 142988 "String16"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "! This is a string holding UTF-16 characters."
      operation 1614860 "String16"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${class}::${name}${(}${)}
    : mString(getEmptyString())
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1614988 "String16"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "o" type class_ref 142988 // String16
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : mString(o.mString)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1615116 "String16"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "o" type class_ref 142988 // String16
	  param in name "len" explicit_type "size_t"
	  param in name "begin" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}
    : mString(getEmptyString())
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1615244 "String16"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "o" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1615372 "String16"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "o" type class_ref 419724 // char16_t
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1615500 "String16"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "o" type class_ref 131340 // String8
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : mString(allocFromUTF8(o.string(), o.size()))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1615628 "String16"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "o" explicit_type "char"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}
    : mString(allocFromUTF8(o, strlen(o)))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1615756 "String16"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "o" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}
    : mString(allocFromUTF8(o, len))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1615884 "~String16"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1616012 "string"
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 419724 // char16_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1616140 "size"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1616268 "sharedBuffer"
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 554636 // SharedBuffer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1616396 "setTo"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1616524 "setTo"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "other" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1616652 "setTo"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "other" type class_ref 419724 // char16_t
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1616780 "setTo"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "other" type class_ref 142988 // String16
	  param in name "len" explicit_type "size_t"
	  param in name "begin" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1616908 "append"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1617036 "append"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "chrs" type class_ref 419724 // char16_t
	  param in name "otherLen" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1617164 "operator ="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 142988 // String16
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1617292 "operator +="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 142988 // String16
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1617420 "operator +"
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 142988 // String16
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1617548 "insert"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "pos" explicit_type "size_t"
	  param in name "chrs" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1617676 "insert"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "pos" explicit_type "size_t"
	  param in name "chrs" type class_ref 419724 // char16_t
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1617804 "findFirst"
	preserve_cpp_body_indent const public explicit_return_type "ssize_t"
	nparams 1
	  param in name "c" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1617932 "findLast"
	preserve_cpp_body_indent const public explicit_return_type "ssize_t"
	nparams 1
	  param in name "c" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1618060 "startsWith"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "prefix" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1618188 "startsWith"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "prefix" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1618316 "makeLower"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1618444 "replaceAll"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "replaceThis" type class_ref 419724 // char16_t
	  param in name "withThis" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1618572 "remove"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "len" explicit_type "size_t"
	  param in name "begin" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1618700 "compare"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1618828 "operator <"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1618956 "operator <="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1619084 "operator =="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1619212 "operator !="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1619340 "operator >="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1619468 "operator >"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 142988 // String16
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1619596 "operator <"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1619724 "operator <="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1619852 "operator =="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1619980 "operator !="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1620108 "operator >="
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1620236 "operator >"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 419724 // char16_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1620364 "operator constchar16_t*"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 1176588 // mString (<unidirectional association>)
	relation 1176588 --->
	  a role_name "mString" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 1176588 // mString (<unidirectional association>)
	  b parent class_ref 419724 // char16_t
      end
    end

    class 149772 "DefaultKeyedVector"
      visibility package 
      nformals 2
      formal name "KEY" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "VALUE" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 133260 // KeyedVector
        rank 0 explicit_value "KEY"
      actual class class_ref 133260 // KeyedVector
        rank 1 explicit_value "VALUE"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------
*
 * Variation of KeyedVector that holds a default value to return when
 * valueFor() is called with a key that doesn't exist."
      classrelation 1172236 // <realization>
	relation 1172236 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1172236 // <realization>
	  b parent class_ref 133260 // KeyedVector
      end

      operation 1585804 "DefaultKeyedVector"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "defValue" explicit_type "VALUE"
	    defaultvalue "VALUE()"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : mDefault(defValue)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1585932 "valueFor"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "VALUE"
	nparams 1
	  param in name "key" explicit_type "KEY"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1478540 "mDefault"
	private explicit_type "VALUE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 151692 "LinearTransform"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " LinearTransform defines a structure which hold the definition of a
 transformation from single dimensional coordinate system A into coordinate
 system B (and back again).  Values in A and in B are 64 bit, the linear
 scale factor is expressed as a rational number using two 32 bit values.

 Specifically, let
 f(a) = b
 F(b) = f^-1(b) = a
 then

 f(a) = (((a - a_zero) * a_to_b_numer) / a_to_b_denom) + b_zero;

 and

 F(b) = (((b - b_zero) * a_to_b_denom) / a_to_b_numer) + a_zero;"
      attribute 1478668 "a_zero"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1478796 "b_zero"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1478924 "a_to_b_numer"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1479052 "a_to_b_denom"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1586060 "doForwardTransform"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param in name "a_in" explicit_type "int64_t"
	  param inout name "b_out" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Transform from A->B
 Returns true on success, or false in the case of a singularity or an
 overflow."
      end

      operation 1586188 "doReverseTransform"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param in name "b_in" explicit_type "int64_t"
	  param inout name "a_out" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Transform from B->A
 Returns true on success, or false in the case of a singularity or an
 overflow."
      end

      operation 1586316 "reduce"
	stereotype "template"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param inout name "N" explicit_type "T"
	  param inout name "D" explicit_type "T"
	cpp_decl "    ${comment}template<class T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}template<class T>
${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Helpers which will reduce the fraction N/D using Euclid's method."
      end

      operation 1586444 "reduce"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "N" explicit_type "int32_t"
	  param inout name "D" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 153740 "SortedVector"
      visibility package 
      nformals 1
      formal name "TYPE" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      classrelation 1175820 // <generalisation>
	relation 1175820 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 1175820 // <generalisation>
	  b parent class_ref 562828 // SortedVectorImpl
      end

      classrelation 1175948 // <dependency>
	relation 1175948 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 1175948 // <dependency>
	  b parent class_ref 129164 // Vector
      end

      class 562956 "value_type"
	visibility package stereotype "typedef" explicit_base_type "TYPE"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1610124 "SortedVector"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------
// No user serviceable parts from here...
// ---------------------------------------------------------------------------

${inline}${class}::${name}${(}${)}
    : SortedVectorImpl(sizeof(TYPE),
                ((traits<TYPE>::has_trivial_ctor   ? HAS_TRIVIAL_CTOR   : 0)
                |(traits<TYPE>::has_trivial_dtor   ? HAS_TRIVIAL_DTOR   : 0)
                |(traits<TYPE>::has_trivial_copy   ? HAS_TRIVIAL_COPY   : 0))
                )
${throw}{
  ${body}}
"
	
	
	
	
	comment "! 
     * Constructors and destructors"
      end

      operation 1610252 "SortedVector"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "rhs" type class_ref 153740 // SortedVector
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : SortedVectorImpl(rhs) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1610380 "~SortedVector"
	preserve_cpp_body_indent cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1610508 "operator ="
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 153740 // SortedVector
	nparams 1
	  param in name "rhs" type class_ref 153740 // SortedVector
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! copy operator "
      end

      operation 1610636 "operator ="
	preserve_cpp_body_indent cpp_inline public return_type class_ref 153740 // SortedVector
	nparams 1
	  param in name "rhs" type class_ref 153740 // SortedVector
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1610764 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { VectorImpl::clear(); };
"
	
	
	
	
	comment "     * empty the vector"
      end

      operation 1610892 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return VectorImpl::size(); };
"
	
	
	
	
	comment "! 
     * vector stats
     
! returns number of items in the vector"
      end

      operation 1611020 "isEmpty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return VectorImpl::isEmpty(); };
"
	
	
	
	
	comment "! returns whether or not the vector is empty"
      end

      operation 1611148 "capacity"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return VectorImpl::capacity(); };
"
	
	
	
	
	comment "! returns how many items can be stored without reallocating the backing store"
      end

      operation 1611276 "setCapacity"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return VectorImpl::setCapacity(size); };
"
	
	
	
	
	comment "! sets the capacity. capacity can never be reduced less than size()"
      end

      operation 1611404 "array"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "TYPE"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! 
     * C-style array access
     
! read-only C-style access "
      end

      operation 1611532 "editArray"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "TYPE"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! read-write C-style access. BE VERY CAREFUL when modifying the array
! you must keep it sorted! You usually don't use this function."
      end

      operation 1611660 "indexOf"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "item" explicit_type "TYPE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! finds the index of an item"
      end

      operation 1611788 "orderOf"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 1
	  param in name "item" explicit_type "TYPE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! finds where this item should be inserted"
      end

      operation 1611916 "operator []"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "TYPE"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! 
     * accessors
     
! read-only access to an item at a given index"
      end

      operation 1612044 "itemAt"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "TYPE"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! alternate name for operator []"
      end

      operation 1612172 "top"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "TYPE"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! stack-usage of the vector. returns the top of the stack (last element)"
      end

      operation 1612300 "add"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "item" explicit_type "TYPE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "!
     * modifying the array
     
! add an item in the right place (and replace the one that is there)"
      end

      operation 1612428 "editItemAt"
	cpp_inline public explicit_return_type "TYPE"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
                return *( static_cast<TYPE *>(VectorImpl::editItemLocation(index)) );
            };
"
	
	
	
	
	comment "! editItemAt() MUST NOT change the order of this item"
      end

      operation 1612556 "merge"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "vector" explicit_type "Vector<TYPE>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! merges a vector into this one"
      end

      operation 1612684 "merge"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "vector" type class_ref 153740 // SortedVector
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1612812 "remove"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "item" explicit_type "TYPE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! removes an item"
      end

      operation 1612940 "removeItemsAt"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param in name "index" explicit_type "size_t"
	  param in name "count" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! remove several items"
      end

      operation 1613068 "removeAt"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return removeItemsAt(index); };
"
	
	
	
	
	comment "! remove one item"
      end

      operation 1613196 "do_construct"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "storage" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1613324 "do_destroy"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "storage" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1613452 "do_copy"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1613580 "do_splat"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "item" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1613708 "do_move_forward"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1613836 "do_move_backward"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1613964 "do_compare"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "lhs" explicit_type "void"
	  param in name "rhs" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 159244 "Condition"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------
 ---------------------------------------------------------------------------

 * Condition variable class.  The implementation is system-dependent.
 *
 * Condition variables are paired up with mutexes.  Lock the mutex,
 * call wait(), then either re-wait() if things aren't quite what you want,
 * or unlock the mutex and continue.  All threads calling wait() must
 * use the same mutex for a given Condition."
      class 556684 "anonymous306"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1472268 "PRIVATE"
	  public type class_ref 556684 // anonymous306
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1472396 "SHARED"
	  public type class_ref 556684 // anonymous306
	  init_value " 1
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1576460 "Condition"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// * Constructor.  Set up the WinCondition stuff.

${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1576588 "Condition"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "type" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1576716 "~Condition"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// * Destructor.  Free Windows resources as well as our allocated storage.

${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1576844 "wait"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "mutex" type class_ref 133132 // Mutex
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Wait on the condition variable.  Lock the mutex before calling."
      end

      operation 1576972 "waitRelative"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param inout name "mutex" type class_ref 133132 // Mutex
	  param in name "reltime" type class_ref 140172 // nsecs_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " same with relative timeout"
      end

      operation 1577100 "signal"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Signal the condition variable, allowing one thread to continue.

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Signal the condition variable, allowing one thread to continue."
      end

      operation 1577228 "broadcast"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Signal the condition variable, allowing all threads to continue.
// *
// * First we have to wake up all threads waiting on the semaphore, then
// * we wait until all of the threads have actually been woken before
// * releasing the internal mutex.  This ensures that all threads are woken.

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Signal the condition variable, allowing all threads to continue."
      end

      attribute 1472524 "mCond"
	private explicit_type "pthread_cond_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1472652 "mState"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 159500 "Thread"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------
 ---------------------------------------------------------------------------"
      classrelation 1177100 // <generalisation>
	relation 1177100 ---|>
	  a public
	    cpp virtual default "${type}"
	    classrelation_ref 1177100 // <generalisation>
	  b parent class_ref 140044 // RefBase
      end

      operation 1636236 "Thread"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "canCallJava" explicit_type "bool"
	    defaultvalue "true"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// ----------------------------------------------------------------------------
//
// * This is our thread object!

${inline}${class}::${name}${(}${t0} ${p0}${)}
    :   mCanCallJava(canCallJava),
        mThread(thread_id_t(-1)),
        mLock(\"Thread::mLock\"),
        mStatus(NO_ERROR),
        mExitPending(false), mRunning(false)
#ifdef HAVE_ANDROID_OS
        , mTid(-1)
#endif
${throw}{
  ${body}}
"
	
	
	
	
	comment " Create a Thread object, but doesn't create or start the associated
 thread. See the run() method."
      end

      operation 1636364 "~Thread"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1636492 "run"
	preserve_cpp_body_indent cpp_virtual public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "name" explicit_type "char"
	    defaultvalue "0"
	  param in name "priority" explicit_type "int32_t"
	    defaultvalue "PRIORITY_DEFAULT"
	  param in name "stack" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Start the thread in threadLoop() which needs to be implemented."
      end

      operation 1636620 "requestExit"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Ask this object's thread to exit. This function is asynchronous, when the
 function returns the thread might still be running. Of course, this
 function can be called from a different thread."
      end

      operation 1636748 "readyToRun"
	preserve_cpp_body_indent cpp_virtual public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Good place to do one-time initializations"
      end

      operation 1636876 "requestExitAndWait"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Call requestExit() and wait until this object's thread exits.
 BE VERY CAREFUL of deadlocks. In particular, it would be silly to call
 this function from this object's thread. Will return WOULD_BLOCK in
 that case."
      end

      operation 1637004 "join"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Wait until this object's thread exits. Returns immediately if not yet running.
 Do not call from this object's thread; will return WOULD_BLOCK in that case."
      end

      operation 1637132 "getTid"
	preserve_cpp_body_indent const public explicit_return_type "pid_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return the thread's kernel ID, same as the thread itself calling gettid() or
 androidGetTid(), or -1 if the thread is not running."
      end

      operation 1637260 "exitPending"
	preserve_cpp_body_indent const protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " exitPending() returns true if requestExit() has been called."
      end

      operation 1637388 "threadLoop"
	abstract cpp_virtual private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Derived class must implement threadLoop(). The thread starts its life
 here. There are two ways of using the Thread object:
 1) loop: if threadLoop() returns true, it will be called again if
          requestExit() wasn't called.
 2) once: if threadLoop() returns false, the thread will exit upon return."
      end

      operation 1637516 "operator ="
	private return_type class_ref 159500 // Thread
	nparams 1
	  param in name "" type class_ref 159500 // Thread
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1637644 "_threadLoop"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param inout name "user" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1485580 "mCanCallJava"
	const_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1177228 // mThread (<directional composition>)
	relation 1177228 *-->
	  a role_name "mThread" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1177228 // mThread (<directional composition>)
	  b parent class_ref 161804 // thread_id_t
      end

      classrelation 1177356 // mLock (<directional composition>)
	relation 1177356 *-->
	  a role_name "mLock" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1177356 // mLock (<directional composition>)
	  b parent class_ref 133132 // Mutex
      end

      classrelation 1177484 // mThreadExitedCondition (<directional composition>)
	relation 1177484 *-->
	  a role_name "mThreadExitedCondition" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1177484 // mThreadExitedCondition (<directional composition>)
	  b parent class_ref 159244 // Condition
      end

      classrelation 1177612 // mStatus (<directional composition>)
	relation 1177612 *-->
	  a role_name "mStatus" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1177612 // mStatus (<directional composition>)
	  b parent class_ref 128268 // status_t
      end

      attribute 1485708 "mExitPending"
	volatile private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1485836 "mRunning"
	volatile private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1177740 // mHoldSelf (<directional composition>)
	relation 1177740 *-->
	  stereotype "sp"
	  a role_name "mHoldSelf" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1177740 // mHoldSelf (<directional composition>)
	  b parent class_ref 159500 // Thread
      end

      attribute 1485964 "mTid"
	private explicit_type "pid_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3609100 // <dependency>
	relation 3608972 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 3609100 // <dependency>
	  b parent class_ref 662668 // PoolThread
      end
    end

    class 161804 "thread_id_t"
      visibility package stereotype "typedef" base_type class_ref 410508 // android_thread_id_t
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      classrelation 1177868 // <dependency>
	relation 1177868 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 1177868 // <dependency>
	  b parent class_ref 410508 // android_thread_id_t
      end
    end

    class 167820 "StringArray"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " An expanding array of strings.  Add, get, sort, delete."
      operation 1630092 "StringArray"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// An expanding array of strings.  Add, get, sort, delete.

${inline}${class}::${name}${(}${)}
    : mMax(0), mCurrent(0), mArray(NULL)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1630220 "~StringArray"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1630348 "push_back"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "str" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add a string.  A copy of the string is made."
      end

      operation 1630476 "erase"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Delete an entry."
      end

      operation 1630604 "sort"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "compare" explicit_type "int (*)(const void*, const void*)"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}int (*${p0})(const void*, const void*)${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}int (*${p0})(const void*, const void*)${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sort the array."
      end

      operation 1630732 "cmpAscendingAlpha"
	class_operation preserve_cpp_body_indent public explicit_return_type "int"
	nparams 2
	  param in name "pstr1" explicit_type "void"
	  param in name "pstr2" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Pass this to the sort routine to do an ascending alphabetical sort."
      end

      operation 1630860 "size"
	const cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return mCurrent; };
"
	
	
	
	
	comment " Get the #of items in the array."
      end

      operation 1630988 "getEntry"
	const cpp_inline public explicit_return_type "char"
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return (unsigned(idx) >= unsigned(mCurrent)) ? NULL : mArray[idx];
    };
"
	
	
	
	
	comment " Return entry N.
 [should use operator[] here]"
      end

      operation 1631116 "setEntry"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "int"
	  param in name "str" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Set entry N to specified string.
 [should use operator[] here]"
      end

      attribute 1484172 "mMax"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1484300 "mCurrent"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1484428 "mArray"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 401292 "ZipFileRO"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Open a Zip archive for reading.
 *
 * We want \"open\" and \"find entry by name\" to be fast operations, and we
 * want to use as little memory as possible.  We memory-map the file,
 * and load a hash table with pointers to the filenames (which aren't
 * null-terminated).  The other fields are at a fixed offset from the
 * filename, so we don't need to extract those (but we do need to byte-read
 * and endian-swap them every time we want them).
 *
 * To speed comparisons when doing a lookup by name, we could make the mapping
 * \"private\" (copy-on-write) and null-terminate the filenames after verifying
 * the record structure.  However, this requires a private mapping of
 * every page that the Central Directory touches.  Easier to tuck a copy
 * of the string length into the hash table entry.
 *
 * NOTE: If this is used on file descriptors inherited from a fork() operation,
 * you must be on a platform that implements pread() to guarantee correctness
 * on the shared file descriptors."
      operation 1665804 "ZipFileRO"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mFd(-1), mFileName(NULL), mFileLength(-1),
          mDirectoryMap(NULL),
          mNumEntries(-1), mDirectoryOffset(-1),
          mHashTableSize(-1), mHashTable(NULL)
        {};
"
	
	
	
	
      end

      operation 1665932 "~ZipFileRO"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1666060 "open"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "zipFileName" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Open the specified file read-only.  We memory-map the entire thing and
// * close the file before returning.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Open an archive."
      end

      operation 1666188 "findEntryByName"
	preserve_cpp_body_indent const public return_type class_ref 412428 // ZipEntryRO
	nparams 1
	  param in name "fileName" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Find a matching entry.
// *
// * Returns NULL if not found.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Find an entry, by name.  Returns the entry identifier, or NULL if
     * not found.
     *
     * If two entries have the same name, one will be chosen at semi-random."
      end

      operation 1666316 "getNumEntries"
	const cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return mNumEntries;
    };
"
	
	
	
	
	comment "     * Return the #of entries in the Zip archive."
      end

      operation 1666444 "findEntryByIndex"
	preserve_cpp_body_indent const public return_type class_ref 412428 // ZipEntryRO
	nparams 1
	  param in name "idx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Find the Nth entry.
// *
// * This currently involves walking through the sparse hash table, counting
// * non-empty entries.  If we need to speed this up we can either allocate
// * a parallel lookup table or (perhaps better) provide an iterator interface.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Return the Nth entry.  Zip file entries are not stored in sorted
     * order, and updated entries may appear at the end, so anyone walking
     * the archive needs to avoid making ordering assumptions.  We take
     * that further by returning the Nth non-empty entry in the hash table
     * rather than the Nth entry in the archive.
     *
     * Valid values are [0..numEntries).
     *
     * [This is currently O(n).  If it needs to be fast we can allocate an
     * additional data structure or provide an iterator interface.]"
      end

      operation 1666572 "getEntryFileName"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 3
	  param in name "entry" type class_ref 412428 // ZipEntryRO
	  param inout name "buffer" explicit_type "char"
	  param in name "bufLen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Copy the entry's filename to the buffer.

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Copy the filename into the supplied buffer.  Returns 0 on success,
     * -1 if \"entry\" is invalid, or the filename length if it didn't fit.  The
     * length, and the returned string, include the null-termination."
      end

      operation 1666700 "getEntryInfo"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 7
	  param in name "entry" type class_ref 412428 // ZipEntryRO
	  param inout name "pMethod" explicit_type "int"
	  param inout name "pUncompLen" explicit_type "size_t"
	  param inout name "pCompLen" explicit_type "size_t"
	  param inout name "pOffset" type class_ref 132876 // off64_t
	  param inout name "pModWhen" explicit_type "long"
	  param inout name "pCrc32" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Get the useful fields from the zip entry.
// *
// * Returns \"false\" if the offsets to the fields or the contents of the fields
// * appear to be bogus.

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} * ${p4}, ${t5} * ${p5}, ${t6} * ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Get the vital stats for an entry.  Pass in NULL pointers for anything
     * you don't need.
     *
     * \"*pOffset\" holds the Zip file offset of the entry's data.
     *
     * Returns \"false\" if \"entry\" is bogus or if the data in the Zip file
     * appears to be bad."
      end

      operation 1666828 "createEntryFileMap"
	preserve_cpp_body_indent const public return_type class_ref 137356 // FileMap
	nparams 1
	  param in name "entry" type class_ref 412428 // ZipEntryRO
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Create a new FileMap object that spans the data in \"entry\".

${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Create a new FileMap object that maps a subset of the archive.  For
     * an uncompressed entry this effectively provides a pointer to the
     * actual data, for a compressed entry this provides the input buffer
     * for inflate()."
      end

      operation 1666956 "uncompressEntry"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param in name "entry" type class_ref 412428 // ZipEntryRO
	  param inout name "buffer" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Uncompress an entry, in its entirety, into the provided output buffer.
// *
// * This doesn't verify the data's CRC, which might be useful for
// * uncompressed data.  The caller should be able to manage it.

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Uncompress the data into a buffer.  Depending on the compression
     * format, this is either an \"inflate\" operation or a memcpy.
     *
     * Use \"uncompLen\" from getEntryInfo() to determine the required
     * buffer size.
     *
     * Returns \"true\" on success."
      end

      operation 1667084 "uncompressEntry"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param in name "entry" type class_ref 412428 // ZipEntryRO
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Uncompress an entry, in its entirety, to an open file descriptor.
// *
// * This doesn't verify the data's CRC, but probably should.

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Uncompress the data to an open file descriptor."
      end

      class 571404 "anonymous334"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1496972 "kCompressStored"
	  public type class_ref 571404 // anonymous334
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1497100 "kCompressDeflated"
	  public type class_ref 571404 // anonymous334
	  init_value " 8"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1667212 "inflateBuffer"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 4
	  param inout name "outBuf" explicit_type "void"
	  param in name "inBuf" explicit_type "void"
	  param in name "uncompLen" explicit_type "size_t"
	  param in name "compLen" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Uncompress \"deflate\" data from one buffer to another.
// 
//static

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Utility function: uncompress deflated data, buffer to buffer."
      end

      operation 1667340 "inflateBuffer"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 4
	  param in name "fd" explicit_type "int"
	  param in name "inBuf" explicit_type "void"
	  param in name "uncompLen" explicit_type "size_t"
	  param in name "compLen" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Uncompress \"deflate\" data from one buffer to an open file descriptor.
// 
//static

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Utility function: uncompress deflated data, buffer to fd."
      end

      operation 1667468 "zipTimeToTimespec"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "when" explicit_type "long"
	  param inout name "timespec" explicit_type "tm"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        const long date = when >> 16;
        timespec->tm_year = ((date >> 9) & 0x7F) + 80; // Zip is years since 1980
        timespec->tm_mon = (date >> 5) & 0x0F;
        timespec->tm_mday = date & 0x1F;

        timespec->tm_hour = (when >> 11) & 0x1F;
        timespec->tm_min = (when >> 5) & 0x3F;
        timespec->tm_sec = (when & 0x1F) << 1;
    };
"
	
	
	
	
	comment "     * Utility function to convert ZIP's time format to a timespec struct."
      end

      operation 1667596 "get2LE"
	class_operation cpp_inline public explicit_return_type "ushort"
	nparams 1
	  param in name "buf" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return buf[0] | (buf[1] << 8);
    };
"
	
	
	
	
	comment "     * Some basic functions for raw data manipulation.  \"LE\" means
     * Little Endian."
      end

      operation 1667724 "get4LE"
	class_operation cpp_inline public explicit_return_type "ulong"
	nparams 1
	  param in name "buf" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return buf[0] | (buf[1] << 8) | (buf[2] << 16) | (buf[3] << 24);
    };
"
	
	
	
	
      end

      operation 1667852 "ZipFileRO"
	private explicit_return_type ""
	nparams 1
	  param in name "src" type class_ref 401292 // ZipFileRO
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " these are private and not defined "
      end

      operation 1667980 "operator ="
	private return_type class_ref 401292 // ZipFileRO
	nparams 1
	  param in name "src" type class_ref 401292 // ZipFileRO
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1668108 "mapCentralDirectory"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Parse the Zip archive, verifying its contents and initializing internal
// * data structures.

${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " locate and parse the central directory "
      end

      operation 1668236 "parseZipArchive"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " parse the archive, prepping internal structures "
      end

      operation 1668364 "addToHash"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param in name "str" explicit_type "char"
	  param in name "strLen" explicit_type "int"
	  param in name "hash" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Add a new entry to the hash table.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " add a new entry to the hash table "
      end

      operation 1668492 "computeHash"
	class_operation preserve_cpp_body_indent private explicit_return_type "uint"
	nparams 2
	  param in name "str" explicit_type "char"
	  param in name "len" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Simple string hash function for non-null-terminated strings.
// 
//static

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " compute string hash code "
      end

      operation 1668620 "entryToIndex"
	preserve_cpp_body_indent const private explicit_return_type "int"
	nparams 1
	  param in name "entry" type class_ref 412428 // ZipEntryRO
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Convert a ZipEntryRO to a hash table index, verifying that it's in a
// * valid range.

${inline}${type} ${class}::${name}${(}const ${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " convert a ZipEntryRO back to a hash table index "
      end

      class 571532 "HashEntry"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1497228 "name"
	  const_attribute public explicit_type "char"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1497356 "nameLen"
	  public explicit_type "ushort"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      attribute 1497484 "mFd"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1179404 // mFdLock (<directional composition>)
	relation 1179404 *-->
	  a role_name "mFdLock" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1179404 // mFdLock (<directional composition>)
	  b parent class_ref 133132 // Mutex
      end

      attribute 1497612 "mFileName"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1497740 "mFileLength"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1179532 // mDirectoryMap (<unidirectional association>)
	relation 1179532 --->
	  a role_name "mDirectoryMap" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 1179532 // mDirectoryMap (<unidirectional association>)
	  b parent class_ref 137356 // FileMap
      end

      attribute 1497868 "mNumEntries"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1179660 // mDirectoryOffset (<directional composition>)
	relation 1179660 *-->
	  a role_name "mDirectoryOffset" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1179660 // mDirectoryOffset (<directional composition>)
	  b parent class_ref 132876 // off64_t
      end

      attribute 1497996 "mHashTableSize"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1179788 // mHashTable (<unidirectional association>)
	relation 1179788 --->
	  a role_name "mHashTable" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 1179788 // mHashTable (<unidirectional association>)
	  b parent class_ref 571532 // HashEntry
      end
    end

    class 407180 "OnEntryRemoved"
      abstract visibility package 
      nformals 2
      formal name "EntryKey" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "EntryValue" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * GenerationCache callback used when an item is removed"
      operation 1580940 "~OnEntryRemoved"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 1581068 "operator ()"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "key" explicit_type "EntryKey"
	  param inout name "value" explicit_type "EntryValue"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 411532 "FileType"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Some utility functions for working with files.  These could be made
 * part of a \"File\" class."
      attribute 1479948 "kFileTypeUnknown"
	public type class_ref 411532 // FileType
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1480076 "kFileTypeNonexistent"
	public type class_ref 411532 // FileType
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1480204 "kFileTypeRegular"
	public type class_ref 411532 // FileType
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1480332 "kFileTypeDirectory"
	public type class_ref 411532 // FileType
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1480460 "kFileTypeCharDev"
	public type class_ref 411532 // FileType
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1480588 "kFileTypeBlockDev"
	public type class_ref 411532 // FileType
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1480716 "kFileTypeFifo"
	public type class_ref 411532 // FileType
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1480844 "kFileTypeSymlink"
	public type class_ref 411532 // FileType
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1480972 "kFileTypeSocket"
	public type class_ref 411532 // FileType
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 412428 "ZipEntryRO"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}*  ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Trivial typedef to ensure that ZipEntryRO is not treated as a simple
 * integer.  We use NULL to indicate an invalid value."
    end

    class 418444 "BitSet32"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Contains some bit manipulation helpers.
 
 A simple set of 32 bits that can be individually marked or cleared."
      attribute 1469196 "value"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1567244 "BitSet32"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : value(0) { };
"
	
	
	
	
      end

      operation 1567372 "BitSet32"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : value(value) { };
"
	
	
	
	
      end

      operation 1567500 "valueForBit"
	class_operation cpp_inline public explicit_return_type "uint32_t"
	nparams 1
	  param in name "n" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return 0x80000000 >> n; };
"
	
	
	
	
	comment " Gets the value associated with a particular bit index."
      end

      operation 1567628 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { value = 0; };
"
	
	
	
	
	comment " Clears the bit set."
      end

      operation 1567756 "count"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return __builtin_popcount(value); };
"
	
	
	
	
	comment " Returns the number of marked bits in the set."
      end

      operation 1567884 "isEmpty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ! value; };
"
	
	
	
	
	comment " Returns true if the bit set does not contain any marked bits."
      end

      operation 1568012 "isFull"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value == 0xffffffff; };
"
	
	
	
	
	comment " Returns true if the bit set does not contain any unmarked bits."
      end

      operation 1568140 "hasBit"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "n" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return value & valueForBit(n); };
"
	
	
	
	
	comment " Returns true if the specified bit is marked."
      end

      operation 1568268 "markBit"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { value |= valueForBit(n); };
"
	
	
	
	
	comment " Marks the specified bit."
      end

      operation 1568396 "clearBit"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "n" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { value &= ~ valueForBit(n); };
"
	
	
	
	
	comment " Clears the specified bit."
      end

      operation 1568524 "firstMarkedBit"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return __builtin_clz(value); };
"
	
	
	
	
	comment " Finds the first marked bit in the set.
 Result is undefined if all bits are unmarked."
      end

      operation 1568652 "firstUnmarkedBit"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return __builtin_clz(~ value); };
"
	
	
	
	
	comment " Finds the first unmarked bit in the set.
 Result is undefined if all bits are marked."
      end

      operation 1568780 "lastMarkedBit"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 31 - __builtin_ctz(value); };
"
	
	
	
	
	comment " Finds the last marked bit in the set.
 Result is undefined if all bits are unmarked."
      end

      operation 1568908 "clearFirstMarkedBit"
	cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        uint32_t n = firstMarkedBit();
        clearBit(n);
        return n;
    };
"
	
	
	
	
	comment " Finds the first marked bit in the set and clears it.  Returns the bit index.
 Result is undefined if all bits are unmarked."
      end

      operation 1569036 "markFirstUnmarkedBit"
	cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        uint32_t n = firstUnmarkedBit();
        markBit(n);
        return n;
    };
"
	
	
	
	
	comment " Finds the first unmarked bit in the set and marks it.  Returns the bit index.
 Result is undefined if all bits are marked."
      end

      operation 1569164 "clearLastMarkedBit"
	cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        uint32_t n = lastMarkedBit();
        clearBit(n);
        return n;
    };
"
	
	
	
	
	comment " Finds the last marked bit in the set and clears it.  Returns the bit index.
 Result is undefined if all bits are unmarked."
      end

      operation 1569292 "getIndexOfBit"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 1
	  param in name "n" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return __builtin_popcount(value & ~(0xffffffffUL >> n));
    };
"
	
	
	
	
	comment " Gets the index of the specified bit in the set, which is the number of
 marked bits that appear before the specified bit."
      end

      operation 1569420 "operator =="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 418444 // BitSet32
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return value == other.value; };
"
	
	
	
	
      end

      operation 1569548 "operator !="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "other" type class_ref 418444 // BitSet32
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return value != other.value; };
"
	
	
	
	
      end
    end

    class 419212 "PropertyMap"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Provides a mechanism for passing around string-based property key / value pairs
 * and loading them from property files.
 *
 * The property files have the following simple structure:
 *
 * # Comment
 * key = value
 *
 * Keys and values are any sequence of printable ASCII characters.
 * The '=' separates the key from the value.
 * The key and value may not contain whitespace.
 *
 * The '\\' character is reserved for escape sequences and is not currently supported.
 * The '\"\" character is reserved for quoting and is not currently supported.
 * Files that contain the '\\' or '\"' character will fail to parse.
 *
 * The file must not contain duplicate keys.
 *
 * TODO Support escape sequences and quoted values when needed."
      operation 1594124 "PropertyMap"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// --- PropertyMap ---

${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Creates an empty property map. "
      end

      operation 1594252 "~PropertyMap"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1594380 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Clears the property map. "
      end

      operation 1594508 "addProperty"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "key" type class_ref 131340 // String8
	  param in name "value" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Adds a property.
     * Replaces the property with the same key if it is already present."
      end

      operation 1594636 "hasProperty"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "key" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Returns true if the property map contains the specified key. "
      end

      operation 1594764 "tryGetProperty"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param in name "key" type class_ref 131340 // String8
	  param inout name "outValue" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Gets the value of a property and parses it.
     * Returns true and sets outValue if the key was found and its value was parsed successfully.
     * Otherwise returns false and does not modify outValue.  (Also logs a warning.)"
      end

      operation 1594892 "tryGetProperty"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param in name "key" type class_ref 131340 // String8
	  param inout name "outValue" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1595020 "tryGetProperty"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param in name "key" type class_ref 131340 // String8
	  param inout name "outValue" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1595148 "tryGetProperty"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 2
	  param in name "key" type class_ref 131340 // String8
	  param inout name "outValue" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1595276 "addAll"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "map" type class_ref 419212 // PropertyMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Adds all values from the specified property map. "
      end

      operation 1595404 "getProperties"
	const cpp_inline public explicit_return_type "KeyedVector<String8, String8>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mProperties; };
"
	
	
	
	
	comment " Gets the underlying property map. "
      end

      operation 1595532 "load"
	class_operation preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "filename" type class_ref 131340 // String8
	  param inout name "outMap" type class_ref 419212 // PropertyMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Loads a property map from a file. "
      end

      class 560908 "Parser"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1173900 // mMap (<unidirectional association>)
	  relation 1173900 --->
	    a role_name "mMap" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      classrelation_ref 1173900 // mMap (<unidirectional association>)
	    b parent class_ref 419212 // PropertyMap
	end

	classrelation 1174028 // mTokenizer (<unidirectional association>)
	  relation 1174028 --->
	    a role_name "mTokenizer" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      classrelation_ref 1174028 // mTokenizer (<unidirectional association>)
	    b parent class_ref 420620 // Tokenizer
	end

	operation 1595660 "Parser"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 2
	    param inout name "map" type class_ref 419212 // PropertyMap
	    param inout name "tokenizer" type class_ref 420620 // Tokenizer
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "// --- PropertyMap::Parser ---

${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)} :
        mMap(map), mTokenizer(tokenizer) ${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1595788 "~Parser"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1595916 "parse"
	  preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1596044 "parseType"
	  private return_type class_ref 128268 // status_t
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1596172 "parseKey"
	  private return_type class_ref 128268 // status_t
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1596300 "parseKeyProperty"
	  private return_type class_ref 128268 // status_t
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1596428 "parseModifier"
	  private return_type class_ref 128268 // status_t
	  nparams 2
	    param in name "token" type class_ref 131340 // String8
	    param inout name "outMetaState" explicit_type "int32_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1596556 "parseCharacterLiteral"
	  private return_type class_ref 128268 // status_t
	  nparams 1
	    param inout name "outCharacter" type class_ref 419724 // char16_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end
      end

      classrelation 1174156 // mProperties (<directional composition>)
	relation 1174156 *-->
	  stereotype "KeyedVector"
	  a role_name "mProperties" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type},String8> ${name}${value};
"
	    classrelation_ref 1174156 // mProperties (<directional composition>)
	  b parent class_ref 131340 // String8
      end
    end

    class 420620 "Tokenizer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * A simple tokenizer for loading and parsing ASCII text files line by line."
      operation 1638668 "Tokenizer"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 5
	  param in name "filename" type class_ref 131340 // String8
	  param inout name "fileMap" type class_ref 137356 // FileMap
	  param inout name "buffer" explicit_type "char"
	  param in name "ownBuffer" explicit_type "bool"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} ${p3}, ${t4} ${p4}${)} :
        mFilename(filename), mFileMap(fileMap),
        mBuffer(buffer), mOwnBuffer(ownBuffer), mLength(length),
        mCurrent(buffer), mLineNumber(1) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1638796 "~Tokenizer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1638924 "open"
	class_operation preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "filename" type class_ref 131340 // String8
	  param inout name "outTokenizer" type class_ref 420620 // Tokenizer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Opens a file and maps it into memory.
     *
     * Returns NO_ERROR and a tokenizer for the file, if successful.
     * Otherwise returns an error and sets outTokenizer to NULL."
      end

      operation 1639052 "fromContents"
	class_operation preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "filename" type class_ref 131340 // String8
	  param in name "contents" explicit_type "char"
	  param inout name "outTokenizer" type class_ref 420620 // Tokenizer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} * * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, ${t2} * * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Prepares to tokenize the contents of a string.
     *
     * Returns NO_ERROR and a tokenizer for the string, if successful.
     * Otherwise returns an error and sets outTokenizer to NULL."
      end

      operation 1639180 "isEof"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCurrent == getEnd(); };
"
	
	
	
	
	comment "*
     * Returns true if at the end of the file."
      end

      operation 1639308 "isEol"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return isEof() || *mCurrent == '\\n'; };
"
	
	
	
	
	comment "*
     * Returns true if at the end of the line or end of the file."
      end

      operation 1639436 "getFilename"
	const cpp_inline public return_type class_ref 131340 // String8
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mFilename; };
"
	
	
	
	
	comment "*
     * Gets the name of the file."
      end

      operation 1639564 "getLineNumber"
	const cpp_inline public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mLineNumber; };
"
	
	
	
	
	comment "*
     * Gets a 1-based line number index for the current position."
      end

      operation 1639692 "getLocation"
	preserve_cpp_body_indent const public return_type class_ref 131340 // String8
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Formats a location string consisting of the filename and current line number.
     * Returns a string like \"MyFile.txt:33\"."
      end

      operation 1639820 "peekChar"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return isEof() ? '\\0' : *mCurrent; };
"
	
	
	
	
	comment "*
     * Gets the character at the current position.
     * Returns null at end of file."
      end

      operation 1639948 "peekRemainderOfLine"
	preserve_cpp_body_indent const public return_type class_ref 131340 // String8
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Gets the remainder of the current line as a string, excluding the newline character."
      end

      operation 1640076 "nextChar"
	cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return isEof() ? '\\0' : *(mCurrent++); };
"
	
	
	
	
	comment "*
     * Gets the character at the current position and advances past it.
     * Returns null at end of file."
      end

      operation 1640204 "nextToken"
	preserve_cpp_body_indent public return_type class_ref 131340 // String8
	nparams 1
	  param in name "delimiters" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Gets the next token on this line stopping at the specified delimiters
     * or the end of the line whichever comes first and advances past it.
     * Also stops at embedded nulls.
     * Returns the token or an empty string if the current character is a delimiter
     * or is at the end of the line."
      end

      operation 1640332 "nextLine"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Advances to the next line.
     * Does nothing if already at the end of the file."
      end

      operation 1640460 "skipDelimiters"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "delimiters" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Skips over the specified delimiters in the line.
     * Also skips embedded nulls."
      end

      operation 1640588 "Tokenizer"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 420620 // Tokenizer
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : mRanges(other.mRanges)
${throw}{
  ${body}}
"
	
	
	
	
      end

      classrelation 1178124 // mFilename (<directional composition>)
	relation 1178124 *-->
	  a role_name "mFilename" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1178124 // mFilename (<directional composition>)
	  b parent class_ref 131340 // String8
      end

      classrelation 1178252 // mFileMap (<unidirectional association>)
	relation 1178252 --->
	  a role_name "mFileMap" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 1178252 // mFileMap (<unidirectional association>)
	  b parent class_ref 137356 // FileMap
      end

      attribute 1490060 "mBuffer"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1490188 "mOwnBuffer"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1490316 "mLength"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1490444 "mCurrent"
	const_attribute private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1490572 "mLineNumber"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1640716 "getEnd"
	const cpp_inline private explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mBuffer + mLength; };
"
	
	
	
	
      end
    end

    class 431884 "Functor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1580556 "Functor"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1580684 "~Functor"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1580812 "operator ()"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "what" explicit_type "int"
	  param inout name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} { return NO_ERROR; };
"
	
	
	
	
      end
    end

    class 438796 "GenerationCache"
      visibility package 
      nformals 2
      formal name "K" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " struct Entry
*
 * A LRU type cache"
      operation 1581452 "GenerationCache"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "maxCapacity" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// class GenerationCache

${inline}${class}::${name}${(}${t0} ${p0}${)}: mMaxCapacity(maxCapacity),
    mListener(NULL), mNullValue(NULL) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1581580 "~GenerationCache"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      class 557964 "Capacity"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1477260 "kUnlimitedCapacity"
	  public type class_ref 557964 // Capacity
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1581708 "setOnEntryRemovedListener"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "listener" explicit_type "OnEntryRemoved<K, V>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//*
// * Should be set by the user of the Cache so that the callback is called whenever an item is
// * removed from the cache

${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1581836 "size"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1581964 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1582092 "contains"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1582220 "getKeyAt"
	preserve_cpp_body_indent const public explicit_return_type "K"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1582348 "getValueAt"
	preserve_cpp_body_indent const public explicit_return_type "V"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1582476 "get"
	preserve_cpp_body_indent public explicit_return_type "V"
	nparams 1
	  param in name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1582604 "put"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "key" explicit_type "K"
	  param in name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1582732 "removeAt"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "ssize_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1582860 "remove"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1582988 "removeOldest"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1477388 "mCache"
	private explicit_type "K, sp<Entry<K, V> > "
	stereotype "KeyedVector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1477516 "mMaxCapacity"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1477644 "mListener"
	private explicit_type "K, V"
	stereotype "OnEntryRemoved"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1477772 "mOldest"
	private explicit_type "Entry<K, V> "
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1477900 "mYoungest"
	private explicit_type "Entry<K, V> "
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1583116 "attachToCache"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "entry" explicit_type "sp<Entry<K, V> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1583244 "detachFromCache"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "entry" explicit_type "sp<Entry<K, V> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1478028 "mNullValue"
	const_attribute private explicit_type "V"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 441100 "LightRefBase"
      visibility package 
      nformals 1
      formal name "T" type "class" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      operation 1600396 "LightRefBase"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mCount(0) { };
"
	
	
	
	
      end

      operation 1600524 "incStrong"
	const cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        android_atomic_inc(&mCount);
    };
"
	
	
	
	
      end

      operation 1600652 "decStrong"
	const cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (android_atomic_dec(&mCount) == 1) {
            delete static_cast<const T*>(this);
        }
    };
"
	
	
	
	
      end

      operation 1600780 "getStrongCount"
	const cpp_inline public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mCount;
    };
"
	
	
	
	
	comment "! DEBUGGING ONLY: Get current strong ref count."
      end

      class 561676 "basetype"
	visibility package stereotype "typedef" explicit_base_type "LightRefBase<T>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1600908 "~LightRefBase"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      classrelation 1174668 // <dependency>
	relation 1174668 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 1174668 // <dependency>
	  b parent class_ref 561548 // ReferenceMover
      end

      operation 1601036 "moveReferences"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 4
	  param inout name "d" explicit_type "void"
	  param in name "s" explicit_type "void"
	  param in name "n" explicit_type "size_t"
	  param in name "caster" type class_ref 561036 // ReferenceConverterBase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} { };
"
	
	
	
	
      end

      attribute 1482252 "mCount"
	volatile private explicit_type "int32_t"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 443532 "VectorImpl"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------
 No user serviceable parts in here...
 ---------------------------------------------------------------------------
!
 * Implementation of the guts of the vector<> class
 * this ensures backward binary compatibility and
 * reduces code size.
 * For performance reasons, we expose mStorage and mCount
 * so these fields are set in stone.
 *"
      class 570380 "anonymous333"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1495180 "HAS_TRIVIAL_CTOR"
	  public type class_ref 570380 // anonymous333
	  init_value " 0x00000001"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1495308 "HAS_TRIVIAL_DTOR"
	  public type class_ref 570380 // anonymous333
	  init_value " 0x00000002"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1495436 "HAS_TRIVIAL_COPY"
	  public type class_ref 570380 // anonymous333
	  init_value " 0x00000004"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1653132 "VectorImpl"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "itemSize" explicit_type "size_t"
	  param in name "flags" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "// ----------------------------------------------------------------------------

${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}
    : mStorage(0), mCount(0), mFlags(flags), mItemSize(itemSize)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1653260 "VectorImpl"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "rhs" type class_ref 443532 // VectorImpl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    :   mStorage(rhs.mStorage), mCount(rhs.mCount),
        mFlags(rhs.mFlags), mItemSize(rhs.mItemSize)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1653388 "~VectorImpl"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1653516 "finish_vector"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! must be called from subclasses destructor "
      end

      operation 1653644 "operator ="
	preserve_cpp_body_indent public return_type class_ref 443532 // VectorImpl
	nparams 1
	  param in name "rhs" type class_ref 443532 // VectorImpl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1653772 "arrayImpl"
	const cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mStorage; };
"
	
	
	
	
	comment "! C-style array access "
      end

      operation 1653900 "editArrayImpl"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1654028 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCount; };
"
	
	
	
	
	comment "! vector stats "
      end

      operation 1654156 "isEmpty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCount == 0; };
"
	
	
	
	
      end

      operation 1654284 "capacity"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1654412 "setCapacity"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 1
	  param in name "new_capacity" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1654540 "insertVectorAt"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 2
	  param in name "vector" type class_ref 443532 // VectorImpl
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! append/insert another vector or array "
      end

      operation 1654668 "appendVector"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 1
	  param in name "vector" type class_ref 443532 // VectorImpl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1654796 "insertArrayAt"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 3
	  param in name "array" explicit_type "void"
	  param in name "index" explicit_type "size_t"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1654924 "appendArray"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 2
	  param in name "array" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1655052 "insertAt"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 2
	  param in name "index" explicit_type "size_t"
	  param in name "numItems" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! add/insert/replace items "
      end

      operation 1655180 "insertAt"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 3
	  param in name "item" explicit_type "void"
	  param in name "index" explicit_type "size_t"
	  param in name "numItems" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1655308 "pop"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1655436 "push"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1655564 "push"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "item" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1655692 "add"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1655820 "add"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 1
	  param in name "item" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1655948 "replaceAt"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1656076 "replaceAt"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 2
	  param in name "prototype" explicit_type "void"
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1656204 "removeItemsAt"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 2
	  param in name "index" explicit_type "size_t"
	  param in name "count" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! remove items "
      end

      operation 1656332 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1656460 "itemLocation"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1656588 "editItemLocation"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 570508 "compar_t"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}(* ${name})(const void* lhs, const void* rhs);
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 570636 "compar_r_t"
	visibility package stereotype "typedef" explicit_base_type "int"
	cpp_decl "${comment}typedef ${type}(* ${name})(const void* lhs, const void* rhs, void* state);
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 1656716 "sort"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "cmp" type class_ref 570508 // compar_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1656844 "sort"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "cmp" type class_ref 570636 // compar_r_t
	  param inout name "state" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1656972 "itemSize"
	preserve_cpp_body_indent const protected explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1657100 "release_storage"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1657228 "do_construct"
	abstract const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "storage" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1657356 "do_destroy"
	abstract const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "storage" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1657484 "do_copy"
	abstract const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1657612 "do_splat"
	abstract const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "item" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1657740 "do_move_forward"
	abstract const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1657868 "do_move_backward"
	abstract const cpp_virtual protected explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1657996 "reservedVectorImpl1"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " take care of FBC..."
      end

      operation 1658124 "reservedVectorImpl2"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1658252 "reservedVectorImpl3"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1658380 "reservedVectorImpl4"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1658508 "reservedVectorImpl5"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1658636 "reservedVectorImpl6"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1658764 "reservedVectorImpl7"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1658892 "reservedVectorImpl8"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1659020 "_grow"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 2
	  param in name "where" explicit_type "size_t"
	  param in name "amount" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1659148 "_shrink"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 2
	  param in name "where" explicit_type "size_t"
	  param in name "amount" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1659276 "_do_construct"
	preserve_cpp_body_indent const cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "storage" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1659404 "_do_destroy"
	preserve_cpp_body_indent const cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "storage" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1659532 "_do_copy"
	preserve_cpp_body_indent const cpp_inline private explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1659660 "_do_splat"
	preserve_cpp_body_indent const cpp_inline private explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "item" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1659788 "_do_move_forward"
	preserve_cpp_body_indent const cpp_inline private explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1659916 "_do_move_backward"
	preserve_cpp_body_indent const cpp_inline private explicit_return_type "void"
	nparams 3
	  param inout name "dest" explicit_type "void"
	  param in name "from" explicit_type "void"
	  param in name "num" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1495564 "mStorage"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " base address of the vector"
      end

      attribute 1495692 "mCount"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of items"
      end

      attribute 1495820 "mFlags"
	const_attribute private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1495948 "mItemSize"
	const_attribute private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 506892 "Flattenable"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * The Flattenable interface allows an object to serialize itself out
 * to a byte-buffer and an array of file descriptors."
      operation 1578892 "getFlattenedSize"
	abstract const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " size in bytes of the flattened object"
      end

      operation 1579020 "getFdCount"
	abstract const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " number of file descriptors to flatten"
      end

      operation 1579148 "flatten"
	abstract const cpp_virtual public return_type class_ref 128268 // status_t
	nparams 4
	  param inout name "buffer" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param in name "fds" explicit_type "int"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}[]${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " flattens the object into buffer.
 size should be at least of getFlattenedSize()
 file descriptors are written in the fds[] array but ownership is
 not transfered (ie: they must be dupped by the caller of
 flatten() if needed)."
      end

      operation 1579276 "unflatten"
	abstract cpp_virtual public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "buffer" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param in name "fds" explicit_type "int"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}[]${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " unflattens the object from buffer.
 size should be equal to the value of getFlattenedSize() when the
 object was flattened.
 unflattened file descriptors are found in the fds[] array and
 don't need to be dupped(). ie: the caller of unflatten doesn't
 keep ownership. If a fd is not retained by unflatten() it must be
 explicitly closed."
      end

      operation 1579404 "~Flattenable"
	abstract preserve_cpp_body_indent cpp_virtual protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	
	
	
	
      end
    end

    class 507020 "LightFlattenable"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * LightFlattenable is a protocol allowing object to serialize themselves out
 * to a byte-buffer.
 *
 * LightFlattenable objects must implement this protocol.
 *
 * LightFlattenable doesn't require the object to be virtual."
      operation 1579532 "isFixedSize"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " returns whether this object always flatten into the same size.
 for efficiency, this should always be inline."
      end

      operation 1579660 "getSize"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " returns size in bytes of the flattened object. must be a constant."
      end

      operation 1579788 "flatten"
	preserve_cpp_body_indent const cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "buffer" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " flattens the object into buffer."
      end

      operation 1579916 "unflatten"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "buffer" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " unflattens the object from buffer of given size."
      end
    end

    class 507532 "TextOutput"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      operation 1633292 "TextOutput"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1633420 "~TextOutput"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1633548 "print"
	abstract cpp_virtual public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "txt" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1633676 "moveIndent"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      class 563724 "Bundle"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1633804 "Bundle"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "to" type class_ref 507532 // TextOutput
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw} : mTO(to) { to.pushBundle(); };
"
	  
	  
	  
	  
	end

	operation 1633932 "~Bundle"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { mTO.popBundle(); };
"
	  
	  
	  
	  
	end

	classrelation 1176844 // mTO (<unidirectional association>)
	  relation 1176844 --->
	    a role_name "mTO" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	      classrelation_ref 1176844 // mTO (<unidirectional association>)
	    b parent class_ref 507532 // TextOutput
	end
      end

      operation 1634060 "pushBundle"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1634188 "popBundle"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 554380 "LightFlattenablePod"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 507020 // LightFlattenable
        rank 0 explicit_value "T"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * LightFlattenablePod is an implementation of the LightFlattenable protocol
 * for POD (plain-old-data) objects."
      classrelation 1171724 // <realization>
	relation 1171724 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1171724 // <realization>
	  b parent class_ref 507020 // LightFlattenable
      end

      operation 1580044 "isFixedSize"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return true;
    };
"
	
	
	
	
      end

      operation 1580172 "getSize"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return sizeof(T);
    };
"
	
	
	
	
      end

      operation 1580300 "flatten"
	const cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "buffer" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        *reinterpret_cast<T*>(buffer) = *static_cast<T const*>(this);
        return NO_ERROR;
    };
"
	
	
	
	
      end

      operation 1580428 "unflatten"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "buffer" explicit_type "void"
	  param in name "" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        *static_cast<T*>(this) = *reinterpret_cast<T const*>(buffer);
        return NO_ERROR;
    };
"
	
	
	
	
      end
    end

    class 554636 "SharedBuffer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      class 562700 "anonymous313"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1482892 "eKeepStorage"
	  public type class_ref 562700 // anonymous313
	  init_value " 0x00000001
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1607692 "alloc"
	class_operation preserve_cpp_body_indent public return_type class_ref 554636 // SharedBuffer
	nparams 1
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! allocate a buffer of size 'size' and acquire() it.
     *  call release() to free it."
      end

      operation 1607820 "dealloc"
	class_operation preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 1
	  param in name "released" type class_ref 554636 // SharedBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! free the memory associated with the SharedBuffer.
     * Fails if there are any users associated with this SharedBuffer.
     * In other words, the buffer must have been release by all its
     * users."
      end

      operation 1607948 "data"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! access the data for read"
      end

      operation 1608076 "data"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! access the data for read/write"
      end

      operation 1608204 "size"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! get size of the buffer"
      end

      operation 1608332 "bufferFromData"
	class_operation preserve_cpp_body_indent cpp_inline public return_type class_ref 554636 // SharedBuffer
	nparams 1
	  param inout name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! get back a SharedBuffer object from its data"
      end

      operation 1608460 "bufferFromData"
	class_operation preserve_cpp_body_indent cpp_inline public return_type class_ref 554636 // SharedBuffer
	nparams 1
	  param in name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! get back a SharedBuffer object from its data"
      end

      operation 1608588 "sizeFromData"
	class_operation preserve_cpp_body_indent cpp_inline public explicit_return_type "size_t"
	nparams 1
	  param in name "data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! get the size of a SharedBuffer object from its data"
      end

      operation 1608716 "edit"
	preserve_cpp_body_indent const public return_type class_ref 554636 // SharedBuffer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! edit the buffer (get a writtable, or non-const, version of it)"
      end

      operation 1608844 "editResize"
	preserve_cpp_body_indent const public return_type class_ref 554636 // SharedBuffer
	nparams 1
	  param in name "newSize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! edit the buffer, resizing if needed"
      end

      operation 1608972 "attemptEdit"
	preserve_cpp_body_indent const public return_type class_ref 554636 // SharedBuffer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! like edit() but fails if a copy is required"
      end

      operation 1609100 "reset"
	preserve_cpp_body_indent const public return_type class_ref 554636 // SharedBuffer
	nparams 1
	  param in name "new_size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! resize and edit the buffer, loose it's content."
      end

      operation 1609228 "acquire"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! acquire/release a reference on this buffer"
      end

      operation 1609356 "release"
	preserve_cpp_body_indent const public explicit_return_type "int32_t"
	nparams 1
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! release a reference on this buffer, with the option of not
     * freeing the memory associated with it if it was the last reference
     * returns the previous reference count"
      end

      operation 1609484 "onlyOwner"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! returns wether or not we're the only owner"
      end

      operation 1609612 "SharedBuffer"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 1609740 "~SharedBuffer"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 1609868 "SharedBuffer"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 554636 // SharedBuffer
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1609996 "operator ="
	private return_type class_ref 554636 // SharedBuffer
	nparams 1
	  param in name "" type class_ref 554636 // SharedBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1483020 "mRefs"
	private explicit_type "int32_t"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1483148 "mSize"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1483276 "mReserved"
	private explicit_type "uint32_t"
	multiplicity "[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 554892 "BasicHashtableImpl"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Implementation type.  Nothing to see here. "
      class 555020 "Bucket"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1467532 "COLLISION"
	  class_attribute const_attribute public explicit_type "uint32_t"
	  init_value "=  0x80000000UL"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1467660 "PRESENT"
	  class_attribute const_attribute public explicit_type "uint32_t"
	  init_value "=  0x40000000UL"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1467788 "HASH_MASK"
	  class_attribute const_attribute public explicit_type "uint32_t"
	  init_value "=  0x3fffffffUL"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1467916 "cookie"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1468044 "entry"
	  public explicit_type "char"
	  multiplicity "[0]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1561100 "BasicHashtableImpl"
	preserve_cpp_body_indent protected explicit_return_type ""
	nparams 4
	  param in name "entrySize" explicit_type "size_t"
	  param in name "hasTrivialDestructor" explicit_type "bool"
	  param in name "minimumInitialCapacity" explicit_type "size_t"
	  param in name "loadFactor" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)} :
        mBucketSize(entrySize + sizeof(Bucket)), mHasTrivialDestructor(hasTrivialDestructor),
        mLoadFactor(loadFactor), mSize(0),
        mFilledBuckets(0), mBuckets(NULL) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1561228 "BasicHashtableImpl"
	preserve_cpp_body_indent protected explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 554892 // BasicHashtableImpl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} :
        mBucketSize(other.mBucketSize), mHasTrivialDestructor(other.mHasTrivialDestructor),
        mCapacity(other.mCapacity), mLoadFactor(other.mLoadFactor),
        mSize(other.mSize), mFilledBuckets(other.mFilledBuckets),
        mBucketCount(other.mBucketCount), mBuckets(other.mBuckets) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1561356 "dispose"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1561484 "edit"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mBuckets && !SharedBuffer::bufferFromData(mBuckets)->onlyOwner()) {
            clone();
        }
    };
"
	
	
	
	
      end

      operation 1561612 "setTo"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 1
	  param in name "other" type class_ref 554892 // BasicHashtableImpl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1561740 "clear"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1561868 "next"
	preserve_cpp_body_indent const protected explicit_return_type "ssize_t"
	nparams 1
	  param in name "index" explicit_type "ssize_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1561996 "find"
	protected explicit_return_type "ssize_t"
	nparams 2
	  param in name "index" explicit_type "ssize_t"
	  param in name "hash" type class_ref 555148 // hash_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1562124 "add"
	protected explicit_return_type "size_t"
	nparams 1
	  param in name "hash" type class_ref 555148 // hash_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1562252 "removeAt"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1562380 "rehash"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 2
	  param in name "minimumCapacity" explicit_type "size_t"
	  param in name "loadFactor" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1468172 "mBucketSize"
	const_attribute protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of bytes per bucket including the entry"
      end

      attribute 1468300 "mHasTrivialDestructor"
	const_attribute protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true if the entry type does not require destruction"
      end

      attribute 1468428 "mCapacity"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of buckets that can be filled before exceeding load factor"
      end

      attribute 1468556 "mLoadFactor"
	protected explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " load factor"
      end

      attribute 1468684 "mSize"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of elements actually in the table"
      end

      attribute 1468812 "mFilledBuckets"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of buckets for which collision or present is true"
      end

      attribute 1468940 "mBucketCount"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of slots in the mBuckets array"
      end

      attribute 1469068 "mBuckets"
	protected explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " array of buckets, as a SharedBuffer"
      end

      operation 1562508 "bucketAt"
	cpp_inline protected return_type class_ref 555020 // Bucket
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1562636 "bucketAt"
	cpp_inline protected return_type class_ref 555020 // Bucket
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1562764 "compareBucketKey"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "bucket" type class_ref 555020 // Bucket
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1562892 "initializeBucketEntry"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "bucket" type class_ref 555020 // Bucket
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1563020 "destroyBucketEntry"
	abstract const cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "bucket" type class_ref 555020 // Bucket
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1563148 "clone"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1563276 "allocateBuckets"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Allocates a bucket array as a SharedBuffer."
      end

      operation 1563404 "releaseBuckets"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Releases a bucket array's associated SharedBuffer."
      end

      operation 1563532 "destroyBuckets"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Destroys the contents of buckets (invokes destroyBucketEntry for each
 populated bucket if needed)."
      end

      operation 1563660 "copyBuckets"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Copies the content of buckets (copies the cookie and invokes copyBucketEntry
 for each populated bucket if needed)."
      end

      operation 1563788 "determineCapacity"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "minimumCapacity" explicit_type "size_t"
	  param in name "loadFactor" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Determines the appropriate size of a bucket array to store a certain minimum
 number of entries and returns its effective capacity."
      end

      operation 1563916 "trimHash"
	class_operation cpp_inline private return_type class_ref 555148 // hash_t
	nparams 1
	  param in name "hash" type class_ref 555148 // hash_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return (hash & Bucket::HASH_MASK) ^ (hash >> 30);
    };
"
	
	
	
	
	comment " Trim a hash code to 30 bits to match what we store in the bucket's cookie."
      end

      operation 1564044 "chainStart"
	class_operation cpp_inline private explicit_return_type "size_t"
	nparams 2
	  param in name "hash" type class_ref 555148 // hash_t
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return hash % count;
    };
"
	
	
	
	
	comment " Returns the index of the first bucket that is in the collision chain
 for the specified hash code, given the total number of buckets.
 (Primary hash)"
      end

      operation 1564172 "chainIncrement"
	class_operation cpp_inline private explicit_return_type "size_t"
	nparams 2
	  param in name "hash" type class_ref 555148 // hash_t
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return ((hash >> 7) | (hash << 25)) % (count - 1) + 1;
    };
"
	
	
	
	
	comment " Returns the increment to add to a bucket index to seek to the next bucket
 in the collision chain for the specified hash code, given the total number of buckets.
 (Secondary hash)"
      end

      operation 1564300 "chainSeek"
	class_operation cpp_inline private explicit_return_type "size_t"
	nparams 3
	  param in name "index" explicit_type "size_t"
	  param in name "increment" explicit_type "size_t"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return (index + increment) % count;
    };
"
	
	
	
	
	comment " Returns the index of the next bucket that is in the collision chain
 that is defined by the specified increment, given the total number of buckets."
      end
    end

    class 555148 "hash_t"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------

 * Hash codes."
    end

    class 555276 "BasicHashtable"
      visibility package 
      nformals 2
      formal name "TKey" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "TEntry" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * A BasicHashtable stores entries that are indexed by hash code in place
 * within an array.  The basic operations are finding entries by key,
 * adding new entries and removing existing entries.
 *
 * This class provides a very limited set of operations with simple semantics.
 * It is intended to be used as a building block to construct more complex
 * and interesting data structures such as HashMap.  Think very hard before
 * adding anything extra to BasicHashtable, it probably belongs at a
 * higher level of abstraction.
 *
 * TKey: The key type.
 * TEntry: The entry type which is what is actually stored in the array.
 *
 * TKey must support the following contract:
 *     bool operator==(const TKey& other) const;  // return true if equal
 *     bool operator!=(const TKey& other) const;  // return true if unequal
 *
 * TEntry must support the following contract:
 *     const TKey& getKey() const;  // get the key from the entry
 *
 * This class supports storing entries with duplicate keys.  Of course, it can't
 * tell them apart during removal so only the first entry will be removed.
 * We do this because it means that operations like add() can't fail."
      classrelation 1170316 // <generalisation>
	relation 1170316 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 1170316 // <generalisation>
	  b parent class_ref 554892 // BasicHashtableImpl
      end

      operation 1564428 "BasicHashtable"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "minimumInitialCapacity" explicit_type "size_t"
	    defaultvalue "0"
	  param in name "loadFactor" explicit_type "float"
	    defaultvalue "0.75f"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)} :
        BasicHashtableImpl(sizeof(TEntry), traits<TEntry>::has_trivial_dtor,
                minimumInitialCapacity, loadFactor) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Creates a hashtable with the specified minimum initial capacity.
     * The underlying array will be created when the first entry is added.
     *
     * minimumInitialCapacity: The minimum initial capacity for the hashtable.
     *     Default is 0.
     * loadFactor: The desired load factor for the hashtable, between 0 and 1.
     *     Default is 0.75."
      end

      operation 1564556 "BasicHashtable"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 555276 // BasicHashtable
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} :
        BasicHashtableImpl(other) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Copies a hashtable.
     * The underlying storage is shared copy-on-write."
      end

      operation 1564684 "~BasicHashtable"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Clears and destroys the hashtable."
      end

      operation 1564812 "operator ="
	cpp_inline public return_type class_ref 555276 // BasicHashtable
	nparams 1
	  param in name "other" type class_ref 555276 // BasicHashtable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        setTo(other);
        return *this;
    };
"
	
	
	
	
	comment " Making this hashtable a copy of the other hashtable.
     * The underlying storage is shared copy-on-write.
     *
     * other: The hashtable to copy."
      end

      operation 1564940 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mSize;
    };
"
	
	
	
	
	comment " Returns the number of entries in the hashtable."
      end

      operation 1565068 "capacity"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mCapacity;
    };
"
	
	
	
	
	comment " Returns the capacity of the hashtable, which is the number of elements that can
     * added to the hashtable without requiring it to be grown."
      end

      operation 1565196 "bucketCount"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mBucketCount;
    };
"
	
	
	
	
	comment " Returns the number of buckets that the hashtable has, which is the size of its
     * underlying array."
      end

      operation 1565324 "loadFactor"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mLoadFactor;
    };
"
	
	
	
	
	comment " Returns the load factor of the hashtable. "
      end

      operation 1565452 "entryAt"
	const cpp_inline public explicit_return_type "TEntry"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return entryFor(bucketAt(mBuckets, index));
    };
"
	
	
	
	
	comment " Returns a const reference to the entry at the specified index.
     *
     * index:   The index of the entry to retrieve.  Must be a valid index within
     *          the bounds of the hashtable."
      end

      operation 1565580 "editEntryAt"
	cpp_inline public explicit_return_type "TEntry"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        edit();
        return entryFor(bucketAt(mBuckets, index));
    };
"
	
	
	
	
	comment " Returns a non-const reference to the entry at the specified index.
     *
     * index: The index of the entry to edit.  Must be a valid index within
     *        the bounds of the hashtable."
      end

      operation 1565708 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        BasicHashtableImpl::clear();
    };
"
	
	
	
	
	comment " Clears the hashtable.
     * All entries in the hashtable are destroyed immediately.
     * If you need to do something special with the entries in the hashtable then iterate
     * over them and do what you need before clearing the hashtable."
      end

      operation 1565836 "next"
	const cpp_inline public explicit_return_type "ssize_t"
	nparams 1
	  param in name "index" explicit_type "ssize_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return BasicHashtableImpl::next(index);
    };
"
	
	
	
	
	comment " Returns the index of the next entry in the hashtable given the index of a previous entry.
     * If the given index is -1, then returns the index of the first entry in the hashtable,
     * if there is one, or -1 otherwise.
     * If the given index is not -1, then returns the index of the next entry in the hashtable,
     * in strictly increasing order, or -1 if there are none left.
     *
     * index:   The index of the previous entry that was iterated, or -1 to begin
     *          iteration at the beginning of the hashtable."
      end

      operation 1565964 "find"
	const cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param in name "index" explicit_type "ssize_t"
	  param in name "hash" type class_ref 555148 // hash_t
	  param in name "key" explicit_type "TKey"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return BasicHashtableImpl::find(index, hash, &key);
    };
"
	
	
	
	
	comment " Finds the index of an entry with the specified key.
     * If the given index is -1, then returns the index of the first matching entry,
     * otherwise returns the index of the next matching entry.
     * If the hashtable contains multiple entries with keys that match the requested
     * key, then the sequence of entries returned is arbitrary.
     * Returns -1 if no entry was found.
     *
     * index:   The index of the previous entry with the specified key, or -1 to
     *          find the first matching entry.
     * hash:    The hashcode of the key.
     * key:     The key."
      end

      operation 1566092 "add"
	cpp_inline public explicit_return_type "size_t"
	nparams 2
	  param in name "hash" type class_ref 555148 // hash_t
	  param in name "entry" explicit_type "TEntry"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return BasicHashtableImpl::add(hash, &entry);
    };
"
	
	
	
	
	comment " Adds the entry to the hashtable.
     * Returns the index of the newly added entry.
     * If an entry with the same key already exists, then a duplicate entry is added.
     * If the entry will not fit, then the hashtable's capacity is increased and
     * its contents are rehashed.  See rehash().
     *
     * hash:    The hashcode of the key.
     * entry:   The entry to add."
      end

      operation 1566220 "removeAt"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        BasicHashtableImpl::removeAt(index);
    };
"
	
	
	
	
	comment " Removes the entry with the specified index from the hashtable.
     * The entry is destroyed immediately.
     * The index must be valid.
     *
     * The hashtable is not compacted after an item is removed, so it is legal
     * to continue iterating over the hashtable using next() or find().
     *
     * index:   The index of the entry to remove.  Must be a valid index within the
     *          bounds of the hashtable, and it must refer to an existing entry."
      end

      operation 1566348 "rehash"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "minimumCapacity" explicit_type "size_t"
	  param in name "loadFactor" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        BasicHashtableImpl::rehash(minimumCapacity, loadFactor);
    };
"
	
	
	
	
	comment " Rehashes the contents of the hashtable.
     * Grows the hashtable to at least the specified minimum capacity or the
     * current number of elements, whichever is larger.
     *
     * Rehashing causes all entries to be copied and the entry indices may change.
     * Although the hash codes are cached by the hashtable, rehashing can be an
     * expensive operation and should be avoided unless the hashtable's size
     * needs to be changed.
     *
     * Rehashing is the only way to change the capacity or load factor of the
     * hashtable once it has been created.  It can be used to compact the
     * hashtable by choosing a minimum capacity that is smaller than the current
     * capacity (such as 0).
     *
     * minimumCapacity: The desired minimum capacity after rehashing.
     * loadFactor: The desired load factor after rehashing."
      end

      operation 1566476 "entryFor"
	class_operation cpp_inline protected explicit_return_type "TEntry"
	nparams 1
	  param in name "bucket" explicit_type "Bucket"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return reinterpret_cast<const TEntry&>(bucket.entry);
    };
"
	
	
	
	
      end

      operation 1566604 "entryFor"
	class_operation cpp_inline protected explicit_return_type "TEntry"
	nparams 1
	  param inout name "bucket" explicit_type "Bucket"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return reinterpret_cast<TEntry&>(bucket.entry);
    };
"
	
	
	
	
      end

      operation 1566732 "compareBucketKey"
	cpp_virtual protected explicit_return_type "bool"
	nparams 1
	  param in name "bucket" explicit_type "Bucket"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1566860 "initializeBucketEntry"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "bucket" explicit_type "Bucket"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1566988 "destroyBucketEntry"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param inout name "bucket" explicit_type "Bucket"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 1170444 // <dependency>
	relation 1170444 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 1170444 // <dependency>
	  b parent class_ref 555404 // BasicHashtableTest
      end

      operation 1567116 "cookieAt"
	const cpp_inline private explicit_return_type "uint32_t"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return bucketAt(mBuckets, index).cookie;
    };
"
	
	
	
	
      end
    end

    class 555532 "BlobCache"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A BlobCache is an in-memory cache for binary key/value pairs.  A BlobCache
 does NOT provide any thread-safety guarantees.

 The cache contents can be serialized to an in-memory buffer or mmap'd file
 and then reloaded in a subsequent execution of the program.  This
 serialization is non-portable and the data should only be used by the device
 that generated it."
      classrelation 1170572 // <generalisation>
	relation 1170572 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1170572 // <generalisation>
	  b parent class_ref 140044 // RefBase
      end

      classrelation 1170700 // <generalisation>
	relation 1170700 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1170700 // <generalisation>
	  b parent class_ref 506892 // Flattenable
      end

      operation 1569676 "BlobCache"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "maxKeySize" explicit_type "size_t"
	  param in name "maxValueSize" explicit_type "size_t"
	  param in name "maxTotalSize" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}:
        mMaxKeySize(maxKeySize),
        mMaxValueSize(maxValueSize),
        mMaxTotalSize(maxTotalSize),
        mTotalSize(0) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Create an empty blob cache. The blob cache will cache key/value pairs
 with key and value sizes less than or equal to maxKeySize and
 maxValueSize, respectively. The total combined size of ALL cache entries
 (key sizes plus value sizes) will not exceed maxTotalSize."
      end

      operation 1569804 "set"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "key" explicit_type "void"
	  param in name "keySize" explicit_type "size_t"
	  param in name "value" explicit_type "void"
	  param in name "valueSize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, const ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " set inserts a new binary value into the cache and associates it with the
 given binary key.  If the key or value are too large for the cache then
 the cache remains unchanged.  This includes the case where a different
 value was previously associated with the given key - the old value will
 remain in the cache.  If the given key and value are small enough to be
 put in the cache (based on the maxKeySize, maxValueSize, and maxTotalSize
 values specified to the BlobCache constructor), then the key/value pair
 will be in the cache after set returns.  Note, however, that a subsequent
 call to set may evict old key/value pairs from the cache.

 Preconditions:
   key != NULL
   0 < keySize
   value != NULL
   0 < valueSize"
      end

      operation 1569932 "get"
	preserve_cpp_body_indent public explicit_return_type "size_t"
	nparams 4
	  param in name "key" explicit_type "void"
	  param in name "keySize" explicit_type "size_t"
	  param inout name "value" explicit_type "void"
	  param in name "valueSize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " get retrieves from the cache the binary value associated with a given
 binary key.  If the key is present in the cache then the length of the
 binary value associated with that key is returned.  If the value argument
 is non-NULL and the size of the cached value is less than valueSize bytes
 then the cached value is copied into the buffer pointed to by the value
 argument.  If the key is not present in the cache then 0 is returned and
 the buffer pointed to by the value argument is not modified.

 Note that when calling get multiple times with the same key, the later
 calls may fail, returning 0, even if earlier calls succeeded.  The return
 value must be checked for each call.

 Preconditions:
   key != NULL
   0 < keySize
   0 <= valueSize"
      end

      operation 1570060 "getFlattenedSize"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getFlattenedSize returns the number of bytes needed to store the entire
 serialized cache."
      end

      operation 1570188 "getFdCount"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " getFdCount returns the number of file descriptors that will result from
 flattening the cache.  This will always return 0 so as to allow the
 flattened cache to be saved to disk and then later restored."
      end

      operation 1570316 "flatten"
	preserve_cpp_body_indent const cpp_virtual public return_type class_ref 128268 // status_t
	nparams 4
	  param inout name "buffer" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param in name "fds" explicit_type "int"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}[]${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}[], ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " flatten serializes the current contents of the cache into the memory
 pointed to by 'buffer'.  The serialized cache contents can later be
 loaded into a BlobCache object using the unflatten method.  The contents
 of the BlobCache object will not be modified.

 Preconditions:
   size >= this.getFlattenedSize()
   count == 0"
      end

      operation 1570444 "unflatten"
	preserve_cpp_body_indent cpp_virtual public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "buffer" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param in name "fds" explicit_type "int"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}[]${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}[], ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " unflatten replaces the contents of the cache with the serialized cache
 contents in the memory pointed to by 'buffer'.  The previous contents of
 the BlobCache will be evicted from the cache.  If an error occurs while
 unflattening the serialized cache contents then the BlobCache will be
 left in an empty state.

 Preconditions:
   count == 0"
      end

      operation 1570572 "BlobCache"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 555532 // BlobCache
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Copying is disallowed."
      end

      operation 1570700 "operator ="
	private explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 555532 // BlobCache
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1570828 "blob_random"
	preserve_cpp_body_indent private explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " A random function helper to get around MinGW not having nrand48()"
      end

      operation 1570956 "clean"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " clean evicts a randomly chosen set of entries from the cache such that
 the total size of all remaining entries is less than mMaxTotalSize/2."
      end

      operation 1571084 "isCleanable"
	preserve_cpp_body_indent const private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " isCleanable returns true if the cache is full enough for the clean method
 to have some effect, and false otherwise."
      end

      class 555660 "Blob"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1170828 // <generalisation>
	  relation 1170828 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 1170828 // <generalisation>
	    b parent class_ref 140044 // RefBase
	end

	operation 1571212 "Blob"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 3
	    param in name "data" explicit_type "void"
	    param in name "size" explicit_type "size_t"
	    param in name "copyData" explicit_type "bool"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}:
        mData(copyData ? malloc(size) : data),
        mSize(size),
        mOwnsData(copyData) ${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1571340 "~Blob"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1571468 "operator <"
	  preserve_cpp_body_indent const public explicit_return_type "bool"
	  nparams 1
	    param in name "rhs" type class_ref 555660 // Blob
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1571596 "getData"
	  preserve_cpp_body_indent const public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1571724 "getSize"
	  preserve_cpp_body_indent const public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1571852 "Blob"
	  private explicit_return_type ""
	  nparams 1
	    param in name "" type class_ref 555660 // Blob
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	  comment " Copying is not allowed."
	end

	operation 1571980 "operator ="
	  private explicit_return_type "void"
	  nparams 1
	    param in name "" type class_ref 555660 // Blob
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	attribute 1469324 "mData"
	  const_attribute private explicit_type "void"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1469452 "mSize"
	  private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1469580 "mOwnsData"
	  private explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 555788 "CacheEntry"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1572108 "CacheEntry"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1572236 "CacheEntry"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 2
	    param in name "key" explicit_type "sp<Blob>"
	    param in name "value" explicit_type "sp<Blob>"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}:
        mKey(key),
        mValue(value) ${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1572364 "CacheEntry"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 1
	    param in name "ce" type class_ref 555788 // CacheEntry
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}:
        mKey(ce.mKey),
        mValue(ce.mValue) ${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1572492 "operator <"
	  preserve_cpp_body_indent const public explicit_return_type "bool"
	  nparams 1
	    param in name "rhs" type class_ref 555788 // CacheEntry
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1572620 "operator ="
	  preserve_cpp_body_indent public return_type class_ref 555788 // CacheEntry
	  nparams 1
	    param in name "rhs" type class_ref 555788 // CacheEntry
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}const ${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1572748 "getKey"
	  preserve_cpp_body_indent const public explicit_return_type "sp<Blob>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1572876 "getValue"
	  preserve_cpp_body_indent const public explicit_return_type "sp<Blob>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1573004 "setValue"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 1
	    param in name "value" explicit_type "sp<Blob>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	classrelation 1170956 // mKey (<directional composition>)
	  relation 1170956 *-->
	    stereotype "sp"
	    a role_name "mKey" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 1170956 // mKey (<directional composition>)
	    b parent class_ref 555660 // Blob
	end

	classrelation 1171084 // mValue (<directional composition>)
	  relation 1171084 *-->
	    stereotype "sp"
	    a role_name "mValue" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 1171084 // mValue (<directional composition>)
	    b parent class_ref 555660 // Blob
	end
      end

      class 555916 "Header"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1469708 "mMagicNumber"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1469836 "mBlobCacheVersion"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1469964 "mDeviceVersion"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1470092 "mNumEntries"
	  public explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 556044 "EntryHeader"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1470220 "mKeySize"
	  public explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1470348 "mValueSize"
	  public explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1470476 "mData"
	  public explicit_type "uint8_t"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      attribute 1470604 "mMaxKeySize"
	const_attribute private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1470732 "mMaxValueSize"
	const_attribute private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1470860 "mMaxTotalSize"
	const_attribute private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1470988 "mTotalSize"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1471116 "mRandState"
	private explicit_type "ushort"
	multiplicity "[3]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1171212 // mCacheEntries (<directional composition>)
	relation 1171212 *-->
	  stereotype "SortedVector"
	  a role_name "mCacheEntries" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1171212 // mCacheEntries (<directional composition>)
	  b parent class_ref 555788 // CacheEntry
      end
    end

    class 556172 "BufferedTextOutput"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      classrelation 1171340 // <generalisation>
	relation 1171340 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1171340 // <generalisation>
	  b parent class_ref 507532 // TextOutput
      end

      class 556300 "anonymous304"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1471244 "MULTITHREADED"
	  public type class_ref 556300 // anonymous304
	  init_value " 0x0001
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1573132 "BufferedTextOutput"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${class}::${name}${(}${t0} ${p0}${)}
    : mFlags(flags)
    , mSeq(android_atomic_inc(&gSequence))
    , mIndex(allocBufferIndex())
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1573260 "~BufferedTextOutput"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1573388 "print"
	preserve_cpp_body_indent cpp_virtual public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "txt" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1573516 "moveIndent"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1573644 "pushBundle"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1573772 "popBundle"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1573900 "writeLines"
	abstract cpp_virtual protected return_type class_ref 128268 // status_t
	nparams 2
	  param in name "vec" explicit_type "iovec"
	  param in name "N" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      extra_member 138764 "BufferState"
	
	stereotype "struct"
	cpp "    struct BufferState;
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 138892 "ThreadState"
	
	stereotype "struct"
	cpp "    struct ThreadState;
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 1574028 "getThreadState"
	class_operation preserve_cpp_body_indent private explicit_return_type "ThreadState"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1574156 "threadDestructor"
	class_operation preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param inout name "st" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1574284 "getBuffer"
	preserve_cpp_body_indent const private explicit_return_type "BufferState"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1471372 "mFlags"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1471500 "mSeq"
	const_attribute private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1471628 "mIndex"
	const_attribute private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1171468 // mLock (<directional composition>)
	relation 1171468 *-->
	  a role_name "mLock" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1171468 // mLock (<directional composition>)
	  b parent class_ref 133132 // Mutex
      end

      attribute 1471756 "mGlobalState"
	private explicit_type "BufferState"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 556428 "CallStack"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      class 556556 "anonymous305"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1471884 "MAX_DEPTH"
	  public type class_ref 556556 // anonymous305
	  init_value " 31
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1574412 "CallStack"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "//***************************************************************************

${inline}${class}::${name}${(}${)} :
        mCount(0) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1574540 "CallStack"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "rhs" type class_ref 556428 // CallStack
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} :
        mCount(rhs.mCount) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1574668 "~CallStack"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1574796 "operator ="
	preserve_cpp_body_indent public return_type class_ref 556428 // CallStack
	nparams 1
	  param in name "rhs" type class_ref 556428 // CallStack
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1574924 "operator =="
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 556428 // CallStack
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1575052 "operator !="
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 556428 // CallStack
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1575180 "operator <"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 556428 // CallStack
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1575308 "operator >="
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 556428 // CallStack
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1575436 "operator >"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 556428 // CallStack
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1575564 "operator <="
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 556428 // CallStack
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1575692 "operator []"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1575820 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1575948 "update"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "ignoreDepth" explicit_type "int32_t"
	    defaultvalue "1"
	  param in name "maxDepth" explicit_type "int32_t"
	    defaultvalue "MAX_DEPTH"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1576076 "dump"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param in name "prefix" explicit_type "char"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Dump a stack trace to the log"
      end

      operation 1576204 "toString"
	preserve_cpp_body_indent const public return_type class_ref 131340 // String8
	nparams 1
	  param in name "prefix" explicit_type "char"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a string (possibly very long) containing the complete stack trace"
      end

      operation 1576332 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCount; };
"
	
	
	
	
      end

      attribute 1472012 "mCount"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1472140 "mStack"
	private explicit_type "backtrace_frame_t"
	multiplicity "[MAX_DEPTH]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 556812 "CompileTimeAssert<true>"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 556940 "CompileTimeIfElse<true,LHS,RHS>"
      visibility package stereotype "struct"
      nformals 2
      formal name "LHS" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "RHS" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 557068 "TYPE"
	visibility package stereotype "typedef" explicit_base_type "LHS"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 557196 "CompileTimeIfElse<false,LHS,RHS>"
      visibility package stereotype "struct"
      nformals 2
      formal name "LHS" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "RHS" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 557324 "TYPE"
	visibility package stereotype "typedef" explicit_base_type "RHS"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 557452 "debugPrintFunc"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(void* cookie, const char* txt);
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 557836 "Entry"
      visibility package stereotype "struct"
      nformals 2
      formal name "EntryKey" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "EntryValue" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 441100 // LightRefBase
        rank 0 explicit_value "Entry<EntryKey, EntryValue>"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " class OnEntryRemoved"
      classrelation 1171852 // <realization>
	relation 1171852 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1171852 // <realization>
	  b parent class_ref 441100 // LightRefBase
      end

      operation 1581196 "Entry"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "e" type class_ref 557836 // Entry
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} :
            key(e.key), value(e.value),
            parent(e.parent), child(e.child) { };
"
	
	
	
	
      end

      operation 1581324 "Entry"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "key" explicit_type "EntryKey"
	  param in name "value" explicit_type "EntryValue"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw} :
            key(key), value(value) { };
"
	
	
	
	
      end

      attribute 1477004 "key"
	public explicit_type "EntryKey"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1477132 "value"
	public explicit_type "EntryValue"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1171980 // parent (<directional composition>)
	relation 1171980 *-->
	  stereotype "sp"
	  a role_name "parent" public
	    comment " next older entry"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1171980 // parent (<directional composition>)
	  b parent class_ref 557836 // Entry
      end

      classrelation 1172108 // child (<directional composition>)
	relation 1172108 *-->
	  stereotype "sp"
	  a role_name "child" public
	    comment " next younger entry"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1172108 // child (<directional composition>)
	  b parent class_ref 557836 // Entry
      end
    end

    class 558348 "key_value_pair_t"
      visibility package stereotype "struct"
      nformals 2
      formal name "KEY" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "VALUE" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------

 * a key/value pair"
      class 567180 "key_t"
	visibility package stereotype "typedef" explicit_base_type "KEY"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 567308 "value_t"
	visibility package stereotype "typedef" explicit_base_type "VALUE"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 1493260 "key"
	public explicit_type "KEY"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1493388 "value"
	public explicit_type "VALUE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1642252 "key_value_pair_t"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 1642380 "key_value_pair_t"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "o" type class_ref 558348 // key_value_pair_t
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : key(o.key), value(o.value) { };
"
	
	
	
	
      end

      operation 1642508 "key_value_pair_t"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "k" explicit_type "KEY"
	  param in name "v" explicit_type "VALUE"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw} : key(k), value(v)  { };
"
	
	
	
	
      end

      operation 1642636 "key_value_pair_t"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "k" explicit_type "KEY"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : key(k) { };
"
	
	
	
	
      end

      operation 1642764 "operator <"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "o" type class_ref 558348 // key_value_pair_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return strictly_order_type(key, o.key);
    };
"
	
	
	
	
      end

      operation 1642892 "getKey"
	const cpp_inline public explicit_return_type "KEY"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return key;
    };
"
	
	
	
	
      end

      operation 1643020 "getValue"
	const cpp_inline public explicit_return_type "VALUE"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return value;
    };
"
	
	
	
	
      end
    end

    class 558476 "trait_trivial_move<KeyedVector<KEY,VALUE> >"
      visibility package stereotype "struct"
      nformals 2
      formal name "KEY" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "VALUE" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " KeyedVector<KEY, VALUE> can be trivially moved using memcpy() because its
 underlying SortedVector can be trivially moved."
      class 558604 "anonymous308"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1478284 "value"
	  public type class_ref 558604 // anonymous308
	  init_value " trait_trivial_move<SortedVector< key_value_pair_t<KEY"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1478412 "VALUE"
	  public type class_ref 558604 // anonymous308
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 560268 "LogIfSlow"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * A very simple utility that yells in the log when an operation takes too long."
      operation 1592204 "LogIfSlow"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 4
	  param in name "tag" explicit_type "char"
	  param in name "priority" explicit_type "android_LogPriority"
	  param in name "timeoutMillis" explicit_type "int"
	  param in name "message" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} * ${p3}${)} :
        mTag(tag), mPriority(priority), mTimeoutMillis(timeoutMillis), mMessage(message),
        mStart(systemTime(SYSTEM_TIME_BOOTTIME)) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1592332 "~LogIfSlow"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      attribute 1479308 "mTag"
	const_attribute private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1479436 "mPriority"
	const_attribute private explicit_type "android_LogPriority"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1479564 "mTimeoutMillis"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1479692 "mMessage"
	const_attribute private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1479820 "mStart"
	const_attribute private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 560396 "sysprop_change_callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(void);
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 560780 "AutoMutex"
      visibility package stereotype "typedef" base_type class_ref 560652 // Autolock
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------

 * Automatic mutex.  Declare one of these at the top of a function.
 * When the function returns, it will go out of scope, and release the
 * mutex."
      classrelation 1173772 // <dependency>
	relation 1173772 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 1173772 // <dependency>
	  b parent class_ref 560652 // Autolock
      end
    end

    class 561036 "ReferenceConverterBase"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1596684 "getReferenceTypeSize"
	abstract const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1596812 "getReferenceBase"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1596940 "~ReferenceConverterBase"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end
    end

    class 561548 "ReferenceMover"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------
 this class just serves as a namespace so TYPE::moveReferences can stay
 private."
      class 561932 "StrongReferenceCast"
	visibility package stereotype "struct"
	nformals 1
	formal name "TYPE" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1175308 // <generalisation>
	  relation 1175308 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 1175308 // <generalisation>
	    b parent class_ref 561036 // ReferenceConverterBase
	end

	operation 1605004 "getReferenceTypeSize"
	  const cpp_virtual cpp_inline public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return sizeof( sp<TYPE> ); };
"
	  
	  
	  
	  
	end

	operation 1605132 "getReferenceBase"
	  const cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "p" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            sp<TYPE> const* sptr(reinterpret_cast<sp<TYPE> const*>(p));
            return static_cast<typename TYPE::basetype *>(sptr->get());
        };
"
	  
	  
	  
	  
	end
      end

      class 562060 "WeakReferenceCast"
	visibility package stereotype "struct"
	nformals 1
	formal name "TYPE" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1175436 // <generalisation>
	  relation 1175436 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 1175436 // <generalisation>
	    b parent class_ref 561036 // ReferenceConverterBase
	end

	operation 1605260 "getReferenceTypeSize"
	  const cpp_virtual cpp_inline public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return sizeof( wp<TYPE> ); };
"
	  
	  
	  
	  
	end

	operation 1605388 "getReferenceBase"
	  const cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "p" explicit_type "void"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            wp<TYPE> const* sptr(reinterpret_cast<wp<TYPE> const*>(p));
            return static_cast<typename TYPE::basetype *>(sptr->unsafe_get());
        };
"
	  
	  
	  
	  
	end
      end

      operation 1605516 "move_references"
	stereotype "template"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "d" explicit_type "sp<TYPE>"
	  param in name "s" explicit_type "sp<TYPE>"
	  param in name "n" explicit_type "size_t"
	cpp_decl "    ${comment}template<typename TYPE>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        memmove(d, s, n*sizeof(sp<TYPE>));
        StrongReferenceCast<TYPE> caster;
        TYPE::moveReferences(d, s, n, caster);
    };
"
	
	
	
	
      end

      operation 1605644 "move_references"
	stereotype "template"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "d" explicit_type "wp<TYPE>"
	  param in name "s" explicit_type "wp<TYPE>"
	  param in name "n" explicit_type "size_t"
	cpp_decl "    ${comment}template<typename TYPE>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        memmove(d, s, n*sizeof(wp<TYPE>));
        WeakReferenceCast<TYPE> caster;
        TYPE::moveReferences(d, s, n, caster);
    };
"
	
	
	
	
      end
    end

    class 562188 "RWLock"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Simple mutex class.  The implementation is system-dependent.
 *
 * The mutex must be unlocked by the thread that locked it.  They are not
 * recursive, i.e. the same thread can't lock it multiple times."
      class 562316 "anonymous312"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1482508 "PRIVATE"
	  public type class_ref 562316 // anonymous312
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1482636 "SHARED"
	  public type class_ref 562316 // anonymous312
	  init_value " 1
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1605772 "RWLock"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1605900 "RWLock"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1606028 "RWLock"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "name" explicit_type "char"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1606156 "~RWLock"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1606284 "readLock"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1606412 "tryReadLock"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1606540 "writeLock"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1606668 "tryWriteLock"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1606796 "unlock"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      class 562444 "AutoRLock"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1606924 "AutoRLock"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "rwlock" type class_ref 562188 // RWLock
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw} : mLock(rwlock)  { mLock.readLock(); };
"
	  
	  
	  
	  
	end

	operation 1607052 "~AutoRLock"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { mLock.unlock(); };
"
	  
	  
	  
	  
	end

	classrelation 1175564 // mLock (<unidirectional association>)
	  relation 1175564 --->
	    a role_name "mLock" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	      classrelation_ref 1175564 // mLock (<unidirectional association>)
	    b parent class_ref 562188 // RWLock
	end
      end

      class 562572 "AutoWLock"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1607180 "AutoWLock"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "rwlock" type class_ref 562188 // RWLock
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw} : mLock(rwlock)  { mLock.writeLock(); };
"
	  
	  
	  
	  
	end

	operation 1607308 "~AutoWLock"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { mLock.unlock(); };
"
	  
	  
	  
	  
	end

	classrelation 1175692 // mLock (<unidirectional association>)
	  relation 1175692 --->
	    a role_name "mLock" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	      classrelation_ref 1175692 // mLock (<unidirectional association>)
	    b parent class_ref 562188 // RWLock
	end
      end

      operation 1607436 "RWLock"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 562188 // RWLock
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " A RWLock cannot be copied"
      end

      operation 1607564 "operator ="
	private return_type class_ref 562188 // RWLock
	nparams 1
	  param in name "" type class_ref 562188 // RWLock
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1482764 "mRWLock"
	private explicit_type "pthread_rwlock_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 562828 "SortedVectorImpl"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1178636 // <generalisation>
	relation 1178636 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1178636 // <generalisation>
	  b parent class_ref 443532 // VectorImpl
      end

      operation 1660044 "SortedVectorImpl"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "itemSize" explicit_type "size_t"
	  param in name "flags" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "//***************************************************************************

${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}
    : VectorImpl(itemSize, flags)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1660172 "SortedVectorImpl"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "rhs" type class_ref 443532 // VectorImpl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
: VectorImpl(rhs)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1660300 "~SortedVectorImpl"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1660428 "operator ="
	preserve_cpp_body_indent public return_type class_ref 562828 // SortedVectorImpl
	nparams 1
	  param in name "rhs" type class_ref 562828 // SortedVectorImpl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1660556 "indexOf"
	preserve_cpp_body_indent const public explicit_return_type "ssize_t"
	nparams 1
	  param in name "item" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! finds the index of an item"
      end

      operation 1660684 "orderOf"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 1
	  param in name "item" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! finds where this item should be inserted"
      end

      operation 1660812 "add"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 1
	  param in name "item" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! add an item in the right place (or replaces it if there is one)"
      end

      operation 1660940 "merge"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 1
	  param in name "vector" type class_ref 443532 // VectorImpl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! merges a vector into this one"
      end

      operation 1661068 "merge"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 1
	  param in name "vector" type class_ref 562828 // SortedVectorImpl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1661196 "remove"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 1
	  param in name "item" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "! removes an item"
      end

      operation 1661324 "do_compare"
	abstract const cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "lhs" explicit_type "void"
	  param in name "rhs" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 1661452 "reservedSortedVectorImpl1"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " take care of FBC..."
      end

      operation 1661580 "reservedSortedVectorImpl2"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1661708 "reservedSortedVectorImpl3"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1661836 "reservedSortedVectorImpl4"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1661964 "reservedSortedVectorImpl5"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1662092 "reservedSortedVectorImpl6"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1662220 "reservedSortedVectorImpl7"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1662348 "reservedSortedVectorImpl8"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1662476 "_indexOrderOf"
	preserve_cpp_body_indent const private explicit_return_type "ssize_t"
	nparams 2
	  param in name "item" explicit_type "void"
	  param inout name "order" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1662604 "add"
	private explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " these are made private, because they can't be used on a SortedVector
 (they don't have an implementation either)"
      end

      operation 1662732 "pop"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1662860 "push"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1662988 "push"
	private explicit_return_type "void"
	nparams 1
	  param in name "item" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1663116 "insertVectorAt"
	private explicit_return_type "ssize_t"
	nparams 2
	  param in name "vector" type class_ref 443532 // VectorImpl
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1663244 "appendVector"
	private explicit_return_type "ssize_t"
	nparams 1
	  param in name "vector" type class_ref 443532 // VectorImpl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1663372 "insertArrayAt"
	private explicit_return_type "ssize_t"
	nparams 3
	  param in name "array" explicit_type "void"
	  param in name "index" explicit_type "size_t"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1663500 "appendArray"
	private explicit_return_type "ssize_t"
	nparams 2
	  param in name "array" explicit_type "void"
	  param in name "length" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1663628 "insertAt"
	private explicit_return_type "ssize_t"
	nparams 2
	  param in name "where" explicit_type "size_t"
	  param in name "numItems" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1663756 "insertAt"
	private explicit_return_type "ssize_t"
	nparams 3
	  param in name "item" explicit_type "void"
	  param in name "where" explicit_type "size_t"
	  param in name "numItems" explicit_type "size_t"
	    defaultvalue "1"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1663884 "replaceAt"
	private explicit_return_type "ssize_t"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1664012 "replaceAt"
	private explicit_return_type "ssize_t"
	nparams 2
	  param in name "item" explicit_type "void"
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 563084 "trait_trivial_move<SortedVector<T> >"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " SortedVector<T> can be trivially moved using memcpy() because moving does not
 require any change to the underlying SharedBuffer contents or reference count."
      class 563212 "anonymous314"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1483404 "value"
	  public type class_ref 563212 // anonymous314
	  init_value " true "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 563340 "StopWatch"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      operation 1614092 "StopWatch"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "char"
	  param in name "clock" explicit_type "int"
	    defaultvalue "SYSTEM_TIME_MONOTONIC"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "//***************************************************************************

${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}
    :   mName(name), mClock(clock), mFlags(flags)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1614220 "~StopWatch"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1614348 "name"
	preserve_cpp_body_indent const public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1614476 "lap"
	preserve_cpp_body_indent public return_type class_ref 140172 // nsecs_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1614604 "elapsedTime"
	preserve_cpp_body_indent const public return_type class_ref 140172 // nsecs_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1614732 "reset"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1483532 "mName"
	const_attribute private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1483660 "mClock"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1483788 "mFlags"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 563468 "lap_t"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1176076 // soFar (<directional composition>)
	  relation 1176076 *-->
	    a role_name "soFar" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1176076 // soFar (<directional composition>)
	    b parent class_ref 140172 // nsecs_t
	end

	classrelation 1176204 // thisLap (<directional composition>)
	  relation 1176204 *-->
	    a role_name "thisLap" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1176204 // thisLap (<directional composition>)
	    b parent class_ref 140172 // nsecs_t
	end
      end

      classrelation 1176332 // mStartTime (<directional composition>)
	relation 1176332 *-->
	  a role_name "mStartTime" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1176332 // mStartTime (<directional composition>)
	  b parent class_ref 140172 // nsecs_t
      end

      classrelation 1176460 // mLaps (<directional composition>)
	relation 1176460 *-->
	  a role_name "mLaps" multiplicity "[8]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    classrelation_ref 1176460 // mLaps (<directional composition>)
	  b parent class_ref 563468 // lap_t
      end

      attribute 1483916 "mNumLaps"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 563852 "TextOutputManipFunc"
      visibility package stereotype "typedef" base_type class_ref 507532 // TextOutput
      cpp_decl "${comment}typedef ${type}& (* ${name})(TextOutput&);
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1176972 // <dependency>
	relation 1176972 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 1176972 // <dependency>
	  b parent class_ref 507532 // TextOutput
      end
    end

    class 563980 "TypeCode"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1634316 "TypeCode"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "code" explicit_type "uint32_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)} : mCode(code) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1634444 "~TypeCode"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1634572 "typeCode"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1484684 "mCode"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 564108 "HexDump"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1634700 "HexDump"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "buf" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param in name "bytesPerLine" explicit_type "size_t"
	    defaultvalue "16"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}
    : mBuffer(buf)
    , mSize(size)
    , mBytesPerLine(bytesPerLine)
    , mSingleLineCutoff(16)
    , mAlignment(4)
    , mCArrayStyle(false)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1634828 "~HexDump"
	preserve_cpp_body_indent cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1634956 "setBytesPerLine"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 564108 // HexDump
	nparams 1
	  param in name "bytesPerLine" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1635084 "setSingleLineCutoff"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 564108 // HexDump
	nparams 1
	  param in name "bytes" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1635212 "setAlignment"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 564108 // HexDump
	nparams 1
	  param in name "alignment" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1635340 "setCArrayStyle"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 564108 // HexDump
	nparams 1
	  param in name "enabled" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1635468 "buffer"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1635596 "size"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1635724 "bytesPerLine"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1635852 "singleLineCutoff"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1635980 "alignment"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1636108 "carrayStyle"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1484812 "mBuffer"
	const_attribute private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1484940 "mSize"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1485068 "mBytesPerLine"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1485196 "mSingleLineCutoff"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1485324 "mAlignment"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1485452 "mCArrayStyle"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 564364 "thread_func_t"
      visibility package stereotype "typedef" base_type class_ref 410636 // android_thread_func_t
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1177996 // <dependency>
	relation 1177996 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 1177996 // <dependency>
	  b parent class_ref 410636 // android_thread_func_t
      end
    end

    class 564748 "DurationTimer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Time the duration of something.
 *
 * Includes some timeval manipulation functions."
      operation 1637772 "DurationTimer"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1637900 "~DurationTimer"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1638028 "start"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Start the timer."
      end

      operation 1638156 "stop"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Stop the timer."
      end

      operation 1638284 "durationUsecs"
	const public explicit_return_type "long long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Get the duration in microseconds."
      end

      operation 1638412 "subtractTimevals"
	class_operation preserve_cpp_body_indent public explicit_return_type "long long"
	nparams 2
	  param in name "ptv1" explicit_type "timeval"
	  param in name "ptv2" explicit_type "timeval"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Subtract two timevals.  Returns the difference (ptv1-ptv2) in
// microseconds.
//static

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Subtract two timevals.  Returns the difference (ptv1-ptv2) in
 microseconds."
      end

      operation 1638540 "addToTimeval"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param inout name "ptv" explicit_type "timeval"
	  param in name "usec" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Add the specified amount of time to the timeval.
//static

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add the specified amount of time to the timeval."
      end

      attribute 1489804 "mStartWhen"
	private explicit_type "timeval"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1489932 "mStopWhen"
	private explicit_type "timeval"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 564876 "Tracer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1640844 "getEnabledTags"
	class_operation cpp_inline public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        initIfNeeded();
        return sEnabledTags;
    };
"
	
	
	
	
      end

      operation 1640972 "isTagEnabled"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "tag" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        initIfNeeded();
        return sEnabledTags & tag;
    };
"
	
	
	
	
      end

      operation 1641100 "traceCounter"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "tag" explicit_type "uint64_t"
	  param in name "name" explicit_type "char"
	  param in name "value" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        if (CC_UNLIKELY(isTagEnabled(tag))) {
            char buf[1024];
            snprintf(buf, 1024, \"C|%d|%s|%d\", getpid(), name, value);
            write(sTraceFD, buf, strlen(buf));
        }
    };
"
	
	
	
	
      end

      operation 1641228 "traceBegin"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "tag" explicit_type "uint64_t"
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if (CC_UNLIKELY(isTagEnabled(tag))) {
            char buf[1024];
            size_t len = snprintf(buf, 1024, \"B|%d|%s\", getpid(), name);
            write(sTraceFD, buf, len);
        }
    };
"
	
	
	
	
      end

      operation 1641356 "traceEnd"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "tag" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (CC_UNLIKELY(isTagEnabled(tag))) {
            char buf = 'E';
            write(sTraceFD, &buf, 1);
        }
    };
"
	
	
	
	
      end

      operation 1641484 "initIfNeeded"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (!android_atomic_acquire_load(&sIsReady)) {
            init();
        }
    };
"
	
	
	
	
      end

      operation 1641612 "changeCallback"
	class_operation preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1641740 "init"
	class_operation preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " init opens the trace marker file for writing and reads the
 atrace.tags.enableflags system property.  It does this only the first
 time it is run, using sMutex for synchronization."
      end

      operation 1641868 "loadSystemProperty"
	class_operation preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " retrieve the current value of the system property."
      end

      attribute 1490700 "sIsReady"
	class_attribute volatile private explicit_type "int32_t"
	init_value "= 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1490828 "sTraceFD"
	class_attribute private explicit_type "int"
	init_value "= -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1490956 "sEnabledTags"
	class_attribute private explicit_type "uint64_t"
	init_value "= ATRACE_TAG_NOT_READY"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1178380 // sMutex (<directional composition>)
	relation 1178380 *-->
	  a role_name "sMutex" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1178380 // sMutex (<directional composition>)
	  b parent class_ref 133132 // Mutex
      end
    end

    class 565004 "ScopedTrace"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1641996 "ScopedTrace"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "tag" explicit_type "uint64_t"
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${volatile}${throw} :
            mTag(tag) {
        Tracer::traceBegin(mTag, name);
    };
"
	
	
	
	
      end

      operation 1642124 "~ScopedTrace"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        Tracer::traceEnd(mTag);
    };
"
	
	
	
	
      end

      attribute 1491084 "mTag"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 565132 "trait_trivial_ctor"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------

 * Types traits"
      class 565260 "anonymous318"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1491212 "value"
	  public type class_ref 565260 // anonymous318
	  init_value " false "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 565388 "trait_trivial_dtor"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 565516 "anonymous319"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1491340 "value"
	  public type class_ref 565516 // anonymous319
	  init_value " false "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 565644 "trait_trivial_copy"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 565772 "anonymous320"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1491468 "value"
	  public type class_ref 565772 // anonymous320
	  init_value " false "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 565900 "trait_trivial_move"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 566028 "anonymous321"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1491596 "value"
	  public type class_ref 566028 // anonymous321
	  init_value " false "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 566156 "trait_pointer"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 566284 "anonymous322"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1491724 "value"
	  public type class_ref 566284 // anonymous322
	  init_value " false "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 566412 "trait_pointer<T*>"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 566540 "anonymous323"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1491852 "value"
	  public type class_ref 566540 // anonymous323
	  init_value " true "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 566668 "traits"
      visibility package stereotype "struct"
      nformals 1
      formal name "TYPE" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 566796 "anonymous324"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1491980 "is_pointer"
	  public type class_ref 566796 // anonymous324
	  init_value " trait_pointer<TYPE>::value"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1492108 "has_trivial_ctor"
	  public type class_ref 566796 // anonymous324
	  init_value " is_pointer || trait_trivial_ctor<TYPE>::value"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1492236 "has_trivial_dtor"
	  public type class_ref 566796 // anonymous324
	  init_value " is_pointer || trait_trivial_dtor<TYPE>::value"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1492364 "has_trivial_copy"
	  public type class_ref 566796 // anonymous324
	  init_value " is_pointer || trait_trivial_copy<TYPE>::value"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1492492 "has_trivial_move"
	  public type class_ref 566796 // anonymous324
	  init_value " is_pointer || trait_trivial_move<TYPE>::value
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 566924 "aggregate_traits"
      visibility package stereotype "struct"
      nformals 2
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "U" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 567052 "anonymous325"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1492620 "is_pointer"
	  public type class_ref 567052 // anonymous325
	  init_value " false"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1492748 "has_trivial_ctor"
	  public type class_ref 567052 // anonymous325
	  init_value " 
            traits<T>::has_trivial_ctor && traits<U>::has_trivial_ctor"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1492876 "has_trivial_dtor"
	  public type class_ref 567052 // anonymous325
	  init_value " 
            traits<T>::has_trivial_dtor && traits<U>::has_trivial_dtor"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1493004 "has_trivial_copy"
	  public type class_ref 567052 // anonymous325
	  init_value " 
            traits<T>::has_trivial_copy && traits<U>::has_trivial_copy"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1493132 "has_trivial_move"
	  public type class_ref 567052 // anonymous325
	  init_value " 
            traits<T>::has_trivial_move && traits<U>::has_trivial_move
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 567436 "trait_trivial_ctor<key_value_pair_t<K,V> >"
      visibility package stereotype "struct"
      nformals 2
      formal name "K" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 567564 "anonymous326"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1493516 "value"
	  public type class_ref 567564 // anonymous326
	  init_value " aggregate_traits<K"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1493644 "V"
	  public type class_ref 567564 // anonymous326
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 567692 "trait_trivial_dtor<key_value_pair_t<K,V> >"
      visibility package stereotype "struct"
      nformals 2
      formal name "K" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 567820 "anonymous327"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1493772 "value"
	  public type class_ref 567820 // anonymous327
	  init_value " aggregate_traits<K"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1493900 "V"
	  public type class_ref 567820 // anonymous327
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 567948 "trait_trivial_copy<key_value_pair_t<K,V> >"
      visibility package stereotype "struct"
      nformals 2
      formal name "K" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 568076 "anonymous328"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1494028 "value"
	  public type class_ref 568076 // anonymous328
	  init_value " aggregate_traits<K"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1494156 "V"
	  public type class_ref 568076 // anonymous328
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 568204 "trait_trivial_move<key_value_pair_t<K,V> >"
      visibility package stereotype "struct"
      nformals 2
      formal name "K" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 568332 "anonymous329"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1494284 "value"
	  public type class_ref 568332 // anonymous329
	  init_value " aggregate_traits<K"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1494412 "V"
	  public type class_ref 568332 // anonymous329
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 570124 "trait_trivial_move<Vector<T> >"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Vector<T> can be trivially moved using memcpy() because moving does not
 require any change to the underlying SharedBuffer contents or reference count."
      class 570252 "anonymous332"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1495052 "value"
	  public type class_ref 570252 // anonymous332
	  init_value " true "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 570764 "WorkQueue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * A threaded work queue.
 *
 * This class is designed to make it easy to run a bunch of isolated work
 * units in parallel, using up to the specified number of threads.
 * To use it, write a loop to post work units to the work queue, then synchronize
 * on the queue at the end."
      class 570892 "WorkUnit"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1664140 "WorkUnit"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} { };
"
	  
	  
	  
	  
	end

	operation 1664268 "~WorkUnit"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	  
	  
	  
	  
	end

	operation 1664396 "run"
	  abstract cpp_virtual public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  
	  
	  
	  
	  comment "         * Runs the work unit.
         * If the result is 'true' then the work queue continues scheduling work as usual.
         * If the result is 'false' then the work queue is canceled."
	end
      end

      operation 1664524 "WorkQueue"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "maxThreads" explicit_type "size_t"
	  param in name "canCallJava" explicit_type "bool"
	    defaultvalue "true"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "// --- WorkQueue ---

${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)} :
        mMaxThreads(maxThreads), mCanCallJava(canCallJava),
        mCanceled(false), mFinished(false), mIdleThreads(0) ${throw}{
  ${body}}
"
	
	
	
	
	comment " Creates a work queue with the specified maximum number of work threads. "
      end

      operation 1664652 "~WorkQueue"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Destroys the work queue.
     * Cancels pending work and waits for all remaining threads to complete."
      end

      operation 1664780 "schedule"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 2
	  param inout name "workUnit" type class_ref 570892 // WorkUnit
	  param in name "backlog" explicit_type "size_t"
	    defaultvalue "2"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Posts a work unit to run later.
     * If the work queue has been canceled or is already finished, returns INVALID_OPERATION
     * and does not take ownership of the work unit (caller must destroy it itself).
     * Otherwise, returns OK and takes ownership of the work unit (the work queue will
     * destroy it automatically).
     *
     * For flow control, this method blocks when the size of the pending work queue is more
     * 'backlog' times the number of threads.  This condition reduces the rate of entry into
     * the pending work queue and prevents it from growing much more rapidly than the
     * work threads can actually handle.
     *
     * If 'backlog' is 0, then no throttle is applied."
      end

      operation 1664908 "cancel"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Cancels all pending work.
     * If the work queue is already finished, returns INVALID_OPERATION.
     * If the work queue is already canceled, returns OK and does nothing else.
     * Otherwise, returns OK, discards all pending work units and prevents additional
     * work units from being scheduled.
     *
     * Call finish() after cancel() to wait for all remaining work to complete."
      end

      operation 1665036 "finish"
	preserve_cpp_body_indent public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Waits for all work to complete.
     * If the work queue is already finished, returns INVALID_OPERATION.
     * Otherwise, waits for all work to complete and returns OK."
      end

      class 571020 "WorkThread"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1178764 // <generalisation>
	  relation 1178764 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 1178764 // <generalisation>
	    b parent class_ref 159500 // Thread
	end

	operation 1665164 "WorkThread"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 2
	    param inout name "workQueue" type class_ref 570764 // WorkQueue
	    param in name "canCallJava" explicit_type "bool"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "// --- WorkQueue::WorkThread ---

${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)} :
        Thread(canCallJava), mWorkQueue(workQueue) ${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1665292 "~WorkThread"
	  preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 1665420 "threadLoop"
	  preserve_cpp_body_indent cpp_virtual private explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	attribute 1496076 "mWorkQueue"
	  private type class_ref 570764 // WorkQueue
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1665548 "cancelLocked"
	preserve_cpp_body_indent private return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1665676 "threadLoop"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1496204 "mMaxThreads"
	const_attribute private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1496332 "mCanCallJava"
	const_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1178892 // mLock (<directional composition>)
	relation 1178892 *-->
	  a role_name "mLock" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1178892 // mLock (<directional composition>)
	  b parent class_ref 133132 // Mutex
      end

      classrelation 1179020 // mWorkChangedCondition (<directional composition>)
	relation 1179020 *-->
	  a role_name "mWorkChangedCondition" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1179020 // mWorkChangedCondition (<directional composition>)
	  b parent class_ref 159244 // Condition
      end

      classrelation 1179148 // mWorkDequeuedCondition (<directional composition>)
	relation 1179148 *-->
	  a role_name "mWorkDequeuedCondition" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1179148 // mWorkDequeuedCondition (<directional composition>)
	  b parent class_ref 159244 // Condition
      end

      attribute 1496460 "mCanceled"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1496588 "mFinished"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1496716 "mIdleThreads"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1496844 "mWorkThreads"
	private explicit_type "sp<WorkThread> "
	stereotype "Vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1179276 // mWorkUnits (<unidirectional association>)
	relation 1179276 --->
	  stereotype "Vector"
	  a role_name "mWorkUnits" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 1179276 // mWorkUnits (<unidirectional association>)
	  b parent class_ref 570892 // WorkUnit
      end
    end

    class 571660 "ZipUtils"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Container class for utility functions, primarily for namespace reasons."
      operation 1668748 "inflateToBuffer"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 4
	  param in name "fd" explicit_type "int"
	  param inout name "buf" explicit_type "void"
	  param in name "uncompressedLen" explicit_type "long"
	  param in name "compressedLen" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Utility function that expands zip/gzip \"deflate\" compressed data
// * into a buffer.
// *
// * \"fd\" is an open file positioned at the start of the \"deflate\" data
// * \"buf\" must hold at least \"uncompressedLen\" bytes.
// 
//static

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * General utility function for uncompressing \"deflate\" data from a file
     * to a buffer."
      end

      operation 1668876 "inflateToBuffer"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 4
	  param inout name "fp" explicit_type "FILE"
	  param inout name "buf" explicit_type "void"
	  param in name "uncompressedLen" explicit_type "long"
	  param in name "compressedLen" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Utility function that expands zip/gzip \"deflate\" compressed data
// * into a buffer.
// *
// * (This is a clone of the previous function, but it takes a FILE* instead
// * of an fd.  We could pass fileno(fd) to the above, but we can run into
// * trouble when \"fp\" has a different notion of what fd's file position is.)
// *
// * \"fp\" is an open file positioned at the start of the \"deflate\" data
// * \"buf\" must hold at least \"uncompressedLen\" bytes.
// 
//static

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1669004 "examineGzip"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 5
	  param inout name "fp" explicit_type "FILE"
	  param inout name "pCompressionMethod" explicit_type "int"
	  param inout name "pUncompressedLen" explicit_type "long"
	  param inout name "pCompressedLen" explicit_type "long"
	  param inout name "pCRC32" explicit_type "ulong"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Look at the contents of a gzip archive.  We want to know where the
// * data starts, and how long it will be after it is uncompressed.
// *
// * We expect to find the CRC and length as the last 8 bytes on the file.
// * This is a pretty reasonable thing to expect for locally-compressed
// * files, but there's a small chance that some extra padding got thrown
// * on (the man page talks about compressed data written to tape).  We
// * don't currently deal with that here.  If \"gzip -l\" whines, we're going
// * to fail too.
// *
// * On exit, \"fp\" is pointing at the start of the compressed data.
// 
//static

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} * ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Someday we might want to make this generic and handle bzip2 \".bz2\"
     * files too.
     *
     * We could declare gzip to be a sub-class of zip that has exactly
     * one always-compressed entry, but we currently want to treat Zip
     * and gzip as distinct, so there's no value.
     *
     * The zlib library has some gzip utilities, but it has no interface
     * for extracting the uncompressed length of the file (you do *not*
     * want to gzseek to the end).
     *
     * Pass in a seeked file pointer for the gzip file.  If this is a gzip
     * file, we set our return values appropriately and return \"true\" with
     * the file seeked to the start of the compressed data."
      end

      operation 1669132 "ZipUtils"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 1669260 "~ZipUtils"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end
    end

    class 1828748 "android_create_thread_fn"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(android_thread_func_t entryFunction,
                                        void *userData,
                                        const char* threadName,
                                        int32_t threadPriority,
                                        size_t threadStackSize,
                                        android_thread_id_t *threadId);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Used by the Java Runtime to control how threads are created, so that
 they can be proper and lovely Java threads."
    end

    class 1831564 "off64_t"
      visibility package stereotype "typedef" explicit_base_type "off_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1831948 "nsecs_t"
      visibility package stereotype "typedef" explicit_base_type "int64_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1832844 "anonymous4"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6930060 "OK"
	public type class_ref 1832844 // anonymous4
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6930188 "NO_ERROR"
	public type class_ref 1832844 // anonymous4
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6930316 "UNKNOWN_ERROR"
	public type class_ref 1832844 // anonymous4
	init_value " 0x80000000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6930444 "NO_MEMORY"
	public type class_ref 1832844 // anonymous4
	init_value " -ENOMEM"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6930572 "INVALID_OPERATION"
	public type class_ref 1832844 // anonymous4
	init_value " -ENOSYS"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6930700 "BAD_VALUE"
	public type class_ref 1832844 // anonymous4
	init_value " -EINVAL"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6930828 "BAD_TYPE"
	public type class_ref 1832844 // anonymous4
	init_value " 0x80000001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6930956 "NAME_NOT_FOUND"
	public type class_ref 1832844 // anonymous4
	init_value " -ENOENT"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6931084 "PERMISSION_DENIED"
	public type class_ref 1832844 // anonymous4
	init_value " -EPERM"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6931212 "NO_INIT"
	public type class_ref 1832844 // anonymous4
	init_value " -ENODEV"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6931340 "ALREADY_EXISTS"
	public type class_ref 1832844 // anonymous4
	init_value " -EEXIST"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6931468 "DEAD_OBJECT"
	public type class_ref 1832844 // anonymous4
	init_value " -EPIPE"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6931596 "FAILED_TRANSACTION"
	public type class_ref 1832844 // anonymous4
	init_value " 0x80000002"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6931724 "JPARKS_BROKE_IT"
	public type class_ref 1832844 // anonymous4
	init_value " -EPIPE"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6931852 "BAD_INDEX"
	public type class_ref 1832844 // anonymous4
	init_value " -EOVERFLOW"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6931980 "NOT_ENOUGH_DATA"
	public type class_ref 1832844 // anonymous4
	init_value " -ENODATA"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6932108 "WOULD_BLOCK"
	public type class_ref 1832844 // anonymous4
	init_value " -EWOULDBLOCK"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6932236 "TIMED_OUT"
	public type class_ref 1832844 // anonymous4
	init_value " -ETIMEDOUT"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6932364 "UNKNOWN_TRANSACTION"
	public type class_ref 1832844 // anonymous4
	init_value " -EBADMSG"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1837324 "ALooper"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Declare a concrete type for the NDK's looper forward declaration."
    end

    class 1839884 "char16_t"
      visibility package stereotype "typedef" explicit_base_type "uint16_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1843084 "char32_t"
      visibility package stereotype "typedef" explicit_base_type "uint32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1844108 "android_thread_id_t"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}*  ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1844236 "android_thread_func_t"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type}(* ${name})(void*);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1844364 "anonymous12"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6944908 "ANDROID_PRIORITY_LOWEST"
	public type class_ref 1844364 // anonymous12
	init_value "  19"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6945036 "ANDROID_PRIORITY_BACKGROUND"
	public type class_ref 1844364 // anonymous12
	init_value "  10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6945164 "ANDROID_PRIORITY_NORMAL"
	public type class_ref 1844364 // anonymous12
	init_value "   0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6945292 "ANDROID_PRIORITY_FOREGROUND"
	public type class_ref 1844364 // anonymous12
	init_value "  -2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6945420 "ANDROID_PRIORITY_DISPLAY"
	public type class_ref 1844364 // anonymous12
	init_value "  -4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6945548 "ANDROID_PRIORITY_URGENT_DISPLAY"
	public type class_ref 1844364 // anonymous12
	init_value "  HAL_PRIORITY_URGENT_DISPLAY"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6945676 "ANDROID_PRIORITY_AUDIO"
	public type class_ref 1844364 // anonymous12
	init_value " -16"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6945804 "ANDROID_PRIORITY_URGENT_AUDIO"
	public type class_ref 1844364 // anonymous12
	init_value " -19"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6945932 "ANDROID_PRIORITY_HIGHEST"
	public type class_ref 1844364 // anonymous12
	init_value " -20"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6946060 "ANDROID_PRIORITY_DEFAULT"
	public type class_ref 1844364 // anonymous12
	init_value " ANDROID_PRIORITY_NORMAL"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6946188 "ANDROID_PRIORITY_MORE_FAVORABLE"
	public type class_ref 1844364 // anonymous12
	init_value " -1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6946316 "ANDROID_PRIORITY_LESS_FAVORABLE"
	public type class_ref 1844364 // anonymous12
	init_value " +1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1844620 "anonymous13"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6946444 "PRIORITY_LOWEST"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_LOWEST"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6946572 "PRIORITY_BACKGROUND"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_BACKGROUND"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6946700 "PRIORITY_NORMAL"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_NORMAL"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6946828 "PRIORITY_FOREGROUND"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_FOREGROUND"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6946956 "PRIORITY_DISPLAY"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_DISPLAY"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6947084 "PRIORITY_URGENT_DISPLAY"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_URGENT_DISPLAY"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6947212 "PRIORITY_AUDIO"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_AUDIO"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6947340 "PRIORITY_URGENT_AUDIO"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_URGENT_AUDIO"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6947468 "PRIORITY_HIGHEST"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_HIGHEST"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6947596 "PRIORITY_DEFAULT"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_DEFAULT"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6947724 "PRIORITY_MORE_FAVORABLE"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_MORE_FAVORABLE"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6947852 "PRIORITY_LESS_FAVORABLE"
	public type class_ref 1844620 // anonymous13
	init_value " ANDROID_PRIORITY_LESS_FAVORABLE"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1844748 "anonymous14"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 6947980 "SYSTEM_TIME_REALTIME"
	public type class_ref 1844748 // anonymous14
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6948108 "SYSTEM_TIME_MONOTONIC"
	public type class_ref 1844748 // anonymous14
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6948236 "SYSTEM_TIME_PROCESS"
	public type class_ref 1844748 // anonymous14
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6948364 "SYSTEM_TIME_THREAD"
	public type class_ref 1844748 // anonymous14
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 6948492 "SYSTEM_TIME_BOOTTIME"
	public type class_ref 1844748 // anonymous14
	init_value " 4   // same as SYSTEM_TIME_MONOTONIC, but including CPU suspend time
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 1848588 "DefaultDelete"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Default deleter for pointer types."
      class 1848716 "anonymous27"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 6953356 "type_must_be_complete"
	  public type class_ref 1848716 // anonymous27
	  init_value " sizeof(T) "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 10352652 "DefaultDelete"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 10352780 "operator ()"
	const cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "p" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        delete p;
    };
"
	
	
	
	
      end
    end

    class 1848844 "DefaultDelete<T[]>"
      visibility package stereotype "struct"
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Default deleter for array types."
      class 1848972 "anonymous28"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 6953484 "type_must_be_complete"
	  public type class_ref 1848972 // anonymous28
	  init_value " sizeof(T) "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 10352908 "operator ()"
	const cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "p" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        delete[] p;
    };
"
	
	
	
	
      end
    end

    class 1849100 "UniquePtr"
      visibility package 
      nformals 2
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "D" type "typename" explicit_default_value "DefaultDelete<T>"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A smart pointer that deletes the given pointer on destruction.
 Equivalent to C++0x's std::unique_ptr (a combination of boost::scoped_ptr
 and boost::scoped_array).
 Named to be in keeping with Android style but also to avoid
 collision with any other implementation, until we can switch over
 to unique_ptr.
 Use thus:
   UniquePtr<C> c(new C);"
      operation 10353036 "UniquePtr"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "ptr" explicit_type "T"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : mPtr(ptr) {
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Construct a new UniquePtr, taking ownership of the given raw pointer."
      end

      operation 10353164 "~UniquePtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        reset();
    };
"
	
	
	
	
      end

      operation 10353292 "operator *"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return *mPtr; };
"
	
	
	
	
	comment " Accessors."
      end

      operation 10353420 "operator ->"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mPtr; };
"
	
	
	
	
      end

      operation 10353548 "get"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mPtr; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10353676 "release"
	public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the raw pointer and hands over ownership to the caller.
 The pointer will not be deleted by UniquePtr."
      end

      operation 10353804 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "ptr" explicit_type "T"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (ptr != mPtr) {
            D()(mPtr);
            mPtr = ptr;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes ownership of the given raw pointer.
 If this smart pointer previously owned a different raw pointer, that
 raw pointer will be freed."
      end

      attribute 6953612 "mPtr"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 10353932 "operator =="
	stereotype "template"
	const private explicit_return_type "bool"
	nparams 1
	  param in name "p" explicit_type "UniquePtr<T2>"
	cpp_decl "    ${comment}template<typename T2>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Comparing unique pointers is probably a mistake, since they're unique."
      end

      operation 10354060 "operator !="
	stereotype "template"
	const private explicit_return_type "bool"
	nparams 1
	  param in name "p" explicit_type "UniquePtr<T2>"
	cpp_decl "    ${comment}template<typename T2>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 10354188 "UniquePtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 1849100 // UniquePtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Disallow copy and assignment."
      end

      operation 10354316 "operator ="
	private explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 1849100 // UniquePtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 1849228 "UniquePtr<T[],D>"
      visibility package 
      nformals 2
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "D" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Partial specialization for array types. Like std::unique_ptr, this removes
 operator* and operator-> but adds operator[]."
      operation 10354444 "UniquePtr"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "ptr" explicit_type "T"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : mPtr(ptr) {
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10354572 "~UniquePtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        reset();
    };
"
	
	
	
	
      end

      operation 10354700 "operator []"
	const cpp_inline public explicit_return_type "T"
	nparams 1
	  param in name "i" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return mPtr[i];
    };
"
	
	
	
	
      end

      operation 10354828 "get"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mPtr; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10354956 "release"
	public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10355084 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "ptr" explicit_type "T"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (ptr != mPtr) {
            D()(mPtr);
            mPtr = ptr;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 6953740 "mPtr"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 10355212 "UniquePtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 1849100 // UniquePtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Disallow copy and assignment."
      end

      operation 10355340 "operator ="
	private explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 1849100 // UniquePtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 1849356 "C"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 10355468 "C"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} { ++cCount; };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 10355596 "~C"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { --cCount; };
"
	
	
	
	
      end
    end

    class 1849484 "Freer"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 10355724 "operator ()"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "p" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        assert(*p == 123);
        free(p);
        freed = true;
    };
"
	
	
	
	
      end
    end

    class 1851404 "ZipFileCRO"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}*  ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Trivial typedef to ensure that ZipFileCRO is not treated as a simple integer."
    end

    class 1851532 "ZipEntryCRO"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}*  ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * Trivial typedef to ensure that ZipEntryCRO is not treated as a simple
 * integer.  We use NULL to indicate an invalid value."
    end
  end

  package_ref 130316 // utils

  deploymentview 150028 "utils"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 229132 "BasicHashtable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 554892 // BasicHashtableImpl
	class_ref 555276 // BasicHashtable
      end
    end

    artifact 229260 "BitSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 418444 // BitSet32
      end
    end

    artifact 229388 "BlobCache"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 555532 // BlobCache
      end
    end

    artifact 229516 "BufferedTextOutput"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 556172 // BufferedTextOutput
      end
    end

    artifact 229644 "CallStack"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 556428 // CallStack
      end
    end

    artifact 229900 "Condition"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 159244 // Condition
      end
    end

    artifact 230028 "Debug"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 556812 // CompileTimeAssert<true>
	class_ref 556940 // CompileTimeIfElse<true,LHS,RHS>
	class_ref 557196 // CompileTimeIfElse<false,LHS,RHS>
	class_ref 557452 // debugPrintFunc
      end
    end

    artifact 230156 "Errors"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128268 // status_t
      end
    end

    artifact 230284 "FileMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 137356 // FileMap
      end
    end

    artifact 230412 "Flattenable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 506892 // Flattenable
	class_ref 507020 // LightFlattenable
	class_ref 554380 // LightFlattenablePod
      end
    end

    artifact 230540 "Functor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 431884 // Functor
      end
    end

    artifact 230668 "GenerationCache"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 407180 // OnEntryRemoved
	class_ref 557836 // Entry
	class_ref 438796 // GenerationCache
      end
    end

    artifact 230796 "KeyedVector"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 133260 // KeyedVector
	class_ref 558476 // trait_trivial_move<KeyedVector<KEY,VALUE> >
	class_ref 149772 // DefaultKeyedVector
      end
    end

    artifact 230924 "LinearTransform"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 151692 // LinearTransform
      end
    end

    artifact 231052 "List"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129292 // List
      end
    end

    artifact 231180 "Log"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 560268 // LogIfSlow
      end
    end

    artifact 231308 "misc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 411532 // FileType
	class_ref 560396 // sysprop_change_callback
      end
    end

    artifact 231436 "Mutex"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 133132 // Mutex
	class_ref 560780 // AutoMutex
      end
    end

    artifact 231564 "PropertyMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 419212 // PropertyMap
      end
    end

    artifact 231692 "RefBase"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 561036 // ReferenceConverterBase
	class_ref 140044 // RefBase
	class_ref 441100 // LightRefBase
	class_ref 134284 // wp
	class_ref 561548 // ReferenceMover
      end
    end

    artifact 231820 "RWLock"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 562188 // RWLock
      end
    end

    artifact 231948 "SharedBuffer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 554636 // SharedBuffer
      end
    end

    artifact 232076 "SortedVector"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 153740 // SortedVector
	class_ref 563084 // trait_trivial_move<SortedVector<T> >
      end
    end

    artifact 232204 "StopWatch"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 563340 // StopWatch
      end
    end

    artifact 232332 "String16"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 142988 // String16
      end
    end

    artifact 232460 "String8"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 131340 // String8
      end
    end

    artifact 232588 "StringArray"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 167820 // StringArray
      end
    end

    artifact 232716 "StrongPointer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 128396 // sp
      end
    end

    artifact 232844 "TextOutput"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 507532 // TextOutput
	class_ref 563852 // TextOutputManipFunc
	class_ref 563980 // TypeCode
	class_ref 564108 // HexDump
      end
    end

    artifact 232972 "Thread"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 159500 // Thread
      end
    end

    artifact 233228 "ThreadDefs"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 161804 // thread_id_t
	class_ref 564364 // thread_func_t
	class_ref 1844108 // android_thread_id_t
	class_ref 1844236 // android_thread_func_t
	class_ref 1844364 // anonymous12
	class_ref 1844620 // anonymous13
      end
    end

    artifact 233484 "Timers"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 564748 // DurationTimer
	class_ref 1831948 // nsecs_t
	class_ref 1844748 // anonymous14
      end
    end

    artifact 233612 "Tokenizer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 420620 // Tokenizer
      end
    end

    artifact 233740 "Trace"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 564876 // Tracer
	class_ref 565004 // ScopedTrace
      end
    end

    artifact 233868 "TypeHelpers"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 565132 // trait_trivial_ctor
	class_ref 565388 // trait_trivial_dtor
	class_ref 565644 // trait_trivial_copy
	class_ref 565900 // trait_trivial_move
	class_ref 566156 // trait_pointer
	class_ref 566412 // trait_pointer<T*>
	class_ref 566668 // traits
	class_ref 566924 // aggregate_traits
	class_ref 558348 // key_value_pair_t
	class_ref 567436 // trait_trivial_ctor<key_value_pair_t<K,V> >
	class_ref 567692 // trait_trivial_dtor<key_value_pair_t<K,V> >
	class_ref 567948 // trait_trivial_copy<key_value_pair_t<K,V> >
	class_ref 568204 // trait_trivial_move<key_value_pair_t<K,V> >
	class_ref 555148 // hash_t
      end
    end

    artifact 234380 "Vector"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 129164 // Vector
	class_ref 570124 // trait_trivial_move<Vector<T> >
      end
    end

    artifact 234508 "VectorImpl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 443532 // VectorImpl
	class_ref 562828 // SortedVectorImpl
      end
    end

    artifact 234636 "WorkQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 570764 // WorkQueue
      end
    end

    artifact 234892 "ZipFileRO"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 412428 // ZipEntryRO
	class_ref 401292 // ZipFileRO
      end
    end

    artifact 235020 "ZipUtils"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 571660 // ZipUtils
      end
    end

    artifact 875532 "AndroidThreads"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1828748 // android_create_thread_fn
      end
    end

    artifact 876300 "Compat"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1831564 // off64_t
      end
    end

    artifact 877836 "Looper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1837324 // ALooper
      end
    end

    artifact 880524 "Unicode"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1843084 // char32_t
	class_ref 1839884 // char16_t
      end
    end

    artifact 880652 "UniquePtr"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1848588 // DefaultDelete
	class_ref 1848844 // DefaultDelete<T[]>
	class_ref 1849100 // UniquePtr
	class_ref 1849228 // UniquePtr<T[],D>
	class_ref 1849356 // C
	class_ref 1849484 // Freer
      end
    end

    artifact 880780 "main"
      stereotype "source"
      cpp_src "int main(int argc, char* argv[]) {
    //
    // UniquePtr<T> tests...
    //

    // Can we free a single object?
    {
        UniquePtr<C> c(new C);
        assert(cCount == 1);
    }
    assert(cCount == 0);
    // Does release work?
    C* rawC;
    {
        UniquePtr<C> c(new C);
        assert(cCount == 1);
        rawC = c.release();
    }
    assert(cCount == 1);
    delete rawC;
    // Does reset work?
    {
        UniquePtr<C> c(new C);
        assert(cCount == 1);
        c.reset(new C);
        assert(cCount == 1);
    }
    assert(cCount == 0);

    //
    // UniquePtr<T[]> tests...
    //

    // Can we free an array?
    {
        UniquePtr<C[]> cs(new C[4]);
        assert(cCount == 4);
    }
    assert(cCount == 0);
    // Does release work?
    {
        UniquePtr<C[]> c(new C[4]);
        assert(cCount == 4);
        rawC = c.release();
    }
    assert(cCount == 4);
    delete[] rawC;
    // Does reset work?
    {
        UniquePtr<C[]> c(new C[4]);
        assert(cCount == 4);
        c.reset(new C[2]);
        assert(cCount == 2);
    }
    assert(cCount == 0);

    //
    // Custom deleter tests...
    //
    assert(!freed);
    {
        UniquePtr<int, Freer> i(reinterpret_cast<int*>(malloc(sizeof(int))));
        *i = 123;
    }
    assert(freed);
    return 0;
}
"
      associated_classes
      end
    end

    artifact 881292 "ZipFileCRO"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1851404 // ZipFileCRO
	class_ref 1851532 // ZipEntryCRO
      end
    end
  end

  package_ref 281996 // android
end
