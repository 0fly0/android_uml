class GLTraceContext
!!!1706124.cpp!!!	resizeFBMemory(in minSize : uint) : void
    if (fbcontentsSize >= minSize) {
        return;
    }

    if (fbcontents != NULL) {
        free(fbcontents);
        free(fbcompressed);
    }

    fbcontents = malloc(minSize);
    fbcompressed = malloc(minSize);

    fbcontentsSize = minSize;
!!!1706252.cpp!!!	GLTraceContext(in id : int, in version : int, inout state : GLTraceState, inout stream : BufferedOutputStream)
    fbcontents = fbcompressed = NULL;
    fbcontentsSize = 0;
!!!1706380.cpp!!!	getId() : int
    return mId;
!!!1706508.cpp!!!	getVersion() : int
    return mVersion;
!!!1706636.cpp!!!	getGlobalTraceState() : GLTraceState
    return mState;
!!!1706764.cpp!!!	getCompressedFB(inout fb : void, inout fbsize : uint, inout fbwidth : uint, inout fbheight : uint, in fbToRead : FBBinding) : void
    int viewport[4] = {};
    hooks->gl.glGetIntegerv(GL_VIEWPORT, viewport);
    unsigned fbContentsSize = viewport[2] * viewport[3] * 4;

    resizeFBMemory(fbContentsSize);

    // switch current framebuffer binding if necessary
    GLint currentFb = -1;
    bool fbSwitched = false;
    if (fbToRead != CURRENTLY_BOUND_FB) {
        hooks->gl.glGetIntegerv(GL_FRAMEBUFFER_BINDING, &currentFb);

        if (currentFb != 0) {
            hooks->gl.glBindFramebuffer(GL_FRAMEBUFFER, 0);
            fbSwitched = true;
        }
    }

    hooks->gl.glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3],
                                        GL_RGBA, GL_UNSIGNED_BYTE, fbcontents);

    // switch back to previously bound buffer if necessary
    if (fbSwitched) {
        hooks->gl.glBindFramebuffer(GL_FRAMEBUFFER, currentFb);
    }

    *fbsize = lzf_compress(fbcontents, fbContentsSize, fbcompressed, fbContentsSize);
    *fb = fbcompressed;
    *fbwidth = viewport[2];
    *fbheight = viewport[3];
!!!1706892.cpp!!!	bindBuffer(in bufferId : GLuint, inout data : GLvoid, in size : GLsizeiptr) : void
    // free previously bound buffer if any
    ElementArrayBuffer *oldBuffer = mElementArrayBuffers.valueFor(bufferId);
    if (oldBuffer != NULL) {
        delete oldBuffer;
    }

    mElementArrayBuffers.add(bufferId, new ElementArrayBuffer(data, size));
!!!1707020.cpp!!!	getBuffer(in bufferId : GLuint, inout data : GLvoid, inout size : GLsizeiptr) : void
    ElementArrayBuffer *buffer = mElementArrayBuffers.valueFor(bufferId);
    if (buffer == NULL) {
        *data = NULL;
        *size = 0;
    } else {
        *data = buffer->getBuffer();
        *size = buffer->getSize();
    }
!!!1707148.cpp!!!	updateBufferSubData(in bufferId : GLuint, in offset : GLintptr, inout data : GLvoid, in size : GLsizeiptr) : void
    ElementArrayBuffer *buffer = mElementArrayBuffers.valueFor(bufferId);
    if (buffer != NULL) {
        buffer->updateSubBuffer(offset, data, size);
    }
!!!1707276.cpp!!!	deleteBuffer(in bufferId : GLuint) : void
    ElementArrayBuffer *buffer = mElementArrayBuffers.valueFor(bufferId);
    if (buffer != NULL) {
        delete buffer;
        mElementArrayBuffers.removeItem(bufferId);
    }
!!!1707404.cpp!!!	traceGLMessage(inout msg : GLMessage) : void
    mBufferedOutputStream->send(msg);

    GLMessage_Function func = msg->function();
    if (func == GLMessage::eglSwapBuffers
        || func == GLMessage::eglCreateContext
        || func == GLMessage::eglMakeCurrent
        || func == GLMessage::glDrawArrays
        || func == GLMessage::glDrawElements) {
        mBufferedOutputStream->flush();
    }
