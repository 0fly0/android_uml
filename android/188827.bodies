class ServerSocketChannelImpl
!!!768795.java!!!	ServerSocketChannelImpl(inout sp : SelectorProvider)
        super(sp);
        this.socket = new ServerSocketAdapter(this);
        this.impl = socket.getImpl$();
!!!768923.java!!!	socket() : ServerSocket
        return socket;
!!!769051.java!!!	accept() : SocketChannel
        if (!isOpen()) {
            throw new ClosedChannelException();
        }
        if (!isBound) {
            throw new NotYetBoundException();
        }

        // Create an empty socket channel. This will be populated by ServerSocketAdapter.accept.
        SocketChannelImpl result = new SocketChannelImpl(provider(), false);
        boolean connected = false;
        try {
            begin();
            synchronized (acceptLock) {
                synchronized (blockingLock()) {
                    do {
                        try {
                            socket.implAccept(result);
                            // select successfully, break out immediately.
                            break;
                        } catch (SocketTimeoutException e) {
                            // continue to accept if the channel is in blocking mode.
                            // TODO: does this make sense? why does blocking imply no timeouts?
                        }
                    } while (isBlocking());
                }
            }
        } finally {
            end(result.socket().isConnected());
        }
        return result.socket().isConnected() ? result : null;
!!!769179.java!!!	implConfigureBlocking(inout blocking : boolean) : void
        synchronized (blockingLock()) {
            IoUtils.setBlocking(impl.getFD$(), blocking);
        }
!!!769307.java!!!	implCloseSelectableChannel() : void
        if (!socket.isClosed()) {
            socket.close();
        }
!!!769435.java!!!	getFD() : FileDescriptor
        return impl.getFD$();
