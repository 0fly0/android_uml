class InfoDropTarget
!!!13656972.java!!!	InfoDropTarget(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!13657100.java!!!	InfoDropTarget(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
!!!13657228.java!!!	onFinishInflate() : void
        super.onFinishInflate();

        mOriginalTextColor = getTextColors();

        // Get the hover color
        Resources r = getResources();
        mHoverColor = r.getColor(R.color.info_target_hover_tint);
        mDrawable = (TransitionDrawable) getCurrentDrawable();
        mDrawable.setCrossFadeEnabled(true);

        // Remove the text in the Phone UI in landscape
        int orientation = getResources().getConfiguration().orientation;
        if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
            if (!LauncherApplication.isScreenLarge()) {
                setText("");
            }
        }
!!!13657356.java!!!	isFromAllApps(inout source : DragSource) : boolean
        return (source instanceof AppsCustomizePagedView);
!!!13657484.java!!!	acceptDrop(inout d : DragObject) : boolean
        // acceptDrop is called just before onDrop. We do the work here, rather than
        // in onDrop, because it allows us to reject the drop (by returning false)
        // so that the object being dragged isn't removed from the drag source.
        ComponentName componentName = null;
        if (d.dragInfo instanceof ApplicationInfo) {
            componentName = ((ApplicationInfo) d.dragInfo).componentName;
        } else if (d.dragInfo instanceof ShortcutInfo) {
            componentName = ((ShortcutInfo) d.dragInfo).intent.getComponent();
        } else if (d.dragInfo instanceof PendingAddItemInfo) {
            componentName = ((PendingAddItemInfo) d.dragInfo).componentName;
        }
        if (componentName != null) {
            mLauncher.startApplicationDetailsActivity(componentName);
        }

        // There is no post-drop animation, so clean up the DragView now
        d.deferDragViewCleanupPostAnimation = false;
        return false;
!!!13657612.java!!!	onDragStart(inout source : DragSource, inout info : Object, in dragAction : int) : void
        boolean isVisible = true;

        // Hide this button unless we are dragging something from AllApps
        if (!isFromAllApps(source)) {
            isVisible = false;
        }

        mActive = isVisible;
        mDrawable.resetTransition();
        setTextColor(mOriginalTextColor);
        ((ViewGroup) getParent()).setVisibility(isVisible ? View.VISIBLE : View.GONE);
!!!13657740.java!!!	onDragEnd() : void
        super.onDragEnd();
        mActive = false;
!!!13657868.java!!!	onDragEnter(inout d : DragObject) : void
        super.onDragEnter(d);

        mDrawable.startTransition(mTransitionDuration);
        setTextColor(mHoverColor);
!!!13657996.java!!!	onDragExit(inout d : DragObject) : void
        super.onDragExit(d);

        if (!d.dragComplete) {
            mDrawable.resetTransition();
            setTextColor(mOriginalTextColor);
        }
