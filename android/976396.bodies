class HTML5Audio
!!!4878732.java!!!	handleMessage(inout msg : Message) : void
        switch (msg.what) {
            case TIMEUPDATE: {
                try {
                    if (mState != ERROR && mMediaPlayer.isPlaying()) {
                        int position = mMediaPlayer.getCurrentPosition();
                        nativeOnTimeupdate(position, mNativePointer);
                    }
                } catch (IllegalStateException e) {
                    mState = ERROR;
                }
            }
        }
!!!4878860.java!!!	onBufferingUpdate(inout mp : MediaPlayer, in percent : int) : void
        nativeOnBuffering(percent, mNativePointer);
!!!4878988.java!!!	onCompletion(inout mp : MediaPlayer) : void
        mState = COMPLETE;
        mProcessingOnEnd = true;
        nativeOnEnded(mNativePointer);
        mProcessingOnEnd = false;
        if (mLoopEnabled == true) {
            nativeOnRequestPlay(mNativePointer);
            mLoopEnabled = false;
        }
!!!4879116.java!!!	onError(inout mp : MediaPlayer, in what : int, in extra : int) : boolean
        mState = ERROR;
        resetMediaPlayer();
        mState = IDLE;
        return false;
!!!4879244.java!!!	onPrepared(inout mp : MediaPlayer) : void
        mState = PREPARED;
        if (mTimer != null) {
            mTimer.schedule(new TimeupdateTask(),
                            TIMEUPDATE_PERIOD, TIMEUPDATE_PERIOD);
        }
        nativeOnPrepared(mp.getDuration(), 0, 0, mNativePointer);
        if (mAskToPlay) {
            mAskToPlay = false;
            play();
        }
!!!4879372.java!!!	onSeekComplete(inout mp : MediaPlayer) : void
        nativeOnTimeupdate(mp.getCurrentPosition(), mNativePointer);
!!!4879500.java!!!	HTML5Audio(inout webViewCore : WebViewCore, in nativePtr : int)
        // Save the native ptr
        mNativePointer = nativePtr;
        resetMediaPlayer();
        mContext = webViewCore.getContext();
        mIsPrivateBrowsingEnabledGetter = new IsPrivateBrowsingEnabledGetter(
                webViewCore.getContext().getMainLooper(), webViewCore.getWebViewClassic());
!!!4879628.java!!!	resetMediaPlayer() : void
        if (mMediaPlayer == null) {
            mMediaPlayer = new MediaPlayer();
        } else {
            mMediaPlayer.reset();
        }
        mMediaPlayer.setOnBufferingUpdateListener(this);
        mMediaPlayer.setOnCompletionListener(this);
        mMediaPlayer.setOnErrorListener(this);
        mMediaPlayer.setOnPreparedListener(this);
        mMediaPlayer.setOnSeekCompleteListener(this);

        if (mTimer != null) {
            mTimer.cancel();
        }
        mTimer = new Timer();
        mState = IDLE;
!!!4879756.java!!!	setDataSource(in url : String) : void
        mUrl = url;
        try {
            if (mState != IDLE) {
                resetMediaPlayer();
            }
            String cookieValue = CookieManager.getInstance().getCookie(
                    url, mIsPrivateBrowsingEnabledGetter.get());
            Map<String, String> headers = new HashMap<String, String>();

            if (cookieValue != null) {
                headers.put(COOKIE, cookieValue);
            }
            if (mIsPrivateBrowsingEnabledGetter.get()) {
                headers.put(HIDE_URL_LOGS, "true");
            }

            mMediaPlayer.setDataSource(url, headers);
            mState = INITIALIZED;
            mMediaPlayer.prepareAsync();
        } catch (IOException e) {
            String debugUrl = url.length() > 128 ? url.substring(0, 128) + "..." : url;
            Log.e(LOGTAG, "couldn't load the resource: "+ debugUrl +" exc: " + e);
            resetMediaPlayer();
        }
!!!4879884.java!!!	onAudioFocusChange(in focusChange : int) : void
        switch (focusChange) {
        case AudioManager.AUDIOFOCUS_GAIN:
            // resume playback
            if (mMediaPlayer == null) {
                resetMediaPlayer();
            } else if (mState != ERROR && !mMediaPlayer.isPlaying()) {
                mMediaPlayer.start();
                mState = STARTED;
            }
            break;

        case AudioManager.AUDIOFOCUS_LOSS:
            // Lost focus for an unbounded amount of time: stop playback.
            if (mState != ERROR && mMediaPlayer.isPlaying()) {
                mMediaPlayer.stop();
                mState = STOPPED;
            }
            break;

        case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:
        case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:
            // Lost focus for a short time, but we have to stop
            // playback.
            if (mState != ERROR && mMediaPlayer.isPlaying()) pause();
            break;
        }
!!!4880012.java!!!	play() : void
        if (mState == COMPLETE && mLoopEnabled == true) {
            // Play it again, Sam
            mMediaPlayer.start();
            mState = STARTED;
            return;
        }

        if (((mState >= ERROR && mState < PREPARED)) && mUrl != null) {
            resetMediaPlayer();
            setDataSource(mUrl);
            mAskToPlay = true;
        }

        if (mState >= PREPARED) {
            AudioManager audioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
            int result = audioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,
                AudioManager.AUDIOFOCUS_GAIN);

            if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {
                mMediaPlayer.start();
                mState = STARTED;
            }
        }
!!!4880140.java!!!	pause() : void
        if (mState == STARTED) {
            if (mTimer != null) {
                mTimer.purge();
            }
            mMediaPlayer.pause();
            mState = PAUSED;
        }
!!!4880268.java!!!	seek(in msec : int) : void
        if (mProcessingOnEnd == true && mState == COMPLETE && msec == 0) {
            mLoopEnabled = true;
        }
        if (mState >= PREPARED) {
            mMediaPlayer.seekTo(msec);
        }
!!!4880396.java!!!	teardown() : void
        mMediaPlayer.release();
        mMediaPlayer = null;
        mState = ERROR;
        mNativePointer = 0;
!!!4880524.java!!!	getMaxTimeSeekable() : float
        if (mState >= PREPARED) {
            return mMediaPlayer.getDuration() / 1000.0f;
        } else {
            return 0;
        }
