class AndroidTestRunner
!!!8866956.java!!!	setTestClassName(in testClassName : String, in testMethodName : String) : void
        Class testClass = loadTestClass(testClassName);

        if (shouldRunSingleTestMethod(testMethodName, testClass)) {
            TestCase testCase = buildSingleTestMethod(testClass, testMethodName);
            mTestCases = Lists.newArrayList(testCase);
            mTestClassName = testClass.getSimpleName();
        } else {
            setTest(getTest(testClass), testClass);
        }
!!!8867084.java!!!	setTest(inout test : Test) : void
        setTest(test, test.getClass());
!!!8867212.java!!!	setTest(inout test : Test, inout testClass : Class<? extends Test>) : void
        mTestCases = (List<TestCase>) TestCaseUtil.getTests(test, true);
        if (TestSuite.class.isAssignableFrom(testClass)) {
            mTestClassName = TestCaseUtil.getTestName(test);
        } else {
            mTestClassName = testClass.getSimpleName();
        }
!!!8867340.java!!!	clearTestListeners() : void
        mTestListeners.clear();
!!!8867468.java!!!	addTestListener(inout testListener : TestListener) : void
        if (testListener != null) {
            mTestListeners.add(testListener);
        }
!!!8867596.java!!!	loadTestClass(in testClassName : String) : Class<? extends Test>
        try {
            return (Class<? extends Test>) mContext.getClassLoader().loadClass(testClassName);
        } catch (ClassNotFoundException e) {
            runFailed("Could not find test class. Class: " + testClassName);
        }
        return null;
!!!8867724.java!!!	buildSingleTestMethod(inout testClass : Class, in testMethodName : String) : TestCase
        try {
            Constructor c = testClass.getConstructor();
            return newSingleTestMethod(testClass, testMethodName, c);
        } catch (NoSuchMethodException e) {
        }

        try {
            Constructor c = testClass.getConstructor(String.class);
            return newSingleTestMethod(testClass, testMethodName, c, testMethodName);
        } catch (NoSuchMethodException e) {
        }

        return null;
!!!8867852.java!!!	newSingleTestMethod(inout testClass : Class, in testMethodName : String, inout constructor : Constructor, inout  : Object...args) : TestCase
        try {
            TestCase testCase = (TestCase) constructor.newInstance(args);
            testCase.setName(testMethodName);
            return testCase;
        } catch (IllegalAccessException e) {
            runFailed("Could not access test class. Class: " + testClass.getName());
        } catch (InstantiationException e) {
            runFailed("Could not instantiate test class. Class: " + testClass.getName());
        } catch (IllegalArgumentException e) {
            runFailed("Illegal argument passed to constructor. Class: " + testClass.getName());
        } catch (InvocationTargetException e) {
            runFailed("Constructor thew an exception. Class: " + testClass.getName());
        }
        return null;
!!!8867980.java!!!	shouldRunSingleTestMethod(in testMethodName : String, inout testClass : Class<? extends Test>) : boolean
        return testMethodName != null && TestCase.class.isAssignableFrom(testClass);
!!!8868108.java!!!	getTest(inout clazz : Class) : Test
        if (TestSuiteProvider.class.isAssignableFrom(clazz)) {
            try {
                TestSuiteProvider testSuiteProvider =
                        (TestSuiteProvider) clazz.getConstructor().newInstance();
                return testSuiteProvider.getTestSuite();
            } catch (InstantiationException e) {
                runFailed("Could not instantiate test suite provider. Class: " + clazz.getName());
            } catch (IllegalAccessException e) {
                runFailed("Illegal access of test suite provider. Class: " + clazz.getName());
            } catch (InvocationTargetException e) {
                runFailed("Invocation exception test suite provider. Class: " + clazz.getName());
            } catch (NoSuchMethodException e) {
                runFailed("No such method on test suite provider. Class: " + clazz.getName());
            }
        }
        return getTest(clazz.getName());
!!!8868236.java!!!	createTestResult() : TestResult
        if (mSkipExecution) {
            return new NoExecTestResult();
        }
        return new TestResult();
!!!8868364.java!!!	setSkipExecution(inout skip : boolean) : void
        mSkipExecution = skip;
!!!8868492.java!!!	getTestCases() : TestCase
        return mTestCases;
!!!8868620.java!!!	getTestClassName() : String
        return mTestClassName;
!!!8868748.java!!!	getTestResult() : TestResult
        return mTestResult;
!!!8868876.java!!!	runTest() : void
        runTest(createTestResult());
!!!8869004.java!!!	runTest(inout testResult : TestResult) : void
        mTestResult = testResult;

        for (TestListener testListener : mTestListeners) {
            mTestResult.addListener(testListener);
        }

        Context testContext = mInstrumentation == null ? mContext : mInstrumentation.getContext();
        for (TestCase testCase : mTestCases) {
            setContextIfAndroidTestCase(testCase, mContext, testContext);
            setInstrumentationIfInstrumentationTestCase(testCase, mInstrumentation);
            setPerformanceWriterIfPerformanceCollectorTestCase(testCase, mPerfWriter);
            testCase.run(mTestResult);
        }
!!!8869132.java!!!	setContextIfAndroidTestCase(inout test : Test, inout context : Context, inout testContext : Context) : void
        if (AndroidTestCase.class.isAssignableFrom(test.getClass())) {
            ((AndroidTestCase) test).setContext(context);
            ((AndroidTestCase) test).setTestContext(testContext);
        }
!!!8869260.java!!!	setContext(inout context : Context) : void
        mContext = context;
!!!8869388.java!!!	setInstrumentationIfInstrumentationTestCase(inout test : Test, inout instrumentation : Instrumentation) : void
        if (InstrumentationTestCase.class.isAssignableFrom(test.getClass())) {
            ((InstrumentationTestCase) test).injectInstrumentation(instrumentation);
        }
!!!8869516.java!!!	setPerformanceWriterIfPerformanceCollectorTestCase(inout test : Test, inout writer : PerformanceResultsWriter) : void
        if (PerformanceCollectorTestCase.class.isAssignableFrom(test.getClass())) {
            ((PerformanceCollectorTestCase) test).setPerformanceResultsWriter(writer);
        }
!!!8869644.java!!!	setInstrumentation(inout instrumentation : Instrumentation) : void
        mInstrumentation = instrumentation;
!!!8869772.java!!!	setInstrumentaiton(inout instrumentation : Instrumentation) : void
        setInstrumentation(instrumentation);
!!!8869900.java!!!	setPerformanceResultsWriter(inout writer : PerformanceResultsWriter) : void
        mPerfWriter = writer;
!!!8870028.java!!!	loadSuiteClass(in suiteClassName : String) : Class
        return mContext.getClassLoader().loadClass(suiteClassName);
!!!8870540.java!!!	runFailed(in message : String) : void
        throw new RuntimeException(message);
