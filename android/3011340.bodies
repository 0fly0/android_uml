class EventManagerService
!!!12301708.java!!!	onBind(inout arg0 : Intent) : IBinder
        return new EventManagerBinder();
!!!12301964.java!!!	onCreate() : void
        super.onCreate();
        Log.d(TAG, "onCreate");
        mTimer = new Timer();
        mContext = getApplicationContext();

        mCloseAlertReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(final Context context, final Intent intent) {
                String action = (intent != null) ? intent.getAction() : null;
                if (TvIntents.INTENT_ACTION_CLOSE_APP.equals(action)
                        || ACTION_CLOSE_ALERT.equals(intent.getAction())) {
                    Log.d(TAG, "receive intent " + intent.getAction());
                    destroyAlertDialog(ALERT_TYPE_FORCE);

                } else if (ACTION_CHECK_EVENTS.equals(action)) {
                    int groupVal = intent.getIntExtra(EXTRA_EVENT_GROUP,
                            EventGroup.EVENT_GROUP_ALL.ordinal());
                    if (groupVal <= EventGroup.EVENT_GROUP_ALL.ordinal()) {
                        EventGroup group = EventGroup.values()[groupVal];
                        checkEvent(group);
                    }
                } else if (ACTION_CHECK_CONNECT.equals(action)) {
                    initSourceConnectStatus();
                }
            }
        };
        final IntentFilter filter = new IntentFilter();
        filter.addAction(TvIntents.INTENT_ACTION_CLOSE_APP);
        filter.addAction(ACTION_CLOSE_ALERT);
        filter.addAction(ACTION_CHECK_EVENTS);
        filter.addAction(ACTION_CHECK_CONNECT);
        registerReceiver(mCloseAlertReceiver, filter);

        initSourceConnectStatus();
!!!12302092.java!!!	initSourceConnectStatus() : void
        for (int source = 0 ; source < mSourceConnectArray.length ; source++) {
            mSourceConnectArray[source] =
                Wrapper.getWrapperInstance().getSourceConnectStatus(source)==1 ? true : false;
            Log.d(TAG, "mSourceConnectArray[" + source + "]=" + mSourceConnectArray[source]);
        }
!!!12302220.java!!!	onDestroy() : void
        super.onDestroy();
        Log.d(TAG, "onDestroy");
        if (mTimer != null) {
            mTimer.cancel();
            mTimer.purge();
            mTimer = null;
        }
        destroyAlertDialog(ALERT_TYPE_FORCE);
        unregisterReceiver(mCloseAlertReceiver);
!!!12302348.java!!!	checkEvent(inout group : EventGroup) : void
        Log.d(TAG, "checkEvent:" + group);

        switch (group) {
            case EVENT_GROUP_SIGNAL:
                mHandler.removeCallbacks(checkSignalEventRunnable);
                mHandler.post(checkSignalEventRunnable);
                break;
            case EVENT_GROUP_BLOCK:
                mHandler.removeCallbacks(checkBlockEventRunnable);
                mHandler.post(checkBlockEventRunnable);
                break;
            case EVENT_GROUP_ALL:
                // add all check methods here
                checkEvent(EventGroup.EVENT_GROUP_SIGNAL);
                checkEvent(EventGroup.EVENT_GROUP_BLOCK);
                break;
            default:
                break;
        }
!!!12302476.java!!!	setSourceConnectStatus(in source : int, inout connect : boolean) : void
        if (source >= 0 && source < mSourceConnectArray.length) {
            mSourceConnectArray[source] = connect;
        }
!!!12302604.java!!!	getSourceConnectStatus(in source : int) : boolean
        Log.d(TAG, "getSourceConnectStatus source=" + source + " size="
                + mSourceConnectArray.length);
        if (source >= 0 && source < mSourceConnectArray.length) {
            if (source == TvSource.TV_SourceAtv.value()
                    || source == TvSource.TV_SourceDtv.value()
                    || source == TvSource.TV_SourceVga.value()) {
                return true;
            } else {
                return (mSourceConnectArray[source] != null) ? mSourceConnectArray[source] : false;
            }
        } else {
            return false;
        }
!!!12302732.java!!!	setVideoInfoStatus(inout videoInfo : VideoInfoUpdate) : void
        Log.d(TAG, "setVideoInfoStatus videoInfo=" + videoInfo);
        mVideoInfoUpdate = videoInfo;
!!!12302860.java!!!	getVideoInfoStatus() : VideoInfoUpdate
        return mVideoInfoUpdate;
!!!12302988.java!!!	setAudioInfoStatus(inout AudioInfo : AudioInfoUpdate) : void
        mAudioInfoUpdate = AudioInfo;
!!!12303116.java!!!	getAudioInfoStatus() : AudioInfoUpdate
        return mAudioInfoUpdate;
!!!12303244.java!!!	clearAVInfoStatus() : void
        mVideoInfoUpdate = null;
        mAudioInfoUpdate = null;
!!!12303372.java!!!	removeSignalEvent() : void
        mUSDTVMessageQueue.removeEventGroup(EventGroup.EVENT_GROUP_SIGNAL);
        mHandler.removeCallbacks(checkSignalEventRunnable);
        mHandler.post(checkSignalEventRunnable);
!!!12303500.java!!!	isNoSignal() : boolean
        Events signalEvent = mUSDTVMessageQueue
                .getEventByGroup(EventGroup.EVENT_GROUP_SIGNAL);
        return isNoSignal(signalEvent);
!!!12303628.java!!!	isNoSignal(inout signalEvent : Events) : boolean
        boolean nosignal = false;
        Log.d(TAG, "signalEvent=" + signalEvent);
        if (signalEvent != null) {
            switch (signalEvent) {
                case STOP_SOURCE_DONE:
                case NON_TS_LOCKING_EVENT:
                case SCM_NON_RF_NO_SIGNAL:
                case CURRENT_CHANNEL_PLAY_SUCCESS:
                case CURRENT_CHANNEL_PLAY_FAILURE:
                case TUNER_UNLOCKED_EVENT:
                case TS_DELETED_SERVICE_EVENT:
                    nosignal = true;
                    break;
                case SCM_NON_RF_INPUT_STABLE:
                case SCM_VIDEO_RESOLUTION_CHANGE:
                case AUDIO_FORMAT_UPDATE:
                case TUNER_LOCKED_EVENT:
                case RF_RESOLUTION_CHANGE:
                case NON_RF_INVALID_FORMAT:
                case NO_AV_COMPONENT:
                case NO_VIDEO_COMPONENT:
                case NO_AUDIO_COMPONENT:
                    nosignal = false;
                    break;
            }
        }
        return nosignal;
!!!12303756.java!!!	isAvStable(inout signalEvent : Events) : boolean
        boolean avStable = true;
        Log.d(TAG, "signalEvent=" + signalEvent);
        if (signalEvent != null) {
            switch (signalEvent) {
                case NO_AV_COMPONENT:
                case NO_VIDEO_COMPONENT:
                case NO_AUDIO_COMPONENT:
                case NON_RF_INVALID_FORMAT:
                    avStable = false;
                    break;
            }
        }
        return avStable;
!!!12303884.java!!!	removeBlockEvent() : void
        mUSDTVMessageQueue.removeEventGroup(EventGroup.EVENT_GROUP_BLOCK);
        mHandler.removeCallbacks(checkBlockEventRunnable);
        mHandler.post(checkBlockEventRunnable);
!!!12304012.java!!!	isBlocked() : boolean
        Events blockEvent = mUSDTVMessageQueue
                .getEventByGroup(EventGroup.EVENT_GROUP_BLOCK);
        return isBlocked(blockEvent);
!!!12304140.java!!!	isBlocked(inout blockEvent : Events) : boolean
        Log.d(TAG, "blockEvent=" + blockEvent);
        boolean block = false;
        if (blockEvent != null) {
            switch (blockEvent) {
                case CURRENT_CHANNEL_LOCKED:
                case PARENTAL_BLOCKED_EVENT:
                case CURRENT_INPUT_LOCKED:
                    block = true;
                    break;
                case PARENTAL_UNBLOCKED_EVENT:
                case CURRENT_CHANNEL_UNLOCKED:
                case CURRENT_INPUT_UNLOCKED:
                    block = false;
                    break;
            }
        }
        return block;
!!!12304268.java!!!	createAlertDialog(in alertType : int) : void
        String text = null;
        int textId = 0;
        if (alertType == SHOW_NO_SIGNAL) {
            boolean isTuner = Wrapper.getWrapperInstance().isTunerInput();
            textId = R.string.nosignal;
            if (isTuner) {
                textId = R.string.nosignal_tuner;
            }
        } else if (alertType == SHOW_SERVICE_DELETED) {
            textId = R.string.service_deleted;
        } else if (alertType == SHOW_AV_INSTABLE) {
            Events signalEvent = mUSDTVMessageQueue
                    .getEventByGroup(EventGroup.EVENT_GROUP_SIGNAL);
            if (signalEvent == Events.NO_AV_COMPONENT)
                textId = R.string.no_audiovideo_signal;
            else if (signalEvent == Events.NO_VIDEO_COMPONENT)
                textId = R.string.no_video_signal;
            else if (signalEvent == Events.NO_AUDIO_COMPONENT)
                textId = R.string.no_audio_signal;
            else if (signalEvent == Events.NON_RF_INVALID_FORMAT)
                textId = R.string.invalid_format;
        }
        if (textId != 0) {
            text = mContext.getResources().getString(textId);
        }

        // don't show again if the same info is shown
        if (TvSignalWidgetProvider.isVisible()
                && TextUtils.equals(TvSignalWidgetProvider.getDisplayText(), text)) {
            return;
        }

        Log.d(TAG, "createAlertDialog type:" + alertType);
        if (canShowAlertDialog(alertType)) {
            if (alertType != mAlertType) {
                destroyAlertDialog(ALERT_TYPE_FORCE);
            }
            ToastCreator.cancelToast();

            mAlertType = alertType;
            sendMsgToWidget(textId, true);
        }
!!!12304396.java!!!	sendMsgToWidget(in textId : int, inout isShown : boolean) : void
        String text = null;
        if (textId != 0) {
            text = mContext.getResources().getString(textId);
        }
        Log.d(TAG, "sendMsgToWidget-text=" + text);
        Intent intent = new Intent(TvSignalWidgetProvider.ACTION_SHOW_SIGNAL_WIDGET);
        Bundle bundle = new Bundle();
        bundle.putString(TvSignalWidgetProvider.EXTRA_TEXT, text);
        bundle.putBoolean(TvSignalWidgetProvider.EXTRA_STATUS, isShown);
        intent.putExtras(bundle);
        mContext.sendBroadcast(intent);
!!!12304524.java!!!	destroyAlertDialog(in alertType : int) : void
        Log.d(TAG, "destroyDialog alertType:" + alertType);
        if (alertType == mAlertType || alertType == ALERT_TYPE_FORCE) {
            sendMsgToWidget(0, false);
            mAlertType = ALERT_TYPE_FORCE;
        }
!!!12304652.java!!!	canShowAlertDialog(in alertType : int) : boolean
        boolean canShow = true;
        boolean isOnlyTvPlayer = WidgetManager.isTopActivity(this,
                WidgetManager.TV_PLAYER_ACTIVITY_NAME);
        switch (alertType) {
            case SHOW_NO_SIGNAL:
            case SHOW_SERVICE_DELETED:
            case SHOW_AV_INSTABLE:
                canShow = isOnlyTvPlayer;
                break;
        }
        return canShow;
!!!12304780.java!!!	canShowOSD(in osdType : int) : boolean
        boolean canShow = true;
        String topActivityName = WidgetManager.getTopActivityAtStack(this);
        boolean isOnlyTvPlayer = WidgetManager.TV_PLAYER_ACTIVITY_NAME.equals(topActivityName);
        boolean isNonTvInput = Wrapper.getWrapperInstance().isStreamInput();
        switch (osdType) {
            case SHOW_CHANNEL_BANNER:
                if (isNonTvInput
                        || (!isOnlyTvPlayer && !ChannelBanner.class.getName().equals(
                                topActivityName))) {
                    canShow = false;
                }
                break;
            case SHOW_INPUT_BANNER:
                if (isNonTvInput) {
                    canShow = false;
                    break;
                }
            case SHOW_BLOCK:
            case SHOW_UNBLOCK:
                canShow = isOnlyTvPlayer;
                break;
        }
        return canShow;
