class ChannelBanner
!!!12249484.java!!!	onCreate(in savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        Log.d(TAG, "onCreate()");

        mContext = getApplicationContext();
        mRes = mContext.getResources();
        mHandler = new Handler();

        if (!Wrapper.getWrapperInstance().isTunerInput()) {
            Log.d(TAG, "Don't show channel banner in NON TUNER input");
            finish();
        }

        mFrwmEventReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                if (intent != null && TvIntents.ACTION_TV_EVENT.equals(intent.getAction())) {
                    int extra = intent.getIntExtra(TvIntents.EXTRA_USDTV_EVENT, -1);
                    if (extra >= 0) {
                        Events event = Events.values()[extra];
                        handleEvent(event);
                    }
                }
            }
        };
        final IntentFilter filter = new IntentFilter();
        filter.addAction(TvIntents.ACTION_TV_EVENT);
        registerReceiver(mFrwmEventReceiver, filter);

        final Bundle bundle = getIntent().getExtras();
        if (bundle != null) {
            showProgramDesc = bundle.getBoolean(TvIntents.EXTRA_SHOW_PROGRAM_DESC, false);
        }

        ChannelDetails chDetails = mLive.getCurrentChannelDetail();
        if (chDetails == null) {
            Log.d(TAG, "No channel details available, showProgramDesc: "+showProgramDesc);
            // show user more info when user press INFO to show banner
            if (showProgramDesc) {
                new ToastCreator(mContext, " No Service available",
                        R.drawable.info).showToast();
            }
            WidgetManager.exitFromApp(getApplicationContext());
            return;
        } else {
            setContentView(R.layout.channelbanner);
            updateBasicChannelInfo(chDetails);

            boolean channelSurfingMode =
                    (Wrapper.getWrapperInstance().getChannelSurfingMode() != 0);
            if (channelSurfingMode) {
                channelSurfingUtils = new ChannelSurfingUtils(ChannelBanner.this);
                channelSurfingUtils.setAutoTime(CHANNEL_UPDOWN_INTERVAL,
                        CHANNEL_SURFINGMODE_TIMEOUT);
                channelSurfingUtils.registerOnChannelSurfed(new Runnable() {
                    @Override
                    public void run() {
                        updateBasicChannelInfo(channelSurfingUtils.getSurfedChannelInfo());
                    }
                });
            }

            LinearLayout bannerDesc = (LinearLayout) findViewById(R.id.banner_description);
            if (showProgramDesc) {
                final LinearLayout descriptionLayout =
                        (LinearLayout) findViewById(R.id.banner_description);
                descriptionLayout.setAnimation(AnimationUtils.loadAnimation(mContext,
                        R.anim.push_up_in));
                bannerDesc.setVisibility(View.VISIBLE);
            } else {
                bannerDesc.setVisibility(View.INVISIBLE);
            }
            configTimeout();

            if (!TvFramework.getInstance().isTvNoSignal(Utils.getTvRemoteService()))
                updateChannelBannerDetails();
            else
                clearChannelBannerDetails();

        }
!!!12249612.java!!!	onDestroy() : void
        Log.d(TAG, "onDestroy()");

        if (mFrwmEventReceiver != null)
            unregisterReceiver(mFrwmEventReceiver);

        mHandler.removeCallbacks(mRefreshRunnable);

        exitChannelSurfing();
        cancelUpdateInfoTask();

        if (channelBlocked) {
            /*
             * Show Channel Lock Screen when banner exit, if current service is
             * locked
             */
            PCUtility.playCurrentSource(mContext, true, true);
        }

        super.onDestroy();
!!!12249740.java!!!	exitChannelSurfing() : void
        if (channelSurfingUtils != null) {
            channelSurfingUtils.exitSurfingMode(true);
            channelSurfingUtils = null;
        }

!!!12249868.java!!!	onResume() : void
        super.onResume();
        Log.d(TAG, "onResume");

!!!12249996.java!!!	onPause() : void
        super.onPause();
!!!12250124.java!!!	onKeyUp(in keyCode : int, in event : KeyEvent) : boolean
        Log.d(TAG, "onKeyUp() keyCode=" + keyCode);

        if (keyCode == KeyEvent.KEYCODE_INFO
                || keyCode == KeyEvent.KEYCODE_BACK
                || keyCode == KeyEvent.KEYCODE_ENTER) {
            closeBanner();

            return true;
        }
        return super.onKeyUp(keyCode, event);
!!!12250252.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        Log.d(TAG, "onKeyDown() keyCode=" + keyCode);

        if (keyCode == KeyEvent.KEYCODE_MEDIA_NEXT || keyCode == KeyEvent.KEYCODE_MEDIA_PREVIOUS
                || keyCode == KeyEvent.KEYCODE_CHANNEL_DOWN
                || keyCode == KeyEvent.KEYCODE_CHANNEL_UP) {
            cancelUpdateInfoTask();
            clearChannelBannerDetails();

            if (channelSurfingUtils != null) {
                boolean channelUp = (keyCode == KeyEvent.KEYCODE_MEDIA_NEXT
                        || keyCode == KeyEvent.KEYCODE_CHANNEL_UP);
                channelSurfingUtils.doChannelOperation(channelUp);
                return true;
            } else {
                return super.onKeyDown(keyCode, event);
            }
        } else {
            closeBanner();
        }
        return super.onKeyDown(keyCode, event);
!!!12250380.java!!!	updateBasicChannelInfo(inout chDetails : ChannelDetails) : void
        if (chDetails != null) {

            final int mjNo = chDetails.getMajorNo();
            final int mnNo = chDetails.getMinorNo();
            final String channelName = chDetails.getChannelName();

            String chNo = null;
            if (mjNo == mRes.getInteger(R.integer.invalid_major_no)) {
                chNo = String.valueOf(mnNo);
            } else {
                chNo = mjNo + "." + mnNo;
            }

            final TextView channelNumberView = (TextView) findViewById(R.id.banner_channel_number);
            channelNumberView.setText(chNo);

            final TextView channelNameView = (TextView) findViewById(R.id.banner_channel_name);
            channelNameView.setText(channelName);
        }

!!!12250508.java!!!	updateBasicChannelInfo(inout ch : Channel) : void
        if (ch != null) {

            final int mjNo = ch.getChannelNumber().getMajor();
            final int mnNo = ch.getChannelNumber().getMinor();
            final String channelName = ch.getName();

            String chNo = null;
            if (mjNo == mRes.getInteger(R.integer.invalid_major_no)) {
                chNo = String.valueOf(mnNo);
            } else {
                chNo = mjNo + "." + mnNo;
            }

            final TextView channelNumberView = (TextView) findViewById(R.id.banner_channel_number);
            channelNumberView.setText(chNo);

            final TextView channelNameView = (TextView) findViewById(R.id.banner_channel_name);
            channelNameView.setText(channelName);
        }

!!!12250636.java!!!	configTimeout() : void
        if (showProgramDesc) {
            setTimeOut(10000); // show for longer time
        } else {
            setTimeOut(TIMEOUT_5SEC); // default time
        }
        startTimeOut();
!!!12250764.java!!!	closeBanner() : void
        Log.d(TAG, "closeBanner()");

        ChannelBanner.this.finish();
!!!12250892.java!!!	onNewIntent(inout intent : Intent) : void
        Log.d(TAG, "***********************************************   onNewIntent ");

        mHandler.removeCallbacks(mRefreshRunnable);

        refreshBanner();
        super.onNewIntent(intent);
!!!12251020.java!!!	refreshBanner() : void
        ChannelDetails chDetails = mLive.getCurrentChannelDetail();
        if (chDetails == null) {
            Log.d(TAG, "No channel details available. showProgramDesc: "+showProgramDesc);
            // show user more info when user press INFO to show banner
            if (showProgramDesc) {
                new ToastCreator(getApplicationContext(), "No Service available",
                        R.drawable.info).showToast();
            }
            WidgetManager.exitFromApp(getApplicationContext());
            return;
        } else if (channelSurfingUtils == null || !channelSurfingUtils.isSurfingMode()) {
            updateBasicChannelInfo(chDetails);
            if (!TvFramework.getInstance().isTvNoSignal(Utils.getTvRemoteService()))
                updateChannelBannerDetails();
        }
!!!12251148.java!!!	cancelUpdateInfoTask() : void
        Log.d(TAG, "cancelUpdateInfoTask");
        if (mUpdateInfoAsyncTask != null) {
            mUpdateInfoAsyncTask.cancel(false);
            Log.d(TAG, "cancelUpdateInfoTask mUpdateInfoAsyncTask " + mUpdateInfoAsyncTask);
            mUpdateInfoAsyncTask = null;
        }
!!!12251276.java!!!	updateChannelBannerDetails() : void
        cancelUpdateInfoTask();

        mUpdateInfoAsyncTask = new AsyncTask<Void, ChannelBannerDetails,
                ChannelBannerDetails>() {
            private int stepUpdated = 0;
            private CHANNEL_INFO_STEPS[] mSteps = CHANNEL_INFO_STEPS.values();

            @Override
            protected ChannelBannerDetails doInBackground(Void... params) {
                final ChannelBannerDetails info = new ChannelBannerDetails(mContext);
                int i = 0;
                Log.d(TAG, "doInBackground mUpdateInfoAsyncTask " + this);
                while (info.loadChannelInfos()) {
                    Log.d(TAG, "doInBackground mUpdateInfoAsyncTask step " + ++i);
                    publishProgress(info);

                    try {
                        Thread.sleep(5);
                        if (isCancelled()) {
                            Log.d(TAG, "mUpdateInfoAsyncTask cancelled");
                            return null;
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                return info;
            }

            @Override
            protected void onProgressUpdate(ChannelBannerDetails... values) {
                super.onProgressUpdate(values);

                // In surfing mode, only show basic channel info
                if (channelSurfingUtils != null && channelSurfingUtils.isSurfingMode()) {
                    return;
                }

                final ChannelBannerDetails info = values[0];
                if (info != null) {
                    int currentStep = info.getCurrentStep().ordinal();
                    //Log.d(TAG, "onProgressUpdate currentStep=" + currentStep);
                    for(;stepUpdated <= currentStep;stepUpdated++){
                        //Log.d(TAG, "onProgressUpdate stepUpdated=" + stepUpdated);
                        updateDetailInfoByStep(mSteps[stepUpdated], info);
                    }
                }
            }

            @Override
            protected void onPostExecute(ChannelBannerDetails info) {
                super.onPostExecute(info);

                // In surfing mode, only show basic channel info
                if ((channelSurfingUtils != null && channelSurfingUtils.isSurfingMode())
                        || info == null) {
                    return;
                }
            }
        }.execute(null, null);
!!!12251404.java!!!	updateDetailInfoByStep(inout step : CHANNEL_INFO_STEPS, inout info : ChannelBannerDetails) : void
        if (info == null)
            return;

        switch (step) {
            case CI_STEP_INPUT:
                break;
            case CI_STEP_CHANNEL:
                // Service type (scrambled/ no flag)
                final TextView scrambledService = (TextView) findViewById(R.id.serviceFlag);
                if (info.mEncryptedChannel) {
                    scrambledService.setText(" SCRAMBLED ");
                } else {
                    scrambledService.setText(spaceChar);
                }

                // Tuner input type
                final TextView inputType = (TextView) findViewById(R.id.tunerInput);
                if (InputSourceType.ANALOG_CABLE_INPUT == info.mTunerMode
                        || InputSourceType.CABLE_INPUT == info.mTunerMode) {
                    inputType.setText(" CABLE ");
                } else {
                    inputType.setText(" AIR ");
                }
                break;
            case CI_STEP_PID:
                break;
            case CI_STEP_EVENT:
                final TextView tvRating = (TextView) findViewById(R.id.banner_rating);
                if (info.mRating != null && info.mRating.length() != 0) {
                    tvRating.setText(info.mRating);
                } else {
                    tvRating.setText(spaceChar);
                }

                final TextView programDetailedDescription =
                        (TextView) findViewById(R.id.banner_program_description);
                final ScrollView scrollView = (ScrollView)
                        findViewById(R.id.banner_scrollView);
                String progDescription = info.mProgramDescription;
                //progDescription = " ABCDE\n\nAB\tCDE\nAB\rCDE\nA B C D E "; // for test
                if (progDescription != null) {
                    // replace any carriage returns or new line characters or
                    // tab characters with a space
                    progDescription = progDescription.replaceAll("[\n|\t|\r]", "");
                    progDescription = progDescription.trim();
                    scrollView.requestFocus();
                    scrollView.setOverScrollMode(ScrollView.OVER_SCROLL_IF_CONTENT_SCROLLS);

                    programDetailedDescription.setText(progDescription);
                } else {
                    programDetailedDescription.setText(spaceChar);
                }

                // Setting program name
                final TextView progName = (TextView) findViewById(R.id.program_name);
                if (info.mProgramTitle != null) {

                    if (info.mProgramTitle.length() > PROGRAM_TITLE_LENGTH) {
                        info.mProgramTitle = info.mProgramTitle
                                .substring(0, PROGRAM_TITLE_LENGTH) + "...";
                    }

                    progName.setText(info.mProgramTitle + spaceChar);
                } else {
                    progName.setText(spaceChar);
                }

                // Duration of program
                final TextView programTime = (TextView) findViewById(R.id.progDuration);
                Log.d(TAG, "info.mDuration=" + info.mDuration);
                if (info.mDuration != 0 && info.isDurationValid(info.mDuration)) {
                    programTime.setText(info.mDuration + " min  ");
                } else {
                    programTime.setText(spaceChar);
                }

                break;
            case CI_STEP_AUDIO:
                // Multiple audio support
                boolean isDolby = false;
                boolean isMultiAudio = false;
                boolean isDigitalChannel = (info.mChannelType
                        == ChannelType.DIGITAL_TELEVISION.ordinal());
                if (isDigitalChannel) {
                    // int pidTypeCount = 0;
                    if (info.mPidDetails != null) {
                        Log.d(TAG, "pidDetails.size()" + info.mPidDetails.size());
                        for (int i = 0; i < info.mPidDetails.size(); i++) {
                            final USDTVPidDetails details = info.mPidDetails.get(i);
                            if (details != null) {
                                if (details.getPidType() ==
                                        PidTypes.AISRV_PID_TYPE_ATSC_AC3_AUDIO
                                    || details.getPidType() == PidTypes
                                        .AISRV_PID_TYPE_ATSC_EAC3_AUDIO) {
                                    isDolby = true;
                                    Log.d(TAG, "***********************  pidType = "
                                                    + details.getPidType());
                                }

                            } else {
                                Log.d(TAG, "details is empty");
                            }
                        }
                    }
                    isMultiAudio = info.mMultipleAudioStreams;
                } else if (info.mChannelType == ChannelType.ANALOG_TELEVISION.ordinal()) {
                    isMultiAudio = info.mIsSapAvailable;
                }

                final TextView audioFormatTxt = (TextView) findViewById(R.id.audioFormat);
                String audioFormatString = spaceChar;
                if (isDolby) {
                    audioFormatString = "Dolby D ";
                    if (USDTVMessageQueue.getMsgQueueInstance().isEventExisted(
                            Events.AUDIO_FORMAT_UPDATE)) {
                        int audio_stream_format = Wrapper.getWrapperInstance()
                                .getAudioStreamFormat(true, isDigitalChannel);
                        // if (audio_stream_format ==
                        // ESCMAudioFormat.SCM_AUDIO_FORMAT_DOLBY_AC3.ordinal())
                        // {
                        // audioFormatString="Dolby D";
                        // } else
                        if (audio_stream_format == TvAudioFormat
                                .TV_AUDIO_FORMAT_DD_PLUS.value()) {
                            audioFormatString = "Dolby D+ ";
                        }
                    }
                }

                if (isDigitalChannel) {
                    if (info.mAudioChannel == 1 && info.mSubwooferChannel == 0) {
                        audioFormatString += mRes.getString(R.string.audiomode_mono);

                    } else if (info.mAudioChannel == 2 && info.mSubwooferChannel == 0) {
                        if (info.mDualMono) {
                            audioFormatString +=
                                    mRes.getString(R.string.audiomode_dualmono);
                        } else {
                            audioFormatString += mRes.getString(R.string.audiomode_stereo);
                        }
                    } else if (info.mAudioChannel > 0) {
                        if (info.mSubwooferChannel >= 0) {
                            audioFormatString +=
                                    (info.mAudioChannel - info.mSubwooferChannel);
                            audioFormatString += "." + info.mSubwooferChannel;
                        } else {
                            audioFormatString += info.mAudioChannel;
                        }

                        audioFormatString += "CH";
                    }
                } else {
                    if (info.mMTS == MTS.ANALOG_AUDIO_MONO.ordinal()) {
                        audioFormatString = mRes.getString(R.string.audiomode_mono);
                    } else {
                        if (info.mMTS == MTS.ANALOG_AUDIO_SAP.ordinal()
                                && info.mIsSapAvailable) {
                            audioFormatString = mRes.getString(R.string.audiomode_sap);
                        } else {
                            audioFormatString = mRes.getString(R.string.audiomode_stereo);
                        }
                    }
                }
                audioFormatTxt.setText(audioFormatString);

                final TextView multipleAudio = (TextView) findViewById(R.id.multiAudio);
                if (isMultiAudio)
                    multipleAudio.setText(" MULTI-AUDIO ");
                else
                    multipleAudio.setText(spaceChar);
                break;
            case CI_STEP_VIDEO:
                final USDTVInputVideoResolution videoResolution = info.mResolution;
                final TextView resolutionText = (TextView)
                        findViewById(R.id.resolution_Info);
                if (videoResolution != null) {
                    int resolutionHeight = videoResolution.getHeight();

                    // for bug 38548#
                    // show "1080" for vertical size range from 1070 to 1090
                    if (resolutionHeight >= 1070 && resolutionHeight <= 1090) {
                        resolutionHeight = 1080;
                    }

                    resolutionText.setText(resolutionHeight != 0 ? Integer
                            .toString(resolutionHeight)
                            + getFrameTypeString(videoResolution.getFrameType()) : "");
                }
                break;
            case CI_STEP_PROGRAM_TIME:
                break;
            case CI_STEP_CC:
                // closed caption
                final TextView ccText = (TextView) findViewById(R.id.ccText);
                if (info.mCC) {
                    ccText.setText(" CC ");
                } else {
                    ccText.setText(spaceChar);
                }
                break;
            case CI_STEP_SIGNAL_STRENGTH:
                final int sigStrength = info.mSignalStrength;
                Log.d(TAG, "***********************   signal strength = " + sigStrength);
                final ImageView signalImage = (ImageView) findViewById(R.id.signalStrength);
                if (sigStrength > SIGNAL_STRENGTH_ZERO
                        && sigStrength <= SIGNAL_STRENGTH_LOW) {
                    signalImage.setBackgroundResource(R.drawable.signal_0_to_25);
                } else if (sigStrength > SIGNAL_STRENGTH_LOW
                        && sigStrength <= SIGNAL_STRENGTH_MEDIUM) {
                    signalImage.setBackgroundResource(R.drawable.signal_26_to_50);
                } else if (sigStrength > SIGNAL_STRENGTH_MEDIUM
                        && sigStrength <= SIGNAL_STRENGTH_HIGH) {
                    signalImage.setBackgroundResource(R.drawable.signal_51_to_75);
                } else if (sigStrength > SIGNAL_STRENGTH_HIGH
                        && sigStrength <= SIGNAL_STRENGTH_PERFECT) {
                    signalImage.setBackgroundResource(R.drawable.signal_76_to_100);
                }
                break;
            case CI_STEP_PARENTAL_LOCK:
                // setting icon for Parental Control
                final ImageView pcImage = (ImageView) findViewById(R.id.pcIcon);
                channelBlocked = info.mParentalLock;
                if (info.mParentalLock) {
                    pcImage.setBackgroundResource(R.drawable.lock);
                } else {
                    pcImage.setBackgroundResource(0);
                }
                break;
            case CI_STEP_CURRENT_TIME:
                // display time only on complete stream data is available
                final TextView date = (TextView) findViewById(R.id.date);
                if (info.Current_Date_Time != null) {
                    date.setText(info.Current_Date_Time);
                } else {
                    date.setText(spaceChar);
                }
                break;
            default:;
        }
!!!12251532.java!!!	clearChannelBannerDetails() : void
        final TextView channelDate = (TextView) this.findViewById(R.id.date);
        channelDate.setText("");
        final TextView channelProgramName = (TextView) this.findViewById(R.id.program_name);
        channelProgramName.setText("");
        final TextView channelProgDuration = (TextView) this.findViewById(R.id.progDuration);
        channelProgDuration.setText("");
        final TextView channelResolutionInfo = (TextView) this.findViewById(R.id.resolution_Info);
        channelResolutionInfo.setText("");
        final ImageView channelSignalStrength = (ImageView) this.findViewById(R.id.signalStrength);
        channelSignalStrength.setBackgroundResource(0);
        final TextView channelTunerInput = (TextView) this.findViewById(R.id.tunerInput);
        channelTunerInput.setText("");
        final TextView channelServiceFlag = (TextView) this.findViewById(R.id.serviceFlag);
        channelServiceFlag.setText("");
        final TextView channelBannerRating = (TextView) this.findViewById(R.id.banner_rating);
        channelBannerRating.setText("");
        final TextView channelccText = (TextView) this.findViewById(R.id.ccText);
        channelccText.setText("");
        final TextView channelmultiAudio = (TextView) this.findViewById(R.id.multiAudio);
        channelmultiAudio.setText("");
        final TextView channelaudioFormat = (TextView) this.findViewById(R.id.audioFormat);
        channelaudioFormat.setText("");
        final ImageView channelpcIcon = (ImageView) this.findViewById(R.id.pcIcon);
        channelpcIcon.setBackgroundResource(0);
        final TextView programDetailedDescription =
                (TextView) findViewById(R.id.banner_program_description);
        programDetailedDescription.setText(spaceChar);
!!!12251660.java!!!	getFrameTypeString(in frameType : int) : String
        if (frameType == VideoFrameType.VIDEO_FRAME_TYPE_INTERLACED.ordinal())
            return "i";
        else
            return "p";
!!!12251788.java!!!	handleEvent(inout event : Events) : boolean
        boolean handled = false;
        switch (event) {
            case TIME_CHANGE_EVENT:
            case CC_STATUS_EVENT:
            case ETT_UPDATE_EVENT:
            case EVENT_TRANSITION_EVENT:
            case EPG_UPDATE_EVENT:
            case EPG_COMPLETE_EVENT:
            case AUDIO_FORMAT_UPDATE:
                Log.d(TAG, "handleEvent=" + event);
                mHandler.removeCallbacks(mRefreshRunnable);
                mHandler.postDelayed(mRefreshRunnable, 500);
                handled = true;
                break;
            default:
                ;
        }
        return handled;
