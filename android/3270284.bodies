class ModularSetupActivity
!!!14186380.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        setVisible(false);

        mPreferences = PreferenceManager.getDefaultSharedPreferences(this);

        enableComponentWithinPackageManager(true);
        setDeviceProvisioned(false);

        mForceReboot = false;

        setupSteps();

        // Show Splash Screen not more than once.
        Boolean splashScreenHasBeenShown =  savedInstanceState != null ?
                savedInstanceState.getBoolean(KEY_SPLASH_SCREEN_SHOWN) : false;
        if (!splashScreenHasBeenShown) {
            Intent splashScreenIntent = new Intent(SetupConstants.ACTION_SPLASH_SCREEN);
            startActivityForResult(splashScreenIntent, SPLASH_SCREEN_ACTIVITY);
        }
!!!14186508.java!!!	onRestoreInstanceState(inout savedInstanceState : Bundle) : void
        mForceReboot = savedInstanceState.getBoolean(
                SetupConstants.EXTRA_FORCE_REBOOT, false);
        super.onRestoreInstanceState(savedInstanceState);
!!!14186636.java!!!	onSaveInstanceState(inout outState : Bundle) : void
        super.onSaveInstanceState(outState);
        outState.putBoolean(SetupConstants.EXTRA_FORCE_REBOOT, mForceReboot);
        // Show Splash Screen not more than once per reboot.
        outState.putBoolean(KEY_SPLASH_SCREEN_SHOWN, true);
!!!14186764.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        switch (requestCode) {
            case SETUP_COMPLETE_ACTIVITY:
                completeSetupWizard();
                break;

            case SPLASH_SCREEN_ACTIVITY :
                gotoStep(getLastStep(), false);
                break;

            default:
                if (resultCode == RESULT_OK) {
                    if (data != null) {
                        if (data.getBooleanExtra(
                                    SetupConstants.EXTRA_FORCE_REBOOT, false)) {
                            mForceReboot = true;
                        }
                    }

                    int nextStep = ++requestCode;
                    if (nextStep >= mSetupActivityStepList.size()) {
                        // Have gone through all the steps, finish setup.
                        Intent setupCompleteIntent = new Intent(
                                SetupConstants.ACTION_FINAL_SCREEN);
                        setupCompleteIntent.putExtra(
                                SetupConstants.EXTRA_FORCE_REBOOT,
                                mForceReboot);
                        startActivityForResult(setupCompleteIntent,
                                SETUP_COMPLETE_ACTIVITY);
                    } else {
                        gotoStep(nextStep, false);
                    }
                } else {
                    // Going back
                    int previousStep = --requestCode;
                    if (previousStep < 0) {
                        Log.w(TAG, "Trying to go before first step");
                        gotoStep(0, true);
                    } else {
                        gotoStep(previousStep, true);
                    }
                }

        }
!!!14186892.java!!!	finish() : void
        if (mForceReboot) {
            broadcastForReboot();
        } else {
            Intent homeIntent = new Intent(Intent.ACTION_MAIN);
            homeIntent.addCategory(Intent.CATEGORY_HOME);
            startActivity(homeIntent);
            super.finish();
        }
!!!14187020.java!!!	getLastStep() : int
        return mPreferences.getInt(KEY_LAST_STEP, 0);
!!!14187148.java!!!	setLastStep(in lastStep : int) : void
        Editor preferenceEditor = mPreferences.edit();
        preferenceEditor.putInt(KEY_LAST_STEP, lastStep);
        preferenceEditor.commit();
!!!14187276.java!!!	setupSteps() : void
        Intent intent = new Intent(SetupConstants.ACTION_SETUP_STEP);
        PackageManager pm = getPackageManager();
        List<ResolveInfo> resolveInfoList = pm.queryIntentActivities(intent,
                PackageManager.GET_META_DATA);
        Collections.sort(resolveInfoList, SETUP_ACTIVITY_COMPARATOR);

        mSetupActivityStepList = new ArrayList<ProgressItem>();
        for (ResolveInfo ri : resolveInfoList) {
            ProgressItem progressItem = new ProgressItem();
            progressItem.setResolveInfo(ri);
            mSetupActivityStepList.add(progressItem);
        }
!!!14187404.java!!!	gotoStep(in stepIndex : int, inout isBacked : boolean) : void
        setLastStep(stepIndex);
        Intent intent = getProgressItem(stepIndex).getIntentForProgressItem();
        int totalCount = 0;
        int countUpToStep = 0;
        for (int i = 0 ; i < mSetupActivityStepList.size(); i++) {
            if (mSetupActivityStepList.get(i).isStepCounted()) {
                totalCount++;
                if (stepIndex >= i) {
                    countUpToStep++;
                }
            }
        }
        // -1 on countUpToStep to make it a 0 based index again.
        intent.putExtra(SetupConstants.EXTRA_STEP_INDEX, countUpToStep - 1);
        intent.putExtra(SetupConstants.EXTRA_TOTAL_STEPS_COUNT, totalCount);
        intent.putExtra(SetupConstants.EXTRA_FORCE_REBOOT, mForceReboot);
        intent.putExtra(SetupConstants.EXTRA_IS_BACKED, isBacked);
        startActivityForResult(intent, stepIndex);
!!!14187532.java!!!	getProgressItem(in stepIndex : int) : ProgressItem
        return mSetupActivityStepList.get(stepIndex);
!!!14187660.java!!!	completeSetupWizard() : void
        setDeviceProvisioned(true);
        setSetupVersion(SetupConstants.CURRENT_SETUP_VERSION);
        setLastStep(0);
        enableComponentWithinPackageManager(false);
        finish();
!!!14187788.java!!!	enableComponentWithinPackageManager(inout enable : boolean) : void
        PackageManager pm = getPackageManager();
        ComponentName name = new ComponentName(this,
                ModularSetupActivity.class);
        pm.setComponentEnabledSetting(name,
                enable ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED :
                        PackageManager.COMPONENT_ENABLED_STATE_DISABLED,
                PackageManager.DONT_KILL_APP);
!!!14187916.java!!!	setDeviceProvisioned(inout provisioned : boolean) : void
        Settings.Global.putInt(getContentResolver(),
                Settings.Global.DEVICE_PROVISIONED,
                provisioned ? 1 : 0);
!!!14188044.java!!!	setSetupVersion(in setupVersion : int) : void
        Settings.Secure.putInt(getContentResolver(),
                TvSettings.Secure.SETUP_VERSION,
                setupVersion);
!!!14188172.java!!!	broadcastForReboot() : void
        IntentFilter rebootIntentFilter = new IntentFilter(
                SetupConstants.ACTION_SETUP_REBOOT);
        rebootIntentFilter.setPriority(IntentFilter.SYSTEM_LOW_PRIORITY + 1);
        registerReceiver(new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    Log.d(TAG, "sending to reboot");
                    reboot();
                }
            }, rebootIntentFilter);
        sendOrderedBroadcast(new Intent(SetupConstants.ACTION_SETUP_REBOOT),
                null);
!!!14188300.java!!!	reboot() : void
        Intent rebootIntent = new Intent(Intent.ACTION_REBOOT);
        // Flags that are required for WatchDog to not ignore the intent.
        rebootIntent.putExtra("nowait", 1);
        rebootIntent.putExtra("interval", 1);
        rebootIntent.putExtra("window", 0);
        sendBroadcast(rebootIntent);

