class OpenSSLECPrivateKey
!!!2422811.java!!!	OpenSSLECPrivateKey(inout group : OpenSSLECGroupContext, inout key : OpenSSLKey)
        this.group = group;
        this.key = key;
!!!2422939.java!!!	OpenSSLECPrivateKey(inout key : OpenSSLKey)
        final long origGroup = NativeCrypto.EC_KEY_get0_group(key.getPkeyContext());
        this.group = new OpenSSLECGroupContext(NativeCrypto.EC_GROUP_dup(origGroup));
        this.key = key;
!!!2423067.java!!!	OpenSSLECPrivateKey(inout ecKeySpec : ECPrivateKeySpec)
        try {
            group = OpenSSLECGroupContext.getInstance(ecKeySpec.getParams());
            final BigInteger privKey = ecKeySpec.getS();
            key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_EC_KEY(group.getContext(), 0,
                    privKey.toByteArray()));
        } catch (Exception e) {
            throw new InvalidKeySpecException(e);
        }
!!!2423195.java!!!	getInstance(inout ecPrivateKey : ECPrivateKey) : OpenSSLKey
        try {
            OpenSSLECGroupContext group = OpenSSLECGroupContext.getInstance(ecPrivateKey
                    .getParams());
            final BigInteger privKey = ecPrivateKey.getS();
            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_EC_KEY(group.getContext(), 0,
                    privKey.toByteArray()));
        } catch (Exception e) {
            throw new InvalidKeyException(e);
        }
!!!2423323.java!!!	getAlgorithm() : String
        return ALGORITHM;
!!!2423451.java!!!	getFormat() : String
        return "PKCS#8";
!!!2423579.java!!!	getEncoded() : byte
        return NativeCrypto.i2d_PKCS8_PRIV_KEY_INFO(key.getPkeyContext());
!!!2423707.java!!!	getParams() : ECParameterSpec
        return group.getECParameterSpec();
!!!2423835.java!!!	getS() : BigInteger
        if (key.isEngineBased()) {
            throw new UnsupportedOperationException("private key value S cannot be extracted");
        }

        return getPrivateKey();
!!!2423963.java!!!	getPrivateKey() : BigInteger
        return new BigInteger(NativeCrypto.EC_KEY_get_private_key(key.getPkeyContext()));
!!!2424091.java!!!	getOpenSSLKey() : OpenSSLKey
        return key;
!!!2424219.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (o instanceof OpenSSLECPrivateKey) {
            OpenSSLECPrivateKey other = (OpenSSLECPrivateKey) o;
            return key.equals(other.key);
        }

        if (!(o instanceof ECPrivateKey)) {
            return false;
        }

        final ECPrivateKey other = (ECPrivateKey) o;
        if (!getPrivateKey().equals(other.getS())) {
            return false;
        }

        final ECParameterSpec spec = getParams();
        final ECParameterSpec otherSpec = other.getParams();

        return spec.getCurve().equals(otherSpec.getCurve())
                && spec.getGenerator().equals(otherSpec.getGenerator())
                && spec.getOrder().equals(otherSpec.getOrder())
                && spec.getCofactor() == otherSpec.getCofactor();
!!!2424347.java!!!	hashCode() : int
        return Arrays.hashCode(NativeCrypto.i2d_PKCS8_PRIV_KEY_INFO(key.getPkeyContext()));
!!!2424475.java!!!	toString() : String
        return NativeCrypto.EVP_PKEY_print_private(key.getPkeyContext());
!!!2424603.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();

        byte[] encoded = (byte[]) stream.readObject();

        key = new OpenSSLKey(NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(encoded));

        final long origGroup = NativeCrypto.EC_KEY_get0_group(key.getPkeyContext());
        group = new OpenSSLECGroupContext(NativeCrypto.EC_GROUP_dup(origGroup));
!!!2424731.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        if (key.isEngineBased()) {
            throw new NotSerializableException("engine-based keys can not be serialized");
        }

        stream.defaultWriteObject();
        stream.writeObject(getEncoded());
