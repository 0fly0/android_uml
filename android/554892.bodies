class BasicHashtableImpl
!!!1561100.cpp!!!	BasicHashtableImpl(in entrySize : size_t, in hasTrivialDestructor : bool, in minimumInitialCapacity : size_t, in loadFactor : float)
    determineCapacity(minimumInitialCapacity, mLoadFactor, &mBucketCount, &mCapacity);
!!!1561228.cpp!!!	BasicHashtableImpl(in other : BasicHashtableImpl)
    if (mBuckets) {
        SharedBuffer::bufferFromData(mBuckets)->acquire();
    }
!!!1561356.cpp!!!	dispose() : void
    if (mBuckets) {
        releaseBuckets(mBuckets, mBucketCount);
    }
!!!1561612.cpp!!!	setTo(in other : BasicHashtableImpl) : void
    if (mBuckets) {
        releaseBuckets(mBuckets, mBucketCount);
    }

    mCapacity = other.mCapacity;
    mLoadFactor = other.mLoadFactor;
    mSize = other.mSize;
    mFilledBuckets = other.mFilledBuckets;
    mBucketCount = other.mBucketCount;
    mBuckets = other.mBuckets;

    if (mBuckets) {
        SharedBuffer::bufferFromData(mBuckets)->acquire();
    }
!!!1561740.cpp!!!	clear() : void
    if (mBuckets) {
        if (mFilledBuckets) {
            SharedBuffer* sb = SharedBuffer::bufferFromData(mBuckets);
            if (sb->onlyOwner()) {
                destroyBuckets(mBuckets, mBucketCount);
                for (size_t i = 0; i < mSize; i++) {
                    Bucket& bucket = bucketAt(mBuckets, i);
                    bucket.cookie = 0;
                }
            } else {
                releaseBuckets(mBuckets, mBucketCount);
                mBuckets = NULL;
            }
            mFilledBuckets = 0;
        }
        mSize = 0;
    }
!!!1561868.cpp!!!	next(in index : ssize_t) : ssize_t
    if (mSize) {
        while (size_t(++index) < mBucketCount) {
            const Bucket& bucket = bucketAt(mBuckets, index);
            if (bucket.cookie & Bucket::PRESENT) {
                return index;
            }
        }
    }
    return -1;
!!!1562252.cpp!!!	removeAt(in index : size_t) : void
    edit();

    Bucket& bucket = bucketAt(mBuckets, index);
    bucket.cookie &= ~Bucket::PRESENT;
    if (!(bucket.cookie & Bucket::COLLISION)) {
        mFilledBuckets -= 1;
    }
    mSize -= 1;
    if (!mHasTrivialDestructor) {
        destroyBucketEntry(bucket);
    }
!!!1562380.cpp!!!	rehash(in minimumCapacity : size_t, in loadFactor : float) : void
    if (minimumCapacity < mSize) {
        minimumCapacity = mSize;
    }
    size_t newBucketCount, newCapacity;
    determineCapacity(minimumCapacity, loadFactor, &newBucketCount, &newCapacity);

    if (newBucketCount != mBucketCount || newCapacity != mCapacity) {
        if (mBuckets) {
            void* newBuckets;
            if (mSize) {
                newBuckets = allocateBuckets(newBucketCount);
                for (size_t i = 0; i < mBucketCount; i++) {
                    const Bucket& fromBucket = bucketAt(mBuckets, i);
                    if (fromBucket.cookie & Bucket::PRESENT) {
                        hash_t hash = fromBucket.cookie & Bucket::HASH_MASK;
                        size_t index = chainStart(hash, newBucketCount);
                        Bucket* toBucket = &bucketAt(newBuckets, size_t(index));
                        if (toBucket->cookie & Bucket::PRESENT) {
                            size_t inc = chainIncrement(hash, newBucketCount);
                            do {
                                toBucket->cookie |= Bucket::COLLISION;
                                index = chainSeek(index, inc, newBucketCount);
                                toBucket = &bucketAt(newBuckets, size_t(index));
                            } while (toBucket->cookie & Bucket::PRESENT);
                        }
                        toBucket->cookie = Bucket::PRESENT | hash;
                        initializeBucketEntry(*toBucket, fromBucket.entry);
                    }
                }
            } else {
                newBuckets = NULL;
            }
            releaseBuckets(mBuckets, mBucketCount);
            mBuckets = newBuckets;
            mFilledBuckets = mSize;
        }
        mBucketCount = newBucketCount;
        mCapacity = newCapacity;
    }
    mLoadFactor = loadFactor;
!!!1563148.cpp!!!	clone() : void
    if (mBuckets) {
        void* newBuckets = allocateBuckets(mBucketCount);
        copyBuckets(mBuckets, newBuckets, mBucketCount);
        releaseBuckets(mBuckets, mBucketCount);
        mBuckets = newBuckets;
    }
!!!1563276.cpp!!!	allocateBuckets(in count : size_t) : void
    size_t bytes = count * mBucketSize;
    SharedBuffer* sb = SharedBuffer::alloc(bytes);
    LOG_ALWAYS_FATAL_IF(!sb, "Could not allocate %u bytes for hashtable with %u buckets.",
            uint32_t(bytes), uint32_t(count));
    void* buckets = sb->data();
    for (size_t i = 0; i < count; i++) {
        Bucket& bucket = bucketAt(buckets, i);
        bucket.cookie = 0;
    }
    return buckets;
