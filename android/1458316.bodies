class UrlDataGetter
!!!9067916.java!!!	UrlDataGetter(inout url : URL)
            mUrl = url;
!!!9068044.java!!!	get() : byte
            start();
            synchronized(this) {
                while (!mGetComplete) {
                    try{
                        wait();
                    } catch(InterruptedException e) {
                    }
                }
            }
            return mBytes;
!!!9068172.java!!!	run() : void
            mGetComplete = false;
            HttpGet httpRequest = new HttpGet(mUrl.toString());
            ResponseHandler<byte[]> handler = new ResponseHandler<byte[]>() {
                @Override
                public byte[] handleResponse(HttpResponse response) throws IOException {
                    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                        return null;
                    }
                    HttpEntity entity = response.getEntity();
                    return (entity == null ? null : EntityUtils.toByteArray(entity));
                }
            };

            mBytes = null;
            try {
                /**
                 * TODO: Not exactly sure why some requests hang indefinitely, but adding this
                 * timeout (in static getter for http client) in loop helps.
                 */
                boolean timedOut;
                do {
                    timedOut = false;
                    try {
                        mBytes = getHttpClient().execute(httpRequest, handler);
                    } catch (SocketTimeoutException e) {
                        timedOut = true;
                        Log.w(LOG_TAG, "Expected SocketTimeoutException: " + mUrl, e);
                    }
                } while (timedOut);
            } catch (IOException e) {
                Log.e(LOG_TAG, "url=" + mUrl, e);
            }

            mGetComplete = true;
            notify();
