class UserHistoryDictionaryBigramList
!!!12860556.java!!!	evictAll() : void
        mSize = 0;
        mBigramMap.clear();
!!!12860684.java!!!	addBigram(in word1 : String, in word2 : String) : void
        addBigram(word1, word2, FORGETTING_CURVE_INITIAL_VALUE);
!!!12860812.java!!!	addBigram(in word1 : String, in word2 : String, in fcValue : byte) : void
        if (UserHistoryDictionary.DBG_SAVE_RESTORE) {
            Log.d(TAG, "--- add bigram: " + word1 + ", " + word2 + ", " + fcValue);
        }
        final HashMap<String, Byte> map;
        if (mBigramMap.containsKey(word1)) {
            map = mBigramMap.get(word1);
        } else {
            map = new HashMap<String, Byte>();
            mBigramMap.put(word1, map);
        }
        if (!map.containsKey(word2)) {
            ++mSize;
            map.put(word2, fcValue);
        }
!!!12860940.java!!!	updateBigram(in word1 : String, in word2 : String, in fcValue : byte) : void
        if (UserHistoryDictionary.DBG_SAVE_RESTORE) {
            Log.d(TAG, "--- update bigram: " + word1 + ", " + word2 + ", " + fcValue);
        }
        final HashMap<String, Byte> map;
        if (mBigramMap.containsKey(word1)) {
            map = mBigramMap.get(word1);
        } else {
            return;
        }
        if (!map.containsKey(word2)) {
            return;
        }
        map.put(word2, fcValue);
!!!12861068.java!!!	size() : int
        return mSize;
!!!12861196.java!!!	isEmpty() : boolean
        return mBigramMap.isEmpty();
!!!12861324.java!!!	keySet() : Set<String>
        return mBigramMap.keySet();
!!!12861452.java!!!	getBigrams(in word1 : String) : HashMap<String, Byte>
        if (!mBigramMap.containsKey(word1)) {
            return EMPTY_BIGRAM_MAP;
        } else {
            return mBigramMap.get(word1);
        }
!!!12861580.java!!!	removeBigram(in word1 : String, in word2 : String) : boolean
        final HashMap<String, Byte> set = getBigrams(word1);
        if (set.isEmpty()) {
            return false;
        }
        if (set.containsKey(word2)) {
            set.remove(word2);
            --mSize;
            return true;
        }
        return false;
