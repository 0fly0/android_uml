class ASN1Oid
!!!2160411.java!!!	ASN1Oid()
        super(TAG_OID);
!!!2160539.java!!!	getInstance() : ASN1Oid
        return ASN1;
!!!2160667.java!!!	decode(inout in : BerInputStream) : Object
        in.readOID();

        if (in.isVerify) {
            return null;
        }
        return getDecodedObject(in);
!!!2160795.java!!!	getDecodedObject(inout in : BerInputStream) : Object
        // Allocate and decode
        int oidElement = in.oidElement;
        int[] oid = new int[oidElement];
        for (int id = 1, i = 0; id < oid.length; id++, i++) {
            int octet = in.buffer[in.contentOffset + i];
            oidElement = octet & 0x7F;
            while ((octet & 0x80) != 0) {
                i++;
                octet = in.buffer[in.contentOffset + i];
                oidElement = oidElement << 7 | (octet & 0x7f);
            }
            oid[id] = oidElement;
        }
        // Special handling for the first packed OID element
        if (oid[1] > 79) {
            oid[0] = 2;
            oid[1] = oid[1] - 80;
        } else {
            oid[0] = oid[1] / 40;
            oid[1] = oid[1] % 40;
        }
        return oid;
!!!2160923.java!!!	encodeContent(inout out : BerOutputStream) : void
        out.encodeOID();
!!!2161051.java!!!	setEncodingContent(inout out : BerOutputStream) : void
        int[] oid = (int[]) out.content;

        int length = 0;

        // first subidentifier
        int elem = oid[0] * 40 + oid[1];
        if (elem == 0) {
            length = 1;
        } else {
            for (; elem > 0; elem = elem >> 7) {
                length++;
            }
        }

        // the rest of subidentifiers
        for (int i = 2; i < oid.length; i++) {
            if (oid[i] == 0) {
                length++;
                continue;
            }
            for (elem = oid[i]; elem > 0; elem = elem >> 7) {
                length++;
            }
        }
        out.length = length;
!!!2161179.java!!!	getInstanceForString() : ASN1Oid
        return STRING_OID;
