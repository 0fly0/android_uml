class Currency
!!!1266203.java!!!	Currency(inout currencyCode : String)
        this.currencyCode = currencyCode;
        String symbol = ICU.getCurrencySymbol(Locale.US.toString(), currencyCode);
        if (symbol == null) {
            throw new IllegalArgumentException("Unsupported ISO 4217 currency code: " +
                    currencyCode);
        }
!!!1266331.java!!!	getInstance(inout currencyCode : String) : Currency
        synchronized (codesToCurrencies) {
            Currency currency = codesToCurrencies.get(currencyCode);
            if (currency == null) {
                currency = new Currency(currencyCode);
                codesToCurrencies.put(currencyCode, currency);
            }
            return currency;
        }
!!!1266459.java!!!	getInstance(inout locale : Locale) : Currency
        synchronized (localesToCurrencies) {
            Currency currency = localesToCurrencies.get(locale);
            if (currency != null) {
                return currency;
            }
            String country = locale.getCountry();
            String variant = locale.getVariant();
            if (!variant.isEmpty() && (variant.equals("EURO") || variant.equals("HK") ||
                    variant.equals("PREEURO"))) {
                country = country + "_" + variant;
            }

            String currencyCode = ICU.getCurrencyCode(country);
            if (currencyCode == null) {
                throw new IllegalArgumentException("Unsupported ISO 3166 country: " + locale);
            } else if (currencyCode.equals("XXX")) {
                return null;
            }
            Currency result = getInstance(currencyCode);
            localesToCurrencies.put(locale, result);
            return result;
        }
!!!1266587.java!!!	getAvailableCurrencies() : Set
        Set<Currency> result = new LinkedHashSet<Currency>();
        String[] currencyCodes = ICU.getAvailableCurrencyCodes();
        for (String currencyCode : currencyCodes) {
            result.add(Currency.getInstance(currencyCode));
        }
        return result;
!!!1266715.java!!!	getCurrencyCode() : String
        return currencyCode;
!!!1266843.java!!!	getDisplayName() : String
        return getDisplayName(Locale.getDefault());
!!!1266971.java!!!	getDisplayName(inout locale : Locale) : String
        return ICU.getCurrencyDisplayName(locale.toString(), currencyCode);
!!!1267099.java!!!	getSymbol() : String
        return getSymbol(Locale.getDefault());
!!!1267227.java!!!	getSymbol(inout locale : Locale) : String
        if (locale.getCountry().length() == 0) {
            return currencyCode;
        }

        // Check the locale first, in case the locale has the same currency.
        LocaleData localeData = LocaleData.get(locale);
        if (localeData.internationalCurrencySymbol.equals(currencyCode)) {
            return localeData.currencySymbol;
        }

        // Try ICU, and fall back to the currency code if ICU has nothing.
        String symbol = ICU.getCurrencySymbol(locale.toString(), currencyCode);
        return symbol != null ? symbol : currencyCode;
!!!1267355.java!!!	getDefaultFractionDigits() : int
        // In some places the code XXX is used as the fall back currency.
        // The RI returns -1, but ICU defaults to 2 for unknown currencies.
        if (currencyCode.equals("XXX")) {
            return -1;
        }
        return ICU.getCurrencyFractionDigits(currencyCode);
!!!1267483.java!!!	toString() : String
        return currencyCode;
!!!1267611.java!!!	readResolve() : Object
        return getInstance(currencyCode);
