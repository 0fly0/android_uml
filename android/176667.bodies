class ServerSocket
!!!604443.java!!!	getImpl$() : SocketImpl
        return impl;
!!!604571.java!!!	ServerSocket()
        this.impl = factory != null ? factory.createSocketImpl()
                : new PlainServerSocketImpl();
        impl.create(true);
!!!604699.java!!!	ServerSocket(in port : int)
        this(port, DEFAULT_BACKLOG, Inet4Address.ANY);
!!!604827.java!!!	ServerSocket(in port : int, in backlog : int)
        this(port, backlog, Inet4Address.ANY);
!!!604955.java!!!	ServerSocket(in port : int, in backlog : int, inout localAddress : InetAddress)
        checkListen(port);
        this.impl = factory != null ? factory.createSocketImpl()
                : new PlainServerSocketImpl();
        InetAddress addr = (localAddress == null) ? Inet4Address.ANY : localAddress;

        synchronized (this) {
            impl.create(true);
            try {
                impl.bind(addr, port);
                isBound = true;
                impl.listen(backlog > 0 ? backlog : DEFAULT_BACKLOG);
            } catch (IOException e) {
                close();
                throw e;
            }
        }
!!!605083.java!!!	accept() : Socket
        checkOpen();
        if (!isBound()) {
            throw new SocketException("Socket is not bound");
        }

        Socket aSocket = new Socket();
        try {
            implAccept(aSocket);
        } catch (IOException e) {
            aSocket.close();
            throw e;
        }
        return aSocket;
!!!605211.java!!!	checkListen(in aPort : int) : void
        if (aPort < 0 || aPort > 65535) {
            throw new IllegalArgumentException("Port out of range: " + aPort);
        }
!!!605339.java!!!	close() : void
        isClosed = true;
        impl.close();
!!!605467.java!!!	getInetAddress() : InetAddress
        if (!isBound()) {
            return null;
        }
        return impl.getInetAddress();
!!!605595.java!!!	getLocalPort() : int
        if (!isBound()) {
            return -1;
        }
        return impl.getLocalPort();
!!!605723.java!!!	getSoTimeout() : int
        checkOpen();
        return ((Integer) impl.getOption(SocketOptions.SO_TIMEOUT)).intValue();
!!!605851.java!!!	implAccept(inout aSocket : Socket) : void
        synchronized (this) {
            impl.accept(aSocket.impl);
            aSocket.accepted();
        }
!!!605979.java!!!	setSocketFactory(inout aFactory : SocketImplFactory) : void
        if (factory != null) {
            throw new SocketException("Factory already set");
        }
        factory = aFactory;
!!!606107.java!!!	setSoTimeout(in timeout : int) : void
        checkOpen();
        if (timeout < 0) {
            throw new IllegalArgumentException("timeout < 0");
        }
        impl.setOption(SocketOptions.SO_TIMEOUT, Integer.valueOf(timeout));
!!!606235.java!!!	toString() : String
        StringBuilder result = new StringBuilder(64);
        result.append("ServerSocket[");
        if (!isBound()) {
            return result.append("unbound]").toString();
        }
        return result.append("addr=")
                .append(getInetAddress().getHostName()).append("/")
                .append(getInetAddress().getHostAddress()).append(
                        ",port=0,localport=")
                .append(getLocalPort()).append("]")
                .toString();
!!!606363.java!!!	bind(inout localAddr : SocketAddress) : void
        bind(localAddr, DEFAULT_BACKLOG);
!!!606491.java!!!	bind(inout localAddr : SocketAddress, in backlog : int) : void
        checkOpen();
        if (isBound()) {
            throw new BindException("Socket is already bound");
        }
        int port = 0;
        InetAddress addr = Inet4Address.ANY;
        if (localAddr != null) {
            if (!(localAddr instanceof InetSocketAddress)) {
                throw new IllegalArgumentException("Local address not an InetSocketAddress: " +
                        localAddr.getClass());
            }
            InetSocketAddress inetAddr = (InetSocketAddress) localAddr;
            if ((addr = inetAddr.getAddress()) == null) {
                throw new SocketException("Host is unresolved: " + inetAddr.getHostName());
            }
            port = inetAddr.getPort();
        }

        synchronized (this) {
            try {
                impl.bind(addr, port);
                isBound = true;
                impl.listen(backlog > 0 ? backlog : DEFAULT_BACKLOG);
            } catch (IOException e) {
                close();
                throw e;
            }
        }
!!!606619.java!!!	getLocalSocketAddress() : SocketAddress
        if (!isBound()) {
            return null;
        }
        return new InetSocketAddress(getInetAddress(), getLocalPort());
!!!606747.java!!!	isBound() : boolean
        return isBound;
!!!606875.java!!!	isClosed() : boolean
        return isClosed;
!!!607003.java!!!	checkOpen() : void
        if (isClosed()) {
            throw new SocketException("Socket is closed");
        }
!!!607131.java!!!	setReuseAddress(inout reuse : boolean) : void
        checkOpen();
        impl.setOption(SocketOptions.SO_REUSEADDR, Boolean.valueOf(reuse));
!!!607259.java!!!	getReuseAddress() : boolean
        checkOpen();
        return ((Boolean) impl.getOption(SocketOptions.SO_REUSEADDR)).booleanValue();
!!!607387.java!!!	setReceiveBufferSize(in size : int) : void
        checkOpen();
        if (size < 1) {
            throw new IllegalArgumentException("size < 1");
        }
        impl.setOption(SocketOptions.SO_RCVBUF, Integer.valueOf(size));
!!!607515.java!!!	getReceiveBufferSize() : int
        checkOpen();
        return ((Integer) impl.getOption(SocketOptions.SO_RCVBUF)).intValue();
!!!607643.java!!!	getChannel() : ServerSocketChannel
        return null;
!!!607771.java!!!	setPerformancePreferences(in connectionTime : int, in latency : int, in bandwidth : int) : void
        // Our socket implementation only provide one protocol: TCP/IP, so
        // we do nothing for this method
