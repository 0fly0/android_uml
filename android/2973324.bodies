class HdmiCecTestActivity
!!!12076812.java!!!	onCecServiceConnected(inout cecSrvImpl : IBinder, in cecDevType : int) : void
        Log.e(TAG, "cecDevType:" + cecDevType);
        Log.e(TAG, "Inside onCecServiceConnected() cecSrvImpl " + cecSrvImpl);
        if (null != cecSrvImpl) {
            switch (cecDevType) {
                case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV:
                    mITvCecService = ITvCecService.Stub.asInterface(cecSrvImpl);
                    if (null != mITvCecService) {
                        if (DEBUG) {
                            Log.d(TAG, "Retrive the real TvCecService"
                                  + " Impl succuss!");
                        }
                        try {
                            Message msg = HdmiCecTestActivity.this.mHandler.obtainMessage(
                                REQ_UPDATE_CEC_STATUS, (mITvCecService.isCECEnabled() ? 1:0), 0);
                            msg.sendToTarget();
                            int activeSrcAddr = mITvCecService.getActiveSourceAddress();
                            if (DEBUG) {
                                Log.d(TAG, "The output of getActiveSourceAddress is " +
                                    activeSrcAddr);
                            }
                            msg = HdmiCecTestActivity.this.mHandler.obtainMessage(
                                REQ_UPDATE_CEC_DEV_LIST, activeSrcAddr, 0,
                                mITvCecService.getListOfConnectedCECDevices());
                            msg.sendToTarget();
                        }
                        catch (RemoteException e) {
                            e.printStackTrace();
                            Log.e(TAG, "RemoteException thrown when sendUserControl()");
                        }

                        mICecServiceCallbacksInterface = new CecCallbacksBN() {
                            public void onHDMICECEnabled() {
                                if (DEBUG) {
                                    Log.d(TAG, "onHDMICECEnabled()");
                                }
                                try {
                                    Message msg = HdmiCecTestActivity.this.mHandler.obtainMessage(
                                        REQ_UPDATE_CEC_STATUS,
                                        (mITvCecService.isCECEnabled() ? 1:0), 0);
                                    msg.sendToTarget();
                                }
                                catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }

                            public void onHDMICECDisabled() {
                                if (DEBUG) {
                                    Log.d(TAG, "onHDMICECDisabled()");
                                }
                                try {
                                    Message msg = HdmiCecTestActivity.this.mHandler.obtainMessage(
                                        REQ_UPDATE_CEC_STATUS,
                                        (mITvCecService.isCECEnabled() ? 1:0), 0);
                                    msg.sendToTarget();
                                }
                                catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }

                            public void onHDMIScanStarted() {
                            }

                            public void onHDMIScanStopped() {
                            }

                            public void onHDMIScanCompleted() {
                            }

                            public void onHDMICECDeviceUpdated(int eventID,
                                List<CECDevInfo> cecDevList) {
                                if (DEBUG) {
                                    Log.d(TAG, "onHDMICECDeviceUpdated(eventID:"
                                    + eventID
                                    + " deviceList:"
                                    + cecDevList
                                    + ")");
                                }
                                try {
                                    int activeSrcAddr = mITvCecService.getActiveSourceAddress();
                                    if (DEBUG) {
                                        Log.d(TAG, "The output of getActiveSourceAddress is " +
                                            activeSrcAddr);
                                    }
                                    Message msg = HdmiCecTestActivity.this.mHandler.obtainMessage(
                                        REQ_UPDATE_CEC_DEV_LIST, activeSrcAddr, 0, cecDevList);
                                    msg.sendToTarget();
                                }
                                catch (RemoteException e) {
                                    e.printStackTrace();
                                }
                            }
                        };
                        try {
                            mITvCecService.registerCecCallBack(mICecServiceCallbacksInterface);
                        }
                        catch (RemoteException e) {
                            e.printStackTrace();
                            Log.e(TAG, "RemoteException thrown when registerCecCallBack()");
                        }
                    }
                    break;
                default:
                    Log.e(TAG, "Cec device type incorrect!!!");
                    break;
            }
        }
!!!12076940.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        mCecManager.registerCecSrvConnectionListener(this);
        setContentView(R.layout.activity_main);
        getActionBar().setDisplayHomeAsUpEnabled(true);
        Log.e(TAG, " setContentView() called!");

        final EditText keycodeEdit =  (EditText)findViewById(R.id.uccodeinput);
        final EditText targetDevEdit =  (EditText)findViewById(R.id.targetdev);
        // for sending user control button
        Button sendBtn = (Button)findViewById(R.id.send);
        if(null != sendBtn) {
            sendBtn.setOnClickListener(new OnClickListener() {
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    final int keycode = Integer.parseInt(keycodeEdit.getText().toString(), 16);
                    final int targetdev = Integer.parseInt(targetDevEdit.getText().toString());
                    Log.i(TAG, "User's input is:\nkeycode:" + keycode + " targetdev:" + targetdev);
                    if (null != mITvCecService) {
                        try {
                            mITvCecService.sendUserControl(targetdev, 0, keycode);
                            mHandler.postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    try {
                                        mITvCecService.sendUserControl(targetdev, 1, keycode);
                                    }
                                    catch (RemoteException e) {
                                        e.printStackTrace();
                                        Log.e(TAG, "RemoteException thrown when sendUserControl()");
                                    }
                                }
                            }, 20);
                        } catch (RemoteException e) {
                            e.printStackTrace();
                            Log.e(TAG, "RemoteException thrown when sendUserControl()!!!");
                        }
                    }
                }
            });
        }

        // for retrieving cec device inf list button
        Button retriCecDevInfoBtn = (Button)findViewById(R.id.retrieveDevinfo);
        final TextView devInfoListText = mDevInfoListText =
            (TextView)findViewById(R.id.deviceInfoText);
        mCecStatusText = (TextView)findViewById(R.id.cecstatustext);
        mCecActiveSrcText = (TextView)findViewById(R.id.cecactivesrctext);
        if(null != retriCecDevInfoBtn && null != devInfoListText) {
            retriCecDevInfoBtn.setOnClickListener(new OnClickListener() {
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    if (null != mITvCecService) {
                        try {
                            updateCecDeviceList(mITvCecService.getListOfConnectedCECDevices(), -1);
                        }
                        catch (RemoteException re) {
                            Log.e(TAG, "RemoteException re occured!");
                        }
                    }
                }
            });
        }

        // for GetOSDName button
        Button getOSDNameBtn = (Button)findViewById(R.id.getOSDNameBtn);
        final TextView targetDevTextView = (TextView)findViewById(R.id.targetDev);
        final TextView OSDNameTextView = (TextView)findViewById(R.id.OSDName);
        if(null != getOSDNameBtn && null != targetDevTextView) {
            getOSDNameBtn.setOnClickListener(new OnClickListener() {
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    if (null != mITvCecService) {
                        try {
                            String OSDName = mITvCecService.getOsdNameOfDevice(
                                Integer.valueOf(targetDevTextView.getText().toString()).intValue());
                            OSDNameTextView.setText(OSDName);
                        }
                        catch (RemoteException re) {
                            Log.e(TAG, "RemoteException re occured!" + re);
                        }
                        catch (NumberFormatException e) {
                            Log.e(TAG, "NumberFormatException re occured!" + e);
                        }
                    }
                }
            });
        }

        // for sendStandby button
        Button sendStandbyBtn = (Button)findViewById(R.id.sendStandbyBtn);
        if (null != sendStandbyBtn) {
            sendStandbyBtn.setOnClickListener(new OnClickListener() {
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    if (null != mITvCecService) {
                        try {
                            mITvCecService.sendTargetDeviceToStandy(
                                HdmiCecUtils.BROADCAST_ADDRESS_OF_STANDBY_REQUEST);
                        }
                        catch (RemoteException re) {
                            Log.e(TAG, "RemoteException re occured!" + re);
                        }
                    }
                }
            });
        }
!!!12077068.java!!!	updateCecFunctionStatus(in newStatus : int) : void
        if (null != mCecStatusText) {
            if (1 == newStatus) {
                mCecStatusText.setText("Enabled");
            }
            else {
                mCecStatusText.setText("Disabled");
            }
        }
!!!12077196.java!!!	updateCecDeviceList(inout cecDeviceList : List<CECDevInfo>, in activeSrcAddr : int) : void
        String devList = "";
        int i = 0;
        if (null != cecDeviceList) {
            for (CECDevInfo devinfo : cecDeviceList) {
                devList += "The NO. " + i + " devinfo:" + devinfo + "\n";
                ++i;
            }
        }
        mDevInfoListText.setText(devList);
        mCecActiveSrcText.setText(-1 == activeSrcAddr ? "Unknown" : String.valueOf(activeSrcAddr));
!!!12077324.java!!!	onCreateOptionsMenu(inout menu : Menu) : boolean
        getMenuInflater().inflate(R.menu.activity_main, menu);
        return true;
!!!12077452.java!!!	onDestroy() : void
        super.onDestroy();
        if (null != mCecManager) {
            mCecManager.unregisterCecSrvConnectionListener(this);
            mCecManager = null;
        }
        if (null != mITvCecService && null != mICecServiceCallbacksInterface) {
            try {
                mITvCecService.unregisterCecCallBack(mICecServiceCallbacksInterface);
            }
            catch (RemoteException e) {
                e.printStackTrace();
                Log.e(TAG, "RemoteException thrown when unregisterCecCallBack()");
            }
            mICecServiceCallbacksInterface = null;
        }
