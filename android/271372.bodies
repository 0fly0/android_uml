class MidiMetadataRetriever
!!!526860.cpp!!!	setDataSource(in url : char, in headers : KeyedVector<String8, String8>) : status_t
    ALOGV("setDataSource: %s", url? url: "NULL pointer");
    Mutex::Autolock lock(mLock);
    clearMetadataValues();
    if (mMidiPlayer == 0) {
        mMidiPlayer = new MidiFile();
    }
    return mMidiPlayer->setDataSource(url, headers);
!!!526988.cpp!!!	setDataSource(in fd : int, in offset : int64_t, in length : int64_t) : status_t
    ALOGV("setDataSource: fd(%d), offset(%lld), and length(%lld)", fd, offset, length);
    Mutex::Autolock lock(mLock);
    clearMetadataValues();
    if (mMidiPlayer == 0) {
        mMidiPlayer = new MidiFile();
    }
    return mMidiPlayer->setDataSource(fd, offset, length);;
!!!527116.cpp!!!	extractMetadata(in keyCode : int) : char
    ALOGV("extractMetdata: key(%d)", keyCode);
    Mutex::Autolock lock(mLock);
    if (mMidiPlayer == 0 || mMidiPlayer->initCheck() != NO_ERROR) {
        ALOGE("Midi player is not initialized yet");
        return NULL;
    }
    switch (keyCode) {
    case METADATA_KEY_DURATION:
        {
            if (mMetadataValues[0][0] == '\0') {
                int duration = -1;
                if (mMidiPlayer->getDuration(&duration) != NO_ERROR) {
                    ALOGE("failed to get duration");
                    return NULL;
                }
                snprintf(mMetadataValues[0], MAX_METADATA_STRING_LENGTH, "%d", duration);
            }

            ALOGV("duration: %s ms", mMetadataValues[0]);
            return mMetadataValues[0];
        }
    default:
        ALOGE("Unsupported key code (%d)", keyCode);
        return NULL;
    }
    return NULL;
!!!527244.cpp!!!	clearMetadataValues() : void
    ALOGV("clearMetadataValues");
    mMetadataValues[0][0] = '\0';
