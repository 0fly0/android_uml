class MediaCodecView
!!!12720268.java!!!	MediaCodecView(inout context : Context)
        super(context);
        initMediaCodecView();
!!!12720396.java!!!	MediaCodecView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
        initMediaCodecView();
!!!12720524.java!!!	MediaCodecView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
        initMediaCodecView();
!!!12720652.java!!!	initMediaCodecView() : void
        mState = STATE_IDLE;

        mHandler = new Handler() {
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case EVENT_PREPARE:
                    {
                        try {
                            prepare();
                            start();
                        } catch (IOException e) {
                            Log.d(TAG, "prepare failed.");
                        } catch (MediaCryptoException e) {
                            Log.d(TAG, "failed to initialize crypto.");
                        }
                        break;
                    }

                    case EVENT_DO_SOME_WORK:
                    {
                        try {
                            doSomeWork();
                            mHandler.sendMessageDelayed(
                                    mHandler.obtainMessage(EVENT_DO_SOME_WORK), 5);
                        } catch (IllegalStateException e) {
                            Log.w(TAG, "doSomeWork() failed. "+ e.toString());
                            mHandler.removeMessages(EVENT_DO_SOME_WORK);
                            reset();
                        }
                        break;
                    }

                    default:
                        break;
                }
            }
        };
!!!12720780.java!!!	setDataSource(inout context : Context, inout uri : Uri, inout headers : Map<String, String>, inout encrypted : boolean) : void
        reset();

        mContext = context;
        mUri = uri;
        mHeaders = headers;
        mEncrypted = encrypted;
!!!12720908.java!!!	prepare() : void
        if (mEncrypted) {
            UUID uuid = new UUID(
                    (long)0xedef8ba979d64aceL, (long)0xa3c827dcd51d21edL);

            try {
                mCrypto = new MediaCrypto(uuid, null);
            } catch (MediaCryptoException e) {
                reset();

                throw e;
            }
        }

        try {
            mExtractor = new MediaExtractor();

            mExtractor.setDataSource(mContext, mUri, mHeaders);
        } catch (IOException e) {
            reset();

            throw e;
        }

        mCodecStates = new HashMap();

        boolean haveAudio = false;
        boolean haveVideo = false;
        for (int i = mExtractor.getTrackCount(); i-- > 0;) {
            MediaFormat format = mExtractor.getTrackFormat(i);
            Log.d(TAG, "track format #" + i + " is " + format);

            String mime = format.getString(MediaFormat.KEY_MIME);

            boolean isVideo = mime.startsWith("video/");
            boolean isAudio = mime.startsWith("audio/");

            if (!haveAudio && isAudio || !haveVideo && isVideo) {
                mExtractor.selectTrack(i);
                addTrack(i, format, mEncrypted);

                if (isAudio) {
                    haveAudio = true;
                } else {
                    haveVideo = true;
                }

                if (format.containsKey(MediaFormat.KEY_DURATION)) {
                    long durationUs = format.getLong(MediaFormat.KEY_DURATION);

                    if (durationUs > mDurationUs) {
                        mDurationUs = durationUs;
                    }
                }

                if (haveAudio && haveVideo) {
                    break;
                }
            }
        }

        mState = STATE_PAUSED;
!!!12721036.java!!!	getSecureDecoderNameForMime(in mime : String) : String
        int n = MediaCodecList.getCodecCount();
        for (int i = 0; i < n; ++i) {
            MediaCodecInfo info = MediaCodecList.getCodecInfoAt(i);

            if (info.isEncoder()) {
                continue;
            }

            String[] supportedTypes = info.getSupportedTypes();

            for (int j = 0; j < supportedTypes.length; ++j) {
                if (supportedTypes[j].equalsIgnoreCase(mime)) {
                    return info.getName() + ".secure";
                }
            }
        }

        return null;
!!!12721164.java!!!	addTrack(in trackIndex : int, inout format : MediaFormat, inout encrypted : boolean) : void
        String mime = format.getString(MediaFormat.KEY_MIME);

        boolean isVideo = mime.startsWith("video/");

        MediaCodec codec;

        if (encrypted && mCrypto.requiresSecureDecoderComponent(mime)) {
            codec = MediaCodec.createByCodecName(
                    getSecureDecoderNameForMime(mime));
        } else {
            //codec = MediaCodec.createByCodecName("OMX.SEC.vp8.dec");
            //codec = MediaCodec.createByCodecName("OMX.SEC.VP8.Decoder");
            //codec = MediaCodec.createByCodecName("OMX.Exynos.VP8.Decoder");
            //codec = MediaCodec.createByCodecName("OMX.google.vpx.decoder");
            //codec = MediaCodec.createByCodecName("OMX.google.h264.decoder");
            codec = MediaCodec.createDecoderByType(mime);
        }

        codec.configure(
                format,
                isVideo ? getHolder().getSurface() : null,
                mCrypto,
                0);

        CodecState state =
            new CodecState(this, mExtractor, trackIndex, format, codec);

        mCodecStates.put(new Integer(trackIndex), state);
!!!12721292.java!!!	start() : void
        Log.d(TAG, "start");

        if (mState == STATE_PLAYING || mState == STATE_PREPARING) {
            return;
        } else if (mState == STATE_IDLE) {
            mState = STATE_PREPARING;
            mHandler.sendMessage(mHandler.obtainMessage(EVENT_PREPARE));
            return;
        } else if (mState != STATE_PAUSED) {
            throw new IllegalStateException();
        }

        for (CodecState state : mCodecStates.values()) {
            state.start();
        }

        mHandler.sendMessage(mHandler.obtainMessage(EVENT_DO_SOME_WORK));

        mDeltaTimeUs = -1;
        mState = STATE_PLAYING;

        if (mMediaController != null) {
            mMediaController.show();
        }
!!!12721420.java!!!	pause() : void
        Log.d(TAG, "pause");

        if (mState == STATE_PAUSED) {
            return;
        } else if (mState != STATE_PLAYING) {
            throw new IllegalStateException();
        }

        mHandler.removeMessages(EVENT_DO_SOME_WORK);

        for (CodecState state : mCodecStates.values()) {
            state.pause();
        }

        mState = STATE_PAUSED;
!!!12721548.java!!!	reset() : void
        if (mState == STATE_PLAYING) {
            pause();
        }

        if (mCodecStates != null) {
            for (CodecState state : mCodecStates.values()) {
                state.release();
            }
            mCodecStates = null;
        }

        if (mExtractor != null) {
            mExtractor.release();
            mExtractor = null;
        }

        if (mCrypto != null) {
            mCrypto.release();
            mCrypto = null;
        }

        mDurationUs = -1;
        mState = STATE_IDLE;
!!!12721676.java!!!	setMediaController(inout ctrl : MediaController) : void
        mMediaController = ctrl;
        attachMediaController();
!!!12721804.java!!!	attachMediaController() : void
        View anchorView =
            this.getParent() instanceof View ?  (View)this.getParent() : this;

        mMediaController.setMediaPlayer(this);
        mMediaController.setAnchorView(anchorView);
        mMediaController.setEnabled(true);
!!!12721932.java!!!	doSomeWork() : void
        for (CodecState state : mCodecStates.values()) {
            state.doSomeWork();
        }
!!!12722060.java!!!	getRealTimeUsForMediaTime(in mediaTimeUs : long) : long
        if (mDeltaTimeUs == -1) {
            long nowUs = System.currentTimeMillis() * 1000;
            mDeltaTimeUs = nowUs - mediaTimeUs;
        }

        return mDeltaTimeUs + mediaTimeUs;
!!!12722188.java!!!	getDuration() : int
        return (int)((mDurationUs + 500) / 1000);
!!!12722316.java!!!	getCurrentPosition() : int
        long positionUs = 0;

        for (CodecState state : mCodecStates.values()) {
            long trackPositionUs = state.getCurrentPositionUs();

            if (trackPositionUs > positionUs) {
                positionUs = trackPositionUs;
            }
        }

        return (int)((positionUs + 500) / 1000);
!!!12722444.java!!!	seekTo(in timeMs : int) : void
        if (mState != STATE_PLAYING && mState != STATE_PAUSED) {
            return;
        }

        mExtractor.seekTo(timeMs * 1000, MediaExtractor.SEEK_TO_CLOSEST_SYNC);

        for (CodecState state : mCodecStates.values()) {
            state.flush();
        }

        mDeltaTimeUs = -1;
!!!12722572.java!!!	isPlaying() : boolean
        return mState == STATE_PLAYING;
!!!12722700.java!!!	getBufferPercentage() : int
        long cachedDurationUs = mExtractor.getCachedDuration();

        if (cachedDurationUs < 0 || mDurationUs < 0) {
            return 0;
        }

        int nowMs = getCurrentPosition();

        int percentage =
            100 * (nowMs + (int)(cachedDurationUs / 1000))
                / (int)(mDurationUs / 1000);

        if (percentage > 100) {
            percentage = 100;
        }

        return percentage;
!!!12722828.java!!!	canPause() : boolean
        return true;
!!!12722956.java!!!	canSeekBackward() : boolean
        return true;
!!!12723084.java!!!	canSeekForward() : boolean
        return true;
!!!12723212.java!!!	toggleMediaControlsVisiblity() : void
        if (mMediaController.isShowing()) {
            mMediaController.hide();
        } else {
            mMediaController.show();
        }
!!!12723340.java!!!	onTouchEvent(inout ev : MotionEvent) : boolean
        if (mState != STATE_IDLE && mMediaController != null) {
            toggleMediaControlsVisiblity();
        }
        return false;
