class PIPTestActivity
!!!12732428.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        setLongPressBackToExit(true);

        setContentView(R.layout.piptest);

        mToggleButton = (Button) findViewById(R.id.toggle_pip_button);
        mToggleButton.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                    togglePip();
                }
            });

        mSizeButton = (Button) findViewById(R.id.size_button);
        mSizeButton.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                    toggleSize();
                }
            });

        mPositionButton = (Button) findViewById(R.id.position_button);
        mPositionButton.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                    movePip();
                }
            });

        mConnection = new PIPServiceConnection(this) {
                @Override
                public void onConnected() {
                    try {
                        getBoundService().saveWindowGeometry();
                    } catch (RemoteException ex) {
                        Log.e(LOG_TAG, "Error saving window geometry", ex);
                    }
                }
            };
        Log.d(LOG_TAG, "Connecting to PIP Service");
        mConnection.connect();
!!!12732556.java!!!	onDestroy() : void

        try {
            Log.d(LOG_TAG, "trying to restore window geometry");
            mConnection.getBoundService().restoreWindowGeometry();
        }  catch (RemoteException ex) {
            Log.e(LOG_TAG, "Error restoring window geometry", ex);
        }

        mConnection.disconnect();
        mConnection = null;

        super.onDestroy();
!!!12732684.java!!!	togglePip() : void
        try {
            boolean visible = mConnection.getBoundService().isWindowVisible();
            mConnection.getBoundService().setWindowVisible(!visible);
        } catch (RemoteException ex) {
            Log.e(LOG_TAG, "Remote exception", ex);
        }
!!!12732812.java!!!	toggleSize() : void
        try {
            int size = mConnection.getBoundService().getWindowSize();
            if (size == PIPConstants.SMALL) {
                size = PIPConstants.LARGE;
            } else {
                size = PIPConstants.SMALL;
            }

            mConnection.getBoundService().setWindowSize(size);
        } catch (RemoteException ex) {
            Log.e(LOG_TAG, "Remote exception", ex);
        }
!!!12732940.java!!!	movePip() : void
        try {
            int pos = mConnection.getBoundService().getWindowPosition();
            ++pos;
            if (pos > PIPConstants.TOP_LEFT) {
                pos = PIPConstants.TOP_RIGHT;
            }
            mConnection.getBoundService().setWindowPosition(pos);
        } catch (RemoteException ex) {
            Log.e(LOG_TAG, "Remote exception", ex);
        }
