class LocalSocketImpl
!!!3622156.java!!!	LocalSocketImpl(inout fd : FileDescriptor)
        this.fd = fd;
!!!3622284.java!!!	toString() : String
        return super.toString() + " fd:" + fd;
!!!3622412.java!!!	create(inout stream : boolean) : void
        // no error if socket already created
        // need this for LocalServerSocket.accept()
        if (fd == null) {
            fd = create_native(stream);
        }
!!!3622540.java!!!	close() : void
        synchronized (LocalSocketImpl.this) {
            if (fd == null) return;
            close_native(fd);
            fd = null;
        }
!!!3622668.java!!!	connect(inout address : LocalSocketAddress, in timeout : int) : void
        
        if (fd == null) {
            throw new IOException("socket not created");
        }

        connectLocal(fd, address.getName(), address.getNamespace().getId());
!!!3622796.java!!!	bind(inout endpoint : LocalSocketAddress) : void
        if (fd == null) {
            throw new IOException("socket not created");
        }

        bindLocal(fd, endpoint.getName(), endpoint.getNamespace().getId());
!!!3622924.java!!!	listen(in backlog : int) : void
        if (fd == null) {
            throw new IOException("socket not created");
        }

        listen_native(fd, backlog);
!!!3623052.java!!!	accept(inout s : LocalSocketImpl) : void
        if (fd == null) {
            throw new IOException("socket not created");
        }

        s.fd = accept(fd, s);
!!!3623180.java!!!	getInputStream() : InputStream
        if (fd == null) {
            throw new IOException("socket not created");
        }

        synchronized (this) {
            if (fis == null) {
                fis = new SocketInputStream();
            }

            return fis;
        }
!!!3623308.java!!!	getOutputStream() : OutputStream
 
        if (fd == null) {
            throw new IOException("socket not created");
        }

        synchronized (this) {
            if (fos == null) {
                fos = new SocketOutputStream();
            }

            return fos;
        }
!!!3623436.java!!!	available() : int
        return getInputStream().available();
!!!3623564.java!!!	shutdownInput() : void
        if (fd == null) {
            throw new IOException("socket not created");
        }

        shutdown(fd, true);
!!!3623692.java!!!	shutdownOutput() : void
        if (fd == null) {
            throw new IOException("socket not created");
        }

        shutdown(fd, false);
!!!3623820.java!!!	getFileDescriptor() : FileDescriptor
        return fd;
!!!3623948.java!!!	supportsUrgentData() : boolean
        return false;
!!!3624076.java!!!	sendUrgentData(in data : int) : void
        throw new RuntimeException ("not impled");
!!!3624204.java!!!	getOption(in optID : int) : Object
        if (fd == null) {
            throw new IOException("socket not created");
        }

        if (optID == SocketOptions.SO_TIMEOUT) {
            return 0;
        }
        
        int value = getOption_native(fd, optID);
        switch (optID)
        {
            case SocketOptions.SO_RCVBUF:
            case SocketOptions.SO_SNDBUF:
                return value;
            case SocketOptions.SO_REUSEADDR:
            default:
                return value;
        }
!!!3624332.java!!!	setOption(in optID : int, inout value : Object) : void
        /*
         * Boolean.FALSE is used to disable some options, so it
         * is important to distinguish between FALSE and unset.
         * We define it here that -1 is unset, 0 is FALSE, and 1
         * is TRUE.
         */
        int boolValue = -1;
        int intValue = 0;

        if (fd == null) {
            throw new IOException("socket not created");
        }

        if (value instanceof Integer) {
            intValue = (Integer)value;
        } else if (value instanceof Boolean) {
            boolValue = ((Boolean) value)? 1 : 0;
        } else {
            throw new IOException("bad value: " + value);
        }

        setOption_native(fd, optID, boolValue, intValue);
!!!3624460.java!!!	setFileDescriptorsForSend(inout fds : FileDescriptor) : void
        synchronized(writeMonitor) {
            outboundFileDescriptors = fds;
        }
!!!3624588.java!!!	getAncillaryFileDescriptors() : FileDescriptor
        synchronized(readMonitor) {
            FileDescriptor[] result = inboundFileDescriptors;

            inboundFileDescriptors = null;
            return result;
        }
!!!3624716.java!!!	getPeerCredentials() : Credentials
        return getPeerCredentials_native(fd);
!!!3624844.java!!!	getSockAddress() : LocalSocketAddress
        return null;
        //TODO implement this
        //return getSockName_native(fd);
!!!3624972.java!!!	finalize() : void
        close();
