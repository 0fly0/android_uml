class WebViewInputDispatcher
!!!5068812.java!!!	WebViewInputDispatcher(inout uiCallbacks : UiCallbacks, inout webKitCallbacks : WebKitCallbacks)
        this.mUiCallbacks = uiCallbacks;
        mUiHandler = new UiHandler(uiCallbacks.getUiLooper());

        this.mWebKitCallbacks = webKitCallbacks;
        mWebKitHandler = new WebKitHandler(webKitCallbacks.getWebKitLooper());

        ViewConfiguration config = ViewConfiguration.get(mUiCallbacks.getContext());
        mDoubleTapSlopSquared = config.getScaledDoubleTapSlop();
        mDoubleTapSlopSquared = (mDoubleTapSlopSquared * mDoubleTapSlopSquared);
        mTouchSlopSquared = config.getScaledTouchSlop();
        mTouchSlopSquared = (mTouchSlopSquared * mTouchSlopSquared);
!!!5068940.java!!!	setWebKitWantsTouchEvents(inout enable : boolean) : void
        if (DEBUG) {
            Log.d(TAG, "webkitWantsTouchEvents: " + enable);
        }
        synchronized (mLock) {
            if (mPostSendTouchEventsToWebKit != enable) {
                if (!enable) {
                    enqueueWebKitCancelTouchEventIfNeededLocked();
                }
                mPostSendTouchEventsToWebKit = enable;
            }
        }
!!!5069068.java!!!	postPointerEvent(inout event : MotionEvent, in webKitXOffset : int, in webKitYOffset : int, in webKitScale : float) : boolean
        if (event == null) {
            throw new IllegalArgumentException("event cannot be null");
        }

        if (DEBUG) {
            Log.d(TAG, "postPointerEvent: " + event);
        }

        final int action = event.getActionMasked();
        final int eventType;
        switch (action) {
            case MotionEvent.ACTION_DOWN:
            case MotionEvent.ACTION_MOVE:
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_POINTER_DOWN:
            case MotionEvent.ACTION_POINTER_UP:
            case MotionEvent.ACTION_CANCEL:
                eventType = EVENT_TYPE_TOUCH;
                break;
            case MotionEvent.ACTION_SCROLL:
                eventType = EVENT_TYPE_SCROLL;
                break;
            case MotionEvent.ACTION_HOVER_ENTER:
            case MotionEvent.ACTION_HOVER_MOVE:
            case MotionEvent.ACTION_HOVER_EXIT:
                eventType = EVENT_TYPE_HOVER;
                break;
            default:
                return false; // currently unsupported event type
        }

        synchronized (mLock) {
            // Ensure that the event is consistent and should be delivered.
            MotionEvent eventToEnqueue = event;
            if (eventType == EVENT_TYPE_TOUCH) {
                eventToEnqueue = mPostTouchStream.update(event);
                if (eventToEnqueue == null) {
                    if (DEBUG) {
                        Log.d(TAG, "postPointerEvent: dropped event " + event);
                    }
                    unscheduleLongPressLocked();
                    unscheduleClickLocked();
                    hideTapCandidateLocked();
                    return false;
                }

                if (action == MotionEvent.ACTION_DOWN && mPostSendTouchEventsToWebKit) {
                    if (mUiCallbacks.shouldInterceptTouchEvent(eventToEnqueue)) {
                        mPostDoNotSendTouchEventsToWebKitUntilNextGesture = true;
                    } else if (mPostDoNotSendTouchEventsToWebKitUntilNextGesture) {
                        // Recover from a previous web kit timeout.
                        mPostDoNotSendTouchEventsToWebKitUntilNextGesture = false;
                    }
                }
            }

            // Copy the event because we need to retain ownership.
            if (eventToEnqueue == event) {
                eventToEnqueue = event.copy();
            }

            DispatchEvent d = obtainDispatchEventLocked(eventToEnqueue, eventType, 0,
                    webKitXOffset, webKitYOffset, webKitScale);
            updateStateTrackersLocked(d, event);
            enqueueEventLocked(d);
        }
        return true;
!!!5069196.java!!!	scheduleLongPressLocked() : void
        unscheduleLongPressLocked();
        mPostLongPressScheduled = true;
        mUiHandler.sendEmptyMessageDelayed(UiHandler.MSG_LONG_PRESS,
                LONG_PRESS_TIMEOUT);
!!!5069324.java!!!	unscheduleLongPressLocked() : void
        if (mPostLongPressScheduled) {
            mPostLongPressScheduled = false;
            mUiHandler.removeMessages(UiHandler.MSG_LONG_PRESS);
        }
!!!5069452.java!!!	postLongPress() : void
        synchronized (mLock) {
            if (!mPostLongPressScheduled) {
                return;
            }
            mPostLongPressScheduled = false;

            MotionEvent event = mPostTouchStream.getLastEvent();
            if (event == null) {
                return;
            }

            switch (event.getActionMasked()) {
                case MotionEvent.ACTION_DOWN:
                case MotionEvent.ACTION_MOVE:
                case MotionEvent.ACTION_POINTER_DOWN:
                case MotionEvent.ACTION_POINTER_UP:
                    break;
                default:
                    return;
            }

            MotionEvent eventToEnqueue = MotionEvent.obtainNoHistory(event);
            eventToEnqueue.setAction(MotionEvent.ACTION_MOVE);
            DispatchEvent d = obtainDispatchEventLocked(eventToEnqueue, EVENT_TYPE_LONG_PRESS, 0,
                    mPostLastWebKitXOffset, mPostLastWebKitYOffset, mPostLastWebKitScale);
            enqueueEventLocked(d);
        }
!!!5069580.java!!!	hideTapCandidateLocked() : void
        unscheduleHideTapHighlightLocked();
        unscheduleShowTapHighlightLocked();
        mUiCallbacks.showTapHighlight(false);
!!!5069708.java!!!	showTapCandidateLocked() : void
        unscheduleHideTapHighlightLocked();
        unscheduleShowTapHighlightLocked();
        mUiCallbacks.showTapHighlight(true);
!!!5069836.java!!!	scheduleShowTapHighlightLocked() : void
        unscheduleShowTapHighlightLocked();
        mPostShowTapHighlightScheduled = true;
        mUiHandler.sendEmptyMessageDelayed(UiHandler.MSG_SHOW_TAP_HIGHLIGHT,
                TAP_TIMEOUT);
!!!5069964.java!!!	unscheduleShowTapHighlightLocked() : void
        if (mPostShowTapHighlightScheduled) {
            mPostShowTapHighlightScheduled = false;
            mUiHandler.removeMessages(UiHandler.MSG_SHOW_TAP_HIGHLIGHT);
        }
!!!5070092.java!!!	scheduleHideTapHighlightLocked() : void
        unscheduleHideTapHighlightLocked();
        mPostHideTapHighlightScheduled = true;
        mUiHandler.sendEmptyMessageDelayed(UiHandler.MSG_HIDE_TAP_HIGHLIGHT,
                PRESSED_STATE_DURATION);
!!!5070220.java!!!	unscheduleHideTapHighlightLocked() : void
        if (mPostHideTapHighlightScheduled) {
            mPostHideTapHighlightScheduled = false;
            mUiHandler.removeMessages(UiHandler.MSG_HIDE_TAP_HIGHLIGHT);
        }
!!!5070348.java!!!	postShowTapHighlight(inout show : boolean) : void
        synchronized (mLock) {
            if (show) {
                if (!mPostShowTapHighlightScheduled) {
                    return;
                }
                mPostShowTapHighlightScheduled = false;
            } else {
                if (!mPostHideTapHighlightScheduled) {
                    return;
                }
                mPostHideTapHighlightScheduled = false;
            }
            mUiCallbacks.showTapHighlight(show);
        }
!!!5070476.java!!!	scheduleClickLocked() : void
        unscheduleClickLocked();
        mPostClickScheduled = true;
        mUiHandler.sendEmptyMessageDelayed(UiHandler.MSG_CLICK, DOUBLE_TAP_TIMEOUT);
!!!5070604.java!!!	unscheduleClickLocked() : void
        if (mPostClickScheduled) {
            mPostClickScheduled = false;
            mUiHandler.removeMessages(UiHandler.MSG_CLICK);
        }
!!!5070732.java!!!	postClick() : void
        synchronized (mLock) {
            if (!mPostClickScheduled) {
                return;
            }
            mPostClickScheduled = false;

            MotionEvent event = mPostTouchStream.getLastEvent();
            if (event == null || event.getAction() != MotionEvent.ACTION_UP) {
                return;
            }

            showTapCandidateLocked();
            MotionEvent eventToEnqueue = MotionEvent.obtainNoHistory(event);
            DispatchEvent d = obtainDispatchEventLocked(eventToEnqueue, EVENT_TYPE_CLICK, 0,
                    mPostLastWebKitXOffset, mPostLastWebKitYOffset, mPostLastWebKitScale);
            enqueueEventLocked(d);
        }
!!!5070860.java!!!	checkForDoubleTapOnDownLocked(inout event : MotionEvent) : void
        mIsDoubleTapCandidate = false;
        if (!mPostClickScheduled) {
            return;
        }
        int deltaX = (int) mInitialDownX - (int) event.getX();
        int deltaY = (int) mInitialDownY - (int) event.getY();
        if ((deltaX * deltaX + deltaY * deltaY) < mDoubleTapSlopSquared) {
            unscheduleClickLocked();
            mIsDoubleTapCandidate = true;
        }
!!!5070988.java!!!	isClickCandidateLocked(inout event : MotionEvent) : boolean
        if (event == null
                || event.getActionMasked() != MotionEvent.ACTION_UP
                || !mIsTapCandidate) {
            return false;
        }
        long downDuration = event.getEventTime() - event.getDownTime();
        return downDuration < LONG_PRESS_TIMEOUT;
!!!5071116.java!!!	enqueueDoubleTapLocked(inout event : MotionEvent) : void
        MotionEvent eventToEnqueue = MotionEvent.obtainNoHistory(event);
        DispatchEvent d = obtainDispatchEventLocked(eventToEnqueue, EVENT_TYPE_DOUBLE_TAP, 0,
                mPostLastWebKitXOffset, mPostLastWebKitYOffset, mPostLastWebKitScale);
        enqueueEventLocked(d);
!!!5071244.java!!!	enqueueHitTestLocked(inout event : MotionEvent) : void
        mUiCallbacks.clearPreviousHitTest();
        MotionEvent eventToEnqueue = MotionEvent.obtainNoHistory(event);
        DispatchEvent d = obtainDispatchEventLocked(eventToEnqueue, EVENT_TYPE_HIT_TEST, 0,
                mPostLastWebKitXOffset, mPostLastWebKitYOffset, mPostLastWebKitScale);
        enqueueEventLocked(d);
!!!5071372.java!!!	checkForSlopLocked(inout event : MotionEvent) : void
        if (!mIsTapCandidate) {
            return;
        }
        int deltaX = (int) mInitialDownX - (int) event.getX();
        int deltaY = (int) mInitialDownY - (int) event.getY();
        if ((deltaX * deltaX + deltaY * deltaY) > mTouchSlopSquared) {
            unscheduleLongPressLocked();
            mIsTapCandidate = false;
            hideTapCandidateLocked();
        }
!!!5071500.java!!!	updateStateTrackersLocked(inout d : DispatchEvent, inout event : MotionEvent) : void
        mPostLastWebKitXOffset = d.mWebKitXOffset;
        mPostLastWebKitYOffset = d.mWebKitYOffset;
        mPostLastWebKitScale = d.mWebKitScale;
        int action = event != null ? event.getAction() : MotionEvent.ACTION_CANCEL;
        if (d.mEventType != EVENT_TYPE_TOUCH) {
            return;
        }

        if (action == MotionEvent.ACTION_CANCEL
                || event.getPointerCount() > 1) {
            unscheduleLongPressLocked();
            unscheduleClickLocked();
            hideTapCandidateLocked();
            mIsDoubleTapCandidate = false;
            mIsTapCandidate = false;
            hideTapCandidateLocked();
        } else if (action == MotionEvent.ACTION_DOWN) {
            checkForDoubleTapOnDownLocked(event);
            scheduleLongPressLocked();
            mIsTapCandidate = true;
            mInitialDownX = event.getX();
            mInitialDownY = event.getY();
            enqueueHitTestLocked(event);
            if (mIsDoubleTapCandidate) {
                hideTapCandidateLocked();
            } else {
                scheduleShowTapHighlightLocked();
            }
        } else if (action == MotionEvent.ACTION_UP) {
            unscheduleLongPressLocked();
            if (isClickCandidateLocked(event)) {
                if (mIsDoubleTapCandidate) {
                    hideTapCandidateLocked();
                    enqueueDoubleTapLocked(event);
                } else {
                    scheduleClickLocked();
                }
            } else {
                hideTapCandidateLocked();
            }
        } else if (action == MotionEvent.ACTION_MOVE) {
            checkForSlopLocked(event);
        }
!!!5071628.java!!!	dispatchWebKitEvents() : void
        dispatchWebKitEvents(false);
!!!5071756.java!!!	dispatchWebKitEvents(inout calledFromHandler : boolean) : void
        for (;;) {
            // Get the next event, but leave it in the queue so we can move it to the UI
            // queue if a timeout occurs.
            DispatchEvent d;
            MotionEvent event;
            final int eventType;
            int flags;
            synchronized (mLock) {
                if (!ENABLE_EVENT_BATCHING) {
                    drainStaleWebKitEventsLocked();
                }
                d = mWebKitDispatchEventQueue.mHead;
                if (d == null) {
                    if (mWebKitDispatchScheduled) {
                        mWebKitDispatchScheduled = false;
                        if (!calledFromHandler) {
                            mWebKitHandler.removeMessages(
                                    WebKitHandler.MSG_DISPATCH_WEBKIT_EVENTS);
                        }
                    }
                    return;
                }

                event = d.mEvent;
                if (event != null) {
                    event.offsetLocation(d.mWebKitXOffset, d.mWebKitYOffset);
                    event.scale(d.mWebKitScale);
                    d.mFlags |= FLAG_WEBKIT_TRANSFORMED_EVENT;
                }

                eventType = d.mEventType;
                if (eventType == EVENT_TYPE_TOUCH) {
                    event = mWebKitTouchStream.update(event);
                    if (DEBUG && event == null && d.mEvent != null) {
                        Log.d(TAG, "dispatchWebKitEvents: dropped event " + d.mEvent);
                    }
                }

                d.mFlags |= FLAG_WEBKIT_IN_PROGRESS;
                flags = d.mFlags;
            }

            // Handle the event.
            final boolean preventDefault;
            if (event == null) {
                preventDefault = false;
            } else {
                preventDefault = dispatchWebKitEvent(event, eventType, flags);
            }

            synchronized (mLock) {
                flags = d.mFlags;
                d.mFlags = flags & ~FLAG_WEBKIT_IN_PROGRESS;
                boolean recycleEvent = event != d.mEvent;

                if ((flags & FLAG_WEBKIT_TIMEOUT) != 0) {
                    // A timeout occurred!
                    recycleDispatchEventLocked(d);
                } else {
                    // Web kit finished in a timely manner.  Dequeue the event.
                    assert mWebKitDispatchEventQueue.mHead == d;
                    mWebKitDispatchEventQueue.dequeue();

                    updateWebKitTimeoutLocked();

                    if ((flags & FLAG_PRIVATE) != 0) {
                        // Event was intended for web kit only.  All done.
                        recycleDispatchEventLocked(d);
                    } else if (preventDefault) {
                        // Web kit has decided to consume the event!
                        if (d.mEventType == EVENT_TYPE_TOUCH) {
                            enqueueUiCancelTouchEventIfNeededLocked();
                            unscheduleLongPressLocked();
                        }
                    } else {
                        // Web kit is being friendly.  Pass the event to the UI.
                        enqueueUiEventUnbatchedLocked(d);
                    }
                }

                if (event != null && recycleEvent) {
                    event.recycle();
                }

                if (eventType == EVENT_TYPE_CLICK) {
                    scheduleHideTapHighlightLocked();
                }
            }
        }
!!!5071884.java!!!	dispatchWebKitEvent(inout event : MotionEvent, in eventType : int, in flags : int) : boolean
        if (DEBUG) {
            Log.d(TAG, "dispatchWebKitEvent: event=" + event
                    + ", eventType=" + eventType + ", flags=" + flags);
        }
        boolean preventDefault = mWebKitCallbacks.dispatchWebKitEvent(
                this, event, eventType, flags);
        if (DEBUG) {
            Log.d(TAG, "dispatchWebKitEvent: preventDefault=" + preventDefault);
        }
        return preventDefault;
!!!5072012.java!!!	isMoveEventLocked(inout d : DispatchEvent) : boolean
        return d.mEvent != null
                && d.mEvent.getActionMasked() == MotionEvent.ACTION_MOVE;
!!!5072140.java!!!	drainStaleWebKitEventsLocked() : void
        DispatchEvent d = mWebKitDispatchEventQueue.mHead;
        while (d != null && d.mNext != null
                && isMoveEventLocked(d)
                && isMoveEventLocked(d.mNext)) {
            DispatchEvent next = d.mNext;
            skipWebKitEventLocked(d);
            d = next;
        }
        mWebKitDispatchEventQueue.mHead = d;
!!!5072268.java!!!	skipWebkitForRemainingTouchStream() : void
        // Just treat this like a timeout
        handleWebKitTimeout();
!!!5072396.java!!!	handleWebKitTimeout() : void
        synchronized (mLock) {
            if (!mWebKitTimeoutScheduled) {
                return;
            }
            mWebKitTimeoutScheduled = false;

            if (DEBUG) {
                Log.d(TAG, "handleWebKitTimeout: timeout occurred!");
            }

            // Drain the web kit event queue.
            DispatchEvent d = mWebKitDispatchEventQueue.dequeueList();

            // If web kit was processing an event (must be at the head of the list because
            // it can only do one at a time), then clone it or ignore it.
            if ((d.mFlags & FLAG_WEBKIT_IN_PROGRESS) != 0) {
                d.mFlags |= FLAG_WEBKIT_TIMEOUT;
                if ((d.mFlags & FLAG_PRIVATE) != 0) {
                    d = d.mNext; // the event is private to web kit, ignore it
                } else {
                    d = copyDispatchEventLocked(d);
                    d.mFlags &= ~FLAG_WEBKIT_IN_PROGRESS;
                }
            }

            // Enqueue all non-private events for handling by the UI thread.
            while (d != null) {
                DispatchEvent next = d.mNext;
                skipWebKitEventLocked(d);
                d = next;
            }

            // Tell web kit to cancel all pending touches.
            // This also prevents us from sending web kit any more touches until the
            // next gesture begins.  (As required to ensure touch event stream consistency.)
            enqueueWebKitCancelTouchEventIfNeededLocked();
        }
!!!5072524.java!!!	skipWebKitEventLocked(inout d : DispatchEvent) : void
        d.mNext = null;
        if ((d.mFlags & FLAG_PRIVATE) != 0) {
            recycleDispatchEventLocked(d);
        } else {
            d.mFlags |= FLAG_WEBKIT_TIMEOUT;
            enqueueUiEventUnbatchedLocked(d);
        }
!!!5072652.java!!!	dispatchUiEvents() : void
        dispatchUiEvents(false);
!!!5072780.java!!!	dispatchUiEvents(inout calledFromHandler : boolean) : void
        for (;;) {
            MotionEvent event;
            final int eventType;
            final int flags;
            synchronized (mLock) {
                DispatchEvent d = mUiDispatchEventQueue.dequeue();
                if (d == null) {
                    if (mUiDispatchScheduled) {
                        mUiDispatchScheduled = false;
                        if (!calledFromHandler) {
                            mUiHandler.removeMessages(UiHandler.MSG_DISPATCH_UI_EVENTS);
                        }
                    }
                    return;
                }

                event = d.mEvent;
                if (event != null && (d.mFlags & FLAG_WEBKIT_TRANSFORMED_EVENT) != 0) {
                    event.scale(1.0f / d.mWebKitScale);
                    event.offsetLocation(-d.mWebKitXOffset, -d.mWebKitYOffset);
                    d.mFlags &= ~FLAG_WEBKIT_TRANSFORMED_EVENT;
                }

                eventType = d.mEventType;
                if (eventType == EVENT_TYPE_TOUCH) {
                    event = mUiTouchStream.update(event);
                    if (DEBUG && event == null && d.mEvent != null) {
                        Log.d(TAG, "dispatchUiEvents: dropped event " + d.mEvent);
                    }
                }

                flags = d.mFlags;

                if (event == d.mEvent) {
                    d.mEvent = null; // retain ownership of event, don't recycle it yet
                }
                recycleDispatchEventLocked(d);

                if (eventType == EVENT_TYPE_CLICK) {
                    scheduleHideTapHighlightLocked();
                }
            }

            // Handle the event.
            if (event != null) {
                dispatchUiEvent(event, eventType, flags);
                event.recycle();
            }
        }
!!!5072908.java!!!	dispatchUiEvent(inout event : MotionEvent, in eventType : int, in flags : int) : void
        if (DEBUG) {
            Log.d(TAG, "dispatchUiEvent: event=" + event
                    + ", eventType=" + eventType + ", flags=" + flags);
        }
        mUiCallbacks.dispatchUiEvent(event, eventType, flags);
!!!5073036.java!!!	enqueueEventLocked(inout d : DispatchEvent) : void
        if (!shouldSkipWebKit(d)) {
            enqueueWebKitEventLocked(d);
        } else {
            enqueueUiEventLocked(d);
        }
!!!5073164.java!!!	shouldSkipWebKit(inout d : DispatchEvent) : boolean
        switch (d.mEventType) {
            case EVENT_TYPE_CLICK:
            case EVENT_TYPE_HOVER:
            case EVENT_TYPE_SCROLL:
            case EVENT_TYPE_HIT_TEST:
                return false;
            case EVENT_TYPE_TOUCH:
                // TODO: This should be cleaned up. We now have WebViewInputDispatcher
                // and WebViewClassic both checking for slop and doing their own
                // thing - they should be consolidated. And by consolidated, I mean
                // WebViewClassic's version should just be deleted.
                // The reason this is done is because webpages seem to expect
                // that they only get an ontouchmove if the slop has been exceeded.
                if (mIsTapCandidate && d.mEvent != null
                        && d.mEvent.getActionMasked() == MotionEvent.ACTION_MOVE) {
                    return true;
                }
                return !mPostSendTouchEventsToWebKit
                        || mPostDoNotSendTouchEventsToWebKitUntilNextGesture;
        }
        return true;
!!!5073292.java!!!	enqueueWebKitCancelTouchEventIfNeededLocked() : void
        // We want to cancel touch events that were delivered to web kit.
        // Enqueue a null event at the end of the queue if needed.
        if (mWebKitTouchStream.isCancelNeeded() || !mWebKitDispatchEventQueue.isEmpty()) {
            DispatchEvent d = obtainDispatchEventLocked(null, EVENT_TYPE_TOUCH, FLAG_PRIVATE,
                    0, 0, 1.0f);
            enqueueWebKitEventUnbatchedLocked(d);
            mPostDoNotSendTouchEventsToWebKitUntilNextGesture = true;
        }
!!!5073420.java!!!	enqueueWebKitEventLocked(inout d : DispatchEvent) : void
        if (batchEventLocked(d, mWebKitDispatchEventQueue.mTail)) {
            if (DEBUG) {
                Log.d(TAG, "enqueueWebKitEventLocked: batched event " + d.mEvent);
            }
            recycleDispatchEventLocked(d);
        } else {
            enqueueWebKitEventUnbatchedLocked(d);
        }
!!!5073548.java!!!	enqueueWebKitEventUnbatchedLocked(inout d : DispatchEvent) : void
        if (DEBUG) {
            Log.d(TAG, "enqueueWebKitEventUnbatchedLocked: enqueued event " + d.mEvent);
        }
        mWebKitDispatchEventQueue.enqueue(d);
        scheduleWebKitDispatchLocked();
        updateWebKitTimeoutLocked();
!!!5073676.java!!!	scheduleWebKitDispatchLocked() : void
        if (!mWebKitDispatchScheduled) {
            mWebKitHandler.sendEmptyMessage(WebKitHandler.MSG_DISPATCH_WEBKIT_EVENTS);
            mWebKitDispatchScheduled = true;
        }
!!!5073804.java!!!	updateWebKitTimeoutLocked() : void
        DispatchEvent d = mWebKitDispatchEventQueue.mHead;
        if (d != null && mWebKitTimeoutScheduled && mWebKitTimeoutTime == d.mTimeoutTime) {
            return;
        }
        if (mWebKitTimeoutScheduled) {
            mUiHandler.removeMessages(UiHandler.MSG_WEBKIT_TIMEOUT);
            mWebKitTimeoutScheduled = false;
        }
        if (d != null) {
            mUiHandler.sendEmptyMessageAtTime(UiHandler.MSG_WEBKIT_TIMEOUT, d.mTimeoutTime);
            mWebKitTimeoutScheduled = true;
            mWebKitTimeoutTime = d.mTimeoutTime;
        }
!!!5073932.java!!!	enqueueUiCancelTouchEventIfNeededLocked() : void
        // We want to cancel touch events that were delivered to the UI.
        // Enqueue a null event at the end of the queue if needed.
        if (mUiTouchStream.isCancelNeeded() || !mUiDispatchEventQueue.isEmpty()) {
            DispatchEvent d = obtainDispatchEventLocked(null, EVENT_TYPE_TOUCH, FLAG_PRIVATE,
                    0, 0, 1.0f);
            enqueueUiEventUnbatchedLocked(d);
        }
!!!5074060.java!!!	enqueueUiEventLocked(inout d : DispatchEvent) : void
        if (batchEventLocked(d, mUiDispatchEventQueue.mTail)) {
            if (DEBUG) {
                Log.d(TAG, "enqueueUiEventLocked: batched event " + d.mEvent);
            }
            recycleDispatchEventLocked(d);
        } else {
            enqueueUiEventUnbatchedLocked(d);
        }
!!!5074188.java!!!	enqueueUiEventUnbatchedLocked(inout d : DispatchEvent) : void
        if (DEBUG) {
            Log.d(TAG, "enqueueUiEventUnbatchedLocked: enqueued event " + d.mEvent);
        }
        mUiDispatchEventQueue.enqueue(d);
        scheduleUiDispatchLocked();
!!!5074316.java!!!	scheduleUiDispatchLocked() : void
        if (!mUiDispatchScheduled) {
            mUiHandler.sendEmptyMessage(UiHandler.MSG_DISPATCH_UI_EVENTS);
            mUiDispatchScheduled = true;
        }
!!!5074444.java!!!	batchEventLocked(inout in : DispatchEvent, inout tail : DispatchEvent) : boolean
        if (!ENABLE_EVENT_BATCHING) {
            return false;
        }
        if (tail != null && tail.mEvent != null && in.mEvent != null
                && in.mEventType == tail.mEventType
                && in.mFlags == tail.mFlags
                && in.mWebKitXOffset == tail.mWebKitXOffset
                && in.mWebKitYOffset == tail.mWebKitYOffset
                && in.mWebKitScale == tail.mWebKitScale) {
            return tail.mEvent.addBatch(in.mEvent);
        }
        return false;
!!!5074572.java!!!	obtainDispatchEventLocked(inout event : MotionEvent, in eventType : int, in flags : int, in webKitXOffset : int, in webKitYOffset : int, in webKitScale : float) : DispatchEvent
        DispatchEvent d = obtainUninitializedDispatchEventLocked();
        d.mEvent = event;
        d.mEventType = eventType;
        d.mFlags = flags;
        d.mTimeoutTime = SystemClock.uptimeMillis() + WEBKIT_TIMEOUT_MILLIS;
        d.mWebKitXOffset = webKitXOffset;
        d.mWebKitYOffset = webKitYOffset;
        d.mWebKitScale = webKitScale;
        if (DEBUG) {
            Log.d(TAG, "Timeout time: " + (d.mTimeoutTime - SystemClock.uptimeMillis()));
        }
        return d;
!!!5074700.java!!!	copyDispatchEventLocked(inout d : DispatchEvent) : DispatchEvent
        DispatchEvent copy = obtainUninitializedDispatchEventLocked();
        if (d.mEvent != null) {
            copy.mEvent = d.mEvent.copy();
        }
        copy.mEventType = d.mEventType;
        copy.mFlags = d.mFlags;
        copy.mTimeoutTime = d.mTimeoutTime;
        copy.mWebKitXOffset = d.mWebKitXOffset;
        copy.mWebKitYOffset = d.mWebKitYOffset;
        copy.mWebKitScale = d.mWebKitScale;
        copy.mNext = d.mNext;
        return copy;
!!!5074828.java!!!	obtainUninitializedDispatchEventLocked() : DispatchEvent
        DispatchEvent d = mDispatchEventPool;
        if (d != null) {
            mDispatchEventPoolSize -= 1;
            mDispatchEventPool = d.mNext;
            d.mNext = null;
        } else {
            d = new DispatchEvent();
        }
        return d;
!!!5074956.java!!!	recycleDispatchEventLocked(inout d : DispatchEvent) : void
        if (d.mEvent != null) {
            d.mEvent.recycle();
            d.mEvent = null;
        }

        if (mDispatchEventPoolSize < MAX_DISPATCH_EVENT_POOL_SIZE) {
            mDispatchEventPoolSize += 1;
            d.mNext = mDispatchEventPool;
            mDispatchEventPool = d;
        }
