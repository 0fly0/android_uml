class OutputControl
!!!10979724.cpp!!!	OutputControl()
    sp<android::IServiceManager> smgr = android::defaultServiceManager();
    output_settings_ = NULL;
    overscan_settings_ = NULL;
    av_settings_ = NULL;
    if (smgr != NULL) {
        // Output
        sp<IBinder> service = smgr->getService(IOutputSettings::kServiceName);
        if (service != NULL) {
            output_settings_ = android::interface_cast<IOutputSettings>(service);
        } else {
            ALOGE("Failed to get IOutputSettings service");
            return;
        }
        // Overscan
        service = smgr->getService(IOverscanCalibrator::kServiceName);
        if (service != NULL) {
            overscan_settings_ = android::interface_cast<IOverscanCalibrator>(service);
        } else {
            ALOGE("Failed to get IOverscanCalibrator service");
            return;
        }
        // IAVSettings
        service = smgr->getService(IAVSettings::kServiceName);
        if (service != NULL) {
            av_settings_ = android::interface_cast<IAVSettings>(service);
        } else {
            ALOGE("Failed to get IAVSettings service");
            return;
        }
    }
!!!10979852.cpp!!!	~OutputControl()
    output_settings_ = NULL;
    overscan_settings_ = NULL;
    av_settings_ = NULL;
!!!10979980.cpp!!!	setOverscanRectangle(in x : int32_t, in y : int32_t, in width : int32_t, in height : int32_t) : status_t
    CHECK(overscan_settings_ != NULL);

    return overscan_settings_->setOverscanRectangle(x, y, width, height);
!!!10980108.cpp!!!	getOverscanRectangle(inout x : int32_t, inout y : int32_t, inout width : int32_t, inout height : int32_t) : status_t
    CHECK(overscan_settings_ != NULL);

    return overscan_settings_->getOverscanRectangle(x, y, width, height);
!!!10980236.cpp!!!	getDisplayMode(inout mode : DisplayMode) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetFullKey(
            kVideoOutputSettingsPrefix, kHDMIDisplayMode);
    AVSettingValue value;
    status_t status = av_settings_->ReadSetting(key.string(), &value);
    if (android::OK == status) {
        CHECK(value.isString());
        String8 display_mode_str = value.getString();
        ALOGD("getDisplayMode, return %s", display_mode_str.string());
        DisplayMode::FromString(display_mode_str.string(), mode);
    } else {
        ALOGE("getDisplayMode, read setting fail");
    }
    return status;
!!!10980364.cpp!!!	setDisplayMode(in mode : DisplayMode) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetFullKey(
            kVideoOutputSettingsPrefix, kHDMIDisplayMode);
    AVSettingValue value;
    value.setString(mode.ToString());
    status_t status = av_settings_->WriteSetting(key.string(), value);
    if (android::OK != status) {
        ALOGE("setDisplayMode, write setting fail");
    }
    return status;
!!!10980492.cpp!!!	getVideoScaleFactor(inout scale_factor_x : double, inout scale_factor_y : double) : status_t
    CHECK(output_settings_ != NULL);

    Parcel reply;
    status_t status = output_settings_->getParameter(GET_VIDEO_SCALE_FACTOR, &reply);
    if (status != android::OK) {
        return status;
    }
    *scale_factor_x = reply.readDouble();
    *scale_factor_y = reply.readDouble();
    ALOGD("getVideoScaleFactor, scale_factor_x %f, scale_factor_y %f",
         *scale_factor_x, *scale_factor_y);

    return status;
!!!10980620.cpp!!!	getMasterVolume(inout level : float) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetFullKey(
            kAudioOutputSettingsPrefix, kMasterVolume);
    AVSettingValue value;
    status_t status = av_settings_->ReadSetting(key.string(), &value);
    if (android::OK == status) {
        CHECK(value.isFloat());
        *level = value.getFloat();
        ALOGD("getMasterVolume, return %f", *level);
    } else {
        ALOGE("getMasterVolume, read setting fail");
    }
    return status;
!!!10980748.cpp!!!	setMasterVolume(in level : float) : status_t
    CHECK(av_settings_ != NULL);

    if (level < 0.0 || level > 1.0) {
        ALOGE("setMasterVolume, invalid parameter %f", level);
        return android::BAD_VALUE;
    }

    String8 key = AVSettingsHelper::GetFullKey(
            kAudioOutputSettingsPrefix, kMasterVolume);
    AVSettingValue value;
    value.setFloat(level);
    status_t status = av_settings_->WriteSetting(key.string(), value);
    if (android::OK != status) {
        ALOGE("setMasterVolume, write setting fail");
    }
    return status;
!!!10980876.cpp!!!	registerObserver(in prefix : char, in observer : sp<IAVSettingObserver>) : status_t
     CHECK(av_settings_ != NULL);

     return av_settings_->RegisterObserver(prefix, observer);
!!!10981004.cpp!!!	removeObserver(in obs : sp<IAVSettingObserver>) : void
    CHECK(av_settings_ != NULL);

    av_settings_->RemoveObserver(obs);
