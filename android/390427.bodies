class OldLineNumberInputStreamTest
!!!2667035.java!!!	test_available() : void
        assertEquals("Test 1: Returned incorrect number of available bytes;",
                text.length() / 2, lnis.available());

        lnis.close();
        try {
            lnis.available();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2667163.java!!!	test_read() : void
        assertEquals("Test 1: Failed to read correct byte;",
                '0', lnis.read());
        assertEquals("Test 2: Failed to read correct byte on dos text;",
                '0', lnis2.read());
        assertEquals("Test 3: Failed to read correct byte on dos text;",
                '\n', lnis2.read());
        assertEquals("Test 4: Failed to read correct byte on dos text;",
                '1', lnis2.read());
        assertEquals("Test 5: Failed to read correct byte on dos text;",
                '\n', lnis2.read());
        assertEquals("Test 6: Failed to read correct byte on dos text;",
                '2', lnis2.read());

        lnis.close();
        try {
            lnis.read();
            fail("Test 7: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2667291.java!!!	test_read$BII() : void
        byte[] buf = new byte[100];
        lnis.read(buf, 0, 100);
        assertTrue("Test 1: Incorrect bytes read.",
                new String(buf, 0, 100).equals(text.substring(0, 100)));

        lnis.close();
        try {
            lnis.read(buf, 0, 100);
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2667419.java!!!	test_read$BII_Exception() : void
        byte[] buf = new byte[10];

        try {
            lnis.read(buf, -1, 1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            lnis.read(buf, 0, -1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            lnis.read(buf, 10, 1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }
!!!2667547.java!!!	test_reset() : void
        lnis.mark(40);
        lnis.skip(4);
        lnis.reset();
        assertEquals("Test 1: Failed to reset", 0, lnis.getLineNumber());
        assertEquals("Test 2: Failed to reset", '0', lnis.read());
        lnis.reset();

        try {
            lnis.mark(5);
            lnis.skip(100);
            lnis.reset();
            fail("Test 3: Failed to invalidate mark.");
        } catch (IOException e) {
            // Correct; mark has been invalidated.
        }

        lnis.mark(5);
        lnis.close();
        try {
            lnis.reset();
            fail("Test 4: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2667675.java!!!	test_setLineNumberI() : void
        lnis.setLineNumber(42);
        assertEquals("Test 1: Failed to set line number;",
                42, lnis.getLineNumber());
        // Repeat the test with a different number to make sure that the
        // line number is really set.
        lnis.setLineNumber(89);
        assertEquals("Test 2: Failed to set line number;",
                89, lnis.getLineNumber());
!!!2667803.java!!!	test_skipJ() : void
        long skipped = lnis.skip(4);
        assertEquals("Test 1: Incorrect number of characters skipped;",
                4, skipped);
        assertEquals("Test 2: Skip failed to increment line number;",
                2, lnis.getLineNumber());

        lnis.close();
        try {
            lnis.skip(4);
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2667931.java!!!	setUp() : void
        /*
         * In order for IOException to be thrown in reset(),the inputStream to
         * the constructor cannot be a byteArrayInputstream because the reset()
         * in byteArrayInputStream does not throw IOException. When
         * BufferedInputStream is used, the size of the buffer must be smaller
         * than the readlimit in mark inorder for IOException to be thrown
         */
        BufferedInputStream buftemp = new BufferedInputStream(
                new ByteArrayInputStream(text.getBytes()), 4);
        lnis = new LineNumberInputStream(buftemp);
        lnis2 = new LineNumberInputStream(new ByteArrayInputStream(dosText
                .getBytes()));
