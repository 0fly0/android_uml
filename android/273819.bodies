class AtomicMarkableReference
!!!1645851.java!!!	AtomicMarkableReference(inout initialRef : V, inout initialMark : boolean)
        pair = Pair.of(initialRef, initialMark);
!!!1645979.java!!!	getReference() : V
        return pair.reference;
!!!1646107.java!!!	isMarked() : boolean
        return pair.mark;
!!!1646235.java!!!	get(inout markHolder : boolean) : V
        Pair<V> pair = this.pair;
        markHolder[0] = pair.mark;
        return pair.reference;
!!!1646363.java!!!	weakCompareAndSet(inout expectedReference : V, inout newReference : V, inout expectedMark : boolean, inout newMark : boolean) : boolean
        return compareAndSet(expectedReference, newReference,
                             expectedMark, newMark);
!!!1646491.java!!!	compareAndSet(inout expectedReference : V, inout newReference : V, inout expectedMark : boolean, inout newMark : boolean) : boolean
        Pair<V> current = pair;
        return
            expectedReference == current.reference &&
            expectedMark == current.mark &&
            ((newReference == current.reference &&
              newMark == current.mark) ||
             casPair(current, Pair.of(newReference, newMark)));
!!!1646619.java!!!	set(inout newReference : V, inout newMark : boolean) : void
        Pair<V> current = pair;
        if (newReference != current.reference || newMark != current.mark)
            this.pair = Pair.of(newReference, newMark);
!!!1646747.java!!!	attemptMark(inout expectedReference : V, inout newMark : boolean) : boolean
        Pair<V> current = pair;
        return
            expectedReference == current.reference &&
            (newMark == current.mark ||
             casPair(current, Pair.of(expectedReference, newMark)));
!!!1646875.java!!!	casPair(inout cmp : Pair, inout val : Pair) : boolean
        return UNSAFE.compareAndSwapObject(this, pairOffset, cmp, val);
!!!1647003.java!!!	objectFieldOffset(inout UNSAFE : Unsafe, inout field : String, inout klazz : Class) : long
        try {
            return UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));
        } catch (NoSuchFieldException e) {
            // Convert Exception to corresponding Error
            NoSuchFieldError error = new NoSuchFieldError(field);
            error.initCause(e);
            throw error;
        }
