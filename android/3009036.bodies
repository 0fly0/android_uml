class InternalTunerController
!!!12281740.java!!!	InternalTunerController(inout context : DeviceControllerContext, inout settings : MediaDeviceSettings, in deviceId : String)
        super(context, settings, deviceId);

        // OEM NOTE:
        // Do native resource allocation here.
!!!12281868.java!!!	destroy() : void
        // OEM NOTE:
        // Release native resources here.
        super.destroy();
!!!12281996.java!!!	performAction(inout event : ActionEvent) : void
        Log.d(TAG, "performAction()");
        try {
            if (event.getState() == State.DOWN) {
                /**
                 * Dismiss Event Alert dialog such as No Signal dialog when entering
                 * any key, this will avoid No Signal dialog overlay on USDTV menus
                 */
                WidgetManager.dismissEventAlert(mContext);
            }

            // Ignore all keys when Emergence Alert System take effect in channel
            if (Wrapper.getWrapperInstance().isEASEnabled())
                return;

            /*
             * If EAS event has not occured, flag is set to true and Key handling is
             * normal.If EAS event has occured, flag is set to false and none of the
             * keys are handled(keys will be in disabled state).
             */
            if (event.getState() == State.UP) {

                if (Action.INFO.equals(event.getAction())) {

                    // To display Channel banner
                    WidgetManager.showChannelInfo(mContext);

                } else if (Action.NUM_0.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(0, mContext);
                } else if (Action.NUM_1.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(1, mContext);
                } else if (Action.NUM_2.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(2, mContext);
                } else if (Action.NUM_3.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(3, mContext);
                } else if (Action.NUM_4.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(4, mContext);
                } else if (Action.NUM_5.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(5, mContext);
                } else if (Action.NUM_6.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(6, mContext);
                } else if (Action.NUM_7.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(7, mContext);
                } else if (Action.NUM_8.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(8, mContext);
                } else if (Action.NUM_9.equals(event.getAction())) {
                    WidgetManager.showChannelPanel(9, mContext);

                } else if (Action.GUIDE.equals(event.getAction())
                        || Action.PLAY.equals(event.getAction())
                        || Action.RIGHT.equals(event.getAction())) {
                    WidgetManager.showChannelList(mContext);

                }
            } else if (event.getState() == State.DOWN) {
                if ((Action.CHANNEL_UP.equals(event.getAction())
                        || Action.SKIP_FORWARD.equals(event.getAction()))
                        && Wrapper.getWrapperInstance().allowChannelUpDown()) {

                    Wrapper.getWrapperInstance().pauseCC();
                    // To perform Channel Up operation
                    Wrapper.getWrapperInstance().doChannelUp(mContext);

                } else if ((Action.CHANNEL_DOWN.equals(event.getAction())
                        || Action.SKIP_BACK.equals(event.getAction()))
                        && Wrapper.getWrapperInstance().allowChannelUpDown()) {

                    Wrapper.getWrapperInstance().pauseCC();
                    // To perform Channel Down operation
                    Wrapper.getWrapperInstance().doChannelDown(mContext);

                } else if (Action.GENERIC.equals(event.getAction())) {
                    if (ControllerBase.SCAN_CODE_RECALL == event.getExtra()) {
                        Wrapper.getWrapperInstance().doChannelRecall(mContext);
                    }

                }
            }

            super.performAction(event);
        } catch (NullPointerException e) {
            Log.e(TAG, "performAction exception" + e);
            e.printStackTrace();
        }
!!!12282124.java!!!	sendChannelCommand(in majorNumber : int, in minorNumber : int) : void
        Log.d(TAG, "sendChannelCommand Major No = " + majorNumber + " Minor No = "
                + minorNumber);
        TvFramework.getInstance().getLiveTvInstance()
                .channelChange(false, majorNumber, minorNumber, null);
!!!12282252.java!!!	goTo(inout channelUri : Uri) : boolean
        try {
            Log.d(TAG, "Inside goto location = " + channelUri);

            // 1. Convert the location String to URI
            // final Uri channelUri = Uri.parse(location);
            final ChannelStreamInfo csi = new ChannelStreamInfo(PairingDevice.TUNER_DEVICE_ID,
                    channelUri);

            // 2. Get the Channel Number from the URI
            final String channelNumber = csi.getChannelNumberString();

            // 3. In case of Channel URI, the channel number will not be null,
            // in that case do a Direct Channel Change.
            // This case will come from Channel Number selection from QSB
            if (channelNumber != null) {
                Log.d(TAG, "=========== Channel Number=" + channelNumber);

                final ChannelNumber ch = csi.getChannelNumber();
                int majorNumber = ch.getMajor();
                int minorNumber = ch.getMinor();
                if (minorNumber == 0) {
                    minorNumber = majorNumber;
                    majorNumber = ChannelDetails.INVALID_MAJOR_NUMBER;
                }
                Log.d(TAG, "channelChange Major No = " + majorNumber + " Minor No = "
                        + minorNumber);

                final LiveTv liveTv = TvFramework.getInstance().getLiveTvInstance();
                if (!csi.isServiceIdValid()) {
                    final int major = ch.getMajor();
                    final int minor = (ch.getMinor() <= 0) ? ChannelDetails.INVALID_MAJOR_NUMBER
                            : ch.getMinor();
                    final Runnable channelRunnable = new Runnable() {
                        @Override
                        public void run() {
                            liveTv.channelChange(false, major, minor, null);
                        }
                    };
                    if (Wrapper.getWrapperInstance().isStreamInput()) {
                        Wrapper.getWrapperInstance().runInNonUiThread(channelRunnable, 1000);
                    } else {
                        Wrapper.getWrapperInstance().runInNonUiThread(channelRunnable, 0);
                    }

                } else {
                    int realTunerMode = csi.getTunerMode();
                    int currTunerMode = TvFramework.getInstance().getGtvSpecificInstance()
                            .getTunerModeFromDb(mContext, PairingDevice.TUNER_DEVICE_ID);
                    if (majorNumber == ChannelDetails.INVALID_MAJOR_NUMBER) {
                        USDTVServiceData serviceData = liveTv.getServiceDetailsById(csi
                                .getServiceId());
                        if (serviceData != null
                                && serviceData.getServiceType() == ChannelType.ANALOG_TELEVISION
                                        .ordinal()) {
                            if (realTunerMode == InputSourceType.ATSC_INPUT.ordinal())
                                realTunerMode = InputSourceType.ANALOG_ATSC_INPUT.ordinal();
                            else if (realTunerMode == InputSourceType.CABLE_INPUT.ordinal())
                                realTunerMode = InputSourceType.ANALOG_CABLE_INPUT.ordinal();
                        }
                    }
                    liveTv.forceChannelChange(true,
                            majorNumber, minorNumber, csi.getServiceId(), realTunerMode);
                    if (csi.getTunerMode() != currTunerMode) {
                        Wrapper.getWrapperInstance().updateChanneListToGTVDb(1000);
                    }
                }
            } else {
                return super.goTo(channelUri);
            }
        } catch (Exception e) {
            Log.d(TAG, "Exception in controller : " + e);
        }
        return true;
