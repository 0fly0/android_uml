class Constructor
!!!467483.java!!!	initGenericTypes() : void
        if (!genericTypesAreInitialized) {
            String signatureAttribute = getSignatureAttribute();
            GenericSignatureParser parser = new GenericSignatureParser(
                    declaringClass.getClassLoader());
            parser.parseForConstructor(this, signatureAttribute, exceptionTypes);
            formalTypeParameters = parser.formalTypeParameters;
            genericParameterTypes = parser.parameterTypes;
            genericExceptionTypes = parser.exceptionTypes;
            genericTypesAreInitialized = true;
        }
!!!467611.java!!!	Constructor()
        //do nothing
!!!467739.java!!!	Constructor(inout declaringClass : Class, inout ptypes : Class, inout extypes : Class, in slot : int)
        this.declaringClass = declaringClass;
        this.parameterTypes = ptypes;
        this.exceptionTypes = extypes;          // may be null
        this.slot = slot;
!!!467867.java!!!	getSignatureAttribute() : String
        Object[] annotation = Method.getSignatureAnnotation(declaringClass, slot);

        if (annotation == null) {
            return null;
        }

        return StringUtils.combineStrings(annotation);
!!!467995.java!!!	getTypeParameters() : TypeVariable
        initGenericTypes();
        return formalTypeParameters.clone();
!!!468123.java!!!	toGenericString() : String
        StringBuilder sb = new StringBuilder(80);
        initGenericTypes();
        // append modifiers if any
        int modifier = getModifiers();
        if (modifier != 0) {
            sb.append(Modifier.toString(modifier & ~Modifier.VARARGS)).append(' ');
        }
        // append type parameters
        if (formalTypeParameters != null && formalTypeParameters.length > 0) {
            sb.append('<');
            for (int i = 0; i < formalTypeParameters.length; i++) {
                appendGenericType(sb, formalTypeParameters[i]);
                if (i < formalTypeParameters.length - 1) {
                    sb.append(",");
                }
            }
            sb.append("> ");
        }
        // append constructor name
        appendTypeName(sb, getDeclaringClass());
        // append parameters
        sb.append('(');
        appendArrayGenericType(sb,
                Types.getClonedTypeArray(genericParameterTypes));
        sb.append(')');
        // append exceptions if any
        Type[] genericExceptionTypeArray =
                Types.getClonedTypeArray(genericExceptionTypes);
        if (genericExceptionTypeArray.length > 0) {
            sb.append(" throws ");
            appendArrayGenericType(sb, genericExceptionTypeArray);
        }
        return sb.toString();
!!!468251.java!!!	getGenericParameterTypes() : Type
        initGenericTypes();
        return Types.getClonedTypeArray(genericParameterTypes);
!!!468379.java!!!	getGenericExceptionTypes() : Type
        initGenericTypes();
        return Types.getClonedTypeArray(genericExceptionTypes);
!!!468507.java!!!	getDeclaredAnnotations() : Annotation
        return Method.getDeclaredAnnotations(declaringClass, slot);
!!!468635.java!!!	getAnnotation(inout annotationType : Class) : A
        if (annotationType == null) {
            throw new NullPointerException("annotationType == null");
        }
        return Method.getAnnotation(declaringClass, slot, annotationType);
!!!468763.java!!!	isAnnotationPresent(inout annotationType : Class) : boolean
        if (annotationType == null) {
            throw new NullPointerException("annotationType == null");
        }
        return Method.isAnnotationPresent(declaringClass, slot, annotationType);
!!!468891.java!!!	getParameterAnnotations() : Annotation
        Annotation[][] parameterAnnotations
                = Method.getParameterAnnotations(declaringClass, slot);
        if (parameterAnnotations.length == 0) {
            return Method.noAnnotations(parameterTypes.length);
        }
        return parameterAnnotations;
!!!469019.java!!!	isVarArgs() : boolean
        int mods = Method.getMethodModifiers(declaringClass, slot);
        return (mods & Modifier.VARARGS) != 0;
!!!469147.java!!!	isSynthetic() : boolean
        int mods = Method.getMethodModifiers(declaringClass, slot);
        return (mods & Modifier.SYNTHETIC) != 0;
!!!469275.java!!!	equals(inout object : Object) : boolean
        return object instanceof Constructor && toString().equals(object.toString());
!!!469403.java!!!	getDeclaringClass() : Class
        return declaringClass;
!!!469531.java!!!	getExceptionTypes() : Class
        if (exceptionTypes == null) {
            return EmptyArray.CLASS;
        }
        return exceptionTypes.clone();
!!!469659.java!!!	getModifiers() : int
        return Method.getMethodModifiers(declaringClass, slot);
!!!469787.java!!!	getName() : String
        return declaringClass.getName();
!!!469915.java!!!	getParameterTypes() : Class
        return parameterTypes.clone();
!!!470043.java!!!	getSignature() : String
        StringBuilder result = new StringBuilder();

        result.append('(');
        for (int i = 0; i < parameterTypes.length; i++) {
            result.append(getSignature(parameterTypes[i]));
        }
        result.append(")V");

        return result.toString();
!!!470171.java!!!	hashCode() : int
        return declaringClass.getName().hashCode();
!!!470299.java!!!	newInstance(inout  : Object...args) : T
        return constructNative (args, declaringClass, parameterTypes, slot, flag);
!!!470555.java!!!	toString() : String
        StringBuilder result = new StringBuilder(Modifier.toString(getModifiers()));

        if (result.length() != 0)
            result.append(' ');
        result.append(declaringClass.getName());
        result.append("(");
        result.append(toString(parameterTypes));
        result.append(")");
        if (exceptionTypes != null && exceptionTypes.length != 0) {
            result.append(" throws ");
            result.append(toString(exceptionTypes));
        }

        return result.toString();
