class WidgetManager
!!!12334732.java!!!	WidgetManager()

!!!12334860.java!!!	showChannelPanel(in keyCode : int, in context : Context) : void
        Log.d(TAG, "showChannelPanel() ");
        final Bundle bundle = new Bundle();
        bundle.putInt(ChannelPanel.EXTRA_CHANNEL_NUM, keyCode);

        createSingleTopActivity(TvIntents.ACTION_SHOW_CHANNELPANNEL, bundle, context);
!!!12334988.java!!!	showChannelBanner(in context : Context) : void
        Log.d(TAG, "showChannelBanner() ");

        final Bundle bundleInfo = new Bundle();
        bundleInfo.putBoolean(TvIntents.EXTRA_SHOW_PROGRAM_DESC, false);

        // If LiveTv is visible and not pinned, display banner
        if (ControllerBase.isFullScreen()) {
            if (Wrapper.getWrapperInstance().isTunerInput()) {
                createSingleTopActivity(TvIntents.ACTION_SHOW_CHANNELBANNER, bundleInfo, context);
            }
        }
!!!12335116.java!!!	showChannelInfo(in context : Context) : void
        Log.d(TAG, "showChannelInfo() ");

        final Bundle bundleInfo = new Bundle();
        bundleInfo.putBoolean(TvIntents.EXTRA_SHOW_PROGRAM_DESC, true);
        if (Wrapper.getWrapperInstance().isTunerInput()) {
            createSingleTopActivity(TvIntents.ACTION_SHOW_CHANNELBANNER, bundleInfo, context);
        }
!!!12335244.java!!!	showChannelList(in context : Context) : void
        Log.d(TAG, "showChannelList() ");

        // createHotKeyActivity(MasterChannelListActivity.class, context);
        createSingleTopActivity(TvIntents.ACTION_SHOW_CHANNELLIST, context);
!!!12335372.java!!!	inputSwitch(in context : Context) : void
        Log.d(TAG, "inputSwitch()");

        String deviceId = Wrapper.getWrapperInstance().getCurrentDeviceId();
        final Intent dialogIntent = new Intent(TvIntents.ACTION_SELECT_DEVICE).putExtra(
                MediaDevicesConstants.EXTRA_SELECTED_DEVICE_ID, deviceId);
        dialogIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        exitFromApp(context);

        try {
            context.startActivity(dialogIntent);
        } catch (Exception e) {
            ProgramaticException.displayException(context, TAG, e);
        }
!!!12335500.java!!!	isDialogShown(inout dialog : Dialog) : boolean
        return dialog == null ? false : dialog.isShowing();
!!!12335628.java!!!	showInputBanner(in context : Context, inout show : boolean, inout keyLaunched : boolean) : void
        // To display for NON-RF sources only
        if (Wrapper.getWrapperInstance().isAnalogVideoInput()) {
            boolean showDialog = false;
            boolean dismissDialog = false;
            if (show && keyLaunched) {
                if (InputBannerWidgetProvider.isVisible()) {
                    dismissDialog = true;
                } else {
                    showDialog = true;
                }
            } else if (show) {
                showDialog = true;
            } else if (!show) {
                dismissDialog = true;
            }

            if (showDialog || dismissDialog) {
                Intent intent = new Intent(InputBannerWidgetProvider
                        .ACTION_SHOW_INPUTBANNER_WIDGET);
                Bundle bundle = new Bundle();
                if (showDialog) {
                    Log.d(TAG, "show InputBanner");
                    bundle.putBoolean(InputBannerWidgetProvider.EXTRA_STATUS, true);
                } else {
                    Log.d(TAG, "dismiss InputBanner");
                    bundle.putBoolean(InputBannerWidgetProvider.EXTRA_STATUS, false);
                }
                intent.putExtras(bundle);
                if (context != null) {
                    context.sendBroadcast(intent);
                }
            }
        }
!!!12335756.java!!!	showShortcutMenu(in context : Context) : void
        createSingleTopActivity(TvIntents.ACTION_SHOW_SHORTCUT_MENU, null, context);
!!!12335884.java!!!	showFactoryMenu(in context : Context) : void
        createSingleTopActivity(TvIntents.ACTION_SHOW_FACTORY_MENU, null, context);
!!!12336012.java!!!	exitFromApp(in context : Context) : void
        Log.d(TAG,
                "exitFromApp() called from class:"
                        + new Throwable().getStackTrace()[1].getClassName()
                        + " from method :" + new Throwable().getStackTrace()[1].getMethodName()
                        + " at line number " + new Throwable().getStackTrace()[1].getLineNumber());
        final Intent closeAppIntent = new Intent(TvIntents.INTENT_ACTION_CLOSE_APP);
        context.sendBroadcast(closeAppIntent);
!!!12336140.java!!!	dismissEventAlert(in context : Context) : void
        final Intent closeAlertIntent = new Intent(EventManagerService.ACTION_CLOSE_ALERT);
        if (context != null) {
            context.sendBroadcast(closeAlertIntent);
        }
!!!12336268.java!!!	createSingleTopActivity(in action : String, in bundle : Bundle, in context : Context) : void
        if (TextUtils.isEmpty(action) || context == null)
            return;

        Intent intent = new Intent(action);
        if (bundle != null)
            intent.putExtras(bundle);

        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(intent);
!!!12336396.java!!!	createSingleTopActivity(in action : String, in context : Context) : void
        createSingleTopActivity(action, null, context);
!!!12336524.java!!!	StartSingleTopActivityForResult(in action : String, in bundle : Bundle, in activity : Activity, in requestCode : int) : void
        if (TextUtils.isEmpty(action) || activity == null)
            return;

        Intent intent = new Intent(action);
        if (bundle != null)
            intent.putExtras(bundle);

        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        activity.startActivityForResult(intent, requestCode);
!!!12336652.java!!!	showProgress(in context : Context) : ProgressDialog
        ProgressDialog progressDialog = ProgressDialog.show(context, "", "", true, false);
        progressDialog.setCancelable(false);
        progressDialog.show();
        progressDialog.setContentView(R.layout.progress_dialog_view);
        ((TextView) progressDialog.findViewById(R.id.progress_dialog_view_tv))
                .setText(R.string.progress_wait);
        return progressDialog;
!!!12336780.java!!!	getTopActivityAtStack(in context : Context) : String

        String className = "";
        try {
            ActivityManager am = (ActivityManager) context
                    .getSystemService(Activity.ACTIVITY_SERVICE);

            /*
             * getRunningTasks(maxNum)->Return a list of the tasks that are
             * currently running, with the most recent being first and older
             * ones after in order.Here maxNum specifies the maximum number of
             * entries to return in the list. The actual number returned may be
             * smaller, depending on how many tasks the user has started. As we
             * passed 1 to getRunningTasks() it will return only 1 task which is
             * most recent task i.e. currently running task.
             */
            List<RunningTaskInfo> list = am.getRunningTasks(1);
            if (list != null && list.size() > 0) {
                className = list.get(0).topActivity.getClassName();
            } else {
                Log.e(TAG, "task list is empty");
            }
        } catch (Exception e) {
            ProgramaticException.displayException(context, TAG, e);
            Log.e(TAG, " Exception occured " + e);
        }
        Log.d(TAG, "getTopActivityAtStack()=" + className);
        return className;
!!!12336908.java!!!	isLiveTvLaunched(inout mContext : Context) : boolean
        // return checkServiceRunning(mContext,
        // "com.marvell.usdtv.app.device.TunerControllerService");
        return checkActivityRunning(mContext, TV_PLAYER_ACTIVITY_NAME);
!!!12337036.java!!!	isTopActivity(inout mContext : Context, in activityName : String) : boolean
        ActivityManager mActivityManager = (ActivityManager) mContext
                .getSystemService(Context.ACTIVITY_SERVICE);

        List<RunningTaskInfo> list = mActivityManager.getRunningTasks(1);
        if (list != null && list.size() > 0) {
            String className = list.get(0).topActivity.getClassName();
            Log.d(TAG, "TopActivity className:" + className + ", activityName:" + activityName);
            if (className.equalsIgnoreCase(activityName)) {
                return true;
            }
        } else {
            Log.e(TAG, "task list is empty");
        }
        return false;
!!!12337164.java!!!	checkActivityRunning(inout mContext : Context, in activityName : String) : boolean
        ActivityManager mActivityManager = (ActivityManager) mContext
                .getSystemService(Context.ACTIVITY_SERVICE);
        List<RunningTaskInfo> taskList = mActivityManager.getRunningTasks(5);
        if (taskList != null) {
            for (RunningTaskInfo info : taskList) {
                String className = info.topActivity.getClassName();
                Log.d(TAG, "checkActivityRunning className:" + className + ", activityName:"
                        + activityName);
                if (className.equalsIgnoreCase(activityName))
                    return true;
            }
        }
        return false;
!!!12337292.java!!!	checkServiceRunning(inout mContext : Context, in serviceName : String) : boolean
        ActivityManager mActivityManager = (ActivityManager) mContext
                .getSystemService(Context.ACTIVITY_SERVICE);
        List<RunningServiceInfo> serviceList = mActivityManager.getRunningServices(30);
        if (serviceList != null) {
            for (int i = 0; i < serviceList.size(); i++) {
                if (serviceName.equals(serviceList.get(i).service.getClassName())) {
                    return true;
                }
            }
        }
        return false;
!!!12337420.java!!!	updatePreferenceToSpecificActivityOrRemove(inout context : Context, inout parentPreferenceGroup : PreferenceGroup, in preferenceKey : String, in flags : int) : boolean

        Preference preference = parentPreferenceGroup.findPreference(preferenceKey);
        if (preference == null) {
            return false;
        }

        Intent intent = preference.getIntent();
        if (intent != null) {
            // Find the activity that is in the system image
            PackageManager pm = context.getPackageManager();
            List<ResolveInfo> list = pm.queryIntentActivities(intent, 0);
            int listSize = list.size();
            for (int i = 0; i < listSize; i++) {
                ResolveInfo resolveInfo = list.get(i);
                if ((resolveInfo.activityInfo.applicationInfo.flags
                & ApplicationInfo.FLAG_SYSTEM)
                != 0) {

                    // Replace the intent with this specific activity
                    preference.setIntent(new Intent().setClassName(
                            resolveInfo.activityInfo.packageName,
                            resolveInfo.activityInfo.name));

                    if ((flags
                    & UPDATE_PREFERENCE_FLAG_SET_TITLE_TO_MATCHING_ACTIVITY) != 0) {
                        // Set the preference title to the activity's label
                        preference.setTitle(resolveInfo.loadLabel(pm));
                    }

                    return true;
                }
            }
        }

        // Did not find a matching activity, so remove the preference
        parentPreferenceGroup.removePreference(preference);

        return true;
