class ZoneList
!!!12325772.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);

        String[] from = new String[] {
                KEY_DISPLAYNAME, KEY_GMT
        };
        int[] to = new int[] {
                android.R.id.text1, android.R.id.text2
        };

        MyComparator comparator = new MyComparator(KEY_OFFSET);

        List<HashMap> timezoneSortedList = getZones();
        Collections.sort(timezoneSortedList, comparator);
        mTimezoneSortedAdapter = new SimpleAdapter(this,
                (List) timezoneSortedList,
                R.layout.timezone_list_item,
                from,
                to);

        List<HashMap> alphabeticalList = new ArrayList<HashMap>(timezoneSortedList);
        comparator.setSortingKey(KEY_DISPLAYNAME);
        Collections.sort(alphabeticalList, comparator);
        mAlphabeticalAdapter = new SimpleAdapter(this,
                (List) alphabeticalList,
                R.layout.timezone_list_item, // Use a local layout per UX
                                             // requirement
                from,
                to);

        // Sets the adapter
        setSorting(true);
        int defaultFocus = getDefaultIndex(mSortedByTimezone
                ? timezoneSortedList : alphabeticalList);
        // If current timezone is in this list, move focus to it
        setSelection(defaultFocus);

        // Assume user may press Back
        setResult(RESULT_CANCELED);
!!!12325900.java!!!	onCreateOptionsMenu(inout menu : Menu) : boolean
        menu.add(0, MENU_ALPHABETICAL, 0, R.string.zone_list_menu_sort_alphabetically)
                .setIcon(android.R.drawable.ic_menu_sort_alphabetically);
        menu.add(0, MENU_TIMEZONE, 0, R.string.zone_list_menu_sort_by_timezone)
                .setIcon(R.drawable.ic_menu_3d_globe);

        return true;
!!!12326028.java!!!	onPrepareOptionsMenu(inout menu : Menu) : boolean

        if (mSortedByTimezone) {
            menu.findItem(MENU_TIMEZONE).setVisible(false);
            menu.findItem(MENU_ALPHABETICAL).setVisible(true);
        } else {
            menu.findItem(MENU_TIMEZONE).setVisible(true);
            menu.findItem(MENU_ALPHABETICAL).setVisible(false);
        }

        return true;
!!!12326156.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        switch (item.getItemId()) {

            case MENU_TIMEZONE:
                setSorting(true);
                return true;

            case MENU_ALPHABETICAL:
                setSorting(false);
                return true;

            default:
                return false;
        }
!!!12326284.java!!!	setSorting(inout timezone : boolean) : void
        setListAdapter(timezone ? mTimezoneSortedAdapter : mAlphabeticalAdapter);
        mSortedByTimezone = timezone;
!!!12326412.java!!!	getZones() : List<HashMap>
        List<HashMap> myData = new ArrayList<HashMap>();
        long date = Calendar.getInstance().getTimeInMillis();
        try {
            XmlResourceParser xrp = getResources().getXml(R.xml.timezones);
            while (xrp.next() != XmlResourceParser.START_TAG)
                continue;
            xrp.next();
            while (xrp.getEventType() != XmlResourceParser.END_TAG) {
                while (xrp.getEventType() != XmlResourceParser.START_TAG) {
                    if (xrp.getEventType() == XmlResourceParser.END_DOCUMENT) {
                        return myData;
                    }
                    xrp.next();
                }
                if (xrp.getName().equals(XMLTAG_TIMEZONE)) {
                    String id = xrp.getAttributeValue(0);
                    String displayName = xrp.nextText();
                    addItem(myData, id, displayName, date);
                }
                while (xrp.getEventType() != XmlResourceParser.END_TAG) {
                    xrp.next();
                }
                xrp.next();
            }
            xrp.close();
        } catch (XmlPullParserException xppe) {
            Log.e(TAG, "Ill-formatted timezones.xml file");
        } catch (java.io.IOException ioe) {
            Log.e(TAG, "Unable to read timezones.xml file");
        }

        return myData;
!!!12326540.java!!!	addItem(inout myData : List<HashMap>, in id : String, in displayName : String, in date : long) : void
        HashMap map = new HashMap();
        map.put(KEY_ID, id);
        map.put(KEY_DISPLAYNAME, displayName);
        TimeZone tz = TimeZone.getTimeZone(id);
        int offset = tz.getOffset(date);
        int p = Math.abs(offset);
        StringBuilder name = new StringBuilder();
        name.append("GMT");

        if (offset < 0) {
            name.append('-');
        } else {
            name.append('+');
        }

        name.append(p / (HOURS_1));
        name.append(':');

        int min = p / 60000;
        min %= 60;

        if (min < 10) {
            name.append('0');
        }
        name.append(min);

        map.put(KEY_GMT, name.toString());
        map.put(KEY_OFFSET, offset);

        myData.add(map);
!!!12326668.java!!!	getDefaultIndex(inout sortedList : List<HashMap>) : int
        for (HashMap map : sortedList) {
            String id = (String) map.get(KEY_ID);
            if (id != null && id.equals(TimeZone.getDefault().getID())) {
                return sortedList.indexOf(map);
            }
        }
        return 0;
!!!12326796.java!!!	onListItemClick(inout l : ListView, inout v : View, in position : int, in id : long) : void
        Map map = (Map) l.getItemAtPosition(position);
        if (map != null) {
            // Update the system timezone value
            AlarmManager alarm = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
            alarm.setTimeZone((String) map.get(KEY_ID));
        }
        setResult(RESULT_OK);
        finish();
