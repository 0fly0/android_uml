class typed_data
!!!389516.cpp!!!	~typed_data()
    clear();
!!!389644.cpp!!!	typed_data(in from : typed_data)
    allocateStorage(from.mSize);
    memcpy(storage(), from.storage(), mSize);
!!!389772.cpp!!!	operator =(in from : typed_data) : typed_data
    if (this != &from) {
        clear();
        mType = from.mType;
        allocateStorage(from.mSize);
        memcpy(storage(), from.storage(), mSize);
    }

    return *this;
!!!389900.cpp!!!	clear() : void
    freeStorage();

    mType = 0;
!!!390028.cpp!!!	setData(in type : uint32_t, in data : void, in size : size_t) : void
    clear();

    mType = type;
    allocateStorage(size);
    memcpy(storage(), data, size);
!!!390156.cpp!!!	getData(inout type : uint32_t, in data : void, inout size : size_t) : void
    *type = mType;
    *size = mSize;
    *data = storage();
!!!390284.cpp!!!	asString() : String8
    String8 out;
    const void *data = storage();
    switch(mType) {
        case TYPE_NONE:
            out = String8::format("no type, size %d)", mSize);
            break;
        case TYPE_C_STRING:
            out = String8::format("(char*) %s", (const char *)data);
            break;
        case TYPE_INT32:
            out = String8::format("(int32_t) %d", *(int32_t *)data);
            break;
        case TYPE_INT64:
            out = String8::format("(int64_t) %lld", *(int64_t *)data);
            break;
        case TYPE_FLOAT:
            out = String8::format("(float) %f", *(float *)data);
            break;
        case TYPE_POINTER:
            out = String8::format("(void*) %p", *(void **)data);
            break;
        case TYPE_RECT:
        {
            const Rect *r = (const Rect *)data;
            out = String8::format("Rect(%d, %d, %d, %d)",
                                  r->mLeft, r->mTop, r->mRight, r->mBottom);
            break;
        }

        default:
            out = String8::format("(unknown type %d, size %d)", mType, mSize);
            if (mSize <= 48) { // if it's less than three lines of hex data, dump it
                AString foo;
                hexdump(data, mSize, 0, &foo);
                out.append("\n");
                out.append(foo.c_str());
            }
            break;
    }
    return out;
!!!390540.cpp!!!	allocateStorage(in size : size_t) : void
    mSize = size;

    if (usesReservoir()) {
        return;
    }

    u.ext_data = malloc(mSize);
!!!390668.cpp!!!	freeStorage() : void
    if (!usesReservoir()) {
        if (u.ext_data) {
            free(u.ext_data);
        }
    }

    mSize = 0;
