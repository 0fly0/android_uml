class HttpURLConnection
!!!562203.java!!!	HttpURLConnection(inout url : URL)
        super(url);
!!!562459.java!!!	getErrorStream() : InputStream
        return null;
!!!562587.java!!!	getFollowRedirects() : boolean
        return followRedirects;
!!!562715.java!!!	getPermission() : Permission
        int port = url.getPort();
        if (port < 0) {
            port = 80;
        }
        return new SocketPermission(url.getHost() + ":" + port,
                "connect, resolve");
!!!562843.java!!!	getRequestMethod() : String
        return method;
!!!562971.java!!!	getResponseCode() : int
        // Call getInputStream() first since getHeaderField() doesn't return
        // exceptions
        getInputStream();
        String response = getHeaderField(0);
        if (response == null) {
            return -1;
        }
        response = response.trim();
        int mark = response.indexOf(" ") + 1;
        if (mark == 0) {
            return -1;
        }
        int last = mark + 3;
        if (last > response.length()) {
            last = response.length();
        }
        responseCode = Integer.parseInt(response.substring(mark, last));
        if (last + 1 <= response.length()) {
            responseMessage = response.substring(last + 1);
        }
        return responseCode;
!!!563099.java!!!	getResponseMessage() : String
        if (responseMessage != null) {
            return responseMessage;
        }
        getResponseCode();
        return responseMessage;
!!!563227.java!!!	setFollowRedirects(inout auto : boolean) : void
        followRedirects = auto;
!!!563355.java!!!	setRequestMethod(inout method : String) : void
        if (connected) {
            throw new ProtocolException("Connection already established");
        }
        for (String permittedUserMethod : PERMITTED_USER_METHODS) {
            if (permittedUserMethod.equals(method)) {
                // if there is a supported method that matches the desired
                // method, then set the current method and return
                this.method = permittedUserMethod;
                return;
            }
        }
        // if none matches, then throw ProtocolException
        throw new ProtocolException("Unknown method '" + method + "'; must be one of " +
                Arrays.toString(PERMITTED_USER_METHODS));
!!!563611.java!!!	getContentEncoding() : String
        return super.getContentEncoding(); // overridden for Javadoc only
!!!563739.java!!!	getInstanceFollowRedirects() : boolean
        return instanceFollowRedirects;
!!!563867.java!!!	setInstanceFollowRedirects(inout followRedirects : boolean) : void
        instanceFollowRedirects = followRedirects;
!!!563995.java!!!	getHeaderFieldDate(inout field : String, in defaultValue : long) : long
        return super.getHeaderFieldDate(field, defaultValue);
!!!564123.java!!!	setFixedLengthStreamingMode(in contentLength : int) : void
        if (super.connected) {
            throw new IllegalStateException("Already connected");
        }
        if (chunkLength > 0) {
            throw new IllegalStateException("Already in chunked mode");
        }
        if (contentLength < 0) {
            throw new IllegalArgumentException("contentLength < 0");
        }
        this.fixedContentLength = contentLength;
!!!564251.java!!!	setChunkedStreamingMode(in chunkLength : int) : void
        if (super.connected) {
            throw new IllegalStateException("Already connected");
        }
        if (fixedContentLength >= 0) {
            throw new IllegalStateException("Already in fixed-length mode");
        }
        if (chunkLength <= 0) {
            this.chunkLength = HttpEngine.DEFAULT_CHUNK_LENGTH;
        } else {
            this.chunkLength = chunkLength;
        }
