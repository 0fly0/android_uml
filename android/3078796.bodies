class BinaryDictionary
!!!12768524.java!!!	BinaryDictionary(in context : Context, in filename : String, in offset : long, in length : long, in useFullEditDistance : boolean, in locale : Locale)
        // Note: at the moment a binary dictionary is always of the "main" type.
        // Initializing this here will help transitioning out of the scheme where
        // the Suggest class knows everything about every single dictionary.
        mDicTypeId = Suggest.DIC_MAIN;
        mUseFullEditDistance = useFullEditDistance;
        loadDictionary(filename, offset, length);
!!!12769676.java!!!	loadDictionary(in path : String, in startOffset : long, in length : long) : void
        mNativeDict = openNative(path, startOffset, length,
                TYPED_LETTER_MULTIPLIER, FULL_WORD_SCORE_MULTIPLIER, MAX_WORD_LENGTH, MAX_WORDS);
!!!12769804.java!!!	getBigrams(in codes : WordComposer, in previousWord : CharSequence, in callback : WordCallback) : void
        if (mNativeDict == 0) return;

        int[] codePoints = StringUtils.toCodePointArray(previousWord.toString());
        Arrays.fill(mOutputChars_bigrams, (char) 0);
        Arrays.fill(mBigramScores, 0);

        int codesSize = codes.size();
        Arrays.fill(mInputCodes, -1);
        if (codesSize > 0) {
            mInputCodes[0] = codes.getCodeAt(0);
        }

        int count = getBigramsNative(mNativeDict, codePoints, codePoints.length, mInputCodes,
                codesSize, mOutputChars_bigrams, mBigramScores, MAX_WORD_LENGTH, MAX_BIGRAMS);
        if (count > MAX_BIGRAMS) {
            count = MAX_BIGRAMS;
        }

        for (int j = 0; j < count; ++j) {
            if (codesSize > 0 && mBigramScores[j] < 1) break;
            final int start = j * MAX_WORD_LENGTH;
            int len = 0;
            while (len <  MAX_WORD_LENGTH && mOutputChars_bigrams[start + len] != 0) {
                ++len;
            }
            if (len > 0) {
                callback.addWord(mOutputChars_bigrams, start, len, mBigramScores[j],
                        mDicTypeId, Dictionary.BIGRAM);
            }
        }
!!!12769932.java!!!	getWords(in codes : WordComposer, in prevWordForBigrams : CharSequence, in callback : WordCallback, in proximityInfo : ProximityInfo) : void
        final int count = getSuggestions(codes, prevWordForBigrams, proximityInfo, mOutputChars,
                mScores);

        for (int j = 0; j < count; ++j) {
            if (mScores[j] < 1) break;
            final int start = j * MAX_WORD_LENGTH;
            int len = 0;
            while (len < MAX_WORD_LENGTH && mOutputChars[start + len] != 0) {
                ++len;
            }
            if (len > 0) {
                callback.addWord(mOutputChars, start, len, mScores[j], mDicTypeId,
                        Dictionary.UNIGRAM);
            }
        }
!!!12770060.java!!!	isValidDictionary() : boolean
        return mNativeDict != 0;
!!!12770188.java!!!	getSuggestions(in codes : WordComposer, in prevWordForBigrams : CharSequence, in proximityInfo : ProximityInfo, inout outputChars : char, inout scores : int) : int
        if (!isValidDictionary()) return -1;

        final int codesSize = codes.size();
        // Won't deal with really long words.
        if (codesSize > MAX_WORD_LENGTH - 1) return -1;

        Arrays.fill(mInputCodes, WordComposer.NOT_A_CODE);
        for (int i = 0; i < codesSize; i++) {
            mInputCodes[i] = codes.getCodeAt(i);
        }
        Arrays.fill(outputChars, (char) 0);
        Arrays.fill(scores, 0);

        final int[] prevWordCodePointArray = null == prevWordForBigrams
                ? null : StringUtils.toCodePointArray(prevWordForBigrams.toString());

        // TODO: pass the previous word to native code
        return getSuggestionsNative(
                mNativeDict, proximityInfo.getNativeProximityInfo(),
                codes.getXCoordinates(), codes.getYCoordinates(), mInputCodes, codesSize,
                prevWordCodePointArray, mUseFullEditDistance, outputChars, scores);
!!!12770316.java!!!	calcNormalizedScore(in before : String, in after : String, in score : int) : float
        return calcNormalizedScoreNative(before.toCharArray(), before.length(),
                after.toCharArray(), after.length(), score);
!!!12770444.java!!!	editDistance(in before : String, in after : String) : int
        return editDistanceNative(
                before.toCharArray(), before.length(), after.toCharArray(), after.length());
!!!12770572.java!!!	isValidWord(inout word : CharSequence) : boolean
        return getFrequency(word) >= 0;
!!!12770700.java!!!	getFrequency(inout word : CharSequence) : int
        if (word == null) return -1;
        int[] chars = StringUtils.toCodePointArray(word.toString());
        return getFrequencyNative(mNativeDict, chars, chars.length);
!!!12770828.java!!!	isValidBigram(inout word1 : CharSequence, inout word2 : CharSequence) : boolean
        if (TextUtils.isEmpty(word1) || TextUtils.isEmpty(word2)) return false;
        int[] chars1 = StringUtils.toCodePointArray(word1.toString());
        int[] chars2 = StringUtils.toCodePointArray(word2.toString());
        return isValidBigramNative(mNativeDict, chars1, chars2);
!!!12770956.java!!!	close() : void
        closeInternal();
!!!12771084.java!!!	closeInternal() : void
        if (mNativeDict != 0) {
            closeNative(mNativeDict);
            mNativeDict = 0;
        }
!!!12771212.java!!!	finalize() : void
        try {
            closeInternal();
        } finally {
            super.finalize();
        }
