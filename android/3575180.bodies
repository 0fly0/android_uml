class Element
!!!15444108.java!!!	Element(inout file : File, inout zip : File, inout dexFile : DexFile)
            this.file = file;
            this.zip = zip;
            this.dexFile = dexFile;
!!!15444236.java!!!	maybeInit() : void
            if (init) {
                return;
            }

            init = true;

            if (zip == null) {
                /*
                 * Either this element has no zip/jar file (first
                 * clause), or the zip/jar file doesn't have an entry
                 * for the given name (second clause).
                 */
                return;
            }

            try {
                zipFile = new ZipFile(zip);
            } catch (IOException ioe) {
                /*
                 * Note: ZipException (a subclass of IOException)
                 * might get thrown by the ZipFile constructor
                 * (e.g. if the file isn't actually a zip/jar
                 * file).
                 */
                System.logE("Unable to open zip file: " + file, ioe);
                zipFile = null;
            }
!!!15444364.java!!!	findResource(in name : String) : URL
            maybeInit();

            if (zipFile == null || zipFile.getEntry(name) == null) {
                return null;
            }

            try {
                /*
                 * File.toURL() is compliant with RFC 1738 in
                 * always creating absolute path names. If we
                 * construct the URL by concatenating strings, we
                 * might end up with illegal URLs for relative
                 * names.
                 */
                return new URL("jar:" + file.toURL() + "!/" + name);
            } catch (MalformedURLException ex) {
                throw new RuntimeException(ex);
            }
