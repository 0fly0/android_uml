class XmlMessageWrapper
!!!13189516.java!!!	XmlMessageWrapper(in recieverId : String, in protocolVersion : int, in creatorId : byte, inout payload : byte)
        mReceiverId = recieverId;
        mProtocolVersion = protocolVersion;
        mCreatorId = creatorId;
        mPayload = payload;
!!!13189644.java!!!	serializeToOutputStream(inout outputStream : OutputStream) : void
        // Receiver ID
        outputStream.write(stringToBytesPadded(mReceiverId,
                HEADER_FIELD_RECEIVER_ID_LENGTH));

        // Payload length
        outputStream.write(intToBigEndianIntBytes(mPayload.length));

        // Protocol version
        outputStream.write(intToBigEndianShortBytes(mProtocolVersion));

        // Creator ID
        outputStream.write(mCreatorId);

        // Padding
        byte[] pad = new byte[HEADER_FIELD_PADDING_LENGTH];
        outputStream.write(pad);

        // Payload
        outputStream.write(mPayload);
!!!13189772.java!!!	serializeToByteArray() : byte
        int len = mPayload.length + HEADER_SIZE;
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(len);
        serializeToOutputStream(outputStream);
        return outputStream.toByteArray();
!!!13189900.java!!!	fromInputStream(inout stream : InputStream) : XmlMessageWrapper
        String receiverId = new String(readBytes(stream,
                HEADER_FIELD_RECEIVER_ID_LENGTH));
        receiverId = receiverId.replace("\0", "");

        // TODO(mikey): Determine maximum protocol message payload size,
        // and throw an exception (or skip bytes) if value is not
        // legal.  Since we will allocate a byte buffer equal to this size,
        // it would be wise to establish the upper bound asap.
        byte[] payloadLenBytes = readBytes(stream, HEADER_FIELD_PAYLOAD_LENGTH);
        long payloadLen = intBigEndianBytesToLong(payloadLenBytes);

        // TODO(mikey): determine range of valid protocol versions,
        // and throw an exception (or skip bytes) if the message isn't legal.
        int protocolVersion = shortBigEndianBytesToInt(readBytes(stream,
                HEADER_FIELD_PROTOCOL_VERSION_LENGTH));

        byte createorId = readBytes(stream, 1)[0];
        byte[] padding = readBytes(stream, HEADER_FIELD_PADDING_LENGTH);
        byte[] payload = readBytes(stream, (int)payloadLen);

        return new XmlMessageWrapper(receiverId, protocolVersion, createorId,
                payload);

!!!13190028.java!!!	getCreatorId() : byte
        return mCreatorId;
!!!13190156.java!!!	getPayload() : byte
        return mPayload;
!!!13190284.java!!!	getPayloadStream() : InputStream
        return new ByteArrayInputStream(mPayload);
!!!13190412.java!!!	intBigEndianBytesToLong(inout input : byte) : long
        assert (input.length == 4);
        long ret = (long)(input[0]) & 0xff;
        ret <<= 8;
        ret |= (long)(input[1]) & 0xff;
        ret <<= 8;
        ret |= (long)(input[2]) & 0xff;
        ret <<= 8;
        ret |= (long)(input[3]) & 0xff;
        return ret;
!!!13190540.java!!!	intToBigEndianIntBytes(in intVal : int) : byte
        byte[] outBuf = new byte[4];
        outBuf[0] = (byte)((intVal >> 24) & 0xff);
        outBuf[1] = (byte)((intVal >> 16) & 0xff);
        outBuf[2] = (byte)((intVal >> 8) & 0xff);
        outBuf[3] = (byte)(intVal & 0xff);
        return outBuf;
!!!13190668.java!!!	shortBigEndianBytesToInt(inout input : byte) : int
        assert (input.length == 2);
        int ret = (input[0]) & 0xff;
        ret <<= 8;
        ret |= input[1] & 0xff;
        return ret;
!!!13190796.java!!!	intToBigEndianShortBytes(in intVal : int) : byte
        byte[] outBuf = new byte[2];
        outBuf[0] = (byte)((intVal >> 8) & 0xff);
        outBuf[1] = (byte)(intVal & 0xff);
        return outBuf;
!!!13190924.java!!!	stringToBytesPadded(in string : String, in byteLen : int) : byte
        byte[] outBuf = new byte[byteLen];
        byte[] stringBytes = string.getBytes();

        for (int i=0; i < outBuf.length; i++) {
            if (i < stringBytes.length) {
                outBuf[i] = stringBytes[i];
            } else {
                outBuf[i] = '\0';
            }
        }
        return outBuf;
!!!13191052.java!!!	readBytes(inout stream : InputStream, in numBytes : int) : byte
        byte buffer[] = new byte[numBytes];
        int bytesRead = 0;

        while (bytesRead < numBytes) {
            int inc = stream.read(buffer, bytesRead, numBytes - bytesRead);
            if (inc < 0) {
                throw new IOException("Stream closed while reading.");
            }
            bytesRead += inc;
        }
        
        return buffer;
