class MemoryMearurementAdapter
!!!14019980.java!!!	MemoryMearurementAdapter(inout activity : Activity)
            mContext = activity;
            final StorageVolume storageVolume = activity.getIntent().getParcelableExtra(
                    StorageVolume.EXTRA_STORAGE_VOLUME);
            StorageMeasurement mMeasurement = StorageMeasurement.getInstance(
                    activity, storageVolume);
            if (mMeasurement == null) return;
            mData = (ArrayList<StorageMeasurement.FileInfo>) mMeasurement.mFileInfoForMisc;
            if (mData != null) {
                for (StorageMeasurement.FileInfo info : mData) {
                    mDataSize += info.mSize;
                }
            }
!!!14020108.java!!!	getCount() : int
            return (mData == null) ? 0 : mData.size();
!!!14020236.java!!!	getItem(in position : int) : FileInfo
            if (mData == null || mData.size() <= position) {
                return null;
            }
            return mData.get(position);
!!!14020364.java!!!	getItemId(in position : int) : long
            if (mData == null || mData.size() <= position) {
                return 0;
            }
            return mData.get(position).mId;
!!!14020492.java!!!	removeAll(inout objs : List<Object>) : void
            if (mData == null) {
                return;
            }
            for (Object o : objs) {
                mData.remove(o);
                mDataSize -= ((StorageMeasurement.FileInfo) o).mSize;
            }
!!!14020620.java!!!	getDataSize() : long
            return mDataSize;
!!!14020748.java!!!	notifyDataSetChanged() : void
            super.notifyDataSetChanged();
!!!14020876.java!!!	getView(in position : int, inout convertView : View, inout parent : ViewGroup) : View
            final FileItemInfoLayout view = (convertView == null) ?
                    (FileItemInfoLayout) mInflater.inflate(R.layout.settings_storage_miscfiles,
                            parent, false) : (FileItemInfoLayout) convertView;
            FileInfo item = getItem(position);
            view.setFileName(item.mFileName);
            view.setFileSize(Formatter.formatFileSize(mContext, item.mSize));
            final ListView listView = (ListView) parent;
            final int listPosition = position;
            view.getCheckBox().setOnCheckedChangeListener(new OnCheckedChangeListener() {
                
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    listView.setItemChecked(listPosition, isChecked);
                }
                
            });
            view.setOnLongClickListener(new OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    if (listView.getCheckedItemCount() > 0) {
                        return false;
                    }
                    listView.setItemChecked(listPosition, !view.isChecked());
                    return true;
                }
            });
            view.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (listView.getCheckedItemCount() > 0) {
                        listView.setItemChecked(listPosition, !view.isChecked());
                    }
                }
            });
            return view;
