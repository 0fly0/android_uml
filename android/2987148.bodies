class MediaCodecControl
!!!12163212.java!!!	MediaCodecControl(inout context : Context)
        //super(context);
        initMediaCodecControl();
!!!12163340.java!!!	initMediaCodecControl() : void
        mState = STATE_IDLE;

        mHandler = new Handler() {
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case EVENT_PREPARE:
                    {
                        try {
                            prepare();
                            start();
                        } catch (IOException e) {
                            Log.d(TAG, "prepare failed.");
                        } catch (MediaCryptoException e) {
                            Log.d(TAG, "failed to initialize crypto.");
                        }
                        break;
                    }

                    case EVENT_DO_SOME_WORK:
                    {
                        doSomeWork();

                        mHandler.sendMessageDelayed(
                                mHandler.obtainMessage(EVENT_DO_SOME_WORK), 5);
                        break;
                    }

                    default:
                        break;
                }
            }
        };
!!!12163468.java!!!	setDataSource(inout context : Context, inout uri : Uri, inout headers : Map<String, String>, inout encrypted : boolean) : void
        reset();

        mContext = context;
        mUri = uri;
        mHeaders = headers;
        mEncrypted = encrypted;
        try {
            setsource();
        }catch (IOException e){
            Log.d(TAG, "set source fail failed.");
        }
!!!12163596.java!!!	setsource() : void
        try {
            mExtractor = new MediaExtractor();

            mExtractor.setDataSource(mContext, mUri, mHeaders);
        } catch (IOException e) {
            reset();
            throw e;
        }
!!!12163724.java!!!	prepare() : void
        if (mEncrypted) {
            UUID uuid = new UUID(
                    (long)0xedef8ba979d64aceL, (long)0xa3c827dcd51d21edL);

            try {
                mCrypto = new MediaCrypto(uuid, null);
            } catch (MediaCryptoException e) {
                reset();

                throw e;
            }
        }

        mCodecStates = new HashMap();

        boolean haveAudio = false;
        boolean haveVideo = false;
        for (int i = 0; i< playTrackNum; i++) {
            MediaFormat format = mExtractor.getTrackFormat(i);
            //Log.d(TAG, "track format #" + i + " is " + format);

            String mime = format.getString(MediaFormat.KEY_MIME);

            boolean isVideo = mime.startsWith("video/");
            boolean isAudio = mime.startsWith("audio/");

            //if (!haveAudio && isAudio || !haveVideo && isVideo) {
            if (isVideo) {
                mExtractor.selectTrack(i);
                addTrack(i, format, mEncrypted, mSurfaceViewList.get(i));

                if (isAudio) {
                    haveAudio = true;
                } else {
                    haveVideo = true;
                }

                if (format.containsKey(MediaFormat.KEY_DURATION)) {
                    long durationUs = format.getLong(MediaFormat.KEY_DURATION);

                    if (durationUs > mDurationUs) {
                        mDurationUs = durationUs;
                    }
                }

                if (haveAudio && haveVideo) {
                    break;
                }
            }
        }

        mState = STATE_PAUSED;
!!!12163852.java!!!	getSecureDecoderNameForMime(in mime : String) : String
        int n = MediaCodecList.getCodecCount();
        for (int i = 0; i < n; ++i) {
            MediaCodecInfo info = MediaCodecList.getCodecInfoAt(i);

            if (info.isEncoder()) {
                continue;
            }

            String[] supportedTypes = info.getSupportedTypes();

            for (int j = 0; j < supportedTypes.length; ++j) {
                if (supportedTypes[j].equalsIgnoreCase(mime)) {
                    return info.getName() + ".secure";
                }
            }
        }

        return null;
!!!12163980.java!!!	addTrack(in trackIndex : int, inout format : MediaFormat, inout encrypted : boolean, inout surfaceview : SurfaceView) : void
        String mime = format.getString(MediaFormat.KEY_MIME);

        boolean isVideo = mime.startsWith("video/");
        Log.d(TAG, " add track, mime = " + mime);

        MediaCodec codec;

        if (encrypted && mCrypto.requiresSecureDecoderComponent(mime)) {
            codec = MediaCodec.createByCodecName(
                    getSecureDecoderNameForMime(mime));
        } else {
            if(decoderSoft == true){
                if(mime.indexOf("avc", 6) > 0){
                    Log.d(TAG, "will use soft decoder: OMX.google.h264.decoder");
                    codec = MediaCodec.createByCodecName("OMX.google.h264.decoder");
                }else if (mime.indexOf("mp4v", 6) > 0){
                    Log.d(TAG, "will use soft decoder: OMX.google.mpeg4.decoder");
                    codec = MediaCodec.createByCodecName("OMX.google.mpeg4.decoder");
                }else{
                    codec = MediaCodec.createDecoderByType(mime);
                }
            }else{
                Log.d(TAG, "auto choose decoder, will firstly choose hardware decoder ");
                codec = MediaCodec.createDecoderByType(mime);
            }
        }

        codec.configure(
                format,
                isVideo ? surfaceview.getHolder().getSurface() : null,
                mCrypto,
                0);

        CodecState state =
            new CodecState(this, mExtractor, trackIndex, format, codec);

        mCodecStates.put(new Integer(trackIndex), state);
!!!12164108.java!!!	start() : void
        Log.d(TAG, "start");

        if (mState == STATE_PLAYING || mState == STATE_PREPARING) {
            return;
        } else if (mState == STATE_IDLE) {
            mState = STATE_PREPARING;
            mHandler.sendMessage(mHandler.obtainMessage(EVENT_PREPARE));
            return;
        } else if (mState != STATE_PAUSED) {
            throw new IllegalStateException();
        }

        for (CodecState state : mCodecStates.values()) {
            state.start();//start audio
        }

        mHandler.sendMessage(mHandler.obtainMessage(EVENT_DO_SOME_WORK));//start video

        mDeltaTimeUs = -1;
        mState = STATE_PLAYING;

!!!12164236.java!!!	pause() : void
        Log.d(TAG, "pause");

        if (mState == STATE_PAUSED) {
            return;
        } else if (mState != STATE_PLAYING) {
            throw new IllegalStateException();
        }

        mHandler.removeMessages(EVENT_DO_SOME_WORK);

        for (CodecState state : mCodecStates.values()) {
            state.pause();
        }

        mState = STATE_PAUSED;
!!!12164364.java!!!	reset() : void
        if (mState == STATE_PLAYING) {
            pause();
        }

        if (mCodecStates != null) {
            for (CodecState state : mCodecStates.values()) {
                state.release();
            }
            mCodecStates = null;
        }

        if (mExtractor != null) {
            mExtractor.release();
            mExtractor = null;
        }

        if (mCrypto != null) {
            mCrypto.release();
            mCrypto = null;
        }

        mDurationUs = -1;
        mState = STATE_IDLE;
!!!12164492.java!!!	doSomeWork() : void
        for (CodecState state : mCodecStates.values()) {
            state.doSomeWork();
        }
!!!12164620.java!!!	getRealTimeUsForMediaTime(in mediaTimeUs : long) : long
        if (mDeltaTimeUs == -1) {
            long nowUs = System.currentTimeMillis() * 1000;
            mDeltaTimeUs = nowUs - mediaTimeUs;
        }

        return mDeltaTimeUs + mediaTimeUs;
!!!12164748.java!!!	getDuration() : int
        return (int)((mDurationUs + 500) / 1000);
!!!12164876.java!!!	getCurrentPosition() : int
        long positionUs = 0;

        for (CodecState state : mCodecStates.values()) {
            long trackPositionUs = state.getCurrentPositionUs();

            if (trackPositionUs > positionUs) {
                positionUs = trackPositionUs;
            }
        }

        return (int)((positionUs + 500) / 1000);
!!!12165004.java!!!	isPlaying() : boolean
        return mState == STATE_PLAYING;
!!!12165132.java!!!	getBufferPercentage() : int
        long cachedDurationUs = mExtractor.getCachedDuration();

        if (cachedDurationUs < 0 || mDurationUs < 0) {
            return 0;
        }

        int nowMs = getCurrentPosition();

        int percentage =
            100 * (nowMs + (int)(cachedDurationUs / 1000))
                / (int)(mDurationUs / 1000);

        if (percentage > 100) {
            percentage = 100;
        }

        return percentage;
!!!12165260.java!!!	canPause() : boolean
        return true;
!!!12165388.java!!!	canSeekBackward() : boolean
        return true;
!!!12165516.java!!!	canSeekForward() : boolean
        return true;
!!!12165644.java!!!	setSurfaceView(inout surfaceviewList : ArrayList<SurfaceView>) : void
        mSurfaceViewList = surfaceviewList;
!!!12165772.java!!!	getTrackCount() : int
        int total_track_num= mExtractor.getTrackCount();
        int video_track_num = 0;
        boolean isVideo;
        for (int i = 0; i< total_track_num; i++) {
            MediaFormat format = mExtractor.getTrackFormat(i);
            Log.d(TAG, "track format #" + i + " is " + format);

            String mime = format.getString(MediaFormat.KEY_MIME);
            isVideo = mime.startsWith("video/");
            if(isVideo)
                video_track_num += 1;

        }
        return video_track_num;
!!!12165900.java!!!	setPlayTrackCount(in param : int) : void
        playTrackNum = param;
!!!12166028.java!!!	setDecoderSoft(inout param : boolean) : void
        decoderSoft = param;
