class CoderResult
!!!802075.java!!!	CoderResult(in type : int, in length : int)
        this.type = type;
        this.length = length;
!!!802203.java!!!	malformedForLength(in length : int) : CoderResult
        if (length > 0) {
            Integer key = Integer.valueOf(length);
            synchronized (_malformedErrors) {
                CoderResult r = _malformedErrors.get(key);
                if (r == null) {
                    r = new CoderResult(TYPE_MALFORMED_INPUT, length);
                    _malformedErrors.put(key, r);
                }
                return r;
            }
        }
        throw new IllegalArgumentException("length <= 0: " + length);
!!!802331.java!!!	unmappableForLength(in length : int) : CoderResult
        if (length > 0) {
            Integer key = Integer.valueOf(length);
            synchronized (_unmappableErrors) {
                CoderResult r = _unmappableErrors.get(key);
                if (r == null) {
                    r = new CoderResult(TYPE_UNMAPPABLE_CHAR, length);
                    _unmappableErrors.put(key, r);
                }
                return r;
            }
        }
        throw new IllegalArgumentException("length <= 0: " + length);
!!!802459.java!!!	isUnderflow() : boolean
        return this.type == TYPE_UNDERFLOW;
!!!802587.java!!!	isError() : boolean
        return this.type == TYPE_MALFORMED_INPUT
                || this.type == TYPE_UNMAPPABLE_CHAR;
!!!802715.java!!!	isMalformed() : boolean
        return this.type == TYPE_MALFORMED_INPUT;
!!!802843.java!!!	isOverflow() : boolean
        return this.type == TYPE_OVERFLOW;
!!!802971.java!!!	isUnmappable() : boolean
        return this.type == TYPE_UNMAPPABLE_CHAR;
!!!803099.java!!!	length() : int
        if (this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {
            return this.length;
        }
        throw new UnsupportedOperationException("length meaningless for " + toString());
!!!803227.java!!!	throwException() : void
        switch (this.type) {
            case TYPE_UNDERFLOW:
                throw new BufferUnderflowException();
            case TYPE_OVERFLOW:
                throw new BufferOverflowException();
            case TYPE_UNMAPPABLE_CHAR:
                throw new UnmappableCharacterException(this.length);
            case TYPE_MALFORMED_INPUT:
                throw new MalformedInputException(this.length);
            default:
                throw new CharacterCodingException();
        }
!!!803355.java!!!	toString() : String
        String dsc = null;
        switch (this.type) {
            case TYPE_UNDERFLOW:
                dsc = "UNDERFLOW error";
                break;
            case TYPE_OVERFLOW:
                dsc = "OVERFLOW error";
                break;
            case TYPE_UNMAPPABLE_CHAR:
                dsc = "Unmappable-character error with erroneous input length "
                        + this.length;
                break;
            case TYPE_MALFORMED_INPUT:
                dsc = "Malformed-input error with erroneous input length "
                        + this.length;
                break;
            default:
                dsc = "";
                break;
        }
        return getClass().getName() + "[" + dsc + "]";
