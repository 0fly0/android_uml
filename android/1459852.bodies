class TextResult
!!!9083020.java!!!	TextResult(in relativePath : String)
        mRelativePath = relativePath;
!!!9083148.java!!!	setDumpChildFramesAsText(inout dumpChildFramesAsText : boolean) : void
        mDumpChildFramesAsText = dumpChildFramesAsText;
!!!9083276.java!!!	TextResult(inout bundle : Bundle)
        mExpectedResult = bundle.getString("expectedTextualResult");
        mExpectedResultPath = bundle.getString("expectedTextualResultPath");
        mActualResult = bundle.getString("actualTextualResult");
        setAdditionalTextOutputString(bundle.getString("additionalTextOutputString"));
        mRelativePath = bundle.getString("relativePath");
        mDidTimeOut = bundle.getBoolean("didTimeOut");
!!!9083404.java!!!	clearResults() : void
        super.clearResults();
        mExpectedResult = null;
        mActualResult = null;
!!!9083532.java!!!	getResultCode() : ResultCode
        if (mResultCode == null) {
            mResultCode = resultsMatch() ? AbstractResult.ResultCode.RESULTS_MATCH
                    : AbstractResult.ResultCode.RESULTS_DIFFER;
        }
        return mResultCode;
!!!9083660.java!!!	resultsMatch() : boolean
        assert mExpectedResult != null;
        assert mActualResult != null;
        // Trim leading and trailing empty lines, as other WebKit platforms do.
        String leadingEmptyLines = "^\\n+";
        String trailingEmptyLines = "\\n+$";
        String trimmedExpectedResult = mExpectedResult.replaceFirst(leadingEmptyLines, "")
                .replaceFirst(trailingEmptyLines, "");
        String trimmedActualResult = mActualResult.replaceFirst(leadingEmptyLines, "")
                .replaceFirst(trailingEmptyLines, "");
        return trimmedExpectedResult.equals(trimmedActualResult);
!!!9083788.java!!!	didCrash() : boolean
        return false;
!!!9083916.java!!!	didTimeOut() : boolean
        return mDidTimeOut;
!!!9084044.java!!!	setDidTimeOut() : void
        mDidTimeOut = true;
!!!9084172.java!!!	getActualImageResult() : byte
        return null;
!!!9084300.java!!!	getActualTextResult() : String
        String additionalTextResultString = getAdditionalTextOutputString();
        if (additionalTextResultString != null) {
            return additionalTextResultString + mActualResult;
        }

        return mActualResult;
!!!9084428.java!!!	setExpectedImageResult(inout expectedResult : byte) : void
        /** This method is not applicable to this type of result */
!!!9084556.java!!!	setExpectedImageResultPath(in relativePath : String) : void
        /** This method is not applicable to this type of result */
!!!9084684.java!!!	getExpectedImageResultPath() : String
        /** This method is not applicable to this type of result */
        return null;
!!!9084812.java!!!	setExpectedTextResultPath(in relativePath : String) : void
        mExpectedResultPath = relativePath;
!!!9084940.java!!!	getExpectedTextResultPath() : String
        return mExpectedResultPath;
!!!9085068.java!!!	setExpectedTextResult(in expectedResult : String) : void
        // For text results, we use an empty string for the expected result when none is
        // present, as other WebKit platforms do.
        mExpectedResult = expectedResult == null ? "" : expectedResult;
!!!9085196.java!!!	getDiffAsHtml() : String
        assert mExpectedResult != null;
        assert mActualResult != null;

        StringBuilder html = new StringBuilder();
        html.append("<table class=\"visual_diff\">");
        html.append("    <tr class=\"headers\">");
        html.append("        <td colspan=\"2\">Expected result:</td>");
        html.append("        <td class=\"space\"></td>");
        html.append("        <td colspan=\"2\">Actual result:</td>");
        html.append("    </tr>");

        appendDiffHtml(html);

        html.append("    <tr class=\"footers\">");
        html.append("        <td colspan=\"2\"></td>");
        html.append("        <td class=\"space\"></td>");
        html.append("        <td colspan=\"2\"></td>");
        html.append("    </tr>");
        html.append("</table>");

        return html.toString();
!!!9085324.java!!!	appendDiffHtml(inout html : StringBuilder) : void
        LinkedList<diff_match_patch.Diff> diffs =
                new diff_match_patch().diff_main(mExpectedResult, mActualResult);

        diffs = VisualDiffUtils.splitDiffsOnNewline(diffs);

        LinkedList<String> expectedLines = new LinkedList<String>();
        LinkedList<Integer> expectedLineNums = new LinkedList<Integer>();
        LinkedList<String> actualLines = new LinkedList<String>();
        LinkedList<Integer> actualLineNums = new LinkedList<Integer>();

        VisualDiffUtils.generateExpectedResultLines(diffs, expectedLineNums, expectedLines);
        VisualDiffUtils.generateActualResultLines(diffs, actualLineNums, actualLines);
        // TODO: We should use a map for each line number and lines pair.
        assert expectedLines.size() == expectedLineNums.size();
        assert actualLines.size() == actualLineNums.size();
        assert expectedLines.size() == actualLines.size();

        html.append(VisualDiffUtils.getHtml(expectedLineNums, expectedLines,
                actualLineNums, actualLines));
!!!9085452.java!!!	getType() : TestType
        return TestType.TEXT;
!!!9085580.java!!!	obtainActualResults(inout webview : WebView, inout resultObtainedMsg : Message) : void
        mResultObtainedMsg = resultObtainedMsg;
        Message msg = mHandler.obtainMessage(MSG_DOCUMENT_AS_TEXT);

        /**
         * arg1 - should dump top frame as text
         * arg2 - should dump child frames as text
         */
        msg.arg1 = 1;
        msg.arg2 = mDumpChildFramesAsText ? 1 : 0;
        WebViewClassic.fromWebView(webview).documentAsText(msg);
!!!9085708.java!!!	getBundle() : Bundle
        Bundle bundle = new Bundle();
        bundle.putString("expectedTextualResult", mExpectedResult);
        bundle.putString("expectedTextualResultPath", mExpectedResultPath);
        bundle.putString("actualTextualResult", getActualTextResult());
        bundle.putString("additionalTextOutputString", getAdditionalTextOutputString());
        bundle.putString("relativePath", mRelativePath);
        bundle.putBoolean("didTimeOut", mDidTimeOut);
        bundle.putString("type", getType().name());
        return bundle;
!!!9085836.java!!!	getRelativePath() : String
        return mRelativePath;
