class TvSettingsObserverService
!!!13892492.java!!!	onCreate() : void
        super.onCreate();
        Log.i(LOG_TAG, "onCreate");

        mContentResolver = getContentResolver();

        TvSettingsObserver observer = new TvSettingsObserver(new Handler());

        changeStayOnWhilePluggedInIfNecessary();
        mContentResolver.registerContentObserver(Settings.Global.getUriFor(
                Settings.Global.STAY_ON_WHILE_PLUGGED_IN),
                false, observer);

        changeVolumesIfNecessary();
        for (String volumeSetting : VOLUME_SETTINGS) {
            mContentResolver.registerContentObserver(Settings.System.getUriFor(volumeSetting),
                    false, observer);
        }

        if (android.os.Build.TYPE.equals(USER_BUILD_TYPE)) {
            changeAdbServiceStatusIfNecessary();
            mContentResolver.registerContentObserver(
                    Settings.Global.getUriFor(Settings.Global.ADB_ENABLED),
                    false, new TvSettingsObserverExtraForUserBuild(new Handler()));
        }
!!!13892620.java!!!	onBind(inout arg : Intent) : IBinder
        return null;
!!!13892748.java!!!	changeStayOnWhilePluggedInIfNecessary() : void
        if (Settings.Global.getInt(mContentResolver,
                    Settings.Global.STAY_ON_WHILE_PLUGGED_IN, 0) == 0) {
            Log.i(LOG_TAG, "not allow to turn off STAY_ON_WHILE_PLUGGED_IN");
            Settings.Global.putInt(mContentResolver, Settings.Global.STAY_ON_WHILE_PLUGGED_IN, 1);
        }
!!!13892876.java!!!	changeVolumesIfNecessary() : void
        IBinder b = ServiceManager.getService(Context.AUDIO_SERVICE);
        IAudioService service = IAudioService.Stub.asInterface(b);

        for (int streamIndex = 0; streamIndex < VOLUME_SETTINGS.length; streamIndex++) {
            final String settingName = VOLUME_SETTINGS[streamIndex];
            final int defaultValue = AudioManager.DEFAULT_STREAM_VOLUME[streamIndex];

            if (Settings.System.getInt(mContentResolver, settingName, defaultValue) !=
                    defaultValue) {
                Log.i(LOG_TAG, "not allow to change " + settingName);
                try {
                    service.setStreamVolume(streamIndex, defaultValue, 0);

                    // We need to change the value explicitly because restoring a user's account
                    // can change only the value in DB with leaving AudioService as it was.
                    Settings.System.putInt(mContentResolver, settingName, defaultValue);
                    Settings.System.putInt(mContentResolver,
                            settingName + Settings.System.APPEND_FOR_LAST_AUDIBLE,
                            defaultValue);
                } catch (RemoteException ex) {
                    Log.w(LOG_TAG, "Exception changing volume of music", ex);
                }
            }
        }
!!!13893004.java!!!	changeAdbServiceStatusIfNecessary() : void
        if (Settings.Global.getInt(mContentResolver, Settings.Global.ADB_ENABLED, 0) > 0) {
            if (SystemService.isStopped(ADBD_SERVICE)) {
                Log.d(LOG_TAG, "ADB is enabled. Running ADB service");
                SystemService.start(ADBD_SERVICE);
            }
        } else {
            if (SystemService.isRunning(ADBD_SERVICE)) {
                Log.d(LOG_TAG, "ADB is disabled. Stopping ADB service");
                SystemService.stop(ADBD_SERVICE);
            }
        }
