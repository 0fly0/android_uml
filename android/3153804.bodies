class NotificationPanel
!!!13355532.java!!!	isEnlarged(inout entry : Entry) : boolean
        // See BaseStatusBar::expandView() and SizeAdaptiveLayout to check how expansion works.
        //
        // Note that visibility of expanded view is not reliable to determine expansion state,
        // because both one U and large view can be visibile during expansion animation.
        return entry.expandable()
                && entry.row.getLayoutParams().height == ViewGroup.LayoutParams.WRAP_CONTENT;
!!!13355660.java!!!	getActiveView(inout entry : Entry) : View
        return isEnlarged(entry) ? entry.getLargeView() : entry.expanded;
!!!13355788.java!!!	NotificationPanel(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);

        mInAnim = (AnimatorSet) AnimatorInflater.loadAnimator(context,
                R.anim.tv_notification_panel_in);
        mInAnim.setTarget(this);

        mOutAnim = (AnimatorSet) AnimatorInflater.loadAnimator(context,
                R.anim.tv_notification_panel_out);
        mOutAnim.setTarget(this);
        mOutAnim.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animation) {
            }

            @Override
            public void onAnimationEnd(Animator animation) {
                setVisibility(View.GONE);
            }

            @Override
            public void onAnimationCancel(Animator animation) {
            }

            @Override
            public void onAnimationRepeat(Animator animation) {
            }
        });
!!!13355916.java!!!	onFinishInflate() : void
        setVisibility(View.GONE);

        View clearAllButton = findViewById(R.id.clear_all_button);
        clearAllButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mBar.clearAllNotifications();
            }
        });

        View settingsButton = findViewById(R.id.settings_button);
        settingsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(Settings.ACTION_SETTINGS);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                mContext.startActivity(intent);

                mBar.animateCollapsePanels();
            }
        });

        View networkArea = findViewById(R.id.network_area);
        networkArea.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final int connType = mBar.mNetworkController.getConnectedNetworkType();
                String action;
                switch (connType) {
                    case ConnectivityManager.TYPE_ETHERNET:
                        action = ACTION_ETHERNET_SETTINGS;
                        break;

                    case ConnectivityManager.TYPE_WIFI:
                        action = Settings.ACTION_WIFI_SETTINGS;
                        break;

                    default:
                        action = Settings.ACTION_WIRELESS_SETTINGS;
                        break;
                }

                Intent intent = new Intent(action);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                mContext.startActivity(intent);

                mBar.animateCollapsePanels();
            }
        });

        mTitleArea = (ViewGroup) findViewById(R.id.title_area);
        mScroll = findViewById(R.id.scroll);

        mPile = (NotificationRowLayout) findViewById(R.id.pile);
        mPile.setLongPressListener(mLongClickListener);

        mMiniButtonArea = (ViewGroup) findViewById(R.id.mini_button_area);

        View.OnKeyListener miniButtonKeyListener = new View.OnKeyListener() {
            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                if (v.getWindowToken() == null) return false;

                NotificationData.Entry entry = (NotificationData.Entry) mMiniButtonArea.getTag();
                if (entry == null) return false;

                // When there's focusable inside notification item, it's likely that inner
                // focusable gets focus first because its center is "closer".
                switch (keyCode) {
                    case KeyEvent.KEYCODE_DPAD_LEFT:
                        if (event.getAction() == KeyEvent.ACTION_DOWN) {
                            entry.content.requestFocus();
                            return true;
                        }
                        break;

                    case KeyEvent.KEYCODE_DPAD_UP:
                        if (event.getAction() == KeyEvent.ACTION_DOWN
                                && (v == mClearButton
                                    || (!mClearButton.isEnabled() && v == mExpandButton))) {
                            int index = mPile.indexOfChild(entry.row);
                            if (index > 0) {
                                mPile.getChildAt(index - 1).requestFocus();
                                return true;
                            }
                        }
                        break;

                    case KeyEvent.KEYCODE_DPAD_DOWN:
                        if (event.getAction() == KeyEvent.ACTION_DOWN && v == mAppInfoButton) {
                            int index = mPile.indexOfChild(entry.row);
                            if (index >= 0 && index < mPile.getChildCount() - 1) {
                                mPile.getChildAt(index + 1).requestFocus();
                                return true;
                            }
                        }
                        break;
                }
                return false;
            }
        };

        mClearButton = (ImageView) mMiniButtonArea.findViewById(R.id.clear_button);
        mClearButton.setOnKeyListener(miniButtonKeyListener);
        mClearButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                NotificationData.Entry entry = (NotificationData.Entry) mMiniButtonArea.getTag();
                if (entry == null) return;

                mBar.clearNotification(entry.notification, v);
            }
        });

        mExpandButton = (ImageView) mMiniButtonArea.findViewById(R.id.expand_button);
        mExpandButton.setOnKeyListener(miniButtonKeyListener);
        mExpandButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                NotificationData.Entry entry = (NotificationData.Entry) mMiniButtonArea.getTag();
                if (entry == null) return;

                if (isEnlarged(entry)) {
                    mBar.shrinkNotification(entry);
                } else {
                    mBar.expandNotification(entry);
                }
            }
        });

        mAppInfoButton = (ImageView) mMiniButtonArea.findViewById(R.id.app_info_button);
        mAppInfoButton.setOnKeyListener(miniButtonKeyListener);
        mAppInfoButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                NotificationData.Entry entry = (NotificationData.Entry) mMiniButtonArea.getTag();
                if (entry == null) return;

                startApplicationDetailsActivity(entry.notification.pkg);
                mBar.animateCollapsePanels();
            }
        });

        getViewTreeObserver().addOnGlobalFocusChangeListener(
                new ViewTreeObserver.OnGlobalFocusChangeListener() {
            @Override
            public void onGlobalFocusChanged(View oldFocus, View newFocus) {
                if (newFocus instanceof LatestItemView) {
                    updateMiniButtons((NotificationData.Entry) newFocus.getTag());
                } else if (newFocus == null || isInTitleArea(newFocus)) {
                    hideMiniButtons();
                }
            }
        });
!!!13356044.java!!!	setBar(inout bar : GtvStatusBar) : void
        mBar = bar;
!!!13356172.java!!!	setUpNotificationEntry(inout entry : Entry) : void
        // To allow D-pad navigation inside notification items
        ((ViewGroup) entry.content).setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);

        // For reference from listeners
        entry.content.setTag(entry);

        // Listeners for id/content
        entry.content.setOnFocusChangeListener(mFocusChangeListener);
        entry.content.setOnKeyListener(mKeyListener);
        entry.content.setOnLongClickListener(mLongClickListener);

        // Listeners for expanded views
        entry.expanded.addOnLayoutChangeListener(mExpandedViewLayoutChangeListener);
        if (entry.expandable()) {
            // This function will be called again when large view is added to an existing item
            entry.getLargeView().addOnLayoutChangeListener(mExpandedViewLayoutChangeListener);
        }

        // Veto button is invisible, but take focus for accessibility.
        // Unfortunately, it disturbs D-pad navigation when focus moves inside notification item.
        View vetoButton = entry.row.findViewById(R.id.veto);
        vetoButton.setFocusable(false);
!!!13356300.java!!!	load(inout data : NotificationData) : void
        int N = data.size();
        ArrayList<View> toShow = new ArrayList<View>();

        // If the device hasn't been through Setup, we only show system notifications
        for (int i = 0; i < N; i++) {
            NotificationData.Entry entry = data.get(N - i - 1);
            if (mBar.shouldShowNotification(entry)) {
                toShow.add(entry.row);
            }
        }

        ArrayList<View> toRemove = new ArrayList<View>();
        for (int i = 0; i < mPile.getChildCount(); i++) {
            View child = mPile.getChildAt(i);
            if (!toShow.contains(child)) {
                toRemove.add(child);
            }
        }

        for (View remove : toRemove) {
            mPile.removeView(remove);
        }

        for (int i = 0; i < toShow.size(); i++) {
            View v = toShow.get(i);
            if (v.getParent() == null) {
                mPile.addView(v, i);
            }
        }

        // Scroll view takes focus by default.  Usually, it does not matter because it have
        // FOCUS_AFTER_DESCENDANTS, but empty one takes focus.
        mScroll.setVisibility(mPile.getChildCount() == 0 ? View.GONE : View.VISIBLE);

        // This covers addition and removal of notification items
        NotificationData.Entry entry = (NotificationData.Entry) mMiniButtonArea.getTag();
        if (entry != null) {
            if (data.findByKey(entry.key) == null) {
                hideMiniButtons();
            } else {
                getViewTreeObserver().addOnGlobalLayoutListener(mGlobalLayoutListener);
            }
        }

        SystemProperties.set("sys.notification_count", String.valueOf(mPile.getChildCount()));
!!!13356428.java!!!	createPopupMenu(in entry : Entry, in anchor : View) : PopupMenu
        PopupMenu popup = new PopupMenu(mContext, anchor);
        popup.inflate(R.menu.notification_popup_menu);

        Menu menu = popup.getMenu();
        if (entry.expandable()) {
            menu.removeItem(isEnlarged(entry)
                    ? R.id.notification_expand_item : R.id.notification_shrink_item);
        } else {
            menu.removeItem(R.id.notification_expand_item);
            menu.removeItem(R.id.notification_shrink_item);
        }
        if (!entry.notification.isClearable()) menu.removeItem(R.id.notification_clear_item);

        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.notification_inspect_item:
                        startApplicationDetailsActivity(entry.notification.pkg);
                        mBar.animateCollapsePanels();
                        return true;

                    case R.id.notification_expand_item:
                        mBar.expandNotification(entry);
                        return true;

                    case R.id.notification_shrink_item:
                        mBar.shrinkNotification(entry);
                        return true;

                    case R.id.notification_clear_item:
                        mBar.clearNotification(entry.notification, anchor);
                        return true;
                }
                return false;
            }
        });

        return popup;
!!!13356556.java!!!	isInTitleArea(inout v : View) : boolean
        v.getDrawingRect(mTempRect);
        offsetDescendantRectToMyCoords(v, mTempRect);

        mTitleArea.getDrawingRect(mTitleRect);
        offsetDescendantRectToMyCoords(mTitleArea, mTitleRect);

        return mTitleRect.contains(mTempRect);
!!!13356684.java!!!	updateMiniButtons(inout entry : Entry) : void
        NotificationData.Entry oldEntry = (NotificationData.Entry) mMiniButtonArea.getTag();
        if (entry == null) entry = oldEntry;
        if (entry == null || entry.row.getParent() == null) {
            hideMiniButtons();
            return;
        }
        if (oldEntry != entry) {
            if (oldEntry != null) {
                oldEntry.content.removeOnLayoutChangeListener(mLayoutChangeListener);
            }
            mMiniButtonArea.setTag(entry);
            entry.content.addOnLayoutChangeListener(mLayoutChangeListener);
        }

        updateMiniButton(mClearButton, entry.notification.isClearable());
        updateMiniButton(mExpandButton, entry.expandable());

        mExpandButton.setImageResource(!isEnlarged(entry)
                ? R.drawable.ic_btn_expand : R.drawable.ic_btn_shrink);

        // Set vertical position using top margin
        mTempRect.set(0, 0, 0, 0);
        offsetDescendantRectToMyCoords(entry.content, mTempRect);

        LinearLayout.LayoutParams lp =
                (LinearLayout.LayoutParams) mMiniButtonArea.getLayoutParams();
        lp.topMargin = mTempRect.top;
        mMiniButtonArea.setLayoutParams(lp);

        mMiniButtonArea.setVisibility(View.VISIBLE);
!!!13356812.java!!!	updateMiniButton(inout v : ImageView, inout enable : boolean) : void
        v.setVisibility(enable ? View.VISIBLE : View.GONE);
!!!13356940.java!!!	hideMiniButtons() : void
        NotificationData.Entry entry = (NotificationData.Entry) mMiniButtonArea.getTag();
        if (entry == null) return;

        entry.content.removeOnLayoutChangeListener(mLayoutChangeListener);
        mMiniButtonArea.setTag(null);
        mMiniButtonArea.setVisibility(View.INVISIBLE);

        LinearLayout.LayoutParams lp =
                (LinearLayout.LayoutParams) mMiniButtonArea.getLayoutParams();
        lp.topMargin = 0;
        mMiniButtonArea.setLayoutParams(lp);
!!!13357068.java!!!	startApplicationDetailsActivity(in packageName : String) : void
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                Uri.fromParts("package", packageName, null));
        TaskStackBuilder.create(mContext).addNextIntentWithParentStack(intent).startActivities();
!!!13357196.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        switch (event.getKeyCode()) {
            // We exclusively handle the back key by hiding this panel.
            case KeyEvent.KEYCODE_BACK:
                if (event.getAction() == KeyEvent.ACTION_UP) {
                    mBar.animateCollapsePanels();
                }
                return true;

            // We react to the home key but let the system handle it.
            case KeyEvent.KEYCODE_HOME:
                if (event.getAction() == KeyEvent.ACTION_UP) {
                    mBar.animateCollapsePanels();
                }
                break;
        }
        return super.dispatchKeyEvent(event);
!!!13357324.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        switch (event.getActionMasked()) {
            case MotionEvent.ACTION_OUTSIDE:
                mBar.animateCollapsePanels();
                return true;

            case MotionEvent.ACTION_DOWN:
                getHitRect(mTempRect);
                if (!mTempRect.contains((int) event.getX(), (int) event.getY())) {
                    mBar.animateCollapsePanels();
                    return true;
                }
                break;
        }
        return super.onTouchEvent(event);
!!!13357452.java!!!	dispatchUnhandledMove(inout focused : View, in direction : int) : boolean
        if (direction == View.FOCUS_DOWN) {
            mBar.animateCollapsePanels();
            return true;
        }
        return super.dispatchUnhandledMove(focused, direction);
!!!13357580.java!!!	show(inout show : boolean) : void
        if (mShowing == show) return;

        mShowing = show;
        if (show) {
            setVisibility(View.VISIBLE);
            mInAnim.start();

            if (mPile != null && mPile.getChildCount() > 0) {
                // Post, because notification item might not be visible right now.
                mPile.post(new Runnable() {
                    @Override
                    public void run() {
                        if (mPile.getChildCount() > 0) {
                            mPile.getChildAt(0).requestFocus();
                        }
                    }
                });
            }
        } else {
            mOutAnim.start();
        }
