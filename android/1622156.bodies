class CodeCache
!!!9891980.cpp!!!	CodeCache(in size : size_t)
    pthread_mutex_init(&mLock, 0);
!!!9892108.cpp!!!	~CodeCache()
    pthread_mutex_destroy(&mLock);
!!!9892236.cpp!!!	lookup(in keyBase : AssemblyKeyBase) : sp<Assembly>
    pthread_mutex_lock(&mLock);
    sp<Assembly> r;
    ssize_t index = mCacheData.indexOfKey(key_t(keyBase));
    if (index >= 0) {
        const cache_entry_t& e = mCacheData.valueAt(index);
        e.when = mWhen++;
        r = e.entry;
    }
    pthread_mutex_unlock(&mLock);
    return r;
!!!9892364.cpp!!!	cache(in keyBase : AssemblyKeyBase, in assembly : sp<Assembly>) : int
    pthread_mutex_lock(&mLock);

    const ssize_t assemblySize = assembly->size();
    while (mCacheInUse + assemblySize > mCacheSize) {
        // evict the LRU
        size_t lru = 0;
        size_t count = mCacheData.size();
        for (size_t i=0 ; i<count ; i++) {
            const cache_entry_t& e = mCacheData.valueAt(i);
            if (e.when < mCacheData.valueAt(lru).when) {
                lru = i;
            }
        }
        const cache_entry_t& e = mCacheData.valueAt(lru);
        mCacheInUse -= e.entry->size();
        mCacheData.removeItemsAt(lru);
    }

    ssize_t err = mCacheData.add(key_t(keyBase), cache_entry_t(assembly, mWhen));
    if (err >= 0) {
        mCacheInUse += assemblySize;
        mWhen++;
        // synchronize caches...
#if defined(__arm__) || defined(__mips__)
        const long base = long(assembly->base());
        const long curr = base + long(assembly->size());
        err = cacheflush(base, curr, 0);
        ALOGE_IF(err, "cacheflush error %s\n",
                 strerror(errno));
#endif
    }

    pthread_mutex_unlock(&mLock);
    return err;
