class BufferedOutputStream
!!!144539.java!!!	BufferedOutputStream(inout out : OutputStream)
        this(out, 8192);
!!!144667.java!!!	BufferedOutputStream(inout out : OutputStream, in size : int)
        super(out);
        if (size <= 0) {
            throw new IllegalArgumentException("size <= 0");
        }
        buf = new byte[size];
!!!144795.java!!!	flush() : void
        checkNotClosed();
        flushInternal();
        out.flush();
!!!144923.java!!!	checkNotClosed() : void
        if (buf == null) {
            throw new IOException("BufferedOutputStream is closed");
        }
!!!145051.java!!!	write(inout buffer : byte, in offset : int, in length : int) : void
        checkNotClosed();

        if (buffer == null) {
            throw new NullPointerException("buffer == null");
        }

        byte[] internalBuffer = buf;
        if (length >= internalBuffer.length) {
            flushInternal();
            out.write(buffer, offset, length);
            return;
        }

        Arrays.checkOffsetAndCount(buffer.length, offset, length);

        // flush the internal buffer first if we have not enough space left
        if (length > (internalBuffer.length - count)) {
            flushInternal();
        }

        System.arraycopy(buffer, offset, internalBuffer, count, length);
        count += length;
!!!145179.java!!!	close() : void
        if (buf == null) {
            return;
        }

        try {
            super.close();
        } finally {
            buf = null;
        }
!!!145307.java!!!	write(in oneByte : int) : void
        checkNotClosed();
        if (count == buf.length) {
            out.write(buf, 0, count);
            count = 0;
        }
        buf[count++] = (byte) oneByte;
!!!145435.java!!!	flushInternal() : void
        if (count > 0) {
            out.write(buf, 0, count);
            count = 0;
        }
