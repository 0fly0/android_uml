class UiTestAutomationBridge
!!!2151180.java!!!	getLastAccessibilityEvent() : AccessibilityEvent
        return mLastEvent;
!!!2151308.java!!!	onAccessibilityEvent(inout event : AccessibilityEvent) : void
        /* hook - do nothing */
!!!2151436.java!!!	onInterrupt() : void
        /* hook - do nothing */
!!!2151564.java!!!	connect() : void
        if (isConnected()) {
            throw new IllegalStateException("Already connected.");
        }

        // Serialize binder calls to a handler on a dedicated thread
        // different from the main since we expose APIs that block
        // the main thread waiting for a result the deliver of which
        // on the main thread will prevent that thread from waking up.
        // The serialization is needed also to ensure that events are
        // examined in delivery order. Otherwise, a fair locking
        // is needed for making sure the binder calls are interleaved
        // with check for the expected event and also to make sure the
        // binder threads are allowed to proceed in the received order.
        mHandlerThread = new HandlerThread("UiTestAutomationBridge");
        mHandlerThread.setDaemon(true);
        mHandlerThread.start();
        Looper looper = mHandlerThread.getLooper();

        mListener = new IAccessibilityServiceClientWrapper(null, looper, new Callbacks() {
            @Override
            public void onServiceConnected() {
                /* do nothing */
            }

            @Override
            public void onInterrupt() {
                UiTestAutomationBridge.this.onInterrupt();
            }

            @Override
            public void onAccessibilityEvent(AccessibilityEvent event) {
                synchronized (mLock) {
                    while (true) {
                        mLastEvent = AccessibilityEvent.obtain(event);
                        if (!mWaitingForEventDelivery) {
                            mLock.notifyAll();
                            break;
                        }
                        if (!mUnprocessedEventAvailable) {
                            mUnprocessedEventAvailable = true;
                            mLock.notifyAll();
                            break;
                        }
                        try {
                            mLock.wait();
                        } catch (InterruptedException ie) {
                            /* ignore */
                        }
                    }
                }
                UiTestAutomationBridge.this.onAccessibilityEvent(event);
            }

            @Override
            public void onSetConnectionId(int connectionId) {
                synchronized (mLock) {
                    mConnectionId = connectionId;
                    mLock.notifyAll();
                }
            }

            @Override
            public boolean onGesture(int gestureId) {
                return false;
            }
        });

        final IAccessibilityManager manager = IAccessibilityManager.Stub.asInterface(
                ServiceManager.getService(Context.ACCESSIBILITY_SERVICE));

        final AccessibilityServiceInfo info = new AccessibilityServiceInfo();
        info.eventTypes = AccessibilityEvent.TYPES_ALL_MASK;
        info.feedbackType = AccessibilityServiceInfo.FEEDBACK_GENERIC;
        info.flags |= AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;

        try {
            manager.registerUiTestAutomationService(mListener, info);
        } catch (RemoteException re) {
            throw new IllegalStateException("Cound not register UiAutomationService.", re);
        }

        synchronized (mLock) {
            final long startTimeMillis = SystemClock.uptimeMillis();
            while (true) {
                if (isConnected()) {
                    return;
                }
                final long elapsedTimeMillis = SystemClock.uptimeMillis() - startTimeMillis;
                final long remainingTimeMillis = TIMEOUT_REGISTER_SERVICE - elapsedTimeMillis;
                if (remainingTimeMillis <= 0) {
                    throw new IllegalStateException("Cound not register UiAutomationService.");
                }
                try {
                    mLock.wait(remainingTimeMillis);
                } catch (InterruptedException ie) {
                    /* ignore */
                }
            }
        }
!!!2151692.java!!!	disconnect() : void
        if (!isConnected()) {
            throw new IllegalStateException("Already disconnected.");
        }

        mHandlerThread.quit();

        IAccessibilityManager manager = IAccessibilityManager.Stub.asInterface(
              ServiceManager.getService(Context.ACCESSIBILITY_SERVICE));

        try {
            manager.unregisterUiTestAutomationService(mListener);
        } catch (RemoteException re) {
            Log.e(LOG_TAG, "Error while unregistering UiTestAutomationService", re);
        }
!!!2151820.java!!!	isConnected() : boolean
        return (mConnectionId != AccessibilityInteractionClient.NO_ID);
!!!2151948.java!!!	executeCommandAndWaitForAccessibilityEvent(inout command : Runnable, inout predicate : Predicate, in timeoutMillis : long) : AccessibilityEvent
        // TODO: This is broken - remove from here when finalizing this as public APIs.
        synchronized (mLock) {
            // Prepare to wait for an event.
            mWaitingForEventDelivery = true;
            mUnprocessedEventAvailable = false;
            if (mLastEvent != null) {
                mLastEvent.recycle();
                mLastEvent = null;
            }
            // Execute the command.
            command.run();
            // Wait for the event.
            final long startTimeMillis = SystemClock.uptimeMillis();
            while (true) {
                // If the expected event is received, that's it.
                if ((mUnprocessedEventAvailable && predicate.apply(mLastEvent))) {
                    mWaitingForEventDelivery = false;
                    mUnprocessedEventAvailable = false;
                    mLock.notifyAll();
                    return mLastEvent;
                }
                // Ask for another event.
                mWaitingForEventDelivery = true;
                mUnprocessedEventAvailable = false;
                mLock.notifyAll();
                // Check if timed out and if not wait.
                final long elapsedTimeMillis = SystemClock.uptimeMillis() - startTimeMillis;
                final long remainingTimeMillis = timeoutMillis - elapsedTimeMillis;
                if (remainingTimeMillis <= 0) {
                    mWaitingForEventDelivery = false;
                    mUnprocessedEventAvailable = false;
                    mLock.notifyAll();
                    throw new TimeoutException("Expacted event not received within: "
                            + timeoutMillis + " ms.");
                }
                try {
                    mLock.wait(remainingTimeMillis);
                } catch (InterruptedException ie) {
                    /* ignore */
                }
            }
        }
!!!2152076.java!!!	waitForIdle(in idleTimeout : long, in globalTimeout : long) : void
        final long startTimeMillis = SystemClock.uptimeMillis();
        long lastEventTime = (mLastEvent != null)
                ? mLastEvent.getEventTime() : SystemClock.uptimeMillis();
        synchronized (mLock) {
            while (true) {
                final long currentTimeMillis = SystemClock.uptimeMillis();
                final long sinceLastEventTimeMillis = currentTimeMillis - lastEventTime;
                if (sinceLastEventTimeMillis > idleTimeout) {
                    return;
                }
                if (mLastEvent != null) {
                    lastEventTime = mLastEvent.getEventTime();
                }
                final long elapsedTimeMillis = SystemClock.uptimeMillis() - startTimeMillis;
                final long remainingTimeMillis = globalTimeout - elapsedTimeMillis;
                if (remainingTimeMillis <= 0) {
                    return;
                }
                try {
                     mLock.wait(idleTimeout);
                } catch (InterruptedException e) {
                     /* ignore */
                }
            }
        }
!!!2152204.java!!!	findAccessibilityNodeInfoByAccessibilityIdInActiveWindow(in accessibilityNodeId : long) : AccessibilityNodeInfo
        return findAccessibilityNodeInfoByAccessibilityId(ACTIVE_WINDOW_ID, accessibilityNodeId);
!!!2152332.java!!!	findAccessibilityNodeInfoByAccessibilityId(in accessibilityWindowId : int, in accessibilityNodeId : long) : AccessibilityNodeInfo
        // Cache the id to avoid locking
        final int connectionId = mConnectionId;
        ensureValidConnection(connectionId);
        return AccessibilityInteractionClient.getInstance()
                .findAccessibilityNodeInfoByAccessibilityId(mConnectionId,
                        accessibilityWindowId, accessibilityNodeId,
                        FIND_ACCESSIBILITY_NODE_INFO_PREFETCH_FLAGS);
!!!2152460.java!!!	findAccessibilityNodeInfoByViewIdInActiveWindow(in viewId : int) : AccessibilityNodeInfo
        return findAccessibilityNodeInfoByViewId(ACTIVE_WINDOW_ID, ROOT_NODE_ID, viewId);
!!!2152588.java!!!	findAccessibilityNodeInfoByViewId(in accessibilityWindowId : int, in accessibilityNodeId : long, in viewId : int) : AccessibilityNodeInfo
        // Cache the id to avoid locking
        final int connectionId = mConnectionId;
        ensureValidConnection(connectionId);
        return AccessibilityInteractionClient.getInstance()
                .findAccessibilityNodeInfoByViewId(connectionId, accessibilityWindowId,
                        accessibilityNodeId, viewId);
!!!2152716.java!!!	findAccessibilityNodeInfosByTextInActiveWindow(in text : String) : AccessibilityNodeInfo
        return findAccessibilityNodeInfosByText(ACTIVE_WINDOW_ID, ROOT_NODE_ID, text);
!!!2152844.java!!!	findAccessibilityNodeInfosByText(in accessibilityWindowId : int, in accessibilityNodeId : long, in text : String) : AccessibilityNodeInfo
        // Cache the id to avoid locking
        final int connectionId = mConnectionId;
        ensureValidConnection(connectionId);
        return AccessibilityInteractionClient.getInstance()
                .findAccessibilityNodeInfosByText(connectionId, accessibilityWindowId,
                        accessibilityNodeId, text);
!!!2152972.java!!!	performAccessibilityActionInActiveWindow(in accessibilityNodeId : long, in action : int, inout arguments : Bundle) : boolean
        return performAccessibilityAction(ACTIVE_WINDOW_ID, accessibilityNodeId, action, arguments);
!!!2153100.java!!!	performAccessibilityAction(in accessibilityWindowId : int, in accessibilityNodeId : long, in action : int, inout arguments : Bundle) : boolean
        // Cache the id to avoid locking
        final int connectionId = mConnectionId;
        ensureValidConnection(connectionId);
        return AccessibilityInteractionClient.getInstance().performAccessibilityAction(connectionId,
                accessibilityWindowId, accessibilityNodeId, action, arguments);
!!!2153228.java!!!	getRootAccessibilityNodeInfoInActiveWindow() : AccessibilityNodeInfo
        // Cache the id to avoid locking
        final int connectionId = mConnectionId;
        ensureValidConnection(connectionId);
        return AccessibilityInteractionClient.getInstance()
                .findAccessibilityNodeInfoByAccessibilityId(connectionId, ACTIVE_WINDOW_ID,
                        ROOT_NODE_ID, AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS);
!!!2153356.java!!!	ensureValidConnection(in connectionId : int) : void
        if (connectionId == UNDEFINED) {
            throw new IllegalStateException("UiAutomationService not connected."
                    + " Did you call #register()?");
        }
