class PrivacySetupActivity
!!!14189452.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        if (TvSettings.Secure.isPrivacySetupAlreadyDone(getContentResolver()) &&
                (getIntent().getExtras() == null ||
                 !getIntent().getExtras().getBoolean(INTENT_EXTRA_FORCED))) {
            setResult(RESULT_OK);
            finish();
            return;
        }

        setupExplainButton();

        mPrivacyCheckBox = (CheckBox) findViewById(R.id.privacy_check_box);
        loadPrivacyValue();
        setupPrivacyCheckBox();

        Button skipButton = (Button) findViewById(R.id.skip_button);
        skipButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                onSkip();
            }
        });

        setFocusOnNextButton();
!!!14189580.java!!!	getLayoutResource() : int
        return R.layout.privacy_setup_activity;
!!!14189708.java!!!	getSummaryOnFinish() : String
        return null;
!!!14189836.java!!!	getExplanationResourceId() : int
        return R.string.privacy_explanation;
!!!14189964.java!!!	onSaveActivity() : void
        savePrivacyPreference();
!!!14190092.java!!!	setupExplainButton() : void
        final int explainResId = getExplanationResourceId();
        if (explainResId != NO_EXPLANATION) {
            Button explainButton = (Button) findViewById(R.id.explain_button);
            if (explainButton == null) {
                return;
            }
            explainButton.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                    showDialog(DIALOG_EXPLANATION);
                    findViewById(R.id.privacy_setup).setVisibility(View.INVISIBLE);
                }
            });
        }
!!!14190220.java!!!	onCreateDialog(in id : int, inout args : Bundle) : Dialog
        switch (id) {
            case DIALOG_EXPLANATION:
                int tViewPadding = 25;
                TextView t = new TextView(this);
                t.setText(getExplanationMessage());
                t.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);
                t.setMovementMethod(LinkMovementMethod.getInstance());
                t.setPadding(tViewPadding, tViewPadding, tViewPadding, tViewPadding);
                AlertDialog d = new AlertDialog.Builder(this)
                        .setNeutralButton(R.string.ok,
                                new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        // Do nothing just dismisses the dialog
                                    }
                        })
                        .setOnDismissListener(
                                new DialogInterface.OnDismissListener() {
                                    @Override
                                    public void onDismiss(DialogInterface dialog) {
                                        findViewById(R.id.privacy_setup).
                                                setVisibility(View.VISIBLE);
                                    }
                        })
                        .setView(t)
                        .create();
                return d;
            case DIALOG_PRIVACY:
                PrivacyWebViewDialog privacyDialog = new PrivacyWebViewDialog(
                        this,
                        getSecureUrl(this, GOOGLE_ADDITIONAL_PRIVACY_URL));
                return privacyDialog;
            default:
                return null;
        }
!!!14190348.java!!!	loadPrivacyValue() : void
        mPrivacyCheckBox.setChecked(getStoredPrivacyValue());
!!!14190476.java!!!	getStoredPrivacyValue() : boolean
        return TvSettings.Secure.getBoolean(getContentResolver(),
                TvSettings.Secure.CHECKIN_USAGE_LOGGING_ENABLED, getResources().getBoolean(
                                R.bool.checkin_logging_enabled));
!!!14190604.java!!!	setupPrivacyCheckBox() : void
        mPrivacyCheckBox.setOnCheckedChangeListener(
                new OnCheckedChangeListener() {
            public void onCheckedChanged(CompoundButton buttonView,
                    boolean isChecked) {
                setFocusOnNextButton();
            }
        });
!!!14190732.java!!!	savePrivacyPreference() : void
        TvSettings.Secure.putBoolean(getContentResolver(),
                TvSettings.Secure.CHECKIN_USAGE_LOGGING_ENABLED, mPrivacyCheckBox.isChecked());
!!!14190860.java!!!	getExplanationMessage() : SpannableString
        final int resId = getExplanationResourceId();
        final SpannableString message = new SpannableString(getText(resId));
        Linkify.addLinks(message, Linkify.ALL);
        Annotation[] messageSpans = message.getSpans(0, message.length(), Annotation.class);
        if (messageSpans != null && messageSpans.length > 0) {
            message.setSpan(new ClickableSpan() {
                        @Override
                        public void onClick(View widget) {
                            showDialog(DIALOG_PRIVACY);
                        }
                    },
                    message.getSpanStart(messageSpans[0]),
                    message.getSpanEnd(messageSpans[0]),
                    0);
        }
        return message;
!!!14191244.java!!!	getSecureUrl(inout context : Context, in url : String) : String
        // Substitute locale if present in property
        if (url.contains("%m")) {
            try {
                ContentResolver cr = context.getContentResolver();
                Configuration config = new Configuration();
                Settings.System.getConfiguration(cr, config);
                if (config.mcc != 0) {
                    url = url.replace("%m", Integer.toString(config.mcc));
                } else {
                    // This will happen if the device doesn't have a SIM, in which case
                    // we just use the locale.
                    url = url.replace("%m", "%s");
                }
            } catch (Exception e) {
                // Intentionally left blank
            }
        }
        if (url.contains("%s")) {
            Locale locale = Locale.getDefault();
            String tmp = locale.getLanguage() + "_" + locale.getCountry().toLowerCase();
            url = url.replace("%s", tmp);
        }

        // %y is used to indicate a language variable to be replaced at
        // runtime.
        if(url.contains("%y")) {
            Locale locale = Locale.getDefault();
            url = url.replace("%y", locale.getLanguage());
        }

        // %z is used to indicate the country. We use the value set by the
        // SIM. We choose not to use the operator/network country but that
        // which is set on SIM as they most likely procured the device there
        if(url.contains("%z")) {
          try {
                TelephonyManager telephony =
                        (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);

                ContentResolver cr = context.getContentResolver();
                Configuration config = new Configuration();
                Settings.System.getConfiguration(cr, config);

                if (telephony != null && config.mcc != 0) {
                    String simCountryIso = telephony.getSimCountryIso();
                    if (TextUtils.isEmpty(simCountryIso)) {
                        simCountryIso = "us";
                    }
                    url = url.replace("%z", simCountryIso);
                } else {
                    // This will happen if the device doesn't have a SIM, in
                    // which case we just use the country with the default
                    // locale country
                    Locale locale = Locale.getDefault();
                    url = url.replace("%z", locale.getCountry().toLowerCase());
                }
            } catch (Exception e) {
                // Intentionally left blank
            }
        }

        return url;
