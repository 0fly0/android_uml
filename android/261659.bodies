class CowSubList
!!!1513499.java!!!	CowSubList(inout expectedElements : Object, in from : int, in to : int)
            this.slice = new Slice(expectedElements, from, to);
!!!1513627.java!!!	size() : int
            Slice slice = this.slice;
            return slice.to - slice.from;
!!!1513755.java!!!	isEmpty() : boolean
            Slice slice = this.slice;
            return slice.from == slice.to;
!!!1513883.java!!!	get(in index : int) : E
            Slice slice = this.slice;
            Object[] snapshot = elements;
            slice.checkElementIndex(index);
            slice.checkConcurrentModification(snapshot);
            return (E) snapshot[index + slice.from];
!!!1514011.java!!!	iterator() : Iterator
            return listIterator(0);
!!!1514139.java!!!	listIterator() : ListIterator
            return listIterator(0);
!!!1514267.java!!!	listIterator(in index : int) : ListIterator
            Slice slice = this.slice;
            Object[] snapshot = elements;
            slice.checkPositionIndex(index);
            slice.checkConcurrentModification(snapshot);
            CowIterator<E> result = new CowIterator<E>(snapshot, slice.from, slice.to);
            result.index = slice.from + index;
            return result;
!!!1514395.java!!!	indexOf(inout object : Object) : int
            Slice slice = this.slice;
            Object[] snapshot = elements;
            slice.checkConcurrentModification(snapshot);
            int result = CopyOnWriteArrayList.indexOf(object, snapshot, slice.from, slice.to);
            return (result != -1) ? (result - slice.from) : -1;
!!!1514523.java!!!	lastIndexOf(inout object : Object) : int
            Slice slice = this.slice;
            Object[] snapshot = elements;
            slice.checkConcurrentModification(snapshot);
            int result = CopyOnWriteArrayList.lastIndexOf(object, snapshot, slice.from, slice.to);
            return (result != -1) ? (result - slice.from) : -1;
!!!1514651.java!!!	contains(inout object : Object) : boolean
            return indexOf(object) != -1;
!!!1514779.java!!!	containsAll(inout collection : Collection) : boolean
            Slice slice = this.slice;
            Object[] snapshot = elements;
            slice.checkConcurrentModification(snapshot);
            return CopyOnWriteArrayList.containsAll(collection, snapshot, slice.from, slice.to);
!!!1514907.java!!!	subList(in from : int, in to : int) : List
            Slice slice = this.slice;
            if (from < 0 || from > to || to > size()) {
                throw new IndexOutOfBoundsException("from=" + from + ", to=" + to +
                        ", list size=" + size());
            }
            return new CowSubList(slice.expectedElements, slice.from + from, slice.from + to);
!!!1515035.java!!!	remove(in index : int) : E
            synchronized (CopyOnWriteArrayList.this) {
                slice.checkElementIndex(index);
                slice.checkConcurrentModification(elements);
                E removed = CopyOnWriteArrayList.this.remove(slice.from + index);
                slice = new Slice(elements, slice.from, slice.to - 1);
                return removed;
            }
!!!1515163.java!!!	clear() : void
            synchronized (CopyOnWriteArrayList.this) {
                slice.checkConcurrentModification(elements);
                CopyOnWriteArrayList.this.removeRange(slice.from, slice.to);
                slice = new Slice(elements, slice.from, slice.from);
            }
!!!1515291.java!!!	add(in index : int, inout object : E) : void
            synchronized (CopyOnWriteArrayList.this) {
                slice.checkPositionIndex(index);
                slice.checkConcurrentModification(elements);
                CopyOnWriteArrayList.this.add(index + slice.from, object);
                slice = new Slice(elements, slice.from, slice.to + 1);
            }
!!!1515419.java!!!	add(inout object : E) : boolean
            synchronized (CopyOnWriteArrayList.this) {
                add(slice.to - slice.from, object);
                return true;
            }
!!!1515547.java!!!	addAll(in index : int, inout collection : Collection) : boolean
            synchronized (CopyOnWriteArrayList.this) {
                slice.checkPositionIndex(index);
                slice.checkConcurrentModification(elements);
                int oldSize = elements.length;
                boolean result = CopyOnWriteArrayList.this.addAll(index + slice.from, collection);
                slice = new Slice(elements, slice.from, slice.to + (elements.length - oldSize));
                return result;
            }
!!!1515675.java!!!	addAll(inout collection : Collection) : boolean
            synchronized (CopyOnWriteArrayList.this) {
                return addAll(size(), collection);
            }
!!!1515803.java!!!	set(in index : int, inout object : E) : E
            synchronized (CopyOnWriteArrayList.this) {
                slice.checkElementIndex(index);
                slice.checkConcurrentModification(elements);
                E result = CopyOnWriteArrayList.this.set(index + slice.from, object);
                slice = new Slice(elements, slice.from, slice.to);
                return result;
            }
!!!1515931.java!!!	remove(inout object : Object) : boolean
            synchronized (CopyOnWriteArrayList.this) {
                int index = indexOf(object);
                if (index == -1) {
                    return false;
                }
                remove(index);
                return true;
            }
!!!1516059.java!!!	removeAll(inout collection : Collection) : boolean
            synchronized (CopyOnWriteArrayList.this) {
                slice.checkConcurrentModification(elements);
                int removed = removeOrRetain(collection, false, slice.from, slice.to);
                slice = new Slice(elements, slice.from, slice.to - removed);
                return removed != 0;
            }
!!!1516187.java!!!	retainAll(inout collection : Collection) : boolean
            synchronized (CopyOnWriteArrayList.this) {
                slice.checkConcurrentModification(elements);
                int removed = removeOrRetain(collection, true, slice.from, slice.to);
                slice = new Slice(elements, slice.from, slice.to - removed);
                return removed != 0;
            }
