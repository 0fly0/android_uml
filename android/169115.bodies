class URLConnection
!!!555291.java!!!	URLConnection(inout url : URL)
        this.url = url;
!!!555547.java!!!	getAllowUserInteraction() : boolean
        return allowUserInteraction;
!!!555675.java!!!	getContent() : Object
        if (!connected) {
            connect();
        }

        if ((contentType = getContentType()) == null) {
            if ((contentType = guessContentTypeFromName(url.getFile())) == null) {
                contentType = guessContentTypeFromStream(getInputStream());
            }
        }
        if (contentType != null) {
            return getContentHandler(contentType).getContent(this);
        }
        return null;
!!!555803.java!!!	getContent(inout types : Class) : Object
        if (!connected) {
            connect();
        }

        if ((contentType = getContentType()) == null) {
            if ((contentType = guessContentTypeFromName(url.getFile())) == null) {
                contentType = guessContentTypeFromStream(getInputStream());
            }
        }
        if (contentType != null) {
            return getContentHandler(contentType).getContent(this, types);
        }
        return null;
!!!555931.java!!!	getContentEncoding() : String
        return getHeaderField("Content-Encoding");
!!!556059.java!!!	getContentHandler(inout type : String) : ContentHandler
        // Replace all non-alphanumeric character by '_'
        final String typeString = parseTypeString(type.replace('/', '.'));

        // if there's a cached content handler, use it
        Object cHandler = contentHandlers.get(type);
        if (cHandler != null) {
            return (ContentHandler) cHandler;
        }

        if (contentHandlerFactory != null) {
            cHandler = contentHandlerFactory.createContentHandler(type);
            contentHandlers.put(type, cHandler);
            return (ContentHandler) cHandler;
        }

        // search through the package list for the right class for the Content Type
        String packageList = System.getProperty("java.content.handler.pkgs");
        if (packageList != null) {
            for (String packageName : packageList.split("\\|")) {
                String className = packageName + "." + typeString;
                try {
                    Class<?> klass = Class.forName(className, true, ClassLoader.getSystemClassLoader());
                    cHandler = klass.newInstance();
                } catch (ClassNotFoundException e) {
                } catch (IllegalAccessException e) {
                } catch (InstantiationException e) {
                }
            }
        }

        if (cHandler == null) {
            try {
                // Try looking up AWT image content handlers
                String className = "org.apache.harmony.awt.www.content." + typeString;
                cHandler = Class.forName(className).newInstance();
            } catch (ClassNotFoundException e) {
            } catch (IllegalAccessException e) {
            } catch (InstantiationException e) {
            }
        }
        if (cHandler != null) {
            if (!(cHandler instanceof ContentHandler)) {
                throw new UnknownServiceException();
            }
            contentHandlers.put(type, cHandler); // if we got the handler,
            // cache it for next time
            return (ContentHandler) cHandler;
        }

        return defaultHandler;
!!!556187.java!!!	getContentLength() : int
        return getHeaderFieldInt("Content-Length", -1);
!!!556315.java!!!	getContentType() : String
        return getHeaderField("Content-Type");
!!!556443.java!!!	getDate() : long
        return getHeaderFieldDate("Date", 0);
!!!556571.java!!!	getDefaultAllowUserInteraction() : boolean
        return defaultAllowUserInteraction;
!!!556699.java!!!	getDefaultRequestProperty(inout field : String) : String
        return null;
!!!556827.java!!!	getDefaultUseCaches() : boolean
        return defaultUseCaches;
!!!556955.java!!!	getDoInput() : boolean
        return doInput;
!!!557083.java!!!	getDoOutput() : boolean
        return doOutput;
!!!557211.java!!!	getExpiration() : long
        return getHeaderFieldDate("Expires", 0);
!!!557339.java!!!	getFileNameMap() : FileNameMap
        synchronized (URLConnection.class) {
            if (fileNameMap == null) {
                fileNameMap = new DefaultFileNameMap();
            }
            return fileNameMap;
        }
!!!557467.java!!!	getHeaderField(in pos : int) : String
        return null;
!!!557595.java!!!	getHeaderFields() : Map
        return Collections.emptyMap();
!!!557723.java!!!	getRequestProperties() : Map
        checkNotConnected();
        return Collections.emptyMap();
!!!557851.java!!!	checkNotConnected() : void
        if (connected) {
            throw new IllegalStateException("Already connected");
        }
!!!557979.java!!!	addRequestProperty(inout field : String, inout newValue : String) : void
        checkNotConnected();
        if (field == null) {
            throw new NullPointerException("field == null");
        }
!!!558107.java!!!	getHeaderField(inout key : String) : String
        return null;
!!!558235.java!!!	getHeaderFieldDate(inout field : String, in defaultValue : long) : long
        String date = getHeaderField(field);
        if (date == null) {
            return defaultValue;
        }
        try {
            return Date.parse(date); // TODO: use HttpDate.parse()
        } catch (Exception e) {
            return defaultValue;
        }
!!!558363.java!!!	getHeaderFieldInt(inout field : String, in defaultValue : int) : int
        try {
            return Integer.parseInt(getHeaderField(field));
        } catch (NumberFormatException e) {
            return defaultValue;
        }
!!!558491.java!!!	getHeaderFieldKey(in posn : int) : String
        return null;
!!!558619.java!!!	getIfModifiedSince() : long
        return ifModifiedSince;
!!!558747.java!!!	getInputStream() : InputStream
        throw new UnknownServiceException("Does not support writing to the input stream");
!!!558875.java!!!	getLastModified() : long
        if (lastModified != -1) {
            return lastModified;
        }
        return lastModified = getHeaderFieldDate("Last-Modified", 0);
!!!559003.java!!!	getOutputStream() : OutputStream
        throw new UnknownServiceException("Does not support writing to the output stream");
!!!559131.java!!!	getPermission() : Permission
        return new java.security.AllPermission();
!!!559259.java!!!	getRequestProperty(inout field : String) : String
        checkNotConnected();
        return null;
!!!559387.java!!!	getURL() : URL
        return url;
!!!559515.java!!!	getUseCaches() : boolean
        return useCaches;
!!!559643.java!!!	guessContentTypeFromName(inout url : String) : String
        return getFileNameMap().getContentTypeFor(url);
!!!559771.java!!!	guessContentTypeFromStream(inout is : InputStream) : String
        if (!is.markSupported()) {
            return null;
        }
        // Look ahead up to 64 bytes for the longest encoded header
        is.mark(64);
        byte[] bytes = new byte[64];
        int length = is.read(bytes);
        is.reset();

        // If there is no data from the input stream, we can't determine content type.
        if (length == -1) {
            return null;
        }

        // Check for Unicode BOM encoding indicators
        String encoding = "US-ASCII";
        int start = 0;
        if (length > 1) {
            if ((bytes[0] == (byte) 0xFF) && (bytes[1] == (byte) 0xFE)) {
                encoding = "UTF-16LE";
                start = 2;
                length -= length & 1;
            }
            if ((bytes[0] == (byte) 0xFE) && (bytes[1] == (byte) 0xFF)) {
                encoding = "UTF-16BE";
                start = 2;
                length -= length & 1;
            }
            if (length > 2) {
                if ((bytes[0] == (byte) 0xEF) && (bytes[1] == (byte) 0xBB)
                        && (bytes[2] == (byte) 0xBF)) {
                    encoding = "UTF-8";
                    start = 3;
                }
                if (length > 3) {
                    if ((bytes[0] == (byte) 0x00) && (bytes[1] == (byte) 0x00)
                            && (bytes[2] == (byte) 0xFE)
                            && (bytes[3] == (byte) 0xFF)) {
                        encoding = "UTF-32BE";
                        start = 4;
                        length -= length & 3;
                    }
                    if ((bytes[0] == (byte) 0xFF) && (bytes[1] == (byte) 0xFE)
                            && (bytes[2] == (byte) 0x00)
                            && (bytes[3] == (byte) 0x00)) {
                        encoding = "UTF-32LE";
                        start = 4;
                        length -= length & 3;
                    }
                }
            }
        }

        String header = new String(bytes, start, length - start, encoding);

        // Check binary types
        if (header.startsWith("PK")) {
            return "application/zip";
        }
        if (header.startsWith("GI")) {
            return "image/gif";
        }

        // Check text types
        String textHeader = header.trim().toUpperCase(Locale.US);
        if (textHeader.startsWith("<!DOCTYPE HTML") ||
                textHeader.startsWith("<HTML") ||
                textHeader.startsWith("<HEAD") ||
                textHeader.startsWith("<BODY") ||
                textHeader.startsWith("<HEAD")) {
            return "text/html";
        }

        if (textHeader.startsWith("<?XML")) {
            return "application/xml";
        }

        // Give up
        return null;
!!!559899.java!!!	parseTypeString(inout typeString : String) : String
        StringBuilder result = new StringBuilder(typeString);
        for (int i = 0; i < result.length(); i++) {
            // if non-alphanumeric, replace it with '_'
            char c = result.charAt(i);
            if (!(Character.isLetter(c) || Character.isDigit(c) || c == '.')) {
                result.setCharAt(i, '_');
            }
        }
        return result.toString();
!!!560027.java!!!	setAllowUserInteraction(inout newValue : boolean) : void
        checkNotConnected();
        this.allowUserInteraction = newValue;
!!!560155.java!!!	setContentHandlerFactory(inout contentFactory : ContentHandlerFactory) : void
        if (contentHandlerFactory != null) {
            throw new Error("Factory already set");
        }
        contentHandlerFactory = contentFactory;
!!!560283.java!!!	setDefaultAllowUserInteraction(inout allows : boolean) : void
        defaultAllowUserInteraction = allows;
!!!560539.java!!!	setDefaultUseCaches(inout newValue : boolean) : void
        defaultUseCaches = newValue;
!!!560667.java!!!	setDoInput(inout newValue : boolean) : void
        checkNotConnected();
        this.doInput = newValue;
!!!560795.java!!!	setDoOutput(inout newValue : boolean) : void
        checkNotConnected();
        this.doOutput = newValue;
!!!560923.java!!!	setFileNameMap(inout map : FileNameMap) : void
        synchronized (URLConnection.class) {
            fileNameMap = map;
        }
!!!561051.java!!!	setIfModifiedSince(in newValue : long) : void
        checkNotConnected();
        this.ifModifiedSince = newValue;
!!!561179.java!!!	setRequestProperty(inout field : String, inout newValue : String) : void
        checkNotConnected();
        if (field == null) {
            throw new NullPointerException("field == null");
        }
!!!561307.java!!!	setUseCaches(inout newValue : boolean) : void
        checkNotConnected();
        this.useCaches = newValue;
!!!561435.java!!!	setConnectTimeout(in timeoutMillis : int) : void
        if (timeoutMillis < 0) {
            throw new IllegalArgumentException("timeoutMillis < 0");
        }
        this.connectTimeout = timeoutMillis;
!!!561563.java!!!	getConnectTimeout() : int
        return connectTimeout;
!!!561691.java!!!	setReadTimeout(in timeoutMillis : int) : void
        if (timeoutMillis < 0) {
            throw new IllegalArgumentException("timeoutMillis < 0");
        }
        this.readTimeout = timeoutMillis;
!!!561819.java!!!	getReadTimeout() : int
        return readTimeout;
!!!561947.java!!!	toString() : String
        return getClass().getName() + ":" + url.toString();
