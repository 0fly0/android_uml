class BnAVSettings
!!!10977676.cpp!!!	onTransact(in code : uint32_t, in data : Parcel, inout reply : Parcel, in flags : uint32_t = 0) : status_t
    IPCThreadState* ipc = IPCThreadState::self();

    // Check read/write permissions for remote access
    // system or media processe excluded
    const int pid = ipc->getCallingPid();
    const int uid = ipc->getCallingUid();
    bool checkPerm = (pid != getpid() && uid != AID_SYSTEM &&
                      uid != AID_MEDIA && uid != 0);

    switch (code) {
        case READ_SETTING: {
            CHECK_INTERFACE(AVSettings, data, reply);

            const char* name = data.readCString();
            if (checkPerm && !checkPermission(kReadPermission, pid, uid)) {
                ALOGW("Permission denied to read av setting %s for pid %d, uid %d",
                        name, pid, uid);
                return android::PERMISSION_DENIED;
            }
            bool persisted = static_cast<bool>(reply->readInt32());
            AVSettingValue val;
            status_t err = ReadSetting(name, &val, persisted);
            reply->writeInt32(err);
            if (android::OK == err) {
                val.writeToParcel(reply);
            }
            return android::NO_ERROR;
        }

        case WRITE_SETTING: {
            CHECK_INTERFACE(AVSettings, data, reply);

            const char* name = data.readCString();
            if (checkPerm && !checkPermission(kWritePermission, pid, uid)) {
                ALOGW("Permission denied to write av setting %s for pid %d, uid %d",
                        name, pid, uid);
                return android::PERMISSION_DENIED;
            }
            AVSettingValue val;
            val.readFromParcel(&data);
            bool notify = static_cast<bool>(data.readInt32());
            bool persisted = static_cast<bool>(data.readInt32());

            status_t err = WriteSetting(name, val, notify, persisted);
            reply->writeInt32(err);
            return android::NO_ERROR;
        }

        case NOTIFY_VALUE: {
            CHECK_INTERFACE(AVSettings, data, reply);

            const char* name = data.readCString();
            // Nofity value need avsettings write permission
            if (checkPerm && !checkPermission(kWritePermission, pid, uid)) {
                ALOGW("Permission denied to notify av setting %s for pid %d, uid %d",
                        name, pid, uid);
                return android::PERMISSION_DENIED;
            }
            AVSettingValue val;
            val.readFromParcel(&data);

            NotifyValue(name, val);
            return android::NO_ERROR;
        }

        case REGISTER_OBSERVER: {
            CHECK_INTERFACE(AVSettings, data, reply);

            const char* prefix = data.readCString();
            sp<IAVSettingObserver> iobserver =
                    interface_cast<IAVSettingObserver>(data.readStrongBinder());
            status_t err = RegisterObserver(prefix, iobserver);
            reply->writeInt32(err);
            return android::NO_ERROR;
        }

        case REGISTER_HANDLER_OBSERVER: {
            CHECK_INTERFACE(AVSettings, data, reply);

            const char* prefix = data.readCString();
            sp<IAVSettingHandlerObserver> iobserver =
                    interface_cast<IAVSettingHandlerObserver>(data.readStrongBinder());
            status_t err = RegisterHandlerObserver(prefix, iobserver);
            reply->writeInt32(err);
            return android::NO_ERROR;
        }

        case REGISTER_HANDLER: {
            CHECK_INTERFACE(AVSettings, data, reply);

            const char* prefix = data.readCString();
            sp<IAVSettingHandler> ihandler =
                    interface_cast<IAVSettingHandler>(data.readStrongBinder());
            status_t err = RegisterHandler(prefix, ihandler);
            reply->writeInt32(err);
            return android::NO_ERROR;
        }

        case REMOVE_OBSERVER: {
            CHECK_INTERFACE(AVSettings, data, reply);

            sp<IAVSettingObserver> iobserver =
                    interface_cast<IAVSettingObserver>(data.readStrongBinder());
            RemoveObserver(iobserver);
            return android::NO_ERROR;
        }

        case REMOVE_HANDLER_OBSERVER: {
            CHECK_INTERFACE(AVSettings, data, reply);

            sp<IAVSettingHandlerObserver> iobserver =
                    interface_cast<IAVSettingHandlerObserver>(data.readStrongBinder());
            RemoveHandlerObserver(iobserver);
            return android::NO_ERROR;
        }

        case REMOVE_HANDLER: {
            CHECK_INTERFACE(AVSettings, data, reply);

            sp<IAVSettingHandler> ihandler =
                    interface_cast<IAVSettingHandler>(data.readStrongBinder());
            RemoveHandler(ihandler);
            return android::NO_ERROR;
        }

        default:
            return BBinder::onTransact(code, data, reply, flags);
    }
