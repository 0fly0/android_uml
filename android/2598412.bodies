class AVSettingsHelper
!!!10966924.cpp!!!	GetApplyStatus(in key : char, in persisted : bool = true) : ApplyStatus
    ALOGV("GetApplyStatus, key: %s, persisted %d", key, persisted);
    // NEED_WRITE by default for persisted
    ApplyStatus status = persisted ? NEED_WRITE : SKIP_WRITE;
    // Special keys should use run-time value, no need to write
    if (strstr(key, kHDMIDisplayMode)) {
        status = SKIP_WRITE;
    }
    ALOGV("GetApplyStatus, status %d", status);
    return status;
!!!10967052.cpp!!!	ParseKey(in key : char, in prefix : char, inout subkey : char) : bool
    ALOGV("ParseKey, prefix: %s, key: %s", prefix, key);
    if (!strstr(key, prefix)) {
        ALOGW("prefix invalid");
        return false;
    }
    strcpy(subkey, key + strlen(prefix) + 1);
    ALOGV("ParseKey, subkey %s", subkey);
    return true;
!!!10967180.cpp!!!	ParseSourceKey(in key : char, in prefix : char, inout source_id : int32_t, inout subkey : char) : bool
    ALOGV("ParseSourceKey, prefix: %s, key: %s", prefix, key);
    if (!strstr(key, prefix)) {
        ALOGW("prefix invalid");
        return false;
    }
    char* delim;
    char buf[MAX_KEY_LEN], id[MAX_KEY_LEN];
    strcpy(buf, key + strlen(prefix) + 1);
    delim = strstr(buf, ".");
    strncpy(id, buf, delim - buf);
    strcpy(subkey, delim + 1);
    *source_id = atoi(id);
    ALOGV("ParseSourceKey, source id %d, subkey %s", *source_id, subkey);
    return true;
!!!10967308.cpp!!!	GetFullKey(in prefix : char, in subkey : char) : String8
    char key[MAX_KEY_LEN];
    snprintf(key, MAX_KEY_LEN, "%s.%s", prefix, subkey);
    return String8(key);
!!!10967436.cpp!!!	ParsePropertyKey(in key : char, in prefix : char, inout source_id : int32_t, in subkey : char, inout prop_id : int32_t) : bool
    ALOGV("ParseKey, prefix: %s, key: %s, subkey: %s", prefix, key, subkey);
    char valuekey[MAX_KEY_LEN], format[MAX_KEY_LEN];
    if (!strstr(key, prefix)) {
        ALOGW("prefix invalid");
        return false;
    }
    snprintf(format, MAX_KEY_LEN, "%s.%s.%s", "%d", subkey, "%d");
    strcpy(valuekey, key + strlen(prefix) + 1);
    if( 2 != sscanf(valuekey, format, source_id, prop_id) ) {
        ALOGW("subkey invalid");
        return false;
    }
    ALOGV("ParsePropertyKey, ret %d, %d", *source_id, *prop_id);
    return true;
!!!10967564.cpp!!!	GetPropertyKey(in prefix : char, in source_id : int32_t, in subkey : char, in prop_id : int32_t) : String8
    char key[MAX_KEY_LEN];
    snprintf(key, MAX_KEY_LEN, "%s.%d.%s.%d",
            prefix, source_id, subkey, prop_id);
    return String8(key);
!!!10967692.cpp!!!	ParsePixelFormat(in str : char, inout format : VideoOutputPixelFormat) : bool
    for (int i = 1; i<= VIDEO_OUTPUT_PF_MAX; ++i) {
        if (!strcmp(str, kPixelFormatStrings[i])) {
            *format = static_cast<VideoOutputPixelFormat>(i);
            return true;
        }
    }
    *format = (VideoOutputPixelFormat)0;
    return false;
!!!10967820.cpp!!!	ParseAudioDRCMode(in str : char, inout mode : AudioDRCMode) : bool
    for (int i = 1; i<= AUDIO_OUTPUT_DRC_MAX; ++i) {
        if (!strcmp(str, kAudioDRCStrings[i])) {
            *mode = static_cast<AudioDRCMode>(i);
            return true;
        }
    }
    *mode = (AudioDRCMode)0;
    return false;
!!!10967948.cpp!!!	ParseAudioChannelMap(in str : char, inout chmap : AudioChannelMap) : bool
    for (int i = 1; i<= AUDIO_CHMAP_MAX; ++i) {
        if (!strcmp(str, kAudioChannelMapStrings[i])) {
            *chmap = static_cast<AudioChannelMap>(i);
            return true;
        }
    }
    *chmap = (AudioChannelMap)0;
    return false;
!!!10968076.cpp!!!	ParseAudioOutputMode(in str : char, inout mode : AudioOutputMode) : bool
    for (int i = 1; i<= AUDIO_OUTPUT_MODE_MAX; ++i) {
        if (!strcmp(str, kAudioOutputModeStrings[i])) {
            *mode = static_cast<AudioOutputMode>(i);
            return true;
        }
    }
    *mode = (AudioOutputMode)0;
    return false;
!!!10968204.cpp!!!	ParseAudioStereoMode(in str : char, inout mode : AudioStereoMode) : bool
    for (int i = 1; i<= AUDIO_STEREO_MAX; ++i) {
        if (!strcmp(str, kAudioStereoModeStrings[i])) {
            *mode = static_cast<AudioStereoMode>(i);
            return true;
        }
    }
    *mode = (AudioStereoMode)0;
    return false;
!!!10968332.cpp!!!	ParseAudioDualMode(in str : char, inout mode : AudioDualMode) : bool
    for (int i = 1; i<= AUDIO_DUAL_MAX; ++i) {
        if (!strcmp(str, kAudioDualModeStrings[i])) {
            *mode = static_cast<AudioDualMode>(i);
            return true;
        }
    }
    *mode = (AudioDualMode)0;
    return false;
!!!10968460.cpp!!!	ParseAudioSpeakerMode(in str : char, inout chmap : AudioSpeakerChannelMap, inout lfe : AudioSpeakerLFEMode) : bool
    ALOGD("ParseAudioSpeakerMode, %s", str);
    bool ret = true;
    if (!strcmp(str, vSpeakerMode2_0)) {
        *chmap = AUDIO_SPK_CHMAP_2_0_0;
        *lfe = AUDIO_SPK_LFE_OFF;
    } else if (!strcmp(str, vSpeakerMode5_1)) {
        *chmap = AUDIO_SPK_CHMAP_3_2_0;
        *lfe = AUDIO_SPK_LFE_ON;
    } else if (!strcmp(str, vSpeakerMode7_1)) {
        *chmap = AUDIO_SPK_CHMAP_3_2_2;
        *lfe = AUDIO_SPK_LFE_ON;
    } else {
        *chmap = AUDIO_SPK_CHMAP_INVALID;
        *lfe = AUDIO_SPK_LFE_INVALID;
        ret = false;
    }
    ALOGD("ParseAudioSpeakerMode, chmap %d lfe %d", *chmap, *lfe);
    return ret;
!!!10968588.cpp!!!	GetAudioSpeakerMode(in chmap : AudioSpeakerChannelMap, in lfe : AudioSpeakerLFEMode) : String8
    ALOGD("GetAudioSpeakerMode, chmap %d lfe %d", chmap, lfe);
    String8 speaker_mode;
    if (chmap == AUDIO_SPK_CHMAP_2_0_0 && lfe == AUDIO_SPK_LFE_OFF) {
        speaker_mode = String8(vSpeakerMode2_0);
    } else if (chmap == AUDIO_SPK_CHMAP_3_2_0 && lfe == AUDIO_SPK_LFE_ON) {
        speaker_mode = String8(vSpeakerMode5_1);
    } else if (chmap == AUDIO_SPK_CHMAP_3_2_2 && lfe == AUDIO_SPK_LFE_ON) {
        speaker_mode = String8(vSpeakerMode7_1);
    } else {
        speaker_mode = String8(vSpeakerModeInvalid);
    }
    ALOGD("GetAudioSpeakerMode, return %s", speaker_mode.string());
    return speaker_mode;
!!!10968716.cpp!!!	ParseAudioLFEDownmixMode(in str : char, inout mode : AudioLFEDownmixMode) : bool
    for (int i = 1; i<= AUDIO_LFE_DOWNMIX_MAX; ++i) {
        if (!strcmp(str, kAudioLFEDownmixModeStrings[i])) {
            *mode = static_cast<AudioLFEDownmixMode>(i);
            return true;
        }
    }
    *mode = (AudioLFEDownmixMode)0;
    return false;
