class ProfiledWebView
!!!9348236.java!!!	ProfiledWebView(inout context : Context)
        super(context);
!!!9348364.java!!!	ProfiledWebView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!9348492.java!!!	ProfiledWebView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
!!!9348620.java!!!	ProfiledWebView(inout context : Context, inout attrs : AttributeSet, in defStyle : int, inout privateBrowsing : boolean)
        super(context, attrs, defStyle, privateBrowsing);
!!!9349004.java!!!	init(inout c : Context) : void
        WebSettingsClassic settings = getWebViewClassic().getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setSupportZoom(true);
        settings.setEnableSmoothTransition(true);
        settings.setBuiltInZoomControls(true);
        settings.setLoadWithOverviewMode(true);
        settings.setProperty("use_minimal_memory", "false"); // prefetch tiles, as browser does
        addJavascriptInterface(new JavaScriptInterface(c), "Android");
        mAnimationTime = 0;
        mLoadTime = 0;
!!!9349132.java!!!	setUseMinimalMemory(inout minimal : boolean) : void
        WebSettingsClassic settings = getWebViewClassic().getSettings();
        settings.setProperty("use_minimal_memory", minimal ? "true" : "false");
!!!9349260.java!!!	onPageFinished() : void
        mLoadTime = System.currentTimeMillis();
!!!9349388.java!!!	onDraw(inout canvas : Canvas) : void
        if (mIsTesting && mIsScrolling) {
            if (canScrollVertically(1)) {
                scrollBy(0, mSpeed);
            } else {
                stopScrollTest();
                mIsScrolling = false;
            }
        }
        super.onDraw(canvas);
!!!9349516.java!!!	startScrollTest(inout callback : ProfileCallback, inout autoScrolling : boolean) : void
        mCallback = callback;
        mIsTesting = false;
        mIsScrolling = false;
        WebSettingsClassic settings = getWebViewClassic().getSettings();
        settings.setProperty("tree_updates", "0");


        if (autoScrolling) {
            // after a while, force it to start even if the pages haven't swapped
            new CountDownTimer(LOAD_STALL_MILLIS, LOAD_STALL_MILLIS) {
                @Override
                public void onTick(long millisUntilFinished) {
                }

                @Override
                public void onFinish() {
                    // invalidate all content, and kick off redraw
                    Log.d("ProfiledWebView",
                            "kicking off test with callback registration, and tile discard...");
                    getWebViewClassic().discardAllTextures();
                    invalidate();
                    mIsScrolling = true;
                    mContentInvalMillis = System.currentTimeMillis();
                }
            }.start();
        } else {
            mIsTesting = true;
            getWebViewClassic().tileProfilingStart();
        }
!!!9349644.java!!!	onPageSwapOccurred(inout startAnim : boolean) : void
        if (!mIsTesting && mIsScrolling) {
            // kick off testing
            mContentInvalMillis = System.currentTimeMillis() - mContentInvalMillis;
            Log.d("ProfiledWebView", "REDRAW TOOK " + mContentInvalMillis + "millis");
            mIsTesting = true;
            invalidate(); // ensure a redraw so that auto-scrolling can occur
            getWebViewClassic().tileProfilingStart();
        }
!!!9349772.java!!!	animFramerate() : double
        WebSettingsClassic settings = getWebViewClassic().getSettings();
        String updatesString = settings.getProperty("tree_updates");
        int updates = (updatesString == null) ? -1 : Integer.parseInt(updatesString);

        long animationTime;
        if (mAnimationTime == 0 || mAnimationTime - mLoadTime < ANIM_SAFETY_THRESHOLD) {
            animationTime = System.currentTimeMillis() - mLoadTime;
        } else {
            animationTime = mAnimationTime - mLoadTime;
        }

        return updates * 1000.0 / animationTime;
!!!9349900.java!!!	setDoubleBuffering(inout useDoubleBuffering : boolean) : void
        WebSettingsClassic settings = getWebViewClassic().getSettings();
        settings.setProperty("use_double_buffering", useDoubleBuffering ? "true" : "false");
!!!9350028.java!!!	stopScrollTest() : void
        getWebViewClassic().tileProfilingStop();
        mIsTesting = false;

        if (mCallback == null) {
            getWebViewClassic().tileProfilingClear();
            return;
        }

        RunData data = new RunData(getWebViewClassic().tileProfilingNumFrames());
        // record the time spent (before scrolling) rendering the page
        data.singleStats.put(getResources().getString(R.string.render_millis),
                (double)mContentInvalMillis);

        // record framerate
        double framerate = animFramerate();
        Log.d(LOGTAG, "anim framerate was "+framerate);
        data.singleStats.put(getResources().getString(R.string.animation_framerate),
                framerate);

        for (int frame = 0; frame < data.frames.length; frame++) {
            data.frames[frame] = new TileData[
                    getWebViewClassic().tileProfilingNumTilesInFrame(frame)];
            for (int tile = 0; tile < data.frames[frame].length; tile++) {
                int left = getWebViewClassic().tileProfilingGetInt(frame, tile, "left");
                int top = getWebViewClassic().tileProfilingGetInt(frame, tile, "top");
                int right = getWebViewClassic().tileProfilingGetInt(frame, tile, "right");
                int bottom = getWebViewClassic().tileProfilingGetInt(frame, tile, "bottom");

                boolean isReady = getWebViewClassic().tileProfilingGetInt(
                        frame, tile, "isReady") == 1;
                int level = getWebViewClassic().tileProfilingGetInt(frame, tile, "level");

                float scale = getWebViewClassic().tileProfilingGetFloat(frame, tile, "scale");

                data.frames[frame][tile] = data.new TileData(left, top, right, bottom,
                        isReady, level, scale);
            }
        }
        getWebViewClassic().tileProfilingClear();

        mCallback.profileCallback(data);
!!!9350156.java!!!	loadUrl(in url : String) : void
        mAnimationTime = 0;
        mLoadTime = 0;
        if (!url.startsWith("http://") && !url.startsWith("file://")) {
            url = "http://" + url;
        }
        super.loadUrl(url);
!!!9350284.java!!!	setAutoScrollSpeed(in speedInt : int) : void
        mSpeed = speedInt;
!!!9350412.java!!!	getWebViewClassic() : WebViewClassic
        return WebViewClassic.fromWebView(this);
