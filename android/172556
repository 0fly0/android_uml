format 74
"tests" // framework::native::libs::gui::tests
  revision 3
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/framework/native/libs/gui/tests/"
  cpp_src_dir "/home/shchen/work/jellybean/framework/native/libs/gui/tests/"
  cpp_namespace "android"
  classview 158220 "tests"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 664716 "BufferQueueTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1377036 // <generalisation>
	relation 1377036 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1377036 // <generalisation>
	  b parent class_ref 664844 // typedef63
      end

      operation 2053644 "BufferQueueTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 2053772 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"Begin test: %s.%s\", testInfo->test_case_name(),
                testInfo->name());

        mBQ = new BufferQueue();
    };
"
	
	
	
	
      end

      operation 2053900 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mBQ.clear();

        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"End test:   %s.%s\", testInfo->test_case_name(),
                testInfo->name());
    };
"
	
	
	
	
      end
    end

    class 664844 "typedef63"
      visibility package stereotype "typedef" explicit_base_type "::testing::Test"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 664972 "CpuConsumerTestParams"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1786508 "width"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1786636 "height"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1786764 "maxLockedBuffers"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1377292 // format (<directional composition>)
	relation 1377292 *-->
	  a role_name "format" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1377292 // format (<directional composition>)
	  b parent class_ref 511756 // PixelFormat
      end
    end

    class 665100 "CpuConsumerTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1377420 // <generalisation>
	relation 1377420 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1377420 // <generalisation>
	  b parent class_ref 665228 // typedef64
      end

      operation 2054028 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        const ::testing::TestInfo* const test_info =
                ::testing::UnitTest::GetInstance()->current_test_info();
        CpuConsumerTestParams params = GetParam();
        ALOGV(\"** Starting test %s (%d x %d, %d, 0x%x)\",
                test_info->name(),
                params.width, params.height,
                params.maxLockedBuffers, params.format);
        mCC = new CpuConsumer(params.maxLockedBuffers);
        String8 name(\"CpuConsumer_Under_Test\");
        mCC->setName(name);
        mSTC = new SurfaceTextureClient(mCC->getProducerInterface());
        mANW = mSTC;
    };
"
	
	
	
	
      end

      operation 2054156 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mANW.clear();
        mSTC.clear();
        mCC.clear();
    };
"
	
	
	
	
      end

      class 665356 "FrameWaiter"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 2054284 "FrameWaiter"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
                mPendingFrames(0) {
        };
"
	  
	  
	  
	  
	end

	operation 2054412 "waitForFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            while (mPendingFrames == 0) {
                mCondition.wait(mMutex);
            }
            mPendingFrames--;
        };
"
	  
	  
	  
	  
	end

	operation 2054540 "onFrameAvailable"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            mPendingFrames++;
            mCondition.signal();
        };
"
	  
	  
	  
	  
	end

	attribute 1786892 "mPendingFrames"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1377676 // mMutex (<directional composition>)
	  relation 1377676 *-->
	    a role_name "mMutex" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1377676 // mMutex (<directional composition>)
	    b parent class_ref 133132 // Mutex
	end

	classrelation 1377804 // mCondition (<directional composition>)
	  relation 1377804 *-->
	    a role_name "mCondition" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1377804 // mCondition (<directional composition>)
	    b parent class_ref 159244 // Condition
	end
      end

      class 665484 "DisconnectWaiter"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 2054668 "DisconnectWaiter"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mWaitForDisconnect(false),
            mPendingFrames(0) {
        };
"
	  
	  
	  
	  
	end

	operation 2054796 "waitForFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            while (mPendingFrames == 0) {
                mFrameCondition.wait(mMutex);
            }
            mPendingFrames--;
        };
"
	  
	  
	  
	  
	end

	operation 2054924 "onFrameAvailable"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            mPendingFrames++;
            mFrameCondition.signal();
        };
"
	  
	  
	  
	  
	end

	operation 2055052 "onBuffersReleased"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            while (!mWaitForDisconnect) {
                mDisconnectCondition.wait(mMutex);
            }
        };
"
	  
	  
	  
	  
	end

	operation 2055180 "finishDisconnect"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            mWaitForDisconnect = true;
            mDisconnectCondition.signal();
        };
"
	  
	  
	  
	  
	end

	classrelation 1378060 // mMutex (<directional composition>)
	  relation 1378060 *-->
	    a role_name "mMutex" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1378060 // mMutex (<directional composition>)
	    b parent class_ref 133132 // Mutex
	end

	attribute 1787020 "mWaitForDisconnect"
	  private explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1378188 // mDisconnectCondition (<directional composition>)
	  relation 1378188 *-->
	    a role_name "mDisconnectCondition" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1378188 // mDisconnectCondition (<directional composition>)
	    b parent class_ref 159244 // Condition
	end

	attribute 1787148 "mPendingFrames"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1378316 // mFrameCondition (<directional composition>)
	  relation 1378316 *-->
	    a role_name "mFrameCondition" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1378316 // mFrameCondition (<directional composition>)
	    b parent class_ref 159244 // Condition
	end
      end

      classrelation 1378700 // mANW (<directional composition>)
	relation 1378700 *-->
	  stereotype "sp"
	  a role_name "mANW" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1378700 // mANW (<directional composition>)
	  b parent class_ref 175628 // ANativeWindow
      end
    end

    class 665228 "typedef64"
      visibility package stereotype "typedef" explicit_base_type "::testing::TestWithParam<CpuConsumerTestParams>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 665612 "SurfaceTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1378828 // <generalisation>
	relation 1378828 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1378828 // <generalisation>
	  b parent class_ref 664844 // typedef63
      end

      operation 2055308 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mComposerClient = new SurfaceComposerClient;
        ASSERT_EQ(NO_ERROR, mComposerClient->initCheck());

        mSurfaceControl = mComposerClient->createSurface(
                String8(\"Test Surface\"), 32, 32, PIXEL_FORMAT_RGBA_8888, 0);

        ASSERT_TRUE(mSurfaceControl != NULL);
        ASSERT_TRUE(mSurfaceControl->isValid());

        SurfaceComposerClient::openGlobalTransaction();
        ASSERT_EQ(NO_ERROR, mSurfaceControl->setLayer(0x7fffffff));
        ASSERT_EQ(NO_ERROR, mSurfaceControl->show());
        SurfaceComposerClient::closeGlobalTransaction();

        mSurface = mSurfaceControl->getSurface();
        ASSERT_TRUE(mSurface != NULL);
    };
"
	
	
	
	
      end

      operation 2055436 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mComposerClient->dispose();
    };
"
	
	
	
	
      end

    end

    class 665740 "SurfaceTextureGLTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " XXX: Code above this point should live elsewhere"
      classrelation 1379340 // <generalisation>
	relation 1379340 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1379340 // <generalisation>
	  b parent class_ref 625292 // GLTest
      end

      class 665868 "anonymous431"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1787276 "TEX_ID"
	  public type class_ref 665868 // anonymous431
	  init_value " 123 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 2055564 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        GLTest::SetUp();
        mST = new SurfaceTexture(TEX_ID);
        mSTC = new SurfaceTextureClient(mST);
        mANW = mSTC;
        mTextureRenderer = new TextureRenderer(TEX_ID, mST);
        ASSERT_NO_FATAL_FAILURE(mTextureRenderer->SetUp());
        mFW = new FrameWaiter;
        mST->setFrameAvailableListener(mFW);
    };
"
	
	
	
	
      end

      operation 2055692 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mANW.clear();
        mSTC.clear();
        mST.clear();
        GLTest::TearDown();
    };
"
	
	
	
	
      end

      operation 2055820 "drawTexture"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mTextureRenderer->drawTexture();
    };
"
	
	
	
	
      end

      class 665996 "TextureRenderer"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1379468 // <generalisation>
	  relation 1379468 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 1379468 // <generalisation>
	    b parent class_ref 140044 // RefBase
	end

	operation 2055948 "TextureRenderer"
	  cpp_inline public explicit_return_type ""
	  nparams 2
	    param in name "texName" type class_ref 190220 // GLuint
	    param in name "st" explicit_type "sp<SurfaceTexture>"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw} :
                mTexName(texName),
                mST(st) {
        };
"
	  
	  
	  
	  
	end

	operation 2056076 "SetUp"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            const char vsrc[] =
                \"attribute vec4 vPosition;\\n\"
                \"varying vec2 texCoords;\\n\"
                \"uniform mat4 texMatrix;\\n\"
                \"void main() {\\n\"
                \"  vec2 vTexCoords = 0.5 * (vPosition.xy + vec2(1.0, 1.0));\\n\"
                \"  texCoords = (texMatrix * vec4(vTexCoords, 0.0, 1.0)).xy;\\n\"
                \"  gl_Position = vPosition;\\n\"
                \"}\\n\";

            const char fsrc[] =
                \"#extension GL_OES_EGL_image_external : require\\n\"
                \"precision mediump float;\\n\"
                \"uniform samplerExternalOES texSampler;\\n\"
                \"varying vec2 texCoords;\\n\"
                \"void main() {\\n\"
                \"  gl_FragColor = texture2D(texSampler, texCoords);\\n\"
                \"}\\n\";

            {
                SCOPED_TRACE(\"creating shader program\");
                ASSERT_NO_FATAL_FAILURE(createProgram(vsrc, fsrc, &mPgm));
            }

            mPositionHandle = glGetAttribLocation(mPgm, \"vPosition\");
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
            ASSERT_NE(-1, mPositionHandle);
            mTexSamplerHandle = glGetUniformLocation(mPgm, \"texSampler\");
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
            ASSERT_NE(-1, mTexSamplerHandle);
            mTexMatrixHandle = glGetUniformLocation(mPgm, \"texMatrix\");
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
            ASSERT_NE(-1, mTexMatrixHandle);
        };
"
	  
	  
	  
	  
	end

	operation 2056204 "drawTexture"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            static const GLfloat triangleVertices[] = {
                -1.0f, 1.0f,
                -1.0f, -1.0f,
                1.0f, -1.0f,
                1.0f, 1.0f,
            };

            glVertexAttribPointer(mPositionHandle, 2, GL_FLOAT, GL_FALSE, 0,
                    triangleVertices);
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
            glEnableVertexAttribArray(mPositionHandle);
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());

            glUseProgram(mPgm);
            glUniform1i(mTexSamplerHandle, 0);
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
            glBindTexture(GL_TEXTURE_EXTERNAL_OES, mTexName);
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());

            // XXX: These calls are not needed for GL_TEXTURE_EXTERNAL_OES as
            // they're setting the defautls for that target, but when hacking
            // things to use GL_TEXTURE_2D they are needed to achieve the same
            // behavior.
            glTexParameteri(GL_TEXTURE_EXTERNAL_OES, GL_TEXTURE_MIN_FILTER,
                    GL_LINEAR);
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
            glTexParameteri(GL_TEXTURE_EXTERNAL_OES, GL_TEXTURE_MAG_FILTER,
                    GL_LINEAR);
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
            glTexParameteri(GL_TEXTURE_EXTERNAL_OES, GL_TEXTURE_WRAP_S,
                    GL_CLAMP_TO_EDGE);
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
            glTexParameteri(GL_TEXTURE_EXTERNAL_OES, GL_TEXTURE_WRAP_T,
                    GL_CLAMP_TO_EDGE);
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());

            GLfloat texMatrix[16];
            mST->getTransformMatrix(texMatrix);
            glUniformMatrix4fv(mTexMatrixHandle, 1, GL_FALSE, texMatrix);

            glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
            ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
        };
"
	  
	  
	  
	  
	  comment " drawTexture draws the SurfaceTexture over the entire GL viewport."
	end

	classrelation 1379596 // mTexName (<directional composition>)
	  relation 1379596 *-->
	    a role_name "mTexName" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1379596 // mTexName (<directional composition>)
	    b parent class_ref 190220 // GLuint
	end

	classrelation 1379852 // mPgm (<directional composition>)
	  relation 1379852 *-->
	    a role_name "mPgm" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1379852 // mPgm (<directional composition>)
	    b parent class_ref 190220 // GLuint
	end

	classrelation 1379980 // mPositionHandle (<directional composition>)
	  relation 1379980 *-->
	    a role_name "mPositionHandle" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1379980 // mPositionHandle (<directional composition>)
	    b parent class_ref 191116 // GLint
	end

	classrelation 1380108 // mTexSamplerHandle (<directional composition>)
	  relation 1380108 *-->
	    a role_name "mTexSamplerHandle" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1380108 // mTexSamplerHandle (<directional composition>)
	    b parent class_ref 191116 // GLint
	end

	classrelation 1380236 // mTexMatrixHandle (<directional composition>)
	  relation 1380236 *-->
	    a role_name "mTexMatrixHandle" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1380236 // mTexMatrixHandle (<directional composition>)
	    b parent class_ref 191116 // GLint
	end
      end

      class 666124 "FrameWaiter"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 2056332 "FrameWaiter"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
                mPendingFrames(0) {
        };
"
	  
	  
	  
	  
	end

	operation 2056460 "waitForFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            while (mPendingFrames == 0) {
                mCondition.wait(mMutex);
            }
            mPendingFrames--;
        };
"
	  
	  
	  
	  
	end

	operation 2056588 "onFrameAvailable"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            mPendingFrames++;
            mCondition.signal();
        };
"
	  
	  
	  
	  
	end

	attribute 1787404 "mPendingFrames"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1380492 // mMutex (<directional composition>)
	  relation 1380492 *-->
	    a role_name "mMutex" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1380492 // mMutex (<directional composition>)
	    b parent class_ref 133132 // Mutex
	end

	classrelation 1380620 // mCondition (<directional composition>)
	  relation 1380620 *-->
	    a role_name "mCondition" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1380620 // mCondition (<directional composition>)
	    b parent class_ref 159244 // Condition
	end
      end

      class 666252 "DisconnectWaiter"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 2056716 "DisconnectWaiter"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mWaitForDisconnect(false),
            mPendingFrames(0) {
        };
"
	  
	  
	  
	  
	end

	operation 2056844 "waitForFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            while (mPendingFrames == 0) {
                mFrameCondition.wait(mMutex);
            }
            mPendingFrames--;
        };
"
	  
	  
	  
	  
	end

	operation 2056972 "onFrameAvailable"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            mPendingFrames++;
            mFrameCondition.signal();
        };
"
	  
	  
	  
	  
	end

	operation 2057100 "onBuffersReleased"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            while (!mWaitForDisconnect) {
                mDisconnectCondition.wait(mMutex);
            }
        };
"
	  
	  
	  
	  
	end

	operation 2057228 "finishDisconnect"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            mWaitForDisconnect = true;
            mDisconnectCondition.signal();
        };
"
	  
	  
	  
	  
	end

	classrelation 1380876 // mMutex (<directional composition>)
	  relation 1380876 *-->
	    a role_name "mMutex" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1380876 // mMutex (<directional composition>)
	    b parent class_ref 133132 // Mutex
	end

	attribute 1787532 "mWaitForDisconnect"
	  private explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1381004 // mDisconnectCondition (<directional composition>)
	  relation 1381004 *-->
	    a role_name "mDisconnectCondition" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1381004 // mDisconnectCondition (<directional composition>)
	    b parent class_ref 159244 // Condition
	end

	attribute 1787660 "mPendingFrames"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1381132 // mFrameCondition (<directional composition>)
	  relation 1381132 *-->
	    a role_name "mFrameCondition" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1381132 // mFrameCondition (<directional composition>)
	    b parent class_ref 159244 // Condition
	end
      end

      classrelation 1381516 // mANW (<directional composition>)
	relation 1381516 *-->
	  stereotype "sp"
	  a role_name "mANW" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1381516 // mANW (<directional composition>)
	  b parent class_ref 175628 // ANativeWindow
      end

      classrelation 1381644 // mTextureRenderer (<directional composition>)
	relation 1381644 *-->
	  stereotype "sp"
	  a role_name "mTextureRenderer" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1381644 // mTextureRenderer (<directional composition>)
	  b parent class_ref 665996 // TextureRenderer
      end

      classrelation 1381772 // mFW (<directional composition>)
	relation 1381772 *-->
	  stereotype "sp"
	  a role_name "mFW" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1381772 // mFW (<directional composition>)
	  b parent class_ref 666124 // FrameWaiter
      end
    end

    class 666380 "SurfaceTextureGLToGLTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * This test fixture is for testing GL -> GL texture streaming.  It creates an
 * EGLSurface and an EGLContext for the image producer to use."
      classrelation 1381900 // <generalisation>
	relation 1381900 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1381900 // <generalisation>
	  b parent class_ref 665740 // SurfaceTextureGLTest
      end

      operation 2057356 "SurfaceTextureGLToGLTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mProducerEglSurface(EGL_NO_SURFACE),
            mProducerEglContext(EGL_NO_CONTEXT) {
    };
"
	
	
	
	
      end

      operation 2057484 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLTest::SetUp();

        mProducerEglSurface = eglCreateWindowSurface(mEglDisplay, mGlConfig,
                mANW.get(), NULL);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_SURFACE, mProducerEglSurface);

        mProducerEglContext = eglCreateContext(mEglDisplay, mGlConfig,
                EGL_NO_CONTEXT, getContextAttribs());
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mProducerEglContext);
    };
"
	
	
	
	
      end

      operation 2057612 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mProducerEglContext != EGL_NO_CONTEXT) {
            eglDestroyContext(mEglDisplay, mProducerEglContext);
        }
        if (mProducerEglSurface != EGL_NO_SURFACE) {
            eglDestroySurface(mEglDisplay, mProducerEglSurface);
        }
        SurfaceTextureGLTest::TearDown();
    };
"
	
	
	
	
      end

      classrelation 1382028 // mProducerEglSurface (<directional composition>)
	relation 1382028 *-->
	  a role_name "mProducerEglSurface" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1382028 // mProducerEglSurface (<directional composition>)
	  b parent class_ref 190732 // EGLSurface
      end

      classrelation 1382156 // mProducerEglContext (<directional composition>)
	relation 1382156 *-->
	  a role_name "mProducerEglContext" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1382156 // mProducerEglContext (<directional composition>)
	  b parent class_ref 190860 // EGLContext
      end
    end

    class 666508 "SurfaceTextureGLThreadToGLTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * This test fixture is for testing GL -> GL texture streaming from one thread
 * to another.  It contains functionality to create a producer thread that will
 * perform GL rendering to an ANativeWindow that feeds frames to a
 * SurfaceTexture.  Additionally it supports interlocking the producer and
 * consumer threads so that a specific sequence of calls can be
 * deterministically created by the test.
 *
 * The intended usage is as follows:
 *
 * TEST_F(...) {
 *     class PT : public ProducerThread {
 *         virtual void render() {
 *             ...
 *             swapBuffers();
 *         }
 *     };
 *
 *     runProducerThread(new PT());
 *
 *     // The order of these calls will vary from test to test and may include
 *     // multiple frames and additional operations (e.g. GL rendering from the
 *     // texture).
 *     fc->waitForFrame();
 *     mST->updateTexImage();
 *     fc->finishFrame();
 * }
 *"
      classrelation 1382284 // <generalisation>
	relation 1382284 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1382284 // <generalisation>
	  b parent class_ref 666380 // SurfaceTextureGLToGLTest
      end

      class 666636 "ProducerThread"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1382412 // <generalisation>
	  relation 1382412 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 1382412 // <generalisation>
	    b parent class_ref 159500 // Thread
	end

	operation 2057740 "~ProducerThread"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        };
"
	  
	  
	  
	  
	end

	operation 2057868 "setEglObjects"
	  cpp_inline public explicit_return_type "void"
	  nparams 3
	    param in name "producerEglDisplay" type class_ref 190604 // EGLDisplay
	    param in name "producerEglSurface" type class_ref 190732 // EGLSurface
	    param in name "producerEglContext" type class_ref 190860 // EGLContext
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
            mProducerEglDisplay = producerEglDisplay;
            mProducerEglSurface = producerEglSurface;
            mProducerEglContext = producerEglContext;
        };
"
	  
	  
	  
	  
	end

	operation 2057996 "threadLoop"
	  cpp_virtual cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            eglMakeCurrent(mProducerEglDisplay, mProducerEglSurface,
                    mProducerEglSurface, mProducerEglContext);
            render();
            eglMakeCurrent(mProducerEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE,
                    EGL_NO_CONTEXT);
            return false;
        };
"
	  
	  
	  
	  
	end

	operation 2058124 "render"
	  abstract cpp_virtual protected explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  
	  
	  
	  
	end

	operation 2058252 "swapBuffers"
	  cpp_inline protected explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            eglSwapBuffers(mProducerEglDisplay, mProducerEglSurface);
        };
"
	  
	  
	  
	  
	end

	classrelation 1382540 // mProducerEglDisplay (<directional composition>)
	  relation 1382540 *-->
	    a role_name "mProducerEglDisplay" protected
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1382540 // mProducerEglDisplay (<directional composition>)
	    b parent class_ref 190604 // EGLDisplay
	end

	classrelation 1382668 // mProducerEglSurface (<directional composition>)
	  relation 1382668 *-->
	    a role_name "mProducerEglSurface" protected
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1382668 // mProducerEglSurface (<directional composition>)
	    b parent class_ref 190732 // EGLSurface
	end

	classrelation 1382796 // mProducerEglContext (<directional composition>)
	  relation 1382796 *-->
	    a role_name "mProducerEglContext" protected
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1382796 // mProducerEglContext (<directional composition>)
	    b parent class_ref 190860 // EGLContext
	end
      end

      class 666764 "FrameCondition"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 2058380 "FrameCondition"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
                mFrameAvailable(false),
                mFrameFinished(false) {
        };
"
	  
	  
	  
	  
	end

	operation 2058508 "waitForFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            ALOGV(\"+waitForFrame\");
            while (!mFrameAvailable) {
                mFrameAvailableCondition.wait(mMutex);
            }
            mFrameAvailable = false;
            ALOGV(\"-waitForFrame\");
        };
"
	  
	  
	  
	  
	  comment " waitForFrame waits for the next frame to arrive.  This should be
 called from the consumer thread once for every frame expected by the
 test."
	end

	operation 2058636 "finishFrame"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            ALOGV(\"+finishFrame\");
            mFrameFinished = true;
            mFrameFinishCondition.signal();
            ALOGV(\"-finishFrame\");
        };
"
	  
	  
	  
	  
	  comment " Allow the producer to return from its swapBuffers call and continue
 on to produce the next frame.  This should be called by the consumer
 thread once for every frame expected by the test."
	end

	operation 2058764 "onFrameAvailable"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mMutex);
            ALOGV(\"+onFrameAvailable\");
            mFrameAvailable = true;
            mFrameAvailableCondition.signal();
            while (!mFrameFinished) {
                mFrameFinishCondition.wait(mMutex);
            }
            mFrameFinished = false;
            ALOGV(\"-onFrameAvailable\");
        };
"
	  
	  
	  
	  
	  comment " This should be called by SurfaceTexture on the producer thread."
	end

	attribute 1787788 "mFrameAvailable"
	  protected explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1787916 "mFrameFinished"
	  protected explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1383052 // mMutex (<directional composition>)
	  relation 1383052 *-->
	    a role_name "mMutex" protected
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1383052 // mMutex (<directional composition>)
	    b parent class_ref 133132 // Mutex
	end

	classrelation 1383180 // mFrameAvailableCondition (<directional composition>)
	  relation 1383180 *-->
	    a role_name "mFrameAvailableCondition" protected
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1383180 // mFrameAvailableCondition (<directional composition>)
	    b parent class_ref 159244 // Condition
	end

	classrelation 1383308 // mFrameFinishCondition (<directional composition>)
	  relation 1383308 *-->
	    a role_name "mFrameFinishCondition" protected
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 1383308 // mFrameFinishCondition (<directional composition>)
	    b parent class_ref 159244 // Condition
	end
      end

      operation 2058892 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLToGLTest::SetUp();
        mFC = new FrameCondition();
        mST->setFrameAvailableListener(mFC);
    };
"
	
	
	
	
      end

      operation 2059020 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mProducerThread != NULL) {
            mProducerThread->requestExitAndWait();
        }
        mProducerThread.clear();
        mFC.clear();
        SurfaceTextureGLToGLTest::TearDown();
    };
"
	
	
	
	
      end

      operation 2059148 "runProducerThread"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "producerThread" explicit_type "sp<ProducerThread>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ASSERT_TRUE(mProducerThread == NULL);
        mProducerThread = producerThread;
        producerThread->setEglObjects(mEglDisplay, mProducerEglSurface,
                mProducerEglContext);
        producerThread->run();
    };
"
	
	
	
	
      end

      classrelation 1383436 // mProducerThread (<directional composition>)
	relation 1383436 *-->
	  stereotype "sp"
	  a role_name "mProducerThread" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1383436 // mProducerThread (<directional composition>)
	  b parent class_ref 666636 // ProducerThread
      end

      classrelation 1383564 // mFC (<directional composition>)
	relation 1383564 *-->
	  stereotype "sp"
	  a role_name "mFC" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1383564 // mFC (<directional composition>)
	  b parent class_ref 666764 // FrameCondition
      end
    end

    class 666892 "SurfaceTextureFBOTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1383692 // <generalisation>
	relation 1383692 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1383692 // <generalisation>
	  b parent class_ref 665740 // SurfaceTextureGLTest
      end

      operation 2059276 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLTest::SetUp();

        glGenFramebuffers(1, &mFbo);
        ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());

        glGenTextures(1, &mFboTex);
        glBindTexture(GL_TEXTURE_2D, mFboTex);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, getSurfaceWidth(),
                getSurfaceHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
        glBindTexture(GL_TEXTURE_2D, 0);
        ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());

        glBindFramebuffer(GL_FRAMEBUFFER, mFbo);
        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
                GL_TEXTURE_2D, mFboTex, 0);
        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        ASSERT_EQ(GLenum(GL_NO_ERROR), glGetError());
    };
"
	
	
	
	
      end

      operation 2059404 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLTest::TearDown();

        glDeleteTextures(1, &mFboTex);
        glDeleteFramebuffers(1, &mFbo);
    };
"
	
	
	
	
      end

      classrelation 1383820 // mFbo (<directional composition>)
	relation 1383820 *-->
	  a role_name "mFbo" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1383820 // mFbo (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end

      classrelation 1383948 // mFboTex (<directional composition>)
	relation 1383948 *-->
	  a role_name "mFboTex" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1383948 // mFboTex (<directional composition>)
	  b parent class_ref 190220 // GLuint
      end
    end

    class 667020 "SurfaceTextureMultiContextGLTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1384076 // <generalisation>
	relation 1384076 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1384076 // <generalisation>
	  b parent class_ref 665740 // SurfaceTextureGLTest
      end

      class 667148 "anonymous432"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1788044 "SECOND_TEX_ID"
	  public type class_ref 667148 // anonymous432
	  init_value " 123 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 667276 "anonymous433"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1788172 "THIRD_TEX_ID"
	  public type class_ref 667276 // anonymous433
	  init_value " 456 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 2059532 "SurfaceTextureMultiContextGLTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mSecondEglContext(EGL_NO_CONTEXT) {
    };
"
	
	
	
	
      end

      operation 2059660 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SurfaceTextureGLTest::SetUp();

        // Set up the secondary context and texture renderer.
        mSecondEglContext = eglCreateContext(mEglDisplay, mGlConfig,
                EGL_NO_CONTEXT, getContextAttribs());
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mSecondEglContext);

        ASSERT_TRUE(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface,
                mSecondEglContext));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        mSecondTextureRenderer = new TextureRenderer(SECOND_TEX_ID, mST);
        ASSERT_NO_FATAL_FAILURE(mSecondTextureRenderer->SetUp());

        // Set up the tertiary context and texture renderer.
        mThirdEglContext = eglCreateContext(mEglDisplay, mGlConfig,
                EGL_NO_CONTEXT, getContextAttribs());
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mThirdEglContext);

        ASSERT_TRUE(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface,
                mThirdEglContext));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        mThirdTextureRenderer = new TextureRenderer(THIRD_TEX_ID, mST);
        ASSERT_NO_FATAL_FAILURE(mThirdTextureRenderer->SetUp());

        // Switch back to the primary context to start the tests.
        ASSERT_TRUE(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface,
                mEglContext));
    };
"
	
	
	
	
      end

      operation 2059788 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mThirdEglContext != EGL_NO_CONTEXT) {
            eglDestroyContext(mEglDisplay, mThirdEglContext);
        }
        if (mSecondEglContext != EGL_NO_CONTEXT) {
            eglDestroyContext(mEglDisplay, mSecondEglContext);
        }
        SurfaceTextureGLTest::TearDown();
    };
"
	
	
	
	
      end

      classrelation 1384204 // mSecondEglContext (<directional composition>)
	relation 1384204 *-->
	  a role_name "mSecondEglContext" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1384204 // mSecondEglContext (<directional composition>)
	  b parent class_ref 190860 // EGLContext
      end

      attribute 1788300 "mSecondTextureRenderer"
	protected explicit_type "TextureRenderer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1384332 // mThirdEglContext (<directional composition>)
	relation 1384332 *-->
	  a role_name "mThirdEglContext" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1384332 // mThirdEglContext (<directional composition>)
	  b parent class_ref 190860 // EGLContext
      end

      attribute 1788428 "mThirdTextureRenderer"
	protected explicit_type "TextureRenderer"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 667404 "SurfaceTextureClientTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1384460 // <generalisation>
	relation 1384460 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1384460 // <generalisation>
	  b parent class_ref 664844 // typedef63
      end

      operation 2059916 "SurfaceTextureClientTest"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mEglDisplay(EGL_NO_DISPLAY),
            mEglSurface(EGL_NO_SURFACE),
            mEglContext(EGL_NO_CONTEXT) {
    };
"
	
	
	
	
      end

      operation 2060044 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"Begin test: %s.%s\", testInfo->test_case_name(),
                testInfo->name());

        mST = new SurfaceTexture(123);
        mSTC = new SurfaceTextureClient(mST);
        mANW = mSTC;

        // We need a valid GL context so we can test updateTexImage()
        // This initializes EGL and create a dummy GL context with a
        // pbuffer render target.
        mEglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_DISPLAY, mEglDisplay);

        EGLint majorVersion, minorVersion;
        EXPECT_TRUE(eglInitialize(mEglDisplay, &majorVersion, &minorVersion));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());

        EGLConfig myConfig;
        EGLint numConfigs = 0;
        EXPECT_TRUE(eglChooseConfig(mEglDisplay, getConfigAttribs(),
                &myConfig, 1, &numConfigs));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());

        EGLint pbufferAttribs[] = {
            EGL_WIDTH, 16,
            EGL_HEIGHT, 16,
            EGL_NONE };
        mEglSurface = eglCreatePbufferSurface(mEglDisplay, myConfig, pbufferAttribs);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_SURFACE, mEglSurface);

        mEglContext = eglCreateContext(mEglDisplay, myConfig, EGL_NO_CONTEXT, 0);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mEglContext);

        EXPECT_TRUE(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface, mEglContext));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
    };
"
	
	
	
	
      end

      operation 2060172 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mST.clear();
        mSTC.clear();
        mANW.clear();

        eglMakeCurrent(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
        eglDestroyContext(mEglDisplay, mEglContext);
        eglDestroySurface(mEglDisplay, mEglSurface);
        eglTerminate(mEglDisplay);

        const ::testing::TestInfo* const testInfo =
            ::testing::UnitTest::GetInstance()->current_test_info();
        ALOGV(\"End test:   %s.%s\", testInfo->test_case_name(),
                testInfo->name());
    };
"
	
	
	
	
      end

      operation 2060300 "getConfigAttribs"
	cpp_virtual cpp_inline protected return_type class_ref 572812 // EGLint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static EGLint sDefaultConfigAttribs[] = {
            EGL_SURFACE_TYPE, EGL_PBUFFER_BIT,
            EGL_NONE
        };

        return sDefaultConfigAttribs;
    };
"
	
	
	
	
      end

      classrelation 1384844 // mANW (<directional composition>)
	relation 1384844 *-->
	  stereotype "sp"
	  a role_name "mANW" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1384844 // mANW (<directional composition>)
	  b parent class_ref 175628 // ANativeWindow
      end

      classrelation 1384972 // mEglDisplay (<directional composition>)
	relation 1384972 *-->
	  a role_name "mEglDisplay" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1384972 // mEglDisplay (<directional composition>)
	  b parent class_ref 190604 // EGLDisplay
      end

      classrelation 1385100 // mEglSurface (<directional composition>)
	relation 1385100 *-->
	  a role_name "mEglSurface" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1385100 // mEglSurface (<directional composition>)
	  b parent class_ref 190732 // EGLSurface
      end

      classrelation 1385228 // mEglContext (<directional composition>)
	relation 1385228 *-->
	  a role_name "mEglContext" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1385228 // mEglContext (<directional composition>)
	  b parent class_ref 190860 // EGLContext
      end
    end

    class 667532 "MultiSurfaceTextureClientTest"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1385356 // <generalisation>
	relation 1385356 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1385356 // <generalisation>
	  b parent class_ref 664844 // typedef63
      end

      operation 2060428 "MultiSurfaceTextureClientTest"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            mEglDisplay(EGL_NO_DISPLAY),
            mEglContext(EGL_NO_CONTEXT) {
        for (int i = 0; i < NUM_SURFACE_TEXTURES; i++) {
            mEglSurfaces[i] = EGL_NO_CONTEXT;
        }
    };
"
	
	
	
	
      end

      class 667660 "anonymous434"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1788556 "NUM_SURFACE_TEXTURES"
	  public type class_ref 667660 // anonymous434
	  init_value " 32 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 2060556 "SetUp"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mEglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_DISPLAY, mEglDisplay);

        EGLint majorVersion, minorVersion;
        EXPECT_TRUE(eglInitialize(mEglDisplay, &majorVersion, &minorVersion));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());

        EGLConfig myConfig;
        EGLint numConfigs = 0;
        EGLint configAttribs[] = {
            EGL_SURFACE_TYPE, EGL_WINDOW_BIT,
            EGL_NONE
        };
        EXPECT_TRUE(eglChooseConfig(mEglDisplay, configAttribs, &myConfig, 1,
                &numConfigs));
        ASSERT_EQ(EGL_SUCCESS, eglGetError());

        mEglContext = eglCreateContext(mEglDisplay, myConfig, EGL_NO_CONTEXT,
                0);
        ASSERT_EQ(EGL_SUCCESS, eglGetError());
        ASSERT_NE(EGL_NO_CONTEXT, mEglContext);

        for (int i = 0; i < NUM_SURFACE_TEXTURES; i++) {
            sp<SurfaceTexture> st(new SurfaceTexture(i));
            sp<SurfaceTextureClient> stc(new SurfaceTextureClient(st));
            mEglSurfaces[i] = eglCreateWindowSurface(mEglDisplay, myConfig,
                    static_cast<ANativeWindow*>(stc.get()), NULL);
            ASSERT_EQ(EGL_SUCCESS, eglGetError());
            ASSERT_NE(EGL_NO_SURFACE, mEglSurfaces[i]);
        }
    };
"
	
	
	
	
      end

      operation 2060684 "TearDown"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        eglMakeCurrent(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE,
                EGL_NO_CONTEXT);

        for (int i = 0; i < NUM_SURFACE_TEXTURES; i++) {
            if (mEglSurfaces[i] != EGL_NO_SURFACE) {
                eglDestroySurface(mEglDisplay, mEglSurfaces[i]);
            }
        }

        if (mEglContext != EGL_NO_CONTEXT) {
            eglDestroyContext(mEglDisplay, mEglContext);
        }

        if (mEglDisplay != EGL_NO_DISPLAY) {
            eglTerminate(mEglDisplay);
        }
    };
"
	
	
	
	
      end

      classrelation 1385484 // mEglDisplay (<directional composition>)
	relation 1385484 *-->
	  a role_name "mEglDisplay" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1385484 // mEglDisplay (<directional composition>)
	  b parent class_ref 190604 // EGLDisplay
      end

      classrelation 1385612 // mEglSurfaces (<directional composition>)
	relation 1385612 *-->
	  a role_name "mEglSurfaces" multiplicity "[NUM_SURFACE_TEXTURES]" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    classrelation_ref 1385612 // mEglSurfaces (<directional composition>)
	  b parent class_ref 190732 // EGLSurface
      end

      classrelation 1385740 // mEglContext (<directional composition>)
	relation 1385740 *-->
	  a role_name "mEglContext" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 1385740 // mEglContext (<directional composition>)
	  b parent class_ref 190860 // EGLContext
      end
    end
  end

  deploymentview 160268 "tests"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 305804 "typedef63"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 664844 // typedef63
      end
    end

    artifact 305932 "BufferQueueTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 664716 // BufferQueueTest
      end
    end

    artifact 306060 "CpuConsumerTestParams"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 664972 // CpuConsumerTestParams
      end
    end

    artifact 306188 "typedef64"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 665228 // typedef64
      end
    end

    artifact 306316 "CpuConsumerTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 665100 // CpuConsumerTest
      end
    end

    artifact 306444 "SurfaceTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 665612 // SurfaceTest
      end
    end

    artifact 306572 "SurfaceTextureGLTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 665740 // SurfaceTextureGLTest
      end
    end

    artifact 306700 "SurfaceTextureGLToGLTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 666380 // SurfaceTextureGLToGLTest
      end
    end

    artifact 306828 "SurfaceTextureGLThreadToGLTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 666508 // SurfaceTextureGLThreadToGLTest
      end
    end

    artifact 306956 "SurfaceTextureFBOTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 666892 // SurfaceTextureFBOTest
      end
    end

    artifact 307084 "SurfaceTextureMultiContextGLTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 667020 // SurfaceTextureMultiContextGLTest
      end
    end

    artifact 307212 "SurfaceTextureClientTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 667404 // SurfaceTextureClientTest
      end
    end

    artifact 307340 "MultiSurfaceTextureClientTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 667532 // MultiSurfaceTextureClientTest
      end
    end
  end
end
