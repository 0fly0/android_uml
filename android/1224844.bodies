class TransitionAlpha
!!!6921356.java!!!	TransitionAlpha()
        this(null, null, null, 0, 0, null, 0, false);
!!!6921484.java!!!	TransitionAlpha(in transitionId : String, inout afterMediaItem : MediaItem, inout beforeMediaItem : MediaItem, in durationMs : long, in behavior : int, in maskFilename : String, in blendingPercent : int, inout invert : boolean)
        super(transitionId, afterMediaItem, beforeMediaItem, durationMs, behavior);

        /**
         * Generate a RGB file for the supplied mask file
         */
        final BitmapFactory.Options dbo = new BitmapFactory.Options();
        dbo.inJustDecodeBounds = true;
        if (!new File(maskFilename).exists())
            throw new IllegalArgumentException("File not Found " + maskFilename);
        BitmapFactory.decodeFile(maskFilename, dbo);

        mWidth = dbo.outWidth;
        mHeight = dbo.outHeight;

        mRGBMaskFile = String.format(mNativeHelper.getProjectPath() +
                "/" + "mask" + transitionId+ ".rgb");


        FileOutputStream fl = null;

        try{
             fl = new FileOutputStream(mRGBMaskFile);
        } catch (IOException e) {
            /* catch IO exception */
        }
        final DataOutputStream dos = new DataOutputStream(fl);

        if (fl != null) {
            /**
             * Write to rgb file
             */
            Bitmap imageBitmap = BitmapFactory.decodeFile(maskFilename);
            final int [] framingBuffer = new int[mWidth];
            ByteBuffer byteBuffer = ByteBuffer.allocate(framingBuffer.length * 4);
            IntBuffer intBuffer;

            byte[] array = byteBuffer.array();
            int tmp = 0;
            while (tmp < mHeight) {
                imageBitmap.getPixels(framingBuffer, 0, mWidth, 0, tmp,mWidth, 1);
                intBuffer = byteBuffer.asIntBuffer();
                intBuffer.put(framingBuffer,0,mWidth);
                try {
                    dos.write(array);
                } catch (IOException e) {
                    /* catch file write error */
                }
                tmp += 1;
            }

            imageBitmap.recycle();
            try{
                fl.close();
            }catch (IOException e) {
                /* file close error */
            }
        }

        /**
         * Capture the details
         */
        mMaskFilename = maskFilename;
        mBlendingPercent = blendingPercent;
        mIsInvert = invert;
!!!6921612.java!!!	getRGBFileWidth() : int
        return mWidth;
!!!6921740.java!!!	getRGBFileHeight() : int
        return mHeight;
!!!6921868.java!!!	getPNGMaskFilename() : String
        return mRGBMaskFile;
!!!6921996.java!!!	getBlendingPercent() : int
        return mBlendingPercent;
!!!6922124.java!!!	getMaskFilename() : String
        return mMaskFilename;
!!!6922252.java!!!	isInvert() : boolean
        return mIsInvert;
!!!6922380.java!!!	generate() : void
        super.generate();
