class TrackHandle
!!!833676.cpp!!!	~TrackHandle()
    // just stop the track on deletion, associated resources
    // will be freed from the main thread once all pending buffers have
    // been played. Unless it's not in the active track list, in which
    // case we free everything now...
    mTrack->destroy();
!!!833804.cpp!!!	getCblk() : sp<IMemory>
    return mTrack->getCblk();
!!!833932.cpp!!!	start() : status_t
    return mTrack->start();
!!!834060.cpp!!!	stop() : void
    mTrack->stop();
!!!834188.cpp!!!	flush() : void
    mTrack->flush();
!!!834316.cpp!!!	mute(in e : bool) : void
    mTrack->mute(e);
!!!834444.cpp!!!	pause() : void
    mTrack->pause();
!!!834572.cpp!!!	attachAuxEffect(in EffectId : int) : status_t
    return mTrack->attachAuxEffect(EffectId);
!!!834700.cpp!!!	allocateTimedBuffer(in size : size_t, inout buffer : sp<IMemory>) : status_t
    if (!mTrack->isTimedTrack())
        return INVALID_OPERATION;

    PlaybackThread::TimedTrack* tt =
            reinterpret_cast<PlaybackThread::TimedTrack*>(mTrack.get());
    return tt->allocateTimedBuffer(size, buffer);
!!!834828.cpp!!!	queueTimedBuffer(in buffer : sp<IMemory>, in pts : int64_t) : status_t
    if (!mTrack->isTimedTrack())
        return INVALID_OPERATION;

    PlaybackThread::TimedTrack* tt =
            reinterpret_cast<PlaybackThread::TimedTrack*>(mTrack.get());
    return tt->queueTimedBuffer(buffer, pts);
!!!834956.cpp!!!	setMediaTimeTransform(in xform : LinearTransform, in target : int) : status_t

    if (!mTrack->isTimedTrack())
        return INVALID_OPERATION;

    PlaybackThread::TimedTrack* tt =
            reinterpret_cast<PlaybackThread::TimedTrack*>(mTrack.get());
    return tt->setMediaTimeTransform(
        xform, static_cast<TimedAudioTrack::TargetTimeline>(target));
!!!835084.cpp!!!	onTransact(in code : uint32_t, in data : Parcel, inout reply : Parcel, in flags : uint32_t) : status_t
    return BnAudioTrack::onTransact(code, data, reply, flags);
