class OmxVoutProxy
!!!11177228.cpp!!!	OmxVoutProxy()
  mIsInputComponent = OMX_FALSE;
!!!11177484.cpp!!!	prepare() : OMX_ERRORTYPE
  VOUT_TRACE("%s", mName);
  OMX_ERRORTYPE err = OMX_ErrorNone;
  if (mUserCount++ == 0) {
    mVout = new OmxVout(getVideoPlane());
    err = mVout->prepare();
  }
  if (NULL != strstr(mName, "iv_processor")) {
    OmxPortImpl *port = getPort(kVideoPortStartNumber);
    if (port->isTunneled()) {
      OMX_COMPONENTTYPE *omx_tunnel =
          static_cast<OMX_COMPONENTTYPE *>(port->getTunnelComponent());
      AMP_COMPONENT amp_tunnel = static_cast<OmxComponentImpl *>(
          omx_tunnel->pComponentPrivate)->getAmpHandle();
      mVout->connectVideoPort(amp_tunnel, 0);
    }
  }
  if (NULL != strstr(mName, "video_scheduler")) {
    OmxPortImpl *port = getPort(kClockPortStartNumber);
    if (port->isTunneled()) {
      OMX_COMPONENTTYPE *omx_tunnel =
          static_cast<OMX_COMPONENTTYPE *>(port->getTunnelComponent());
      AMP_COMPONENT amp_tunnel = static_cast<OmxComponentImpl *>(
          omx_tunnel->pComponentPrivate)->getAmpHandle();
      OMX_LOGD("%s Clock %p", mName, amp_tunnel);
      // With audio passthru, audio use the first 3 clock port, video use the last one.
      mVout->connectClockPort(amp_tunnel, 3);
    }
  }
  if (NULL != strstr(mName, "iv_renderer")) {
    mVout->registerEvent(AMP_EVENT_API_VOUT_CALLBACK, eventHandle, this);
  }
  return err;
!!!11177612.cpp!!!	preroll() : OMX_ERRORTYPE
  VOUT_TRACE("%s", mName);
  OMX_ERRORTYPE err = OMX_ErrorNone;
  if (mIsInputComponent) {
    err = mVout->preroll();
  }
  return err;
!!!11177740.cpp!!!	start() : OMX_ERRORTYPE
  VOUT_TRACE("%s", mName);
  OMX_ERRORTYPE err = OMX_ErrorNone;
  if (mIsInputComponent) {
    err = mVout->start();
  }
  return err;
!!!11177868.cpp!!!	pause() : OMX_ERRORTYPE
  VOUT_TRACE("%s", mName);
  OMX_ERRORTYPE err = OMX_ErrorNone;
  if (mIsInputComponent) {
    err = mVout->pause();
  }
  return err;
!!!11177996.cpp!!!	resume() : OMX_ERRORTYPE
  VOUT_TRACE("%s", mName);
  OMX_ERRORTYPE err = OMX_ErrorNone;
  if (mIsInputComponent) {
    err = mVout->resume();
  }
  return err;
!!!11178124.cpp!!!	stop() : OMX_ERRORTYPE
  VOUT_TRACE("%s", mName);
  OMX_ERRORTYPE err = OMX_ErrorNone;
  if (mIsInputComponent) {
    err = mVout->stop();
  }
  return err;
!!!11178252.cpp!!!	release() : OMX_ERRORTYPE
  VOUT_TRACE("%s", mName);
  OMX_ERRORTYPE err = OMX_ErrorNone;
#if 0
  if (NULL != strstr(mName, "iv_processor")) {
    OmxPortImpl *port = getPort(kVideoPortStartNumber);
    if (port->isTunneled()) {
      OMX_COMPONENTTYPE *omx_tunnel =
          static_cast<OMX_COMPONENTTYPE *>(port->getTunnelComp());
      AMP_COMPONENT amp_tunnel = static_cast<OmxComponentImpl *>(
          omx_tunnel->pComponentPrivate)->getAmpHandle();
      mVout->disconnectVideoPort(amp_tunnel, 0);
    }
  }
  if (NULL != strstr(mName, "video_scheduler")) {
    OmxPortImpl *port = getPort(kClockPortStartNumber);
    if (port->isTunneled()) {
      OMX_COMPONENTTYPE *omx_tunnel =
          static_cast<OMX_COMPONENTTYPE *>(port->getTunnelComp());
      AMP_COMPONENT amp_tunnel = static_cast<OmxComponentImpl *>(
          omx_tunnel->pComponentPrivate)->getAmpHandle();
      mVout->disconnectClockPort(amp_tunnel, 0);
    }
  }
#endif
  if (NULL != strstr(mName, "iv_renderer")) {
    mVout->unRegisterEvent(AMP_EVENT_API_VOUT_CALLBACK, eventHandle);
  }

  if (--mUserCount == 0) {
    err = mVout->release();
    delete mVout;
    mVout = NULL;
  }
  return err;
!!!11178380.cpp!!!	flush() : OMX_ERRORTYPE
  VOUT_TRACE("%s ENTER", mName);
  OMX_ERRORTYPE err = OMX_ErrorNone;
  if (mIsInputComponent) {
    err = mVout->flush();
  }
  VOUT_TRACE("%s EXIT", mName);
  return err;
!!!11178508.cpp!!!	getVideoPlane() : OMX_S32
  return -1;
!!!11178636.cpp!!!	eventHandle(in hListener : HANDLE, inout pEvent : AMP_EVENT, inout pUserData : VOID) : HRESULT
  if (pEvent) {
    OMX_LOGV("vout received event %x, pUserData = %p\n",
        pEvent->stEventHead.eEventCode, pUserData);
  }
  if (pEvent->stEventHead.eEventCode == AMP_EVENT_API_VOUT_CALLBACK) {
    OmxVoutProxy *pComp = static_cast<OmxVoutProxy *>(pUserData);
    OMX_LOGD("%s Receive EOS from video render", pComp->mName);
    pComp->postEvent(OMX_EventBufferFlag, kVideoPortStartNumber,
        OMX_BUFFERFLAG_EOS);
  }
  return SUCCESS;
