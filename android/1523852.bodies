class PlaybackView
!!!9344396.java!!!	PlaybackView(inout context : Context)
        super(context);
        init();
!!!9344524.java!!!	PlaybackView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        init();
!!!9344652.java!!!	PlaybackView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
        init();
!!!9344780.java!!!	setOnGestureListener(inout gl : OnGestureListener) : void
        mGestureDetector = new GestureDetector(getContext(), gl);
!!!9344908.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        mGestureDetector.onTouchEvent(event);
        return true;
!!!9345036.java!!!	init() : void
        levelPaint = new Paint();
        levelPaint.setColor(Color.WHITE);
        levelPaint.setTextSize(TILE_SCALE / 2);
        coordPaint = new Paint();
        coordPaint.setColor(Color.BLACK);
        coordPaint.setTextSize(TILE_SCALE / 3);
        goldPaint = new Paint();
        goldPaint.setColor(0xffa0e010);
        mGraphs = new PlaybackGraphs();
!!!9345164.java!!!	onDraw(inout canvas : Canvas) : void
        super.onDraw(canvas);

        if (mTempShapes == null || mTempShapes.isEmpty()) {
            return;
        }

        mGraphs.draw(canvas, mTempShapes, mRenderStrings, getResources());
        invalidate(); // may have animations, force redraw
!!!9345292.java!!!	statString(in labelId : int, in value : int) : String
        return getResources().getString(R.string.format_stat_name,
                getResources().getString(labelId), value);
!!!9345420.java!!!	tileString(in formatStringId : int, inout t : TileData) : String
        return getResources().getString(formatStringId,
                t.left, t.top, t.right, t.bottom);
!!!9345548.java!!!	setFrame(in frame : int) : int
        if (mProfData == null || mProfData.frames.length == 0) {
            return 0;
        }

        int readyTiles = 0, unreadyTiles = 0, unplacedTiles = 0, numInvals = 0;
        mTempShapes.clear();
        mRenderStrings.clear();

        // create tile shapes (as they're drawn on bottom)
        for (TileData t : mProfData.frames[frame]) {
            if (t == mProfData.frames[frame][0]){
                // viewport 'tile', add coords to render strings
                mRenderStrings.add(tileString(R.string.format_view_pos, t));
            } else  if (t.level != INVAL_FLAG) {
                int colorId;
                if (t.isReady) {
                    readyTiles++;
                    colorId = R.color.ready_tile;
                } else {
                    unreadyTiles++;
                    colorId = R.color.unready_tile;
                }
                if (t.left < 0 || t.top < 0) {
                    unplacedTiles++;
                }
                mTempShapes.add(new TileDrawable(t, colorId));
            } else {
                // inval 'tile', count and add coords to render strings
                numInvals++;
                mRenderStrings.add(tileString(R.string.format_inval_pos, t));
            }
        }

        // create invalidate shapes (drawn above tiles)
        int invalId = 0;
        for (TileData t : mProfData.frames[frame]) {
            if (t.level == INVAL_FLAG && t != mProfData.frames[frame][0]) {
                TileDrawable invalShape = new TileDrawable(t,
                        R.color.inval_region_start);
                ValueAnimator tileAnimator = ObjectAnimator.ofInt(invalShape,
                        "color",
                        getResources().getColor(R.color.inval_region_start),
                        getResources().getColor(R.color.inval_region_stop));
                tileAnimator.setDuration(numInvals * INVAL_CYCLE);
                tileAnimator.setEvaluator(new ArgbEvaluator());
                tileAnimator.setRepeatCount(ValueAnimator.INFINITE);
                tileAnimator.setRepeatMode(ValueAnimator.RESTART);
                float delay = (float) (invalId) * INVAL_CYCLE;
                tileAnimator.setStartDelay((int) delay);
                invalId++;
                tileAnimator.start();

                mTempShapes.add(invalShape);
            }
        }

        mRenderStrings.add(statString(R.string.ready_tiles, readyTiles));
        mRenderStrings.add(statString(R.string.unready_tiles, unreadyTiles));
        mRenderStrings.add(statString(R.string.unplaced_tiles, unplacedTiles));
        mRenderStrings.add(statString(R.string.number_invalidates, numInvals));

        // draw view rect (using first TileData object, on top)
        TileDrawable viewShape = new TileDrawable(mProfData.frames[frame][0],
                R.color.view);
        mTempShapes.add(viewShape);
        this.invalidate();
        return frame;
!!!9345676.java!!!	setData(inout tileProfilingData : RunData) : void
        mProfData = tileProfilingData;

        mGraphs.setData(mProfData);
