class Cipher
!!!1779227.java!!!	Cipher(inout cipherSpi : CipherSpi, inout provider : Provider, inout transformation : String)
        if (cipherSpi == null) {
            throw new NullPointerException("cipherSpi == null");
        }
        if (!(cipherSpi instanceof NullCipherSpi) && provider == null) {
            throw new NullPointerException("provider == null");
        }
        this.provider = provider;
        this.transformation = transformation;
        this.spiImpl = cipherSpi;
!!!1779355.java!!!	getInstance(inout transformation : String) : Cipher
        return getCipher(transformation, null);
!!!1779483.java!!!	getInstance(inout transformation : String, inout provider : String) : Cipher

        if (provider == null) {
            throw new IllegalArgumentException("provider == null");
        }

        Provider p = Security.getProvider(provider);
        if (p == null) {
            throw new NoSuchProviderException("Provider not available: " + provider);
        }
        return getInstance(transformation, p);
!!!1779611.java!!!	getInstance(inout transformation : String, inout provider : Provider) : Cipher
        if (provider == null) {
            throw new IllegalArgumentException("provider == null");
        }
        Cipher c = getCipher(transformation, provider);
        return c;
!!!1779739.java!!!	invalidTransformation(inout transformation : String) : NoSuchAlgorithmException
        throw new NoSuchAlgorithmException("Invalid transformation: " + transformation);
!!!1779867.java!!!	getCipher(inout transformation : String, inout provider : Provider) : Cipher

        if (transformation == null || transformation.isEmpty()) {
            throw invalidTransformation(transformation);
        }

        String[] transf = checkTransformation(transformation);

        boolean needSetPadding = false;
        boolean needSetMode = false;
        Object engineSpi = null;
        Provider engineProvider = provider;
        if (transf[1] == null && transf[2] == null) { // "algorithm"
            if (provider == null) {
                Engine.SpiAndProvider sap = ENGINE.getInstance(transf[0], null);
                engineSpi = sap.spi;
                engineProvider = sap.provider;
            } else {
                engineSpi = ENGINE.getInstance(transf[0], provider, null);
            }
        } else {
            String[] searchOrder = {
                transf[0] + "/" + transf[1] + "/" + transf[2], // "algorithm/mode/padding"
                transf[0] + "/" + transf[1], // "algorithm/mode"
                transf[0] + "//" + transf[2], // "algorithm//padding"
                transf[0] // "algorithm"
            };
            int i;
            for (i = 0; i < searchOrder.length; i++) {
                try {
                    if (provider == null) {
                        Engine.SpiAndProvider sap = ENGINE.getInstance(searchOrder[i], null);
                        engineSpi = sap.spi;
                        engineProvider = sap.provider;
                    } else {
                        engineSpi = ENGINE.getInstance(searchOrder[i], provider, null);
                    }
                    break;
                } catch (NoSuchAlgorithmException e) {
                    if (i == searchOrder.length-1) {
                        throw new NoSuchAlgorithmException(transformation, e);
                    }
                }
            }
            switch (i) {
                case 1: // "algorithm/mode"
                    needSetPadding = true;
                    break;
                case 2: // "algorithm//padding"
                    needSetMode = true;
                    break;
                case 3: // "algorithm"
                    needSetPadding = true;
                    needSetMode = true;
            }
        }
        if (engineSpi == null || engineProvider == null) {
            throw new NoSuchAlgorithmException(transformation);
        }
        if (!(engineSpi instanceof CipherSpi)) {
            throw new NoSuchAlgorithmException(engineSpi.getClass().getName());
        }
        CipherSpi cspi = (CipherSpi) engineSpi;
        Cipher c = new Cipher(cspi, engineProvider, transformation);
        if (needSetMode) {
            c.spiImpl.engineSetMode(transf[1]);
        }
        if (needSetPadding) {
            c.spiImpl.engineSetPadding(transf[2]);
        }
        return c;
!!!1779995.java!!!	checkTransformation(inout transformation : String) : String
        // ignore an extra prefix / characters such as in
        // "/DES/CBC/PKCS5Paddin" http://b/3387688
        if (transformation.startsWith("/")) {
            transformation = transformation.substring(1);
        }
        // 'transformation' should be of the form "algorithm/mode/padding".
        String[] pieces = transformation.split("/");
        if (pieces.length > 3) {
            throw invalidTransformation(transformation);
        }
        // Empty or missing pieces are represented by null.
        String[] result = new String[3];
        for (int i = 0; i < pieces.length; ++i) {
            String piece = pieces[i].trim();
            if (!piece.isEmpty()) {
                result[i] = piece;
            }
        }
        // You MUST specify an algorithm.
        if (result[0] == null) {
            throw invalidTransformation(transformation);
        }
        if (!(result[1] == null && result[2] == null) && (result[1] == null || result[2] == null)) {
            throw invalidTransformation(transformation);
        }
        return result;
!!!1780123.java!!!	getProvider() : Provider
        return provider;
!!!1780251.java!!!	getAlgorithm() : String
        return transformation;
!!!1780379.java!!!	getBlockSize() : int
        return spiImpl.engineGetBlockSize();
!!!1780507.java!!!	getOutputSize(in inputLen : int) : int
        if (mode == 0) {
            throw new IllegalStateException("Cipher has not yet been initialized");
        }
        return spiImpl.engineGetOutputSize(inputLen);
!!!1780635.java!!!	getIV() : byte
        return spiImpl.engineGetIV();
!!!1780763.java!!!	getParameters() : AlgorithmParameters
        return spiImpl.engineGetParameters();
!!!1780891.java!!!	getExemptionMechanism() : ExemptionMechanism
        //FIXME implement getExemptionMechanism

        //        try {
        //            return ExemptionMechanism.getInstance(transformation, provider);
        //        } catch (NoSuchAlgorithmException e) {
        return null;
        //        }

!!!1781019.java!!!	init(in opmode : int, inout key : Key) : void
        if (secureRandom == null) {
            // In theory it might be thread-unsafe but in the given case it's OK
            // since it does not matter which SecureRandom instance is passed
            // to the init()
            secureRandom = new SecureRandom();
        }
        init(opmode, key, secureRandom);
!!!1781147.java!!!	init(in opmode : int, inout key : Key, inout random : SecureRandom) : void
        checkMode(opmode);
        //        FIXME InvalidKeyException
        //        if keysize exceeds the maximum allowable keysize
        //        (jurisdiction policy files)
        spiImpl.engineInit(opmode, key, random);
        mode = opmode;
!!!1781275.java!!!	checkMode(in mode : int) : void
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE
            && mode != UNWRAP_MODE && mode != WRAP_MODE) {
            throw new InvalidParameterException("Invalid mode: " + mode);
        }
!!!1781403.java!!!	init(in opmode : int, inout key : Key, inout params : AlgorithmParameterSpec) : void
        if (secureRandom == null) {
            secureRandom = new SecureRandom();
        }
        init(opmode, key, params, secureRandom);
!!!1781531.java!!!	init(in opmode : int, inout key : Key, inout params : AlgorithmParameterSpec, inout random : SecureRandom) : void
        checkMode(opmode);
        //        FIXME InvalidKeyException
        //        if keysize exceeds the maximum allowable keysize
        //        (jurisdiction policy files)
        //        FIXME InvalidAlgorithmParameterException
        //        cryptographic strength exceed the legal limits
        //        (jurisdiction policy files)
        spiImpl.engineInit(opmode, key, params, random);
        mode = opmode;
!!!1781659.java!!!	init(in opmode : int, inout key : Key, inout params : AlgorithmParameters) : void
        if (secureRandom == null) {
            secureRandom = new SecureRandom();
        }
        init(opmode, key, params, secureRandom);
!!!1781787.java!!!	init(in opmode : int, inout key : Key, inout params : AlgorithmParameters, inout random : SecureRandom) : void
        checkMode(opmode);
        //        FIXME InvalidKeyException
        //        if keysize exceeds the maximum allowable keysize
        //        (jurisdiction policy files)
        //        FIXME InvalidAlgorithmParameterException
        //        cryptographic strength exceed the legal limits
        //        (jurisdiction policy files)
        spiImpl.engineInit(opmode, key, params, random);
        mode = opmode;
!!!1781915.java!!!	init(in opmode : int, inout certificate : Certificate) : void
        if (secureRandom == null) {
            secureRandom = new SecureRandom();
        }
        init(opmode, certificate, secureRandom);
!!!1782043.java!!!	init(in opmode : int, inout certificate : Certificate, inout random : SecureRandom) : void
        checkMode(opmode);
        if (certificate instanceof X509Certificate) {
            Set<String> ce = ((X509Certificate) certificate).getCriticalExtensionOIDs();
            boolean critical = false;
            if (ce != null && !ce.isEmpty()) {
                for (String oid : ce) {
                    if (oid.equals("2.5.29.15")) { // KeyUsage OID = 2.5.29.15
                        critical = true;
                        break;
                    }
                }
                if (critical) {
                    boolean[] keyUsage = ((X509Certificate) certificate).getKeyUsage();
                    // As specified in RFC 3280:
                    //   Internet X.509 Public Key Infrastructure
                    //   Certificate and Certificate Revocation List (CRL) Profile.
                    // Section 4.2.1.3  Key Usage
                    // http://www.ietf.org/rfc/rfc3280.txt
                    //
                    // KeyUsage ::= BIT STRING {digitalSignature (0),
                    //                          nonRepudiation   (1),
                    //                          keyEncipherment  (2),
                    //                          dataEncipherment (3),
                    //                          keyAgreement     (4),
                    //                          keyCertSign      (5),
                    //                          cRLSign          (6),
                    //                          encipherOnly     (7),
                    //                          decipherOnly     (8) }
                    if (keyUsage != null) {
                        if (opmode == ENCRYPT_MODE && !keyUsage[3]) {
                            throw new InvalidKeyException("The public key in the certificate "
                                                          + "cannot be used for ENCRYPT_MODE");
                        } else if (opmode == WRAP_MODE && !keyUsage[2]) {
                            throw new InvalidKeyException("The public key in the certificate "
                                                          + "cannot be used for WRAP_MODE");
                        }
                    }
                }
            }
        }
        //        FIXME InvalidKeyException
        //        if keysize exceeds the maximum allowable keysize
        //        (jurisdiction policy files)
        spiImpl.engineInit(opmode, certificate.getPublicKey(), random);
        mode = opmode;
!!!1782171.java!!!	update(inout input : byte) : byte
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        if (input == null) {
            throw new IllegalArgumentException("input == null");
        }
        if (input.length == 0) {
            return null;
        }
        return spiImpl.engineUpdate(input, 0, input.length);
!!!1782299.java!!!	update(inout input : byte, in inputOffset : int, in inputLen : int) : byte
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        if (input == null) {
            throw new IllegalArgumentException("input == null");
        }
        checkInputOffsetAndCount(input.length, inputOffset, inputLen);
        if (input.length == 0) {
            return null;
        }
        return spiImpl.engineUpdate(input, inputOffset, inputLen);
!!!1782427.java!!!	checkInputOffsetAndCount(in inputArrayLength : int, in inputOffset : int, in inputLen : int) : void
        if ((inputOffset | inputLen) < 0
                || inputOffset > inputArrayLength
                || inputArrayLength - inputOffset < inputLen) {
            throw new IllegalArgumentException("input.length=" + inputArrayLength
                                               + "; inputOffset=" + inputOffset
                                               + "; inputLen=" + inputLen);
        }
!!!1782555.java!!!	update(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte) : int
        return update(input, inputOffset, inputLen, output, 0);
!!!1782683.java!!!	update(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte, in outputOffset : int) : int
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        if (input == null) {
            throw new IllegalArgumentException("input == null");
        }
        if (output == null) {
            throw new IllegalArgumentException("output == null");
        }
        if (outputOffset < 0) {
            throw new IllegalArgumentException("outputOffset < 0. outputOffset=" + outputOffset);
        }
        checkInputOffsetAndCount(input.length, inputOffset, inputLen);
        if (input.length == 0) {
            return 0;
        }
        return spiImpl.engineUpdate(input, inputOffset, inputLen, output,
                outputOffset);
!!!1782811.java!!!	update(inout input : ByteBuffer, inout output : ByteBuffer) : int
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        if (input == output) {
            throw new IllegalArgumentException("input == output");
        }
        return spiImpl.engineUpdate(input, output);
!!!1782939.java!!!	doFinal() : byte
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        return spiImpl.engineDoFinal(null, 0, 0);
!!!1783067.java!!!	doFinal(inout output : byte, in outputOffset : int) : int
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        if (outputOffset < 0) {
            throw new IllegalArgumentException("outputOffset < 0. outputOffset=" + outputOffset);
        }
        return spiImpl.engineDoFinal(null, 0, 0, output, outputOffset);
!!!1783195.java!!!	doFinal(inout input : byte) : byte
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        return spiImpl.engineDoFinal(input, 0, input.length);
!!!1783323.java!!!	doFinal(inout input : byte, in inputOffset : int, in inputLen : int) : byte
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        checkInputOffsetAndCount(input.length, inputOffset, inputLen);
        return spiImpl.engineDoFinal(input, inputOffset, inputLen);
!!!1783451.java!!!	doFinal(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte) : int
        return doFinal(input, inputOffset, inputLen, output, 0);
!!!1783579.java!!!	doFinal(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte, in outputOffset : int) : int
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        checkInputOffsetAndCount(input.length, inputOffset, inputLen);
        return spiImpl.engineDoFinal(input, inputOffset, inputLen, output,
                outputOffset);
!!!1783707.java!!!	doFinal(inout input : ByteBuffer, inout output : ByteBuffer) : int
        if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
            throw new IllegalStateException();
        }
        if (input == output) {
            throw new IllegalArgumentException("input == output");
        }
        return spiImpl.engineDoFinal(input, output);
!!!1783835.java!!!	wrap(inout key : Key) : byte
        if (mode != WRAP_MODE) {
            throw new IllegalStateException();
        }
        return spiImpl.engineWrap(key);
!!!1783963.java!!!	unwrap(inout wrappedKey : byte, inout wrappedKeyAlgorithm : String, in wrappedKeyType : int) : Key
        if (mode != UNWRAP_MODE) {
            throw new IllegalStateException();
        }
        return spiImpl.engineUnwrap(wrappedKey, wrappedKeyAlgorithm,
                wrappedKeyType);
!!!1784091.java!!!	getMaxAllowedKeyLength(inout transformation : String) : int
        if (transformation == null) {
            throw new NullPointerException("transformation == null");
        }
        checkTransformation(transformation);
        //FIXME jurisdiction policy files
        return Integer.MAX_VALUE;
!!!1784219.java!!!	getMaxAllowedParameterSpec(inout transformation : String) : AlgorithmParameterSpec
        if (transformation == null) {
            throw new NullPointerException("transformation == null");
        }
        checkTransformation(transformation);
        //FIXME jurisdiction policy files
        return null;
