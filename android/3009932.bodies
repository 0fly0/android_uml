class CecUtils
!!!12286988.java!!!	setCecSrvConnectionListener(inout listener : CecSrvConnectionListener) : void
        mCecListener = listener;
!!!12287116.java!!!	getCecSrvConnectionListener() : CecSrvConnectionListener
        return mCecListener;
!!!12287244.java!!!	getITvCecService() : ITvCecService
        return mITvCecService;
!!!12287372.java!!!	setITvCecService(inout cecService : ITvCecService) : void
        mITvCecService = cecService;
!!!12287500.java!!!	connectCecService() : void
        CecManager cecManager = Wrapper.getWrapperInstance().getCecManager();
        Log.d(TAG, "connectCecService mCecManager=" + cecManager + "  mCecListener="
                + mCecListener);
        if (cecManager != null && mCecListener != null) {
            cecManager.registerCecSrvConnectionListener(mCecListener);
            cecManager.connect();
        }
!!!12287628.java!!!	unregisterCecServiceListener() : void
        CecManager cecManager = Wrapper.getWrapperInstance().getCecManager();
        if (cecManager != null && mCecListener != null) {
            cecManager.unregisterCecSrvConnectionListener(mCecListener);
        }
!!!12287756.java!!!	disconnectCecService() : void
        CecManager cecManager = Wrapper.getWrapperInstance().getCecManager();
        if (cecManager != null) {
            cecManager.disconnect();
        }
!!!12287884.java!!!	getConnectedDevicesAtPort(in portNumber : int) : CECDevInfo
        try {
            List<CECDevInfo> devList = new ArrayList<CECDevInfo>();
            if (portNumber >= FIRST_HDMI_PORT && portNumber <= LAST_HDMI_PORT) {
                List<CECDevInfo> cecList = mITvCecService.getListOfConnectedCECDevices();
                if (cecList != null && cecList.size() > 0) {
                    CECDevInfo info = null;
                    for (int i = 0; i < cecList.size(); i++) {
                        info = cecList.get(i);
                        int port = info.getPortNumber();
                        if (port == portNumber) {
                            devList.add(info);
                        }
                    }

                    return devList;
                }

            }
        } catch (Exception e) {
            Log.i(TAG, "Exception in function getConnectedDevicesAtPort " + e);
        }
        return null;
!!!12288012.java!!!	shouldControlConnectedAudioSystemVolume() : int
        int[] audevinfo = {
                0, -1, -1
        };
        int port = -1;
        int logaddr = -1;

        Wrapper wrapper = Wrapper.getWrapperInstance();

        if (wrapper.getHdmiCec() == 0 || wrapper.getSystemAudioControl() == 0
                || mITvCecService == null) {
            return audevinfo;
        }

        /** SAC user setting is on, but real status is off  */
        try {
            if (!mITvCecService.isSACEnabled())
                return audevinfo;
        } catch(RemoteException ex) {
            ex.printStackTrace();
            return audevinfo;
        }

        try {
            List<CECDevInfo> cecList = mITvCecService.getListOfConnectedCECDevices();
            if (cecList != null && cecList.size() > 0) {
                CECDevInfo info = null;
                for (int i = 0; i < cecList.size(); i++) {
                    info = cecList.get(i);
                    if (info.getDeviceType() == DeviceType.AudioDevice) {
                        port = info.getPortNumber();
                        logaddr = info.getDeviceAddress();
                        break;
                    }
                }

            }

        } catch (RemoteException exp) {
            exp.printStackTrace();
        }

        if (logaddr != -1) {
            int curport = getCurrentHdmiInputPort();
            if ((port == HDMI_ARC_PORT) || (port == curport)) {
                audevinfo[0] = 1;
                audevinfo[1] = logaddr;
                audevinfo[2] = port;
            } else {
                Log.d(TAG, "Not match the SAC volume control conditions"
                        + ",audio device port:" + port + ",curport:" + curport);
            }
        } else {
            Log.d(TAG, "No audio device");
        }

        return audevinfo;
!!!12288140.java!!!	shouldKeyPassthrough(inout context : Context) : int
        int activeDev = -1;
        int firstPlaybackDev = -1;
        CECDevInfo info = null;
        List<CECDevInfo> cecList;

        if (context == null || Wrapper.getWrapperInstance().getHdmiCec() == 0) {
            return activeDev;
        }

        // check if current source is HDMI source
        int port = getCurrentHdmiInputPort();
        if (port < FIRST_HDMI_PORT || port > LAST_HDMI_PORT) {
            return activeDev;
        }

        cecList = getConnectedDevicesAtPort(port);
        if (cecList != null && cecList.size() > 0) {
            if (mITvCecService != null) {
                try {
                    activeDev = mITvCecService.getActiveSourceAddress();
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }
            /**
             * Check if the active source is connecting at current port, if yes
             * return it,if no find out the first playback device,
             */
            for (int i = 0; i < cecList.size(); i++) {
                info = cecList.get(i);
                int addr = info.getDeviceAddress();
                if (addr == activeDev) {
                    firstPlaybackDev = activeDev;
                    break;
                } else if ((info.getDeviceType() == DeviceType.PLAYBACK_DEVICE)
                        && (firstPlaybackDev == -1)) {
                    firstPlaybackDev = info.getDeviceAddress();
                }
            }

        }
        return firstPlaybackDev;
!!!12288268.java!!!	getCECActionEventOrdinal(inout event : KeyEvent) : String
        int keycode = event.getKeyCode();
        String codeString = cecKeyCodeMapping.get(keycode);
        if (codeString == null)
            codeString = "INVALID";
        Log.d(TAG, "getCECActionEventOrdinal=" + codeString);
        return codeString;
!!!12288396.java!!!	getCurrentHdmiInputPort() : int
        int port = 0;
        int curSrc = Wrapper.getWrapperInstance().getCurrentSource();
        if (curSrc == TvSource.TV_SourceHdmi0.value()) {
            port = 1;
        } else if (curSrc == TvSource.TV_SourceHdmi1.value()) {
            port = 2;
        } else if (curSrc == TvSource.TV_SourceHdmi2.value()) {
            port = 3;
        } else if (curSrc == TvSource.TV_SourceHdmi3.value()) {
            port = 4;
        }
        return port;
!!!12288524.java!!!	getPhyaddrByPort(in port : int) : int
        switch (port) {
            case 1:
                return 0x1000;
            case 2:
                return 0x2000;
            case 3:
                return 0x3000;
            case 4:
                return 0x4000;
            default:
                return 0;
        }
!!!12288652.java!!!	getKeyPressMode(inout event : ActionEvent) : int
        State state = event.getState();
        int keyPressMode = KeyPressMode.INVALID_STATE;
        if (state == State.DOWN) {
            keyPressMode = KeyPressMode.KEY_PRESSED;
        } else if (state == State.UP) {
            keyPressMode = KeyPressMode.KEY_RELEASED;
        }
        return keyPressMode;
!!!12288780.java!!!	numberOfCecDeviceConnected(in port : int) : int
        List<CECDevInfo> list = null;
        if (port >= CecUtils.FIRST_HDMI_PORT && port <= CecUtils.LAST_HDMI_PORT) {
            list = CecUtils.getConnectedDevicesAtPort(port);
        }
        if (list != null) {
            return list.size();
        }
        return 0;
!!!12288908.java!!!	getHdmiPortbyDeviceId(in deviceId : String) : int
        if (deviceId.equals(PairingDevice.HDMI1_DEVICE_ID)) {
            return PairingDevice.getPortId(deviceId);
        } else if (deviceId.equals(PairingDevice.HDMI2_DEVICE_ID)) {
            return PairingDevice.getPortId(deviceId);
        } else if (deviceId.equals(PairingDevice.HDMI3_DEVICE_ID)) {
            return PairingDevice.getPortId(deviceId);
        } else if (deviceId.equals(PairingDevice.HDMI4_DEVICE_ID)) {
            return PairingDevice.getPortId(deviceId);
        }
        // Non - HDMI port
        return 0;
!!!12289036.java!!!	switchFromHdmiToNonHdmi(in deviceId : String) : boolean

        int srctype = Wrapper.getWrapperInstance().getCurrentSourceType();
        if (srctype == TvSourceType.TV_SOURCE_TypeHdmi.value()) {
            if (deviceId.equals(PairingDevice.COMPONENT_DEVICE_ID)
                    || deviceId.equals(PairingDevice.COMPOSITE_DEVICE_ID)
                    || deviceId.equals(PairingDevice.TUNER_DEVICE_ID)
                    || deviceId.equals(PairingDevice.VGA_DEVICE_ID)) {
                return true;
            }
        }
        return false;
!!!12289164.java!!!	getDeviceIdByHdmiPort(in portNumber : int) : String
        Log.i(TAG, " @@@@ getDeviceId method  @@@@@ ----- PortNumber == " + portNumber);

        if (portNumber == PairingDevice.getPortId(PairingDevice.HDMI1_DEVICE_ID)) {
            return PairingDevice.HDMI1_DEVICE_ID;
        } else if (portNumber == PairingDevice.getPortId(PairingDevice.HDMI2_DEVICE_ID)) {
            return PairingDevice.HDMI2_DEVICE_ID;
        } else if (portNumber == PairingDevice.getPortId(PairingDevice.HDMI3_DEVICE_ID)) {
            return PairingDevice.HDMI3_DEVICE_ID;
        } else if (portNumber == PairingDevice.getPortId(PairingDevice.HDMI4_DEVICE_ID)) {
            return PairingDevice.HDMI4_DEVICE_ID;
        } else {
            return null;
        }
!!!12289292.java!!!	isSupportedByKeyPassthrough(inout event : ActionEvent) : boolean
        Action action = event.getAction();
        if (Action.UP.equals(action) || Action.DOWN.equals(action)
                || Action.LEFT.equals(action) || Action.RIGHT.equals(action)
                || Action.SELECT.equals(action) || Action.PLAY.equals(action)
                || Action.PAUSE.equals(action) || Action.STOP.equals(action)
                || Action.REWIND.equals(action) || Action.FAST_FORWARD.equals(action)
                || Action.PLAY_PAUSE.equals(action)
                || Action.SKIP_FORWARD.equals(action)
                || Action.SKIP_BACK.equals(action)) {

            return true;
        }
        return false;
