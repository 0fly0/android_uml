format 74
"beans" // _unknown::java::beans
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/beans/"
  java_package "java.beans"
  classview 128411 "beans"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 130331 "IndexedPropertyChangeEvent"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A type of {@link PropertyChangeEvent} that indicates that an indexed property
has changed."
      classrelation 138011 // <generalisation>
	relation 138011 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 138011 // <generalisation>
	  b parent class_ref 130459 // PropertyChangeEvent
      end

      attribute 135067 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -320227448495806870L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 135195 "index"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 135323 "IndexedPropertyChangeEvent"
	public explicit_return_type ""
	nparams 5
	  param inout name "source" type class_ref 3401484 // Object
	  param inout name "propertyName" type class_ref 3399692 // String
	  param inout name "oldValue" type class_ref 3401484 // Object
	  param inout name "newValue" type class_ref 3401484 // Object
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new property changed event with an indication of the property
index.

@param source
           the changed bean.
@param propertyName
           the changed property, or <code>null</code> to indicate an
           unspecified set of the properties has changed.
@param oldValue
           the previous value of the property, or <code>null</code> if
           the <code>propertyName</code> is <code>null</code> or the
           previous value is unknown.
@param newValue
           the new value of the property, or <code>null</code> if the
           <code>propertyName</code> is <code>null</code> or the new
           value is unknown..
@param index
           the index of the property."
      end

      operation 135451 "getIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the property that was changed in this event."
      end
    end

    class 130459 "PropertyChangeEvent"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An event that indicates that a constraint or a boundary of a property has
changed."
      classrelation 137371 // <generalisation>
	relation 137371 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 137371 // <generalisation>
	  b parent class_ref 130587 // EventObject
      end

      attribute 134939 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7042693688939648123L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 137499 // propertyName (<unidirectional association>)
	relation 137499 --->
	  a role_name "propertyName" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 137499 // propertyName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 137627 // oldValue (<unidirectional association>)
	relation 137627 --->
	  a role_name "oldValue" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 137627 // oldValue (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 137755 // newValue (<unidirectional association>)
	relation 137755 --->
	  a role_name "newValue" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 137755 // newValue (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 137883 // propagationId (<unidirectional association>)
	relation 137883 --->
	  a role_name "propagationId" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 137883 // propagationId (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      operation 134555 "PropertyChangeEvent"
	public explicit_return_type ""
	nparams 4
	  param inout name "source" type class_ref 3401484 // Object
	  param inout name "propertyName" type class_ref 3399692 // String
	  param inout name "oldValue" type class_ref 3401484 // Object
	  param inout name "newValue" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The constructor used to create a new {@code PropertyChangeEvent}.

@param source
           the changed bean.
@param propertyName
           the changed property, or <code>null</code> to indicate an
           unspecified set of the properties has changed.
@param oldValue
           the previous value of the property, or <code>null</code> if
           the <code>propertyName</code> is <code>null</code> or the
           previous value is unknown.
@param newValue
           the new value of the property, or <code>null</code> if the
           <code>propertyName</code> is <code>null</code> or the new
           value is unknown."
      end

      operation 134683 "getPropertyName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the property that has changed. If an unspecified set
of properties has changed it returns null.

@return the name of the property that has changed, or null."
      end

      operation 134811 "setPropagationId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "propagationId" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the propagationId object.

@see #getPropagationId()"
      end

      operation 134939 "getPropagationId"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the propagationId object. This is reserved for future use. Beans
1.0 demands that a listener receiving this property and then sending its
own PropertyChangeEvent sets the received propagationId on the new
PropertyChangeEvent's propagationId field.

@return the propagationId object."
      end

      operation 135067 "getOldValue"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the old value that the property had. If the old value is unknown
this method returns null.

@return the old property value or null."
      end

      operation 135195 "getNewValue"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the new value that the property now has. If the new value is
unknown this method returns null.

@return the old property value or null."
      end
    end

    class 130715 "PropertyChangeListener"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A PropertyChangeListener can subscribe with a event source. Whenever that
source raises a PropertyChangeEvent this listener will get notified."
      classrelation 138139 // <generalisation>
	relation 138139 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 138139 // <generalisation>
	  b parent class_ref 130843 // EventListener
      end

      operation 135579 "propertyChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 130459 // PropertyChangeEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The source bean calls this method when an event is raised.

@param event
           the {@link PropertyChangeEvent} object which contains the name
           and the old and new value of the property that has changed."
      end
    end

    class 130971 "PropertyChangeListenerProxy"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The implementation of this listener proxy just delegates the received events
to its listener."
      classrelation 138523 // <generalisation>
	relation 138523 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 138523 // <generalisation>
	  b parent class_ref 131099 // EventListenerProxy
      end

      classrelation 138651 // <realization>
	relation 138651 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 138651 // <realization>
	  b parent class_ref 130715 // PropertyChangeListener
      end

      classrelation 138779 // propertyName (<unidirectional association>)
	relation 138779 --->
	  a role_name "propertyName" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 138779 // propertyName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 135963 "PropertyChangeListenerProxy"
	public explicit_return_type ""
	nparams 2
	  param inout name "propertyName" type class_ref 3399692 // String
	  param inout name "listener" type class_ref 130715 // PropertyChangeListener
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new listener proxy that associates a listener with a property
name.

@param propertyName
           the name of the associated property.
@param listener
           the listener to delegate incoming events to."
      end

      operation 136091 "getPropertyName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the property associated with this listener proxy.

@return the name of the associated property."
      end

      operation 136219 "propertyChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 130459 // PropertyChangeEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 131227 "PropertyChangeSupport"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Manages a list of listeners to be notified when a property changes. Listeners
subscribe to be notified of all property changes, or of changes to a single
named property.

<p>This class is thread safe. No locking is necessary when subscribing or
unsubscribing listeners, or when publishing events. Callers should be careful
when publishing events because listeners may not be thread safe."
      classrelation 138907 // <realization>
	relation 138907 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 138907 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 135323 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6401253773779951803l"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 139035 // serialPersistentFields (<unidirectional association>)
	relation 139035 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"source\", Object.class),
        new ObjectStreamField(\"children\", Object.class),
        new ObjectStreamField(\"propertyChangeSupportSerializedDataVersion\", int.class),
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 139035 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 131355 // ObjectStreamField
      end

      classrelation 139163 // sourceBean (<unidirectional association>)
	relation 139163 --->
	  a role_name "sourceBean" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 139163 // sourceBean (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 139291 // listeners (<unidirectional association>)
	relation 139291 --->
	  a role_name "listeners" init_value " new CopyOnWriteArrayList<PropertyChangeListener>()" private
	    comment "
All listeners, including PropertyChangeListenerProxy listeners that are
only be notified when the assigned property is changed. This list may be
modified concurrently!

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PropertyChangeListener> ${name}${value};
"
	    classrelation_ref 139291 // listeners (<unidirectional association>)
	  b parent class_ref 131483 // List
      end

      operation 136347 "PropertyChangeSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "sourceBean" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance that uses the source bean as source for any event.

@param sourceBean
           the bean used as source for all events."
      end

      operation 136475 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 3399692 // String
	  param inout name "oldValue" type class_ref 3401484 // Object
	  param inout name "newValue" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fires a {@link PropertyChangeEvent} with the given name, old value and
new value. As source the bean used to initialize this instance is used.
If the old value and the new value are not null and equal the event will
not be fired.

@param propertyName
           the name of the property
@param oldValue
           the old value of the property
@param newValue
           the new value of the property"
      end

      operation 136603 "fireIndexedPropertyChange"
	public explicit_return_type "void"
	nparams 4
	  param inout name "propertyName" type class_ref 3399692 // String
	  param in name "index" explicit_type "int"
	  param inout name "oldValue" type class_ref 3401484 // Object
	  param inout name "newValue" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fires an {@link IndexedPropertyChangeEvent} with the given name, old
value, new value and index. As source the bean used to initialize this
instance is used. If the old value and the new value are not null and
equal the event will not be fired.

@param propertyName
           the name of the property
@param index
           the index
@param oldValue
           the old value of the property
@param newValue
           the new value of the property"
      end

      operation 136731 "removePropertyChangeListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "propertyName" type class_ref 3399692 // String
	  param inout name "listener" type class_ref 130715 // PropertyChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unsubscribes {@code listener} from change notifications for the property
named {@code propertyName}. If multiple subscriptions exist for {@code
listener}, it will receive one fewer notifications when the property
changes. If the property name or listener is null or not subscribed, this
method silently does nothing."
      end

      operation 136859 "equals"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "aName" type class_ref 3399692 // String
	  param inout name "a" type class_ref 130843 // EventListener
	  param inout name "b" type class_ref 130843 // EventListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if two chains of PropertyChangeListenerProxies have the same
names in the same order and bottom out in the same event listener. This
method's signature is asymmetric to avoid allocating a proxy: if
non-null, {@code aName} represents the first property name and {@code a}
is its listener."
      end

      operation 136987 "addPropertyChangeListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "propertyName" type class_ref 3399692 // String
	  param inout name "listener" type class_ref 130715 // PropertyChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subscribes {@code listener} to change notifications for the property
named {@code propertyName}. If the listener is already subscribed, it
will receive an additional notification when the property changes. If the
property name or listener is null, this method silently does nothing."
      end

      operation 137115 "getPropertyChangeListeners"
	public return_type class_ref 130715 // PropertyChangeListener
	nparams 1
	  param inout name "propertyName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subscribers to be notified when {@code propertyName} changes.
This includes both listeners subscribed to all property changes and
listeners subscribed to the named property only."
      end

      operation 137243 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 3399692 // String
	  param inout name "oldValue" explicit_type "boolean"
	  param inout name "newValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fires a property change of a boolean property with the given name. If the
old value and the new value are not null and equal the event will not be
fired.

@param propertyName
           the property name
@param oldValue
           the old value
@param newValue
           the new value"
      end

      operation 137371 "fireIndexedPropertyChange"
	public explicit_return_type "void"
	nparams 4
	  param inout name "propertyName" type class_ref 3399692 // String
	  param in name "index" explicit_type "int"
	  param inout name "oldValue" explicit_type "boolean"
	  param inout name "newValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fires a property change of a boolean property with the given name. If the
old value and the new value are not null and equal the event will not be
fired.

@param propertyName
           the property name
@param index
           the index of the changed property
@param oldValue
           the old value
@param newValue
           the new value"
      end

      operation 137499 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 3399692 // String
	  param in name "oldValue" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fires a property change of an integer property with the given name. If
the old value and the new value are not null and equal the event will not
be fired.

@param propertyName
           the property name
@param oldValue
           the old value
@param newValue
           the new value"
      end

      operation 137627 "fireIndexedPropertyChange"
	public explicit_return_type "void"
	nparams 4
	  param inout name "propertyName" type class_ref 3399692 // String
	  param in name "index" explicit_type "int"
	  param in name "oldValue" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fires a property change of an integer property with the given name. If
the old value and the new value are not null and equal the event will not
be fired.

@param propertyName
           the property name
@param index
           the index of the changed property
@param oldValue
           the old value
@param newValue
           the new value"
      end

      operation 137755 "hasListeners"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "propertyName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if there are listeners registered to the property with the
given name.

@param propertyName
           the name of the property
@return true if there are listeners registered to that property, false
        otherwise."
      end

      operation 137883 "removePropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 130715 // PropertyChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unsubscribes {@code listener} from change notifications for all
properties. If the listener has multiple subscriptions, it will receive
one fewer notification when properties change. If the property name or
listener is null or not subscribed, this method silently does nothing."
      end

      operation 138011 "addPropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 130715 // PropertyChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subscribes {@code listener} to change notifications for all properties.
If the listener is already subscribed, it will receive an additional
notification. If the listener is null, this method silently does nothing."
      end

      operation 138139 "getPropertyChangeListeners"
	public return_type class_ref 130715 // PropertyChangeListener
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all subscribers. This includes both listeners subscribed to all
property changes and listeners subscribed to a single property."
      end

      operation 138267 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 138395 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 138523 "firePropertyChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 130459 // PropertyChangeEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Publishes a property change event to all listeners of that property. If
the event's old and new values are equal (but non-null), no event will be
published."
      end
    end
  end

  deploymentview 128539 "beans"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 128923 "PropertyChangeEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.EventObject;
${definition}"
      associated_classes
	class_ref 130459 // PropertyChangeEvent
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 129051 "IndexedPropertyChangeEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 130331 // IndexedPropertyChangeEvent
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 129307 "PropertyChangeListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_classes
	class_ref 130715 // PropertyChangeListener
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 129563 "PropertyChangeListenerProxy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.EventListenerProxy;
${definition}"
      associated_classes
	class_ref 130971 // PropertyChangeListenerProxy
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 129691 "PropertyChangeSupport"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.EventListener;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CopyOnWriteArrayList;
import libcore.util.Objects;
${definition}"
      associated_classes
	class_ref 131227 // PropertyChangeSupport
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end
  end
end
