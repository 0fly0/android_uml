class ModeCallback
!!!14019084.java!!!	ModeCallback(inout context : Context)
            mContext = context;
            mDataCount = mAdapter.getCount();
!!!14019212.java!!!	onCreateActionMode(inout mode : ActionMode, inout menu : Menu) : boolean
            final MenuInflater inflater = getMenuInflater();
            inflater.inflate(R.menu.misc_files_menu, menu);
            return true;
!!!14019340.java!!!	onPrepareActionMode(inout mode : ActionMode, inout menu : Menu) : boolean
            return true;
!!!14019468.java!!!	onActionItemClicked(inout mode : ActionMode, inout item : MenuItem) : boolean
            ListView lv = getListView();
            switch (item.getItemId()) {
            case R.id.action_delete:
                // delete the files selected
                SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
                int checkedCount = getListView().getCheckedItemCount();
                if (checkedCount > mDataCount) {
                    throw new IllegalStateException("checked item counts do not match. " +
                            "checkedCount: " + checkedCount + ", dataSize: " + mDataCount);
                }
                if (mDataCount > 0) {
                    ArrayList<Object> toRemove = new ArrayList<Object>();
                    for (int i = 0; i < mDataCount; i++) {
                        if (!checkedItems.get(i)) {
                            //item not selected
                            continue;
                        }
                        if (StorageMeasurement.LOGV) {
                            Log.i(TAG, "deleting: " + mAdapter.getItem(i));
                        }
                        // delete the file
                        File file = new File(mAdapter.getItem(i).mFileName);
                        if (file.isDirectory()) {
                            deleteDir(file);
                        } else {
                            file.delete();                            
                        }
                        toRemove.add(mAdapter.getItem(i));
                    }
                    mAdapter.removeAll(toRemove);
                    mAdapter.notifyDataSetChanged();
                    mDataCount = mAdapter.getCount();
                }
                mode.finish();
                break;

            case R.id.action_select_all:
                // check ALL items
                for (int i = 0; i < mDataCount; i++) {
                    lv.setItemChecked(i, true);
                }
                // update the title and subtitle with number selected and numberBytes selected
                onItemCheckedStateChanged(mode, 1, 0, true);
                break;
            }
            return true;
!!!14019596.java!!!	deleteDir(inout dir : File) : boolean
            if (dir.isDirectory()) {
                String[] children = dir.list();
                for (int i=0; i < children.length; i++) {
                    boolean success = deleteDir(new File(dir, children[i]));
                    if (!success) {
                        return false;
                    }
                }
            }
            // The directory is now empty so delete it
            return dir.delete();
!!!14019724.java!!!	onDestroyActionMode(inout mode : ActionMode) : void
            // This block intentionally left blank
!!!14019852.java!!!	onItemCheckedStateChanged(inout mode : ActionMode, in position : int, in id : long, inout checked : boolean) : void
            ListView lv = getListView();
            int numChecked = lv.getCheckedItemCount();
            mode.setTitle(String.format(mNumSelectedFormat, numChecked, mAdapter.getCount()));

            // total the sizes of all items selected so far
            SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
            long selectedDataSize = 0;
            if (numChecked > 0) {
                for (int i = 0; i < mDataCount; i++) {
                    if (checkedItems.get(i)) {
                        // item is checked
                        selectedDataSize += mAdapter.getItem(i).mSize;
                    }
                }
            }
            mode.setSubtitle(String.format(mNumBytesSelectedFormat,
                    Formatter.formatFileSize(mContext, selectedDataSize),
                    Formatter.formatFileSize(mContext, mAdapter.getDataSize())));
