class FileInputStream
!!!218523.java!!!	FileInputStream(inout file : File)
        if (file == null) {
            throw new NullPointerException("file == null");
        }
        this.fd = IoBridge.open(file.getAbsolutePath(), O_RDONLY);
        this.shouldClose = true;
        guard.open("close");
!!!218651.java!!!	FileInputStream(inout fd : FileDescriptor)
        if (fd == null) {
            throw new NullPointerException("fd == null");
        }
        this.fd = fd;
        this.shouldClose = false;
        // Note that we do not call guard.open here because the
        // FileDescriptor is not owned by the stream.
!!!218779.java!!!	FileInputStream(inout path : String)
        this(new File(path));
!!!218907.java!!!	available() : int
        return IoBridge.available(fd);
!!!219035.java!!!	close() : void
        guard.close();
        synchronized (this) {
            if (channel != null) {
                channel.close();
            }
            if (shouldClose) {
                IoUtils.close(fd);
            } else {
                // An owned fd has been invalidated by IoUtils.close, but
                // we need to explicitly stop using an unowned fd (http://b/4361076).
                fd = new FileDescriptor();
            }
        }
!!!219163.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
            close();
        } finally {
            try {
                super.finalize();
            } catch (Throwable t) {
                // for consistency with the RI, we must override Object.finalize() to
                // remove the 'throws Throwable' clause.
                throw new AssertionError(t);
            }
        }
!!!219291.java!!!	getChannel() : FileChannel
        synchronized (this) {
            if (channel == null) {
                channel = NioUtils.newFileChannel(this, fd, O_RDONLY);
            }
            return channel;
        }
!!!219419.java!!!	getFD() : FileDescriptor
        return fd;
!!!219547.java!!!	read() : int
        return Streams.readSingleByte(this);
!!!219675.java!!!	read(inout buffer : byte, in byteOffset : int, in byteCount : int) : int
        return IoBridge.read(fd, buffer, byteOffset, byteCount);
!!!219803.java!!!	skip(in byteCount : long) : long
        if (byteCount < 0) {
            throw new IOException("byteCount < 0: " + byteCount);
        }
        try {
            // Try lseek(2). That returns the new offset, but we'll throw an
            // exception if it couldn't perform exactly the seek we asked for.
            Libcore.os.lseek(fd, byteCount, SEEK_CUR);
            return byteCount;
        } catch (ErrnoException errnoException) {
            if (errnoException.errno == ESPIPE) {
                // You can't seek on a pipe, so fall back to the superclass' implementation.
                return super.skip(byteCount);
            }
            throw errnoException.rethrowAsIOException();
        }
