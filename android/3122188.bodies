class JSONObject
!!!13141900.java!!!	JSONObject()
        this.map = new HashMap();
!!!13142028.java!!!	JSONObject(inout jo : JSONObject, inout names : String)
        this();
        for (int i = 0; i < names.length; i += 1) {
            putOnce(names[i], jo.opt(names[i]));
        }
!!!13142156.java!!!	JSONObject(inout x : JSONTokener)
        this();
        char c;
        String key;

        if (x.nextClean() != '{') {
            throw x.syntaxError("A JSONObject text must begin with '{'");
        }
        for (;;) {
            c = x.nextClean();
            switch (c) {
            case 0:
                throw x.syntaxError("A JSONObject text must end with '}'");
            case '}':
                return;
            default:
                x.back();
                key = x.nextValue().toString();
            }

            /*
             * The key is followed by ':'. We will also tolerate '=' or '=>'.
             */

            c = x.nextClean();
            if (c == '=') {
                if (x.next() != '>') {
                    x.back();
                }
            } else if (c != ':') {
                throw x.syntaxError("Expected a ':' after a key");
            }
            putOnce(key, x.nextValue());

            /*
             * Pairs are separated by ','. We will also tolerate ';'.
             */

            switch (x.nextClean()) {
            case ';':
            case ',':
                if (x.nextClean() == '}') {
                    return;
                }
                x.back();
                break;
            case '}':
                return;
            default:
                throw x.syntaxError("Expected a ',' or '}'");
            }
        }
!!!13142284.java!!!	JSONObject(inout map : Map)
        this.map = (map == null) ? new HashMap() : map;
!!!13142412.java!!!	JSONObject(inout map : Map, inout includeSuperClass : boolean)
        this.map = new HashMap();
        if (map != null) {
            Iterator i = map.entrySet().iterator();
            while (i.hasNext()) {
                Map.Entry e = (Map.Entry)i.next();
                if (isStandardProperty(e.getValue().getClass())) {
                    this.map.put(e.getKey(), e.getValue());
                } else {
                    this.map.put(e.getKey(), new JSONObject(e.getValue(),
                            includeSuperClass));
                }
            }
        }
!!!13142540.java!!!	JSONObject(inout bean : Object)
        this();
        populateInternalMap(bean, false);
!!!13142668.java!!!	JSONObject(inout bean : Object, inout includeSuperClass : boolean)
        this();
        populateInternalMap(bean, includeSuperClass);
!!!13142796.java!!!	populateInternalMap(inout bean : Object, inout includeSuperClass : boolean) : void
        Class klass = bean.getClass();

        /* If klass.getSuperClass is System class then force includeSuperClass to false. */

        if (klass.getClassLoader() == null) {
            includeSuperClass = false;
        }

        Method[] methods = (includeSuperClass) ?
                klass.getMethods() : klass.getDeclaredMethods();
        for (int i = 0; i < methods.length; i += 1) {
            try {
                Method method = methods[i];
                if (Modifier.isPublic(method.getModifiers())) {
                    String name = method.getName();
                    String key = "";
                    if (name.startsWith("get")) {
                        key = name.substring(3);
                    } else if (name.startsWith("is")) {
                        key = name.substring(2);
                    }
                    if (key.length() > 0 &&
                            Character.isUpperCase(key.charAt(0)) &&
                            method.getParameterTypes().length == 0) {
                        if (key.length() == 1) {
                            key = key.toLowerCase();
                        } else if (!Character.isUpperCase(key.charAt(1))) {
                            key = key.substring(0, 1).toLowerCase() +
                                key.substring(1);
                        }

                        Object result = method.invoke(bean, (Object[])null);
                        if (result == null) {
                            map.put(key, NULL);
                        } else if (result.getClass().isArray()) {
                            map.put(key, new JSONArray(result, includeSuperClass));
                        } else if (result instanceof Collection) { // List or Set
                            map.put(key, new JSONArray((Collection)result, includeSuperClass));
                        } else if (result instanceof Map) {
                            map.put(key, new JSONObject((Map)result, includeSuperClass));
                        } else if (isStandardProperty(result.getClass())) { // Primitives, String and Wrapper
                            map.put(key, result);
                        } else {
                            if (result.getClass().getPackage().getName().startsWith("java") ||
                                    result.getClass().getClassLoader() == null) {
                                map.put(key, result.toString());
                            } else { // User defined Objects
                                map.put(key, new JSONObject(result, includeSuperClass));
                            }
                        }
                    }
                }
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
!!!13142924.java!!!	isStandardProperty(inout clazz : Class) : boolean
        return clazz.isPrimitive()                  ||
            clazz.isAssignableFrom(Byte.class)      ||
            clazz.isAssignableFrom(Short.class)     ||
            clazz.isAssignableFrom(Integer.class)   ||
            clazz.isAssignableFrom(Long.class)      ||
            clazz.isAssignableFrom(Float.class)     ||
            clazz.isAssignableFrom(Double.class)    ||
            clazz.isAssignableFrom(Character.class) ||
            clazz.isAssignableFrom(String.class)    ||
            clazz.isAssignableFrom(Boolean.class);
!!!13143052.java!!!	JSONObject(inout object : Object, inout names : String)
        this();
        Class c = object.getClass();
        for (int i = 0; i < names.length; i += 1) {
            String name = names[i];
            try {
                putOpt(name, c.getField(name).get(object));
            } catch (Exception e) {
                /* forget about it */
            }
        }
!!!13143180.java!!!	JSONObject(in source : String)
        this(new JSONTokener(source));
!!!13143308.java!!!	accumulate(in key : String, inout value : Object) : JSONObject
        testValidity(value);
        Object o = opt(key);
        if (o == null) {
            put(key, value instanceof JSONArray ?
                    new JSONArray().put(value) :
                    value);
        } else if (o instanceof JSONArray) {
            ((JSONArray)o).put(value);
        } else {
            put(key, new JSONArray().put(o).put(value));
        }
        return this;
!!!13143436.java!!!	append(in key : String, inout value : Object) : JSONObject
        testValidity(value);
        Object o = opt(key);
        if (o == null) {
            put(key, new JSONArray().put(value));
        } else if (o instanceof JSONArray) {
            put(key, ((JSONArray)o).put(value));
        } else {
            throw new JSONException("JSONObject[" + key +
                    "] is not a JSONArray.");
        }
        return this;
!!!13143564.java!!!	doubleToString(in d : double) : String
        if (Double.isInfinite(d) || Double.isNaN(d)) {
            return "null";
        }

// Shave off trailing zeros and decimal point, if possible.

        String s = Double.toString(d);
        if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {
            while (s.endsWith("0")) {
                s = s.substring(0, s.length() - 1);
            }
            if (s.endsWith(".")) {
                s = s.substring(0, s.length() - 1);
            }
        }
        return s;
!!!13143692.java!!!	get(in key : String) : Object
        Object o = opt(key);
        if (o == null) {
            throw new JSONException("JSONObject[" + quote(key) +
                    "] not found.");
        }
        return o;
!!!13143820.java!!!	getBoolean(in key : String) : boolean
        Object o = get(key);
        if (o.equals(Boolean.FALSE) ||
                (o instanceof String &&
                ((String)o).equalsIgnoreCase("false"))) {
            return false;
        } else if (o.equals(Boolean.TRUE) ||
                (o instanceof String &&
                ((String)o).equalsIgnoreCase("true"))) {
            return true;
        }
        throw new JSONException("JSONObject[" + quote(key) +
                "] is not a Boolean.");
!!!13143948.java!!!	getDouble(in key : String) : double
        Object o = get(key);
        try {
            return o instanceof Number ?
                ((Number)o).doubleValue() :
                Double.valueOf((String)o).doubleValue();
        } catch (Exception e) {
            throw new JSONException("JSONObject[" + quote(key) +
                "] is not a number.");
        }
!!!13144076.java!!!	getInt(in key : String) : int
        Object o = get(key);
        return o instanceof Number ?
                ((Number)o).intValue() : (int)getDouble(key);
!!!13144204.java!!!	getJSONArray(in key : String) : JSONArray
        Object o = get(key);
        if (o instanceof JSONArray) {
            return (JSONArray)o;
        }
        throw new JSONException("JSONObject[" + quote(key) +
                "] is not a JSONArray.");
!!!13144332.java!!!	getJSONObject(in key : String) : JSONObject
        Object o = get(key);
        if (o instanceof JSONObject) {
            return (JSONObject)o;
        }
        throw new JSONException("JSONObject[" + quote(key) +
                "] is not a JSONObject.");
!!!13144460.java!!!	getLong(in key : String) : long
        Object o = get(key);
        return o instanceof Number ?
                ((Number)o).longValue() : (long)getDouble(key);
!!!13144588.java!!!	getNames(inout jo : JSONObject) : String
        int length = jo.length();
        if (length == 0) {
            return null;
        }
        Iterator i = jo.keys();
        String[] names = new String[length];
        int j = 0;
        while (i.hasNext()) {
            names[j] = (String)i.next();
            j += 1;
        }
        return names;
!!!13144716.java!!!	getNames(inout object : Object) : String
        if (object == null) {
            return null;
        }
        Class klass = object.getClass();
        Field[] fields = klass.getFields();
        int length = fields.length;
        if (length == 0) {
            return null;
        }
        String[] names = new String[length];
        for (int i = 0; i < length; i += 1) {
            names[i] = fields[i].getName();
        }
        return names;
!!!13144844.java!!!	getString(in key : String) : String
        return get(key).toString();
!!!13144972.java!!!	has(in key : String) : boolean
        return this.map.containsKey(key);
!!!13145100.java!!!	isNull(in key : String) : boolean
        return JSONObject.NULL.equals(opt(key));
!!!13145228.java!!!	keys() : Iterator
        return this.map.keySet().iterator();
!!!13145356.java!!!	length() : int
        return this.map.size();
!!!13145484.java!!!	names() : JSONArray
        JSONArray ja = new JSONArray();
        Iterator  keys = keys();
        while (keys.hasNext()) {
            ja.put(keys.next());
        }
        return ja.length() == 0 ? null : ja;
!!!13145612.java!!!	numberToString(inout n : Number) : String
        if (n == null) {
            throw new JSONException("Null pointer");
        }
        testValidity(n);

// Shave off trailing zeros and decimal point, if possible.

        String s = n.toString();
        if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {
            while (s.endsWith("0")) {
                s = s.substring(0, s.length() - 1);
            }
            if (s.endsWith(".")) {
                s = s.substring(0, s.length() - 1);
            }
        }
        return s;
!!!13145740.java!!!	opt(in key : String) : Object
        return key == null ? null : this.map.get(key);
!!!13145868.java!!!	optBoolean(in key : String) : boolean
        return optBoolean(key, false);
!!!13145996.java!!!	optBoolean(in key : String, inout defaultValue : boolean) : boolean
        try {
            return getBoolean(key);
        } catch (Exception e) {
            return defaultValue;
        }
!!!13146124.java!!!	put(in key : String, inout value : Collection) : JSONObject
        put(key, new JSONArray(value));
        return this;
!!!13146252.java!!!	optDouble(in key : String) : double
        return optDouble(key, Double.NaN);
!!!13146380.java!!!	optDouble(in key : String, in defaultValue : double) : double
        try {
            Object o = opt(key);
            return o instanceof Number ? ((Number)o).doubleValue() :
                new Double((String)o).doubleValue();
        } catch (Exception e) {
            return defaultValue;
        }
!!!13146508.java!!!	optInt(in key : String) : int
        return optInt(key, 0);
!!!13146636.java!!!	optInt(in key : String, in defaultValue : int) : int
        try {
            return getInt(key);
        } catch (Exception e) {
            return defaultValue;
        }
!!!13146764.java!!!	optJSONArray(in key : String) : JSONArray
        Object o = opt(key);
        return o instanceof JSONArray ? (JSONArray)o : null;
!!!13146892.java!!!	optJSONObject(in key : String) : JSONObject
        Object o = opt(key);
        return o instanceof JSONObject ? (JSONObject)o : null;
!!!13147020.java!!!	optLong(in key : String) : long
        return optLong(key, 0);
!!!13147148.java!!!	optLong(in key : String, in defaultValue : long) : long
        try {
            return getLong(key);
        } catch (Exception e) {
            return defaultValue;
        }
!!!13147276.java!!!	optString(in key : String) : String
        return optString(key, "");
!!!13147404.java!!!	optString(in key : String, in defaultValue : String) : String
        Object o = opt(key);
        return o != null ? o.toString() : defaultValue;
!!!13147532.java!!!	put(in key : String, inout value : boolean) : JSONObject
        put(key, value ? Boolean.TRUE : Boolean.FALSE);
        return this;
!!!13147660.java!!!	put(in key : String, in value : double) : JSONObject
        put(key, new Double(value));
        return this;
!!!13147788.java!!!	put(in key : String, in value : int) : JSONObject
        put(key, new Integer(value));
        return this;
!!!13147916.java!!!	put(in key : String, in value : long) : JSONObject
        put(key, new Long(value));
        return this;
!!!13148044.java!!!	put(in key : String, inout value : Map) : JSONObject
        put(key, new JSONObject(value));
        return this;
!!!13148172.java!!!	put(in key : String, inout value : Object) : JSONObject
        if (key == null) {
            throw new JSONException("Null key.");
        }
        if (value != null) {
            testValidity(value);
            this.map.put(key, value);
        } else {
            remove(key);
        }
        return this;
!!!13148300.java!!!	putOnce(in key : String, inout value : Object) : JSONObject
        if (key != null && value != null) {
            if (opt(key) != null) {
                throw new JSONException("Duplicate key \"" + key + "\"");
            }
            put(key, value);
        }
        return this;
!!!13148428.java!!!	putOpt(in key : String, inout value : Object) : JSONObject
        if (key != null && value != null) {
            put(key, value);
        }
        return this;
!!!13148556.java!!!	quote(in string : String) : String
        if (string == null || string.length() == 0) {
            return "\"\"";
        }

        char         b;
        char         c = 0;
        int          i;
        int          len = string.length();
        StringBuffer sb = new StringBuffer(len + 4);
        String       t;

        sb.append('"');
        for (i = 0; i < len; i += 1) {
            b = c;
            c = string.charAt(i);
            switch (c) {
            case '\\':
            case '"':
                sb.append('\\');
                sb.append(c);
                break;
            case '/':
                if (b == '<') {
                    sb.append('\\');
                }
                sb.append(c);
                break;
            case '\b':
                sb.append("\\b");
                break;
            case '\t':
                sb.append("\\t");
                break;
            case '\n':
                sb.append("\\n");
                break;
            case '\f':
                sb.append("\\f");
                break;
            case '\r':
                sb.append("\\r");
                break;
            default:
                if (c < ' ' || (c >= '\u0080' && c < '\u00a0') ||
                               (c >= '\u2000' && c < '\u2100')) {
                    t = "000" + Integer.toHexString(c);
                    sb.append("\\u" + t.substring(t.length() - 4));
                } else {
                    sb.append(c);
                }
            }
        }
        sb.append('"');
        return sb.toString();
!!!13148684.java!!!	remove(in key : String) : Object
        return this.map.remove(key);
!!!13148812.java!!!	sortedKeys() : Iterator
      return new TreeSet(this.map.keySet()).iterator();
!!!13148940.java!!!	stringToValue(in s : String) : Object
        if (s.equals("")) {
            return s;
        }
        if (s.equalsIgnoreCase("true")) {
            return Boolean.TRUE;
        }
        if (s.equalsIgnoreCase("false")) {
            return Boolean.FALSE;
        }
        if (s.equalsIgnoreCase("null")) {
            return JSONObject.NULL;
        }

        /*
         * If it might be a number, try converting it. We support the 0- and 0x-
         * conventions. If a number cannot be produced, then the value will just
         * be a string. Note that the 0-, 0x-, plus, and implied string
         * conventions are non-standard. A JSON parser is free to accept
         * non-JSON forms as long as it accepts all correct JSON forms.
         */

        char b = s.charAt(0);
        if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {
            if (b == '0') {
                if (s.length() > 2 &&
                        (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
                    try {
                        return new Integer(Integer.parseInt(s.substring(2),
                                16));
                    } catch (Exception e) {
                        /* Ignore the error */
                    }
                } else {
                    try {
                        return new Integer(Integer.parseInt(s, 8));
                    } catch (Exception e) {
                        /* Ignore the error */
                    }
                }
            }
            try {
                if (s.indexOf('.') > -1 || s.indexOf('e') > -1 || s.indexOf('E') > -1) {
                    return Double.valueOf(s);
                } else {
                    Long myLong = new Long(s);
                    if (myLong.longValue() == myLong.intValue()) {
                        return new Integer(myLong.intValue());
                    } else {
                        return myLong;
                    }
                }
            }  catch (Exception f) {
                /* Ignore the error */
            }
        }
        return s;
!!!13149068.java!!!	testValidity(inout o : Object) : void
        if (o != null) {
            if (o instanceof Double) {
                if (((Double)o).isInfinite() || ((Double)o).isNaN()) {
                    throw new JSONException(
                        "JSON does not allow non-finite numbers.");
                }
            } else if (o instanceof Float) {
                if (((Float)o).isInfinite() || ((Float)o).isNaN()) {
                    throw new JSONException(
                        "JSON does not allow non-finite numbers.");
                }
            }
        }
!!!13149196.java!!!	toJSONArray(inout names : JSONArray) : JSONArray
        if (names == null || names.length() == 0) {
            return null;
        }
        JSONArray ja = new JSONArray();
        for (int i = 0; i < names.length(); i += 1) {
            ja.put(this.opt(names.getString(i)));
        }
        return ja;
!!!13149324.java!!!	toString() : String
        try {
            Iterator     keys = keys();
            StringBuffer sb = new StringBuffer("{");

            while (keys.hasNext()) {
                if (sb.length() > 1) {
                    sb.append(',');
                }
                Object o = keys.next();
                sb.append(quote(o.toString()));
                sb.append(':');
                sb.append(valueToString(this.map.get(o)));
            }
            sb.append('}');
            return sb.toString();
        } catch (Exception e) {
            return null;
        }
!!!13149452.java!!!	toString(in indentFactor : int) : String
        return toString(indentFactor, 0);
!!!13149580.java!!!	toString(in indentFactor : int, in indent : int) : String
        int j;
        int n = length();
        if (n == 0) {
            return "{}";
        }
        Iterator     keys = sortedKeys();
        StringBuffer sb = new StringBuffer("{");
        int          newindent = indent + indentFactor;
        Object       o;
        if (n == 1) {
            o = keys.next();
            sb.append(quote(o.toString()));
            sb.append(": ");
            sb.append(valueToString(this.map.get(o), indentFactor,
                    indent));
        } else {
            while (keys.hasNext()) {
                o = keys.next();
                if (sb.length() > 1) {
                    sb.append(",\n");
                } else {
                    sb.append('\n');
                }
                for (j = 0; j < newindent; j += 1) {
                    sb.append(' ');
                }
                sb.append(quote(o.toString()));
                sb.append(": ");
                sb.append(valueToString(this.map.get(o), indentFactor,
                        newindent));
            }
            if (sb.length() > 1) {
                sb.append('\n');
                for (j = 0; j < indent; j += 1) {
                    sb.append(' ');
                }
            }
        }
        sb.append('}');
        return sb.toString();
!!!13149708.java!!!	valueToString(inout value : Object) : String
        if (value == null || value.equals(null)) {
            return "null";
        }
        if (value instanceof JSONString) {
            Object o;
            try {
                o = ((JSONString)value).toJSONString();
            } catch (Exception e) {
                throw new JSONException(e);
            }
            if (o instanceof String) {
                return (String)o;
            }
            throw new JSONException("Bad value from toJSONString: " + o);
        }
        if (value instanceof Number) {
            return numberToString((Number) value);
        }
        if (value instanceof Boolean || value instanceof JSONObject ||
                value instanceof JSONArray) {
            return value.toString();
        }
        if (value instanceof Map) {
            return new JSONObject((Map)value).toString();
        }
        if (value instanceof Collection) {
            return new JSONArray((Collection)value).toString();
        }
        if (value.getClass().isArray()) {
            return new JSONArray(value).toString();
        }
        return quote(value.toString());
!!!13149836.java!!!	valueToString(inout value : Object, in indentFactor : int, in indent : int) : String
        if (value == null || value.equals(null)) {
            return "null";
        }
        try {
            if (value instanceof JSONString) {
                Object o = ((JSONString)value).toJSONString();
                if (o instanceof String) {
                    return (String)o;
                }
            }
        } catch (Exception e) {
            /* forget about it */
        }
        if (value instanceof Number) {
            return numberToString((Number) value);
        }
        if (value instanceof Boolean) {
            return value.toString();
        }
        if (value instanceof JSONObject) {
            return ((JSONObject)value).toString(indentFactor, indent);
        }
        if (value instanceof JSONArray) {
            return ((JSONArray)value).toString(indentFactor, indent);
        }
        if (value instanceof Map) {
            return new JSONObject((Map)value).toString(indentFactor, indent);
        }
        if (value instanceof Collection) {
            return new JSONArray((Collection)value).toString(indentFactor, indent);
        }
        if (value.getClass().isArray()) {
            return new JSONArray(value).toString(indentFactor, indent);
        }
        return quote(value.toString());
!!!13149964.java!!!	write(inout writer : Writer) : Writer
        try {
            boolean  b = false;
            Iterator keys = keys();
            writer.write('{');

            while (keys.hasNext()) {
                if (b) {
                    writer.write(',');
                }
                Object k = keys.next();
                writer.write(quote(k.toString()));
                writer.write(':');
                Object v = this.map.get(k);
                if (v instanceof JSONObject) {
                    ((JSONObject)v).write(writer);
                } else if (v instanceof JSONArray) {
                    ((JSONArray)v).write(writer);
                } else {
                    writer.write(valueToString(v));
                }
                b = true;
            }
            writer.write('}');
            return writer;
        } catch (IOException e) {
            throw new JSONException(e);
        }
