class AppWidgetHost
!!!2980108.java!!!	AppWidgetHost(inout context : Context, in hostId : int)
        this(context, hostId, null, context.getMainLooper());
!!!2980236.java!!!	AppWidgetHost(inout context : Context, in hostId : int, inout handler : OnClickHandler, inout looper : Looper)
        mContext = context;
        mHostId = hostId;
        mOnClickHandler = handler;
        mHandler = new UpdateHandler(looper);
        mDisplayMetrics = context.getResources().getDisplayMetrics();
        mUser = Process.myUserHandle();
        bindService();
!!!2980364.java!!!	setUserId(in userId : int) : void
        mUser = new UserHandle(userId);
!!!2980492.java!!!	bindService() : void
        synchronized (sServiceLock) {
            if (sService == null) {
                IBinder b = ServiceManager.getService(Context.APPWIDGET_SERVICE);
                sService = IAppWidgetService.Stub.asInterface(b);
            }
        }
!!!2980620.java!!!	startListening() : void
        startListeningAsUser(UserHandle.myUserId());
!!!2980748.java!!!	startListeningAsUser(in userId : int) : void
        int[] updatedIds;
        ArrayList<RemoteViews> updatedViews = new ArrayList<RemoteViews>();

        try {
            if (mPackageName == null) {
                mPackageName = mContext.getPackageName();
            }
            updatedIds = sService.startListeningAsUser(
                    mCallbacks, mPackageName, mHostId, updatedViews, userId);
        }
        catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }

        final int N = updatedIds.length;
        for (int i=0; i<N; i++) {
            if (updatedViews.get(i) != null) {
                updatedViews.get(i).setUser(new UserHandle(userId));
            }
            updateAppWidgetView(updatedIds[i], updatedViews.get(i));
        }
!!!2980876.java!!!	stopListening() : void
        try {
            sService.stopListeningAsUser(mHostId, UserHandle.myUserId());
        }
        catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }
!!!2981004.java!!!	stopListeningAsUser(in userId : int) : void
        try {
            sService.stopListeningAsUser(mHostId, userId);
        }
        catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }
        // Also clear the views
        clearViews();
!!!2981132.java!!!	allocateAppWidgetId() : int
        try {
            if (mPackageName == null) {
                mPackageName = mContext.getPackageName();
            }
            return sService.allocateAppWidgetId(mPackageName, mHostId);
        }
        catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }
!!!2981260.java!!!	allocateAppWidgetIdForSystem(in hostId : int) : int
        checkCallerIsSystem();
        try {
            if (sService == null) {
                bindService();
            }
            Context systemContext =
                    (Context) ActivityThread.currentActivityThread().getSystemContext();
            String packageName = systemContext.getPackageName();
            return sService.allocateAppWidgetId(packageName, hostId);
        } catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }
!!!2981388.java!!!	getAppWidgetIds() : int
        try {
            if (sService == null) {
                bindService();
            }
            return sService.getAppWidgetIdsForHost(mHostId);
        } catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }
!!!2981516.java!!!	checkCallerIsSystem() : void
        int uid = Process.myUid();
        if (UserHandle.getAppId(uid) == Process.SYSTEM_UID || uid == 0) {
            return;
        }
        throw new SecurityException("Disallowed call for uid " + uid);
!!!2981644.java!!!	isLocalBinder() : boolean
        return Process.myPid() == Binder.getCallingPid();
!!!2981772.java!!!	deleteAppWidgetId(in appWidgetId : int) : void
        synchronized (mViews) {
            mViews.remove(appWidgetId);
            try {
                sService.deleteAppWidgetId(appWidgetId);
            }
            catch (RemoteException e) {
                throw new RuntimeException("system server dead?", e);
            }
        }
!!!2981900.java!!!	deleteAppWidgetIdForSystem(in appWidgetId : int) : void
        checkCallerIsSystem();
        try {
            if (sService == null) {
                bindService();
            }
            sService.deleteAppWidgetId(appWidgetId);
        } catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }
!!!2982028.java!!!	deleteHost() : void
        try {
            sService.deleteHost(mHostId);
        }
        catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }
!!!2982156.java!!!	deleteAllHosts() : void
        try {
            sService.deleteAllHosts();
        }
        catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }
!!!2982284.java!!!	createView(inout context : Context, in appWidgetId : int, inout appWidget : AppWidgetProviderInfo) : AppWidgetHostView
        AppWidgetHostView view = onCreateView(context, appWidgetId, appWidget);
        view.setUserId(mUser.getIdentifier());
        view.setOnClickHandler(mOnClickHandler);
        view.setAppWidget(appWidgetId, appWidget);
        synchronized (mViews) {
            mViews.put(appWidgetId, view);
        }
        RemoteViews views;
        try {
            views = sService.getAppWidgetViews(appWidgetId);
            if (views != null) {
                views.setUser(mUser);
            }
        } catch (RemoteException e) {
            throw new RuntimeException("system server dead?", e);
        }
        view.updateAppWidget(views);

        return view;
!!!2982412.java!!!	onCreateView(inout context : Context, in appWidgetId : int, inout appWidget : AppWidgetProviderInfo) : AppWidgetHostView
        return new AppWidgetHostView(context, mOnClickHandler);
!!!2982540.java!!!	onProviderChanged(in appWidgetId : int, inout appWidget : AppWidgetProviderInfo) : void
        AppWidgetHostView v;

        // Convert complex to dp -- we are getting the AppWidgetProviderInfo from the
        // AppWidgetService, which doesn't have our context, hence we need to do the
        // conversion here.
        appWidget.minWidth =
            TypedValue.complexToDimensionPixelSize(appWidget.minWidth, mDisplayMetrics);
        appWidget.minHeight =
            TypedValue.complexToDimensionPixelSize(appWidget.minHeight, mDisplayMetrics);
        appWidget.minResizeWidth =
            TypedValue.complexToDimensionPixelSize(appWidget.minResizeWidth, mDisplayMetrics);
        appWidget.minResizeHeight =
            TypedValue.complexToDimensionPixelSize(appWidget.minResizeHeight, mDisplayMetrics);

        synchronized (mViews) {
            v = mViews.get(appWidgetId);
        }
        if (v != null) {
            v.resetAppWidget(appWidget);
        }
!!!2982668.java!!!	onProvidersChanged() : void
        // Do nothing
!!!2982796.java!!!	updateAppWidgetView(in appWidgetId : int, inout views : RemoteViews) : void
        AppWidgetHostView v;
        synchronized (mViews) {
            v = mViews.get(appWidgetId);
        }
        if (v != null) {
            v.updateAppWidget(views);
        }
!!!2982924.java!!!	viewDataChanged(in appWidgetId : int, in viewId : int) : void
        AppWidgetHostView v;
        synchronized (mViews) {
            v = mViews.get(appWidgetId);
        }
        if (v != null) {
            v.viewDataChanged(viewId);
        }
!!!2983052.java!!!	clearViews() : void
        mViews.clear();
