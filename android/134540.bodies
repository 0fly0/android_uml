class DrmManagerService
!!!141836.cpp!!!	instantiate() : void
    ALOGV("instantiate");
    defaultServiceManager()->addService(String16("drm.drmManager"), new DrmManagerService());

    if (0 >= trustedUids.size()) {
        // TODO
        // Following implementation is just for reference.
        // Each OEM manufacturer should implement/replace with their own solutions.

        // Add trusted uids here
        trustedUids.push(AID_MEDIA);
    }
!!!141964.cpp!!!	DrmManagerService()
    ALOGV("created");
    mDrmManager = new DrmManager();
    mDrmManager->loadPlugIns();
!!!142092.cpp!!!	~DrmManagerService()
    ALOGV("Destroyed");
    mDrmManager->unloadPlugIns();
    delete mDrmManager; mDrmManager = NULL;
!!!142220.cpp!!!	addUniqueId(in isNative : bool) : int
    return mDrmManager->addUniqueId(isNative);
!!!142348.cpp!!!	removeUniqueId(in uniqueId : int) : void
    mDrmManager->removeUniqueId(uniqueId);
!!!142476.cpp!!!	addClient(in uniqueId : int) : void
    mDrmManager->addClient(uniqueId);
!!!142604.cpp!!!	removeClient(in uniqueId : int) : void
    mDrmManager->removeClient(uniqueId);
!!!142732.cpp!!!	setDrmServiceListener(in uniqueId : int, in drmServiceListener : sp<IDrmServiceListener>) : status_t
    ALOGV("Entering setDrmServiceListener");
    mDrmManager->setDrmServiceListener(uniqueId, drmServiceListener);
    return DRM_NO_ERROR;
!!!142860.cpp!!!	installDrmEngine(in uniqueId : int, in drmEngineFile : String8) : status_t
    ALOGV("Entering installDrmEngine");
    return mDrmManager->installDrmEngine(uniqueId, drmEngineFile);
!!!142988.cpp!!!	getConstraints(in uniqueId : int, in path : String8, in action : int) : DrmConstraints
    ALOGV("Entering getConstraints from content");
    return mDrmManager->getConstraints(uniqueId, path, action);
!!!143116.cpp!!!	getMetadata(in uniqueId : int, in path : String8) : DrmMetadata
    ALOGV("Entering getMetadata from content");
    return mDrmManager->getMetadata(uniqueId, path);
!!!143244.cpp!!!	canHandle(in uniqueId : int, in path : String8, in mimeType : String8) : bool
    ALOGV("Entering canHandle");
    return mDrmManager->canHandle(uniqueId, path, mimeType);
!!!143372.cpp!!!	processDrmInfo(in uniqueId : int, in drmInfo : DrmInfo) : DrmInfoStatus
    ALOGV("Entering processDrmInfo");
    return mDrmManager->processDrmInfo(uniqueId, drmInfo);
!!!143500.cpp!!!	acquireDrmInfo(in uniqueId : int, in drmInfoRequest : DrmInfoRequest) : DrmInfo
    ALOGV("Entering acquireDrmInfo");
    return mDrmManager->acquireDrmInfo(uniqueId, drmInfoRequest);
!!!143628.cpp!!!	saveRights(in uniqueId : int, in drmRights : DrmRights, in rightsPath : String8, in contentPath : String8) : status_t
    ALOGV("Entering saveRights");
    return mDrmManager->saveRights(uniqueId, drmRights, rightsPath, contentPath);
!!!143756.cpp!!!	getOriginalMimeType(in uniqueId : int, in path : String8, in fd : int) : String8
    ALOGV("Entering getOriginalMimeType");
    return mDrmManager->getOriginalMimeType(uniqueId, path, fd);
!!!143884.cpp!!!	getDrmObjectType(in uniqueId : int, in path : String8, in mimeType : String8) : int
    ALOGV("Entering getDrmObjectType");
    return mDrmManager->getDrmObjectType(uniqueId, path, mimeType);
!!!144012.cpp!!!	checkRightsStatus(in uniqueId : int, in path : String8, in action : int) : int
    ALOGV("Entering checkRightsStatus");
    return mDrmManager->checkRightsStatus(uniqueId, path, action);
!!!144140.cpp!!!	consumeRights(in uniqueId : int, inout decryptHandle : DecryptHandle, in action : int, in reserve : bool) : status_t
    ALOGV("Entering consumeRights");
    if (!isProtectedCallAllowed()) {
        return DRM_ERROR_NO_PERMISSION;
    }
    return mDrmManager->consumeRights(uniqueId, decryptHandle, action, reserve);
!!!144268.cpp!!!	setPlaybackStatus(in uniqueId : int, inout decryptHandle : DecryptHandle, in playbackStatus : int, in position : int64_t) : status_t
    ALOGV("Entering setPlaybackStatus");
    if (!isProtectedCallAllowed()) {
        return DRM_ERROR_NO_PERMISSION;
    }
    return mDrmManager->setPlaybackStatus(uniqueId, decryptHandle, playbackStatus, position);
!!!144396.cpp!!!	validateAction(in uniqueId : int, in path : String8, in action : int, in description : ActionDescription) : bool
    ALOGV("Entering validateAction");
    return mDrmManager->validateAction(uniqueId, path, action, description);
!!!144524.cpp!!!	removeRights(in uniqueId : int, in path : String8) : status_t
    ALOGV("Entering removeRights");
    return mDrmManager->removeRights(uniqueId, path);
!!!144652.cpp!!!	removeAllRights(in uniqueId : int) : status_t
    ALOGV("Entering removeAllRights");
    return mDrmManager->removeAllRights(uniqueId);
!!!144780.cpp!!!	openConvertSession(in uniqueId : int, in mimeType : String8) : int
    ALOGV("Entering openConvertSession");
    return mDrmManager->openConvertSession(uniqueId, mimeType);
!!!144908.cpp!!!	convertData(in uniqueId : int, in convertId : int, in inputData : DrmBuffer) : DrmConvertedStatus
    ALOGV("Entering convertData");
    return mDrmManager->convertData(uniqueId, convertId, inputData);
!!!145036.cpp!!!	closeConvertSession(in uniqueId : int, in convertId : int) : DrmConvertedStatus
    ALOGV("Entering closeConvertSession");
    return mDrmManager->closeConvertSession(uniqueId, convertId);
!!!145164.cpp!!!	getAllSupportInfo(in uniqueId : int, inout length : int, inout drmSupportInfoArray : DrmSupportInfo) : status_t
    ALOGV("Entering getAllSupportInfo");
    return mDrmManager->getAllSupportInfo(uniqueId, length, drmSupportInfoArray);
!!!145292.cpp!!!	openDecryptSession(in uniqueId : int, in fd : int, in offset : off64_t, in length : off64_t, in mime : char) : DecryptHandle
    ALOGV("Entering DrmManagerService::openDecryptSession");
    if (isProtectedCallAllowed()) {
        return mDrmManager->openDecryptSession(uniqueId, fd, offset, length, mime);
    }

    return NULL;
!!!145420.cpp!!!	openDecryptSession(in uniqueId : int, in uri : char, in mime : char) : DecryptHandle
    ALOGV("Entering DrmManagerService::openDecryptSession with uri");
    if (isProtectedCallAllowed()) {
        return mDrmManager->openDecryptSession(uniqueId, uri, mime);
    }

    return NULL;
!!!145548.cpp!!!	openDecryptSession(in uniqueId : int, in buf : DrmBuffer, in mimeType : String8) : DecryptHandle
    ALOGV("Entering DrmManagerService::openDecryptSession for streaming");
    if (isProtectedCallAllowed()) {
        return mDrmManager->openDecryptSession(uniqueId, buf, mimeType);
    }

    return NULL;
!!!145676.cpp!!!	closeDecryptSession(in uniqueId : int, inout decryptHandle : DecryptHandle) : status_t
    ALOGV("Entering closeDecryptSession");
    if (!isProtectedCallAllowed()) {
        return DRM_ERROR_NO_PERMISSION;
    }
    return mDrmManager->closeDecryptSession(uniqueId, decryptHandle);
!!!145804.cpp!!!	initializeDecryptUnit(in uniqueId : int, inout decryptHandle : DecryptHandle, in decryptUnitId : int, in headerInfo : DrmBuffer) : status_t
    ALOGV("Entering initializeDecryptUnit");
    if (!isProtectedCallAllowed()) {
        return DRM_ERROR_NO_PERMISSION;
    }
    return mDrmManager->initializeDecryptUnit(uniqueId,decryptHandle, decryptUnitId, headerInfo);
!!!145932.cpp!!!	decrypt(in uniqueId : int, inout decryptHandle : DecryptHandle, in decryptUnitId : int, in encBuffer : DrmBuffer, inout decBuffer : DrmBuffer, inout IV : DrmBuffer) : status_t
    ALOGV("Entering decrypt");
    if (!isProtectedCallAllowed()) {
        return DRM_ERROR_NO_PERMISSION;
    }
    return mDrmManager->decrypt(uniqueId, decryptHandle, decryptUnitId, encBuffer, decBuffer, IV);
!!!146060.cpp!!!	finalizeDecryptUnit(in uniqueId : int, inout decryptHandle : DecryptHandle, in decryptUnitId : int) : status_t
    ALOGV("Entering finalizeDecryptUnit");
    if (!isProtectedCallAllowed()) {
        return DRM_ERROR_NO_PERMISSION;
    }
    return mDrmManager->finalizeDecryptUnit(uniqueId, decryptHandle, decryptUnitId);
!!!146188.cpp!!!	pread(in uniqueId : int, inout decryptHandle : DecryptHandle, inout buffer : void, in numBytes : ssize_t, in offset : off64_t) : ssize_t
    ALOGV("Entering pread");
    if (!isProtectedCallAllowed()) {
        return DRM_ERROR_NO_PERMISSION;
    }
    return mDrmManager->pread(uniqueId, decryptHandle, buffer, numBytes, offset);
!!!146316.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;
    if (checkCallingPermission(String16("android.permission.DUMP")) == false) {
        snprintf(buffer, SIZE, "Permission Denial: "
                "can't dump DrmManagerService from pid=%d, uid=%d\n",
                IPCThreadState::self()->getCallingPid(),
                IPCThreadState::self()->getCallingUid());
        result.append(buffer);
    } else {
#if DRM_MEMORY_LEAK_TRACK
        bool dumpMem = false;
        for (size_t i = 0; i < args.size(); i++) {
            if (args[i] == String16("-m")) {
                dumpMem = true;
            }
        }
        if (dumpMem) {
            dumpMemoryAddresses(fd);
        }
#endif
    }
    write(fd, result.string(), result.size());
    return NO_ERROR;
