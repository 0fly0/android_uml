class SoftInputThread
!!!13405964.java!!!	SoftInputThread(in name : String)
      super(name);
!!!13406092.java!!!	onLooperPrepared() : void
      mHandler = new Handler(this);

      synchronized (this) {
        this.notifyAll();
      }
      super.onLooperPrepared();
!!!13406220.java!!!	handleMessage(inout msg : Message) : boolean
      SoftInputThreadRequest request = SoftInputThreadRequest.values()[msg.what];
      SoftInputUpdateObject object;

      switch (request) {
        case EXIT:
          this.getLooper().quit();
          break;
        case SHOW_KEYBOARD:
          EditorInfo info = (EditorInfo) msg.obj;
          if (info != null) {
            String hint = null;
            if (info.hintText != null) {
              hint = String.valueOf(info.hintText);
            }
            if (mIPRemoteService != null) {
              mIPRemoteService.broadcastShowSoftKeyboard(SoftInputThread.this,
                  info.inputType, info.imeOptions, hint);
            }
          }
          break;
        case HIDE_KEYBOARD:
          if (mIPRemoteService != null) {
            mIPRemoteService.broadcastHideSoftKeyboard();
          }
          break;
        case UPDATE_FULL_CONTENT:
          object = (SoftInputUpdateObject)msg.obj;
          if (mIPRemoteService != null) {
            mIPRemoteService.broadcastSoftInputContent(object.origin, object.text,
                object.selectionStart, object.selectionEnd);
          }
          break;

        case UPDATE_PARTIAL_CONTENT:
          object = (SoftInputUpdateObject)msg.obj;
          if (mIPRemoteService != null) {
            mIPRemoteService.broadcastSoftInputUpdate(object.origin, object.text,
                object.position, object.lengthOld, object.lengthNew,
                object.selectionStart, object.selectionEnd);
          }
          break;

      }
      return true;
!!!13406348.java!!!	waitReady() : void
      synchronized(this) {
        try {
          this.wait();
        } catch (InterruptedException e) {
          // no action.
        }
      }
!!!13406476.java!!!	exitThread() : void
        if (mHandler != null) {
            mHandler.sendEmptyMessage(SoftInputThreadRequest.EXIT.ordinal());
        } else {
            Looper looper = getLooper();
            if (looper != null) {
                looper.quit();
            }
        }
!!!13406604.java!!!	sendRequireSoftKeyboard(inout info : EditorInfo) : void
      if (mHandler != null) {
        Message msg = mHandler.obtainMessage(SoftInputThreadRequest.SHOW_KEYBOARD.ordinal(), info);
        mHandler.sendMessage(msg);
      }
!!!13406732.java!!!	sendDismissSoftKeyboard() : void
      if (mHandler != null) {
        mHandler.sendEmptyMessage(SoftInputThreadRequest.HIDE_KEYBOARD.ordinal());
      }
!!!13406860.java!!!	sendSoftInputUpdate(inout origin : Object, in content : String, in position : int, in oldLen : int, in newLen : int, in selectionStart : int, in selectionEnd : int) : void
      if (mHandler != null) {
        SoftInputUpdateObject obj = new SoftInputUpdateObject();
        obj.origin = origin;
        obj.text = content;
        obj.position = position;
        obj.lengthOld = oldLen;
        obj.lengthNew = newLen;
        obj.selectionStart = selectionStart;
        obj.selectionEnd = selectionEnd;
        Message msg = mHandler.obtainMessage(
            SoftInputThreadRequest.UPDATE_PARTIAL_CONTENT.ordinal(), obj);
        mHandler.sendMessage(msg);
      }
!!!13406988.java!!!	sendSoftInputContent(inout origin : Object, in text : String, in selectStart : int, in selectEnd : int) : void
      if (mHandler != null) {
        SoftInputUpdateObject obj = new SoftInputUpdateObject();

        obj.origin = origin;
        obj.text = text;
        obj.selectionStart = selectStart;
        obj.selectionEnd = selectEnd;

        Message msg = mHandler.obtainMessage(
            SoftInputThreadRequest.UPDATE_FULL_CONTENT.ordinal(), obj);
        mHandler.sendMessage(msg);
      }
!!!13407116.java!!!	onSoftInputUpdate(inout origin : Object, in content : String, in cursor : int, in oldLength : int, in newLength : int, in selectionStart : int, in selectionEnd : int) : void
      if (mRemoteInput != null) {
        SoftInputUpdateObject object = new SoftInputUpdateObject();
        object.origin = origin;
        object.text = content;
        object.position = cursor;
        object.lengthOld = oldLength;
        object.lengthNew = newLength;
        object.selectionStart = selectionStart;
        object.selectionEnd = selectionEnd;
        mRemoteInput.sendMessage(mRemoteInput.obtainMessage(
            SoftInputRequestType.UPDATE.ordinal(), object));
      }
!!!13407244.java!!!	onSoftInputContent(inout origin : Object, in text : String, in selectStart : int, in selectEnd : int) : void
      SoftInputUpdateObject object = new SoftInputUpdateObject();
      if (mRemoteInput != null) {
        object.origin = origin;
        object.text = text;
        object.selectionStart = selectStart;
        object.selectionEnd = selectEnd;
        mRemoteInput.sendMessage(mRemoteInput.obtainMessage(
            SoftInputRequestType.REPLACE.ordinal(), object));
      }
!!!13407372.java!!!	onSoftInputExecute(in imeAction : int) : void
      Integer action = Integer.valueOf(imeAction);
      if (mRemoteInput != null) {
        Message message = mRemoteInput.obtainMessage(SoftInputRequestType.EXECUTE.ordinal(),
            Integer.valueOf(imeAction));
        mRemoteInput.sendMessage(message);
      }
