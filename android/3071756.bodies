class MyVideoView
!!!12741004.java!!!	MyVideoView(inout context : Context)
            super(context);
!!!12741132.java!!!	MyVideoView(inout context : Context, inout attrs : AttributeSet)
            super(context, attrs);
!!!12741260.java!!!	MyVideoView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
            super(context, attrs, defStyle);
!!!12741388.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
            int pos, dur;
            switch (keyCode) {
                case KeyEvent.KEYCODE_ALT_LEFT:
                case KeyEvent.KEYCODE_ALT_RIGHT:
                    return true;

                case KeyEvent.KEYCODE_A:
                    if (null != mOwner)
                        mOwner.showDialog(DIALOG_SELECT_AUDIO_SUBSTREAM);
                    return true;

                case KeyEvent.KEYCODE_I:
                    if (event.isAltPressed()) {
                        if (null != mOwner)
                            mOwner.toggleInfo();
                        return true;
                    }
                    break;

                case KeyEvent.KEYCODE_S:
                    if (null != mOwner)
                        mOwner.openPip();
                    break;

                case KeyEvent.KEYCODE_MEDIA_PLAY:
                case KeyEvent.KEYCODE_MEDIA_PAUSE:
                case KeyEvent.KEYCODE_P:
                    if (canPause()) {
                        if (isPlaying())
                            pause();
                        else
                            start();
                    }
                    return true;

                case KeyEvent.KEYCODE_MEDIA_REWIND:
                case KeyEvent.KEYCODE_LEFT_BRACKET:
                    pos = getCurrentPosition();
                    pos -= 7000;
                    if (pos < 0)
                        pos = 0;
                    seekTo(pos);
                    return true;

                case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
                case KeyEvent.KEYCODE_RIGHT_BRACKET:
                    pos = getCurrentPosition();
                    dur = getDuration();
                    pos += 30000;
                    if (pos > dur)
                        pos = dur;
                    seekTo(pos);
                    return true;

                case KeyEvent.KEYCODE_DPAD_LEFT:
                case KeyEvent.KEYCODE_DPAD_RIGHT:
                case KeyEvent.KEYCODE_DPAD_DOWN:
                case KeyEvent.KEYCODE_DPAD_UP:
                case KeyEvent.KEYCODE_PAGE_UP:
                case KeyEvent.KEYCODE_PAGE_DOWN:
                    if (mBounds == null) {
                        mBounds = new Rect(getLeft(), getTop(),
                                           getRight(), getBottom());
                        mPos = new Rect(mBounds);
                        Log.d(TAG, "initial size :" +
                          " x " + mPos.left + " y " + mPos.top +
                          " w " + mPos.width() + " h " + mPos.height());
                    }
                    int curWidth = mPos.width();
                    int curHeight = mPos.height();
                    if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
                        mPos.left -= DELTA;
                        mPos.right -= DELTA;
                        mPos.left = Math.max(mPos.left, mBounds.left);
                        mPos.right = Math.max(mPos.right, mPos.left + curWidth);
                    }
                    if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
                        mPos.right += DELTA;
                        mPos.left += DELTA;
                        mPos.right = Math.min(mPos.right, mBounds.right);
                        mPos.left = Math.min(mPos.left, mPos.right - curWidth);
                    }
                    if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {
                        mPos.bottom += DELTA;
                        mPos.top += DELTA;
                        mPos.bottom = Math.min(mPos.bottom, mBounds.bottom);
                        mPos.top = Math.min(mPos.top, mPos.bottom - curHeight);
                    }
                    if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {
                        mPos.top -= DELTA;
                        mPos.bottom -= DELTA;
                        mPos.top = Math.max(mPos.top, mBounds.top);
                        mPos.bottom = Math.max(mPos.bottom,
                                               mPos.top + curHeight);
                    }
                    if (keyCode == KeyEvent.KEYCODE_PAGE_UP) {
                        mPos.right += DELTA_W / 2;
                        mPos.bottom += DELTA / 2;
                        mPos.right = Math.min(mPos.right, mBounds.right);
                        mPos.bottom = Math.min(mPos.bottom, mBounds.bottom);

                        mPos.left -= DELTA_W / 2;
                        mPos.top -= DELTA / 2;
                        mPos.left = Math.max(mPos.left, mBounds.left);
                        mPos.top = Math.max(mPos.top, mBounds.top);
                    }
                    if (keyCode == KeyEvent.KEYCODE_PAGE_DOWN) {
                        int deltaW = Math.min(
                                DELTA_W, mPos.right - mPos.left - MIN_WIDTH);
                        int delta = Math.min(
                                DELTA, mPos.bottom - mPos.top - MIN_HEIGHT);
                        mPos.right -= deltaW / 2;
                        mPos.bottom -= delta / 2;
                        mPos.left += deltaW / 2;
                        mPos.top += delta / 2;
                    }
                    float expectedRight = mPos.left +
                        (mPos.height() * MIN_WIDTH) / (float) MIN_HEIGHT;
                    float expectedBottom = mPos.top +
                        (mPos.width() * MIN_HEIGHT) / (float) MIN_WIDTH;
                    if (expectedRight <= mBounds.right) {
                        mPos.right = (int) expectedRight;
                    } else {
                        mPos.bottom = (int) expectedBottom;
                    }
                    if (mPos.left == mBounds.left &&
                        mPos.top == mBounds.top &&
                        (mPos.right == mBounds.right ||
                         mPos.bottom == mBounds.bottom)) {
                        mPos = new Rect(mBounds);
                    }
                    Log.d(TAG, "KeyCode " + keyCode +
                          " x " + mPos.left + " y " + mPos.top +
                          " w " + mPos.width() + " h " + mPos.height());

                    LayoutParams params =
                        new LayoutParams(mPos.width(), mPos.height());
                    setLayoutParams(params);
                    setX(mPos.left);
                    setY(mPos.top);
                    requestLayout();
                    return true;

                case KeyEvent.KEYCODE_BACK:
                    return super.onKeyDown(keyCode, event);
            }

            // Note: only let our superclass handle the BACK key.  All other
            // keys just bring up the media seek bar which then just swallows
            // every keystroke.
            return true;
!!!12741516.java!!!	setOwner(inout owner : VideoViewTest) : void
            mOwner = owner;
