class BerlinAudioOutput
!!!10928524.cpp!!!	BerlinAudioOutput(in sound : AMP_SND, in av_settings : sp<AVSettings>)

    ALOGD("construct");
    CHECK(sound != NULL);
    snd_handle_ = sound;
    av_settings_handle_ = (BerlinAVSettings*)(av_settings.get());
    CHECK(av_settings_handle_ != NULL);

    aq_setting_ = av_settings_handle_->GetAudioSetting();
    fac_setting_ = av_settings_handle_->GetFactorySetting();

    apply_bypass_ = 0;
    headhpone_plugin_ = 0;

    startWorkThread();
!!!10928652.cpp!!!	~BerlinAudioOutput()
    shutdownWorkThread();
!!!10928780.cpp!!!	getPhyAudioPath(in type : AudioOutputType) : int32_t
    ALOGV("getPhyAudioPath, type: %d", type);
    int32_t phy = AMP_SND_PATH_MAX;
    switch (type) {
        case marvell::AUDIO_OUTPUT_HDMI:
            phy = AMP_SND_PATH_HDMI;
            break;
        case marvell::AUDIO_OUTPUT_SPDIF:
            phy = AMP_SND_PATH_SPDIF;
            break;
        case marvell::AUDIO_OUTPUT_MULTI:
            phy = AMP_SND_PATH_71;
            break;
        case marvell::AUDIO_OUTPUT_LORO:
            phy = AMP_SND_PATH_20;
            break;
        default:
            ALOGW("getPhyAudioPath, unknown type");
            break;
    }
    ALOGV("getPhyAudioPath, phy: %d", phy);
    return phy;
!!!10928908.cpp!!!	getPhyDRCMode(in mode : AudioDRCMode) : int32_t
    ALOGV("getPhyDRCMode, mode: %d", mode);
    // TODO: once we get header file enum for DRC, use switch to avoid order mismatch
    int32_t phy = mode - 1;
    ALOGV("getPhyDRCMode, phy: %d", phy);
    return phy;
!!!10929036.cpp!!!	getPhyChannelMap(in chmap : AudioChannelMap) : int32_t
    ALOGV("getPhyChannelMap, chmap: %d", chmap);
    int32_t phy = -1;
    // The same as channel map for speaker mode
    switch (chmap) {
        case marvell::AUDIO_CHMAP_1_PLUS_1:
            phy = AMP_AUDIO_CHMAP_1_PLUS_1;
            break;
        case marvell::AUDIO_CHMAP_1_0_0:
            phy = AMP_AUDIO_CHMAP_1_0_0;
            break;
        case marvell::AUDIO_CHMAP_2_0_0:
            phy = AMP_AUDIO_CHMAP_2_0_0;
            break;
        case marvell::AUDIO_CHMAP_3_0_0:
            phy = AMP_AUDIO_CHMAP_3_0_0;
            break;
        case marvell::AUDIO_CHMAP_2_1_0:
            phy = AMP_AUDIO_CHMAP_2_1_0;
            break;
        case marvell::AUDIO_CHMAP_3_1_0:
            phy = AMP_AUDIO_CHMAP_3_1_0;
            break;
        case marvell::AUDIO_CHMAP_2_2_0:
            phy = AMP_AUDIO_CHMAP_2_2_0;
            break;
        case marvell::AUDIO_CHMAP_3_2_0:
            phy = AMP_AUDIO_CHMAP_3_2_0;
            break;
        case marvell::AUDIO_CHMAP_3_2_2:
            phy = AMP_AUDIO_CHMAP_3_2_2;
            break;
        case marvell::AUDIO_CHMAP_LTRT:
            phy = AMP_AUDIO_CHMAP_LTRT;
            break;
        default:
            ALOGW("getPhyChannelMap, invalid chmap");
            break;
    }
    ALOGV("getPhyChannelMap, phy: %d", phy);
    return phy;
!!!10929164.cpp!!!	getPhyHDMIFormat(in mode : AudioOutputMode) : int32_t
    ALOGV("getPhyHDMIFormat, mode: %d", mode);
    int32_t phy = -1;
    switch (mode) {
        case marvell::AUDIO_OUTPUT_MODE_PASSTHROUGH:
            phy = AMP_SND_HDMI_FORMAT_RAW_MAIN;
            break;
        case marvell::AUDIO_OUTPUT_MODE_PCM:
            phy = AMP_SND_HDMI_FORMAT_PCM_MULTI;
            break;
        case marvell::AUDIO_OUTPUT_MODE_ENCODED_AC3:
            phy = AMP_SND_HDMI_FORMAT_AC3ENC;
            break;
        case marvell::AUDIO_OUTPUT_MODE_ENCODED_DTS:
            phy = AMP_SND_HDMI_FORMAT_DTSENC;
            break;
        default:
            ALOGW("getPhyHDMIFormat, invalid mode");
            break;
    }
    ALOGV("getPhyHDMIFormat, phy: %d", phy);
    return phy;
!!!10929292.cpp!!!	parsePhyHDMIFormat(in phy : int32_t) : AudioOutputMode
    ALOGV("parsePhyHDMIFormat, phy: %d", phy);
    AudioOutputMode mode = marvell::AUDIO_OUTPUT_MODE_INVALID;
    switch (phy) {
        case AMP_SND_HDMI_FORMAT_RAW_MAIN:
            mode = marvell::AUDIO_OUTPUT_MODE_PASSTHROUGH;
            break;
        case AMP_SND_HDMI_FORMAT_PCM_MULTI:
        case AMP_SND_HDMI_FORMAT_PCM_STREO:
            mode = marvell::AUDIO_OUTPUT_MODE_PCM;
            break;
        case AMP_SND_HDMI_FORMAT_AC3ENC:
            mode = marvell::AUDIO_OUTPUT_MODE_ENCODED_AC3;
            break;
        case AMP_SND_HDMI_FORMAT_DTSENC:
            mode = marvell::AUDIO_OUTPUT_MODE_ENCODED_DTS;
            break;
        default:
            break;
    }
    ALOGV("parsePhyHDMIFormat, mode: %d", mode);
    return mode;
!!!10929420.cpp!!!	getPhySpdifFormat(in mode : AudioOutputMode) : int32_t
    ALOGV("getPhySpdifFormat, mode: %d", mode);
    int32_t phy = -1;
    switch (mode) {
        case marvell::AUDIO_OUTPUT_MODE_PASSTHROUGH:
            phy = AMP_SND_SPDIF_FORMAT_RAW_MAIN;
            break;
        case marvell::AUDIO_OUTPUT_MODE_PCM:
            phy = AMP_SND_SPDIF_FORMAT_STEREO_PCM;
            break;
        case marvell::AUDIO_OUTPUT_MODE_ENCODED_AC3:
            phy = AMP_SND_SPDIF_FORMAT_RAW_ENC_AC3;
            break;
        case marvell::AUDIO_OUTPUT_MODE_ENCODED_DTS:
            phy = AMP_SND_SPDIF_FORMAT_RAW_ENC_DTS;
            break;
        default:
            ALOGW("getPhySpdifFormat, invalid mode");
            break;
    }
    ALOGV("getPhySpdifFormat, phy: %d", phy);
    return phy;
!!!10929548.cpp!!!	parsePhySpdifFormat(in phy : int32_t) : AudioOutputMode
    ALOGV("parsePhySpdifFormat, phy: %d", phy);
    AudioOutputMode mode = marvell::AUDIO_OUTPUT_MODE_INVALID;
    switch (phy) {
        case AMP_SND_SPDIF_FORMAT_RAW_MAIN:
            mode = marvell::AUDIO_OUTPUT_MODE_PASSTHROUGH;
            break;
        case AMP_SND_SPDIF_FORMAT_STEREO_PCM:
        case AMP_SND_SPDIF_FORMAT_MULTI_PCM_LR:
        case AMP_SND_SPDIF_FORMAT_MULTI_PCM_CLFE:
        case AMP_SND_SPDIF_FORMAT_MULTI_PCM_LSRS:
        case AMP_SND_SPDIF_FORMAT_MULTI_PCM_LBRB:
            mode = marvell::AUDIO_OUTPUT_MODE_PCM;
            break;
        case AMP_SND_SPDIF_FORMAT_RAW_ENC_AC3:
            mode = marvell::AUDIO_OUTPUT_MODE_ENCODED_AC3;
            break;
        case AMP_SND_SPDIF_FORMAT_RAW_ENC_DTS:
            mode = marvell::AUDIO_OUTPUT_MODE_ENCODED_DTS;
            break;
        default:
            break;
    }
    ALOGV("parsePhySpdifFormat, mode: %d", mode);
    return mode;
!!!10929676.cpp!!!	getPhyStereoMode(in mode : AudioStereoMode) : int32_t
    ALOGV("getPhyStereoMode, mode: %d", mode);
    int32_t phy = -1;
    switch (mode) {
        case marvell::AUDIO_STEREO_AUTO:
            phy = AMP_AUDIO_STEREO_AUTO;
            break;
        case marvell::AUDIO_STEREO_SRND:
            phy = AMP_AUDIO_STEREO_SRND;
            break;
        case marvell::AUDIO_STEREO_STEREO:
            phy = AMP_AUDIO_STEREO_STEREO;
            break;
        case marvell::AUDIO_STEREO_PLII:
            phy = AMP_AUDIO_STEREO_PLII;
            break;
        default:
            ALOGW("getPhyStereoMode, invalid mode");
            break;
    }
    ALOGV("getPhyStereoMode, phy: %d", phy);
    return phy;
!!!10929804.cpp!!!	parsePhyStereoMode(in phy : int32_t) : AudioStereoMode
    ALOGV("parsePhyStereoMode, phy: %d", phy);
    AudioStereoMode mode = marvell::AUDIO_STEREO_INVALID;
    switch (phy) {
        case AMP_AUDIO_STEREO_AUTO:
            mode = marvell::AUDIO_STEREO_AUTO;
            break;
        case AMP_AUDIO_STEREO_SRND:
            mode = marvell::AUDIO_STEREO_SRND;
            break;
        case AMP_AUDIO_STEREO_STEREO:
            mode = marvell::AUDIO_STEREO_STEREO;
            break;
        case AMP_AUDIO_STEREO_PLII:
            mode = marvell::AUDIO_STEREO_PLII;
            break;
        default:
            break;
    }
    ALOGV("parsePhyStereoMode, mode: %d", mode);
    return mode;
!!!10929932.cpp!!!	getPhyDualMode(in mode : AudioDualMode) : int32_t
    ALOGV("getPhyDualMode, mode: %d", mode);
    int32_t phy = -1;
    switch (mode) {
        case marvell::AUDIO_DUAL_STEREO:
            phy = AMP_AUDIO_DUALMODE_STEREO;
            break;
        case marvell::AUDIO_DUAL_LEFTMONO:
            phy = AMP_AUDIO_DUALMODE_LEFTMONO;
            break;
        case marvell::AUDIO_DUAL_RIGHTMONO:
            phy = AMP_AUDIO_DUALMODE_RGHTMONO;
            break;
        case marvell::AUDIO_DUAL_MIXMONO:
            phy = AMP_AUDIO_DUALMODE_MIXMONO;
            break;
        default:
            ALOGW("getPhyDualMode, invalid mode");
            break;
    }
    ALOGV("getPhyDualMode, phy: %d", phy);
    return phy;
!!!10930060.cpp!!!	parsePhyDualMode(in phy : int32_t) : AudioDualMode
    ALOGV("parsePhyDualMode, phy: %d", phy);
    AudioDualMode mode = marvell::AUDIO_DUAL_INVALID;
    switch (phy) {
        case AMP_AUDIO_DUALMODE_STEREO:
            mode = marvell::AUDIO_DUAL_STEREO;
            break;
        case AMP_AUDIO_DUALMODE_LEFTMONO:
            mode = marvell::AUDIO_DUAL_LEFTMONO;
            break;
        case AMP_AUDIO_DUALMODE_RGHTMONO:
            mode = marvell::AUDIO_DUAL_RIGHTMONO;
            break;
        case AMP_AUDIO_DUALMODE_MIXMONO:
            mode = marvell::AUDIO_DUAL_MIXMONO;
            break;
        default:
            break;
    }
    ALOGV("parsePhyDualMode, mode: %d", mode);
    return mode;
!!!10930188.cpp!!!	getPhySpeakerLFEMode(in mode : AudioSpeakerLFEMode) : int32_t
    ALOGV("getPhySpeakerLFEMode, mode: %d", mode);
    int32_t phy = -1;
    switch (mode) {
        case marvell::AUDIO_SPK_LFE_OFF:
            phy = AMP_AUDIO_LFE_OFF;
            break;
        case marvell::AUDIO_SPK_LFE_ON:
            phy = AMP_AUDIO_LFE_ON;
            break;
        case marvell::AUDIO_SPK_LFE_DUAL:
            phy = AMP_AUDIO_LFE_DUAL;
            break;
        default:
            ALOGW("getPhySpeakerLFEMode, invalid mode");
            break;
    }
    ALOGV("getPhySpeakerLFEMode, phy: %d", phy);
    return phy;
!!!10930316.cpp!!!	parsePhySpeakerLFEMode(in phy : int32_t) : AudioSpeakerLFEMode
    ALOGV("parsePhySpeakerLFEMode, phy: %d", phy);
    AudioSpeakerLFEMode mode = marvell::AUDIO_SPK_LFE_INVALID;
    switch (phy) {
        case AMP_AUDIO_LFE_OFF:
            mode = marvell::AUDIO_SPK_LFE_OFF;
            break;
        case AMP_AUDIO_LFE_ON:
            mode = marvell::AUDIO_SPK_LFE_ON;
            break;
        case AMP_AUDIO_LFE_DUAL:
            mode = marvell::AUDIO_SPK_LFE_DUAL;
            break;
        default:
            break;
    }
    ALOGV("parsePhySpeakerLFEMode, mode: %d", mode);
    return mode;
!!!10930444.cpp!!!	getPhySpeakerChannelMap(in chmap : AudioSpeakerChannelMap) : int32_t
    ALOGV("getPhySpeakerChannelMap, chmap: %d", chmap);
    int32_t phy = -1;
    switch (chmap) {
        case marvell::AUDIO_SPK_CHMAP_1_PLUS_1:
            phy = AMP_AUDIO_CHMAP_1_PLUS_1;
            break;
        case marvell::AUDIO_SPK_CHMAP_1_0_0:
            phy = AMP_AUDIO_CHMAP_1_0_0;
            break;
        case marvell::AUDIO_SPK_CHMAP_2_0_0:
            phy = AMP_AUDIO_CHMAP_2_0_0;
            break;
        case marvell::AUDIO_SPK_CHMAP_3_0_0:
            phy = AMP_AUDIO_CHMAP_3_0_0;
            break;
        case marvell::AUDIO_SPK_CHMAP_2_1_0:
            phy = AMP_AUDIO_CHMAP_2_1_0;
            break;
        case marvell::AUDIO_SPK_CHMAP_3_1_0:
            phy = AMP_AUDIO_CHMAP_3_1_0;
            break;
        case marvell::AUDIO_SPK_CHMAP_2_2_0:
            phy = AMP_AUDIO_CHMAP_2_2_0;
            break;
        case marvell::AUDIO_SPK_CHMAP_3_2_0:
            phy = AMP_AUDIO_CHMAP_3_2_0;
            break;
        case marvell::AUDIO_SPK_CHMAP_3_2_2:
            phy = AMP_AUDIO_CHMAP_3_2_2;
            break;
        case marvell::AUDIO_SPK_CHMAP_LTRT:
            phy = AMP_AUDIO_CHMAP_LTRT;
            break;
        default:
            ALOGW("getPhySpeakerChannelMap, invalid chmap");
            break;
    }
    ALOGV("getPhySpeakerChannelMap, phy: %d", phy);
    return phy;
!!!10930572.cpp!!!	parsePhySpeakerChannelMap(in phy : int32_t) : AudioSpeakerChannelMap
    ALOGV("parsePhySpeakerChannelMap, phy: %d", phy);
    AudioSpeakerChannelMap chmap = marvell::AUDIO_SPK_CHMAP_INVALID;
    switch (phy) {
        case AMP_AUDIO_CHMAP_1_PLUS_1:
            chmap = marvell::AUDIO_SPK_CHMAP_1_PLUS_1;
            break;
        case AMP_AUDIO_CHMAP_1_0_0:
            chmap = marvell::AUDIO_SPK_CHMAP_1_0_0;
            break;
        case AMP_AUDIO_CHMAP_2_0_0:
            chmap = marvell::AUDIO_SPK_CHMAP_2_0_0;
            break;
        case AMP_AUDIO_CHMAP_3_0_0:
            chmap = marvell::AUDIO_SPK_CHMAP_3_0_0;
            break;
        case AMP_AUDIO_CHMAP_2_1_0:
            chmap = marvell::AUDIO_SPK_CHMAP_2_1_0;
            break;
        case AMP_AUDIO_CHMAP_3_1_0:
            chmap = marvell::AUDIO_SPK_CHMAP_3_1_0;
            break;
        case AMP_AUDIO_CHMAP_2_2_0:
            chmap = marvell::AUDIO_SPK_CHMAP_2_2_0;
            break;
        case AMP_AUDIO_CHMAP_3_2_0:
            chmap = marvell::AUDIO_SPK_CHMAP_3_2_0;
            break;
        case AMP_AUDIO_CHMAP_LTRT:
            chmap = marvell::AUDIO_SPK_CHMAP_LTRT;
            break;
        default:
            break;
    }
    ALOGV("parsePhySpeakerChannelMap, chmap: %d", chmap);
    return chmap;
!!!10930700.cpp!!!	getPhyLFEDownmixMode(in mode : AudioLFEDownmixMode) : int32_t
    ALOGV("getPhyLFEDownmixMode, mode: %d", mode);
    // PARALFEDMX cEnable: 0 (Off), 1 (On)
    int32_t phy = mode - 1;
    ALOGV("getPhyLFEDownmixMode, phy: %d", phy);
    return phy;
!!!10930828.cpp!!!	parsePhyLFEDownmixMode(in phy : int32_t) : AudioLFEDownmixMode
    ALOGV("parsePhyLFEDownmixMode, phy: %d", phy);
    AudioLFEDownmixMode mode = AudioLFEDownmixMode(phy + 1);
    ALOGV("parsePhyLFEDownmixMode, mode: %d", mode);
    return mode;
!!!10930956.cpp!!!	GetAudioDRCMode(inout mode : AudioDRCMode) : status_t
    AVS_FUNC_ENTER
    // TODO: MV_AQS_GetDRCMode
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10931084.cpp!!!	SetAudioDRCMode(in mode : AudioDRCMode) : status_t
    AVS_FUNC_ENTER
    ALOGD("SetAudioDRCMode, mode: %d", mode);
    AVSettingValue value;
    String8 key;
    int32_t phy_val = getPhyDRCMode(mode);
    // TODO: MV_AQS_SetDRCMode
    // Notify physical value change: observed by player for AQ
    // Logical key-value will be notified by avsettings framework by default
    value.setInt(phy_val);
    key = AVSettingsHelper::GetFullKey(
            marvell::kAudioOutputSettingsPrefix,
            marvell::kPhyDrcMode);
    ALOGD("Notifying DRC mode physical value %d", phy_val);
    av_settings_handle_->NotifyValue(key.string(), value);
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10931212.cpp!!!	GetAudioChannelMap(inout chmap : AudioChannelMap) : status_t
    AVS_FUNC_ENTER
    // TODO: MV_AQS_GetChMap
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10931340.cpp!!!	SetAudioChannelMap(in chmap : AudioChannelMap) : status_t
    AVS_FUNC_ENTER
    ALOGD("SetAudioChannelMap, chmap: %d", chmap);
    AVSettingValue value;
    String8 key;
    int32_t phy_val = getPhyChannelMap(chmap);
    // TODO: AQ/AMP set channel map
    // Notify physical value change: observed by player for AQ
    // Logical key-value will be notified by avsettings framework by default
    value.setInt(phy_val);
    key = AVSettingsHelper::GetFullKey(
            marvell::kAudioOutputSettingsPrefix,
            marvell::kPhyChannelMap);
    ALOGD("Notifying channel map physical value %d", phy_val);
    av_settings_handle_->NotifyValue(key.string(), value);
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10931468.cpp!!!	GetAudioLFEDownmixMode(inout mode : AudioLFEDownmixMode) : status_t
    AVS_FUNC_ENTER
    AMP_APP_PARALFEDMX param;
    AVS_CHECK(AMP_SND_GetLFEDmxMode(&param), "AMP_SND_GetLFEDmxMode");
    ALOGD("GetAudioLFEDownmixMode, phy %d", param.cEnable);
    *mode = parsePhyLFEDownmixMode(param.cEnable);
    if (*mode == marvell::AUDIO_LFE_DOWNMIX_INVALID) {
        return android::BAD_VALUE;
    }
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10931596.cpp!!!	SetAudioLFEDownmixMode(in mode : AudioLFEDownmixMode) : status_t
    AVS_FUNC_ENTER
    ALOGD("SetAudioLFEDownmixMode, mode %d", mode);
    AMP_APP_PARALFEDMX param;
    int phy = getPhyLFEDownmixMode(mode);
    if (phy == -1) {
        return android::BAD_VALUE;
    }
    param.cEnable = phy;
    AVS_CHECK(AMP_SND_SetLFEDmxMode(&param), "AMP_SND_SetLFEDmxMode");
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10931724.cpp!!!	GetAudioOutputMode(in type : AudioOutputType, inout mode : AudioOutputMode) : status_t
    AVS_FUNC_ENTER
    HRESULT ret = SUCCESS;
    ALOGD("GetAudioOutputMode, type %d", type);
    switch (type) {
        case marvell::AUDIO_OUTPUT_HDMI:
            AMP_SND_HDMI_FORMAT hdmi_format;
            AVS_CHECK(AMP_SND_GetHDMIFormat(&hdmi_format), "AMP_SND_GetHDMIFormat");
            *mode = parsePhyHDMIFormat(hdmi_format);
            break;

        case marvell::AUDIO_OUTPUT_SPDIF:
            AMP_SND_SPDIF_FORMAT spdif_format;
            AVS_CHECK(AMP_SND_GetSpdifFormat(&spdif_format), "AMP_SND_GetSpdifFormat");
            *mode = parsePhySpdifFormat(spdif_format);
            break;

        default:
            ALOGW("GetAudioOutputMode, invalid audio output type: %d", type);
            return android::BAD_VALUE;
    }
    if (*mode == marvell::AUDIO_OUTPUT_MODE_INVALID) {
        return android::BAD_VALUE;
    }
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10931852.cpp!!!	SetAudioOutputMode(in type : AudioOutputType, in mode : AudioOutputMode) : status_t
    AVS_FUNC_ENTER
    HRESULT ret = SUCCESS;
    int32_t phy = -1;
    ALOGD("SetAudioOutputMode, type %d mode %d", type, mode);
    switch (type) {
        case marvell::AUDIO_OUTPUT_HDMI:
            phy = getPhyHDMIFormat(mode);
            if (phy < 0) {
                return android::BAD_VALUE;
            }
            AVS_CHECK(AMP_SND_SetHDMIFormat((AMP_SND_HDMI_FORMAT)phy),
                    "AMP_SND_SetHDMIFormat");
            break;

        case marvell::AUDIO_OUTPUT_SPDIF:
            phy = getPhySpdifFormat(mode);
            if (phy < 0) {
                return android::BAD_VALUE;
            }
            AVS_CHECK(AMP_SND_SetSpdifFormat((AMP_SND_SPDIF_FORMAT)phy),
                    "AMP_SND_SetSpdifFormat");
            break;

        default:
            ALOGW("SetAudioOutputMode, invalid audio output type: %d", type);
            return android::BAD_VALUE;
    }
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10931980.cpp!!!	GetAudioSpeakerMode(inout chmap : AudioSpeakerChannelMap, inout lfe : AudioSpeakerLFEMode) : status_t
    AVS_FUNC_ENTER
    AMP_APP_PARASPKMODE param;
    AVS_CHECK(AMP_SND_GetSpkMode(&param), "AMP_SND_GetSpkMode");
    ALOGD("GetAudioSpeakerMode, phy chmap %d, phy lfe %d",
            param.eSpkMode, param.eLfeMode);
    *chmap = parsePhySpeakerChannelMap(param.eSpkMode);
    *lfe = parsePhySpeakerLFEMode(param.eLfeMode);
    if (*chmap == marvell::AUDIO_SPK_CHMAP_INVALID ||
            *lfe == marvell::AUDIO_SPK_LFE_INVALID) {
        return android::BAD_VALUE;
    }
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10932108.cpp!!!	SetAudioSpeakerMode(in chmap : AudioSpeakerChannelMap, in lfe : AudioSpeakerLFEMode) : status_t
    AVS_FUNC_ENTER
    ALOGD("SetAudioSpeakerMode, chmap %d lfe %d", chmap, lfe);
    AMP_APP_PARASPKMODE param;
    int phy_chmap = getPhySpeakerChannelMap(chmap);
    int phy_lfe = getPhySpeakerLFEMode(lfe);
    if (phy_chmap == -1 || phy_lfe == -1) {
        return android::BAD_VALUE;
    }
    param.eSpkMode = phy_chmap;
    param.eLfeMode = phy_lfe;
    AVS_CHECK(AMP_SND_SetSpkMode(&param), "AMP_SND_SetSpkMode");
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10932236.cpp!!!	GetAudioStereoMode(in type : AudioOutputType, inout mode : AudioStereoMode) : status_t
    AVS_FUNC_ENTER
    ALOGD("GetAudioStereoMode, type %d", type);
    AMP_APP_PARASTEREO param;
    AVS_CHECK(AMP_SND_GetStereoMode((AMP_SND_PATH)getPhyAudioPath(type), &param),
            "AMP_SND_GetStereoMode");
    ALOGD("GetAudioStereoMode, phy %d", param.eStereoMode);
    *mode = parsePhyStereoMode(param.eStereoMode);
    if (*mode == marvell::AUDIO_STEREO_INVALID) {
        return android::BAD_VALUE;
    }
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10932364.cpp!!!	SetAudioStereoMode(in type : AudioOutputType, in mode : AudioStereoMode) : status_t
    AVS_FUNC_ENTER
    ALOGD("SetAudioStereoMode, type %d mode %d", type, mode);
    AVSettingValue value;
    String8 key;
    AMP_APP_PARASTEREO param;
    int phy = getPhyStereoMode(mode);
    if (phy == -1) {
        return android::BAD_VALUE;
    }
    param.eStereoMode = phy;
    AVS_CHECK(AMP_SND_SetStereoMode((AMP_SND_PATH)getPhyAudioPath(type), &param),
            "AMP_SND_SetStereoMode");

    // Notify physical value change: observed by player
    // Logical key-value will be notified by avsettings framework by default
    value.setInt(phy);
    key = AVSettingsHelper::GetFullKey(
            marvell::kAudioOutputSettingsPrefix,
            marvell::kPhyStereoMode);
    ALOGD("Notifying stereo mode physical value %d", phy);
    av_settings_handle_->NotifyValue(key.string(), value);

    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10932492.cpp!!!	GetAudioDualMode(in type : AudioOutputType, inout mode : AudioDualMode) : status_t
    AVS_FUNC_ENTER
    ALOGD("GetAudioDualMode, type %d", type);
    AMP_APP_PARADUALMODE param;
    AVS_CHECK(AMP_SND_GetDualMonoMode((AMP_SND_PATH)getPhyAudioPath(type), &param),
            "AMP_SND_GetDualMonoMode");
    ALOGD("GetAudioDualMode, phy %d", param.eDualMode);
    *mode = parsePhyDualMode(param.eDualMode);
    if (*mode == marvell::AUDIO_DUAL_INVALID) {
        return android::BAD_VALUE;
    }
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10932620.cpp!!!	SetAudioDualMode(in type : AudioOutputType, in mode : AudioDualMode) : status_t
    AVS_FUNC_ENTER
    ALOGD("SetAudioDualMode, type %d mode %d", type, mode);
    AVSettingValue value;
    String8 key;
    AMP_APP_PARADUALMODE param;
    int phy = getPhyDualMode(mode);
    if (phy == -1) {
        return android::BAD_VALUE;
    }
    param.eDualMode = phy;
    AVS_CHECK(AMP_SND_SetDualMonoMode((AMP_SND_PATH)getPhyAudioPath(type), &param),
            "AMP_SND_SetDualMonoMode");

    // Notify physical value change: observed by player
    // Logical key-value will be notified by avsettings framework by default
    value.setInt(phy);
    key = AVSettingsHelper::GetFullKey(
            marvell::kAudioOutputSettingsPrefix,
            marvell::kPhyDualMode);
    ALOGD("Notifying dual mode physical value %d", phy);
    av_settings_handle_->NotifyValue(key.string(), value);

    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10932748.cpp!!!	SetMasterVolume(in level : float) : status_t
    AVS_FUNC_ENTER
    int32_t amp_volume;
    // Input range is [0.00, 1.00]
    // Value range for AMP_SND_SetMasterVolume is [0, 100]
    // Disable log algorithm in avsettings because AQ already has volume curve implementation
#ifdef AVS_VOLUME_ALGORITHM_ENABLE
    amp_volume = LogToLinear(level);
#else
    amp_volume = (int32_t)(100 * level + 0.5);
#endif
    ALOGD("SetMasterVolume, level %f amp_volume %d", level, amp_volume);
    AVS_CHECK(AMP_SND_SetMasterVolume(amp_volume), "AMP_SND_SetMasterVolume");
    AVS_FUNC_LEAVE
    return android::OK;

bailout:
    return android::UNKNOWN_ERROR;
!!!10932876.cpp!!!	LogToLinear(in volume : float) : int
    return volume ? 100 - int(dBConvertInverse * log(volume) + 0.5) : 0;
