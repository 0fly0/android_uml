class OldPushbackInputStreamTest
!!!2682779.java!!!	test_ConstructorLjava_io_InputStream() : void
        // Test for method java.io.PushbackInputStream(java.io.InputStream)
        try {
            pis = new PushbackInputStream(new ByteArrayInputStream("Hello"
                    .getBytes()));
            pis.unread("He".getBytes());
        } catch (IOException e) {
            // Correct
            // Pushback buffer should be full
            return;

        }
        fail("Failed to throw exception on unread when buffer full");
!!!2682907.java!!!	test_ConstructorLjava_io_InputStreamI() : void
        ByteArrayInputStream bas = new ByteArrayInputStream("Hello".getBytes());
        try {
            pis = new PushbackInputStream(bas, 0);
            fail("Test 1: IllegalArgumentException expected.");
        } catch (IllegalArgumentException e) {
            // Expected.
        }
        try {
            pis = new PushbackInputStream(bas, -1);
            fail("Test 2: IllegalArgumentException expected.");
        } catch (IllegalArgumentException e) {
            // Expected.
        }

        pis = new PushbackInputStream(bas , 5);
        try {
            pis.unread("Hello world".getBytes());
            fail("Test 3: IOException expected when the unread buffer is full.");
        } catch (IOException e) {
            // Expected.
        }
!!!2683035.java!!!	test_close() : void
        PushbackInputStream tobj;

        tobj = new PushbackInputStream(underlying);
        tobj.close();
        tobj.close();
        tobj = new PushbackInputStream(underlying);
        underlying.throwExceptionOnNextUse = true;
        try {
            tobj.close();
            fail("IOException not thrown.");
        } catch (IOException e) {
            // expected
        }
!!!2683163.java!!!	test_available() : void
        PushbackInputStream tobj;

        tobj = new PushbackInputStream(underlying);
        assertEquals("Wrong number!", 30, tobj.available());
        underlying.throwExceptionOnNextUse = true;
        try {
            tobj.available();
            fail("IOException not thrown.");
        } catch (IOException e) {
            // expected
        }
!!!2683291.java!!!	test_markSupported() : void
        // Test for method boolean java.io.PushbackInputStream.markSupported()
        assertTrue("markSupported returned true", !pis.markSupported());
!!!2683419.java!!!	test_read() : void
        PushbackInputStream tobj;

        tobj = new PushbackInputStream(underlying);
        assertEquals("Test 1: Incorrect byte read;", 66, tobj.read());
        underlying.throwExceptionOnNextUse = true;
        try {
            tobj.read();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // expected
        }

        assertEquals("Test 3: Incorrect byte read;",
                fileString.getBytes()[0], pis.read());
!!!2683547.java!!!	test_read$BII() : void
        PushbackInputStream tobj;
        byte[] buf = ("01234567890123456789").getBytes();

        tobj = new PushbackInputStream(underlying);
        tobj.read(buf, 6, 5);
        assertEquals("Wrong value read!", "BEGIN", new String(buf, 6, 5));
        assertEquals("Too much read!", "012345BEGIN123456789", new String(buf));
        underlying.throwExceptionOnNextUse = true;
        try {
            tobj.read(buf, 6, 5);
            fail("IOException not thrown.");
        } catch (IOException e) {
            // expected
        }
!!!2683675.java!!!	test_read$BII_Exception() : void
        PushbackInputStream tobj;
        byte[] buf = new byte[10];

        tobj = new PushbackInputStream(underlying);
        try {
            tobj.read(buf, -1, 1);
            fail("IndexOutOfBoundsException was not thrown");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
        try {
            tobj.read(buf, 0, -1);
            fail("IndexOutOfBoundsException was not thrown");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
        try {
            tobj.read(buf, 10, 1);
            fail("IndexOutOfBoundsException was not thrown");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
!!!2683803.java!!!	test_skipJ() : void
        PushbackInputStream tobj;
        byte[] buf = ("01234567890123456789").getBytes();

        tobj = new PushbackInputStream(underlying);
        tobj.skip(6);
        assertEquals("Wrong number!", 30 - 6, tobj.available());
        tobj.skip(1000000);
        tobj.skip(1000000);
        underlying.throwExceptionOnNextUse = true;
        try {
            tobj.skip(1);
            fail("IOException not thrown.");
        } catch (IOException e) {
            // expected
        }

        // Test for method long java.io.PushbackInputStream.skip(long)
        try {
            buf = new byte[50];
            pis.skip(50);
            pis.read(buf, 0, buf.length);
            assertTrue("a) Incorrect bytes read", new String(buf)
                    .equals(fileString.substring(50, 100)));
            pis.unread(buf);
            pis.skip(25);
            byte[] buf2 = new byte[25];
            pis.read(buf2, 0, buf2.length);
            assertTrue("b) Incorrect bytes read", new String(buf2)
                    .equals(fileString.substring(75, 100)));
        } catch (Exception e) {
            fail("Exception during test : " + e.getMessage());
        }
!!!2683931.java!!!	test_unread$B() : void
        PushbackInputStream tobj;
        String str2 = "0123456789";
        byte[] buf2 = str2.getBytes();
        byte[] readBuf = new byte[10];

        tobj = new PushbackInputStream(underlying, 10);
        tobj.unread(buf2);
        assertEquals("Wrong number!", 30 + 10, tobj.available());
        try {
            tobj.unread(buf2);
            fail("IOException not thrown.");
        } catch (IOException e) {
            // expected
        }
        tobj.read(readBuf);
        assertEquals("Incorrect bytes read", str2, new String(readBuf));
        underlying.throwExceptionOnNextUse = true;
        try {
            tobj.read(buf2);
            fail("IOException not thrown.");
        } catch (IOException e) {
            // expected
        }

        // Test for method void java.io.PushbackInputStream.unread(byte [])
        try {
            byte[] buf = new byte[100];
            pis.read(buf, 0, buf.length);
            assertTrue("Incorrect bytes read", new String(buf)
                    .equals(fileString.substring(0, 100)));
            pis.unread(buf);
            pis.read(buf, 0, 50);
            assertTrue("Failed to unread bytes", new String(buf, 0, 50)
                    .equals(fileString.substring(0, 50)));
        } catch (IOException e) {
            fail("IOException during unread test : " + e.getMessage());
        }
!!!2684059.java!!!	test_unread$BII() : void
        PushbackInputStream tobj;
        String str2 = "0123456789";
        byte[] buf2 = (str2 + str2 + str2).getBytes();
        byte[] readBuf = new byte[10];

        tobj = new PushbackInputStream(underlying, 10);
        tobj.unread(buf2, 15, 10);
        assertEquals("Wrong number!", 30 + 10, tobj.available());
        try {
            tobj.unread(buf2, 15, 10);
            fail("IOException not thrown.");
        } catch (IOException e) {
            // expected
        }
        tobj.read(readBuf);
        assertEquals("Incorrect bytes read", "5678901234", new String(readBuf));
        underlying.throwExceptionOnNextUse = true;
        try {
            tobj.read(buf2, 15, 10);
            fail("IOException not thrown.");
        } catch (IOException e) {
            // expected
        }

        // Test for method void java.io.PushbackInputStream.unread(byte [], int,
        // int)
        try {
            byte[] buf = new byte[100];
            pis.read(buf, 0, buf.length);
            assertTrue("Incorrect bytes read", new String(buf)
                    .equals(fileString.substring(0, 100)));
            pis.unread(buf, 50, 50);
            pis.read(buf, 0, 50);
            assertTrue("Failed to unread bytes", new String(buf, 0, 50)
                    .equals(fileString.substring(50, 100)));
        } catch (IOException e) {
            fail("IOException during unread test : " + e.getMessage());
        }

        try {
            byte[] buf = new byte[10];
            pis.unread(buf, 0, -1);
            fail("IndexOutOfBoundsException was not thrown");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            byte[] buf = new byte[10];
            pis.unread(buf, -1, 1);
            fail("IndexOutOfBoundsException was not thrown");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            byte[] buf = new byte[10];
            pis.unread(buf, 10, 1);
            fail("IndexOutOfBoundsException was not thrown");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
!!!2684187.java!!!	test_unreadI() : void
        PushbackInputStream tobj;

        tobj = new PushbackInputStream(underlying);
        tobj.unread(23); // Why does this work?!?
        tobj.skip(2);
        tobj.unread(23);
        assertEquals("Wrong number!", 30, tobj.available());
        assertEquals("Wrong value read!", 23, tobj.read());
        tobj.unread(13);
        try {
            tobj.unread(13);
            fail("IOException not thrown (ACTUALLY NOT SURE WHETHER IT REALLY MUST BE THROWN!).");
        } catch (IOException e) {
            // expected
        }

        // Test for method void java.io.PushbackInputStream.unread(int)
        try {
            int x;
            assertTrue("Incorrect byte read", (x = pis.read()) == fileString
                    .getBytes()[0]);
            pis.unread(x);
            assertTrue("Failed to unread", pis.read() == x);
        } catch (IOException e) {
            fail("IOException during read test : " + e.getMessage());
        }
!!!2684315.java!!!	setUp() : void

        pis = new PushbackInputStream(new ByteArrayInputStream(fileString
                .getBytes()), 65535);
!!!2684443.java!!!	tearDown() : void
        try {
            pis.close();
        } catch (IOException e) {
            fail("IOException during tearDown : " + e.getMessage());
        }
