class DmpCecFeatureTest
!!!12078220.java!!!	setUp() : void
        super.setUp();
        //let the CecManager to be prepared
        try {
            Thread.sleep(5000);
        }
        catch (InterruptedException e) {

        }
        mCECDeviceType = mCecManager.getCurrentCecDeviceType();
        assertEquals(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_DMP, mCECDeviceType);
        IBinder cecServiceBinder = mCecManager.getCecServiceImpl();
        mIDmpCecService = IDmpCecService.Stub.asInterface(cecServiceBinder);
        assertTrue(null != mIDmpCecService);
        assertTrue(mIDmpCecService.isOfType(mCECDeviceType));
        ensureCecEnabled();
        if ((null == mIDmpCecService)
            || (mCECDeviceType == HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_INVALID)) {
            Log.e(TAG, "Test setUp failed!");
            return;
        }
!!!12078348.java!!!	ensureCecEnabled() : void
        try {
            if (null != mIDmpCecService && !mIDmpCecService.isCECEnabled()) {
                if (mIDmpCecService.enableCEC(false)) {
                    Log.e(TAG, "Enable CEC feature failed!");
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when enable CEC feature!");
        }
!!!12078476.java!!!	restorePrevCecStatus() : void
        try {
            if ((null != mIDmpCecService)) {
                if (bHDMICEC_OldEnableStatus) {
                    mIDmpCecService.enableCEC(false);
                } else {
                    mIDmpCecService.disableCEC();
                }
            }
        }
        catch (RemoteException ex) {
            ex.printStackTrace();
        }
!!!12078604.java!!!	tearDown() : void
        super.tearDown();
!!!12078732.java!!!	testEnableCEC() : void
        try {
            assertTrue("The whole HDMI CEC Functionality cannot be enabled!",
                    mIDmpCecService.enableCEC(false));
            //ignoring the concurrent possiblity
            assertTrue("The whole HDMI CEC Functionality should be enabled after enabling it "
                       "right now!", mIDmpCecService.isCECEnabled());
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when testEnableCEC()!");
        }
!!!12078860.java!!!	testDisableCEC() : void
        try {
            assertTrue("The whole HDMI CEC Functionality cannot be disabled!",
                    mIDmpCecService.disableCEC());
            //ignoring the concurrent possiblity
            assertFalse("The whole HDMI CEC Functionality should be disabled after diabling it "
                        "right now!", mIDmpCecService.isCECEnabled());
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when testDisableCEC()!");
        }
!!!12078988.java!!!	testCecOTPFeature() : void
        try {
            assertTrue("The common CEC OTP Feature test failed!",
                    mIDmpCecService.setActiveSource());
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when testCecOTPFeature()!");
        }
!!!12079116.java!!!	testCecRoutingChangeFeature() : void
        try {
            assertTrue("The common RoutingChange Feature should be supported!",
                    mIDmpCecService.sendRoutingChange());
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when testCecRoutingChangeFeature()!");
        }
!!!12079244.java!!!	testSetPowerStatus() : void
        try {
            assertTrue("CEC Suspend failed!",
                    mIDmpCecService.setPowerStatus(HdmiCecUtils.POWER_MODE_SUSPEND));

            assertTrue("CEC Resume failed!",
                    mIDmpCecService.setPowerStatus(HdmiCecUtils.POWER_MODE_RESUME));
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when testCecOTPFeature()!");
        }
