class JetPlayer
!!!6801420.java!!!	getJetPlayer() : JetPlayer
        if (singletonRef == null) {
            singletonRef = new JetPlayer();
        }
        return singletonRef;
!!!6801548.java!!!	clone() : Object
        // JetPlayer is a singleton class,
        // so you can't clone a JetPlayer instance
        throw new CloneNotSupportedException();    
!!!6801676.java!!!	JetPlayer()

        // remember which looper is associated with the JetPlayer instanciation
        if ((mInitializationLooper = Looper.myLooper()) == null) {
            mInitializationLooper = Looper.getMainLooper();
        }
        
        int buffSizeInBytes = AudioTrack.getMinBufferSize(JET_OUTPUT_RATE,
                JET_OUTPUT_CHANNEL_CONFIG, AudioFormat.ENCODING_PCM_16BIT);
        
        if ((buffSizeInBytes != AudioTrack.ERROR) 
                && (buffSizeInBytes != AudioTrack.ERROR_BAD_VALUE)) {
                            
            native_setup(new WeakReference<JetPlayer>(this),
                    JetPlayer.getMaxTracks(),
                    // bytes to frame conversion: sample format is ENCODING_PCM_16BIT, 2 channels
                    // 1200 == minimum buffer size in frames on generation 1 hardware
                    Math.max(1200, buffSizeInBytes / 4));
        }
!!!6801804.java!!!	finalize() : void
 
        native_finalize(); 
!!!6801932.java!!!	release() : void
        native_release();
        singletonRef = null;
!!!6802060.java!!!	getMaxTracks() : int
        return JetPlayer.MAXTRACKS;
!!!6802188.java!!!	loadJetFile(in path : String) : boolean
        return native_loadJetFromFile(path);
!!!6802316.java!!!	loadJetFile(inout afd : AssetFileDescriptor) : boolean
        long len = afd.getLength();
        if (len < 0) {
            throw new AndroidRuntimeException("no length for fd");
        }
        return native_loadJetFromFileD(
                afd.getFileDescriptor(), afd.getStartOffset(), len);
!!!6802444.java!!!	closeJetFile() : boolean
        return native_closeJetFile();
!!!6802572.java!!!	play() : boolean
        return native_playJet();
!!!6802700.java!!!	pause() : boolean
        return native_pauseJet();
!!!6802828.java!!!	queueJetSegment(in segmentNum : int, in libNum : int, in repeatCount : int, in transpose : int, in muteFlags : int, in userID : byte) : boolean
        return native_queueJetSegment(segmentNum, libNum, repeatCount, 
                transpose, muteFlags, userID);
!!!6802956.java!!!	queueJetSegmentMuteArray(in segmentNum : int, in libNum : int, in repeatCount : int, in transpose : int, inout muteArray : boolean, in userID : byte) : boolean
        if (muteArray.length != JetPlayer.getMaxTracks()) {
            return false;
        }
        return native_queueJetSegmentMuteArray(segmentNum, libNum, repeatCount,
                transpose, muteArray, userID);
!!!6803084.java!!!	setMuteFlags(in muteFlags : int, inout sync : boolean) : boolean
        return native_setMuteFlags(muteFlags, sync);
!!!6803212.java!!!	setMuteArray(inout muteArray : boolean, inout sync : boolean) : boolean
        if(muteArray.length != JetPlayer.getMaxTracks())
            return false;
        return native_setMuteArray(muteArray, sync);
!!!6803340.java!!!	setMuteFlag(in trackId : int, inout muteFlag : boolean, inout sync : boolean) : boolean
        return native_setMuteFlag(trackId, muteFlag, sync);
!!!6803468.java!!!	triggerClip(in clipId : int) : boolean
        return native_triggerClip(clipId);
!!!6803596.java!!!	clearQueue() : boolean
        return native_clearQueue();
!!!6803980.java!!!	setEventListener(inout listener : OnJetEventListener) : void
        setEventListener(listener, null);
!!!6804108.java!!!	setEventListener(inout listener : OnJetEventListener, inout handler : Handler) : void
        synchronized(mEventListenerLock) {
            
            mJetEventListener = listener;
            
            if (listener != null) {
                if (handler != null) {
                    mEventHandler = new NativeEventHandler(this, handler.getLooper());
                } else {
                    // no given handler, use the looper the AudioTrack was created in
                    mEventHandler = new NativeEventHandler(this, mInitializationLooper);
                }
            } else {
                mEventHandler = null;
            }
            
        }
!!!6806668.java!!!	postEventFromNative(inout jetplayer_ref : Object, in what : int, in arg1 : int, in arg2 : int) : void
        //logd("Event posted from the native side: event="+ what + " args="+ arg1+" "+arg2);
        JetPlayer jet = (JetPlayer)((WeakReference)jetplayer_ref).get();

        if ((jet != null) && (jet.mEventHandler != null)) {
            Message m = 
                jet.mEventHandler.obtainMessage(what, arg1, arg2, null);
            jet.mEventHandler.sendMessage(m);
        }
        
!!!6806796.java!!!	logd(in msg : String) : void
        Log.d(TAG, "[ android.media.JetPlayer ] " + msg);
!!!6806924.java!!!	loge(in msg : String) : void
        Log.e(TAG, "[ android.media.JetPlayer ] " + msg);
